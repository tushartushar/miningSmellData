Implementation smell,Namespace,Class,File,Method,Description
Long Method,TvPlugin,GuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\GuideBase.cs,Update,The method has 361 lines of code.
Long Method,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,OnClicked,The method has 174 lines of code.
Long Method,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,Update,The method has 530 lines of code.
Long Method,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,LoadDirectory,The method has 178 lines of code.
Long Method,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnDeleteRecording,The method has 118 lines of code.
Long Method,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,Compare,The method has 218 lines of code.
Long Method,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,LoadDirectory,The method has 167 lines of code.
Long Method,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,Compare,The method has 127 lines of code.
Long Method,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnAction,The method has 244 lines of code.
Long Method,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnMessage,The method has 266 lines of code.
Long Method,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,SetProperties,The method has 149 lines of code.
Long Method,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderSingleChannel,The method has 480 lines of code.
Long Method,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderChannel,The method has 549 lines of code.
Long Method,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,ShowContextMenu,The method has 127 lines of code.
Long Method,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnSelectItem,The method has 185 lines of code.
Long Method,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetStartTimeFromNow,The method has 208 lines of code.
Long Method,TvPlugin,GUITVConflicts,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVConflicts.cs,SetLabels,The method has 103 lines of code.
Long Method,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,OnAction,The method has 468 lines of code.
Long Method,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,OnMessage,The method has 329 lines of code.
Long Method,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The method has 183 lines of code.
Long Method,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowQualitySettingsMenu,The method has 116 lines of code.
Long Method,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnAction,The method has 244 lines of code.
Long Method,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnMessage,The method has 271 lines of code.
Long Method,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,SetProperties,The method has 167 lines of code.
Long Method,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderSingleChannel,The method has 524 lines of code.
Long Method,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderChannel,The method has 600 lines of code.
Long Method,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,ShowContextMenu,The method has 130 lines of code.
Long Method,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnSelectItem,The method has 179 lines of code.
Long Method,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetStartTimeFromNow,The method has 208 lines of code.
Long Method,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnGlobalMessage,The method has 120 lines of code.
Long Method,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ChannelTuneFailedNotifyUser,The method has 110 lines of code.
Long Method,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ViewChannelAndCheck,The method has 161 lines of code.
Long Method,TvPlugin,TvMiniGuide,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvMiniGuide.cs,FillChannelList,The method has 227 lines of code.
Long Method,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnQuickRecord,The method has 117 lines of code.
Long Method,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnAdvancedRecord,The method has 175 lines of code.
Long Method,TvPlugin,TvNotifyManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNotifyManager.cs,ProcessRecordings,The method has 123 lines of code.
Long Method,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,OnAction,The method has 145 lines of code.
Long Method,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,OnMessage,The method has 471 lines of code.
Long Method,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,ToggleSubMenu,The method has 110 lines of code.
Long Method,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,Handle_ControlSetting,The method has 195 lines of code.
Long Method,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,ShowPrograms,The method has 133 lines of code.
Long Method,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,SetLabels,The method has 139 lines of code.
Long Method,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnClick,The method has 152 lines of code.
Long Method,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetQuality,The method has 119 lines of code.
Long Method,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,PopulateListviewWithUpcomingEpisodes,The method has 144 lines of code.
Long Method,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnSetQuality,The method has 122 lines of code.
Long Method,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,CreateProgram,The method has 223 lines of code.
Long Method,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,LoadDirectory,The method has 158 lines of code.
Long Method,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnDeleteRecording,The method has 118 lines of code.
Long Method,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,Compare,The method has 121 lines of code.
Long Method,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,Compare,The method has 159 lines of code.
Long Method,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,LoadDirectory,The method has 101 lines of code.
Long Method,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,SetLabels,The method has 132 lines of code.
Long Method,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,OnShowContextMenu,The method has 201 lines of code.
Long Method,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,OnClicked,The method has 174 lines of code.
Long Method,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,Update,The method has 485 lines of code.
Long Method,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The method has 283 lines of code.
Long Method,TvPlugin,TVTuningDetails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVTuningDetails.cs,OnPageLoad,The method has 120 lines of code.
Long Method,TvPlugin,TvZapOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVZapOSD.cs,ShowPrograms,The method has 114 lines of code.
Long Method,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The method has 276 lines of code.
Long Method,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The method has 486 lines of code.
Complex Method,TvPlugin,GuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\GuideBase.cs,Update,Cyclomatic complexity of the method is 42
Complex Method,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,OnPageLoad,Cyclomatic complexity of the method is 13
Complex Method,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,OnClicked,Cyclomatic complexity of the method is 31
Complex Method,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,Update,Cyclomatic complexity of the method is 81
Complex Method,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,OnClick,Cyclomatic complexity of the method is 10
Complex Method,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,OnRecord,Cyclomatic complexity of the method is 16
Complex Method,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,UpdateButtonStates,Cyclomatic complexity of the method is 14
Complex Method,TvPlugin,Comparer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,Compare,Cyclomatic complexity of the method is 13
Complex Method,TvPlugin,Comparer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,Compare,Cyclomatic complexity of the method is 13
Complex Method,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnShowContextMenu,Cyclomatic complexity of the method is 12
Complex Method,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,UpdateButtonStates,Cyclomatic complexity of the method is 8
Complex Method,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,LoadDirectory,Cyclomatic complexity of the method is 28
Complex Method,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,BuildItemFromRecording,Cyclomatic complexity of the method is 9
Complex Method,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,SetLabels,Cyclomatic complexity of the method is 10
Complex Method,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnSelectedRecording,Cyclomatic complexity of the method is 13
Complex Method,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnDeleteRecording,Cyclomatic complexity of the method is 19
Complex Method,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnCleanup,Cyclomatic complexity of the method is 10
Complex Method,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,UpdateProperties,Cyclomatic complexity of the method is 8
Complex Method,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,Compare,Cyclomatic complexity of the method is 39
Complex Method,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,LoadSettings,Cyclomatic complexity of the method is 9
Complex Method,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,OnAction,Cyclomatic complexity of the method is 8
Complex Method,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,OnPageLoad,Cyclomatic complexity of the method is 11
Complex Method,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,LoadDirectory,Cyclomatic complexity of the method is 25
Complex Method,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,Compare,Cyclomatic complexity of the method is 28
Complex Method,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,OnShowSort,Cyclomatic complexity of the method is 9
Complex Method,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,Play,Cyclomatic complexity of the method is 8
Complex Method,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnAction,Cyclomatic complexity of the method is 44
Complex Method,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnChangeChannelGroup,Cyclomatic complexity of the method is 8
Complex Method,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnMessage,Cyclomatic complexity of the method is 36
Complex Method,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,Process,Cyclomatic complexity of the method is 13
Complex Method,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,SetProperties,Cyclomatic complexity of the method is 19
Complex Method,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderSingleChannel,Cyclomatic complexity of the method is 48
Complex Method,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderChannel,Cyclomatic complexity of the method is 62
Complex Method,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnDown,Cyclomatic complexity of the method is 11
Complex Method,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,MoveDown,Cyclomatic complexity of the method is 9
Complex Method,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnUp,Cyclomatic complexity of the method is 19
Complex Method,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,MoveUp,Cyclomatic complexity of the method is 8
Complex Method,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,SetBestMatchingProgram,Cyclomatic complexity of the method is 18
Complex Method,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnLeft,Cyclomatic complexity of the method is 9
Complex Method,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,SetFocus,Cyclomatic complexity of the method is 8
Complex Method,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,Correct,Cyclomatic complexity of the method is 11
Complex Method,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,ShowContextMenu,Cyclomatic complexity of the method is 25
Complex Method,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnSelectItem,Cyclomatic complexity of the method is 24
Complex Method,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnKeyCode,Cyclomatic complexity of the method is 8
Complex Method,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,ChangeChannelNr,Cyclomatic complexity of the method is 8
Complex Method,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetChannels,Cyclomatic complexity of the method is 12
Complex Method,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,UpdateVerticalScrollbar,Cyclomatic complexity of the method is 8
Complex Method,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetDuration,Cyclomatic complexity of the method is 8
Complex Method,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetStartTimeFromNow,Cyclomatic complexity of the method is 29
Complex Method,TvPlugin,RecordedBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RecordedBase.cs,GetSpokenViewDate,Cyclomatic complexity of the method is 11
Complex Method,TvPlugin,TvTeletextBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvTeletextBase.cs,OnAction,Cyclomatic complexity of the method is 15
Complex Method,TvPlugin,TvTeletextBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvTeletextBase.cs,Process,Cyclomatic complexity of the method is 12
Complex Method,TvPlugin,TvTeletextBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvTeletextBase.cs,GetNewPage,Cyclomatic complexity of the method is 9
Complex Method,TvPlugin,GUITVConflicts,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVConflicts.cs,SetLabels,Cyclomatic complexity of the method is 23
Complex Method,TvPlugin,GUITVConflicts,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVConflicts.cs,OnClick,Cyclomatic complexity of the method is 14
Complex Method,TvPlugin,TvCropSettings,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvCropSettings.cs,OnMessage,Cyclomatic complexity of the method is 13
Complex Method,TvPlugin,TvEpgSettings,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvEpgSettings.cs,OnClicked,Cyclomatic complexity of the method is 10
Complex Method,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,LoadSettings,Cyclomatic complexity of the method is 9
Complex Method,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ResetAllControls,Cyclomatic complexity of the method is 9
Complex Method,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,OnAction,Cyclomatic complexity of the method is 69
Complex Method,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,OnMessage,Cyclomatic complexity of the method is 32
Complex Method,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,Cyclomatic complexity of the method is 38
Complex Method,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowChapterStreamsMenu,Cyclomatic complexity of the method is 15
Complex Method,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowQualitySettingsMenu,Cyclomatic complexity of the method is 21
Complex Method,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowAspectRatioMenu,Cyclomatic complexity of the method is 10
Complex Method,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowSubtitleStreamsMenu,Cyclomatic complexity of the method is 13
Complex Method,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,Process,Cyclomatic complexity of the method is 13
Complex Method,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ScreenStateChanged,Cyclomatic complexity of the method is 17
Complex Method,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,UpdateGUI,Cyclomatic complexity of the method is 16
Complex Method,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,CheckTimeOuts,Cyclomatic complexity of the method is 16
Complex Method,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,LoadGuideColors,Cyclomatic complexity of the method is 8
Complex Method,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnAction,Cyclomatic complexity of the method is 44
Complex Method,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnMessage,Cyclomatic complexity of the method is 36
Complex Method,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,Process,Cyclomatic complexity of the method is 12
Complex Method,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,SetProperties,Cyclomatic complexity of the method is 22
Complex Method,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderSingleChannel,Cyclomatic complexity of the method is 52
Complex Method,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderChannel,Cyclomatic complexity of the method is 66
Complex Method,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnDown,Cyclomatic complexity of the method is 11
Complex Method,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,MoveDown,Cyclomatic complexity of the method is 9
Complex Method,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnUp,Cyclomatic complexity of the method is 19
Complex Method,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,MoveUp,Cyclomatic complexity of the method is 8
Complex Method,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,SetBestMatchingProgram,Cyclomatic complexity of the method is 18
Complex Method,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnLeft,Cyclomatic complexity of the method is 9
Complex Method,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,UnFocus,Cyclomatic complexity of the method is 11
Complex Method,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,SetFocus,Cyclomatic complexity of the method is 11
Complex Method,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,Correct,Cyclomatic complexity of the method is 11
Complex Method,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,ShowContextMenu,Cyclomatic complexity of the method is 26
Complex Method,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnRemoveChannel,Cyclomatic complexity of the method is 8
Complex Method,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnSelectItem,Cyclomatic complexity of the method is 23
Complex Method,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnKeyCode,Cyclomatic complexity of the method is 8
Complex Method,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,ChangeChannelNr,Cyclomatic complexity of the method is 8
Complex Method,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetChannels,Cyclomatic complexity of the method is 12
Complex Method,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,UpdateVerticalScrollbar,Cyclomatic complexity of the method is 8
Complex Method,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetDuration,Cyclomatic complexity of the method is 8
Complex Method,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetStartTimeFromNow,Cyclomatic complexity of the method is 29
Complex Method,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnAction,Cyclomatic complexity of the method is 11
Complex Method,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnPageLoad,Cyclomatic complexity of the method is 14
Complex Method,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnClicked,Cyclomatic complexity of the method is 12
Complex Method,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,HandleServerNotConnected,Cyclomatic complexity of the method is 8
Complex Method,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,HandleWakeUpTvServer,Cyclomatic complexity of the method is 9
Complex Method,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,HeartBeatTransmitter,Cyclomatic complexity of the method is 14
Complex Method,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnGlobalMessage,Cyclomatic complexity of the method is 18
Complex Method,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ManualRecord,Cyclomatic complexity of the method is 11
Complex Method,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnActiveRecordings,Cyclomatic complexity of the method is 11
Complex Method,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnActiveStreams,Cyclomatic complexity of the method is 15
Complex Method,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,GetStreamsList,Cyclomatic complexity of the method is 9
Complex Method,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ChannelTuneFailedNotifyUser,Cyclomatic complexity of the method is 21
Complex Method,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,PreTuneChecks,Cyclomatic complexity of the method is 16
Complex Method,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ViewChannelAndCheck,Cyclomatic complexity of the method is 22
Complex Method,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,StartPlay,Cyclomatic complexity of the method is 9
Complex Method,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ShowCiMenu,Cyclomatic complexity of the method is 15
Complex Method,TvPlugin,ChannelNavigator,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHomeNavigator.cs,ReLoad,Cyclomatic complexity of the method is 15
Complex Method,TvPlugin,ChannelNavigator,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHomeNavigator.cs,CheckChannelChange,Cyclomatic complexity of the method is 8
Complex Method,TvPlugin,ChannelNavigator,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHomeNavigator.cs,UpdateCurrentChannel,Cyclomatic complexity of the method is 12
Complex Method,TvPlugin,ChannelNavigator,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHomeNavigator.cs,LoadSettings,Cyclomatic complexity of the method is 15
Complex Method,TvPlugin,ChannelNavigator,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHomeNavigator.cs,SaveSettings,Cyclomatic complexity of the method is 13
Complex Method,TvPlugin,TvMiniGuide,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvMiniGuide.cs,GetChannels,Cyclomatic complexity of the method is 8
Complex Method,TvPlugin,TvMiniGuide,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvMiniGuide.cs,OnMessage,Cyclomatic complexity of the method is 9
Complex Method,TvPlugin,TvMiniGuide,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvMiniGuide.cs,FillChannelList,Cyclomatic complexity of the method is 28
Complex Method,TvPlugin,TvNewScheduleSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearch.cs,OnClicked,Cyclomatic complexity of the method is 9
Complex Method,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnQuickRecord,Cyclomatic complexity of the method is 14
Complex Method,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnAdvancedRecord,Cyclomatic complexity of the method is 27
Complex Method,TvPlugin,TvNotifyManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNotifyManager.cs,ProcessRecordings,Cyclomatic complexity of the method is 18
Complex Method,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,OnAction,Cyclomatic complexity of the method is 27
Complex Method,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,OnMessage,Cyclomatic complexity of the method is 77
Complex Method,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,ToggleSubMenu,Cyclomatic complexity of the method is 12
Complex Method,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,Handle_ControlSetting,Cyclomatic complexity of the method is 32
Complex Method,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,PopulateSubTitles,Cyclomatic complexity of the method is 10
Complex Method,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,ResetAllControls,Cyclomatic complexity of the method is 9
Complex Method,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,ShowPrograms,Cyclomatic complexity of the method is 23
Complex Method,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,UpdateProgressBar,Cyclomatic complexity of the method is 9
Complex Method,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,SetLabels,Cyclomatic complexity of the method is 24
Complex Method,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnClick,Cyclomatic complexity of the method is 25
Complex Method,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,ChangeType,Cyclomatic complexity of the method is 18
Complex Method,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,GetRecType,Cyclomatic complexity of the method is 8
Complex Method,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnMoveDown,Cyclomatic complexity of the method is 9
Complex Method,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetQuality,Cyclomatic complexity of the method is 22
Complex Method,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnClicked,Cyclomatic complexity of the method is 10
Complex Method,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,PopulateListviewWithUpcomingEpisodes,Cyclomatic complexity of the method is 21
Complex Method,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnPreRecordInterval,Cyclomatic complexity of the method is 11
Complex Method,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnPostRecordInterval,Cyclomatic complexity of the method is 11
Complex Method,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnSetQuality,Cyclomatic complexity of the method is 22
Complex Method,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,CancelProgram,Cyclomatic complexity of the method is 8
Complex Method,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,CreateProgram,Cyclomatic complexity of the method is 31
Complex Method,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnAdvancedRecord,Cyclomatic complexity of the method is 17
Complex Method,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnKeep,Cyclomatic complexity of the method is 13
Complex Method,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnShowContextMenu,Cyclomatic complexity of the method is 12
Complex Method,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,UpdateButtonStates,Cyclomatic complexity of the method is 8
Complex Method,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,LoadDirectory,Cyclomatic complexity of the method is 21
Complex Method,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,SetLabels,Cyclomatic complexity of the method is 10
Complex Method,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnSelectedRecording,Cyclomatic complexity of the method is 13
Complex Method,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnDeleteRecording,Cyclomatic complexity of the method is 19
Complex Method,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnCleanup,Cyclomatic complexity of the method is 10
Complex Method,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,UpdateProperties,Cyclomatic complexity of the method is 9
Complex Method,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,Compare,Cyclomatic complexity of the method is 20
Complex Method,TvPlugin,TvRecordedInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVRecordedInfo.cs,OnKeep,Cyclomatic complexity of the method is 15
Complex Method,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,LoadSettings,Cyclomatic complexity of the method is 10
Complex Method,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,OnClicked,Cyclomatic complexity of the method is 10
Complex Method,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,Compare,Cyclomatic complexity of the method is 31
Complex Method,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,LoadDirectory,Cyclomatic complexity of the method is 15
Complex Method,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,SetLabels,Cyclomatic complexity of the method is 24
Complex Method,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,OnShowContextMenu,Cyclomatic complexity of the method is 31
Complex Method,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,ChangeType,Cyclomatic complexity of the method is 18
Complex Method,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,GetScheduleType,Cyclomatic complexity of the method is 8
Complex Method,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,OnPageLoad,Cyclomatic complexity of the method is 13
Complex Method,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,OnClicked,Cyclomatic complexity of the method is 31
Complex Method,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,Update,Cyclomatic complexity of the method is 71
Complex Method,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,OnClick,Cyclomatic complexity of the method is 10
Complex Method,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,OnRecord,Cyclomatic complexity of the method is 16
Complex Method,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,UpdateButtonStates,Cyclomatic complexity of the method is 14
Complex Method,TvPlugin,TvSetup,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetup.cs,OnClicked,Cyclomatic complexity of the method is 14
Complex Method,TvPlugin,TVTuningDetails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVTuningDetails.cs,OnPageLoad,Cyclomatic complexity of the method is 25
Complex Method,TvPlugin,TVUtil,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVUtil.cs,GetEpisodeInfo,Cyclomatic complexity of the method is 11
Complex Method,TvPlugin,TVUtil,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVUtil.cs,GetFileNameForRecording,Cyclomatic complexity of the method is 8
Complex Method,TvPlugin,TvZapOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVZapOSD.cs,ResetAllControls,Cyclomatic complexity of the method is 9
Complex Method,TvPlugin,TvZapOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVZapOSD.cs,ShowPrograms,Cyclomatic complexity of the method is 25
Complex Method,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,Cyclomatic complexity of the method is 41
Complex Method,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,GetColor,Cyclomatic complexity of the method is 10
Complex Method,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,Cyclomatic complexity of the method is 88
Complex Method,TvPlugin.teletext,TVTeletext,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvTeletext.cs,OnClicked,Cyclomatic complexity of the method is 9
Long Parameter List,TvPlugin,GuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\GuideBase.cs,RenderChannel,The method has 6 parameters. Parameters: programs' iChannel' tvGuideChannel' iStart' iEnd' selectCurrentShow
Long Parameter List,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderChannel,The method has 6 parameters. Parameters: mapPrograms' iChannel' tvGuideChannel' iStart' iEnd' selectCurrentShow
Long Parameter List,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderChannel,The method has 6 parameters. Parameters: mapPrograms' iChannel' tvGuideChannel' iStart' iEnd' selectCurrentShow
Long Parameter List,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,GetAC3AudioStreamIndex,The method has 5 parameters. Parameters: idxStreamIndexmpeg' idxStreamIndexAc3' ac3BasedOnLang' idx' idxFirstAc3
Long Parameter List,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,UpdateAudioStreamIndexesAndPrioritiesBasedOnLanguage,The method has 9 parameters. Parameters: streams' priority' idxStreamIndexmpeg' mpegBasedOnLang' idxStreamIndexAc3' idxLangPriAc3' idxLangPrimpeg' ac3BasedOnLang' dualMonoMode
Long Parameter List,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,GetMpegAudioStreamIndexBasedOnLanguage,The method has 5 parameters. Parameters: idxStreamIndexmpeg' mpegBasedOnLang' idxStreamIndexAc3' idx' idxFirstmpeg
Long Parameter List,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,GetAC3AudioStreamIndexBasedOnLanguage,The method has 5 parameters. Parameters: idxStreamIndexmpeg' idxStreamIndexAc3' ac3BasedOnLang' idx' idxFirstAc3
Long Parameter List,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,UpdateAudioStreamIndexesBasedOnLang,The method has 8 parameters. Parameters: streams' i' idxStreamIndexmpeg' idxStreamIndexAc3' mpegBasedOnLang' idxLangPriAc3' idxLangPrimpeg' ac3BasedOnLang
Long Parameter List,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,GetDualMonoMode,The method has 5 parameters. Parameters: streams' currentIndex' priority' idxStreamIndexmpeg' mpegBasedOnLang
Long Parameter List,TvPlugin,ScheduleInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,ScheduleInfo,The method has 6 parameters. Parameters: aIdChannel' aTitle' aDescription' aGenre' aStartTime' aEndTime
Long Parameter List,TvPlugin,TVUtil,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVUtil.cs,GetEpisodeInfo,The method has 5 parameters. Parameters: strBuilder' episodeName' seriesNum' episodeNum' episodePart
Long Parameter List,TvPlugin,TVUtil,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVUtil.cs,TitleDisplay,The method has 6 parameters. Parameters: strBuilder' title' episodeName' seriesNum' episodeNum' episodePart
Long Parameter List,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The method has 9 parameters. Parameters: graph' pageBitmap' chr' attrib' x' y' w' h' txtLanguage
Long Parameter List,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The method has 5 parameters. Parameters: pageBitmap' byPage' mPage' sPage' waiting
Long Identifier,TvPlugin,GuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\GuideBase.cs,,The length of the parameter _guideColorChannelButtonSelected is 32.
Long Identifier,TvPlugin,GuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\GuideBase.cs,,The length of the parameter _guideColorGroupButtonSelected is 30.
Long Identifier,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,,The length of the parameter _useNewPartialRecordingButtonColor is 34.
Long Identifier,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,,The length of the parameter _useNewPartialRecordingButtonColor is 34.
Long Identifier,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ManualRecord,The length of the parameter doesManuelScheduleAlreadyExist is 30.
Long Identifier,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,,The length of the parameter MAX_WAIT_FOR_SERVER_CONNECTION is 30.
Long Identifier,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,,The length of the parameter PROGRESS_PERCENTAGE_UPDATE_INTERVAL is 35.
Long Identifier,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,,The length of the parameter _showlastactivemoduleFullscreen is 31.
Long Identifier,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,,The length of the parameter _doingHandleServerNotConnected is 30.
Long Identifier,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,,The length of the parameter FramesBeforeStopRenderBlackImage is 32.
Long Identifier,TvPlugin,TvMiniGuide,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvMiniGuide.cs,,The length of the parameter _forceResetTvGroupChannelListCache is 34.
Long Identifier,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,,The length of the parameter mpCheckBoxPrefRebuildGraphVideoChanged is 38.
Long Identifier,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,,The length of the parameter toolTipChannelChangeVideoChanged is 32.
Long Identifier,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,,The length of the parameter mpCheckBoxPrefRebuildGraphAudioChanged is 38.
Long Identifier,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,,The length of the parameter toolTipChannelChangeAudioChanged is 32.
Long Identifier,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,,The length of the parameter mpCheckBoxavoidSeekingonChannelChange is 37.
Long Statement,TvPlugin,GuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\GuideBase.cs,RenderGenreKey,The length of the statement  "        // If the genre is not enabled then skip it.  This can occur if the user desires to have less than the maximum number of MP genres available. " is 141.
Long Statement,TvPlugin,GuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\GuideBase.cs,RenderGenreKey,The length of the statement  "          img = new GUIImage(GetID' (int)Controls.GENRE_COLOR_KEY_PAIR + (2 * i)' xpos' imgGenreColor.YPosition' imgGenreColor.Width' " is 123.
Long Statement,TvPlugin,GuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\GuideBase.cs,Update,The length of the statement  "            // height taken from last button (bottom) minus the yposition of slider plus the offset of slider in relation to first button " is 125.
Long Statement,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,LoadSettings,The length of the statement  "          currentSortMethod = (SortMethod)Enum.Parse(typeof(SortMethod)' xmlreader.GetValueAsString("radiosearch"' "cursortmethod"' "Name")' true); " is 137.
Long Statement,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,LoadSettings,The length of the statement  "           chosenSortMethod = (SortMethod)Enum.Parse(typeof(SortMethod)' xmlreader.GetValueAsString("radiosearch"' "chosortmethod"' "Auto")' true); " is 136.
Long Statement,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,LoadSettings,The length of the statement  "          currentSearchMode = (SearchMode)Enum.Parse(typeof(SearchMode)' xmlreader.GetValueAsString("radiosearch"' "searchmode"' "Title")' true); " is 135.
Long Statement,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,LoadDirectory,The length of the statement  "      GUIPropertyManager.SetProperty("#itemcount"' Utils.GetObjectCountLabel(itemlist.Count - (itemlist.Count > 0 && itemlist[0].Label == ".." ? 1 : 0))); " is 148.
Long Statement,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,BuildItemFromRecording,The length of the statement  "        // Log.Debug("RadioRecorded: BuildItemFromRecording [{0}]: {1} ({2}) on channel {3}"' _currentDbView.ToString()' aRecording.Title' aRecording.Genre' strChannelName); " is 165.
Long Statement,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,doOnPlayBackStoppedOrChanged,The length of the statement  "              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_RESUME_TV' (int)GUIWindow.Window.WINDOW_TV' GetID' 0' 0' 0' null); " is 129.
Long Statement,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,Play,The length of the statement  "      if ((_currentChannel.IsWebstream()) || (_currentChannel.CurrentProgram == null || _currentChannel.NextProgram == null || " is 120.
Long Statement,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,Play,The length of the statement  "        string.IsNullOrEmpty(_currentChannel.CurrentProgram.Title) ||  string.IsNullOrEmpty(_currentChannel.NextProgram.Title))) " is 120.
Long Statement,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,LoadGuideColors,The length of the statement  "      _guideColorBorderHighlight = GetColorFromString(xmlreader.GetValueAsString("tvguidecolors"' "guidecolorborderhighlight"' "99ffffff")); " is 134.
Long Statement,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,SetProperties,The length of the statement  "        bool bSeries = _currentProgram.IsRecordingSeries || _currentProgram.IsRecordingSeriesPending || _currentProgram.IsPartialRecordingSeriesPending; " is 144.
Long Statement,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderSingleChannel,The length of the statement  "        bool bSeries = (program.IsRecordingSeries || program.IsRecordingSeriesPending || program.IsPartialRecordingSeriesPending); " is 122.
Long Statement,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderChannel,The length of the statement  "        bRecording = bSeries || (program.IsRecording || program.IsRecordingOncePending || program.IsPartialRecordingSeriesPending); " is 123.
Long Statement,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,SetFocusBorder,The length of the statement  "        button.SetBorderTFM("0'0'6'6"' GUIImage.BorderPosition.BORDER_IMAGE_OUTSIDE' false' false' "tvguide_highlight_border.png"' _guideColorBorderHighlight' true' true); " is 163.
Long Statement,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,SetFocusBorder,The length of the statement  "        button.SetBorderTFL("6'0'6'6"' GUIImage.BorderPosition.BORDER_IMAGE_OUTSIDE' false' false' "tvguide_highlight_border.png"' _guideColorBorderHighlight' true' true); " is 163.
Long Statement,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,SetFocusBorder,The length of the statement  "        button.SetBorderTFR("0'6'6'6"' GUIImage.BorderPosition.BORDER_IMAGE_OUTSIDE' false' false' "tvguide_highlight_border.png"' _guideColorBorderHighlight' true' true); " is 163.
Long Statement,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,SetFocusBorder,The length of the statement  "        button.SetBorderTFM("0'6'6'6"' GUIImage.BorderPosition.BORDER_IMAGE_OUTSIDE' false' false' "tvguide_highlight_border.png"' _guideColorBorderHighlight' true' true); " is 163.
Long Statement,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,SetFocusBorder,The length of the statement  "        button.SetBorderTFL("6'0'6'6"' GUIImage.BorderPosition.BORDER_IMAGE_OUTSIDE' false' false' "tvguide_highlight_border.png"' _guideColorBorderHighlight' true' true); " is 163.
Long Statement,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,SetFocusBorder,The length of the statement  "        button.SetBorderTFR("0"' GUIImage.BorderPosition.BORDER_IMAGE_OUTSIDE' false' false' "tvguide_highlight_border.png"' _guideColorBorderHighlight' true' true); " is 157.
Long Statement,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,SetFocusBorder,The length of the statement  "        button.SetBorderTFM("6'0'6'6"' GUIImage.BorderPosition.BORDER_IMAGE_OUTSIDE' false' false' "tvguide_highlight_border.png"' _guideColorBorderHighlight' true' true); " is 163.
Long Statement,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,SetFocusBorder,The length of the statement  "        button.SetBorderTFL("0"' GUIImage.BorderPosition.BORDER_IMAGE_OUTSIDE' false' false' "tvguide_highlight_border.png"' _guideColorBorderHighlight' true' true); " is 157.
Long Statement,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,SetFocusBorder,The length of the statement  "        button.SetBorderTFR("0'6'6'6"' GUIImage.BorderPosition.BORDER_IMAGE_OUTSIDE' false' false' "tvguide_highlight_border.png"' _guideColorBorderHighlight' true' true); " is 163.
Long Statement,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,SetFocusBorder,The length of the statement  "        button.SetBorderTFM("6'6'6'6"' GUIImage.BorderPosition.BORDER_IMAGE_OUTSIDE' false' false' "tvguide_highlight_border.png"' _guideColorBorderHighlight' true' true); " is 163.
Long Statement,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,SetFocusBorder,The length of the statement  "        button.SetBorderTFL("0"' GUIImage.BorderPosition.BORDER_IMAGE_OUTSIDE' false' false' "tvguide_highlight_border.png"' _guideColorBorderHighlight' true' true); " is 157.
Long Statement,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,SetFocusBorder,The length of the statement  "        button.SetBorderTFR("0"' GUIImage.BorderPosition.BORDER_IMAGE_OUTSIDE' false' false' "tvguide_highlight_border.png"' _guideColorBorderHighlight' true' true); " is 157.
Long Statement,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnRemoveChannel,The length of the statement  "          Log.Debug("RadioGuideBase: call OnNextChannel() becasue of the current channel will be removed {0}"' _currentChannel.DisplayName); " is 130.
Long Statement,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnRemoveChannelFromGroup,The length of the statement  "      Log.Debug("RadioGuideBase: Remove channel {0} from group {1}"' _currentChannel.DisplayName' Radio.SelectedGroup.GroupName); " is 123.
Long Statement,TvPlugin,TvTeletextBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvTeletextBase.cs,GetNewPage,The length of the statement  "      //Log.Info("dvb-teletext: GetNewPage: page = {0}' subpage = {1}' maxsubpages = {2}"' currentPageNumber' currentSubPageNumber' maxSubs); " is 135.
Long Statement,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,LoadSettings,The length of the statement  "      Log.Debug("TvFullScreen.LoadSettings()'  _timeOsdOnscreen: {0}' _zapKeyTimeout: {1}' _zapTimeOutValue: {2}' _byIndex: {3}' _channelNumberMaxLength: {4}"'  " is 153.
Long Statement,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,OnAction,The length of the statement  "      if (action.wID == Action.ActionType.ACTION_SHOW_VOLUME && !File.Exists(GUIGraphicsContext.Skin + @"\VolumeOverlay.xml")) " is 120.
Long Statement,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,OnAction,The length of the statement  "              //msg.Label = string.Format("{0}:{1} ({2}/{3})"' streams[newIndex].StreamType' streams[newIndex].Language' newIndex + 1' streams.Length); " is 137.
Long Statement,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The length of the statement  "      if (!g_Player.IsTVRecording && Utils.FileExistsInCache(GUIGraphicsContext.GetThemedSkinFile(@"\mytvtuningdetails.xml"))) " is 120.
Long Statement,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,SortChannels,The length of the statement  "      //ChannelSettings channelSettings = (ChannelSettings)GUIWindowManager.GetWindow((int)Window.WINDOW_SETTINGS_SORT_CHANNELS); " is 123.
Long Statement,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowPostProcessingMenu,The length of the statement  "        dlg.Add(String.Format("{0} {1}"' GUILocalizeStrings.Get(200074)' (engine.EnablePostProcess) ? GUILocalizeStrings.Get(461) : "")); " is 129.
Long Statement,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowPostProcessingMenu,The length of the statement  "        dlg.Add(String.Format("{0} {1}"' GUILocalizeStrings.Get(200075)' (engine.EnableResize) ? GUILocalizeStrings.Get(461) : "")); " is 124.
Long Statement,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowPostProcessingMenu,The length of the statement  "        dlg.Add(String.Format("{0} {1}"' GUILocalizeStrings.Get(200078)' (engine.EnableCrop) ? GUILocalizeStrings.Get(461) : "")); " is 122.
Long Statement,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowPostProcessingMenu,The length of the statement  "        dlg.Add(String.Format("{0} {1}"' GUILocalizeStrings.Get(200077)' (engine.EnableDeinterlace) ? GUILocalizeStrings.Get(461) : "")); " is 129.
Long Statement,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,LoadGuideColors,The length of the statement  "      _guideColorChannelButton = GetColorFromString(xmlreader.GetValueAsString("tvguidecolors"' "guidecolorchannelbutton"' "ff0e517b")); " is 130.
Long Statement,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,LoadGuideColors,The length of the statement  "      _guideColorChannelButtonSelected = GetColorFromString(xmlreader.GetValueAsString("tvguidecolors"' "guidecolorchannelbuttonselected"' "Green")); " is 143.
Long Statement,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,LoadGuideColors,The length of the statement  "      _guideColorGroupButton = GetColorFromString(xmlreader.GetValueAsString("tvguidecolors"' "guidecolorgroupbutton"' "ff0e517b")); " is 126.
Long Statement,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,LoadGuideColors,The length of the statement  "      _guideColorGroupButtonSelected = GetColorFromString(xmlreader.GetValueAsString("tvguidecolors"' "guidecolorgroupbuttonselected"' "Green")); " is 139.
Long Statement,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,LoadGuideColors,The length of the statement  "      _guideColorProgramSelected = GetColorFromString(xmlreader.GetValueAsString("tvguidecolors"' "guidecolorprogramselected"' "Green")); " is 131.
Long Statement,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,LoadGuideColors,The length of the statement  "      _guideColorProgramEnded = GetColorFromString(xmlreader.GetValueAsString("tvguidecolors"' "guidecolorprogramended"' "Gray")); " is 124.
Long Statement,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,LoadGuideColors,The length of the statement  "      _guideColorBorderHighlight = GetColorFromString(xmlreader.GetValueAsString("tvguidecolors"' "guidecolorborderhighlight"' "99ffffff")); " is 134.
Long Statement,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,LoadGuideColors,The length of the statement  "      temp = new List<string>((xmlreader.GetValueAsString("tvguidecolors"' "defaultgenre"' String.Empty)).Split(new char[] { ''' }' StringSplitOptions.RemoveEmptyEntries)); " is 166.
Long Statement,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,LoadGuideColors,The length of the statement  "      // Each genre color entry is a csv list.  The first value is the color for program "on now"' the second value is for program "on later". " is 136.
Long Statement,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,LoadGuideColors,The length of the statement  "        temp = new List<string>((xmlreader.GetValueAsString("tvguidecolors"' "genre" + i.ToString()' String.Empty)).Split(new char[] { ''' }' StringSplitOptions.RemoveEmptyEntries)); " is 174.
Long Statement,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnMessage,The length of the statement  "              // Loading tvguide settings will overwrite the guide cursor position.  If we are coming back from the program info window (where " is 128.
Long Statement,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,PositionGuideCursorToCurrentChannel,The length of the statement  "         //Log.Error("PositionGuideCursorToCurrentChannel _channelList = {0} _currentChannel = {1}"' _channelList' _currentChannel); " is 123.
Long Statement,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,SetProperties,The length of the statement  "        bool bSeries = _currentProgram.IsRecordingSeries || _currentProgram.IsRecordingSeriesPending || _currentProgram.IsPartialRecordingSeriesPending; " is 144.
Long Statement,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderSingleChannel,The length of the statement  "        bool bSeries = (program.IsRecordingSeries || program.IsRecordingSeriesPending || program.IsPartialRecordingSeriesPending); " is 122.
Long Statement,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,SetFocusBorder,The length of the statement  "        button.SetBorderTFM("0'0'6'6"' GUIImage.BorderPosition.BORDER_IMAGE_OUTSIDE' false' false' "tvguide_highlight_border.png"' _guideColorBorderHighlight' true' true); " is 163.
Long Statement,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,SetFocusBorder,The length of the statement  "        button.SetBorderTFL("6'0'6'6"' GUIImage.BorderPosition.BORDER_IMAGE_OUTSIDE' false' false' "tvguide_highlight_border.png"' _guideColorBorderHighlight' true' true); " is 163.
Long Statement,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,SetFocusBorder,The length of the statement  "        button.SetBorderTFR("0'6'6'6"' GUIImage.BorderPosition.BORDER_IMAGE_OUTSIDE' false' false' "tvguide_highlight_border.png"' _guideColorBorderHighlight' true' true); " is 163.
Long Statement,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,SetFocusBorder,The length of the statement  "        button.SetBorderTFM("0'6'6'6"' GUIImage.BorderPosition.BORDER_IMAGE_OUTSIDE' false' false' "tvguide_highlight_border.png"' _guideColorBorderHighlight' true' true); " is 163.
Long Statement,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,SetFocusBorder,The length of the statement  "        button.SetBorderTFL("6'0'6'6"' GUIImage.BorderPosition.BORDER_IMAGE_OUTSIDE' false' false' "tvguide_highlight_border.png"' _guideColorBorderHighlight' true' true); " is 163.
Long Statement,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,SetFocusBorder,The length of the statement  "        button.SetBorderTFR("0"' GUIImage.BorderPosition.BORDER_IMAGE_OUTSIDE' false' false' "tvguide_highlight_border.png"' _guideColorBorderHighlight' true' true); " is 157.
Long Statement,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,SetFocusBorder,The length of the statement  "        button.SetBorderTFM("6'0'6'6"' GUIImage.BorderPosition.BORDER_IMAGE_OUTSIDE' false' false' "tvguide_highlight_border.png"' _guideColorBorderHighlight' true' true); " is 163.
Long Statement,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,SetFocusBorder,The length of the statement  "        button.SetBorderTFL("0"' GUIImage.BorderPosition.BORDER_IMAGE_OUTSIDE' false' false' "tvguide_highlight_border.png"' _guideColorBorderHighlight' true' true); " is 157.
Long Statement,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,SetFocusBorder,The length of the statement  "        button.SetBorderTFR("0'6'6'6"' GUIImage.BorderPosition.BORDER_IMAGE_OUTSIDE' false' false' "tvguide_highlight_border.png"' _guideColorBorderHighlight' true' true); " is 163.
Long Statement,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,SetFocusBorder,The length of the statement  "        button.SetBorderTFM("6'6'6'6"' GUIImage.BorderPosition.BORDER_IMAGE_OUTSIDE' false' false' "tvguide_highlight_border.png"' _guideColorBorderHighlight' true' true); " is 163.
Long Statement,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,SetFocusBorder,The length of the statement  "        button.SetBorderTFL("0"' GUIImage.BorderPosition.BORDER_IMAGE_OUTSIDE' false' false' "tvguide_highlight_border.png"' _guideColorBorderHighlight' true' true); " is 157.
Long Statement,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,SetFocusBorder,The length of the statement  "        button.SetBorderTFR("0"' GUIImage.BorderPosition.BORDER_IMAGE_OUTSIDE' false' false' "tvguide_highlight_border.png"' _guideColorBorderHighlight' true' true); " is 157.
Long Statement,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnRemoveChannel,The length of the statement  "          Log.Debug("TvGuideBase: call OnNextChannel() becasue of the current channel will be removed {0}"' _currentChannel.DisplayName); " is 127.
Long Statement,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnRemoveChannelFromGroup,The length of the statement  "      Log.Debug("TvGuideBase: Remove channel {0} from group {1}"' _currentChannel.DisplayName' TVHome.Navigator.CurrentGroup.GroupName); " is 130.
Long Statement,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnSelectItem,The length of the statement  "              if (TVHome.Navigator.Channel != null && TVHome.Navigator.Channel.IdChannel == _currentChannel.IdChannel && g_Player.Playing && g_Player.IsTV) " is 141.
Long Statement,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,AutoFullScreenTv,The length of the statement  "        // if using showlastactivemodule feature and last module is fullscreen while returning from powerstate' then do not set fullscreen here (since this is done by the resume last active module feature) " is 197.
Long Statement,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,StartRecordingSchedule,The length of the statement  "      GUIMessage msgManualRecord = new GUIMessage(GUIMessage.MessageType.GUI_MSG_MANUAL_RECORDING_STARTED' 0' 0' 0' 0' 0' null); " is 122.
Long Statement,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,WaitForGentleConnection,The length of the statement  "      // lets try one more time - seems like the gentle framework is not properly initialized when coming out of standby/hibernation.                     " is 127.
Long Statement,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnGlobalMessage,The length of the statement  "            TVNotifyYesNoDialog tvNotifyDlg = (TVNotifyYesNoDialog)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_TVNOTIFYYESNO); " is 133.
Long Statement,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnGlobalMessage,The length of the statement  "              tvNotifyDlg.SetHeading(String.Format(GUILocalizeStrings.Get(1206)' (DateTime.Now - notify.StartTime).Minutes.ToString())); " is 122.
Long Statement,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnGlobalMessage,The length of the statement  "                Log.Error("TVHome: TVNotification: Error on starting channel {0} after notification: {1} {2} {3}"' notify.Channel.DisplayName' e.Message' e.Source' e.StackTrace); " is 162.
Long Statement,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnPlayBackStarted,The length of the statement  "      // when we are watching TV and suddenly decides to watch a audio/video etc.' we want to make sure that the TV is stopped on server. " is 131.
Long Statement,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnPlayBackStarted,The length of the statement  "      if (GUIWindowManager.ActiveWindow == (int)Window.WINDOW_RADIO || GUIWindowManager.ActiveWindow == (int)Window.WINDOW_RADIO_GUIDE) " is 129.
Long Statement,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ManualRecord,The length of the statement  "                GUIMessage msgManualRecord = new GUIMessage(GUIMessage.MessageType.GUI_MSG_MANUAL_RECORDING_STARTED' 0' 0' 0' 0' 0' null); " is 122.
Long Statement,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnActiveRecordings,The length of the statement  "        OnActiveRecordings(ignoreActiveRecordings); //keep on showing the list until --> 1) user leaves menu' 2) no more active recordings " is 130.
Long Statement,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,UpdateCurrentEpgProperties,The length of the statement  "        GUIPropertyManager.SetProperty("#TV.View.remainingSeconds"' Utils.SecondsToHMSStringSeconds(current.CalculateTimeRemaining())); " is 127.
Long Statement,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,UpdateCurrentEpgProperties,The length of the statement  "        GUIPropertyManager.SetProperty("#TV.View.remainingMinutes"' Utils.SecondsToHMSStringMinutes(current.CalculateTimeRemaining())); " is 127.
Long Statement,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,UpdateAudioStreamIndexesBasedOnLang,The length of the statement  "        // has the stream a higher priority than an old one or is this the first AC3 stream with lang pri (idxLangPriAc3 == -1) (AC3) " is 125.
Long Statement,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,UpdateAudioStreamIndexesBasedOnLang,The length of the statement  "          // has the stream a higher priority than an old one or is this the first mpeg stream with lang pri (idxLangPrimpeg == -1) (mpeg) " is 128.
Long Statement,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ViewChannelAndCheck,The length of the statement  "        if (!g_Player.Playing || _status.IsSet(LiveTvStatus.CardChange) || (g_Player.Playing && !(g_Player.IsTV || g_Player.IsRadio))) " is 126.
Long Statement,TvPlugin,ChannelNavigator,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHomeNavigator.cs,ZapNow,The length of the statement  "      // MediaPortal.GUI.Library.Log.Info(MediaPortal.GUI.Library.Log.LogType.Error' "zapnow group:{0} current group:{0}"' m_zapgroup' m_currentgroup); " is 145.
Long Statement,TvPlugin,ChannelNavigator,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHomeNavigator.cs,LoadSettings,The length of the statement  "      // if the groupname does not match any of the groups assigned to the channel' then find the last group avail. (avoiding the all "channels group") for that channel and set is as the new currentgroup " is 197.
Long Statement,TvPlugin,ChannelNavigator,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHomeNavigator.cs,SaveSettings,The length of the statement  "              //the channel did not belong to the group' then pick the first channel avail in the group and set this as the last channel. " is 123.
Long Statement,TvPlugin,TvMiniGuide,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvMiniGuide.cs,OnMessage,The length of the statement  "                  if (TVHome.Navigator.Channel.IdChannel != SelectedChannel.IdChannel || !g_Player.IsTimeShifting || g_Player.IsTVRecording) " is 122.
Long Statement,TvPlugin,TvNotifyManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNotifyManager.cs,ProcessNotifies,The length of the statement  "            Log.Debug("Notify auto cancel old program {0} on {1} ended {2}"' program.Title' program.ReferencedChannel().DisplayName' " is 120.
Long Statement,TvPlugin,TvNotifyManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNotifyManager.cs,ProcessRecordings,The length of the statement  "                //Log.Debug("TVPlugIn: Notify verified program {0} about to start recording. {1} / {2}"' rec.ProgramName' rec.StartTime' preNotifySecs); " is 136.
Long Statement,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,OnMessage,The length of the statement  "             ((float)MediaPortal.Player.g_Player.GetVideoFormat().bitrate / 1024 / 1024).ToString("0.00"' CultureInfo.InvariantCulture)); " is 124.
Long Statement,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,SetVideoProgress,The length of the statement  "        //SetSliderValue(0.0f' 100.0f' (float)fPercent' (int)Controls.OSD_VIDEOPOS); // Update our progress slider accordingly ... " is 122.
Long Statement,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,GetChannelName,The length of the statement  "          // Let TvHome reload all channel information from the database. This makes sure that recently renamed linked subchannels handled the right way. " is 143.
Long Statement,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,ShowPrograms,The length of the statement  "            GUIPropertyManager.SetProperty("#TV.View.remainingSeconds"' Utils.SecondsToHMSStringSeconds(prog.CalculateTimeRemaining())); " is 124.
Long Statement,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,ShowPrograms,The length of the statement  "            GUIPropertyManager.SetProperty("#TV.View.remainingMinutes"' Utils.SecondsToHMSStringMinutes(prog.CalculateTimeRemaining())); " is 124.
Long Statement,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,UpdateProgressBar,The length of the statement  "         ((float)MediaPortal.Player.g_Player.GetVideoFormat().bitrate / 1024 / 1024).ToString("0.00"' CultureInfo.InvariantCulture)); " is 124.
Long Statement,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,UpdateProgressBar,The length of the statement  "          GUIPropertyManager.SetProperty("#TV.View.remainingSeconds"' Utils.SecondsToHMSStringSeconds(prog.CalculateTimeRemaining())); " is 124.
Long Statement,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,UpdateProgressBar,The length of the statement  "          GUIPropertyManager.SetProperty("#TV.View.remainingMinutes"' Utils.SecondsToHMSStringMinutes(prog.CalculateTimeRemaining())); " is 124.
Long Statement,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,IsRecordingProgram,The length of the statement  "        if (schedule.Canceled != Schedule.MinSchedule || (filterCanceledRecordings && schedule.IsSerieIsCanceled(schedule.GetSchedStartTimeForProg(program)' program.IdChannel))) " is 169.
Long Statement,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,PopulateListviewWithUpcomingEpisodes,The length of the statement  "      List<Program> episodes = (List<Program>)layer.SearchMinimalPrograms(dtDay' dtDay.AddDays(28)' initialProgram.Title' null); " is 122.
Long Statement,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,PopulateListviewWithUpcomingEpisodes,The length of the statement  "            actualUpcomingEps = Program.RetrieveWeekends(initialProgram.StartTime' initialProgram.EndTime' initialProgram.IdChannel); " is 121.
Long Statement,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,PopulateListviewWithUpcomingEpisodes,The length of the statement  "            actualUpcomingEps = Program.RetrieveWorkingDays(initialProgram.StartTime' initialProgram.EndTime' initialProgram.IdChannel); " is 124.
Long Statement,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,CreateProgram,The length of the statement  "      // check if this program is conflicting with any other already scheduled recording or not viewable cause isn't assigned to a card " is 129.
Long Statement,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,CreateProgram,The length of the statement  "      Log.Debug("TVProgramInfo.CreateProgram - conflicts.Count = {0} - notViewable.Count = {1}"' conflicts.Count' notViewables.Count); " is 128.
Long Statement,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,CreateProgram,The length of the statement  "        if (currentSchedule == null || (currentSchedule.ScheduleType > 0 && schedule.ScheduleType != (int)ScheduleRecordingType.Once)) " is 126.
Long Statement,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,CreateProgram,The length of the statement  "          CanceledSchedule canceledSchedule = new CanceledSchedule(schedule.IdSchedule' notViewable.IdChannel' notViewable.StartTime); " is 124.
Long Statement,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,ListFolder,The length of the statement  "        // lookup radio channel ID in radio group map (smallest table that could identify a radio channel) to remove radiochannels from recording list " is 142.
Long Statement,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,ListFolder,The length of the statement  "        //List<Recording> recordings = (from r in Recording.ListAll()where !(from rad in radiogroups select rad.IdChannel).Contains(r.IdChannel)select r).ToList(); " is 155.
Long Statement,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,LoadDirectory,The length of the statement  "        // lookup radio channel ID in radio group map (smallest table that could identify a radio channel) to remove radiochannels from recording list " is 142.
Long Statement,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,LoadDirectory,The length of the statement  "        Log.Debug("LoadDirectory() - finished loading '" + radiogroupIDs.Count() + "' radiogroupIDs after '{0}' ms."' watch.ElapsedMilliseconds); " is 137.
Long Statement,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,LoadDirectory,The length of the statement  "        //List<Recording> recordings = (from r in Recording.ListAll()where !(from rad in radiogroups select rad.IdChannel).Contains(r.IdChannel)select r).ToList(); " is 155.
Long Statement,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,LoadDirectory,The length of the statement  "        Log.Debug("LoadDirectory() - finished loading '" + recordings.Count + "' recordings after '{0}' ms."' watch.ElapsedMilliseconds); " is 129.
Long Statement,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,LoadDirectory,The length of the statement  "        Log.Debug("LoadDirectory() - finished loading '" + channels.Count + "' channels after '{0} ms."' watch.ElapsedMilliseconds); " is 124.
Long Statement,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,LoadDirectory,The length of the statement  "        Log.Debug("LoadDirectory() - finished loading '" + activerecordings.Count + "' activerecordings after '{0} ms."' watch.ElapsedMilliseconds); " is 140.
Long Statement,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,LoadDirectory,The length of the statement  "              groups = recordings.GroupBy(r => GetSpokenViewDate(r.StartTime)).Select(g => g.OrderByDescending(h => h.StartTime).First()); " is 124.
Long Statement,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,LoadDirectory,The length of the statement  "              groups = recordings.GroupBy(r => r.Title' StringComparer.InvariantCultureIgnoreCase).Select(g => g.OrderByDescending(h => h.StartTime).First()); " is 144.
Long Statement,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,LoadDirectory,The length of the statement  "              groups = recordings.GroupBy(r => r.Genre' StringComparer.InvariantCultureIgnoreCase).Select(g => g.OrderByDescending(h => h.StartTime).First()); " is 144.
Long Statement,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,LoadDirectory,The length of the statement  "      GUIPropertyManager.SetProperty("#itemcount"' Utils.GetObjectCountLabel(facadeLayout.Count - (facadeLayout.Count > 0 && facadeLayout[0].Label == ".." ? 1 : 0))); " is 160.
Long Statement,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,BuildItemFromRecording,The length of the statement  "        // Log.Debug("TVRecorded: BuildItemFromRecording [{0}]: {1} ({2}) on channel {3}"' _currentDbView.ToString()' aRecording.Title' aRecording.Genre' strChannelName); " is 162.
Long Statement,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,BuildItemFromRecording,The length of the statement  "        string PreviewThumb = string.Format("{0}\\{1}{2}"' Thumbs.TVRecorded' Path.ChangeExtension(Utils.SplitFilename(aRecording.FileName)' null)' Utils.GetThumbExtension()); " is 167.
Long Statement,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,SetThumbnails,The length of the statement  "        string PreviewThumb = string.Format("{0}\\{1}{2}"' Thumbs.TVRecorded' Path.ChangeExtension(Utils.SplitFilename(aRecording.FileName)' null)' Utils.GetThumbExtension()); " is 167.
Long Statement,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,SetThumbnails,The length of the statement  "          string thumbnailFilename = string.Format("{0}{1}"' Path.ChangeExtension(Utils.SplitFilename(aRecording.FileName)' null)' Utils.GetThumbExtension()); " is 148.
Long Statement,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,SetThumbnails,The length of the statement  "        Log.Warn("TVRecorded - SetThumbnail: Error building item from recording {0}\n{1}"' aRecording.FileName' singleex.ToString()); " is 125.
Long Statement,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,DeleteInvalidRecordings,The length of the statement  "      Log.Debug("DeleteInvalidRecordings() - finished after '" + watch.ElapsedMilliseconds + "' ms.' deletedrecordings = '" + deletedrecordings + "'"); " is 145.
Long Statement,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,Compare,The length of the statement  "                  return m_bSortAscending ? string.Compare(TVUtil.GetDisplayTitle(rec1)' TVUtil.GetDisplayTitle(rec2)) : string.Compare(TVUtil.GetDisplayTitle(rec2)' TVUtil.GetDisplayTitle(rec1)); " is 178.
Long Statement,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,doOnPlayBackStoppedOrChanged,The length of the statement  "              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_RESUME_TV' (int)GUIWindow.Window.WINDOW_TV' GetID' 0' 0' 0' null); " is 129.
Long Statement,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,OnPageLoad,The length of the statement  "      //@      ConflictManager.OnConflictsUpdated += new MediaPortal.TV.Recording.ConflictManager.OnConflictsUpdatedHandler(ConflictManager_OnConflictsUpdated);       " is 154.
Long Statement,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,OnPageDestroy,The length of the statement  "      //@ConflictManager.OnConflictsUpdated -= new MediaPortal.TV.Recording.ConflictManager.OnConflictsUpdatedHandler(ConflictManager_OnConflictsUpdated); " is 148.
Long Statement,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,GetScheduleType,The length of the statement  "          strType = String.Format(GUILocalizeStrings.Get(990000)' schedule.ReferencedChannel().DisplayName); ;//Weekly Everytime on this channel " is 134.
Long Statement,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,LoadSettings,The length of the statement  "          currentSortMethod = (SortMethod)Enum.Parse(typeof(SortMethod)' xmlreader.GetValueAsString("tvsearch"' "cursortmethod"' "Name")' true); " is 134.
Long Statement,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,LoadSettings,The length of the statement  "           chosenSortMethod = (SortMethod)Enum.Parse(typeof(SortMethod)' xmlreader.GetValueAsString("tvsearch"' "chosortmethod"' "Auto")' true); " is 133.
Long Statement,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,LoadSettings,The length of the statement  "          currentSearchMode = (SearchMode)Enum.Parse(typeof(SearchMode)' xmlreader.GetValueAsString("tvsearch"' "searchmode"' "Title")' true); " is 132.
Long Statement,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The length of the statement  "      System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(TvSetupForm)); " is 131.
Long Statement,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The length of the statement  "      this.mpCheckBoxPrefRebuildGraphAudioChanged.CheckedChanged += new System.EventHandler(this.mpCheckBoxPrefRebuildGraphOnNewAVSpecs_CheckedChanged); " is 146.
Long Statement,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The length of the statement  "      this.mpCheckBoxavoidSeekingonChannelChange.CheckedChanged += new System.EventHandler(this.mpCheckBoxavoidSeekingonChannelChange_CheckedChanged); " is 144.
Long Statement,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The length of the statement  "      this.mpCheckBoxPrefRebuildGraphVideoChanged.CheckedChanged += new System.EventHandler(this.mpCheckBoxPrefRebuildGraphVideoChanged_CheckedChanged); " is 146.
Long Statement,TvPlugin,TvTimeShiftPositionWatcher,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvTimeShiftPositionWatcher.cs,SnapshotTimeShiftBuffer,The length of the statement  "      Log.Debug("TvTimeShiftPositionWatcher: Snapshot done - position: {0}' filename: {1}"' snapshotBuferPosition' snapshotBufferFile); " is 129.
Long Statement,TvPlugin,TvTimeShiftPositionWatcher,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvTimeShiftPositionWatcher.cs,CheckOrUpdateTimeShiftPosition,The length of the statement  "        Log.Debug("TvTimeShiftPositionWatcher: Checking {0} == {1}"' current.ToString("dd.MM.yy HH:mm")' dtProgEnd.ToString("dd.MM.yy HH:mm")); " is 135.
Long Statement,TvPlugin,TvTimeShiftPositionWatcher,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvTimeShiftPositionWatcher.cs,CheckOrUpdateTimeShiftPosition,The length of the statement  "          Log.Debug("TvTimeShiftPositionWatcher: Next program starts within the configured Pre-Rec interval. Current program: [{0}] ending: {1}"' chan.CurrentProgram.Title' chan.CurrentProgram.EndTime.ToString()); " is 203.
Long Statement,TvPlugin,TVTuningDetails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVTuningDetails.cs,OnPageLoad,The length of the statement  "            audioPids = audioStreams.Aggregate(audioPids' (current' stream) => current + (stream.Pid + " (" + stream.StreamType + ") ")); " is 125.
Long Statement,TvPlugin,TVTuningDetails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVTuningDetails.cs,OnPageLoad,The length of the statement  "              ((float)MediaPortal.Player.g_Player.GetVideoFormat().bitrate / 1024 / 1024).ToString("0.00"' CultureInfo.InvariantCulture));  " is 124.
Long Statement,TvPlugin,TVTuningDetails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVTuningDetails.cs,Process,The length of the statement  "       ((float)MediaPortal.Player.g_Player.GetVideoFormat().bitrate / 1024 / 1024).ToString("0.00"' CultureInfo.InvariantCulture)); " is 124.
Long Statement,TvPlugin,TVUtil,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVUtil.cs,GetRecordingDateString,The length of the statement  "        return String.Format("{0} {1} ({2})"' Utils.GetShortDayString(rec.StartTime)' rec.StartTime.Year' Utils.SecondsToHMString((int)ts.TotalSeconds)); " is 145.
Long Statement,TvPlugin,TVUtil,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVUtil.cs,GetRecordingDateStringFull,The length of the statement  "      String span = string.Format("{0} - {1}"' startTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)' endTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)); " is 175.
Long Statement,TvPlugin,TVUtil,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVUtil.cs,GetFileNameForTimeshifting,The length of the statement  "        // fileName does not exist b/c it points to the local folder on the tvserver' which is ofcourse invalid on the tv client. " is 121.
Long Statement,TvPlugin,TVUtil,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVUtil.cs,GetFileNameForRecording,The length of the statement  "        // fileName does not exist b/c it points to the local folder on the tvserver' which is ofcourse invalid on the tv client. " is 121.
Long Statement,TvPlugin,TVUtil,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVUtil.cs,PlayRecording,The length of the statement  "      if (g_Player.Play(fileName' mediaType' chapters' false)) // Force to use TsReader if true it will use Movie Codec and Splitter " is 126.
Long Statement,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\Hamming.cs,GetSubPageNumber,The length of the statement  "      // SubPageNumber = 4 Bits SubPageNumber_Byte1 - 3 Bits SubPageNumber_Byte2 - 4 Bits SubPageNumber_Byte3 - 2 Bits SubPageNumber_Byte4 " is 132.
Complex Conditional,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,UpdateDescription,The conditional expression  "item == null || item.Label == ".." || item.IsFolder || prog == null"  is complex.
Complex Conditional,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,Play,The conditional expression  "(_currentChannel.IsWebstream()) || (_currentChannel.CurrentProgram == null || _currentChannel.NextProgram == null ||          string.IsNullOrEmpty(_currentChannel.CurrentProgram.Title) ||  string.IsNullOrEmpty(_currentChannel.NextProgram.Title))"  is complex.
Complex Conditional,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetFocusControlId,The conditional expression  "_cursorX >= 0 ||            focusedId == (int)Controls.SPINCONTROL_DAY ||            focusedId == (int)Controls.SPINCONTROL_TIME_INTERVAL ||            focusedId == (int)Controls.CHANNEL_GROUP_BUTTON"  is complex.
Complex Conditional,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnChangeChannelGroup,The conditional expression  "(newIndex >= 1 && Direction < 0) ||          (newIndex < countGroups - 1 && Direction > 0)"  is complex.
Complex Conditional,TvPlugin,TvCropManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvCropManager.cs,g_Player_PlayBackStarted,The conditional expression  "CropSettings.Top > 0 || CropSettings.Bottom > 0 || CropSettings.Left > 0 || CropSettings.Right > 0"  is complex.
Complex Conditional,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,OnAction,The conditional expression  "((action.wID == Action.ActionType.ACTION_SHOW_OSD) || (action.wID == Action.ActionType.ACTION_SHOW_GUI) ||               (action.wID == Action.ActionType.ACTION_PREVIOUS_MENU)) && !_osdWindow.SubMenuVisible"  is complex.
Complex Conditional,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The conditional expression  "!g_Player.IsTVRecording && TVHome.Card.IsOwner() && !TVHome.Card.IsRecording &&            TVHome.Card.SupportsQualityControl()"  is complex.
Complex Conditional,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,Process,The conditional expression  "(_statusVisible || _stepSeekVisible || (!_isOsdVisible && g_Player.Speed != 1) ||             (!_isOsdVisible && _isPauseOsdVisible)) || _isOsdVisible"  is complex.
Complex Conditional,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetFocusControlId,The conditional expression  "_cursorX >= 0 ||            focusedId == (int)Controls.SPINCONTROL_DAY ||            focusedId == (int)Controls.SPINCONTROL_TIME_INTERVAL ||            focusedId == (int)Controls.CHANNEL_GROUP_BUTTON"  is complex.
Complex Conditional,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnChangeChannelGroup,The conditional expression  "(newIndex >= 1 && Direction < 0) ||          (newIndex < countGroups - 1 && Direction > 0)"  is complex.
Complex Conditional,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnSelectItem,The conditional expression  "TVHome.Navigator.Channel != null && TVHome.Navigator.Channel.IdChannel == _currentChannel.IdChannel && g_Player.Playing && g_Player.IsTV"  is complex.
Complex Conditional,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,HeartBeatTransmitter,The conditional expression  "Connected && !isTS && !_playbackStopped && _onPageLoadDone &&                       (!g_Player.IsTVRecording && (g_Player.IsTV || g_Player.IsRadio))"  is complex.
Complex Conditional,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnGlobalMessage,The conditional expression  "!Radio.CurrentChannel.IsWebstream() && Navigator.Channel != null && Navigator.Channel.CurrentProgram.Title != null                && Navigator.Channel.NextProgram.Title != null"  is complex.
Complex Conditional,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,PreTuneChecks,The conditional expression  "(!channel.IsRadio && g_Player.IsRadio) || (channel.IsRadio && !g_Player.IsRadio)"  is complex.
Complex Conditional,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,PreTuneChecks,The conditional expression  "g_Player.IsVideo || g_Player.IsDVD || g_Player.IsMusic || g_Player.IsCDA"  is complex.
Complex Conditional,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,PreTuneChecks,The conditional expression  "(channel.IsTv && g_Player.IsRadio) || (channel.IsRadio && g_Player.IsTV) || g_Player.IsCDA ||                 g_Player.IsMusic || g_Player.IsVideo"  is complex.
Complex Conditional,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ViewChannelAndCheck,The conditional expression  "(g_Player.Playing && g_Player.IsTimeShifting && !g_Player.Stopped) && (g_Player.IsTV || g_Player.IsRadio)"  is complex.
Complex Conditional,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ViewChannelAndCheck,The conditional expression  "!g_Player.Playing || _status.IsSet(LiveTvStatus.CardChange) || (g_Player.Playing && !(g_Player.IsTV || g_Player.IsRadio))"  is complex.
Complex Conditional,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,OnAction,The conditional expression  "(action.wID == Action.ActionType.ACTION_KEY_PRESSED && action.m_key != null &&            (char)action.m_key.KeyChar >= '0' && (char)action.m_key.KeyChar <= '9')"  is complex.
Complex Conditional,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,PopulateListviewWithUpcomingEpisodes,The conditional expression  "lastSelectedProgram.IdChannel == episode.IdChannel &&                lastSelectedProgram.StartTime == episode.StartTime &&                lastSelectedProgram.EndTime == episode.EndTime && lastSelectedProgram.Title == episode.Title"  is complex.
Complex Conditional,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,CancelProgram,The conditional expression  "(schedule.ScheduleType == (int)ScheduleRecordingType.Daily)            || (schedule.ScheduleType == (int)ScheduleRecordingType.Weekends)            || (schedule.ScheduleType == (int)ScheduleRecordingType.Weekly)            || (schedule.ScheduleType == (int)ScheduleRecordingType.WorkingDays)            || (schedule.ScheduleType == (int)ScheduleRecordingType.EveryTimeOnEveryChannel)            || (schedule.ScheduleType == (int)ScheduleRecordingType.EveryTimeOnThisChannel)            || (schedule.ScheduleType == (int) ScheduleRecordingType.WeeklyEveryTimeOnThisChannel)"  is complex.
Complex Conditional,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,ResetCurrentScheduleAndProgram,The conditional expression  "currentSchedule == null ||          (          currentSchedule != null &&          (currentSchedule.ScheduleType == 0 || (currentSchedule.ScheduleType > 0 && schedule.ScheduleType > 0))          )"  is complex.
Complex Conditional,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,UpdateDescription,The conditional expression  "item == null || item.Label == ".." || item.IsFolder || prog == null"  is complex.
Complex Conditional,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The conditional expression  "(isBoxed || _transparentMode) && _fullscreenMode && !displayHeaderAndTopText"  is complex.
Empty Catch Block,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,Update,The method has an empty catch block.
Empty Catch Block,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,BuildItemFromRecording,The method has an empty catch block.
Empty Catch Block,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,SetLabels,The method has an empty catch block.
Empty Catch Block,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,doOnPlayBackStoppedOrChanged,The method has an empty catch block.
Empty Catch Block,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetChannels,The method has an empty catch block.
Empty Catch Block,TvPlugin,TvCropManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvCropManager.cs,g_Player_PlayBackStarted,The method has an empty catch block.
Empty Catch Block,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetChannels,The method has an empty catch block.
Empty Catch Block,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,Application_ApplicationExit,The method has an empty catch block.
Empty Catch Block,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnSuspend,The method has an empty catch block.
Empty Catch Block,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ViewChannelAndCheck,The method has an empty catch block.
Empty Catch Block,TvPlugin,ChannelNavigator,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHomeNavigator.cs,SaveSettings,The method has an empty catch block.
Empty Catch Block,TvPlugin,ChannelNavigator,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHomeNavigator.cs,SaveSettings,The method has an empty catch block.
Empty Catch Block,TvPlugin,TvMiniGuide,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvMiniGuide.cs,GetChannels,The method has an empty catch block.
Empty Catch Block,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,SetLabels,The method has an empty catch block.
Empty Catch Block,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,Update,The method has an empty catch block.
Empty Catch Block,TvPlugin,TvSetup,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetup.cs,CheckStreamingConnection,The method has an empty catch block.
Empty Catch Block,TvPlugin,TvSetup,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetup.cs,CheckTvServiceStatus,The method has an empty catch block.
Empty Catch Block,TvPlugin,TVUtil,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVUtil.cs,DeleteEntireOrOnceSchedule,The method has an empty catch block.
Empty Catch Block,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The method has an empty catch block.
Magic Number,TvPlugin,GuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\GuideBase.cs,RenderGenreKey,The following statement contains a magic number: GUIImage img = GetControl((int)Controls.GENRE_COLOR_KEY_PAIR + (2 * i)) as GUIImage;
Magic Number,TvPlugin,GuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\GuideBase.cs,RenderGenreKey,The following statement contains a magic number: img = new GUIImage(GetID' (int)Controls.GENRE_COLOR_KEY_PAIR + (2 * i)' xpos' imgGenreColor.YPosition' imgGenreColor.Width'                               imgGenreColor.Height' imgGenreColor.FileName' 0x0);
Magic Number,TvPlugin,GuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\GuideBase.cs,RenderGenreKey,The following statement contains a magic number: GUIFadeLabel label = GetControl(((int)Controls.GENRE_COLOR_KEY_PAIR + 1) + (2 * i)) as GUIFadeLabel;
Magic Number,TvPlugin,GuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\GuideBase.cs,RenderGenreKey,The following statement contains a magic number: label = new GUIFadeLabel(GetID' ((int)Controls.GENRE_COLOR_KEY_PAIR + 1) + (2 * i)' 0' 0' labelGenreName.Width'                                     labelGenreName.Height' labelGenreName.FontName'                                     labelGenreName.TextColor' labelGenreName.TextAlignment' labelGenreName.TextVAlignment'                                     labelGenreName.ShadowAngle' labelGenreName.ShadowDistance' labelGenreName.ShadowColor'                                     string.Empty);
Magic Number,TvPlugin,GuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\GuideBase.cs,RenderGenreKey,The following statement contains a magic number: label.SetPosition(xpos + imgGenreColor.Width + 10' labelGenreName.YPosition);
Magic Number,TvPlugin,GuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\GuideBase.cs,RenderGenreKey,The following statement contains a magic number: xoffset += (int)(imgGenreColor.Width * 2.3 + w);
Magic Number,TvPlugin,GuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\GuideBase.cs,Update,The following statement contains a magic number: int iLabelWidth = (cntlPanel.XPosition + cntlPanel.Width - labelTime.XPosition) / 4;
Magic Number,TvPlugin,GuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\GuideBase.cs,Update,The following statement contains a magic number: img = new GUIImage(GetID' (int)Controls.IMG_TIME1 + iLabel' xpos' ypos' iLabelWidth - 4'                                 cntlHeaderBkgImg.RenderHeight' cntlHeaderBkgImg.FileName' 0x0);
Magic Number,TvPlugin,GuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\GuideBase.cs,Update,The following statement contains a magic number: img.Width = iLabelWidth - 4;
Magic Number,TvPlugin,GuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\GuideBase.cs,Update,The following statement contains a magic number: iLabel < 4
Magic Number,TvPlugin,GuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\GuideBase.cs,Update,The following statement contains a magic number: imgBut = new GUIButton3PartControl(GetID' (int)Controls.IMG_CHAN1 + iChan' xpos' ypos'                                                   cntlChannelTemplate.Width - 2' cntlChannelTemplate.Height - 2'                                                   buttonTemplate.TexutureFocusLeftName'                                                   buttonTemplate.TexutureFocusMidName'                                                   buttonTemplate.TexutureFocusRightName'                                                   buttonTemplate.TexutureNoFocusLeftName'                                                   buttonTemplate.TexutureNoFocusMidName'                                                   buttonTemplate.TexutureNoFocusRightName'                                                   strChannelImageFileName);
Magic Number,TvPlugin,GuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\GuideBase.cs,Update,The following statement contains a magic number: imgBut = new GUIButton3PartControl(GetID' (int)Controls.IMG_CHAN1 + iChan' xpos' ypos'                                                   cntlChannelTemplate.Width - 2' cntlChannelTemplate.Height - 2'                                                   buttonTemplate.TexutureFocusLeftName'                                                   buttonTemplate.TexutureFocusMidName'                                                   buttonTemplate.TexutureFocusRightName'                                                   buttonTemplate.TexutureNoFocusLeftName'                                                   buttonTemplate.TexutureNoFocusMidName'                                                   buttonTemplate.TexutureNoFocusRightName'                                                   strChannelImageFileName);
Magic Number,TvPlugin,GuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\GuideBase.cs,Update,The following statement contains a magic number: imgBut.Width = cntlChannelTemplate.Width - 2;
Magic Number,TvPlugin,GuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\GuideBase.cs,Update,The following statement contains a magic number: imgBut.Height = cntlChannelTemplate.Height - 2;
Magic Number,TvPlugin,GuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\GuideBase.cs,Update,The following statement contains a magic number: switch (_viewingTime.DayOfWeek)          {            case DayOfWeek.Monday:              day = GUILocalizeStrings.Get(657);              break;            case DayOfWeek.Tuesday:              day = GUILocalizeStrings.Get(658);              break;            case DayOfWeek.Wednesday:              day = GUILocalizeStrings.Get(659);              break;            case DayOfWeek.Thursday:              day = GUILocalizeStrings.Get(660);              break;            case DayOfWeek.Friday:              day = GUILocalizeStrings.Get(661);              break;            case DayOfWeek.Saturday:              day = GUILocalizeStrings.Get(662);              break;            default:              day = GUILocalizeStrings.Get(663);              break;          }
Magic Number,TvPlugin,GuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\GuideBase.cs,Update,The following statement contains a magic number: switch (_viewingTime.DayOfWeek)          {            case DayOfWeek.Monday:              day = GUILocalizeStrings.Get(657);              break;            case DayOfWeek.Tuesday:              day = GUILocalizeStrings.Get(658);              break;            case DayOfWeek.Wednesday:              day = GUILocalizeStrings.Get(659);              break;            case DayOfWeek.Thursday:              day = GUILocalizeStrings.Get(660);              break;            case DayOfWeek.Friday:              day = GUILocalizeStrings.Get(661);              break;            case DayOfWeek.Saturday:              day = GUILocalizeStrings.Get(662);              break;            default:              day = GUILocalizeStrings.Get(663);              break;          }
Magic Number,TvPlugin,GuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\GuideBase.cs,Update,The following statement contains a magic number: switch (_viewingTime.DayOfWeek)          {            case DayOfWeek.Monday:              day = GUILocalizeStrings.Get(657);              break;            case DayOfWeek.Tuesday:              day = GUILocalizeStrings.Get(658);              break;            case DayOfWeek.Wednesday:              day = GUILocalizeStrings.Get(659);              break;            case DayOfWeek.Thursday:              day = GUILocalizeStrings.Get(660);              break;            case DayOfWeek.Friday:              day = GUILocalizeStrings.Get(661);              break;            case DayOfWeek.Saturday:              day = GUILocalizeStrings.Get(662);              break;            default:              day = GUILocalizeStrings.Get(663);              break;          }
Magic Number,TvPlugin,GuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\GuideBase.cs,Update,The following statement contains a magic number: switch (_viewingTime.DayOfWeek)          {            case DayOfWeek.Monday:              day = GUILocalizeStrings.Get(657);              break;            case DayOfWeek.Tuesday:              day = GUILocalizeStrings.Get(658);              break;            case DayOfWeek.Wednesday:              day = GUILocalizeStrings.Get(659);              break;            case DayOfWeek.Thursday:              day = GUILocalizeStrings.Get(660);              break;            case DayOfWeek.Friday:              day = GUILocalizeStrings.Get(661);              break;            case DayOfWeek.Saturday:              day = GUILocalizeStrings.Get(662);              break;            default:              day = GUILocalizeStrings.Get(663);              break;          }
Magic Number,TvPlugin,GuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\GuideBase.cs,Update,The following statement contains a magic number: switch (_viewingTime.DayOfWeek)          {            case DayOfWeek.Monday:              day = GUILocalizeStrings.Get(657);              break;            case DayOfWeek.Tuesday:              day = GUILocalizeStrings.Get(658);              break;            case DayOfWeek.Wednesday:              day = GUILocalizeStrings.Get(659);              break;            case DayOfWeek.Thursday:              day = GUILocalizeStrings.Get(660);              break;            case DayOfWeek.Friday:              day = GUILocalizeStrings.Get(661);              break;            case DayOfWeek.Saturday:              day = GUILocalizeStrings.Get(662);              break;            default:              day = GUILocalizeStrings.Get(663);              break;          }
Magic Number,TvPlugin,GuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\GuideBase.cs,Update,The following statement contains a magic number: switch (_viewingTime.DayOfWeek)          {            case DayOfWeek.Monday:              day = GUILocalizeStrings.Get(657);              break;            case DayOfWeek.Tuesday:              day = GUILocalizeStrings.Get(658);              break;            case DayOfWeek.Wednesday:              day = GUILocalizeStrings.Get(659);              break;            case DayOfWeek.Thursday:              day = GUILocalizeStrings.Get(660);              break;            case DayOfWeek.Friday:              day = GUILocalizeStrings.Get(661);              break;            case DayOfWeek.Saturday:              day = GUILocalizeStrings.Get(662);              break;            default:              day = GUILocalizeStrings.Get(663);              break;          }
Magic Number,TvPlugin,GuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\GuideBase.cs,Update,The following statement contains a magic number: switch (_viewingTime.DayOfWeek)          {            case DayOfWeek.Monday:              day = GUILocalizeStrings.Get(657);              break;            case DayOfWeek.Tuesday:              day = GUILocalizeStrings.Get(658);              break;            case DayOfWeek.Wednesday:              day = GUILocalizeStrings.Get(659);              break;            case DayOfWeek.Thursday:              day = GUILocalizeStrings.Get(660);              break;            case DayOfWeek.Friday:              day = GUILocalizeStrings.Get(661);              break;            case DayOfWeek.Saturday:              day = GUILocalizeStrings.Get(662);              break;            default:              day = GUILocalizeStrings.Get(663);              break;          }
Magic Number,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,Update,The following statement contains a magic number: switch (chosenSortMethod)        {          case SortMethod.Auto:            strLine = GUILocalizeStrings.Get(1202);            break;          case SortMethod.Name:            strLine = GUILocalizeStrings.Get(622);            break;          case SortMethod.Channel:            strLine = GUILocalizeStrings.Get(620);            break;          case SortMethod.Date:            strLine = GUILocalizeStrings.Get(621);            break;        }
Magic Number,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,Update,The following statement contains a magic number: switch (chosenSortMethod)        {          case SortMethod.Auto:            strLine = GUILocalizeStrings.Get(1202);            break;          case SortMethod.Name:            strLine = GUILocalizeStrings.Get(622);            break;          case SortMethod.Channel:            strLine = GUILocalizeStrings.Get(620);            break;          case SortMethod.Date:            strLine = GUILocalizeStrings.Get(621);            break;        }
Magic Number,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,Update,The following statement contains a magic number: switch (chosenSortMethod)        {          case SortMethod.Auto:            strLine = GUILocalizeStrings.Get(1202);            break;          case SortMethod.Name:            strLine = GUILocalizeStrings.Get(622);            break;          case SortMethod.Channel:            strLine = GUILocalizeStrings.Get(620);            break;          case SortMethod.Date:            strLine = GUILocalizeStrings.Get(621);            break;        }
Magic Number,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,Update,The following statement contains a magic number: switch (chosenSortMethod)        {          case SortMethod.Auto:            strLine = GUILocalizeStrings.Get(1202);            break;          case SortMethod.Name:            strLine = GUILocalizeStrings.Get(622);            break;          case SortMethod.Channel:            strLine = GUILocalizeStrings.Get(620);            break;          case SortMethod.Date:            strLine = GUILocalizeStrings.Get(621);            break;        }
Magic Number,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,OnRecord,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(616));
Magic Number,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,OnRecord,The following statement contains a magic number: i <= 615
Magic Number,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,OnRecord,The following statement contains a magic number: dlg.Add(GUILocalizeStrings.Get(990000));
Magic Number,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,OnRecord,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: //none              foreach (Schedule rec1 in listRecordings)              {                if (rec1.IsRecordingProgram(program' true))                {                  if (rec1.ScheduleType != (int)ScheduleRecordingType.Once)                  {                    //delete specific series                    Schedule sched = Schedule.Retrieve(rec1.IdSchedule);                    TVUtil.DeleteRecAndSchedWithPrompt(sched' program.IdChannel);                  }                  else                  {                    //cancel recording                                                        server.StopRecordingSchedule(rec1.IdSchedule);                    rec1.Delete();                    server.OnNewSchedule();                  }                }              }              listRecordings = Schedule.ListAll();              Update();              return;            case 1: //once              rec.ScheduleType = (int)ScheduleRecordingType.Once;              break;            case 2: //everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              break;            case 3: //everytime' all channels              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              break;            case 4: //weekly              rec.ScheduleType = (int)ScheduleRecordingType.Weekly;              break;            case 5: //daily              rec.ScheduleType = (int)ScheduleRecordingType.Daily;              break;            case 6: //WorkingDays              rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;              break;            case 7: //Weekends              rec.ScheduleType = (int)ScheduleRecordingType.Weekends;              break;            case 8://Weekly everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              break;          }
Magic Number,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,OnRecord,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: //none              foreach (Schedule rec1 in listRecordings)              {                if (rec1.IsRecordingProgram(program' true))                {                  if (rec1.ScheduleType != (int)ScheduleRecordingType.Once)                  {                    //delete specific series                    Schedule sched = Schedule.Retrieve(rec1.IdSchedule);                    TVUtil.DeleteRecAndSchedWithPrompt(sched' program.IdChannel);                  }                  else                  {                    //cancel recording                                                        server.StopRecordingSchedule(rec1.IdSchedule);                    rec1.Delete();                    server.OnNewSchedule();                  }                }              }              listRecordings = Schedule.ListAll();              Update();              return;            case 1: //once              rec.ScheduleType = (int)ScheduleRecordingType.Once;              break;            case 2: //everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              break;            case 3: //everytime' all channels              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              break;            case 4: //weekly              rec.ScheduleType = (int)ScheduleRecordingType.Weekly;              break;            case 5: //daily              rec.ScheduleType = (int)ScheduleRecordingType.Daily;              break;            case 6: //WorkingDays              rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;              break;            case 7: //Weekends              rec.ScheduleType = (int)ScheduleRecordingType.Weekends;              break;            case 8://Weekly everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              break;          }
Magic Number,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,OnRecord,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: //none              foreach (Schedule rec1 in listRecordings)              {                if (rec1.IsRecordingProgram(program' true))                {                  if (rec1.ScheduleType != (int)ScheduleRecordingType.Once)                  {                    //delete specific series                    Schedule sched = Schedule.Retrieve(rec1.IdSchedule);                    TVUtil.DeleteRecAndSchedWithPrompt(sched' program.IdChannel);                  }                  else                  {                    //cancel recording                                                        server.StopRecordingSchedule(rec1.IdSchedule);                    rec1.Delete();                    server.OnNewSchedule();                  }                }              }              listRecordings = Schedule.ListAll();              Update();              return;            case 1: //once              rec.ScheduleType = (int)ScheduleRecordingType.Once;              break;            case 2: //everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              break;            case 3: //everytime' all channels              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              break;            case 4: //weekly              rec.ScheduleType = (int)ScheduleRecordingType.Weekly;              break;            case 5: //daily              rec.ScheduleType = (int)ScheduleRecordingType.Daily;              break;            case 6: //WorkingDays              rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;              break;            case 7: //Weekends              rec.ScheduleType = (int)ScheduleRecordingType.Weekends;              break;            case 8://Weekly everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              break;          }
Magic Number,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,OnRecord,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: //none              foreach (Schedule rec1 in listRecordings)              {                if (rec1.IsRecordingProgram(program' true))                {                  if (rec1.ScheduleType != (int)ScheduleRecordingType.Once)                  {                    //delete specific series                    Schedule sched = Schedule.Retrieve(rec1.IdSchedule);                    TVUtil.DeleteRecAndSchedWithPrompt(sched' program.IdChannel);                  }                  else                  {                    //cancel recording                                                        server.StopRecordingSchedule(rec1.IdSchedule);                    rec1.Delete();                    server.OnNewSchedule();                  }                }              }              listRecordings = Schedule.ListAll();              Update();              return;            case 1: //once              rec.ScheduleType = (int)ScheduleRecordingType.Once;              break;            case 2: //everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              break;            case 3: //everytime' all channels              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              break;            case 4: //weekly              rec.ScheduleType = (int)ScheduleRecordingType.Weekly;              break;            case 5: //daily              rec.ScheduleType = (int)ScheduleRecordingType.Daily;              break;            case 6: //WorkingDays              rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;              break;            case 7: //Weekends              rec.ScheduleType = (int)ScheduleRecordingType.Weekends;              break;            case 8://Weekly everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              break;          }
Magic Number,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,OnRecord,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: //none              foreach (Schedule rec1 in listRecordings)              {                if (rec1.IsRecordingProgram(program' true))                {                  if (rec1.ScheduleType != (int)ScheduleRecordingType.Once)                  {                    //delete specific series                    Schedule sched = Schedule.Retrieve(rec1.IdSchedule);                    TVUtil.DeleteRecAndSchedWithPrompt(sched' program.IdChannel);                  }                  else                  {                    //cancel recording                                                        server.StopRecordingSchedule(rec1.IdSchedule);                    rec1.Delete();                    server.OnNewSchedule();                  }                }              }              listRecordings = Schedule.ListAll();              Update();              return;            case 1: //once              rec.ScheduleType = (int)ScheduleRecordingType.Once;              break;            case 2: //everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              break;            case 3: //everytime' all channels              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              break;            case 4: //weekly              rec.ScheduleType = (int)ScheduleRecordingType.Weekly;              break;            case 5: //daily              rec.ScheduleType = (int)ScheduleRecordingType.Daily;              break;            case 6: //WorkingDays              rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;              break;            case 7: //Weekends              rec.ScheduleType = (int)ScheduleRecordingType.Weekends;              break;            case 8://Weekly everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              break;          }
Magic Number,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,OnRecord,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: //none              foreach (Schedule rec1 in listRecordings)              {                if (rec1.IsRecordingProgram(program' true))                {                  if (rec1.ScheduleType != (int)ScheduleRecordingType.Once)                  {                    //delete specific series                    Schedule sched = Schedule.Retrieve(rec1.IdSchedule);                    TVUtil.DeleteRecAndSchedWithPrompt(sched' program.IdChannel);                  }                  else                  {                    //cancel recording                                                        server.StopRecordingSchedule(rec1.IdSchedule);                    rec1.Delete();                    server.OnNewSchedule();                  }                }              }              listRecordings = Schedule.ListAll();              Update();              return;            case 1: //once              rec.ScheduleType = (int)ScheduleRecordingType.Once;              break;            case 2: //everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              break;            case 3: //everytime' all channels              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              break;            case 4: //weekly              rec.ScheduleType = (int)ScheduleRecordingType.Weekly;              break;            case 5: //daily              rec.ScheduleType = (int)ScheduleRecordingType.Daily;              break;            case 6: //WorkingDays              rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;              break;            case 7: //Weekends              rec.ScheduleType = (int)ScheduleRecordingType.Weekends;              break;            case 8://Weekly everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              break;          }
Magic Number,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,OnRecord,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: //none              foreach (Schedule rec1 in listRecordings)              {                if (rec1.IsRecordingProgram(program' true))                {                  if (rec1.ScheduleType != (int)ScheduleRecordingType.Once)                  {                    //delete specific series                    Schedule sched = Schedule.Retrieve(rec1.IdSchedule);                    TVUtil.DeleteRecAndSchedWithPrompt(sched' program.IdChannel);                  }                  else                  {                    //cancel recording                                                        server.StopRecordingSchedule(rec1.IdSchedule);                    rec1.Delete();                    server.OnNewSchedule();                  }                }              }              listRecordings = Schedule.ListAll();              Update();              return;            case 1: //once              rec.ScheduleType = (int)ScheduleRecordingType.Once;              break;            case 2: //everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              break;            case 3: //everytime' all channels              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              break;            case 4: //weekly              rec.ScheduleType = (int)ScheduleRecordingType.Weekly;              break;            case 5: //daily              rec.ScheduleType = (int)ScheduleRecordingType.Daily;              break;            case 6: //WorkingDays              rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;              break;            case 7: //Weekends              rec.ScheduleType = (int)ScheduleRecordingType.Weekends;              break;            case 8://Weekly everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              break;          }
Magic Number,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,UpdateButtonStates,The following statement contains a magic number: btnViewBy.Label = GUILocalizeStrings.Get(1521);
Magic Number,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,UpdateButtonStates,The following statement contains a magic number: btnViewBy.Label = GUILocalizeStrings.Get(1522);
Magic Number,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,UpdateButtonStates,The following statement contains a magic number: btnViewBy.Label = GUILocalizeStrings.Get(1521);
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,LoadSettings,The following statement contains a magic number: _watchedPercentage = xmlreader.GetValueAsInt("movies"' "playedpercentagewatched"' 95);
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnShowSort,The following statement contains a magic number: dlg.SetHeading(495);
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(620);
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(621);
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(268);
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(678);
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(671);
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(1017);
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(618);
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 618: // delete            OnDeleteRecording(iItem);            break;            case 208: // play            if (OnSelectedRecording(iItem))            {              return;            }            break;            case 1048: // Settings            TvRecordedInfo.CurrentProgram = rec;            GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_RECORDED_INFO);            break;            case 200072:            ShowUpcomingEpisodes(rec);            break;            case 830: // Reset watched status            _iSelectedItem = GetSelectedItemNo();            ResetWatchedStatus(rec);            LoadDirectory();            GUIControl.SelectItemControl(GetID' facadeLayout.GetID' _iSelectedItem);            break;        }
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 618: // delete            OnDeleteRecording(iItem);            break;            case 208: // play            if (OnSelectedRecording(iItem))            {              return;            }            break;            case 1048: // Settings            TvRecordedInfo.CurrentProgram = rec;            GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_RECORDED_INFO);            break;            case 200072:            ShowUpcomingEpisodes(rec);            break;            case 830: // Reset watched status            _iSelectedItem = GetSelectedItemNo();            ResetWatchedStatus(rec);            LoadDirectory();            GUIControl.SelectItemControl(GetID' facadeLayout.GetID' _iSelectedItem);            break;        }
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 618: // delete            OnDeleteRecording(iItem);            break;            case 208: // play            if (OnSelectedRecording(iItem))            {              return;            }            break;            case 1048: // Settings            TvRecordedInfo.CurrentProgram = rec;            GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_RECORDED_INFO);            break;            case 200072:            ShowUpcomingEpisodes(rec);            break;            case 830: // Reset watched status            _iSelectedItem = GetSelectedItemNo();            ResetWatchedStatus(rec);            LoadDirectory();            GUIControl.SelectItemControl(GetID' facadeLayout.GetID' _iSelectedItem);            break;        }
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 618: // delete            OnDeleteRecording(iItem);            break;            case 208: // play            if (OnSelectedRecording(iItem))            {              return;            }            break;            case 1048: // Settings            TvRecordedInfo.CurrentProgram = rec;            GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_RECORDED_INFO);            break;            case 200072:            ShowUpcomingEpisodes(rec);            break;            case 830: // Reset watched status            _iSelectedItem = GetSelectedItemNo();            ResetWatchedStatus(rec);            LoadDirectory();            GUIControl.SelectItemControl(GetID' facadeLayout.GetID' _iSelectedItem);            break;        }
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 618: // delete            OnDeleteRecording(iItem);            break;            case 208: // play            if (OnSelectedRecording(iItem))            {              return;            }            break;            case 1048: // Settings            TvRecordedInfo.CurrentProgram = rec;            GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_RECORDED_INFO);            break;            case 200072:            ShowUpcomingEpisodes(rec);            break;            case 830: // Reset watched status            _iSelectedItem = GetSelectedItemNo();            ResetWatchedStatus(rec);            LoadDirectory();            GUIControl.SelectItemControl(GetID' facadeLayout.GetID' _iSelectedItem);            break;        }
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,Process,The following statement contains a magic number: (_resetSMSsearch == true) && (_resetSMSsearchDelay.Subtract(DateTime.Now).Seconds < -2)
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,InitViewSelections,The following statement contains a magic number: btnViews.AddItem(GUILocalizeStrings.Get(914)' index++);
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,InitViewSelections,The following statement contains a magic number: btnViews.AddItem(GUILocalizeStrings.Get(135)' index++);
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,InitViewSelections,The following statement contains a magic number: btnViews.AddItem(GUILocalizeStrings.Get(812)' index++);
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,InitViewSelections,The following statement contains a magic number: btnViews.AddItem(GUILocalizeStrings.Get(636)' index++);
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,InitViewSelections,The following statement contains a magic number: switch (_currentDbView)        {          case DBView.Recordings:            btnViews.SetSelectedItemByValue(0);            break;          case DBView.Genre:            btnViews.SetSelectedItemByValue(1);            break;          case DBView.Channel:            btnViews.SetSelectedItemByValue(2);            break;          case DBView.History:            btnViews.SetSelectedItemByValue(3);            break;        }
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,InitViewSelections,The following statement contains a magic number: switch (_currentDbView)        {          case DBView.Recordings:            btnViews.SetSelectedItemByValue(0);            break;          case DBView.Genre:            btnViews.SetSelectedItemByValue(1);            break;          case DBView.Channel:            btnViews.SetSelectedItemByValue(2);            break;          case DBView.History:            btnViews.SetSelectedItemByValue(3);            break;        }
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,SetView,The following statement contains a magic number: switch (selectedViewId)          {            case 0:              _currentDbView = DBView.Recordings;              break;            case 1:              _currentDbView = DBView.Genre;              break;            case 2:              _currentDbView = DBView.Channel;              break;            case 3:              _currentDbView = DBView.History;              break;          }
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,SetView,The following statement contains a magic number: switch (selectedViewId)          {            case 0:              _currentDbView = DBView.Recordings;              break;            case 1:              _currentDbView = DBView.Genre;              break;            case 2:              _currentDbView = DBView.Channel;              break;            case 3:              _currentDbView = DBView.History;              break;          }
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,UpdateButtonStates,The following statement contains a magic number: switch (_currentSortMethod)            {              case SortMethod.Channel:                strLine = GUILocalizeStrings.Get(620); //Sort by: Channel                break;              case SortMethod.Date:                strLine = GUILocalizeStrings.Get(621); //Sort by: Date                break;              case SortMethod.Name:                strLine = GUILocalizeStrings.Get(268); //Sort by: Title                break;              case SortMethod.Genre:                strLine = GUILocalizeStrings.Get(678); //Sort by: Genre                break;              case SortMethod.Played:                strLine = GUILocalizeStrings.Get(671); //Sort by: Watched                break;              case SortMethod.Duration:                strLine = GUILocalizeStrings.Get(1017); //Sort by: Duration                break;            }
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,UpdateButtonStates,The following statement contains a magic number: switch (_currentSortMethod)            {              case SortMethod.Channel:                strLine = GUILocalizeStrings.Get(620); //Sort by: Channel                break;              case SortMethod.Date:                strLine = GUILocalizeStrings.Get(621); //Sort by: Date                break;              case SortMethod.Name:                strLine = GUILocalizeStrings.Get(268); //Sort by: Title                break;              case SortMethod.Genre:                strLine = GUILocalizeStrings.Get(678); //Sort by: Genre                break;              case SortMethod.Played:                strLine = GUILocalizeStrings.Get(671); //Sort by: Watched                break;              case SortMethod.Duration:                strLine = GUILocalizeStrings.Get(1017); //Sort by: Duration                break;            }
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,UpdateButtonStates,The following statement contains a magic number: switch (_currentSortMethod)            {              case SortMethod.Channel:                strLine = GUILocalizeStrings.Get(620); //Sort by: Channel                break;              case SortMethod.Date:                strLine = GUILocalizeStrings.Get(621); //Sort by: Date                break;              case SortMethod.Name:                strLine = GUILocalizeStrings.Get(268); //Sort by: Title                break;              case SortMethod.Genre:                strLine = GUILocalizeStrings.Get(678); //Sort by: Genre                break;              case SortMethod.Played:                strLine = GUILocalizeStrings.Get(671); //Sort by: Watched                break;              case SortMethod.Duration:                strLine = GUILocalizeStrings.Get(1017); //Sort by: Duration                break;            }
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,UpdateButtonStates,The following statement contains a magic number: switch (_currentSortMethod)            {              case SortMethod.Channel:                strLine = GUILocalizeStrings.Get(620); //Sort by: Channel                break;              case SortMethod.Date:                strLine = GUILocalizeStrings.Get(621); //Sort by: Date                break;              case SortMethod.Name:                strLine = GUILocalizeStrings.Get(268); //Sort by: Title                break;              case SortMethod.Genre:                strLine = GUILocalizeStrings.Get(678); //Sort by: Genre                break;              case SortMethod.Played:                strLine = GUILocalizeStrings.Get(671); //Sort by: Watched                break;              case SortMethod.Duration:                strLine = GUILocalizeStrings.Get(1017); //Sort by: Duration                break;            }
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,UpdateButtonStates,The following statement contains a magic number: switch (_currentSortMethod)            {              case SortMethod.Channel:                strLine = GUILocalizeStrings.Get(620); //Sort by: Channel                break;              case SortMethod.Date:                strLine = GUILocalizeStrings.Get(621); //Sort by: Date                break;              case SortMethod.Name:                strLine = GUILocalizeStrings.Get(268); //Sort by: Title                break;              case SortMethod.Genre:                strLine = GUILocalizeStrings.Get(678); //Sort by: Genre                break;              case SortMethod.Played:                strLine = GUILocalizeStrings.Get(671); //Sort by: Watched                break;              case SortMethod.Duration:                strLine = GUILocalizeStrings.Get(1017); //Sort by: Duration                break;            }
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,UpdateButtonStates,The following statement contains a magic number: switch (_currentSortMethod)            {              case SortMethod.Channel:                strLine = GUILocalizeStrings.Get(620); //Sort by: Channel                break;              case SortMethod.Date:                strLine = GUILocalizeStrings.Get(621); //Sort by: Date                break;              case SortMethod.Name:                strLine = GUILocalizeStrings.Get(268); //Sort by: Title                break;              case SortMethod.Genre:                strLine = GUILocalizeStrings.Get(678); //Sort by: Genre                break;              case SortMethod.Played:                strLine = GUILocalizeStrings.Get(671); //Sort by: Watched                break;              case SortMethod.Duration:                strLine = GUILocalizeStrings.Get(1017); //Sort by: Duration                break;            }
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,ListFolder,The following statement contains a magic number: var actualLabel = _currentLabel == GUILocalizeStrings.Get(2014) ? string.Empty : _currentLabel;
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,BuildItemFromRecording,The following statement contains a magic number: string strChannelName = GUILocalizeStrings.Get(2014);
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,BuildItemFromRecording,The following statement contains a magic number: string strGenre = GUILocalizeStrings.Get(2014);
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,SetLabels,The following statement contains a magic number: item1.Label3 = GUILocalizeStrings.Get(2014);
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,SetLabels,The following statement contains a magic number: item1.Label2 = GUILocalizeStrings.Get(2014);
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnDeleteRecording,The following statement contains a magic number: dlgYesNo.SetHeading(GUILocalizeStrings.Get(2166));
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnDeleteRecording,The following statement contains a magic number: dlgYesNo.SetLine(2' string.Empty);
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnDeleteRecording,The following statement contains a magic number: dlgYesNo.SetLine(3' string.Empty);
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,TryDeleteRecordingAndNotifyUser,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,TryDeleteRecordingAndNotifyUser,The following statement contains a magic number: !deleteRecording && timeout < 5
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,TryDeleteRecordingAndNotifyUser,The following statement contains a magic number: dlgOk.SetHeading(257);
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,TryDeleteRecordingAndNotifyUser,The following statement contains a magic number: dlgOk.SetLine(1' GUILocalizeStrings.Get(200054));
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,TryDeleteRecordingAndNotifyUser,The following statement contains a magic number: dlgOk.SetLine(2' rec.Title);
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnCleanup,The following statement contains a magic number: dlgYesNo.SetHeading(GUILocalizeStrings.Get(200043));
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnCleanup,The following statement contains a magic number: dlgYesNo.SetLine(1' GUILocalizeStrings.Get(200050));
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnCleanup,The following statement contains a magic number: dlgYesNo.SetLine(2' GUILocalizeStrings.Get(506));
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnCleanup,The following statement contains a magic number: dlgYesNo.SetLine(2' GUILocalizeStrings.Get(506));
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnCleanup,The following statement contains a magic number: dlgYesNo.SetLine(3' string.Empty);
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnCleanup,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(200043));
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnCleanup,The following statement contains a magic number: dlg.Add(new GUIListItem(GUILocalizeStrings.Get(676)));
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnCleanup,The following statement contains a magic number: dlg.Add(new GUIListItem(GUILocalizeStrings.Get(200044)));
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnCleanup,The following statement contains a magic number: dlg.Add(new GUIListItem(GUILocalizeStrings.Get(200045)));
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnCleanup,The following statement contains a magic number: dlg.Add(new GUIListItem(GUILocalizeStrings.Get(200049)));
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnCleanup,The following statement contains a magic number: dlg.Add(new GUIListItem(GUILocalizeStrings.Get(222)));
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnCleanup,The following statement contains a magic number: dlg.SelectedLabel > 4
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnCleanup,The following statement contains a magic number: (dlg.SelectedLabel == 0) || (dlg.SelectedLabel == 2)
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnCleanup,The following statement contains a magic number: (dlg.SelectedLabel == 1) || (dlg.SelectedLabel == 2)
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnCleanup,The following statement contains a magic number: dlg.SelectedLabel == 3 && _currentLabel != ""
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,UpdateProperties,The following statement contains a magic number: int percentWatched = (int)Math.Ceiling((rec.StopTime / duration1.TotalSeconds) * 100);
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,Compare,The following statement contains a magic number: switch (_currentSortMethod)          {            case SortMethod.Played:              item1.Label2 = string.Format("{0} {1}"' rec1.TimesWatched' GUILocalizeStrings.Get(677)); //times              item2.Label2 = string.Format("{0} {1}"' rec2.TimesWatched' GUILocalizeStrings.Get(677)); //times              if (rec1.TimesWatched == rec2.TimesWatched)              {                goto case SortMethod.Name;              }              else              {                if (m_bSortAscending)                {                  return rec1.TimesWatched - rec2.TimesWatched;                }                else                {                  return rec2.TimesWatched - rec1.TimesWatched;                }              }            case SortMethod.Name:              if (m_bSortAscending)              {                iComp = string.Compare(TVUtil.GetDisplayTitle(rec1)' TVUtil.GetDisplayTitle(rec2)' true);                if (iComp == 0)                {                  goto case SortMethod.Channel;                }                else                {                  return iComp;                }              }              else              {                iComp = string.Compare(TVUtil.GetDisplayTitle(rec2)' TVUtil.GetDisplayTitle(rec1)' true);                if (iComp == 0)                {                  goto case SortMethod.Channel;                }                else                {                  return iComp;                }              }            case SortMethod.Channel:              if (m_bSortAscending)              {                iComp = string.Compare(rec1.ReferencedChannel().DisplayName' rec2.ReferencedChannel().DisplayName' true);                if (iComp == 0)                {                  goto case SortMethod.Date;                }                else                {                  return iComp;                }              }              else              {                iComp = string.Compare(rec2.ReferencedChannel().DisplayName' rec1.ReferencedChannel().DisplayName' true);                if (iComp == 0)                {                  goto case SortMethod.Date;                }                else                {                  return iComp;                }              }            case SortMethod.Duration:              {                TimeSpan duration1 = (rec1.EndTime - rec1.StartTime);                TimeSpan duration2 = rec2.EndTime - rec2.StartTime;                if (m_bSortAscending)                {                  if (duration1 == duration2)                  {                    goto case SortMethod.Date;                  }                  if (duration1 > duration2)                  {                    return 1;                  }                  return -1;                }                else                {                  if (duration1 == duration2)                  {                    goto case SortMethod.Date;                  }                  if (duration1 < duration2)                  {                    return 1;                  }                  return -1;                }              }            case SortMethod.Date:              if (m_bSortAscending)              {                if (rec1.StartTime == rec2.StartTime)                {                  return 0;                }                if (rec1.StartTime < rec2.StartTime)                {                  return 1;                }                return -1;              }              else              {                if (rec1.StartTime == rec2.StartTime)                {                  return 0;                }                if (rec1.StartTime > rec2.StartTime)                {                  return 1;                }                return -1;              }            case SortMethod.Genre:              item1.Label2 = rec1.Genre;              item2.Label2 = rec2.Genre;              if (rec1.Genre != rec2.Genre)              {                if (m_bSortAscending)                {                  return string.Compare(rec1.Genre' rec2.Genre' true);                }                else                {                  return string.Compare(rec2.Genre' rec1.Genre' true);                }              }              if (rec1.StartTime != rec2.StartTime)              {                if (m_bSortAscending)                {                  ts = rec1.StartTime - rec2.StartTime;                  return (int)(ts.Minutes);                }                else                {                  ts = rec2.StartTime - rec1.StartTime;                  return (int)(ts.Minutes);                }              }              if (rec1.IdChannel != rec2.IdChannel)              {                if (m_bSortAscending)                {                  return string.Compare(rec1.ReferencedChannel().DisplayName' rec2.ReferencedChannel().DisplayName);                }                else                {                  return string.Compare(rec2.ReferencedChannel().DisplayName' rec1.ReferencedChannel().DisplayName);                }              }              if (TVUtil.GetDisplayTitle(rec1) != TVUtil.GetDisplayTitle(rec2))              {                if (m_bSortAscending)                {                  return string.Compare(TVUtil.GetDisplayTitle(rec1)' TVUtil.GetDisplayTitle(rec2));                }                else                {                  return string.Compare(TVUtil.GetDisplayTitle(rec2)' TVUtil.GetDisplayTitle(rec1));                }              }              return 0;          }
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,Compare,The following statement contains a magic number: switch (_currentSortMethod)          {            case SortMethod.Played:              item1.Label2 = string.Format("{0} {1}"' rec1.TimesWatched' GUILocalizeStrings.Get(677)); //times              item2.Label2 = string.Format("{0} {1}"' rec2.TimesWatched' GUILocalizeStrings.Get(677)); //times              if (rec1.TimesWatched == rec2.TimesWatched)              {                goto case SortMethod.Name;              }              else              {                if (m_bSortAscending)                {                  return rec1.TimesWatched - rec2.TimesWatched;                }                else                {                  return rec2.TimesWatched - rec1.TimesWatched;                }              }            case SortMethod.Name:              if (m_bSortAscending)              {                iComp = string.Compare(TVUtil.GetDisplayTitle(rec1)' TVUtil.GetDisplayTitle(rec2)' true);                if (iComp == 0)                {                  goto case SortMethod.Channel;                }                else                {                  return iComp;                }              }              else              {                iComp = string.Compare(TVUtil.GetDisplayTitle(rec2)' TVUtil.GetDisplayTitle(rec1)' true);                if (iComp == 0)                {                  goto case SortMethod.Channel;                }                else                {                  return iComp;                }              }            case SortMethod.Channel:              if (m_bSortAscending)              {                iComp = string.Compare(rec1.ReferencedChannel().DisplayName' rec2.ReferencedChannel().DisplayName' true);                if (iComp == 0)                {                  goto case SortMethod.Date;                }                else                {                  return iComp;                }              }              else              {                iComp = string.Compare(rec2.ReferencedChannel().DisplayName' rec1.ReferencedChannel().DisplayName' true);                if (iComp == 0)                {                  goto case SortMethod.Date;                }                else                {                  return iComp;                }              }            case SortMethod.Duration:              {                TimeSpan duration1 = (rec1.EndTime - rec1.StartTime);                TimeSpan duration2 = rec2.EndTime - rec2.StartTime;                if (m_bSortAscending)                {                  if (duration1 == duration2)                  {                    goto case SortMethod.Date;                  }                  if (duration1 > duration2)                  {                    return 1;                  }                  return -1;                }                else                {                  if (duration1 == duration2)                  {                    goto case SortMethod.Date;                  }                  if (duration1 < duration2)                  {                    return 1;                  }                  return -1;                }              }            case SortMethod.Date:              if (m_bSortAscending)              {                if (rec1.StartTime == rec2.StartTime)                {                  return 0;                }                if (rec1.StartTime < rec2.StartTime)                {                  return 1;                }                return -1;              }              else              {                if (rec1.StartTime == rec2.StartTime)                {                  return 0;                }                if (rec1.StartTime > rec2.StartTime)                {                  return 1;                }                return -1;              }            case SortMethod.Genre:              item1.Label2 = rec1.Genre;              item2.Label2 = rec2.Genre;              if (rec1.Genre != rec2.Genre)              {                if (m_bSortAscending)                {                  return string.Compare(rec1.Genre' rec2.Genre' true);                }                else                {                  return string.Compare(rec2.Genre' rec1.Genre' true);                }              }              if (rec1.StartTime != rec2.StartTime)              {                if (m_bSortAscending)                {                  ts = rec1.StartTime - rec2.StartTime;                  return (int)(ts.Minutes);                }                else                {                  ts = rec2.StartTime - rec1.StartTime;                  return (int)(ts.Minutes);                }              }              if (rec1.IdChannel != rec2.IdChannel)              {                if (m_bSortAscending)                {                  return string.Compare(rec1.ReferencedChannel().DisplayName' rec2.ReferencedChannel().DisplayName);                }                else                {                  return string.Compare(rec2.ReferencedChannel().DisplayName' rec1.ReferencedChannel().DisplayName);                }              }              if (TVUtil.GetDisplayTitle(rec1) != TVUtil.GetDisplayTitle(rec2))              {                if (m_bSortAscending)                {                  return string.Compare(TVUtil.GetDisplayTitle(rec1)' TVUtil.GetDisplayTitle(rec2));                }                else                {                  return string.Compare(TVUtil.GetDisplayTitle(rec2)' TVUtil.GetDisplayTitle(rec1));                }              }              return 0;          }
Magic Number,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,doOnPlayBackStoppedOrChanged,The following statement contains a magic number: playTimePercentage = (int)Math.Ceiling((stoptime / g_Player.Player.Duration) * 100);
Magic Number,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,OnPageLoad,The following statement contains a magic number: switch (currentSortMethod)        {          case SortMethod.Name:            btnSortBy.SelectedItem = 0;            break;          case SortMethod.Type:            btnSortBy.SelectedItem = 1;            break;          case SortMethod.Genre:            btnSortBy.SelectedItem = 2;            break;          case SortMethod.Bitrate:            btnSortBy.SelectedItem = 3;            break;          case SortMethod.Number:            btnSortBy.SelectedItem = 4;            break;        }
Magic Number,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,OnPageLoad,The following statement contains a magic number: switch (currentSortMethod)        {          case SortMethod.Name:            btnSortBy.SelectedItem = 0;            break;          case SortMethod.Type:            btnSortBy.SelectedItem = 1;            break;          case SortMethod.Genre:            btnSortBy.SelectedItem = 2;            break;          case SortMethod.Bitrate:            btnSortBy.SelectedItem = 3;            break;          case SortMethod.Number:            btnSortBy.SelectedItem = 4;            break;        }
Magic Number,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,OnPageLoad,The following statement contains a magic number: switch (currentSortMethod)        {          case SortMethod.Name:            btnSortBy.SelectedItem = 0;            break;          case SortMethod.Type:            btnSortBy.SelectedItem = 1;            break;          case SortMethod.Genre:            btnSortBy.SelectedItem = 2;            break;          case SortMethod.Bitrate:            btnSortBy.SelectedItem = 3;            break;          case SortMethod.Number:            btnSortBy.SelectedItem = 4;            break;        }
Magic Number,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,UpdateButtonStates,The following statement contains a magic number: switch (currentSortMethod)        {          case SortMethod.Name:            strLine = GUILocalizeStrings.Get(103);            break;          case SortMethod.Type:            strLine = GUILocalizeStrings.Get(668);            break;          case SortMethod.Genre:            strLine = GUILocalizeStrings.Get(669);            break;          case SortMethod.Bitrate:            strLine = GUILocalizeStrings.Get(670);            break;          case SortMethod.Number:            strLine = GUILocalizeStrings.Get(620);            break;        }
Magic Number,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,UpdateButtonStates,The following statement contains a magic number: switch (currentSortMethod)        {          case SortMethod.Name:            strLine = GUILocalizeStrings.Get(103);            break;          case SortMethod.Type:            strLine = GUILocalizeStrings.Get(668);            break;          case SortMethod.Genre:            strLine = GUILocalizeStrings.Get(669);            break;          case SortMethod.Bitrate:            strLine = GUILocalizeStrings.Get(670);            break;          case SortMethod.Number:            strLine = GUILocalizeStrings.Get(620);            break;        }
Magic Number,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,UpdateButtonStates,The following statement contains a magic number: switch (currentSortMethod)        {          case SortMethod.Name:            strLine = GUILocalizeStrings.Get(103);            break;          case SortMethod.Type:            strLine = GUILocalizeStrings.Get(668);            break;          case SortMethod.Genre:            strLine = GUILocalizeStrings.Get(669);            break;          case SortMethod.Bitrate:            strLine = GUILocalizeStrings.Get(670);            break;          case SortMethod.Number:            strLine = GUILocalizeStrings.Get(620);            break;        }
Magic Number,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,UpdateButtonStates,The following statement contains a magic number: switch (currentSortMethod)        {          case SortMethod.Name:            strLine = GUILocalizeStrings.Get(103);            break;          case SortMethod.Type:            strLine = GUILocalizeStrings.Get(668);            break;          case SortMethod.Genre:            strLine = GUILocalizeStrings.Get(669);            break;          case SortMethod.Bitrate:            strLine = GUILocalizeStrings.Get(670);            break;          case SortMethod.Number:            strLine = GUILocalizeStrings.Get(620);            break;        }
Magic Number,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,UpdateButtonStates,The following statement contains a magic number: switch (currentSortMethod)        {          case SortMethod.Name:            strLine = GUILocalizeStrings.Get(103);            break;          case SortMethod.Type:            strLine = GUILocalizeStrings.Get(668);            break;          case SortMethod.Genre:            strLine = GUILocalizeStrings.Get(669);            break;          case SortMethod.Bitrate:            strLine = GUILocalizeStrings.Get(670);            break;          case SortMethod.Number:            strLine = GUILocalizeStrings.Get(620);            break;        }
Magic Number,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,OnShowSort,The following statement contains a magic number: dlg.SetHeading(495);
Magic Number,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(103);
Magic Number,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(668);
Magic Number,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(669);
Magic Number,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(670);
Magic Number,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(620);
Magic Number,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 103:            currentSortMethod = SortMethod.Name;            break;          case 668:            currentSortMethod = SortMethod.Type;            break;          case 669:            currentSortMethod = SortMethod.Genre;            break;          case 670:            currentSortMethod = SortMethod.Bitrate;            break;          case 620:            currentSortMethod = SortMethod.Number;            break;          default:            currentSortMethod = SortMethod.Name;            break;        }
Magic Number,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 103:            currentSortMethod = SortMethod.Name;            break;          case 668:            currentSortMethod = SortMethod.Type;            break;          case 669:            currentSortMethod = SortMethod.Genre;            break;          case 670:            currentSortMethod = SortMethod.Bitrate;            break;          case 620:            currentSortMethod = SortMethod.Number;            break;          default:            currentSortMethod = SortMethod.Name;            break;        }
Magic Number,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 103:            currentSortMethod = SortMethod.Name;            break;          case 668:            currentSortMethod = SortMethod.Type;            break;          case 669:            currentSortMethod = SortMethod.Genre;            break;          case 670:            currentSortMethod = SortMethod.Bitrate;            break;          case 620:            currentSortMethod = SortMethod.Number;            break;          default:            currentSortMethod = SortMethod.Name;            break;        }
Magic Number,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 103:            currentSortMethod = SortMethod.Name;            break;          case 668:            currentSortMethod = SortMethod.Type;            break;          case 669:            currentSortMethod = SortMethod.Genre;            break;          case 670:            currentSortMethod = SortMethod.Bitrate;            break;          case 620:            currentSortMethod = SortMethod.Number;            break;          default:            currentSortMethod = SortMethod.Name;            break;        }
Magic Number,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 103:            currentSortMethod = SortMethod.Name;            break;          case 668:            currentSortMethod = SortMethod.Type;            break;          case 669:            currentSortMethod = SortMethod.Genre;            break;          case 670:            currentSortMethod = SortMethod.Bitrate;            break;          case 620:            currentSortMethod = SortMethod.Number;            break;          default:            currentSortMethod = SortMethod.Name;            break;        }
Magic Number,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,GetHome,The following statement contains a magic number: strButtonText = GUILocalizeStrings.Get(665);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,LoadSettings,The following statement contains a magic number: _channelNumberMaxLength = xmlreader.GetValueAsInt("myradio"' "channelnumbermaxlength"' 3);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,LoadSettings,The following statement contains a magic number: _zapKeyTimeout = 1000 * xmlreader.GetValueAsInt("movieplayer"' "zapKeyTimeout"' 1);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,LoadSettings,The following statement contains a magic number: _timePerBlock = xmlreader.GetValueAsInt("radioguide"' "timeperblock"' 30);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_singleChannelView)            {              OnSwitchMode(true);              return;            }            GUIWindowManager.ShowPreviousWindow();            return;            case Action.ActionType.ACTION_KEY_PRESSED:            if (action.m_key != null)            {              OnKeyCode((char)action.m_key.KeyChar);            }            break;            case Action.ActionType.ACTION_RECORD:            if ((GetFocusControlId() != -1) && (_cursorY > 0) && (_cursorX >= 0))            {              OnRecord();            }            break;            case Action.ActionType.ACTION_MOUSE_MOVE:            {              int x = (int)action.fAmount1;              int y = (int)action.fAmount2;              foreach (GUIControl control in controlList)              {                if (control.GetID >= (int)Controls.IMG_CHAN1 + 0 &&                    control.GetID <= (int)Controls.IMG_CHAN1 + _channelCount)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      UnFocus();                      _cursorX = control.GetID - (int)Controls.IMG_CHAN1;                      _cursorY = 0;                        if (_singleChannelNumber != _cursorX + ChannelOffset)                      {                        Update(false);                      }                      UpdateCurrentProgram();                      UpdateHorizontalScrollbar();                      UpdateVerticalScrollbar();                      updateSingleChannelNumber();                      return;                    }                  }                }                if (control.GetID >= GUIDE_COMPONENTID_START)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      int iControlId = control.GetID;                      if (iControlId >= GUIDE_COMPONENTID_START)                      {                        iControlId -= GUIDE_COMPONENTID_START;                        int iCursorY = (iControlId / RowID);                        iControlId -= iCursorY * RowID;                        if (iControlId % ColID == 0)                        {                          int iCursorX = (iControlId / ColID) + 1;                          if (iCursorY != _cursorX || iCursorX != _cursorY)                          {                            UnFocus();                            _cursorX = iCursorY;                            _cursorY = iCursorX;                            UpdateCurrentProgram();                            SetFocus();                            UpdateHorizontalScrollbar();                            UpdateVerticalScrollbar();                            updateSingleChannelNumber();                            return;                          }                          return;                        }                      }                    }                  }                }              }              UnFocus();              _cursorY = -1;              _cursorX = -1;              base.OnAction(action);            }            break;            case Action.ActionType.ACTION_TVGUIDE_RESET:            _cursorY = 0;            _viewingTime = DateTime.Now;            Update(false);            break;              case Action.ActionType.ACTION_CONTEXT_MENU:            {              if (_cursorY >= 0 && _cursorX >= 0)              {                if (_cursorY == 0)                {                  _backupSingleViewCursorX = _cursorX;                  OnSwitchMode(false);                  return;                }                else                {                  ShowContextMenu();                }              }              else              {                action.wID = Action.ActionType.ACTION_SELECT_ITEM;                GUIWindowManager.OnAction(action);              }            }            break;            case Action.ActionType.ACTION_PAGE_UP:            OnPageUp();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_PAGE_DOWN:            OnPageDown();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (_cursorX >= 0)              {                OnLeft();                updateSingleChannelNumber();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (_cursorX >= 0)              {                OnRight();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_UP:            {              if (_cursorX >= 0)              {                OnUp(true' false);                updateSingleChannelNumber();                UpdateVerticalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_DOWN:            {              if (_cursorX >= 0)              {                OnDown(true);                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              else              {                _cursorX = 0;                SetFocus();                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              return;            }            //break;          case Action.ActionType.ACTION_SHOW_INFO:            {              ShowContextMenu();            }            break;          case Action.ActionType.ACTION_INCREASE_TIMEBLOCK:            {              _timePerBlock += 15;              if (_timePerBlock > 60)              {                _timePerBlock = 60;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;            case Action.ActionType.ACTION_REWIND:          case Action.ActionType.ACTION_MUSIC_REWIND:            _viewingTime = _viewingTime.AddHours(-3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_FORWARD:          case Action.ActionType.ACTION_MUSIC_FORWARD:            _viewingTime = _viewingTime.AddHours(3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_DECREASE_TIMEBLOCK:            {              if (_timePerBlock > 15)              {                _timePerBlock -= 15;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_DEFAULT_TIMEBLOCK:            {              _timePerBlock = 30;              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_TVGUIDE_INCREASE_DAY:            OnNextDay();            break;            case Action.ActionType.ACTION_TVGUIDE_DECREASE_DAY:            OnPreviousDay();            break;            // TV group changing actions          case Action.ActionType.ACTION_TVGUIDE_NEXT_GROUP:            OnChangeChannelGroup(1);            break;            case Action.ActionType.ACTION_TVGUIDE_PREV_GROUP:            OnChangeChannelGroup(-1);            break;        }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_singleChannelView)            {              OnSwitchMode(true);              return;            }            GUIWindowManager.ShowPreviousWindow();            return;            case Action.ActionType.ACTION_KEY_PRESSED:            if (action.m_key != null)            {              OnKeyCode((char)action.m_key.KeyChar);            }            break;            case Action.ActionType.ACTION_RECORD:            if ((GetFocusControlId() != -1) && (_cursorY > 0) && (_cursorX >= 0))            {              OnRecord();            }            break;            case Action.ActionType.ACTION_MOUSE_MOVE:            {              int x = (int)action.fAmount1;              int y = (int)action.fAmount2;              foreach (GUIControl control in controlList)              {                if (control.GetID >= (int)Controls.IMG_CHAN1 + 0 &&                    control.GetID <= (int)Controls.IMG_CHAN1 + _channelCount)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      UnFocus();                      _cursorX = control.GetID - (int)Controls.IMG_CHAN1;                      _cursorY = 0;                        if (_singleChannelNumber != _cursorX + ChannelOffset)                      {                        Update(false);                      }                      UpdateCurrentProgram();                      UpdateHorizontalScrollbar();                      UpdateVerticalScrollbar();                      updateSingleChannelNumber();                      return;                    }                  }                }                if (control.GetID >= GUIDE_COMPONENTID_START)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      int iControlId = control.GetID;                      if (iControlId >= GUIDE_COMPONENTID_START)                      {                        iControlId -= GUIDE_COMPONENTID_START;                        int iCursorY = (iControlId / RowID);                        iControlId -= iCursorY * RowID;                        if (iControlId % ColID == 0)                        {                          int iCursorX = (iControlId / ColID) + 1;                          if (iCursorY != _cursorX || iCursorX != _cursorY)                          {                            UnFocus();                            _cursorX = iCursorY;                            _cursorY = iCursorX;                            UpdateCurrentProgram();                            SetFocus();                            UpdateHorizontalScrollbar();                            UpdateVerticalScrollbar();                            updateSingleChannelNumber();                            return;                          }                          return;                        }                      }                    }                  }                }              }              UnFocus();              _cursorY = -1;              _cursorX = -1;              base.OnAction(action);            }            break;            case Action.ActionType.ACTION_TVGUIDE_RESET:            _cursorY = 0;            _viewingTime = DateTime.Now;            Update(false);            break;              case Action.ActionType.ACTION_CONTEXT_MENU:            {              if (_cursorY >= 0 && _cursorX >= 0)              {                if (_cursorY == 0)                {                  _backupSingleViewCursorX = _cursorX;                  OnSwitchMode(false);                  return;                }                else                {                  ShowContextMenu();                }              }              else              {                action.wID = Action.ActionType.ACTION_SELECT_ITEM;                GUIWindowManager.OnAction(action);              }            }            break;            case Action.ActionType.ACTION_PAGE_UP:            OnPageUp();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_PAGE_DOWN:            OnPageDown();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (_cursorX >= 0)              {                OnLeft();                updateSingleChannelNumber();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (_cursorX >= 0)              {                OnRight();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_UP:            {              if (_cursorX >= 0)              {                OnUp(true' false);                updateSingleChannelNumber();                UpdateVerticalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_DOWN:            {              if (_cursorX >= 0)              {                OnDown(true);                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              else              {                _cursorX = 0;                SetFocus();                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              return;            }            //break;          case Action.ActionType.ACTION_SHOW_INFO:            {              ShowContextMenu();            }            break;          case Action.ActionType.ACTION_INCREASE_TIMEBLOCK:            {              _timePerBlock += 15;              if (_timePerBlock > 60)              {                _timePerBlock = 60;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;            case Action.ActionType.ACTION_REWIND:          case Action.ActionType.ACTION_MUSIC_REWIND:            _viewingTime = _viewingTime.AddHours(-3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_FORWARD:          case Action.ActionType.ACTION_MUSIC_FORWARD:            _viewingTime = _viewingTime.AddHours(3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_DECREASE_TIMEBLOCK:            {              if (_timePerBlock > 15)              {                _timePerBlock -= 15;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_DEFAULT_TIMEBLOCK:            {              _timePerBlock = 30;              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_TVGUIDE_INCREASE_DAY:            OnNextDay();            break;            case Action.ActionType.ACTION_TVGUIDE_DECREASE_DAY:            OnPreviousDay();            break;            // TV group changing actions          case Action.ActionType.ACTION_TVGUIDE_NEXT_GROUP:            OnChangeChannelGroup(1);            break;            case Action.ActionType.ACTION_TVGUIDE_PREV_GROUP:            OnChangeChannelGroup(-1);            break;        }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_singleChannelView)            {              OnSwitchMode(true);              return;            }            GUIWindowManager.ShowPreviousWindow();            return;            case Action.ActionType.ACTION_KEY_PRESSED:            if (action.m_key != null)            {              OnKeyCode((char)action.m_key.KeyChar);            }            break;            case Action.ActionType.ACTION_RECORD:            if ((GetFocusControlId() != -1) && (_cursorY > 0) && (_cursorX >= 0))            {              OnRecord();            }            break;            case Action.ActionType.ACTION_MOUSE_MOVE:            {              int x = (int)action.fAmount1;              int y = (int)action.fAmount2;              foreach (GUIControl control in controlList)              {                if (control.GetID >= (int)Controls.IMG_CHAN1 + 0 &&                    control.GetID <= (int)Controls.IMG_CHAN1 + _channelCount)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      UnFocus();                      _cursorX = control.GetID - (int)Controls.IMG_CHAN1;                      _cursorY = 0;                        if (_singleChannelNumber != _cursorX + ChannelOffset)                      {                        Update(false);                      }                      UpdateCurrentProgram();                      UpdateHorizontalScrollbar();                      UpdateVerticalScrollbar();                      updateSingleChannelNumber();                      return;                    }                  }                }                if (control.GetID >= GUIDE_COMPONENTID_START)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      int iControlId = control.GetID;                      if (iControlId >= GUIDE_COMPONENTID_START)                      {                        iControlId -= GUIDE_COMPONENTID_START;                        int iCursorY = (iControlId / RowID);                        iControlId -= iCursorY * RowID;                        if (iControlId % ColID == 0)                        {                          int iCursorX = (iControlId / ColID) + 1;                          if (iCursorY != _cursorX || iCursorX != _cursorY)                          {                            UnFocus();                            _cursorX = iCursorY;                            _cursorY = iCursorX;                            UpdateCurrentProgram();                            SetFocus();                            UpdateHorizontalScrollbar();                            UpdateVerticalScrollbar();                            updateSingleChannelNumber();                            return;                          }                          return;                        }                      }                    }                  }                }              }              UnFocus();              _cursorY = -1;              _cursorX = -1;              base.OnAction(action);            }            break;            case Action.ActionType.ACTION_TVGUIDE_RESET:            _cursorY = 0;            _viewingTime = DateTime.Now;            Update(false);            break;              case Action.ActionType.ACTION_CONTEXT_MENU:            {              if (_cursorY >= 0 && _cursorX >= 0)              {                if (_cursorY == 0)                {                  _backupSingleViewCursorX = _cursorX;                  OnSwitchMode(false);                  return;                }                else                {                  ShowContextMenu();                }              }              else              {                action.wID = Action.ActionType.ACTION_SELECT_ITEM;                GUIWindowManager.OnAction(action);              }            }            break;            case Action.ActionType.ACTION_PAGE_UP:            OnPageUp();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_PAGE_DOWN:            OnPageDown();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (_cursorX >= 0)              {                OnLeft();                updateSingleChannelNumber();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (_cursorX >= 0)              {                OnRight();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_UP:            {              if (_cursorX >= 0)              {                OnUp(true' false);                updateSingleChannelNumber();                UpdateVerticalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_DOWN:            {              if (_cursorX >= 0)              {                OnDown(true);                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              else              {                _cursorX = 0;                SetFocus();                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              return;            }            //break;          case Action.ActionType.ACTION_SHOW_INFO:            {              ShowContextMenu();            }            break;          case Action.ActionType.ACTION_INCREASE_TIMEBLOCK:            {              _timePerBlock += 15;              if (_timePerBlock > 60)              {                _timePerBlock = 60;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;            case Action.ActionType.ACTION_REWIND:          case Action.ActionType.ACTION_MUSIC_REWIND:            _viewingTime = _viewingTime.AddHours(-3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_FORWARD:          case Action.ActionType.ACTION_MUSIC_FORWARD:            _viewingTime = _viewingTime.AddHours(3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_DECREASE_TIMEBLOCK:            {              if (_timePerBlock > 15)              {                _timePerBlock -= 15;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_DEFAULT_TIMEBLOCK:            {              _timePerBlock = 30;              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_TVGUIDE_INCREASE_DAY:            OnNextDay();            break;            case Action.ActionType.ACTION_TVGUIDE_DECREASE_DAY:            OnPreviousDay();            break;            // TV group changing actions          case Action.ActionType.ACTION_TVGUIDE_NEXT_GROUP:            OnChangeChannelGroup(1);            break;            case Action.ActionType.ACTION_TVGUIDE_PREV_GROUP:            OnChangeChannelGroup(-1);            break;        }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_singleChannelView)            {              OnSwitchMode(true);              return;            }            GUIWindowManager.ShowPreviousWindow();            return;            case Action.ActionType.ACTION_KEY_PRESSED:            if (action.m_key != null)            {              OnKeyCode((char)action.m_key.KeyChar);            }            break;            case Action.ActionType.ACTION_RECORD:            if ((GetFocusControlId() != -1) && (_cursorY > 0) && (_cursorX >= 0))            {              OnRecord();            }            break;            case Action.ActionType.ACTION_MOUSE_MOVE:            {              int x = (int)action.fAmount1;              int y = (int)action.fAmount2;              foreach (GUIControl control in controlList)              {                if (control.GetID >= (int)Controls.IMG_CHAN1 + 0 &&                    control.GetID <= (int)Controls.IMG_CHAN1 + _channelCount)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      UnFocus();                      _cursorX = control.GetID - (int)Controls.IMG_CHAN1;                      _cursorY = 0;                        if (_singleChannelNumber != _cursorX + ChannelOffset)                      {                        Update(false);                      }                      UpdateCurrentProgram();                      UpdateHorizontalScrollbar();                      UpdateVerticalScrollbar();                      updateSingleChannelNumber();                      return;                    }                  }                }                if (control.GetID >= GUIDE_COMPONENTID_START)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      int iControlId = control.GetID;                      if (iControlId >= GUIDE_COMPONENTID_START)                      {                        iControlId -= GUIDE_COMPONENTID_START;                        int iCursorY = (iControlId / RowID);                        iControlId -= iCursorY * RowID;                        if (iControlId % ColID == 0)                        {                          int iCursorX = (iControlId / ColID) + 1;                          if (iCursorY != _cursorX || iCursorX != _cursorY)                          {                            UnFocus();                            _cursorX = iCursorY;                            _cursorY = iCursorX;                            UpdateCurrentProgram();                            SetFocus();                            UpdateHorizontalScrollbar();                            UpdateVerticalScrollbar();                            updateSingleChannelNumber();                            return;                          }                          return;                        }                      }                    }                  }                }              }              UnFocus();              _cursorY = -1;              _cursorX = -1;              base.OnAction(action);            }            break;            case Action.ActionType.ACTION_TVGUIDE_RESET:            _cursorY = 0;            _viewingTime = DateTime.Now;            Update(false);            break;              case Action.ActionType.ACTION_CONTEXT_MENU:            {              if (_cursorY >= 0 && _cursorX >= 0)              {                if (_cursorY == 0)                {                  _backupSingleViewCursorX = _cursorX;                  OnSwitchMode(false);                  return;                }                else                {                  ShowContextMenu();                }              }              else              {                action.wID = Action.ActionType.ACTION_SELECT_ITEM;                GUIWindowManager.OnAction(action);              }            }            break;            case Action.ActionType.ACTION_PAGE_UP:            OnPageUp();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_PAGE_DOWN:            OnPageDown();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (_cursorX >= 0)              {                OnLeft();                updateSingleChannelNumber();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (_cursorX >= 0)              {                OnRight();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_UP:            {              if (_cursorX >= 0)              {                OnUp(true' false);                updateSingleChannelNumber();                UpdateVerticalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_DOWN:            {              if (_cursorX >= 0)              {                OnDown(true);                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              else              {                _cursorX = 0;                SetFocus();                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              return;            }            //break;          case Action.ActionType.ACTION_SHOW_INFO:            {              ShowContextMenu();            }            break;          case Action.ActionType.ACTION_INCREASE_TIMEBLOCK:            {              _timePerBlock += 15;              if (_timePerBlock > 60)              {                _timePerBlock = 60;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;            case Action.ActionType.ACTION_REWIND:          case Action.ActionType.ACTION_MUSIC_REWIND:            _viewingTime = _viewingTime.AddHours(-3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_FORWARD:          case Action.ActionType.ACTION_MUSIC_FORWARD:            _viewingTime = _viewingTime.AddHours(3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_DECREASE_TIMEBLOCK:            {              if (_timePerBlock > 15)              {                _timePerBlock -= 15;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_DEFAULT_TIMEBLOCK:            {              _timePerBlock = 30;              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_TVGUIDE_INCREASE_DAY:            OnNextDay();            break;            case Action.ActionType.ACTION_TVGUIDE_DECREASE_DAY:            OnPreviousDay();            break;            // TV group changing actions          case Action.ActionType.ACTION_TVGUIDE_NEXT_GROUP:            OnChangeChannelGroup(1);            break;            case Action.ActionType.ACTION_TVGUIDE_PREV_GROUP:            OnChangeChannelGroup(-1);            break;        }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_singleChannelView)            {              OnSwitchMode(true);              return;            }            GUIWindowManager.ShowPreviousWindow();            return;            case Action.ActionType.ACTION_KEY_PRESSED:            if (action.m_key != null)            {              OnKeyCode((char)action.m_key.KeyChar);            }            break;            case Action.ActionType.ACTION_RECORD:            if ((GetFocusControlId() != -1) && (_cursorY > 0) && (_cursorX >= 0))            {              OnRecord();            }            break;            case Action.ActionType.ACTION_MOUSE_MOVE:            {              int x = (int)action.fAmount1;              int y = (int)action.fAmount2;              foreach (GUIControl control in controlList)              {                if (control.GetID >= (int)Controls.IMG_CHAN1 + 0 &&                    control.GetID <= (int)Controls.IMG_CHAN1 + _channelCount)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      UnFocus();                      _cursorX = control.GetID - (int)Controls.IMG_CHAN1;                      _cursorY = 0;                        if (_singleChannelNumber != _cursorX + ChannelOffset)                      {                        Update(false);                      }                      UpdateCurrentProgram();                      UpdateHorizontalScrollbar();                      UpdateVerticalScrollbar();                      updateSingleChannelNumber();                      return;                    }                  }                }                if (control.GetID >= GUIDE_COMPONENTID_START)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      int iControlId = control.GetID;                      if (iControlId >= GUIDE_COMPONENTID_START)                      {                        iControlId -= GUIDE_COMPONENTID_START;                        int iCursorY = (iControlId / RowID);                        iControlId -= iCursorY * RowID;                        if (iControlId % ColID == 0)                        {                          int iCursorX = (iControlId / ColID) + 1;                          if (iCursorY != _cursorX || iCursorX != _cursorY)                          {                            UnFocus();                            _cursorX = iCursorY;                            _cursorY = iCursorX;                            UpdateCurrentProgram();                            SetFocus();                            UpdateHorizontalScrollbar();                            UpdateVerticalScrollbar();                            updateSingleChannelNumber();                            return;                          }                          return;                        }                      }                    }                  }                }              }              UnFocus();              _cursorY = -1;              _cursorX = -1;              base.OnAction(action);            }            break;            case Action.ActionType.ACTION_TVGUIDE_RESET:            _cursorY = 0;            _viewingTime = DateTime.Now;            Update(false);            break;              case Action.ActionType.ACTION_CONTEXT_MENU:            {              if (_cursorY >= 0 && _cursorX >= 0)              {                if (_cursorY == 0)                {                  _backupSingleViewCursorX = _cursorX;                  OnSwitchMode(false);                  return;                }                else                {                  ShowContextMenu();                }              }              else              {                action.wID = Action.ActionType.ACTION_SELECT_ITEM;                GUIWindowManager.OnAction(action);              }            }            break;            case Action.ActionType.ACTION_PAGE_UP:            OnPageUp();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_PAGE_DOWN:            OnPageDown();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (_cursorX >= 0)              {                OnLeft();                updateSingleChannelNumber();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (_cursorX >= 0)              {                OnRight();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_UP:            {              if (_cursorX >= 0)              {                OnUp(true' false);                updateSingleChannelNumber();                UpdateVerticalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_DOWN:            {              if (_cursorX >= 0)              {                OnDown(true);                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              else              {                _cursorX = 0;                SetFocus();                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              return;            }            //break;          case Action.ActionType.ACTION_SHOW_INFO:            {              ShowContextMenu();            }            break;          case Action.ActionType.ACTION_INCREASE_TIMEBLOCK:            {              _timePerBlock += 15;              if (_timePerBlock > 60)              {                _timePerBlock = 60;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;            case Action.ActionType.ACTION_REWIND:          case Action.ActionType.ACTION_MUSIC_REWIND:            _viewingTime = _viewingTime.AddHours(-3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_FORWARD:          case Action.ActionType.ACTION_MUSIC_FORWARD:            _viewingTime = _viewingTime.AddHours(3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_DECREASE_TIMEBLOCK:            {              if (_timePerBlock > 15)              {                _timePerBlock -= 15;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_DEFAULT_TIMEBLOCK:            {              _timePerBlock = 30;              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_TVGUIDE_INCREASE_DAY:            OnNextDay();            break;            case Action.ActionType.ACTION_TVGUIDE_DECREASE_DAY:            OnPreviousDay();            break;            // TV group changing actions          case Action.ActionType.ACTION_TVGUIDE_NEXT_GROUP:            OnChangeChannelGroup(1);            break;            case Action.ActionType.ACTION_TVGUIDE_PREV_GROUP:            OnChangeChannelGroup(-1);            break;        }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_singleChannelView)            {              OnSwitchMode(true);              return;            }            GUIWindowManager.ShowPreviousWindow();            return;            case Action.ActionType.ACTION_KEY_PRESSED:            if (action.m_key != null)            {              OnKeyCode((char)action.m_key.KeyChar);            }            break;            case Action.ActionType.ACTION_RECORD:            if ((GetFocusControlId() != -1) && (_cursorY > 0) && (_cursorX >= 0))            {              OnRecord();            }            break;            case Action.ActionType.ACTION_MOUSE_MOVE:            {              int x = (int)action.fAmount1;              int y = (int)action.fAmount2;              foreach (GUIControl control in controlList)              {                if (control.GetID >= (int)Controls.IMG_CHAN1 + 0 &&                    control.GetID <= (int)Controls.IMG_CHAN1 + _channelCount)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      UnFocus();                      _cursorX = control.GetID - (int)Controls.IMG_CHAN1;                      _cursorY = 0;                        if (_singleChannelNumber != _cursorX + ChannelOffset)                      {                        Update(false);                      }                      UpdateCurrentProgram();                      UpdateHorizontalScrollbar();                      UpdateVerticalScrollbar();                      updateSingleChannelNumber();                      return;                    }                  }                }                if (control.GetID >= GUIDE_COMPONENTID_START)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      int iControlId = control.GetID;                      if (iControlId >= GUIDE_COMPONENTID_START)                      {                        iControlId -= GUIDE_COMPONENTID_START;                        int iCursorY = (iControlId / RowID);                        iControlId -= iCursorY * RowID;                        if (iControlId % ColID == 0)                        {                          int iCursorX = (iControlId / ColID) + 1;                          if (iCursorY != _cursorX || iCursorX != _cursorY)                          {                            UnFocus();                            _cursorX = iCursorY;                            _cursorY = iCursorX;                            UpdateCurrentProgram();                            SetFocus();                            UpdateHorizontalScrollbar();                            UpdateVerticalScrollbar();                            updateSingleChannelNumber();                            return;                          }                          return;                        }                      }                    }                  }                }              }              UnFocus();              _cursorY = -1;              _cursorX = -1;              base.OnAction(action);            }            break;            case Action.ActionType.ACTION_TVGUIDE_RESET:            _cursorY = 0;            _viewingTime = DateTime.Now;            Update(false);            break;              case Action.ActionType.ACTION_CONTEXT_MENU:            {              if (_cursorY >= 0 && _cursorX >= 0)              {                if (_cursorY == 0)                {                  _backupSingleViewCursorX = _cursorX;                  OnSwitchMode(false);                  return;                }                else                {                  ShowContextMenu();                }              }              else              {                action.wID = Action.ActionType.ACTION_SELECT_ITEM;                GUIWindowManager.OnAction(action);              }            }            break;            case Action.ActionType.ACTION_PAGE_UP:            OnPageUp();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_PAGE_DOWN:            OnPageDown();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (_cursorX >= 0)              {                OnLeft();                updateSingleChannelNumber();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (_cursorX >= 0)              {                OnRight();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_UP:            {              if (_cursorX >= 0)              {                OnUp(true' false);                updateSingleChannelNumber();                UpdateVerticalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_DOWN:            {              if (_cursorX >= 0)              {                OnDown(true);                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              else              {                _cursorX = 0;                SetFocus();                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              return;            }            //break;          case Action.ActionType.ACTION_SHOW_INFO:            {              ShowContextMenu();            }            break;          case Action.ActionType.ACTION_INCREASE_TIMEBLOCK:            {              _timePerBlock += 15;              if (_timePerBlock > 60)              {                _timePerBlock = 60;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;            case Action.ActionType.ACTION_REWIND:          case Action.ActionType.ACTION_MUSIC_REWIND:            _viewingTime = _viewingTime.AddHours(-3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_FORWARD:          case Action.ActionType.ACTION_MUSIC_FORWARD:            _viewingTime = _viewingTime.AddHours(3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_DECREASE_TIMEBLOCK:            {              if (_timePerBlock > 15)              {                _timePerBlock -= 15;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_DEFAULT_TIMEBLOCK:            {              _timePerBlock = 30;              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_TVGUIDE_INCREASE_DAY:            OnNextDay();            break;            case Action.ActionType.ACTION_TVGUIDE_DECREASE_DAY:            OnPreviousDay();            break;            // TV group changing actions          case Action.ActionType.ACTION_TVGUIDE_NEXT_GROUP:            OnChangeChannelGroup(1);            break;            case Action.ActionType.ACTION_TVGUIDE_PREV_GROUP:            OnChangeChannelGroup(-1);            break;        }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_singleChannelView)            {              OnSwitchMode(true);              return;            }            GUIWindowManager.ShowPreviousWindow();            return;            case Action.ActionType.ACTION_KEY_PRESSED:            if (action.m_key != null)            {              OnKeyCode((char)action.m_key.KeyChar);            }            break;            case Action.ActionType.ACTION_RECORD:            if ((GetFocusControlId() != -1) && (_cursorY > 0) && (_cursorX >= 0))            {              OnRecord();            }            break;            case Action.ActionType.ACTION_MOUSE_MOVE:            {              int x = (int)action.fAmount1;              int y = (int)action.fAmount2;              foreach (GUIControl control in controlList)              {                if (control.GetID >= (int)Controls.IMG_CHAN1 + 0 &&                    control.GetID <= (int)Controls.IMG_CHAN1 + _channelCount)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      UnFocus();                      _cursorX = control.GetID - (int)Controls.IMG_CHAN1;                      _cursorY = 0;                        if (_singleChannelNumber != _cursorX + ChannelOffset)                      {                        Update(false);                      }                      UpdateCurrentProgram();                      UpdateHorizontalScrollbar();                      UpdateVerticalScrollbar();                      updateSingleChannelNumber();                      return;                    }                  }                }                if (control.GetID >= GUIDE_COMPONENTID_START)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      int iControlId = control.GetID;                      if (iControlId >= GUIDE_COMPONENTID_START)                      {                        iControlId -= GUIDE_COMPONENTID_START;                        int iCursorY = (iControlId / RowID);                        iControlId -= iCursorY * RowID;                        if (iControlId % ColID == 0)                        {                          int iCursorX = (iControlId / ColID) + 1;                          if (iCursorY != _cursorX || iCursorX != _cursorY)                          {                            UnFocus();                            _cursorX = iCursorY;                            _cursorY = iCursorX;                            UpdateCurrentProgram();                            SetFocus();                            UpdateHorizontalScrollbar();                            UpdateVerticalScrollbar();                            updateSingleChannelNumber();                            return;                          }                          return;                        }                      }                    }                  }                }              }              UnFocus();              _cursorY = -1;              _cursorX = -1;              base.OnAction(action);            }            break;            case Action.ActionType.ACTION_TVGUIDE_RESET:            _cursorY = 0;            _viewingTime = DateTime.Now;            Update(false);            break;              case Action.ActionType.ACTION_CONTEXT_MENU:            {              if (_cursorY >= 0 && _cursorX >= 0)              {                if (_cursorY == 0)                {                  _backupSingleViewCursorX = _cursorX;                  OnSwitchMode(false);                  return;                }                else                {                  ShowContextMenu();                }              }              else              {                action.wID = Action.ActionType.ACTION_SELECT_ITEM;                GUIWindowManager.OnAction(action);              }            }            break;            case Action.ActionType.ACTION_PAGE_UP:            OnPageUp();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_PAGE_DOWN:            OnPageDown();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (_cursorX >= 0)              {                OnLeft();                updateSingleChannelNumber();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (_cursorX >= 0)              {                OnRight();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_UP:            {              if (_cursorX >= 0)              {                OnUp(true' false);                updateSingleChannelNumber();                UpdateVerticalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_DOWN:            {              if (_cursorX >= 0)              {                OnDown(true);                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              else              {                _cursorX = 0;                SetFocus();                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              return;            }            //break;          case Action.ActionType.ACTION_SHOW_INFO:            {              ShowContextMenu();            }            break;          case Action.ActionType.ACTION_INCREASE_TIMEBLOCK:            {              _timePerBlock += 15;              if (_timePerBlock > 60)              {                _timePerBlock = 60;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;            case Action.ActionType.ACTION_REWIND:          case Action.ActionType.ACTION_MUSIC_REWIND:            _viewingTime = _viewingTime.AddHours(-3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_FORWARD:          case Action.ActionType.ACTION_MUSIC_FORWARD:            _viewingTime = _viewingTime.AddHours(3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_DECREASE_TIMEBLOCK:            {              if (_timePerBlock > 15)              {                _timePerBlock -= 15;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_DEFAULT_TIMEBLOCK:            {              _timePerBlock = 30;              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_TVGUIDE_INCREASE_DAY:            OnNextDay();            break;            case Action.ActionType.ACTION_TVGUIDE_DECREASE_DAY:            OnPreviousDay();            break;            // TV group changing actions          case Action.ActionType.ACTION_TVGUIDE_NEXT_GROUP:            OnChangeChannelGroup(1);            break;            case Action.ActionType.ACTION_TVGUIDE_PREV_GROUP:            OnChangeChannelGroup(-1);            break;        }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_singleChannelView)            {              OnSwitchMode(true);              return;            }            GUIWindowManager.ShowPreviousWindow();            return;            case Action.ActionType.ACTION_KEY_PRESSED:            if (action.m_key != null)            {              OnKeyCode((char)action.m_key.KeyChar);            }            break;            case Action.ActionType.ACTION_RECORD:            if ((GetFocusControlId() != -1) && (_cursorY > 0) && (_cursorX >= 0))            {              OnRecord();            }            break;            case Action.ActionType.ACTION_MOUSE_MOVE:            {              int x = (int)action.fAmount1;              int y = (int)action.fAmount2;              foreach (GUIControl control in controlList)              {                if (control.GetID >= (int)Controls.IMG_CHAN1 + 0 &&                    control.GetID <= (int)Controls.IMG_CHAN1 + _channelCount)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      UnFocus();                      _cursorX = control.GetID - (int)Controls.IMG_CHAN1;                      _cursorY = 0;                        if (_singleChannelNumber != _cursorX + ChannelOffset)                      {                        Update(false);                      }                      UpdateCurrentProgram();                      UpdateHorizontalScrollbar();                      UpdateVerticalScrollbar();                      updateSingleChannelNumber();                      return;                    }                  }                }                if (control.GetID >= GUIDE_COMPONENTID_START)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      int iControlId = control.GetID;                      if (iControlId >= GUIDE_COMPONENTID_START)                      {                        iControlId -= GUIDE_COMPONENTID_START;                        int iCursorY = (iControlId / RowID);                        iControlId -= iCursorY * RowID;                        if (iControlId % ColID == 0)                        {                          int iCursorX = (iControlId / ColID) + 1;                          if (iCursorY != _cursorX || iCursorX != _cursorY)                          {                            UnFocus();                            _cursorX = iCursorY;                            _cursorY = iCursorX;                            UpdateCurrentProgram();                            SetFocus();                            UpdateHorizontalScrollbar();                            UpdateVerticalScrollbar();                            updateSingleChannelNumber();                            return;                          }                          return;                        }                      }                    }                  }                }              }              UnFocus();              _cursorY = -1;              _cursorX = -1;              base.OnAction(action);            }            break;            case Action.ActionType.ACTION_TVGUIDE_RESET:            _cursorY = 0;            _viewingTime = DateTime.Now;            Update(false);            break;              case Action.ActionType.ACTION_CONTEXT_MENU:            {              if (_cursorY >= 0 && _cursorX >= 0)              {                if (_cursorY == 0)                {                  _backupSingleViewCursorX = _cursorX;                  OnSwitchMode(false);                  return;                }                else                {                  ShowContextMenu();                }              }              else              {                action.wID = Action.ActionType.ACTION_SELECT_ITEM;                GUIWindowManager.OnAction(action);              }            }            break;            case Action.ActionType.ACTION_PAGE_UP:            OnPageUp();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_PAGE_DOWN:            OnPageDown();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (_cursorX >= 0)              {                OnLeft();                updateSingleChannelNumber();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (_cursorX >= 0)              {                OnRight();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_UP:            {              if (_cursorX >= 0)              {                OnUp(true' false);                updateSingleChannelNumber();                UpdateVerticalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_DOWN:            {              if (_cursorX >= 0)              {                OnDown(true);                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              else              {                _cursorX = 0;                SetFocus();                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              return;            }            //break;          case Action.ActionType.ACTION_SHOW_INFO:            {              ShowContextMenu();            }            break;          case Action.ActionType.ACTION_INCREASE_TIMEBLOCK:            {              _timePerBlock += 15;              if (_timePerBlock > 60)              {                _timePerBlock = 60;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;            case Action.ActionType.ACTION_REWIND:          case Action.ActionType.ACTION_MUSIC_REWIND:            _viewingTime = _viewingTime.AddHours(-3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_FORWARD:          case Action.ActionType.ACTION_MUSIC_FORWARD:            _viewingTime = _viewingTime.AddHours(3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_DECREASE_TIMEBLOCK:            {              if (_timePerBlock > 15)              {                _timePerBlock -= 15;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_DEFAULT_TIMEBLOCK:            {              _timePerBlock = 30;              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_TVGUIDE_INCREASE_DAY:            OnNextDay();            break;            case Action.ActionType.ACTION_TVGUIDE_DECREASE_DAY:            OnPreviousDay();            break;            // TV group changing actions          case Action.ActionType.ACTION_TVGUIDE_NEXT_GROUP:            OnChangeChannelGroup(1);            break;            case Action.ActionType.ACTION_TVGUIDE_PREV_GROUP:            OnChangeChannelGroup(-1);            break;        }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_singleChannelView)            {              OnSwitchMode(true);              return;            }            GUIWindowManager.ShowPreviousWindow();            return;            case Action.ActionType.ACTION_KEY_PRESSED:            if (action.m_key != null)            {              OnKeyCode((char)action.m_key.KeyChar);            }            break;            case Action.ActionType.ACTION_RECORD:            if ((GetFocusControlId() != -1) && (_cursorY > 0) && (_cursorX >= 0))            {              OnRecord();            }            break;            case Action.ActionType.ACTION_MOUSE_MOVE:            {              int x = (int)action.fAmount1;              int y = (int)action.fAmount2;              foreach (GUIControl control in controlList)              {                if (control.GetID >= (int)Controls.IMG_CHAN1 + 0 &&                    control.GetID <= (int)Controls.IMG_CHAN1 + _channelCount)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      UnFocus();                      _cursorX = control.GetID - (int)Controls.IMG_CHAN1;                      _cursorY = 0;                        if (_singleChannelNumber != _cursorX + ChannelOffset)                      {                        Update(false);                      }                      UpdateCurrentProgram();                      UpdateHorizontalScrollbar();                      UpdateVerticalScrollbar();                      updateSingleChannelNumber();                      return;                    }                  }                }                if (control.GetID >= GUIDE_COMPONENTID_START)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      int iControlId = control.GetID;                      if (iControlId >= GUIDE_COMPONENTID_START)                      {                        iControlId -= GUIDE_COMPONENTID_START;                        int iCursorY = (iControlId / RowID);                        iControlId -= iCursorY * RowID;                        if (iControlId % ColID == 0)                        {                          int iCursorX = (iControlId / ColID) + 1;                          if (iCursorY != _cursorX || iCursorX != _cursorY)                          {                            UnFocus();                            _cursorX = iCursorY;                            _cursorY = iCursorX;                            UpdateCurrentProgram();                            SetFocus();                            UpdateHorizontalScrollbar();                            UpdateVerticalScrollbar();                            updateSingleChannelNumber();                            return;                          }                          return;                        }                      }                    }                  }                }              }              UnFocus();              _cursorY = -1;              _cursorX = -1;              base.OnAction(action);            }            break;            case Action.ActionType.ACTION_TVGUIDE_RESET:            _cursorY = 0;            _viewingTime = DateTime.Now;            Update(false);            break;              case Action.ActionType.ACTION_CONTEXT_MENU:            {              if (_cursorY >= 0 && _cursorX >= 0)              {                if (_cursorY == 0)                {                  _backupSingleViewCursorX = _cursorX;                  OnSwitchMode(false);                  return;                }                else                {                  ShowContextMenu();                }              }              else              {                action.wID = Action.ActionType.ACTION_SELECT_ITEM;                GUIWindowManager.OnAction(action);              }            }            break;            case Action.ActionType.ACTION_PAGE_UP:            OnPageUp();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_PAGE_DOWN:            OnPageDown();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (_cursorX >= 0)              {                OnLeft();                updateSingleChannelNumber();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (_cursorX >= 0)              {                OnRight();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_UP:            {              if (_cursorX >= 0)              {                OnUp(true' false);                updateSingleChannelNumber();                UpdateVerticalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_DOWN:            {              if (_cursorX >= 0)              {                OnDown(true);                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              else              {                _cursorX = 0;                SetFocus();                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              return;            }            //break;          case Action.ActionType.ACTION_SHOW_INFO:            {              ShowContextMenu();            }            break;          case Action.ActionType.ACTION_INCREASE_TIMEBLOCK:            {              _timePerBlock += 15;              if (_timePerBlock > 60)              {                _timePerBlock = 60;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;            case Action.ActionType.ACTION_REWIND:          case Action.ActionType.ACTION_MUSIC_REWIND:            _viewingTime = _viewingTime.AddHours(-3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_FORWARD:          case Action.ActionType.ACTION_MUSIC_FORWARD:            _viewingTime = _viewingTime.AddHours(3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_DECREASE_TIMEBLOCK:            {              if (_timePerBlock > 15)              {                _timePerBlock -= 15;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_DEFAULT_TIMEBLOCK:            {              _timePerBlock = 30;              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_TVGUIDE_INCREASE_DAY:            OnNextDay();            break;            case Action.ActionType.ACTION_TVGUIDE_DECREASE_DAY:            OnPreviousDay();            break;            // TV group changing actions          case Action.ActionType.ACTION_TVGUIDE_NEXT_GROUP:            OnChangeChannelGroup(1);            break;            case Action.ActionType.ACTION_TVGUIDE_PREV_GROUP:            OnChangeChannelGroup(-1);            break;        }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_singleChannelView)            {              OnSwitchMode(true);              return;            }            GUIWindowManager.ShowPreviousWindow();            return;            case Action.ActionType.ACTION_KEY_PRESSED:            if (action.m_key != null)            {              OnKeyCode((char)action.m_key.KeyChar);            }            break;            case Action.ActionType.ACTION_RECORD:            if ((GetFocusControlId() != -1) && (_cursorY > 0) && (_cursorX >= 0))            {              OnRecord();            }            break;            case Action.ActionType.ACTION_MOUSE_MOVE:            {              int x = (int)action.fAmount1;              int y = (int)action.fAmount2;              foreach (GUIControl control in controlList)              {                if (control.GetID >= (int)Controls.IMG_CHAN1 + 0 &&                    control.GetID <= (int)Controls.IMG_CHAN1 + _channelCount)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      UnFocus();                      _cursorX = control.GetID - (int)Controls.IMG_CHAN1;                      _cursorY = 0;                        if (_singleChannelNumber != _cursorX + ChannelOffset)                      {                        Update(false);                      }                      UpdateCurrentProgram();                      UpdateHorizontalScrollbar();                      UpdateVerticalScrollbar();                      updateSingleChannelNumber();                      return;                    }                  }                }                if (control.GetID >= GUIDE_COMPONENTID_START)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      int iControlId = control.GetID;                      if (iControlId >= GUIDE_COMPONENTID_START)                      {                        iControlId -= GUIDE_COMPONENTID_START;                        int iCursorY = (iControlId / RowID);                        iControlId -= iCursorY * RowID;                        if (iControlId % ColID == 0)                        {                          int iCursorX = (iControlId / ColID) + 1;                          if (iCursorY != _cursorX || iCursorX != _cursorY)                          {                            UnFocus();                            _cursorX = iCursorY;                            _cursorY = iCursorX;                            UpdateCurrentProgram();                            SetFocus();                            UpdateHorizontalScrollbar();                            UpdateVerticalScrollbar();                            updateSingleChannelNumber();                            return;                          }                          return;                        }                      }                    }                  }                }              }              UnFocus();              _cursorY = -1;              _cursorX = -1;              base.OnAction(action);            }            break;            case Action.ActionType.ACTION_TVGUIDE_RESET:            _cursorY = 0;            _viewingTime = DateTime.Now;            Update(false);            break;              case Action.ActionType.ACTION_CONTEXT_MENU:            {              if (_cursorY >= 0 && _cursorX >= 0)              {                if (_cursorY == 0)                {                  _backupSingleViewCursorX = _cursorX;                  OnSwitchMode(false);                  return;                }                else                {                  ShowContextMenu();                }              }              else              {                action.wID = Action.ActionType.ACTION_SELECT_ITEM;                GUIWindowManager.OnAction(action);              }            }            break;            case Action.ActionType.ACTION_PAGE_UP:            OnPageUp();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_PAGE_DOWN:            OnPageDown();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (_cursorX >= 0)              {                OnLeft();                updateSingleChannelNumber();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (_cursorX >= 0)              {                OnRight();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_UP:            {              if (_cursorX >= 0)              {                OnUp(true' false);                updateSingleChannelNumber();                UpdateVerticalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_DOWN:            {              if (_cursorX >= 0)              {                OnDown(true);                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              else              {                _cursorX = 0;                SetFocus();                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              return;            }            //break;          case Action.ActionType.ACTION_SHOW_INFO:            {              ShowContextMenu();            }            break;          case Action.ActionType.ACTION_INCREASE_TIMEBLOCK:            {              _timePerBlock += 15;              if (_timePerBlock > 60)              {                _timePerBlock = 60;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;            case Action.ActionType.ACTION_REWIND:          case Action.ActionType.ACTION_MUSIC_REWIND:            _viewingTime = _viewingTime.AddHours(-3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_FORWARD:          case Action.ActionType.ACTION_MUSIC_FORWARD:            _viewingTime = _viewingTime.AddHours(3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_DECREASE_TIMEBLOCK:            {              if (_timePerBlock > 15)              {                _timePerBlock -= 15;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_DEFAULT_TIMEBLOCK:            {              _timePerBlock = 30;              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_TVGUIDE_INCREASE_DAY:            OnNextDay();            break;            case Action.ActionType.ACTION_TVGUIDE_DECREASE_DAY:            OnPreviousDay();            break;            // TV group changing actions          case Action.ActionType.ACTION_TVGUIDE_NEXT_GROUP:            OnChangeChannelGroup(1);            break;            case Action.ActionType.ACTION_TVGUIDE_PREV_GROUP:            OnChangeChannelGroup(-1);            break;        }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_singleChannelView)            {              OnSwitchMode(true);              return;            }            GUIWindowManager.ShowPreviousWindow();            return;            case Action.ActionType.ACTION_KEY_PRESSED:            if (action.m_key != null)            {              OnKeyCode((char)action.m_key.KeyChar);            }            break;            case Action.ActionType.ACTION_RECORD:            if ((GetFocusControlId() != -1) && (_cursorY > 0) && (_cursorX >= 0))            {              OnRecord();            }            break;            case Action.ActionType.ACTION_MOUSE_MOVE:            {              int x = (int)action.fAmount1;              int y = (int)action.fAmount2;              foreach (GUIControl control in controlList)              {                if (control.GetID >= (int)Controls.IMG_CHAN1 + 0 &&                    control.GetID <= (int)Controls.IMG_CHAN1 + _channelCount)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      UnFocus();                      _cursorX = control.GetID - (int)Controls.IMG_CHAN1;                      _cursorY = 0;                        if (_singleChannelNumber != _cursorX + ChannelOffset)                      {                        Update(false);                      }                      UpdateCurrentProgram();                      UpdateHorizontalScrollbar();                      UpdateVerticalScrollbar();                      updateSingleChannelNumber();                      return;                    }                  }                }                if (control.GetID >= GUIDE_COMPONENTID_START)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      int iControlId = control.GetID;                      if (iControlId >= GUIDE_COMPONENTID_START)                      {                        iControlId -= GUIDE_COMPONENTID_START;                        int iCursorY = (iControlId / RowID);                        iControlId -= iCursorY * RowID;                        if (iControlId % ColID == 0)                        {                          int iCursorX = (iControlId / ColID) + 1;                          if (iCursorY != _cursorX || iCursorX != _cursorY)                          {                            UnFocus();                            _cursorX = iCursorY;                            _cursorY = iCursorX;                            UpdateCurrentProgram();                            SetFocus();                            UpdateHorizontalScrollbar();                            UpdateVerticalScrollbar();                            updateSingleChannelNumber();                            return;                          }                          return;                        }                      }                    }                  }                }              }              UnFocus();              _cursorY = -1;              _cursorX = -1;              base.OnAction(action);            }            break;            case Action.ActionType.ACTION_TVGUIDE_RESET:            _cursorY = 0;            _viewingTime = DateTime.Now;            Update(false);            break;              case Action.ActionType.ACTION_CONTEXT_MENU:            {              if (_cursorY >= 0 && _cursorX >= 0)              {                if (_cursorY == 0)                {                  _backupSingleViewCursorX = _cursorX;                  OnSwitchMode(false);                  return;                }                else                {                  ShowContextMenu();                }              }              else              {                action.wID = Action.ActionType.ACTION_SELECT_ITEM;                GUIWindowManager.OnAction(action);              }            }            break;            case Action.ActionType.ACTION_PAGE_UP:            OnPageUp();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_PAGE_DOWN:            OnPageDown();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (_cursorX >= 0)              {                OnLeft();                updateSingleChannelNumber();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (_cursorX >= 0)              {                OnRight();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_UP:            {              if (_cursorX >= 0)              {                OnUp(true' false);                updateSingleChannelNumber();                UpdateVerticalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_DOWN:            {              if (_cursorX >= 0)              {                OnDown(true);                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              else              {                _cursorX = 0;                SetFocus();                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              return;            }            //break;          case Action.ActionType.ACTION_SHOW_INFO:            {              ShowContextMenu();            }            break;          case Action.ActionType.ACTION_INCREASE_TIMEBLOCK:            {              _timePerBlock += 15;              if (_timePerBlock > 60)              {                _timePerBlock = 60;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;            case Action.ActionType.ACTION_REWIND:          case Action.ActionType.ACTION_MUSIC_REWIND:            _viewingTime = _viewingTime.AddHours(-3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_FORWARD:          case Action.ActionType.ACTION_MUSIC_FORWARD:            _viewingTime = _viewingTime.AddHours(3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_DECREASE_TIMEBLOCK:            {              if (_timePerBlock > 15)              {                _timePerBlock -= 15;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_DEFAULT_TIMEBLOCK:            {              _timePerBlock = 30;              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_TVGUIDE_INCREASE_DAY:            OnNextDay();            break;            case Action.ActionType.ACTION_TVGUIDE_DECREASE_DAY:            OnPreviousDay();            break;            // TV group changing actions          case Action.ActionType.ACTION_TVGUIDE_NEXT_GROUP:            OnChangeChannelGroup(1);            break;            case Action.ActionType.ACTION_TVGUIDE_PREV_GROUP:            OnChangeChannelGroup(-1);            break;        }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnMessage,The following statement contains a magic number: switch (message.Message)          {            case GUIMessage.MessageType.GUI_MSG_PERCENTAGE_CHANGED:              if (message.SenderControlId == (int)Controls.HORZ_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                fPercentage *= 24.0f;                fPercentage *= 60.0f;                _viewingTime = new DateTime(_viewingTime.Year' _viewingTime.Month' _viewingTime.Day' 0' 0' 0' 0);                _viewingTime = _viewingTime.AddMinutes((int)fPercentage);              }                if (message.SenderControlId == (int)Controls.VERT_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                if (_singleChannelView)                {                  fPercentage *= (float)_totalProgramCount;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }                else                {                  fPercentage *= (float)_channelList.Count;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }              }              break;              case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:              {                if (!_singleChannelView)                {                  base.OnMessage(message);                  SaveSettings();                  if (_recordingList != null && TVHome.Connected)                  {                    _recordingList.Clear();                  }                    _controls = new Dictionary<int' GUIButton3PartControl>();                  _channelList = null;                  _recordingList = null;                  _currentProgram = null;                }                  return true;              }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:              {                                if (!TVHome.Connected)                {                  RemoteControl.Clear();                  GUIWindowManager.ActivateWindow((int)Window.WINDOW_SETTINGS_TVENGINE);                  return false;                }                  TVHome.WaitForGentleConnection();                  if (TVHome.Navigator == null)                {                  TVHome.OnLoaded();                }                else if (TVHome.Navigator.Channel == null)                {                  TVHome.m_navigator.ReLoad();                  TVHome.LoadSettings(false);                }                  if (TVHome.m_navigator == null)                {                  TVHome.m_navigator = new ChannelNavigator(); // Create the channel navigator (it will load groups and channels)                }                  // Reload ChannelGroups                Radio radioLoad = (Radio)GUIWindowManager.GetWindow((int)Window.WINDOW_RADIO);                radioLoad.OnAdded();                  GUIPropertyManager.SetProperty("#itemcount"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem2"' string.Empty);                GUIPropertyManager.SetProperty("#selectedthumb"' string.Empty);                  if (_shouldRestore)                {                  DoRestoreSkin();                }                else                {                  LoadSkin();                  AllocResources();                }                  InitControls();                  base.OnMessage(message);                  UpdateOverlayAllowed();                GUIGraphicsContext.Overlay = _isOverlayAllowed;                  // set topbar autohide                switch (_autoHideTopbarType)                {                  case AutoHideTopBar.No:                    _autoHideTopbar = false;                    break;                  case AutoHideTopBar.Yes:                    _autoHideTopbar = true;                    break;                  default:                    _autoHideTopbar = GUIGraphicsContext.DefaultTopBarHide;                    break;                }                GUIGraphicsContext.AutoHideTopBar = _autoHideTopbar;                GUIGraphicsContext.TopBarHidden = _autoHideTopbar;                GUIGraphicsContext.DisableTopBar = _disableTopBar;                LoadSettings();                  UpdateChannelCount();                  UnFocus();                GetChannels(true);                LoadSchedules(true);                _currentProgram = null;                if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  _viewingTime = DateTime.Now;                  _cursorY = 0;                  _cursorX = 0;                  ChannelOffset = 0;                  _singleChannelView = false;                  _showChannelLogos = false;                  if (TVHome.Card.IsTimeShifting)                  {                    _currentChannel = Radio.CurrentChannel;                    for (int i = 0; i < _channelList.Count; i++)                    {                      Channel chan = ((GuideChannel)_channelList[i]).channel;                      if (chan.IdChannel == _currentChannel.IdChannel)                      {                        _cursorX = i;                        break;                      }                    }                  }                }                while (_cursorX >= _channelCount)                {                  _cursorX -= _channelCount;                  ChannelOffset += _channelCount;                }                // Mantis 3579: the above lines can lead to too large channeloffset.                 // Now we check if the offset is too large' and if it is' we reduce it and increase the cursor position accordingly                if (!_guideContinuousScroll && (ChannelOffset > _channelList.Count - _channelCount))                {                  _cursorX += ChannelOffset - (_channelList.Count - _channelCount);                  ChannelOffset = _channelList.Count - _channelCount;                }                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                if (cntlDay != null)                {                  DateTime dtNow = DateTime.Now;                  cntlDay.Reset();                  cntlDay.SetRange(0' MaxDaysInGuide - 1);                  for (int iDay = 0; iDay < MaxDaysInGuide; iDay++)                  {                    DateTime dtTemp = dtNow.AddDays(iDay);                    string day = Utils.GetShortDayString(dtTemp);                    cntlDay.AddLabel(day' iDay);                  }                }                else                {                  Log.Debug("RadioGuideBase: SpinControl cntlDay is null!");                }                  GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                if (cntlTimeInterval != null)                {                  cntlTimeInterval.Reset();                  for (int i = 1; i <= 4; i++)                  {                    cntlTimeInterval.AddLabel(String.Empty' i);                  }                  cntlTimeInterval.Value = (_timePerBlock / 15) - 1;                }                else                {                  Log.Debug("RadioGuideBase: SpinControl cntlTimeInterval is null!");                }                  if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  Update(true);                }                else                {                  Update(false);                }                  SetFocus();                  if (_currentProgram != null)                {                  m_dtStartTime = _currentProgram.StartTime;                }                UpdateCurrentProgram();                  return true;              }              //break;              case GUIMessage.MessageType.GUI_MSG_CLICKED:              int iControl = message.SenderControlId;              if (iControl == (int)Controls.SPINCONTROL_DAY)              {                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                int iDay = cntlDay.Value;                  _viewingTime = DateTime.Now;                _viewingTime = new DateTime(DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' _viewingTime.Hour'                                            _viewingTime.Minute' 0' 0);                _viewingTime = _viewingTime.AddDays(iDay);                _recalculateProgramOffset = true;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.SPINCONTROL_TIME_INTERVAL)              {                GUISpinControl cntlTimeInt = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                int iInterval = (cntlTimeInt.Value) + 1;                if (iInterval > 4)                {                  iInterval = 4;                }                _timePerBlock = iInterval * 15;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.CHANNEL_GROUP_BUTTON)              {                OnSelectChannelGroup();                return true;              }              if (iControl >= GUIDE_COMPONENTID_START)              {                OnSelectItem(true);                Update(false);                SetFocus();              }              else if (_cursorY == 0)              {                _backupSingleViewCursorX = _cursorX;                OnSwitchMode(false);              }              break;          }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnMessage,The following statement contains a magic number: switch (message.Message)          {            case GUIMessage.MessageType.GUI_MSG_PERCENTAGE_CHANGED:              if (message.SenderControlId == (int)Controls.HORZ_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                fPercentage *= 24.0f;                fPercentage *= 60.0f;                _viewingTime = new DateTime(_viewingTime.Year' _viewingTime.Month' _viewingTime.Day' 0' 0' 0' 0);                _viewingTime = _viewingTime.AddMinutes((int)fPercentage);              }                if (message.SenderControlId == (int)Controls.VERT_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                if (_singleChannelView)                {                  fPercentage *= (float)_totalProgramCount;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }                else                {                  fPercentage *= (float)_channelList.Count;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }              }              break;              case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:              {                if (!_singleChannelView)                {                  base.OnMessage(message);                  SaveSettings();                  if (_recordingList != null && TVHome.Connected)                  {                    _recordingList.Clear();                  }                    _controls = new Dictionary<int' GUIButton3PartControl>();                  _channelList = null;                  _recordingList = null;                  _currentProgram = null;                }                  return true;              }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:              {                                if (!TVHome.Connected)                {                  RemoteControl.Clear();                  GUIWindowManager.ActivateWindow((int)Window.WINDOW_SETTINGS_TVENGINE);                  return false;                }                  TVHome.WaitForGentleConnection();                  if (TVHome.Navigator == null)                {                  TVHome.OnLoaded();                }                else if (TVHome.Navigator.Channel == null)                {                  TVHome.m_navigator.ReLoad();                  TVHome.LoadSettings(false);                }                  if (TVHome.m_navigator == null)                {                  TVHome.m_navigator = new ChannelNavigator(); // Create the channel navigator (it will load groups and channels)                }                  // Reload ChannelGroups                Radio radioLoad = (Radio)GUIWindowManager.GetWindow((int)Window.WINDOW_RADIO);                radioLoad.OnAdded();                  GUIPropertyManager.SetProperty("#itemcount"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem2"' string.Empty);                GUIPropertyManager.SetProperty("#selectedthumb"' string.Empty);                  if (_shouldRestore)                {                  DoRestoreSkin();                }                else                {                  LoadSkin();                  AllocResources();                }                  InitControls();                  base.OnMessage(message);                  UpdateOverlayAllowed();                GUIGraphicsContext.Overlay = _isOverlayAllowed;                  // set topbar autohide                switch (_autoHideTopbarType)                {                  case AutoHideTopBar.No:                    _autoHideTopbar = false;                    break;                  case AutoHideTopBar.Yes:                    _autoHideTopbar = true;                    break;                  default:                    _autoHideTopbar = GUIGraphicsContext.DefaultTopBarHide;                    break;                }                GUIGraphicsContext.AutoHideTopBar = _autoHideTopbar;                GUIGraphicsContext.TopBarHidden = _autoHideTopbar;                GUIGraphicsContext.DisableTopBar = _disableTopBar;                LoadSettings();                  UpdateChannelCount();                  UnFocus();                GetChannels(true);                LoadSchedules(true);                _currentProgram = null;                if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  _viewingTime = DateTime.Now;                  _cursorY = 0;                  _cursorX = 0;                  ChannelOffset = 0;                  _singleChannelView = false;                  _showChannelLogos = false;                  if (TVHome.Card.IsTimeShifting)                  {                    _currentChannel = Radio.CurrentChannel;                    for (int i = 0; i < _channelList.Count; i++)                    {                      Channel chan = ((GuideChannel)_channelList[i]).channel;                      if (chan.IdChannel == _currentChannel.IdChannel)                      {                        _cursorX = i;                        break;                      }                    }                  }                }                while (_cursorX >= _channelCount)                {                  _cursorX -= _channelCount;                  ChannelOffset += _channelCount;                }                // Mantis 3579: the above lines can lead to too large channeloffset.                 // Now we check if the offset is too large' and if it is' we reduce it and increase the cursor position accordingly                if (!_guideContinuousScroll && (ChannelOffset > _channelList.Count - _channelCount))                {                  _cursorX += ChannelOffset - (_channelList.Count - _channelCount);                  ChannelOffset = _channelList.Count - _channelCount;                }                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                if (cntlDay != null)                {                  DateTime dtNow = DateTime.Now;                  cntlDay.Reset();                  cntlDay.SetRange(0' MaxDaysInGuide - 1);                  for (int iDay = 0; iDay < MaxDaysInGuide; iDay++)                  {                    DateTime dtTemp = dtNow.AddDays(iDay);                    string day = Utils.GetShortDayString(dtTemp);                    cntlDay.AddLabel(day' iDay);                  }                }                else                {                  Log.Debug("RadioGuideBase: SpinControl cntlDay is null!");                }                  GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                if (cntlTimeInterval != null)                {                  cntlTimeInterval.Reset();                  for (int i = 1; i <= 4; i++)                  {                    cntlTimeInterval.AddLabel(String.Empty' i);                  }                  cntlTimeInterval.Value = (_timePerBlock / 15) - 1;                }                else                {                  Log.Debug("RadioGuideBase: SpinControl cntlTimeInterval is null!");                }                  if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  Update(true);                }                else                {                  Update(false);                }                  SetFocus();                  if (_currentProgram != null)                {                  m_dtStartTime = _currentProgram.StartTime;                }                UpdateCurrentProgram();                  return true;              }              //break;              case GUIMessage.MessageType.GUI_MSG_CLICKED:              int iControl = message.SenderControlId;              if (iControl == (int)Controls.SPINCONTROL_DAY)              {                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                int iDay = cntlDay.Value;                  _viewingTime = DateTime.Now;                _viewingTime = new DateTime(DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' _viewingTime.Hour'                                            _viewingTime.Minute' 0' 0);                _viewingTime = _viewingTime.AddDays(iDay);                _recalculateProgramOffset = true;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.SPINCONTROL_TIME_INTERVAL)              {                GUISpinControl cntlTimeInt = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                int iInterval = (cntlTimeInt.Value) + 1;                if (iInterval > 4)                {                  iInterval = 4;                }                _timePerBlock = iInterval * 15;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.CHANNEL_GROUP_BUTTON)              {                OnSelectChannelGroup();                return true;              }              if (iControl >= GUIDE_COMPONENTID_START)              {                OnSelectItem(true);                Update(false);                SetFocus();              }              else if (_cursorY == 0)              {                _backupSingleViewCursorX = _cursorX;                OnSwitchMode(false);              }              break;          }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnMessage,The following statement contains a magic number: switch (message.Message)          {            case GUIMessage.MessageType.GUI_MSG_PERCENTAGE_CHANGED:              if (message.SenderControlId == (int)Controls.HORZ_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                fPercentage *= 24.0f;                fPercentage *= 60.0f;                _viewingTime = new DateTime(_viewingTime.Year' _viewingTime.Month' _viewingTime.Day' 0' 0' 0' 0);                _viewingTime = _viewingTime.AddMinutes((int)fPercentage);              }                if (message.SenderControlId == (int)Controls.VERT_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                if (_singleChannelView)                {                  fPercentage *= (float)_totalProgramCount;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }                else                {                  fPercentage *= (float)_channelList.Count;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }              }              break;              case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:              {                if (!_singleChannelView)                {                  base.OnMessage(message);                  SaveSettings();                  if (_recordingList != null && TVHome.Connected)                  {                    _recordingList.Clear();                  }                    _controls = new Dictionary<int' GUIButton3PartControl>();                  _channelList = null;                  _recordingList = null;                  _currentProgram = null;                }                  return true;              }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:              {                                if (!TVHome.Connected)                {                  RemoteControl.Clear();                  GUIWindowManager.ActivateWindow((int)Window.WINDOW_SETTINGS_TVENGINE);                  return false;                }                  TVHome.WaitForGentleConnection();                  if (TVHome.Navigator == null)                {                  TVHome.OnLoaded();                }                else if (TVHome.Navigator.Channel == null)                {                  TVHome.m_navigator.ReLoad();                  TVHome.LoadSettings(false);                }                  if (TVHome.m_navigator == null)                {                  TVHome.m_navigator = new ChannelNavigator(); // Create the channel navigator (it will load groups and channels)                }                  // Reload ChannelGroups                Radio radioLoad = (Radio)GUIWindowManager.GetWindow((int)Window.WINDOW_RADIO);                radioLoad.OnAdded();                  GUIPropertyManager.SetProperty("#itemcount"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem2"' string.Empty);                GUIPropertyManager.SetProperty("#selectedthumb"' string.Empty);                  if (_shouldRestore)                {                  DoRestoreSkin();                }                else                {                  LoadSkin();                  AllocResources();                }                  InitControls();                  base.OnMessage(message);                  UpdateOverlayAllowed();                GUIGraphicsContext.Overlay = _isOverlayAllowed;                  // set topbar autohide                switch (_autoHideTopbarType)                {                  case AutoHideTopBar.No:                    _autoHideTopbar = false;                    break;                  case AutoHideTopBar.Yes:                    _autoHideTopbar = true;                    break;                  default:                    _autoHideTopbar = GUIGraphicsContext.DefaultTopBarHide;                    break;                }                GUIGraphicsContext.AutoHideTopBar = _autoHideTopbar;                GUIGraphicsContext.TopBarHidden = _autoHideTopbar;                GUIGraphicsContext.DisableTopBar = _disableTopBar;                LoadSettings();                  UpdateChannelCount();                  UnFocus();                GetChannels(true);                LoadSchedules(true);                _currentProgram = null;                if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  _viewingTime = DateTime.Now;                  _cursorY = 0;                  _cursorX = 0;                  ChannelOffset = 0;                  _singleChannelView = false;                  _showChannelLogos = false;                  if (TVHome.Card.IsTimeShifting)                  {                    _currentChannel = Radio.CurrentChannel;                    for (int i = 0; i < _channelList.Count; i++)                    {                      Channel chan = ((GuideChannel)_channelList[i]).channel;                      if (chan.IdChannel == _currentChannel.IdChannel)                      {                        _cursorX = i;                        break;                      }                    }                  }                }                while (_cursorX >= _channelCount)                {                  _cursorX -= _channelCount;                  ChannelOffset += _channelCount;                }                // Mantis 3579: the above lines can lead to too large channeloffset.                 // Now we check if the offset is too large' and if it is' we reduce it and increase the cursor position accordingly                if (!_guideContinuousScroll && (ChannelOffset > _channelList.Count - _channelCount))                {                  _cursorX += ChannelOffset - (_channelList.Count - _channelCount);                  ChannelOffset = _channelList.Count - _channelCount;                }                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                if (cntlDay != null)                {                  DateTime dtNow = DateTime.Now;                  cntlDay.Reset();                  cntlDay.SetRange(0' MaxDaysInGuide - 1);                  for (int iDay = 0; iDay < MaxDaysInGuide; iDay++)                  {                    DateTime dtTemp = dtNow.AddDays(iDay);                    string day = Utils.GetShortDayString(dtTemp);                    cntlDay.AddLabel(day' iDay);                  }                }                else                {                  Log.Debug("RadioGuideBase: SpinControl cntlDay is null!");                }                  GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                if (cntlTimeInterval != null)                {                  cntlTimeInterval.Reset();                  for (int i = 1; i <= 4; i++)                  {                    cntlTimeInterval.AddLabel(String.Empty' i);                  }                  cntlTimeInterval.Value = (_timePerBlock / 15) - 1;                }                else                {                  Log.Debug("RadioGuideBase: SpinControl cntlTimeInterval is null!");                }                  if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  Update(true);                }                else                {                  Update(false);                }                  SetFocus();                  if (_currentProgram != null)                {                  m_dtStartTime = _currentProgram.StartTime;                }                UpdateCurrentProgram();                  return true;              }              //break;              case GUIMessage.MessageType.GUI_MSG_CLICKED:              int iControl = message.SenderControlId;              if (iControl == (int)Controls.SPINCONTROL_DAY)              {                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                int iDay = cntlDay.Value;                  _viewingTime = DateTime.Now;                _viewingTime = new DateTime(DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' _viewingTime.Hour'                                            _viewingTime.Minute' 0' 0);                _viewingTime = _viewingTime.AddDays(iDay);                _recalculateProgramOffset = true;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.SPINCONTROL_TIME_INTERVAL)              {                GUISpinControl cntlTimeInt = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                int iInterval = (cntlTimeInt.Value) + 1;                if (iInterval > 4)                {                  iInterval = 4;                }                _timePerBlock = iInterval * 15;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.CHANNEL_GROUP_BUTTON)              {                OnSelectChannelGroup();                return true;              }              if (iControl >= GUIDE_COMPONENTID_START)              {                OnSelectItem(true);                Update(false);                SetFocus();              }              else if (_cursorY == 0)              {                _backupSingleViewCursorX = _cursorX;                OnSwitchMode(false);              }              break;          }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnMessage,The following statement contains a magic number: switch (message.Message)          {            case GUIMessage.MessageType.GUI_MSG_PERCENTAGE_CHANGED:              if (message.SenderControlId == (int)Controls.HORZ_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                fPercentage *= 24.0f;                fPercentage *= 60.0f;                _viewingTime = new DateTime(_viewingTime.Year' _viewingTime.Month' _viewingTime.Day' 0' 0' 0' 0);                _viewingTime = _viewingTime.AddMinutes((int)fPercentage);              }                if (message.SenderControlId == (int)Controls.VERT_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                if (_singleChannelView)                {                  fPercentage *= (float)_totalProgramCount;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }                else                {                  fPercentage *= (float)_channelList.Count;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }              }              break;              case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:              {                if (!_singleChannelView)                {                  base.OnMessage(message);                  SaveSettings();                  if (_recordingList != null && TVHome.Connected)                  {                    _recordingList.Clear();                  }                    _controls = new Dictionary<int' GUIButton3PartControl>();                  _channelList = null;                  _recordingList = null;                  _currentProgram = null;                }                  return true;              }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:              {                                if (!TVHome.Connected)                {                  RemoteControl.Clear();                  GUIWindowManager.ActivateWindow((int)Window.WINDOW_SETTINGS_TVENGINE);                  return false;                }                  TVHome.WaitForGentleConnection();                  if (TVHome.Navigator == null)                {                  TVHome.OnLoaded();                }                else if (TVHome.Navigator.Channel == null)                {                  TVHome.m_navigator.ReLoad();                  TVHome.LoadSettings(false);                }                  if (TVHome.m_navigator == null)                {                  TVHome.m_navigator = new ChannelNavigator(); // Create the channel navigator (it will load groups and channels)                }                  // Reload ChannelGroups                Radio radioLoad = (Radio)GUIWindowManager.GetWindow((int)Window.WINDOW_RADIO);                radioLoad.OnAdded();                  GUIPropertyManager.SetProperty("#itemcount"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem2"' string.Empty);                GUIPropertyManager.SetProperty("#selectedthumb"' string.Empty);                  if (_shouldRestore)                {                  DoRestoreSkin();                }                else                {                  LoadSkin();                  AllocResources();                }                  InitControls();                  base.OnMessage(message);                  UpdateOverlayAllowed();                GUIGraphicsContext.Overlay = _isOverlayAllowed;                  // set topbar autohide                switch (_autoHideTopbarType)                {                  case AutoHideTopBar.No:                    _autoHideTopbar = false;                    break;                  case AutoHideTopBar.Yes:                    _autoHideTopbar = true;                    break;                  default:                    _autoHideTopbar = GUIGraphicsContext.DefaultTopBarHide;                    break;                }                GUIGraphicsContext.AutoHideTopBar = _autoHideTopbar;                GUIGraphicsContext.TopBarHidden = _autoHideTopbar;                GUIGraphicsContext.DisableTopBar = _disableTopBar;                LoadSettings();                  UpdateChannelCount();                  UnFocus();                GetChannels(true);                LoadSchedules(true);                _currentProgram = null;                if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  _viewingTime = DateTime.Now;                  _cursorY = 0;                  _cursorX = 0;                  ChannelOffset = 0;                  _singleChannelView = false;                  _showChannelLogos = false;                  if (TVHome.Card.IsTimeShifting)                  {                    _currentChannel = Radio.CurrentChannel;                    for (int i = 0; i < _channelList.Count; i++)                    {                      Channel chan = ((GuideChannel)_channelList[i]).channel;                      if (chan.IdChannel == _currentChannel.IdChannel)                      {                        _cursorX = i;                        break;                      }                    }                  }                }                while (_cursorX >= _channelCount)                {                  _cursorX -= _channelCount;                  ChannelOffset += _channelCount;                }                // Mantis 3579: the above lines can lead to too large channeloffset.                 // Now we check if the offset is too large' and if it is' we reduce it and increase the cursor position accordingly                if (!_guideContinuousScroll && (ChannelOffset > _channelList.Count - _channelCount))                {                  _cursorX += ChannelOffset - (_channelList.Count - _channelCount);                  ChannelOffset = _channelList.Count - _channelCount;                }                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                if (cntlDay != null)                {                  DateTime dtNow = DateTime.Now;                  cntlDay.Reset();                  cntlDay.SetRange(0' MaxDaysInGuide - 1);                  for (int iDay = 0; iDay < MaxDaysInGuide; iDay++)                  {                    DateTime dtTemp = dtNow.AddDays(iDay);                    string day = Utils.GetShortDayString(dtTemp);                    cntlDay.AddLabel(day' iDay);                  }                }                else                {                  Log.Debug("RadioGuideBase: SpinControl cntlDay is null!");                }                  GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                if (cntlTimeInterval != null)                {                  cntlTimeInterval.Reset();                  for (int i = 1; i <= 4; i++)                  {                    cntlTimeInterval.AddLabel(String.Empty' i);                  }                  cntlTimeInterval.Value = (_timePerBlock / 15) - 1;                }                else                {                  Log.Debug("RadioGuideBase: SpinControl cntlTimeInterval is null!");                }                  if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  Update(true);                }                else                {                  Update(false);                }                  SetFocus();                  if (_currentProgram != null)                {                  m_dtStartTime = _currentProgram.StartTime;                }                UpdateCurrentProgram();                  return true;              }              //break;              case GUIMessage.MessageType.GUI_MSG_CLICKED:              int iControl = message.SenderControlId;              if (iControl == (int)Controls.SPINCONTROL_DAY)              {                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                int iDay = cntlDay.Value;                  _viewingTime = DateTime.Now;                _viewingTime = new DateTime(DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' _viewingTime.Hour'                                            _viewingTime.Minute' 0' 0);                _viewingTime = _viewingTime.AddDays(iDay);                _recalculateProgramOffset = true;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.SPINCONTROL_TIME_INTERVAL)              {                GUISpinControl cntlTimeInt = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                int iInterval = (cntlTimeInt.Value) + 1;                if (iInterval > 4)                {                  iInterval = 4;                }                _timePerBlock = iInterval * 15;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.CHANNEL_GROUP_BUTTON)              {                OnSelectChannelGroup();                return true;              }              if (iControl >= GUIDE_COMPONENTID_START)              {                OnSelectItem(true);                Update(false);                SetFocus();              }              else if (_cursorY == 0)              {                _backupSingleViewCursorX = _cursorX;                OnSwitchMode(false);              }              break;          }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnMessage,The following statement contains a magic number: switch (message.Message)          {            case GUIMessage.MessageType.GUI_MSG_PERCENTAGE_CHANGED:              if (message.SenderControlId == (int)Controls.HORZ_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                fPercentage *= 24.0f;                fPercentage *= 60.0f;                _viewingTime = new DateTime(_viewingTime.Year' _viewingTime.Month' _viewingTime.Day' 0' 0' 0' 0);                _viewingTime = _viewingTime.AddMinutes((int)fPercentage);              }                if (message.SenderControlId == (int)Controls.VERT_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                if (_singleChannelView)                {                  fPercentage *= (float)_totalProgramCount;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }                else                {                  fPercentage *= (float)_channelList.Count;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }              }              break;              case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:              {                if (!_singleChannelView)                {                  base.OnMessage(message);                  SaveSettings();                  if (_recordingList != null && TVHome.Connected)                  {                    _recordingList.Clear();                  }                    _controls = new Dictionary<int' GUIButton3PartControl>();                  _channelList = null;                  _recordingList = null;                  _currentProgram = null;                }                  return true;              }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:              {                                if (!TVHome.Connected)                {                  RemoteControl.Clear();                  GUIWindowManager.ActivateWindow((int)Window.WINDOW_SETTINGS_TVENGINE);                  return false;                }                  TVHome.WaitForGentleConnection();                  if (TVHome.Navigator == null)                {                  TVHome.OnLoaded();                }                else if (TVHome.Navigator.Channel == null)                {                  TVHome.m_navigator.ReLoad();                  TVHome.LoadSettings(false);                }                  if (TVHome.m_navigator == null)                {                  TVHome.m_navigator = new ChannelNavigator(); // Create the channel navigator (it will load groups and channels)                }                  // Reload ChannelGroups                Radio radioLoad = (Radio)GUIWindowManager.GetWindow((int)Window.WINDOW_RADIO);                radioLoad.OnAdded();                  GUIPropertyManager.SetProperty("#itemcount"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem2"' string.Empty);                GUIPropertyManager.SetProperty("#selectedthumb"' string.Empty);                  if (_shouldRestore)                {                  DoRestoreSkin();                }                else                {                  LoadSkin();                  AllocResources();                }                  InitControls();                  base.OnMessage(message);                  UpdateOverlayAllowed();                GUIGraphicsContext.Overlay = _isOverlayAllowed;                  // set topbar autohide                switch (_autoHideTopbarType)                {                  case AutoHideTopBar.No:                    _autoHideTopbar = false;                    break;                  case AutoHideTopBar.Yes:                    _autoHideTopbar = true;                    break;                  default:                    _autoHideTopbar = GUIGraphicsContext.DefaultTopBarHide;                    break;                }                GUIGraphicsContext.AutoHideTopBar = _autoHideTopbar;                GUIGraphicsContext.TopBarHidden = _autoHideTopbar;                GUIGraphicsContext.DisableTopBar = _disableTopBar;                LoadSettings();                  UpdateChannelCount();                  UnFocus();                GetChannels(true);                LoadSchedules(true);                _currentProgram = null;                if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  _viewingTime = DateTime.Now;                  _cursorY = 0;                  _cursorX = 0;                  ChannelOffset = 0;                  _singleChannelView = false;                  _showChannelLogos = false;                  if (TVHome.Card.IsTimeShifting)                  {                    _currentChannel = Radio.CurrentChannel;                    for (int i = 0; i < _channelList.Count; i++)                    {                      Channel chan = ((GuideChannel)_channelList[i]).channel;                      if (chan.IdChannel == _currentChannel.IdChannel)                      {                        _cursorX = i;                        break;                      }                    }                  }                }                while (_cursorX >= _channelCount)                {                  _cursorX -= _channelCount;                  ChannelOffset += _channelCount;                }                // Mantis 3579: the above lines can lead to too large channeloffset.                 // Now we check if the offset is too large' and if it is' we reduce it and increase the cursor position accordingly                if (!_guideContinuousScroll && (ChannelOffset > _channelList.Count - _channelCount))                {                  _cursorX += ChannelOffset - (_channelList.Count - _channelCount);                  ChannelOffset = _channelList.Count - _channelCount;                }                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                if (cntlDay != null)                {                  DateTime dtNow = DateTime.Now;                  cntlDay.Reset();                  cntlDay.SetRange(0' MaxDaysInGuide - 1);                  for (int iDay = 0; iDay < MaxDaysInGuide; iDay++)                  {                    DateTime dtTemp = dtNow.AddDays(iDay);                    string day = Utils.GetShortDayString(dtTemp);                    cntlDay.AddLabel(day' iDay);                  }                }                else                {                  Log.Debug("RadioGuideBase: SpinControl cntlDay is null!");                }                  GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                if (cntlTimeInterval != null)                {                  cntlTimeInterval.Reset();                  for (int i = 1; i <= 4; i++)                  {                    cntlTimeInterval.AddLabel(String.Empty' i);                  }                  cntlTimeInterval.Value = (_timePerBlock / 15) - 1;                }                else                {                  Log.Debug("RadioGuideBase: SpinControl cntlTimeInterval is null!");                }                  if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  Update(true);                }                else                {                  Update(false);                }                  SetFocus();                  if (_currentProgram != null)                {                  m_dtStartTime = _currentProgram.StartTime;                }                UpdateCurrentProgram();                  return true;              }              //break;              case GUIMessage.MessageType.GUI_MSG_CLICKED:              int iControl = message.SenderControlId;              if (iControl == (int)Controls.SPINCONTROL_DAY)              {                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                int iDay = cntlDay.Value;                  _viewingTime = DateTime.Now;                _viewingTime = new DateTime(DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' _viewingTime.Hour'                                            _viewingTime.Minute' 0' 0);                _viewingTime = _viewingTime.AddDays(iDay);                _recalculateProgramOffset = true;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.SPINCONTROL_TIME_INTERVAL)              {                GUISpinControl cntlTimeInt = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                int iInterval = (cntlTimeInt.Value) + 1;                if (iInterval > 4)                {                  iInterval = 4;                }                _timePerBlock = iInterval * 15;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.CHANNEL_GROUP_BUTTON)              {                OnSelectChannelGroup();                return true;              }              if (iControl >= GUIDE_COMPONENTID_START)              {                OnSelectItem(true);                Update(false);                SetFocus();              }              else if (_cursorY == 0)              {                _backupSingleViewCursorX = _cursorX;                OnSwitchMode(false);              }              break;          }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnMessage,The following statement contains a magic number: switch (message.Message)          {            case GUIMessage.MessageType.GUI_MSG_PERCENTAGE_CHANGED:              if (message.SenderControlId == (int)Controls.HORZ_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                fPercentage *= 24.0f;                fPercentage *= 60.0f;                _viewingTime = new DateTime(_viewingTime.Year' _viewingTime.Month' _viewingTime.Day' 0' 0' 0' 0);                _viewingTime = _viewingTime.AddMinutes((int)fPercentage);              }                if (message.SenderControlId == (int)Controls.VERT_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                if (_singleChannelView)                {                  fPercentage *= (float)_totalProgramCount;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }                else                {                  fPercentage *= (float)_channelList.Count;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }              }              break;              case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:              {                if (!_singleChannelView)                {                  base.OnMessage(message);                  SaveSettings();                  if (_recordingList != null && TVHome.Connected)                  {                    _recordingList.Clear();                  }                    _controls = new Dictionary<int' GUIButton3PartControl>();                  _channelList = null;                  _recordingList = null;                  _currentProgram = null;                }                  return true;              }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:              {                                if (!TVHome.Connected)                {                  RemoteControl.Clear();                  GUIWindowManager.ActivateWindow((int)Window.WINDOW_SETTINGS_TVENGINE);                  return false;                }                  TVHome.WaitForGentleConnection();                  if (TVHome.Navigator == null)                {                  TVHome.OnLoaded();                }                else if (TVHome.Navigator.Channel == null)                {                  TVHome.m_navigator.ReLoad();                  TVHome.LoadSettings(false);                }                  if (TVHome.m_navigator == null)                {                  TVHome.m_navigator = new ChannelNavigator(); // Create the channel navigator (it will load groups and channels)                }                  // Reload ChannelGroups                Radio radioLoad = (Radio)GUIWindowManager.GetWindow((int)Window.WINDOW_RADIO);                radioLoad.OnAdded();                  GUIPropertyManager.SetProperty("#itemcount"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem2"' string.Empty);                GUIPropertyManager.SetProperty("#selectedthumb"' string.Empty);                  if (_shouldRestore)                {                  DoRestoreSkin();                }                else                {                  LoadSkin();                  AllocResources();                }                  InitControls();                  base.OnMessage(message);                  UpdateOverlayAllowed();                GUIGraphicsContext.Overlay = _isOverlayAllowed;                  // set topbar autohide                switch (_autoHideTopbarType)                {                  case AutoHideTopBar.No:                    _autoHideTopbar = false;                    break;                  case AutoHideTopBar.Yes:                    _autoHideTopbar = true;                    break;                  default:                    _autoHideTopbar = GUIGraphicsContext.DefaultTopBarHide;                    break;                }                GUIGraphicsContext.AutoHideTopBar = _autoHideTopbar;                GUIGraphicsContext.TopBarHidden = _autoHideTopbar;                GUIGraphicsContext.DisableTopBar = _disableTopBar;                LoadSettings();                  UpdateChannelCount();                  UnFocus();                GetChannels(true);                LoadSchedules(true);                _currentProgram = null;                if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  _viewingTime = DateTime.Now;                  _cursorY = 0;                  _cursorX = 0;                  ChannelOffset = 0;                  _singleChannelView = false;                  _showChannelLogos = false;                  if (TVHome.Card.IsTimeShifting)                  {                    _currentChannel = Radio.CurrentChannel;                    for (int i = 0; i < _channelList.Count; i++)                    {                      Channel chan = ((GuideChannel)_channelList[i]).channel;                      if (chan.IdChannel == _currentChannel.IdChannel)                      {                        _cursorX = i;                        break;                      }                    }                  }                }                while (_cursorX >= _channelCount)                {                  _cursorX -= _channelCount;                  ChannelOffset += _channelCount;                }                // Mantis 3579: the above lines can lead to too large channeloffset.                 // Now we check if the offset is too large' and if it is' we reduce it and increase the cursor position accordingly                if (!_guideContinuousScroll && (ChannelOffset > _channelList.Count - _channelCount))                {                  _cursorX += ChannelOffset - (_channelList.Count - _channelCount);                  ChannelOffset = _channelList.Count - _channelCount;                }                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                if (cntlDay != null)                {                  DateTime dtNow = DateTime.Now;                  cntlDay.Reset();                  cntlDay.SetRange(0' MaxDaysInGuide - 1);                  for (int iDay = 0; iDay < MaxDaysInGuide; iDay++)                  {                    DateTime dtTemp = dtNow.AddDays(iDay);                    string day = Utils.GetShortDayString(dtTemp);                    cntlDay.AddLabel(day' iDay);                  }                }                else                {                  Log.Debug("RadioGuideBase: SpinControl cntlDay is null!");                }                  GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                if (cntlTimeInterval != null)                {                  cntlTimeInterval.Reset();                  for (int i = 1; i <= 4; i++)                  {                    cntlTimeInterval.AddLabel(String.Empty' i);                  }                  cntlTimeInterval.Value = (_timePerBlock / 15) - 1;                }                else                {                  Log.Debug("RadioGuideBase: SpinControl cntlTimeInterval is null!");                }                  if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  Update(true);                }                else                {                  Update(false);                }                  SetFocus();                  if (_currentProgram != null)                {                  m_dtStartTime = _currentProgram.StartTime;                }                UpdateCurrentProgram();                  return true;              }              //break;              case GUIMessage.MessageType.GUI_MSG_CLICKED:              int iControl = message.SenderControlId;              if (iControl == (int)Controls.SPINCONTROL_DAY)              {                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                int iDay = cntlDay.Value;                  _viewingTime = DateTime.Now;                _viewingTime = new DateTime(DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' _viewingTime.Hour'                                            _viewingTime.Minute' 0' 0);                _viewingTime = _viewingTime.AddDays(iDay);                _recalculateProgramOffset = true;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.SPINCONTROL_TIME_INTERVAL)              {                GUISpinControl cntlTimeInt = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                int iInterval = (cntlTimeInt.Value) + 1;                if (iInterval > 4)                {                  iInterval = 4;                }                _timePerBlock = iInterval * 15;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.CHANNEL_GROUP_BUTTON)              {                OnSelectChannelGroup();                return true;              }              if (iControl >= GUIDE_COMPONENTID_START)              {                OnSelectItem(true);                Update(false);                SetFocus();              }              else if (_cursorY == 0)              {                _backupSingleViewCursorX = _cursorX;                OnSwitchMode(false);              }              break;          }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnMessage,The following statement contains a magic number: switch (message.Message)          {            case GUIMessage.MessageType.GUI_MSG_PERCENTAGE_CHANGED:              if (message.SenderControlId == (int)Controls.HORZ_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                fPercentage *= 24.0f;                fPercentage *= 60.0f;                _viewingTime = new DateTime(_viewingTime.Year' _viewingTime.Month' _viewingTime.Day' 0' 0' 0' 0);                _viewingTime = _viewingTime.AddMinutes((int)fPercentage);              }                if (message.SenderControlId == (int)Controls.VERT_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                if (_singleChannelView)                {                  fPercentage *= (float)_totalProgramCount;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }                else                {                  fPercentage *= (float)_channelList.Count;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }              }              break;              case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:              {                if (!_singleChannelView)                {                  base.OnMessage(message);                  SaveSettings();                  if (_recordingList != null && TVHome.Connected)                  {                    _recordingList.Clear();                  }                    _controls = new Dictionary<int' GUIButton3PartControl>();                  _channelList = null;                  _recordingList = null;                  _currentProgram = null;                }                  return true;              }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:              {                                if (!TVHome.Connected)                {                  RemoteControl.Clear();                  GUIWindowManager.ActivateWindow((int)Window.WINDOW_SETTINGS_TVENGINE);                  return false;                }                  TVHome.WaitForGentleConnection();                  if (TVHome.Navigator == null)                {                  TVHome.OnLoaded();                }                else if (TVHome.Navigator.Channel == null)                {                  TVHome.m_navigator.ReLoad();                  TVHome.LoadSettings(false);                }                  if (TVHome.m_navigator == null)                {                  TVHome.m_navigator = new ChannelNavigator(); // Create the channel navigator (it will load groups and channels)                }                  // Reload ChannelGroups                Radio radioLoad = (Radio)GUIWindowManager.GetWindow((int)Window.WINDOW_RADIO);                radioLoad.OnAdded();                  GUIPropertyManager.SetProperty("#itemcount"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem2"' string.Empty);                GUIPropertyManager.SetProperty("#selectedthumb"' string.Empty);                  if (_shouldRestore)                {                  DoRestoreSkin();                }                else                {                  LoadSkin();                  AllocResources();                }                  InitControls();                  base.OnMessage(message);                  UpdateOverlayAllowed();                GUIGraphicsContext.Overlay = _isOverlayAllowed;                  // set topbar autohide                switch (_autoHideTopbarType)                {                  case AutoHideTopBar.No:                    _autoHideTopbar = false;                    break;                  case AutoHideTopBar.Yes:                    _autoHideTopbar = true;                    break;                  default:                    _autoHideTopbar = GUIGraphicsContext.DefaultTopBarHide;                    break;                }                GUIGraphicsContext.AutoHideTopBar = _autoHideTopbar;                GUIGraphicsContext.TopBarHidden = _autoHideTopbar;                GUIGraphicsContext.DisableTopBar = _disableTopBar;                LoadSettings();                  UpdateChannelCount();                  UnFocus();                GetChannels(true);                LoadSchedules(true);                _currentProgram = null;                if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  _viewingTime = DateTime.Now;                  _cursorY = 0;                  _cursorX = 0;                  ChannelOffset = 0;                  _singleChannelView = false;                  _showChannelLogos = false;                  if (TVHome.Card.IsTimeShifting)                  {                    _currentChannel = Radio.CurrentChannel;                    for (int i = 0; i < _channelList.Count; i++)                    {                      Channel chan = ((GuideChannel)_channelList[i]).channel;                      if (chan.IdChannel == _currentChannel.IdChannel)                      {                        _cursorX = i;                        break;                      }                    }                  }                }                while (_cursorX >= _channelCount)                {                  _cursorX -= _channelCount;                  ChannelOffset += _channelCount;                }                // Mantis 3579: the above lines can lead to too large channeloffset.                 // Now we check if the offset is too large' and if it is' we reduce it and increase the cursor position accordingly                if (!_guideContinuousScroll && (ChannelOffset > _channelList.Count - _channelCount))                {                  _cursorX += ChannelOffset - (_channelList.Count - _channelCount);                  ChannelOffset = _channelList.Count - _channelCount;                }                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                if (cntlDay != null)                {                  DateTime dtNow = DateTime.Now;                  cntlDay.Reset();                  cntlDay.SetRange(0' MaxDaysInGuide - 1);                  for (int iDay = 0; iDay < MaxDaysInGuide; iDay++)                  {                    DateTime dtTemp = dtNow.AddDays(iDay);                    string day = Utils.GetShortDayString(dtTemp);                    cntlDay.AddLabel(day' iDay);                  }                }                else                {                  Log.Debug("RadioGuideBase: SpinControl cntlDay is null!");                }                  GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                if (cntlTimeInterval != null)                {                  cntlTimeInterval.Reset();                  for (int i = 1; i <= 4; i++)                  {                    cntlTimeInterval.AddLabel(String.Empty' i);                  }                  cntlTimeInterval.Value = (_timePerBlock / 15) - 1;                }                else                {                  Log.Debug("RadioGuideBase: SpinControl cntlTimeInterval is null!");                }                  if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  Update(true);                }                else                {                  Update(false);                }                  SetFocus();                  if (_currentProgram != null)                {                  m_dtStartTime = _currentProgram.StartTime;                }                UpdateCurrentProgram();                  return true;              }              //break;              case GUIMessage.MessageType.GUI_MSG_CLICKED:              int iControl = message.SenderControlId;              if (iControl == (int)Controls.SPINCONTROL_DAY)              {                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                int iDay = cntlDay.Value;                  _viewingTime = DateTime.Now;                _viewingTime = new DateTime(DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' _viewingTime.Hour'                                            _viewingTime.Minute' 0' 0);                _viewingTime = _viewingTime.AddDays(iDay);                _recalculateProgramOffset = true;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.SPINCONTROL_TIME_INTERVAL)              {                GUISpinControl cntlTimeInt = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                int iInterval = (cntlTimeInt.Value) + 1;                if (iInterval > 4)                {                  iInterval = 4;                }                _timePerBlock = iInterval * 15;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.CHANNEL_GROUP_BUTTON)              {                OnSelectChannelGroup();                return true;              }              if (iControl >= GUIDE_COMPONENTID_START)              {                OnSelectItem(true);                Update(false);                SetFocus();              }              else if (_cursorY == 0)              {                _backupSingleViewCursorX = _cursorX;                OnSwitchMode(false);              }              break;          }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnMessage,The following statement contains a magic number: switch (message.Message)          {            case GUIMessage.MessageType.GUI_MSG_PERCENTAGE_CHANGED:              if (message.SenderControlId == (int)Controls.HORZ_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                fPercentage *= 24.0f;                fPercentage *= 60.0f;                _viewingTime = new DateTime(_viewingTime.Year' _viewingTime.Month' _viewingTime.Day' 0' 0' 0' 0);                _viewingTime = _viewingTime.AddMinutes((int)fPercentage);              }                if (message.SenderControlId == (int)Controls.VERT_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                if (_singleChannelView)                {                  fPercentage *= (float)_totalProgramCount;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }                else                {                  fPercentage *= (float)_channelList.Count;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }              }              break;              case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:              {                if (!_singleChannelView)                {                  base.OnMessage(message);                  SaveSettings();                  if (_recordingList != null && TVHome.Connected)                  {                    _recordingList.Clear();                  }                    _controls = new Dictionary<int' GUIButton3PartControl>();                  _channelList = null;                  _recordingList = null;                  _currentProgram = null;                }                  return true;              }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:              {                                if (!TVHome.Connected)                {                  RemoteControl.Clear();                  GUIWindowManager.ActivateWindow((int)Window.WINDOW_SETTINGS_TVENGINE);                  return false;                }                  TVHome.WaitForGentleConnection();                  if (TVHome.Navigator == null)                {                  TVHome.OnLoaded();                }                else if (TVHome.Navigator.Channel == null)                {                  TVHome.m_navigator.ReLoad();                  TVHome.LoadSettings(false);                }                  if (TVHome.m_navigator == null)                {                  TVHome.m_navigator = new ChannelNavigator(); // Create the channel navigator (it will load groups and channels)                }                  // Reload ChannelGroups                Radio radioLoad = (Radio)GUIWindowManager.GetWindow((int)Window.WINDOW_RADIO);                radioLoad.OnAdded();                  GUIPropertyManager.SetProperty("#itemcount"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem2"' string.Empty);                GUIPropertyManager.SetProperty("#selectedthumb"' string.Empty);                  if (_shouldRestore)                {                  DoRestoreSkin();                }                else                {                  LoadSkin();                  AllocResources();                }                  InitControls();                  base.OnMessage(message);                  UpdateOverlayAllowed();                GUIGraphicsContext.Overlay = _isOverlayAllowed;                  // set topbar autohide                switch (_autoHideTopbarType)                {                  case AutoHideTopBar.No:                    _autoHideTopbar = false;                    break;                  case AutoHideTopBar.Yes:                    _autoHideTopbar = true;                    break;                  default:                    _autoHideTopbar = GUIGraphicsContext.DefaultTopBarHide;                    break;                }                GUIGraphicsContext.AutoHideTopBar = _autoHideTopbar;                GUIGraphicsContext.TopBarHidden = _autoHideTopbar;                GUIGraphicsContext.DisableTopBar = _disableTopBar;                LoadSettings();                  UpdateChannelCount();                  UnFocus();                GetChannels(true);                LoadSchedules(true);                _currentProgram = null;                if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  _viewingTime = DateTime.Now;                  _cursorY = 0;                  _cursorX = 0;                  ChannelOffset = 0;                  _singleChannelView = false;                  _showChannelLogos = false;                  if (TVHome.Card.IsTimeShifting)                  {                    _currentChannel = Radio.CurrentChannel;                    for (int i = 0; i < _channelList.Count; i++)                    {                      Channel chan = ((GuideChannel)_channelList[i]).channel;                      if (chan.IdChannel == _currentChannel.IdChannel)                      {                        _cursorX = i;                        break;                      }                    }                  }                }                while (_cursorX >= _channelCount)                {                  _cursorX -= _channelCount;                  ChannelOffset += _channelCount;                }                // Mantis 3579: the above lines can lead to too large channeloffset.                 // Now we check if the offset is too large' and if it is' we reduce it and increase the cursor position accordingly                if (!_guideContinuousScroll && (ChannelOffset > _channelList.Count - _channelCount))                {                  _cursorX += ChannelOffset - (_channelList.Count - _channelCount);                  ChannelOffset = _channelList.Count - _channelCount;                }                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                if (cntlDay != null)                {                  DateTime dtNow = DateTime.Now;                  cntlDay.Reset();                  cntlDay.SetRange(0' MaxDaysInGuide - 1);                  for (int iDay = 0; iDay < MaxDaysInGuide; iDay++)                  {                    DateTime dtTemp = dtNow.AddDays(iDay);                    string day = Utils.GetShortDayString(dtTemp);                    cntlDay.AddLabel(day' iDay);                  }                }                else                {                  Log.Debug("RadioGuideBase: SpinControl cntlDay is null!");                }                  GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                if (cntlTimeInterval != null)                {                  cntlTimeInterval.Reset();                  for (int i = 1; i <= 4; i++)                  {                    cntlTimeInterval.AddLabel(String.Empty' i);                  }                  cntlTimeInterval.Value = (_timePerBlock / 15) - 1;                }                else                {                  Log.Debug("RadioGuideBase: SpinControl cntlTimeInterval is null!");                }                  if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  Update(true);                }                else                {                  Update(false);                }                  SetFocus();                  if (_currentProgram != null)                {                  m_dtStartTime = _currentProgram.StartTime;                }                UpdateCurrentProgram();                  return true;              }              //break;              case GUIMessage.MessageType.GUI_MSG_CLICKED:              int iControl = message.SenderControlId;              if (iControl == (int)Controls.SPINCONTROL_DAY)              {                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                int iDay = cntlDay.Value;                  _viewingTime = DateTime.Now;                _viewingTime = new DateTime(DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' _viewingTime.Hour'                                            _viewingTime.Minute' 0' 0);                _viewingTime = _viewingTime.AddDays(iDay);                _recalculateProgramOffset = true;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.SPINCONTROL_TIME_INTERVAL)              {                GUISpinControl cntlTimeInt = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                int iInterval = (cntlTimeInt.Value) + 1;                if (iInterval > 4)                {                  iInterval = 4;                }                _timePerBlock = iInterval * 15;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.CHANNEL_GROUP_BUTTON)              {                OnSelectChannelGroup();                return true;              }              if (iControl >= GUIDE_COMPONENTID_START)              {                OnSelectItem(true);                Update(false);                SetFocus();              }              else if (_cursorY == 0)              {                _backupSingleViewCursorX = _cursorX;                OnSwitchMode(false);              }              break;          }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnMessage,The following statement contains a magic number: switch (message.Message)          {            case GUIMessage.MessageType.GUI_MSG_PERCENTAGE_CHANGED:              if (message.SenderControlId == (int)Controls.HORZ_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                fPercentage *= 24.0f;                fPercentage *= 60.0f;                _viewingTime = new DateTime(_viewingTime.Year' _viewingTime.Month' _viewingTime.Day' 0' 0' 0' 0);                _viewingTime = _viewingTime.AddMinutes((int)fPercentage);              }                if (message.SenderControlId == (int)Controls.VERT_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                if (_singleChannelView)                {                  fPercentage *= (float)_totalProgramCount;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }                else                {                  fPercentage *= (float)_channelList.Count;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }              }              break;              case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:              {                if (!_singleChannelView)                {                  base.OnMessage(message);                  SaveSettings();                  if (_recordingList != null && TVHome.Connected)                  {                    _recordingList.Clear();                  }                    _controls = new Dictionary<int' GUIButton3PartControl>();                  _channelList = null;                  _recordingList = null;                  _currentProgram = null;                }                  return true;              }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:              {                                if (!TVHome.Connected)                {                  RemoteControl.Clear();                  GUIWindowManager.ActivateWindow((int)Window.WINDOW_SETTINGS_TVENGINE);                  return false;                }                  TVHome.WaitForGentleConnection();                  if (TVHome.Navigator == null)                {                  TVHome.OnLoaded();                }                else if (TVHome.Navigator.Channel == null)                {                  TVHome.m_navigator.ReLoad();                  TVHome.LoadSettings(false);                }                  if (TVHome.m_navigator == null)                {                  TVHome.m_navigator = new ChannelNavigator(); // Create the channel navigator (it will load groups and channels)                }                  // Reload ChannelGroups                Radio radioLoad = (Radio)GUIWindowManager.GetWindow((int)Window.WINDOW_RADIO);                radioLoad.OnAdded();                  GUIPropertyManager.SetProperty("#itemcount"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem2"' string.Empty);                GUIPropertyManager.SetProperty("#selectedthumb"' string.Empty);                  if (_shouldRestore)                {                  DoRestoreSkin();                }                else                {                  LoadSkin();                  AllocResources();                }                  InitControls();                  base.OnMessage(message);                  UpdateOverlayAllowed();                GUIGraphicsContext.Overlay = _isOverlayAllowed;                  // set topbar autohide                switch (_autoHideTopbarType)                {                  case AutoHideTopBar.No:                    _autoHideTopbar = false;                    break;                  case AutoHideTopBar.Yes:                    _autoHideTopbar = true;                    break;                  default:                    _autoHideTopbar = GUIGraphicsContext.DefaultTopBarHide;                    break;                }                GUIGraphicsContext.AutoHideTopBar = _autoHideTopbar;                GUIGraphicsContext.TopBarHidden = _autoHideTopbar;                GUIGraphicsContext.DisableTopBar = _disableTopBar;                LoadSettings();                  UpdateChannelCount();                  UnFocus();                GetChannels(true);                LoadSchedules(true);                _currentProgram = null;                if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  _viewingTime = DateTime.Now;                  _cursorY = 0;                  _cursorX = 0;                  ChannelOffset = 0;                  _singleChannelView = false;                  _showChannelLogos = false;                  if (TVHome.Card.IsTimeShifting)                  {                    _currentChannel = Radio.CurrentChannel;                    for (int i = 0; i < _channelList.Count; i++)                    {                      Channel chan = ((GuideChannel)_channelList[i]).channel;                      if (chan.IdChannel == _currentChannel.IdChannel)                      {                        _cursorX = i;                        break;                      }                    }                  }                }                while (_cursorX >= _channelCount)                {                  _cursorX -= _channelCount;                  ChannelOffset += _channelCount;                }                // Mantis 3579: the above lines can lead to too large channeloffset.                 // Now we check if the offset is too large' and if it is' we reduce it and increase the cursor position accordingly                if (!_guideContinuousScroll && (ChannelOffset > _channelList.Count - _channelCount))                {                  _cursorX += ChannelOffset - (_channelList.Count - _channelCount);                  ChannelOffset = _channelList.Count - _channelCount;                }                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                if (cntlDay != null)                {                  DateTime dtNow = DateTime.Now;                  cntlDay.Reset();                  cntlDay.SetRange(0' MaxDaysInGuide - 1);                  for (int iDay = 0; iDay < MaxDaysInGuide; iDay++)                  {                    DateTime dtTemp = dtNow.AddDays(iDay);                    string day = Utils.GetShortDayString(dtTemp);                    cntlDay.AddLabel(day' iDay);                  }                }                else                {                  Log.Debug("RadioGuideBase: SpinControl cntlDay is null!");                }                  GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                if (cntlTimeInterval != null)                {                  cntlTimeInterval.Reset();                  for (int i = 1; i <= 4; i++)                  {                    cntlTimeInterval.AddLabel(String.Empty' i);                  }                  cntlTimeInterval.Value = (_timePerBlock / 15) - 1;                }                else                {                  Log.Debug("RadioGuideBase: SpinControl cntlTimeInterval is null!");                }                  if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  Update(true);                }                else                {                  Update(false);                }                  SetFocus();                  if (_currentProgram != null)                {                  m_dtStartTime = _currentProgram.StartTime;                }                UpdateCurrentProgram();                  return true;              }              //break;              case GUIMessage.MessageType.GUI_MSG_CLICKED:              int iControl = message.SenderControlId;              if (iControl == (int)Controls.SPINCONTROL_DAY)              {                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                int iDay = cntlDay.Value;                  _viewingTime = DateTime.Now;                _viewingTime = new DateTime(DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' _viewingTime.Hour'                                            _viewingTime.Minute' 0' 0);                _viewingTime = _viewingTime.AddDays(iDay);                _recalculateProgramOffset = true;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.SPINCONTROL_TIME_INTERVAL)              {                GUISpinControl cntlTimeInt = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                int iInterval = (cntlTimeInt.Value) + 1;                if (iInterval > 4)                {                  iInterval = 4;                }                _timePerBlock = iInterval * 15;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.CHANNEL_GROUP_BUTTON)              {                OnSelectChannelGroup();                return true;              }              if (iControl >= GUIDE_COMPONENTID_START)              {                OnSelectItem(true);                Update(false);                SetFocus();              }              else if (_cursorY == 0)              {                _backupSingleViewCursorX = _cursorX;                OnSwitchMode(false);              }              break;          }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnSelectChannelGroup,The following statement contains a magic number: dlg.SetHeading(971);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,Process,The following statement contains a magic number: ts.TotalMilliseconds > 1000
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: channelImage = new GUIImage(GetID' (int)Controls.SINGLE_CHANNEL_IMAGE'                                        GetControl((int)Controls.LABEL_TIME1).XPosition'                                        GetControl((int)Controls.LABEL_TIME1).YPosition - 15'                                        40' 40' strLogo' Color.White);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: channelImage = new GUIImage(GetID' (int)Controls.SINGLE_CHANNEL_IMAGE'                                        GetControl((int)Controls.LABEL_TIME1).XPosition'                                        GetControl((int)Controls.LABEL_TIME1).YPosition - 15'                                        40' 40' strLogo' Color.White);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: channelImage = new GUIImage(GetID' (int)Controls.SINGLE_CHANNEL_IMAGE'                                        GetControl((int)Controls.LABEL_TIME1).XPosition'                                        GetControl((int)Controls.LABEL_TIME1).YPosition - 15'                                        40' 40' strLogo' Color.White);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: channelLabel = new GUILabelControl(GetID' (int)Controls.SINGLE_CHANNEL_LABEL'                                             channelImage.XPosition + 44'                                             channelImage.YPosition + 10'                                             300' 40' "font16"' channel.DisplayName' 4294967295' GUIControl.Alignment.Left'                                             GUIControl.VAlignment.Top'                                             true' 0' 0' 0xFF000000);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: channelLabel = new GUILabelControl(GetID' (int)Controls.SINGLE_CHANNEL_LABEL'                                             channelImage.XPosition + 44'                                             channelImage.YPosition + 10'                                             300' 40' "font16"' channel.DisplayName' 4294967295' GUIControl.Alignment.Left'                                             GUIControl.VAlignment.Top'                                             true' 0' 0' 0xFF000000);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: channelLabel = new GUILabelControl(GetID' (int)Controls.SINGLE_CHANNEL_LABEL'                                             channelImage.XPosition + 44'                                             channelImage.YPosition + 10'                                             300' 40' "font16"' channel.DisplayName' 4294967295' GUIControl.Alignment.Left'                                             GUIControl.VAlignment.Top'                                             true' 0' 0' 0xFF000000);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: channelLabel = new GUILabelControl(GetID' (int)Controls.SINGLE_CHANNEL_LABEL'                                             channelImage.XPosition + 44'                                             channelImage.YPosition + 10'                                             300' 40' "font16"' channel.DisplayName' 4294967295' GUIControl.Alignment.Left'                                             GUIControl.VAlignment.Top'                                             true' 0' 0' 0xFF000000);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: channelLabel = new GUILabelControl(GetID' (int)Controls.SINGLE_CHANNEL_LABEL'                                             channelImage.XPosition + 44'                                             channelImage.YPosition + 10'                                             300' 40' "font16"' channel.DisplayName' 4294967295' GUIControl.Alignment.Left'                                             GUIControl.VAlignment.Top'                                             true' 0' 0' 0xFF000000);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: DateTime dtEnd = dtStart.AddDays(30);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: img = new GUIButton3PartControl(GetID' iControlId' iStartXPos' ypos' iTotalWidth' height - 2'                                              buttonTemplate.TexutureFocusLeftName'                                              buttonTemplate.TexutureFocusMidName'                                              buttonTemplate.TexutureFocusRightName'                                              buttonTemplate.TexutureNoFocusLeftName'                                              buttonTemplate.TexutureNoFocusMidName'                                              buttonTemplate.TexutureNoFocusRightName'                                              String.Empty);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: height = height - 10;
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: height /= 2;
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: iWidth -= 10;
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: iWidth > 10
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: img.TextOffsetX1 = 5;
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: img.TextOffsetY1 = 5;
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: img.TextOffsetX2 = 5;
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: img.TextOffsetY2 = img.Height / 2;
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderChannel,The following statement contains a magic number: Program prog = new Program(channel.IdChannel' Utils.longtodate(iStart)' Utils.longtodate(iProgEnd)'                                     GUILocalizeStrings.Get(736)' ""' ""' Program.ProgramState.None' DateTime.MinValue'                                     string.Empty'                                     string.Empty' string.Empty' string.Empty' -1' string.Empty' -1);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderChannel,The following statement contains a magic number: int iStartMin = ts.Hours * 60;
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderChannel,The following statement contains a magic number: ts.Seconds == 59
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderChannel,The following statement contains a magic number: iEndXPos = iStartXPos + 6;
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderChannel,The following statement contains a magic number: iEndXPos <= iStartXPos + 5
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderChannel,The following statement contains a magic number: iWidth -= 3;
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderChannel,The following statement contains a magic number: iWidth > 3
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderChannel,The following statement contains a magic number: img = new GUIButton3PartControl(GetID' iControlId' iStartXPos' ypos' iWidth' height - 2'                                              TexutureFocusLeftName'                                              TexutureFocusMidName'                                              TexutureFocusRightName'                                              TexutureNoFocusLeftName'                                              TexutureNoFocusMidName'                                              TexutureNoFocusRightName'                                              String.Empty);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderChannel,The following statement contains a magic number: iWidth -= 10;
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderChannel,The following statement contains a magic number: iWidth > 10
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderChannel,The following statement contains a magic number: img.TextOffsetX1 = 5;
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderChannel,The following statement contains a magic number: img.TextOffsetY1 = 5;
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderChannel,The following statement contains a magic number: img.TextOffsetX1 = 5;
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderChannel,The following statement contains a magic number: img.TextOffsetY1 = 5;
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderChannel,The following statement contains a magic number: img.TextOffsetX2 = 5;
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderChannel,The following statement contains a magic number: img.TextOffsetY2 = img.Height / 2;
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderChannel,The following statement contains a magic number: img.TextOffsetX2 = 5;
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,RenderChannel,The following statement contains a magic number: img.TextOffsetY2 = 5;
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,ProgramCount,The following statement contains a magic number: iProgram < _numberOfBlocks * 5
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,UpdateGroupButton,The following statement contains a magic number: GroupButtonText = String.Format("{0}: {1}"' GUILocalizeStrings.Get(971)' Radio.SelectedGroup.GroupName);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,ShowContextMenu,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(924));
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1213);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1041);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1212);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(939);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(629);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(971);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(2162);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(2163);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(2164);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)          {              case 1041:              ShowProgramInfo();              Log.Debug("RadioGuide: show episodes or repeatings for current show");              break;            case 971: //group              OnSelectChannelGroup();              break;            case 1040: // set reminder            case 1212: // cancel reminder              OnNotify();              break;              case 1213: // listen to station                Log.Debug("viewch channel:{0}"' _currentChannel);              Radio.Play();              if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == _currentProgram.ReferencedChannel().IdChannel)              {                g_Player.ShowFullScreenWindow();              }              return;                case 939: // switch mode              _backupSingleViewCursorX = _cursorX;              OnSwitchMode(false);              break;            case 629: //stop recording              Schedule schedule = Schedule.FindNoEPGSchedule(_currentProgram.ReferencedChannel());              TVUtil.DeleteRecAndEntireSchedWithPrompt(schedule);              Update(true); //remove RED marker              break;              case 2162: // Remove channel              OnRemoveChannel();                break;              case 2163: // Add channel to a group              OnAddChannelToGroup();                break;              case 2164: // Remove channel from this group              OnRemoveChannelFromGroup();                break;              case 637: // edit recording            case 264: // record              if (_currentProgram.IdProgram == 0)              {                TVHome.StartRecordingSchedule(_currentProgram.ReferencedChannel()' true);                _currentProgram.IsRecordingOncePending = true;                Update(true); //remove RED marker              }              else              {                OnRecordContext();              }              break;          }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)          {              case 1041:              ShowProgramInfo();              Log.Debug("RadioGuide: show episodes or repeatings for current show");              break;            case 971: //group              OnSelectChannelGroup();              break;            case 1040: // set reminder            case 1212: // cancel reminder              OnNotify();              break;              case 1213: // listen to station                Log.Debug("viewch channel:{0}"' _currentChannel);              Radio.Play();              if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == _currentProgram.ReferencedChannel().IdChannel)              {                g_Player.ShowFullScreenWindow();              }              return;                case 939: // switch mode              _backupSingleViewCursorX = _cursorX;              OnSwitchMode(false);              break;            case 629: //stop recording              Schedule schedule = Schedule.FindNoEPGSchedule(_currentProgram.ReferencedChannel());              TVUtil.DeleteRecAndEntireSchedWithPrompt(schedule);              Update(true); //remove RED marker              break;              case 2162: // Remove channel              OnRemoveChannel();                break;              case 2163: // Add channel to a group              OnAddChannelToGroup();                break;              case 2164: // Remove channel from this group              OnRemoveChannelFromGroup();                break;              case 637: // edit recording            case 264: // record              if (_currentProgram.IdProgram == 0)              {                TVHome.StartRecordingSchedule(_currentProgram.ReferencedChannel()' true);                _currentProgram.IsRecordingOncePending = true;                Update(true); //remove RED marker              }              else              {                OnRecordContext();              }              break;          }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)          {              case 1041:              ShowProgramInfo();              Log.Debug("RadioGuide: show episodes or repeatings for current show");              break;            case 971: //group              OnSelectChannelGroup();              break;            case 1040: // set reminder            case 1212: // cancel reminder              OnNotify();              break;              case 1213: // listen to station                Log.Debug("viewch channel:{0}"' _currentChannel);              Radio.Play();              if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == _currentProgram.ReferencedChannel().IdChannel)              {                g_Player.ShowFullScreenWindow();              }              return;                case 939: // switch mode              _backupSingleViewCursorX = _cursorX;              OnSwitchMode(false);              break;            case 629: //stop recording              Schedule schedule = Schedule.FindNoEPGSchedule(_currentProgram.ReferencedChannel());              TVUtil.DeleteRecAndEntireSchedWithPrompt(schedule);              Update(true); //remove RED marker              break;              case 2162: // Remove channel              OnRemoveChannel();                break;              case 2163: // Add channel to a group              OnAddChannelToGroup();                break;              case 2164: // Remove channel from this group              OnRemoveChannelFromGroup();                break;              case 637: // edit recording            case 264: // record              if (_currentProgram.IdProgram == 0)              {                TVHome.StartRecordingSchedule(_currentProgram.ReferencedChannel()' true);                _currentProgram.IsRecordingOncePending = true;                Update(true); //remove RED marker              }              else              {                OnRecordContext();              }              break;          }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)          {              case 1041:              ShowProgramInfo();              Log.Debug("RadioGuide: show episodes or repeatings for current show");              break;            case 971: //group              OnSelectChannelGroup();              break;            case 1040: // set reminder            case 1212: // cancel reminder              OnNotify();              break;              case 1213: // listen to station                Log.Debug("viewch channel:{0}"' _currentChannel);              Radio.Play();              if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == _currentProgram.ReferencedChannel().IdChannel)              {                g_Player.ShowFullScreenWindow();              }              return;                case 939: // switch mode              _backupSingleViewCursorX = _cursorX;              OnSwitchMode(false);              break;            case 629: //stop recording              Schedule schedule = Schedule.FindNoEPGSchedule(_currentProgram.ReferencedChannel());              TVUtil.DeleteRecAndEntireSchedWithPrompt(schedule);              Update(true); //remove RED marker              break;              case 2162: // Remove channel              OnRemoveChannel();                break;              case 2163: // Add channel to a group              OnAddChannelToGroup();                break;              case 2164: // Remove channel from this group              OnRemoveChannelFromGroup();                break;              case 637: // edit recording            case 264: // record              if (_currentProgram.IdProgram == 0)              {                TVHome.StartRecordingSchedule(_currentProgram.ReferencedChannel()' true);                _currentProgram.IsRecordingOncePending = true;                Update(true); //remove RED marker              }              else              {                OnRecordContext();              }              break;          }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)          {              case 1041:              ShowProgramInfo();              Log.Debug("RadioGuide: show episodes or repeatings for current show");              break;            case 971: //group              OnSelectChannelGroup();              break;            case 1040: // set reminder            case 1212: // cancel reminder              OnNotify();              break;              case 1213: // listen to station                Log.Debug("viewch channel:{0}"' _currentChannel);              Radio.Play();              if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == _currentProgram.ReferencedChannel().IdChannel)              {                g_Player.ShowFullScreenWindow();              }              return;                case 939: // switch mode              _backupSingleViewCursorX = _cursorX;              OnSwitchMode(false);              break;            case 629: //stop recording              Schedule schedule = Schedule.FindNoEPGSchedule(_currentProgram.ReferencedChannel());              TVUtil.DeleteRecAndEntireSchedWithPrompt(schedule);              Update(true); //remove RED marker              break;              case 2162: // Remove channel              OnRemoveChannel();                break;              case 2163: // Add channel to a group              OnAddChannelToGroup();                break;              case 2164: // Remove channel from this group              OnRemoveChannelFromGroup();                break;              case 637: // edit recording            case 264: // record              if (_currentProgram.IdProgram == 0)              {                TVHome.StartRecordingSchedule(_currentProgram.ReferencedChannel()' true);                _currentProgram.IsRecordingOncePending = true;                Update(true); //remove RED marker              }              else              {                OnRecordContext();              }              break;          }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)          {              case 1041:              ShowProgramInfo();              Log.Debug("RadioGuide: show episodes or repeatings for current show");              break;            case 971: //group              OnSelectChannelGroup();              break;            case 1040: // set reminder            case 1212: // cancel reminder              OnNotify();              break;              case 1213: // listen to station                Log.Debug("viewch channel:{0}"' _currentChannel);              Radio.Play();              if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == _currentProgram.ReferencedChannel().IdChannel)              {                g_Player.ShowFullScreenWindow();              }              return;                case 939: // switch mode              _backupSingleViewCursorX = _cursorX;              OnSwitchMode(false);              break;            case 629: //stop recording              Schedule schedule = Schedule.FindNoEPGSchedule(_currentProgram.ReferencedChannel());              TVUtil.DeleteRecAndEntireSchedWithPrompt(schedule);              Update(true); //remove RED marker              break;              case 2162: // Remove channel              OnRemoveChannel();                break;              case 2163: // Add channel to a group              OnAddChannelToGroup();                break;              case 2164: // Remove channel from this group              OnRemoveChannelFromGroup();                break;              case 637: // edit recording            case 264: // record              if (_currentProgram.IdProgram == 0)              {                TVHome.StartRecordingSchedule(_currentProgram.ReferencedChannel()' true);                _currentProgram.IsRecordingOncePending = true;                Update(true); //remove RED marker              }              else              {                OnRecordContext();              }              break;          }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)          {              case 1041:              ShowProgramInfo();              Log.Debug("RadioGuide: show episodes or repeatings for current show");              break;            case 971: //group              OnSelectChannelGroup();              break;            case 1040: // set reminder            case 1212: // cancel reminder              OnNotify();              break;              case 1213: // listen to station                Log.Debug("viewch channel:{0}"' _currentChannel);              Radio.Play();              if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == _currentProgram.ReferencedChannel().IdChannel)              {                g_Player.ShowFullScreenWindow();              }              return;                case 939: // switch mode              _backupSingleViewCursorX = _cursorX;              OnSwitchMode(false);              break;            case 629: //stop recording              Schedule schedule = Schedule.FindNoEPGSchedule(_currentProgram.ReferencedChannel());              TVUtil.DeleteRecAndEntireSchedWithPrompt(schedule);              Update(true); //remove RED marker              break;              case 2162: // Remove channel              OnRemoveChannel();                break;              case 2163: // Add channel to a group              OnAddChannelToGroup();                break;              case 2164: // Remove channel from this group              OnRemoveChannelFromGroup();                break;              case 637: // edit recording            case 264: // record              if (_currentProgram.IdProgram == 0)              {                TVHome.StartRecordingSchedule(_currentProgram.ReferencedChannel()' true);                _currentProgram.IsRecordingOncePending = true;                Update(true); //remove RED marker              }              else              {                OnRecordContext();              }              break;          }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)          {              case 1041:              ShowProgramInfo();              Log.Debug("RadioGuide: show episodes or repeatings for current show");              break;            case 971: //group              OnSelectChannelGroup();              break;            case 1040: // set reminder            case 1212: // cancel reminder              OnNotify();              break;              case 1213: // listen to station                Log.Debug("viewch channel:{0}"' _currentChannel);              Radio.Play();              if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == _currentProgram.ReferencedChannel().IdChannel)              {                g_Player.ShowFullScreenWindow();              }              return;                case 939: // switch mode              _backupSingleViewCursorX = _cursorX;              OnSwitchMode(false);              break;            case 629: //stop recording              Schedule schedule = Schedule.FindNoEPGSchedule(_currentProgram.ReferencedChannel());              TVUtil.DeleteRecAndEntireSchedWithPrompt(schedule);              Update(true); //remove RED marker              break;              case 2162: // Remove channel              OnRemoveChannel();                break;              case 2163: // Add channel to a group              OnAddChannelToGroup();                break;              case 2164: // Remove channel from this group              OnRemoveChannelFromGroup();                break;              case 637: // edit recording            case 264: // record              if (_currentProgram.IdProgram == 0)              {                TVHome.StartRecordingSchedule(_currentProgram.ReferencedChannel()' true);                _currentProgram.IsRecordingOncePending = true;                Update(true); //remove RED marker              }              else              {                OnRecordContext();              }              break;          }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)          {              case 1041:              ShowProgramInfo();              Log.Debug("RadioGuide: show episodes or repeatings for current show");              break;            case 971: //group              OnSelectChannelGroup();              break;            case 1040: // set reminder            case 1212: // cancel reminder              OnNotify();              break;              case 1213: // listen to station                Log.Debug("viewch channel:{0}"' _currentChannel);              Radio.Play();              if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == _currentProgram.ReferencedChannel().IdChannel)              {                g_Player.ShowFullScreenWindow();              }              return;                case 939: // switch mode              _backupSingleViewCursorX = _cursorX;              OnSwitchMode(false);              break;            case 629: //stop recording              Schedule schedule = Schedule.FindNoEPGSchedule(_currentProgram.ReferencedChannel());              TVUtil.DeleteRecAndEntireSchedWithPrompt(schedule);              Update(true); //remove RED marker              break;              case 2162: // Remove channel              OnRemoveChannel();                break;              case 2163: // Add channel to a group              OnAddChannelToGroup();                break;              case 2164: // Remove channel from this group              OnRemoveChannelFromGroup();                break;              case 637: // edit recording            case 264: // record              if (_currentProgram.IdProgram == 0)              {                TVHome.StartRecordingSchedule(_currentProgram.ReferencedChannel()' true);                _currentProgram.IsRecordingOncePending = true;                Update(true); //remove RED marker              }              else              {                OnRecordContext();              }              break;          }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)          {              case 1041:              ShowProgramInfo();              Log.Debug("RadioGuide: show episodes or repeatings for current show");              break;            case 971: //group              OnSelectChannelGroup();              break;            case 1040: // set reminder            case 1212: // cancel reminder              OnNotify();              break;              case 1213: // listen to station                Log.Debug("viewch channel:{0}"' _currentChannel);              Radio.Play();              if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == _currentProgram.ReferencedChannel().IdChannel)              {                g_Player.ShowFullScreenWindow();              }              return;                case 939: // switch mode              _backupSingleViewCursorX = _cursorX;              OnSwitchMode(false);              break;            case 629: //stop recording              Schedule schedule = Schedule.FindNoEPGSchedule(_currentProgram.ReferencedChannel());              TVUtil.DeleteRecAndEntireSchedWithPrompt(schedule);              Update(true); //remove RED marker              break;              case 2162: // Remove channel              OnRemoveChannel();                break;              case 2163: // Add channel to a group              OnAddChannelToGroup();                break;              case 2164: // Remove channel from this group              OnRemoveChannelFromGroup();                break;              case 637: // edit recording            case 264: // record              if (_currentProgram.IdProgram == 0)              {                TVHome.StartRecordingSchedule(_currentProgram.ReferencedChannel()' true);                _currentProgram.IsRecordingOncePending = true;                Update(true); //remove RED marker              }              else              {                OnRecordContext();              }              break;          }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)          {              case 1041:              ShowProgramInfo();              Log.Debug("RadioGuide: show episodes or repeatings for current show");              break;            case 971: //group              OnSelectChannelGroup();              break;            case 1040: // set reminder            case 1212: // cancel reminder              OnNotify();              break;              case 1213: // listen to station                Log.Debug("viewch channel:{0}"' _currentChannel);              Radio.Play();              if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == _currentProgram.ReferencedChannel().IdChannel)              {                g_Player.ShowFullScreenWindow();              }              return;                case 939: // switch mode              _backupSingleViewCursorX = _cursorX;              OnSwitchMode(false);              break;            case 629: //stop recording              Schedule schedule = Schedule.FindNoEPGSchedule(_currentProgram.ReferencedChannel());              TVUtil.DeleteRecAndEntireSchedWithPrompt(schedule);              Update(true); //remove RED marker              break;              case 2162: // Remove channel              OnRemoveChannel();                break;              case 2163: // Add channel to a group              OnAddChannelToGroup();                break;              case 2164: // Remove channel from this group              OnRemoveChannelFromGroup();                break;              case 637: // edit recording            case 264: // record              if (_currentProgram.IdProgram == 0)              {                TVHome.StartRecordingSchedule(_currentProgram.ReferencedChannel()' true);                _currentProgram.IsRecordingOncePending = true;                Update(true); //remove RED marker              }              else              {                OnRecordContext();              }              break;          }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)          {              case 1041:              ShowProgramInfo();              Log.Debug("RadioGuide: show episodes or repeatings for current show");              break;            case 971: //group              OnSelectChannelGroup();              break;            case 1040: // set reminder            case 1212: // cancel reminder              OnNotify();              break;              case 1213: // listen to station                Log.Debug("viewch channel:{0}"' _currentChannel);              Radio.Play();              if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == _currentProgram.ReferencedChannel().IdChannel)              {                g_Player.ShowFullScreenWindow();              }              return;                case 939: // switch mode              _backupSingleViewCursorX = _cursorX;              OnSwitchMode(false);              break;            case 629: //stop recording              Schedule schedule = Schedule.FindNoEPGSchedule(_currentProgram.ReferencedChannel());              TVUtil.DeleteRecAndEntireSchedWithPrompt(schedule);              Update(true); //remove RED marker              break;              case 2162: // Remove channel              OnRemoveChannel();                break;              case 2163: // Add channel to a group              OnAddChannelToGroup();                break;              case 2164: // Remove channel from this group              OnRemoveChannelFromGroup();                break;              case 637: // edit recording            case 264: // record              if (_currentProgram.IdProgram == 0)              {                TVHome.StartRecordingSchedule(_currentProgram.ReferencedChannel()' true);                _currentProgram.IsRecordingOncePending = true;                Update(true); //remove RED marker              }              else              {                OnRecordContext();              }              break;          }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnRemoveChannel,The following statement contains a magic number: GUIDialogYesNo.SetHeading(GUILocalizeStrings.Get(2162));
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnRemoveChannel,The following statement contains a magic number: GUIDialogYesNo.SetLine(1' GUILocalizeStrings.Get(2165));
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnRemoveChannel,The following statement contains a magic number: GUIDialogYesNo.SetLine(2' _currentChannel.DisplayName);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnAddChannelToGroup,The following statement contains a magic number: dlg.SetHeading(971);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnSelectItem,The following statement contains a magic number: dlg.AddLocalizedString(979);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnSelectItem,The following statement contains a magic number: dlg.AddLocalizedString(1213);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnSelectItem,The following statement contains a magic number: switch (dlg.SelectedId)                  {                    case 979: // Play recording from beginning                      {                        Recording recDB = Recording.Retrieve(fileName);                        if (recDB != null)                        {                          GUIPropertyManager.RemovePlayerProperties();                          GUIPropertyManager.SetProperty("#Play.Current.ArtistThumb"' recDB.Description);                          GUIPropertyManager.SetProperty("#Play.Current.Album"' recDB.ReferencedChannel().DisplayName);                          GUIPropertyManager.SetProperty("#Play.Current.Title"' recDB.Description);                                                    string strLogo = Utils.GetCoverArt(Thumbs.Radio' recDB.ReferencedChannel().DisplayName);                          if (string.IsNullOrEmpty(strLogo))                          {                            strLogo = "defaultMyRadioBig.png";                          }                                                    GUIPropertyManager.SetProperty("#Play.Current.Thumb"' strLogo);                          TVUtil.PlayRecording(recDB' 0' g_Player.MediaType.Radio);                        }                      }                      return;                      case 1213: // listen to this station                      {                        Radio.Play();                        if (g_Player.Playing)                        {                          g_Player.ShowFullScreenWindow();                        }                      }                      return;                  }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnSelectItem,The following statement contains a magic number: switch (dlg.SelectedId)                  {                    case 979: // Play recording from beginning                      {                        Recording recDB = Recording.Retrieve(fileName);                        if (recDB != null)                        {                          GUIPropertyManager.RemovePlayerProperties();                          GUIPropertyManager.SetProperty("#Play.Current.ArtistThumb"' recDB.Description);                          GUIPropertyManager.SetProperty("#Play.Current.Album"' recDB.ReferencedChannel().DisplayName);                          GUIPropertyManager.SetProperty("#Play.Current.Title"' recDB.Description);                                                    string strLogo = Utils.GetCoverArt(Thumbs.Radio' recDB.ReferencedChannel().DisplayName);                          if (string.IsNullOrEmpty(strLogo))                          {                            strLogo = "defaultMyRadioBig.png";                          }                                                    GUIPropertyManager.SetProperty("#Play.Current.Thumb"' strLogo);                          TVUtil.PlayRecording(recDB' 0' g_Player.MediaType.Radio);                        }                      }                      return;                      case 1213: // listen to this station                      {                        Radio.Play();                        if (g_Player.Playing)                        {                          g_Player.ShowFullScreenWindow();                        }                      }                      return;                  }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,ChangeChannelNr,The following statement contains a magic number: int channelDistance = 99999;
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetChannels,The following statement contains a magic number: tvGuidChannel.channel = new Channel(false' true' 0' DateTime.MinValue' false'                                                DateTime.MinValue' 0' true' ""' GUILocalizeStrings.Get(911)' 10000);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetChannels,The following statement contains a magic number: tvGuidChannel.channel = new Channel(false' true' 0' DateTime.MinValue' false'                                                DateTime.MinValue' 0' true' ""' GUILocalizeStrings.Get(911)' 10000);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetChannels,The following statement contains a magic number: i < 10
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,UpdateVerticalScrollbar,The following statement contains a magic number: float percentage = (current / total) * 100.0f;
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,UpdateVerticalScrollbar,The following statement contains a magic number: percentage = 100;
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,UpdateVerticalScrollbar,The following statement contains a magic number: percentage > 100
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,UpdateHorizontalScrollbar,The following statement contains a magic number: float percentage = (float)_viewingTime.Hour * 60 + _viewingTime.Minute +            (float)_timePerBlock * ((float)_viewingTime.Hour / 24.0f);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,UpdateHorizontalScrollbar,The following statement contains a magic number: float percentage = (float)_viewingTime.Hour * 60 + _viewingTime.Minute +            (float)_timePerBlock * ((float)_viewingTime.Hour / 24.0f);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,UpdateHorizontalScrollbar,The following statement contains a magic number: percentage /= (24.0f * 60.0f);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,UpdateHorizontalScrollbar,The following statement contains a magic number: percentage /= (24.0f * 60.0f);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,UpdateHorizontalScrollbar,The following statement contains a magic number: percentage *= 100.0f;
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,UpdateHorizontalScrollbar,The following statement contains a magic number: percentage = 100;
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,UpdateHorizontalScrollbar,The following statement contains a magic number: percentage > 100
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,CalcDays,The following statement contains a magic number: iDay += (new DateTime(DateTime.Now.Year' 12' 31)).DayOfYear;
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,CalcDays,The following statement contains a magic number: iDay += (new DateTime(DateTime.Now.Year' 12' 31)).DayOfYear;
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetDuration,The following statement contains a magic number: switch (progDuration.Hours)        {          case 0:            duration = progDuration.Minutes + space + GUILocalizeStrings.Get(3004);            break;          case 1:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001);            }            break;          default:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 0)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3002);            }            break;        }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetDuration,The following statement contains a magic number: switch (progDuration.Hours)        {          case 0:            duration = progDuration.Minutes + space + GUILocalizeStrings.Get(3004);            break;          case 1:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001);            }            break;          default:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 0)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3002);            }            break;        }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetDuration,The following statement contains a magic number: switch (progDuration.Hours)        {          case 0:            duration = progDuration.Minutes + space + GUILocalizeStrings.Get(3004);            break;          case 1:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001);            }            break;          default:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 0)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3002);            }            break;        }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetDuration,The following statement contains a magic number: switch (progDuration.Hours)        {          case 0:            duration = progDuration.Minutes + space + GUILocalizeStrings.Get(3004);            break;          case 1:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001);            }            break;          default:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 0)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3002);            }            break;        }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetDuration,The following statement contains a magic number: switch (progDuration.Hours)        {          case 0:            duration = progDuration.Minutes + space + GUILocalizeStrings.Get(3004);            break;          case 1:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001);            }            break;          default:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 0)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3002);            }            break;        }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetDuration,The following statement contains a magic number: switch (progDuration.Hours)        {          case 0:            duration = progDuration.Minutes + space + GUILocalizeStrings.Get(3004);            break;          case 1:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001);            }            break;          default:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 0)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3002);            }            break;        }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetDuration,The following statement contains a magic number: switch (progDuration.Hours)        {          case 0:            duration = progDuration.Minutes + space + GUILocalizeStrings.Get(3004);            break;          case 1:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001);            }            break;          default:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 0)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3002);            }            break;        }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetDuration,The following statement contains a magic number: switch (progDuration.Hours)        {          case 0:            duration = progDuration.Minutes + space + GUILocalizeStrings.Get(3004);            break;          case 1:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001);            }            break;          default:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 0)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3002);            }            break;        }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetDuration,The following statement contains a magic number: switch (progDuration.Hours)        {          case 0:            duration = progDuration.Minutes + space + GUILocalizeStrings.Get(3004);            break;          case 1:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001);            }            break;          default:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 0)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3002);            }            break;        }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetDurationAsMinutes,The following statement contains a magic number: return progDuration.TotalMinutes + " " + GUILocalizeStrings.Get(2998);
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,setGuideHeadingVisibility,The following statement contains a magic number: ((GUILabelControl)control).Label == GUILocalizeStrings.Get(4)
Magic Number,TvPlugin,RecordedBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RecordedBase.cs,GetSpokenViewDate,The following statement contains a magic number: int daysToStartOfLastWeek = daysToStartOfWeek + 7;
Magic Number,TvPlugin,RecordedBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RecordedBase.cs,GetSpokenViewDate,The following statement contains a magic number: return GUILocalizeStrings.Get(6095);
Magic Number,TvPlugin,TvTeletextBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvTeletextBase.cs,InitializeWindow,The following statement contains a magic number: _renderer.PageSelectText = Convert.ToString(currentPageNumber' 16);
Magic Number,TvPlugin,TvTeletextBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvTeletextBase.cs,SubpageUp,The following statement contains a magic number: ((currentSubPageNumber + 1) & 0x0F) > 9
Magic Number,TvPlugin,TvTeletextBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvTeletextBase.cs,SubpageDown,The following statement contains a magic number: ((currentSubPageNumber + 1) & 0x0F) > 9
Magic Number,TvPlugin,TvTeletextBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvTeletextBase.cs,PageUp,The following statement contains a magic number: (currentPageNumber & 0x0F) > 9
Magic Number,TvPlugin,TvTeletextBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvTeletextBase.cs,PageUp,The following statement contains a magic number: currentPageNumber += 16;
Magic Number,TvPlugin,TvTeletextBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvTeletextBase.cs,PageUp,The following statement contains a magic number: _renderer.PageSelectText = Convert.ToString(currentPageNumber' 16);
Magic Number,TvPlugin,TvTeletextBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvTeletextBase.cs,PageDown,The following statement contains a magic number: currentPageNumber -= 16;
Magic Number,TvPlugin,TvTeletextBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvTeletextBase.cs,PageDown,The following statement contains a magic number: (currentPageNumber & 0x0F) > 9
Magic Number,TvPlugin,TvTeletextBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvTeletextBase.cs,PageDown,The following statement contains a magic number: _renderer.PageSelectText = Convert.ToString(currentPageNumber' 16);
Magic Number,TvPlugin,TvTeletextBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvTeletextBase.cs,UpdateInputLine,The following statement contains a magic number: currentPageNumber = Convert.ToInt16(inputLine' 16);
Magic Number,TvPlugin,TvTeletextBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvTeletextBase.cs,UpdateInputLine,The following statement contains a magic number: inputLine.Length == 3
Magic Number,TvPlugin,TvTeletextBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvTeletextBase.cs,showNewPage,The following statement contains a magic number: _renderer.PageSelectText = Convert.ToString(currentPageNumber' 16);
Magic Number,TvPlugin,TvTeletextBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvTeletextBase.cs,Process,The following statement contains a magic number: ts.TotalMilliseconds < 1000
Magic Number,TvPlugin,TvTeletextBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvTeletextBase.cs,Process,The following statement contains a magic number: ((currentSubPageNumber + 1) & 0x0F) > 9
Magic Number,TvPlugin,TvTeletextBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvTeletextBase.cs,GetNewPage,The following statement contains a magic number: _renderer.SubPageSelectText = Convert.ToString(currentSubPageNumber + 1' 16);
Magic Number,TvPlugin,TvTeletextBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvTeletextBase.cs,Decimal,The following statement contains a magic number: return ((bcd >> 4) * 10) + bcd % 16;
Magic Number,TvPlugin,TvTeletextBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvTeletextBase.cs,Decimal,The following statement contains a magic number: return ((bcd >> 4) * 10) + bcd % 16;
Magic Number,TvPlugin,TvTeletextBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvTeletextBase.cs,Decimal,The following statement contains a magic number: return ((bcd >> 4) * 10) + bcd % 16;
Magic Number,TvPlugin,TvTeletextBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvTeletextBase.cs,BCD,The following statement contains a magic number: return ((dec / 10) << 4) + (dec % 10);
Magic Number,TvPlugin,TvTeletextBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvTeletextBase.cs,BCD,The following statement contains a magic number: return ((dec / 10) << 4) + (dec % 10);
Magic Number,TvPlugin,TvTeletextBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvTeletextBase.cs,BCD,The following statement contains a magic number: return ((dec / 10) << 4) + (dec % 10);
Magic Number,TvPlugin,TvTeletextBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvTeletextBase.cs,LoadSettings,The following statement contains a magic number: _percentageOfMaximumHeight = xmlreader.GetValueAsInt("mytv"' "teletextMaxFontSize"' 100);
Magic Number,TvPlugin,TVConflictDialog,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVConflictDialog.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_CLICKED:            int iControl = message.SenderControlId;            if ((int)Controls.BUTTON_NEW_REC == iControl)            {              SelectedLabel = 0;              PageDestroy();            }            else if ((int)Controls.BUTTON_CONFLICT_REC == iControl)            {              SelectedLabel = 1;              PageDestroy();            }            else if ((int)Controls.BUTTON_KEEP_CONFLICT == iControl)            {              SelectedLabel = 2;              PageDestroy();            }            else if ((int)Controls.BUTTON_CONFLICT_EPISODE == iControl)            {              SelectedLabel = 3;              PageDestroy();            }            break;        }
Magic Number,TvPlugin,TVConflictDialog,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVConflictDialog.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_CLICKED:            int iControl = message.SenderControlId;            if ((int)Controls.BUTTON_NEW_REC == iControl)            {              SelectedLabel = 0;              PageDestroy();            }            else if ((int)Controls.BUTTON_CONFLICT_REC == iControl)            {              SelectedLabel = 1;              PageDestroy();            }            else if ((int)Controls.BUTTON_KEEP_CONFLICT == iControl)            {              SelectedLabel = 2;              PageDestroy();            }            else if ((int)Controls.BUTTON_CONFLICT_EPISODE == iControl)            {              SelectedLabel = 3;              PageDestroy();            }            break;        }
Magic Number,TvPlugin,GUITVConflicts,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVConflicts.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)          {            case (int)ScheduleRecordingType.Once:              item.Label2 = TVUtil.GetRecordingDateStringFull(rec);              break;            case (int)ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekly:              string day;              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                  case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                  case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                  case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                  case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                  case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                  case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                  default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case (int)ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});              break;            case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,GUITVConflicts,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVConflicts.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)          {            case (int)ScheduleRecordingType.Once:              item.Label2 = TVUtil.GetRecordingDateStringFull(rec);              break;            case (int)ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekly:              string day;              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                  case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                  case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                  case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                  case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                  case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                  case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                  default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case (int)ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});              break;            case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,GUITVConflicts,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVConflicts.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)          {            case (int)ScheduleRecordingType.Once:              item.Label2 = TVUtil.GetRecordingDateStringFull(rec);              break;            case (int)ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekly:              string day;              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                  case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                  case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                  case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                  case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                  case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                  case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                  default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case (int)ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});              break;            case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,GUITVConflicts,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVConflicts.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)          {            case (int)ScheduleRecordingType.Once:              item.Label2 = TVUtil.GetRecordingDateStringFull(rec);              break;            case (int)ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekly:              string day;              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                  case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                  case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                  case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                  case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                  case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                  case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                  default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case (int)ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});              break;            case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,GUITVConflicts,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVConflicts.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)          {            case (int)ScheduleRecordingType.Once:              item.Label2 = TVUtil.GetRecordingDateStringFull(rec);              break;            case (int)ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekly:              string day;              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                  case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                  case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                  case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                  case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                  case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                  case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                  default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case (int)ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});              break;            case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,GUITVConflicts,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVConflicts.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)          {            case (int)ScheduleRecordingType.Once:              item.Label2 = TVUtil.GetRecordingDateStringFull(rec);              break;            case (int)ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekly:              string day;              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                  case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                  case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                  case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                  case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                  case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                  case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                  default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case (int)ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});              break;            case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,GUITVConflicts,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVConflicts.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)          {            case (int)ScheduleRecordingType.Once:              item.Label2 = TVUtil.GetRecordingDateStringFull(rec);              break;            case (int)ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekly:              string day;              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                  case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                  case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                  case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                  case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                  case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                  case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                  default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case (int)ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});              break;            case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,GUITVConflicts,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVConflicts.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)          {            case (int)ScheduleRecordingType.Once:              item.Label2 = TVUtil.GetRecordingDateStringFull(rec);              break;            case (int)ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekly:              string day;              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                  case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                  case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                  case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                  case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                  case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                  case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                  default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case (int)ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});              break;            case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,GUITVConflicts,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVConflicts.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)          {            case (int)ScheduleRecordingType.Once:              item.Label2 = TVUtil.GetRecordingDateStringFull(rec);              break;            case (int)ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekly:              string day;              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                  case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                  case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                  case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                  case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                  case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                  case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                  default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case (int)ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});              break;            case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,GUITVConflicts,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVConflicts.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)          {            case (int)ScheduleRecordingType.Once:              item.Label2 = TVUtil.GetRecordingDateStringFull(rec);              break;            case (int)ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekly:              string day;              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                  case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                  case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                  case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                  case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                  case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                  case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                  default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case (int)ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});              break;            case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,GUITVConflicts,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVConflicts.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)          {            case (int)ScheduleRecordingType.Once:              item.Label2 = TVUtil.GetRecordingDateStringFull(rec);              break;            case (int)ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekly:              string day;              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                  case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                  case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                  case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                  case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                  case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                  case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                  default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case (int)ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});              break;            case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,GUITVConflicts,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVConflicts.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)          {            case (int)ScheduleRecordingType.Once:              item.Label2 = TVUtil.GetRecordingDateStringFull(rec);              break;            case (int)ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekly:              string day;              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                  case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                  case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                  case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                  case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                  case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                  case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                  default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case (int)ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});              break;            case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,GUITVConflicts,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVConflicts.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)          {            case (int)ScheduleRecordingType.Once:              item.Label2 = TVUtil.GetRecordingDateStringFull(rec);              break;            case (int)ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekly:              string day;              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                  case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                  case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                  case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                  case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                  case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                  case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                  default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case (int)ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});              break;            case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,GUITVConflicts,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVConflicts.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)          {            case (int)ScheduleRecordingType.Once:              item.Label2 = TVUtil.GetRecordingDateStringFull(rec);              break;            case (int)ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekly:              string day;              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                  case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                  case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                  case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                  case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                  case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                  case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                  default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case (int)ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});              break;            case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,GUITVConflicts,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVConflicts.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)          {            case (int)ScheduleRecordingType.Once:              item.Label2 = TVUtil.GetRecordingDateStringFull(rec);              break;            case (int)ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekly:              string day;              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                  case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                  case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                  case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                  case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                  case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                  case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                  default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case (int)ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});              break;            case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,GUITVConflicts,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVConflicts.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)          {            case (int)ScheduleRecordingType.Once:              item.Label2 = TVUtil.GetRecordingDateStringFull(rec);              break;            case (int)ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekly:              string day;              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                  case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                  case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                  case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                  case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                  case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                  case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                  default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case (int)ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});              break;            case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,GUITVConflicts,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVConflicts.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)          {            case (int)ScheduleRecordingType.Once:              item.Label2 = TVUtil.GetRecordingDateStringFull(rec);              break;            case (int)ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekly:              string day;              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                  case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                  case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                  case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                  case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                  case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                  case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                  default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case (int)ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});              break;            case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,GUITVConflicts,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVConflicts.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)          {            case (int)ScheduleRecordingType.Once:              item.Label2 = TVUtil.GetRecordingDateStringFull(rec);              break;            case (int)ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekly:              string day;              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                  case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                  case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                  case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                  case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                  case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                  case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                  default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case (int)ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});              break;            case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,GUITVConflicts,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVConflicts.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)          {            case (int)ScheduleRecordingType.Once:              item.Label2 = TVUtil.GetRecordingDateStringFull(rec);              break;            case (int)ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekly:              string day;              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                  case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                  case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                  case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                  case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                  case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                  case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                  default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case (int)ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});              break;            case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,GUITVConflicts,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVConflicts.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)          {            case (int)ScheduleRecordingType.Once:              item.Label2 = TVUtil.GetRecordingDateStringFull(rec);              break;            case (int)ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekly:              string day;              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                  case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                  case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                  case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                  case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                  case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                  case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                  default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case (int)ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});              break;            case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,GUITVConflicts,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVConflicts.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)          {            case (int)ScheduleRecordingType.Once:              item.Label2 = TVUtil.GetRecordingDateStringFull(rec);              break;            case (int)ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case (int)ScheduleRecordingType.Weekly:              string day;              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                  case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                  case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                  case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                  case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                  case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                  case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                  default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case (int)ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});              break;            case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,GUITVConflicts,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVConflicts.cs,OnClick,The following statement contains a magic number: dlgYesNo.SetHeading(GUILocalizeStrings.Get(653));
Magic Number,TvPlugin,GUITVConflicts,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVConflicts.cs,OnClick,The following statement contains a magic number: dlgYesNo.SetLine(2' schedule.ProgramName);
Magic Number,TvPlugin,GUITVConflicts,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVConflicts.cs,OnClick,The following statement contains a magic number: dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732));
Magic Number,TvPlugin,GUITVConflicts,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVConflicts.cs,OnClick,The following statement contains a magic number: dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732));
Magic Number,TvPlugin,TvCropSettings,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvCropSettings.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              // fetch settings for the current capture card              _cropSettings = TvCropManager.CropSettings;              GUILabelControl cardLabel = GetControl((int)Controls.CONTROL_CARD_LABEL) as GUILabelControl;              cardLabel.Visible = false;                foreach (int iCtl in Enum.GetValues(typeof (Controls)))              {                if (GetControl(iCtl) is GUISpinControl)                {                  GUISpinControl cntl = (GUISpinControl)GetControl(iCtl);                  cntl.ShowRange = false;                }              }              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_CROP_TOP);              for (int i = 0; i <= 200; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_CROP_TOP' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_CROP_TOP' _cropSettings.Top);              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_CROP_BOTTOM);              for (int i = 0; i <= 200; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_CROP_BOTTOM' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_CROP_BOTTOM' _cropSettings.Bottom);              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_CROP_LEFT);              for (int i = 0; i <= 200; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_CROP_LEFT' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_CROP_LEFT' _cropSettings.Left);              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_CROP_RIGHT);              for (int i = 0; i <= 200; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_CROP_RIGHT' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_CROP_RIGHT' _cropSettings.Right);                break;            }          case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;              if (iControl == (int)Controls.CONTROL_EXIT)              {                Close();              }              else if (iControl == (int)Controls.CONTROL_CROP_TOP)              {                // do not use message.Label' because it's empty for "page up/down"' causing exceptions                _cropSettings.Top = (GetControl(iControl) as GUISpinControl).Value;              }              else if (iControl == (int)Controls.CONTROL_CROP_BOTTOM)              {                _cropSettings.Bottom = (GetControl(iControl) as GUISpinControl).Value;              }              else if (iControl == (int)Controls.CONTROL_CROP_LEFT)              {                _cropSettings.Left = (GetControl(iControl) as GUISpinControl).Value;              }              else if (iControl == (int)Controls.CONTROL_CROP_RIGHT)              {                _cropSettings.Right = (GetControl(iControl) as GUISpinControl).Value;              }                // ativate & save settings for the current capture card              TvCropManager.CropSettings = _cropSettings;                break;            }        }
Magic Number,TvPlugin,TvCropSettings,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvCropSettings.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              // fetch settings for the current capture card              _cropSettings = TvCropManager.CropSettings;              GUILabelControl cardLabel = GetControl((int)Controls.CONTROL_CARD_LABEL) as GUILabelControl;              cardLabel.Visible = false;                foreach (int iCtl in Enum.GetValues(typeof (Controls)))              {                if (GetControl(iCtl) is GUISpinControl)                {                  GUISpinControl cntl = (GUISpinControl)GetControl(iCtl);                  cntl.ShowRange = false;                }              }              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_CROP_TOP);              for (int i = 0; i <= 200; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_CROP_TOP' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_CROP_TOP' _cropSettings.Top);              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_CROP_BOTTOM);              for (int i = 0; i <= 200; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_CROP_BOTTOM' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_CROP_BOTTOM' _cropSettings.Bottom);              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_CROP_LEFT);              for (int i = 0; i <= 200; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_CROP_LEFT' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_CROP_LEFT' _cropSettings.Left);              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_CROP_RIGHT);              for (int i = 0; i <= 200; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_CROP_RIGHT' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_CROP_RIGHT' _cropSettings.Right);                break;            }          case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;              if (iControl == (int)Controls.CONTROL_EXIT)              {                Close();              }              else if (iControl == (int)Controls.CONTROL_CROP_TOP)              {                // do not use message.Label' because it's empty for "page up/down"' causing exceptions                _cropSettings.Top = (GetControl(iControl) as GUISpinControl).Value;              }              else if (iControl == (int)Controls.CONTROL_CROP_BOTTOM)              {                _cropSettings.Bottom = (GetControl(iControl) as GUISpinControl).Value;              }              else if (iControl == (int)Controls.CONTROL_CROP_LEFT)              {                _cropSettings.Left = (GetControl(iControl) as GUISpinControl).Value;              }              else if (iControl == (int)Controls.CONTROL_CROP_RIGHT)              {                _cropSettings.Right = (GetControl(iControl) as GUISpinControl).Value;              }                // ativate & save settings for the current capture card              TvCropManager.CropSettings = _cropSettings;                break;            }        }
Magic Number,TvPlugin,TvCropSettings,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvCropSettings.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              // fetch settings for the current capture card              _cropSettings = TvCropManager.CropSettings;              GUILabelControl cardLabel = GetControl((int)Controls.CONTROL_CARD_LABEL) as GUILabelControl;              cardLabel.Visible = false;                foreach (int iCtl in Enum.GetValues(typeof (Controls)))              {                if (GetControl(iCtl) is GUISpinControl)                {                  GUISpinControl cntl = (GUISpinControl)GetControl(iCtl);                  cntl.ShowRange = false;                }              }              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_CROP_TOP);              for (int i = 0; i <= 200; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_CROP_TOP' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_CROP_TOP' _cropSettings.Top);              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_CROP_BOTTOM);              for (int i = 0; i <= 200; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_CROP_BOTTOM' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_CROP_BOTTOM' _cropSettings.Bottom);              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_CROP_LEFT);              for (int i = 0; i <= 200; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_CROP_LEFT' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_CROP_LEFT' _cropSettings.Left);              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_CROP_RIGHT);              for (int i = 0; i <= 200; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_CROP_RIGHT' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_CROP_RIGHT' _cropSettings.Right);                break;            }          case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;              if (iControl == (int)Controls.CONTROL_EXIT)              {                Close();              }              else if (iControl == (int)Controls.CONTROL_CROP_TOP)              {                // do not use message.Label' because it's empty for "page up/down"' causing exceptions                _cropSettings.Top = (GetControl(iControl) as GUISpinControl).Value;              }              else if (iControl == (int)Controls.CONTROL_CROP_BOTTOM)              {                _cropSettings.Bottom = (GetControl(iControl) as GUISpinControl).Value;              }              else if (iControl == (int)Controls.CONTROL_CROP_LEFT)              {                _cropSettings.Left = (GetControl(iControl) as GUISpinControl).Value;              }              else if (iControl == (int)Controls.CONTROL_CROP_RIGHT)              {                _cropSettings.Right = (GetControl(iControl) as GUISpinControl).Value;              }                // ativate & save settings for the current capture card              TvCropManager.CropSettings = _cropSettings;                break;            }        }
Magic Number,TvPlugin,TvCropSettings,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvCropSettings.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              // fetch settings for the current capture card              _cropSettings = TvCropManager.CropSettings;              GUILabelControl cardLabel = GetControl((int)Controls.CONTROL_CARD_LABEL) as GUILabelControl;              cardLabel.Visible = false;                foreach (int iCtl in Enum.GetValues(typeof (Controls)))              {                if (GetControl(iCtl) is GUISpinControl)                {                  GUISpinControl cntl = (GUISpinControl)GetControl(iCtl);                  cntl.ShowRange = false;                }              }              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_CROP_TOP);              for (int i = 0; i <= 200; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_CROP_TOP' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_CROP_TOP' _cropSettings.Top);              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_CROP_BOTTOM);              for (int i = 0; i <= 200; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_CROP_BOTTOM' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_CROP_BOTTOM' _cropSettings.Bottom);              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_CROP_LEFT);              for (int i = 0; i <= 200; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_CROP_LEFT' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_CROP_LEFT' _cropSettings.Left);              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_CROP_RIGHT);              for (int i = 0; i <= 200; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_CROP_RIGHT' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_CROP_RIGHT' _cropSettings.Right);                break;            }          case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;              if (iControl == (int)Controls.CONTROL_EXIT)              {                Close();              }              else if (iControl == (int)Controls.CONTROL_CROP_TOP)              {                // do not use message.Label' because it's empty for "page up/down"' causing exceptions                _cropSettings.Top = (GetControl(iControl) as GUISpinControl).Value;              }              else if (iControl == (int)Controls.CONTROL_CROP_BOTTOM)              {                _cropSettings.Bottom = (GetControl(iControl) as GUISpinControl).Value;              }              else if (iControl == (int)Controls.CONTROL_CROP_LEFT)              {                _cropSettings.Left = (GetControl(iControl) as GUISpinControl).Value;              }              else if (iControl == (int)Controls.CONTROL_CROP_RIGHT)              {                _cropSettings.Right = (GetControl(iControl) as GUISpinControl).Value;              }                // ativate & save settings for the current capture card              TvCropManager.CropSettings = _cropSettings;                break;            }        }
Magic Number,TvPlugin,TvCropSettings,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvCropSettings.cs,DoModal,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,Init,The following statement contains a magic number: _immediateSeekValue = xmlreader.GetValueAsInt("movieplayer"' "immediateskipstepsize"' 10);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,LoadSettings,The following statement contains a magic number: _timeOsdOnscreen = 1000 * xmlreader.GetValueAsInt("movieplayer"' "osdtimeout"' 5);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,LoadSettings,The following statement contains a magic number: _timeOsdOnscreen = 1000 * xmlreader.GetValueAsInt("movieplayer"' "osdtimeout"' 5);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,LoadSettings,The following statement contains a magic number: _zapKeyTimeout = 1000 * xmlreader.GetValueAsInt("movieplayer"' "zapKeyTimeout"' 1);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,LoadSettings,The following statement contains a magic number: _zapTimeOutValue = 1000 * xmlreader.GetValueAsInt("movieplayer"' "zaptimeout"' 5);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,LoadSettings,The following statement contains a magic number: _zapTimeOutValue = 1000 * xmlreader.GetValueAsInt("movieplayer"' "zaptimeout"' 5);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,LoadSettings,The following statement contains a magic number: _channelNumberMaxLength = xmlreader.GetValueAsInt("mytv"' "channelnumbermaxlength"' 3);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ResetAllControls,The following statement contains a magic number: dwPosY < (int)100
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_DOUBLECLICK:          case Action.ActionType.ACTION_SELECT_ITEM:            {              if (!g_Player.IsTVRecording)              {                if (_autoZapMode)                {                  StopAutoZap();                }                else if (_zapOsdVisible)                {                  TVHome.Navigator.ZapNow();                }                else                {                  ShowMiniEpg();                  // LastChannel has been moved to "0"                  //if (!GUIWindowManager.IsRouted)                  //{                  //  GUITVHome.OnLastViewedChannel();                  //}                }              }            }            break;            case Action.ActionType.ACTION_SHOW_INFO:          case Action.ActionType.ACTION_SHOW_CURRENT_TV_INFO:            {              if (action.fAmount1 != 0)              {                _zapTimeOutTimer = DateTime.MaxValue;                _zapTimeOutTimer = DateTime.Now;              }              else              {                _zapTimeOutTimer = DateTime.Now;              }                if (!_zapOsdVisible && !g_Player.IsTVRecording)              {                ShowZapOSD(_gotTvErrorMessage);                _gotTvErrorMessage = null;              }              else              {                _zapWindow.UpdateChannelInfo();                _zapTimeOutTimer = DateTime.Now;              }            }            break;            case Action.ActionType.ACTION_AUTOCROP:            {              Log.Debug("TvFullScreen.ACTION_AUTOCROP");              _statusVisible = true;              _statusTimeOutTimer = DateTime.Now;                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                              0' 0' null);              IAutoCrop cropper = GUIGraphicsContext.autoCropper;              if (cropper != null)              {                msg.Label = cropper.Crop();                if (msg.Label == null)                {                  msg.Label = "N/A";                }              }              else              {                msg.Label = "N/A";              }                OnMessage(msg);              break;            }            case Action.ActionType.ACTION_TOGGLE_AUTOCROP:            {              Log.Debug("TvFullScreen.ACTION_TOGGLE_AUTOCROP");              _statusVisible = true;              _statusTimeOutTimer = DateTime.Now;              IAutoCrop cropper = GUIGraphicsContext.autoCropper;                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                              0' 0' null);              msg.Label = "N/A";                if (cropper != null)              {                msg.Label = cropper.ToggleMode();              }              OnMessage(msg);              break;            }            case Action.ActionType.ACTION_ASPECT_RATIO:            {              _statusVisible = true;              _statusTimeOutTimer = DateTime.Now;              string status = "";                Geometry.Type arMode = GUIGraphicsContext.ARType;                bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)              {                if (_allowedArModes[i] == arMode)                {                  arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                  foundMode = true;                  break;                }              }              if (!foundMode && _allowedArModes.Count > 0)              {                arMode = _allowedArModes[0];              }                GUIGraphicsContext.ARType = arMode;              status = Utils.GetAspectRatioLocalizedString(arMode);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                              0' 0' null);              msg.Label = status;              OnMessage(msg);            }            break;            case Action.ActionType.ACTION_NEXT_SUBTITLE:            if (g_Player.SubtitleStreams > 0 || g_Player.SupportsCC)            {              _statusVisible = true;              _statusTimeOutTimer = DateTime.Now;                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                              0' 0' null);              g_Player.SwitchToNextSubtitle();              if (g_Player.EnableSubtitle)              {                if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                {                  msg.Label = "CC1 Analog or Digital";                }                else                {                  msg.Label = string.Format("{0} ({1}/{2})"' g_Player.SubtitleLanguage(g_Player.CurrentSubtitleStream)'                                            g_Player.CurrentSubtitleStream + 1' g_Player.SubtitleStreams);                }              }              else              {                msg.Label = GUILocalizeStrings.Get(519); // Subtitles off              }              OnMessage(msg);              Log.Info("MyTV toggle subtitle: switched subtitle to {0}"' msg.Label);            }            else            {              Log.Info("MyTV toggle subtitle: no subtitle streams available!");            }            break;            case Action.ActionType.ACTION_PAGE_UP:            OnPageUp();            break;            case Action.ActionType.ACTION_PAGE_DOWN:            OnPageDown();            break;            case Action.ActionType.ACTION_KEY_PRESSED:            {              if (action.m_key != null)              {                OnKeyCode((char)action.m_key.KeyChar);              }                _messageBoxVisible = false;            }            break;            case Action.ActionType.ACTION_REWIND:            {              if (g_Player.IsTimeShifting || g_Player.IsTVRecording)              {                _isPauseOsdVisible = false;                GUIWindowManager.IsPauseOsdVisible = false;                ScreenStateChanged();                UpdateGUI();              }            }            break;            case Action.ActionType.ACTION_FORWARD:            {              if (g_Player.IsTimeShifting || g_Player.IsTVRecording)              {                _isPauseOsdVisible = false;                GUIWindowManager.IsPauseOsdVisible = false;                ScreenStateChanged();                UpdateGUI();              }            }            break;            case Action.ActionType.ACTION_PREVIOUS_MENU:          case Action.ActionType.ACTION_SHOW_GUI:            Log.Debug("TvFullScreen: show gui");            GUIWindowManager.ShowPreviousWindow();            return;            case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD            {              Log.Debug("TvFullScreen.OSD:ON");              ShowMainOSD();            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:          case Action.ActionType.ACTION_STEP_BACK:            {              if (g_Player.IsTimeShifting || g_Player.IsTVRecording)              {                if (g_Player.Paused)                {                  g_Player.Pause();                  _isPauseOsdVisible = false;                  GUIWindowManager.IsPauseOsdVisible = false;                  ScreenStateChanged();                  UpdateGUI();                }                _stepSeekVisible = true;                _statusTimeOutTimer = DateTime.Now;                g_Player.SeekStep(false);                string strStatus = g_Player.GetStepDescription();                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                (int)Control.LABEL_ROW1' 0' 0' null);                msg.Label = strStatus;                OnMessage(msg);              }            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:          case Action.ActionType.ACTION_STEP_FORWARD:            {              if (g_Player.IsTimeShifting || g_Player.IsTVRecording)              {                if (g_Player.Paused)                {                  g_Player.Pause();                  _isPauseOsdVisible = false;                  GUIWindowManager.IsPauseOsdVisible = false;                  ScreenStateChanged();                  UpdateGUI();                }                _stepSeekVisible = true;                _statusTimeOutTimer = DateTime.Now;                g_Player.SeekStep(true);                string strStatus = g_Player.GetStepDescription();                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                (int)Control.LABEL_ROW1' 0' 0' null);                msg.Label = strStatus;                OnMessage(msg);              }            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:          case Action.ActionType.ACTION_BIG_STEP_BACK:            {              if (g_Player.IsTimeShifting || g_Player.IsTVRecording)              {                if (g_Player.Paused)                {                  g_Player.Pause();                  _isPauseOsdVisible = false;                  GUIWindowManager.IsPauseOsdVisible = false;                  ScreenStateChanged();                  UpdateGUI();                }                _statusVisible = true;                _statusTimeOutTimer = DateTime.Now;                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                  (int)Control.LABEL_ROW1' 0' 0' null);                msg.Label = "";                OnMessage(msg);                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(-_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(-_immediateSeekValue);                }              }            }            break;            case Action.ActionType.ACTION_MOVE_UP:          case Action.ActionType.ACTION_BIG_STEP_FORWARD:            {              if (g_Player.IsTimeShifting || g_Player.IsTVRecording)              {                if (g_Player.Paused)                {                  g_Player.Pause();                  _isPauseOsdVisible = false;                  GUIWindowManager.IsPauseOsdVisible = false;                  ScreenStateChanged();                  UpdateGUI();                }                _statusVisible = true;                _statusTimeOutTimer = DateTime.Now;                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                  (int)Control.LABEL_ROW1' 0' 0' null);                msg.Label = "";                OnMessage(msg);                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(_immediateSeekValue);                }              }            }            break;            case Action.ActionType.ACTION_PAUSE:            {              ScreenStateChanged();              UpdateGUI();              if (g_Player.Paused)              {                if ((GUIGraphicsContext.Vmr9Active && VMR9Util.g_vmr9 != null))                {                  VMR9Util.g_vmr9.SetRepaint();                  VMR9Util.g_vmr9.Repaint(); // repaint vmr9                }                 _osdTimeoutTimer = DateTime.Now;                GUIWindowManager.IsPauseOsdVisible = true;              }              else              {                  GUIWindowManager.IsPauseOsdVisible = false;              }            }            break;            case Action.ActionType.ACTION_PLAY:          case Action.ActionType.ACTION_MUSIC_PLAY:                {                    GUIWindowManager.IsPauseOsdVisible = false;                    break;                }              case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;            case Action.ActionType.ACTION_AUTOZAP:            StartAutoZap();            break;            case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:          case Action.ActionType.ACTION_NEXT_AUDIO:            {              //IAudioStream[] streams = TVHome.Card.AvailableAudioStreams;                if (g_Player.AudioStreams > 1)              {                int newIndex = 0;                int oldIndex = 0;                string audioLang = g_Player.AudioLanguage(oldIndex);                oldIndex = g_Player.CurrentAudioStream;                g_Player.SwitchToNextAudio();                  newIndex = g_Player.CurrentAudioStream;                  if (newIndex + 1 > g_Player.AudioStreams)                {                  newIndex = 0;                }                  Log.Debug("TvFullScreen.Switching from audio stream {0} to {1}"' oldIndex' newIndex);                  // Show OSD Label                _statusVisible = true;                _statusTimeOutTimer = DateTime.Now;                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                (int)Control.LABEL_ROW1' 0' 0' null);                //msg.Label = string.Format("{0}:{1} ({2}/{3})"' streams[newIndex].StreamType' streams[newIndex].Language' newIndex + 1' streams.Length);                msg.Label = string.Format("{0}:{1} ({2}/{3})"' g_Player.AudioType(newIndex)'                                          g_Player.AudioLanguage(newIndex)' newIndex + 1' g_Player.AudioStreams);                  Log.Debug(msg.Label);                OnMessage(msg);              }            }            break;            case Action.ActionType.ACTION_STOP:            if (g_Player.IsTVRecording)            {              g_Player.Stop();            }            if (g_Player.IsTimeShifting && CanStopTimeshifting())            {              g_Player.Stop();            }            break;        }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,CanStopTimeshifting,The following statement contains a magic number: dlgPlayStop.SetHeading(GUILocalizeStrings.Get(605));
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,CanStopTimeshifting,The following statement contains a magic number: dlgPlayStop.SetLine(1' GUILocalizeStrings.Get(2550));
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,CanStopTimeshifting,The following statement contains a magic number: dlgPlayStop.SetLine(2' GUILocalizeStrings.Get(2551));
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,CanStopTimeshifting,The following statement contains a magic number: dlgPlayStop.SetLine(2' GUILocalizeStrings.Get(2551));
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,OnMessage,The following statement contains a magic number: _dlgYesNo.SetHeading(1449);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,OnMessage,The following statement contains a magic number: _dlgYesNo.SetLine(1' 1450);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,OnMessage,The following statement contains a magic number: _dlgYesNo.SetLine(2' prog.Title);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,OnMessage,The following statement contains a magic number: dlgNotify.SetHeading(GUILocalizeStrings.Get(1447));
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,OnMessage,The following statement contains a magic number: dlgNotify.TimeOut = 5;
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.SetHeading(924);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(10104);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(4);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(200042);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1441);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(941);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(492);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(200059);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(462);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(200073);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(11000);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(100748);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(200041);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(265);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(2700);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(882);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(200091);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(368);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(970);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 4: // TVGuide            {              TvNewScheduleSearch.SearchFor = TvNewScheduleSearch.SearchType.KeyWord;              GUIWindowManager.ActivateWindow((int)Window.WINDOW_TVGUIDE);              break;            }            case 10104: // MiniEPG            {              ShowMiniEpg();              break;            }            case 941: // Change aspect ratio            ShowAspectRatioMenu();            break;            case 2700: // Open CI Menu            PrepareCiMenu();            break;            //case 6008: // TvChannel sort          //  SortChannels();          //  break;            case 492: // Show audio language menu            ShowAudioLanguageMenu();            break;            case 200059:            ShowAudioDualMonoModeMenu(dualMonoMode);            break;            case 1441: // Fullscreen teletext            GUIWindowManager.ActivateWindow((int)Window.WINDOW_FULLSCREEN_TELETEXT);            break;            case 970:            // switch back to previous window            _isOsdVisible = false;            GUIWindowManager.IsOsdVisible = false;            GUIGraphicsContext.IsFullScreenVideo = false;            GUIWindowManager.ShowPreviousWindow();            break;            case 11000:            TvCropSettings cropSettings =              (TvCropSettings)GUIWindowManager.GetWindow((int)Window.WINDOW_TV_CROP_SETTINGS);            _isDialogVisible = true;            cropSettings.DoModal(GetID);            _isDialogVisible = false;            break;            case 100748: // Show Program Info            ShowProgramInfo();            break;            case 601: // RecordNow                    case 265: // StopRec.                      TVHome.ManualRecord(TVHome.Navigator.Channel' GetID);            break;            case 200042: // Linked channels            CacheManager.Clear();            linkages = layer.GetLinkagesForChannel(TVHome.Navigator.Channel);            ShowLinkedChannelsMenu(linkages);            break;            case 200041: // Tuning details            GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_TUNING_DETAILS);            break;            case 882: // Quality settings            ShowQualitySettingsMenu();            break;            case 368: // IMDB            OnGetIMDBInfo();            break;            case 200091:            ShowChapterStreamsMenu();            break;            case 462:            ShowSubtitleStreamsMenu();            break;            case 200073:            ShowPostProcessingMenu();            break;        }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 4: // TVGuide            {              TvNewScheduleSearch.SearchFor = TvNewScheduleSearch.SearchType.KeyWord;              GUIWindowManager.ActivateWindow((int)Window.WINDOW_TVGUIDE);              break;            }            case 10104: // MiniEPG            {              ShowMiniEpg();              break;            }            case 941: // Change aspect ratio            ShowAspectRatioMenu();            break;            case 2700: // Open CI Menu            PrepareCiMenu();            break;            //case 6008: // TvChannel sort          //  SortChannels();          //  break;            case 492: // Show audio language menu            ShowAudioLanguageMenu();            break;            case 200059:            ShowAudioDualMonoModeMenu(dualMonoMode);            break;            case 1441: // Fullscreen teletext            GUIWindowManager.ActivateWindow((int)Window.WINDOW_FULLSCREEN_TELETEXT);            break;            case 970:            // switch back to previous window            _isOsdVisible = false;            GUIWindowManager.IsOsdVisible = false;            GUIGraphicsContext.IsFullScreenVideo = false;            GUIWindowManager.ShowPreviousWindow();            break;            case 11000:            TvCropSettings cropSettings =              (TvCropSettings)GUIWindowManager.GetWindow((int)Window.WINDOW_TV_CROP_SETTINGS);            _isDialogVisible = true;            cropSettings.DoModal(GetID);            _isDialogVisible = false;            break;            case 100748: // Show Program Info            ShowProgramInfo();            break;            case 601: // RecordNow                    case 265: // StopRec.                      TVHome.ManualRecord(TVHome.Navigator.Channel' GetID);            break;            case 200042: // Linked channels            CacheManager.Clear();            linkages = layer.GetLinkagesForChannel(TVHome.Navigator.Channel);            ShowLinkedChannelsMenu(linkages);            break;            case 200041: // Tuning details            GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_TUNING_DETAILS);            break;            case 882: // Quality settings            ShowQualitySettingsMenu();            break;            case 368: // IMDB            OnGetIMDBInfo();            break;            case 200091:            ShowChapterStreamsMenu();            break;            case 462:            ShowSubtitleStreamsMenu();            break;            case 200073:            ShowPostProcessingMenu();            break;        }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 4: // TVGuide            {              TvNewScheduleSearch.SearchFor = TvNewScheduleSearch.SearchType.KeyWord;              GUIWindowManager.ActivateWindow((int)Window.WINDOW_TVGUIDE);              break;            }            case 10104: // MiniEPG            {              ShowMiniEpg();              break;            }            case 941: // Change aspect ratio            ShowAspectRatioMenu();            break;            case 2700: // Open CI Menu            PrepareCiMenu();            break;            //case 6008: // TvChannel sort          //  SortChannels();          //  break;            case 492: // Show audio language menu            ShowAudioLanguageMenu();            break;            case 200059:            ShowAudioDualMonoModeMenu(dualMonoMode);            break;            case 1441: // Fullscreen teletext            GUIWindowManager.ActivateWindow((int)Window.WINDOW_FULLSCREEN_TELETEXT);            break;            case 970:            // switch back to previous window            _isOsdVisible = false;            GUIWindowManager.IsOsdVisible = false;            GUIGraphicsContext.IsFullScreenVideo = false;            GUIWindowManager.ShowPreviousWindow();            break;            case 11000:            TvCropSettings cropSettings =              (TvCropSettings)GUIWindowManager.GetWindow((int)Window.WINDOW_TV_CROP_SETTINGS);            _isDialogVisible = true;            cropSettings.DoModal(GetID);            _isDialogVisible = false;            break;            case 100748: // Show Program Info            ShowProgramInfo();            break;            case 601: // RecordNow                    case 265: // StopRec.                      TVHome.ManualRecord(TVHome.Navigator.Channel' GetID);            break;            case 200042: // Linked channels            CacheManager.Clear();            linkages = layer.GetLinkagesForChannel(TVHome.Navigator.Channel);            ShowLinkedChannelsMenu(linkages);            break;            case 200041: // Tuning details            GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_TUNING_DETAILS);            break;            case 882: // Quality settings            ShowQualitySettingsMenu();            break;            case 368: // IMDB            OnGetIMDBInfo();            break;            case 200091:            ShowChapterStreamsMenu();            break;            case 462:            ShowSubtitleStreamsMenu();            break;            case 200073:            ShowPostProcessingMenu();            break;        }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 4: // TVGuide            {              TvNewScheduleSearch.SearchFor = TvNewScheduleSearch.SearchType.KeyWord;              GUIWindowManager.ActivateWindow((int)Window.WINDOW_TVGUIDE);              break;            }            case 10104: // MiniEPG            {              ShowMiniEpg();              break;            }            case 941: // Change aspect ratio            ShowAspectRatioMenu();            break;            case 2700: // Open CI Menu            PrepareCiMenu();            break;            //case 6008: // TvChannel sort          //  SortChannels();          //  break;            case 492: // Show audio language menu            ShowAudioLanguageMenu();            break;            case 200059:            ShowAudioDualMonoModeMenu(dualMonoMode);            break;            case 1441: // Fullscreen teletext            GUIWindowManager.ActivateWindow((int)Window.WINDOW_FULLSCREEN_TELETEXT);            break;            case 970:            // switch back to previous window            _isOsdVisible = false;            GUIWindowManager.IsOsdVisible = false;            GUIGraphicsContext.IsFullScreenVideo = false;            GUIWindowManager.ShowPreviousWindow();            break;            case 11000:            TvCropSettings cropSettings =              (TvCropSettings)GUIWindowManager.GetWindow((int)Window.WINDOW_TV_CROP_SETTINGS);            _isDialogVisible = true;            cropSettings.DoModal(GetID);            _isDialogVisible = false;            break;            case 100748: // Show Program Info            ShowProgramInfo();            break;            case 601: // RecordNow                    case 265: // StopRec.                      TVHome.ManualRecord(TVHome.Navigator.Channel' GetID);            break;            case 200042: // Linked channels            CacheManager.Clear();            linkages = layer.GetLinkagesForChannel(TVHome.Navigator.Channel);            ShowLinkedChannelsMenu(linkages);            break;            case 200041: // Tuning details            GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_TUNING_DETAILS);            break;            case 882: // Quality settings            ShowQualitySettingsMenu();            break;            case 368: // IMDB            OnGetIMDBInfo();            break;            case 200091:            ShowChapterStreamsMenu();            break;            case 462:            ShowSubtitleStreamsMenu();            break;            case 200073:            ShowPostProcessingMenu();            break;        }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 4: // TVGuide            {              TvNewScheduleSearch.SearchFor = TvNewScheduleSearch.SearchType.KeyWord;              GUIWindowManager.ActivateWindow((int)Window.WINDOW_TVGUIDE);              break;            }            case 10104: // MiniEPG            {              ShowMiniEpg();              break;            }            case 941: // Change aspect ratio            ShowAspectRatioMenu();            break;            case 2700: // Open CI Menu            PrepareCiMenu();            break;            //case 6008: // TvChannel sort          //  SortChannels();          //  break;            case 492: // Show audio language menu            ShowAudioLanguageMenu();            break;            case 200059:            ShowAudioDualMonoModeMenu(dualMonoMode);            break;            case 1441: // Fullscreen teletext            GUIWindowManager.ActivateWindow((int)Window.WINDOW_FULLSCREEN_TELETEXT);            break;            case 970:            // switch back to previous window            _isOsdVisible = false;            GUIWindowManager.IsOsdVisible = false;            GUIGraphicsContext.IsFullScreenVideo = false;            GUIWindowManager.ShowPreviousWindow();            break;            case 11000:            TvCropSettings cropSettings =              (TvCropSettings)GUIWindowManager.GetWindow((int)Window.WINDOW_TV_CROP_SETTINGS);            _isDialogVisible = true;            cropSettings.DoModal(GetID);            _isDialogVisible = false;            break;            case 100748: // Show Program Info            ShowProgramInfo();            break;            case 601: // RecordNow                    case 265: // StopRec.                      TVHome.ManualRecord(TVHome.Navigator.Channel' GetID);            break;            case 200042: // Linked channels            CacheManager.Clear();            linkages = layer.GetLinkagesForChannel(TVHome.Navigator.Channel);            ShowLinkedChannelsMenu(linkages);            break;            case 200041: // Tuning details            GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_TUNING_DETAILS);            break;            case 882: // Quality settings            ShowQualitySettingsMenu();            break;            case 368: // IMDB            OnGetIMDBInfo();            break;            case 200091:            ShowChapterStreamsMenu();            break;            case 462:            ShowSubtitleStreamsMenu();            break;            case 200073:            ShowPostProcessingMenu();            break;        }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 4: // TVGuide            {              TvNewScheduleSearch.SearchFor = TvNewScheduleSearch.SearchType.KeyWord;              GUIWindowManager.ActivateWindow((int)Window.WINDOW_TVGUIDE);              break;            }            case 10104: // MiniEPG            {              ShowMiniEpg();              break;            }            case 941: // Change aspect ratio            ShowAspectRatioMenu();            break;            case 2700: // Open CI Menu            PrepareCiMenu();            break;            //case 6008: // TvChannel sort          //  SortChannels();          //  break;            case 492: // Show audio language menu            ShowAudioLanguageMenu();            break;            case 200059:            ShowAudioDualMonoModeMenu(dualMonoMode);            break;            case 1441: // Fullscreen teletext            GUIWindowManager.ActivateWindow((int)Window.WINDOW_FULLSCREEN_TELETEXT);            break;            case 970:            // switch back to previous window            _isOsdVisible = false;            GUIWindowManager.IsOsdVisible = false;            GUIGraphicsContext.IsFullScreenVideo = false;            GUIWindowManager.ShowPreviousWindow();            break;            case 11000:            TvCropSettings cropSettings =              (TvCropSettings)GUIWindowManager.GetWindow((int)Window.WINDOW_TV_CROP_SETTINGS);            _isDialogVisible = true;            cropSettings.DoModal(GetID);            _isDialogVisible = false;            break;            case 100748: // Show Program Info            ShowProgramInfo();            break;            case 601: // RecordNow                    case 265: // StopRec.                      TVHome.ManualRecord(TVHome.Navigator.Channel' GetID);            break;            case 200042: // Linked channels            CacheManager.Clear();            linkages = layer.GetLinkagesForChannel(TVHome.Navigator.Channel);            ShowLinkedChannelsMenu(linkages);            break;            case 200041: // Tuning details            GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_TUNING_DETAILS);            break;            case 882: // Quality settings            ShowQualitySettingsMenu();            break;            case 368: // IMDB            OnGetIMDBInfo();            break;            case 200091:            ShowChapterStreamsMenu();            break;            case 462:            ShowSubtitleStreamsMenu();            break;            case 200073:            ShowPostProcessingMenu();            break;        }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 4: // TVGuide            {              TvNewScheduleSearch.SearchFor = TvNewScheduleSearch.SearchType.KeyWord;              GUIWindowManager.ActivateWindow((int)Window.WINDOW_TVGUIDE);              break;            }            case 10104: // MiniEPG            {              ShowMiniEpg();              break;            }            case 941: // Change aspect ratio            ShowAspectRatioMenu();            break;            case 2700: // Open CI Menu            PrepareCiMenu();            break;            //case 6008: // TvChannel sort          //  SortChannels();          //  break;            case 492: // Show audio language menu            ShowAudioLanguageMenu();            break;            case 200059:            ShowAudioDualMonoModeMenu(dualMonoMode);            break;            case 1441: // Fullscreen teletext            GUIWindowManager.ActivateWindow((int)Window.WINDOW_FULLSCREEN_TELETEXT);            break;            case 970:            // switch back to previous window            _isOsdVisible = false;            GUIWindowManager.IsOsdVisible = false;            GUIGraphicsContext.IsFullScreenVideo = false;            GUIWindowManager.ShowPreviousWindow();            break;            case 11000:            TvCropSettings cropSettings =              (TvCropSettings)GUIWindowManager.GetWindow((int)Window.WINDOW_TV_CROP_SETTINGS);            _isDialogVisible = true;            cropSettings.DoModal(GetID);            _isDialogVisible = false;            break;            case 100748: // Show Program Info            ShowProgramInfo();            break;            case 601: // RecordNow                    case 265: // StopRec.                      TVHome.ManualRecord(TVHome.Navigator.Channel' GetID);            break;            case 200042: // Linked channels            CacheManager.Clear();            linkages = layer.GetLinkagesForChannel(TVHome.Navigator.Channel);            ShowLinkedChannelsMenu(linkages);            break;            case 200041: // Tuning details            GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_TUNING_DETAILS);            break;            case 882: // Quality settings            ShowQualitySettingsMenu();            break;            case 368: // IMDB            OnGetIMDBInfo();            break;            case 200091:            ShowChapterStreamsMenu();            break;            case 462:            ShowSubtitleStreamsMenu();            break;            case 200073:            ShowPostProcessingMenu();            break;        }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 4: // TVGuide            {              TvNewScheduleSearch.SearchFor = TvNewScheduleSearch.SearchType.KeyWord;              GUIWindowManager.ActivateWindow((int)Window.WINDOW_TVGUIDE);              break;            }            case 10104: // MiniEPG            {              ShowMiniEpg();              break;            }            case 941: // Change aspect ratio            ShowAspectRatioMenu();            break;            case 2700: // Open CI Menu            PrepareCiMenu();            break;            //case 6008: // TvChannel sort          //  SortChannels();          //  break;            case 492: // Show audio language menu            ShowAudioLanguageMenu();            break;            case 200059:            ShowAudioDualMonoModeMenu(dualMonoMode);            break;            case 1441: // Fullscreen teletext            GUIWindowManager.ActivateWindow((int)Window.WINDOW_FULLSCREEN_TELETEXT);            break;            case 970:            // switch back to previous window            _isOsdVisible = false;            GUIWindowManager.IsOsdVisible = false;            GUIGraphicsContext.IsFullScreenVideo = false;            GUIWindowManager.ShowPreviousWindow();            break;            case 11000:            TvCropSettings cropSettings =              (TvCropSettings)GUIWindowManager.GetWindow((int)Window.WINDOW_TV_CROP_SETTINGS);            _isDialogVisible = true;            cropSettings.DoModal(GetID);            _isDialogVisible = false;            break;            case 100748: // Show Program Info            ShowProgramInfo();            break;            case 601: // RecordNow                    case 265: // StopRec.                      TVHome.ManualRecord(TVHome.Navigator.Channel' GetID);            break;            case 200042: // Linked channels            CacheManager.Clear();            linkages = layer.GetLinkagesForChannel(TVHome.Navigator.Channel);            ShowLinkedChannelsMenu(linkages);            break;            case 200041: // Tuning details            GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_TUNING_DETAILS);            break;            case 882: // Quality settings            ShowQualitySettingsMenu();            break;            case 368: // IMDB            OnGetIMDBInfo();            break;            case 200091:            ShowChapterStreamsMenu();            break;            case 462:            ShowSubtitleStreamsMenu();            break;            case 200073:            ShowPostProcessingMenu();            break;        }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 4: // TVGuide            {              TvNewScheduleSearch.SearchFor = TvNewScheduleSearch.SearchType.KeyWord;              GUIWindowManager.ActivateWindow((int)Window.WINDOW_TVGUIDE);              break;            }            case 10104: // MiniEPG            {              ShowMiniEpg();              break;            }            case 941: // Change aspect ratio            ShowAspectRatioMenu();            break;            case 2700: // Open CI Menu            PrepareCiMenu();            break;            //case 6008: // TvChannel sort          //  SortChannels();          //  break;            case 492: // Show audio language menu            ShowAudioLanguageMenu();            break;            case 200059:            ShowAudioDualMonoModeMenu(dualMonoMode);            break;            case 1441: // Fullscreen teletext            GUIWindowManager.ActivateWindow((int)Window.WINDOW_FULLSCREEN_TELETEXT);            break;            case 970:            // switch back to previous window            _isOsdVisible = false;            GUIWindowManager.IsOsdVisible = false;            GUIGraphicsContext.IsFullScreenVideo = false;            GUIWindowManager.ShowPreviousWindow();            break;            case 11000:            TvCropSettings cropSettings =              (TvCropSettings)GUIWindowManager.GetWindow((int)Window.WINDOW_TV_CROP_SETTINGS);            _isDialogVisible = true;            cropSettings.DoModal(GetID);            _isDialogVisible = false;            break;            case 100748: // Show Program Info            ShowProgramInfo();            break;            case 601: // RecordNow                    case 265: // StopRec.                      TVHome.ManualRecord(TVHome.Navigator.Channel' GetID);            break;            case 200042: // Linked channels            CacheManager.Clear();            linkages = layer.GetLinkagesForChannel(TVHome.Navigator.Channel);            ShowLinkedChannelsMenu(linkages);            break;            case 200041: // Tuning details            GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_TUNING_DETAILS);            break;            case 882: // Quality settings            ShowQualitySettingsMenu();            break;            case 368: // IMDB            OnGetIMDBInfo();            break;            case 200091:            ShowChapterStreamsMenu();            break;            case 462:            ShowSubtitleStreamsMenu();            break;            case 200073:            ShowPostProcessingMenu();            break;        }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 4: // TVGuide            {              TvNewScheduleSearch.SearchFor = TvNewScheduleSearch.SearchType.KeyWord;              GUIWindowManager.ActivateWindow((int)Window.WINDOW_TVGUIDE);              break;            }            case 10104: // MiniEPG            {              ShowMiniEpg();              break;            }            case 941: // Change aspect ratio            ShowAspectRatioMenu();            break;            case 2700: // Open CI Menu            PrepareCiMenu();            break;            //case 6008: // TvChannel sort          //  SortChannels();          //  break;            case 492: // Show audio language menu            ShowAudioLanguageMenu();            break;            case 200059:            ShowAudioDualMonoModeMenu(dualMonoMode);            break;            case 1441: // Fullscreen teletext            GUIWindowManager.ActivateWindow((int)Window.WINDOW_FULLSCREEN_TELETEXT);            break;            case 970:            // switch back to previous window            _isOsdVisible = false;            GUIWindowManager.IsOsdVisible = false;            GUIGraphicsContext.IsFullScreenVideo = false;            GUIWindowManager.ShowPreviousWindow();            break;            case 11000:            TvCropSettings cropSettings =              (TvCropSettings)GUIWindowManager.GetWindow((int)Window.WINDOW_TV_CROP_SETTINGS);            _isDialogVisible = true;            cropSettings.DoModal(GetID);            _isDialogVisible = false;            break;            case 100748: // Show Program Info            ShowProgramInfo();            break;            case 601: // RecordNow                    case 265: // StopRec.                      TVHome.ManualRecord(TVHome.Navigator.Channel' GetID);            break;            case 200042: // Linked channels            CacheManager.Clear();            linkages = layer.GetLinkagesForChannel(TVHome.Navigator.Channel);            ShowLinkedChannelsMenu(linkages);            break;            case 200041: // Tuning details            GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_TUNING_DETAILS);            break;            case 882: // Quality settings            ShowQualitySettingsMenu();            break;            case 368: // IMDB            OnGetIMDBInfo();            break;            case 200091:            ShowChapterStreamsMenu();            break;            case 462:            ShowSubtitleStreamsMenu();            break;            case 200073:            ShowPostProcessingMenu();            break;        }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 4: // TVGuide            {              TvNewScheduleSearch.SearchFor = TvNewScheduleSearch.SearchType.KeyWord;              GUIWindowManager.ActivateWindow((int)Window.WINDOW_TVGUIDE);              break;            }            case 10104: // MiniEPG            {              ShowMiniEpg();              break;            }            case 941: // Change aspect ratio            ShowAspectRatioMenu();            break;            case 2700: // Open CI Menu            PrepareCiMenu();            break;            //case 6008: // TvChannel sort          //  SortChannels();          //  break;            case 492: // Show audio language menu            ShowAudioLanguageMenu();            break;            case 200059:            ShowAudioDualMonoModeMenu(dualMonoMode);            break;            case 1441: // Fullscreen teletext            GUIWindowManager.ActivateWindow((int)Window.WINDOW_FULLSCREEN_TELETEXT);            break;            case 970:            // switch back to previous window            _isOsdVisible = false;            GUIWindowManager.IsOsdVisible = false;            GUIGraphicsContext.IsFullScreenVideo = false;            GUIWindowManager.ShowPreviousWindow();            break;            case 11000:            TvCropSettings cropSettings =              (TvCropSettings)GUIWindowManager.GetWindow((int)Window.WINDOW_TV_CROP_SETTINGS);            _isDialogVisible = true;            cropSettings.DoModal(GetID);            _isDialogVisible = false;            break;            case 100748: // Show Program Info            ShowProgramInfo();            break;            case 601: // RecordNow                    case 265: // StopRec.                      TVHome.ManualRecord(TVHome.Navigator.Channel' GetID);            break;            case 200042: // Linked channels            CacheManager.Clear();            linkages = layer.GetLinkagesForChannel(TVHome.Navigator.Channel);            ShowLinkedChannelsMenu(linkages);            break;            case 200041: // Tuning details            GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_TUNING_DETAILS);            break;            case 882: // Quality settings            ShowQualitySettingsMenu();            break;            case 368: // IMDB            OnGetIMDBInfo();            break;            case 200091:            ShowChapterStreamsMenu();            break;            case 462:            ShowSubtitleStreamsMenu();            break;            case 200073:            ShowPostProcessingMenu();            break;        }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 4: // TVGuide            {              TvNewScheduleSearch.SearchFor = TvNewScheduleSearch.SearchType.KeyWord;              GUIWindowManager.ActivateWindow((int)Window.WINDOW_TVGUIDE);              break;            }            case 10104: // MiniEPG            {              ShowMiniEpg();              break;            }            case 941: // Change aspect ratio            ShowAspectRatioMenu();            break;            case 2700: // Open CI Menu            PrepareCiMenu();            break;            //case 6008: // TvChannel sort          //  SortChannels();          //  break;            case 492: // Show audio language menu            ShowAudioLanguageMenu();            break;            case 200059:            ShowAudioDualMonoModeMenu(dualMonoMode);            break;            case 1441: // Fullscreen teletext            GUIWindowManager.ActivateWindow((int)Window.WINDOW_FULLSCREEN_TELETEXT);            break;            case 970:            // switch back to previous window            _isOsdVisible = false;            GUIWindowManager.IsOsdVisible = false;            GUIGraphicsContext.IsFullScreenVideo = false;            GUIWindowManager.ShowPreviousWindow();            break;            case 11000:            TvCropSettings cropSettings =              (TvCropSettings)GUIWindowManager.GetWindow((int)Window.WINDOW_TV_CROP_SETTINGS);            _isDialogVisible = true;            cropSettings.DoModal(GetID);            _isDialogVisible = false;            break;            case 100748: // Show Program Info            ShowProgramInfo();            break;            case 601: // RecordNow                    case 265: // StopRec.                      TVHome.ManualRecord(TVHome.Navigator.Channel' GetID);            break;            case 200042: // Linked channels            CacheManager.Clear();            linkages = layer.GetLinkagesForChannel(TVHome.Navigator.Channel);            ShowLinkedChannelsMenu(linkages);            break;            case 200041: // Tuning details            GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_TUNING_DETAILS);            break;            case 882: // Quality settings            ShowQualitySettingsMenu();            break;            case 368: // IMDB            OnGetIMDBInfo();            break;            case 200091:            ShowChapterStreamsMenu();            break;            case 462:            ShowSubtitleStreamsMenu();            break;            case 200073:            ShowPostProcessingMenu();            break;        }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 4: // TVGuide            {              TvNewScheduleSearch.SearchFor = TvNewScheduleSearch.SearchType.KeyWord;              GUIWindowManager.ActivateWindow((int)Window.WINDOW_TVGUIDE);              break;            }            case 10104: // MiniEPG            {              ShowMiniEpg();              break;            }            case 941: // Change aspect ratio            ShowAspectRatioMenu();            break;            case 2700: // Open CI Menu            PrepareCiMenu();            break;            //case 6008: // TvChannel sort          //  SortChannels();          //  break;            case 492: // Show audio language menu            ShowAudioLanguageMenu();            break;            case 200059:            ShowAudioDualMonoModeMenu(dualMonoMode);            break;            case 1441: // Fullscreen teletext            GUIWindowManager.ActivateWindow((int)Window.WINDOW_FULLSCREEN_TELETEXT);            break;            case 970:            // switch back to previous window            _isOsdVisible = false;            GUIWindowManager.IsOsdVisible = false;            GUIGraphicsContext.IsFullScreenVideo = false;            GUIWindowManager.ShowPreviousWindow();            break;            case 11000:            TvCropSettings cropSettings =              (TvCropSettings)GUIWindowManager.GetWindow((int)Window.WINDOW_TV_CROP_SETTINGS);            _isDialogVisible = true;            cropSettings.DoModal(GetID);            _isDialogVisible = false;            break;            case 100748: // Show Program Info            ShowProgramInfo();            break;            case 601: // RecordNow                    case 265: // StopRec.                      TVHome.ManualRecord(TVHome.Navigator.Channel' GetID);            break;            case 200042: // Linked channels            CacheManager.Clear();            linkages = layer.GetLinkagesForChannel(TVHome.Navigator.Channel);            ShowLinkedChannelsMenu(linkages);            break;            case 200041: // Tuning details            GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_TUNING_DETAILS);            break;            case 882: // Quality settings            ShowQualitySettingsMenu();            break;            case 368: // IMDB            OnGetIMDBInfo();            break;            case 200091:            ShowChapterStreamsMenu();            break;            case 462:            ShowSubtitleStreamsMenu();            break;            case 200073:            ShowPostProcessingMenu();            break;        }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 4: // TVGuide            {              TvNewScheduleSearch.SearchFor = TvNewScheduleSearch.SearchType.KeyWord;              GUIWindowManager.ActivateWindow((int)Window.WINDOW_TVGUIDE);              break;            }            case 10104: // MiniEPG            {              ShowMiniEpg();              break;            }            case 941: // Change aspect ratio            ShowAspectRatioMenu();            break;            case 2700: // Open CI Menu            PrepareCiMenu();            break;            //case 6008: // TvChannel sort          //  SortChannels();          //  break;            case 492: // Show audio language menu            ShowAudioLanguageMenu();            break;            case 200059:            ShowAudioDualMonoModeMenu(dualMonoMode);            break;            case 1441: // Fullscreen teletext            GUIWindowManager.ActivateWindow((int)Window.WINDOW_FULLSCREEN_TELETEXT);            break;            case 970:            // switch back to previous window            _isOsdVisible = false;            GUIWindowManager.IsOsdVisible = false;            GUIGraphicsContext.IsFullScreenVideo = false;            GUIWindowManager.ShowPreviousWindow();            break;            case 11000:            TvCropSettings cropSettings =              (TvCropSettings)GUIWindowManager.GetWindow((int)Window.WINDOW_TV_CROP_SETTINGS);            _isDialogVisible = true;            cropSettings.DoModal(GetID);            _isDialogVisible = false;            break;            case 100748: // Show Program Info            ShowProgramInfo();            break;            case 601: // RecordNow                    case 265: // StopRec.                      TVHome.ManualRecord(TVHome.Navigator.Channel' GetID);            break;            case 200042: // Linked channels            CacheManager.Clear();            linkages = layer.GetLinkagesForChannel(TVHome.Navigator.Channel);            ShowLinkedChannelsMenu(linkages);            break;            case 200041: // Tuning details            GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_TUNING_DETAILS);            break;            case 882: // Quality settings            ShowQualitySettingsMenu();            break;            case 368: // IMDB            OnGetIMDBInfo();            break;            case 200091:            ShowChapterStreamsMenu();            break;            case 462:            ShowSubtitleStreamsMenu();            break;            case 200073:            ShowPostProcessingMenu();            break;        }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 4: // TVGuide            {              TvNewScheduleSearch.SearchFor = TvNewScheduleSearch.SearchType.KeyWord;              GUIWindowManager.ActivateWindow((int)Window.WINDOW_TVGUIDE);              break;            }            case 10104: // MiniEPG            {              ShowMiniEpg();              break;            }            case 941: // Change aspect ratio            ShowAspectRatioMenu();            break;            case 2700: // Open CI Menu            PrepareCiMenu();            break;            //case 6008: // TvChannel sort          //  SortChannels();          //  break;            case 492: // Show audio language menu            ShowAudioLanguageMenu();            break;            case 200059:            ShowAudioDualMonoModeMenu(dualMonoMode);            break;            case 1441: // Fullscreen teletext            GUIWindowManager.ActivateWindow((int)Window.WINDOW_FULLSCREEN_TELETEXT);            break;            case 970:            // switch back to previous window            _isOsdVisible = false;            GUIWindowManager.IsOsdVisible = false;            GUIGraphicsContext.IsFullScreenVideo = false;            GUIWindowManager.ShowPreviousWindow();            break;            case 11000:            TvCropSettings cropSettings =              (TvCropSettings)GUIWindowManager.GetWindow((int)Window.WINDOW_TV_CROP_SETTINGS);            _isDialogVisible = true;            cropSettings.DoModal(GetID);            _isDialogVisible = false;            break;            case 100748: // Show Program Info            ShowProgramInfo();            break;            case 601: // RecordNow                    case 265: // StopRec.                      TVHome.ManualRecord(TVHome.Navigator.Channel' GetID);            break;            case 200042: // Linked channels            CacheManager.Clear();            linkages = layer.GetLinkagesForChannel(TVHome.Navigator.Channel);            ShowLinkedChannelsMenu(linkages);            break;            case 200041: // Tuning details            GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_TUNING_DETAILS);            break;            case 882: // Quality settings            ShowQualitySettingsMenu();            break;            case 368: // IMDB            OnGetIMDBInfo();            break;            case 200091:            ShowChapterStreamsMenu();            break;            case 462:            ShowSubtitleStreamsMenu();            break;            case 200073:            ShowPostProcessingMenu();            break;        }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 4: // TVGuide            {              TvNewScheduleSearch.SearchFor = TvNewScheduleSearch.SearchType.KeyWord;              GUIWindowManager.ActivateWindow((int)Window.WINDOW_TVGUIDE);              break;            }            case 10104: // MiniEPG            {              ShowMiniEpg();              break;            }            case 941: // Change aspect ratio            ShowAspectRatioMenu();            break;            case 2700: // Open CI Menu            PrepareCiMenu();            break;            //case 6008: // TvChannel sort          //  SortChannels();          //  break;            case 492: // Show audio language menu            ShowAudioLanguageMenu();            break;            case 200059:            ShowAudioDualMonoModeMenu(dualMonoMode);            break;            case 1441: // Fullscreen teletext            GUIWindowManager.ActivateWindow((int)Window.WINDOW_FULLSCREEN_TELETEXT);            break;            case 970:            // switch back to previous window            _isOsdVisible = false;            GUIWindowManager.IsOsdVisible = false;            GUIGraphicsContext.IsFullScreenVideo = false;            GUIWindowManager.ShowPreviousWindow();            break;            case 11000:            TvCropSettings cropSettings =              (TvCropSettings)GUIWindowManager.GetWindow((int)Window.WINDOW_TV_CROP_SETTINGS);            _isDialogVisible = true;            cropSettings.DoModal(GetID);            _isDialogVisible = false;            break;            case 100748: // Show Program Info            ShowProgramInfo();            break;            case 601: // RecordNow                    case 265: // StopRec.                      TVHome.ManualRecord(TVHome.Navigator.Channel' GetID);            break;            case 200042: // Linked channels            CacheManager.Clear();            linkages = layer.GetLinkagesForChannel(TVHome.Navigator.Channel);            ShowLinkedChannelsMenu(linkages);            break;            case 200041: // Tuning details            GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_TUNING_DETAILS);            break;            case 882: // Quality settings            ShowQualitySettingsMenu();            break;            case 368: // IMDB            OnGetIMDBInfo();            break;            case 200091:            ShowChapterStreamsMenu();            break;            case 462:            ShowSubtitleStreamsMenu();            break;            case 200073:            ShowPostProcessingMenu();            break;        }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 4: // TVGuide            {              TvNewScheduleSearch.SearchFor = TvNewScheduleSearch.SearchType.KeyWord;              GUIWindowManager.ActivateWindow((int)Window.WINDOW_TVGUIDE);              break;            }            case 10104: // MiniEPG            {              ShowMiniEpg();              break;            }            case 941: // Change aspect ratio            ShowAspectRatioMenu();            break;            case 2700: // Open CI Menu            PrepareCiMenu();            break;            //case 6008: // TvChannel sort          //  SortChannels();          //  break;            case 492: // Show audio language menu            ShowAudioLanguageMenu();            break;            case 200059:            ShowAudioDualMonoModeMenu(dualMonoMode);            break;            case 1441: // Fullscreen teletext            GUIWindowManager.ActivateWindow((int)Window.WINDOW_FULLSCREEN_TELETEXT);            break;            case 970:            // switch back to previous window            _isOsdVisible = false;            GUIWindowManager.IsOsdVisible = false;            GUIGraphicsContext.IsFullScreenVideo = false;            GUIWindowManager.ShowPreviousWindow();            break;            case 11000:            TvCropSettings cropSettings =              (TvCropSettings)GUIWindowManager.GetWindow((int)Window.WINDOW_TV_CROP_SETTINGS);            _isDialogVisible = true;            cropSettings.DoModal(GetID);            _isDialogVisible = false;            break;            case 100748: // Show Program Info            ShowProgramInfo();            break;            case 601: // RecordNow                    case 265: // StopRec.                      TVHome.ManualRecord(TVHome.Navigator.Channel' GetID);            break;            case 200042: // Linked channels            CacheManager.Clear();            linkages = layer.GetLinkagesForChannel(TVHome.Navigator.Channel);            ShowLinkedChannelsMenu(linkages);            break;            case 200041: // Tuning details            GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_TUNING_DETAILS);            break;            case 882: // Quality settings            ShowQualitySettingsMenu();            break;            case 368: // IMDB            OnGetIMDBInfo();            break;            case 200091:            ShowChapterStreamsMenu();            break;            case 462:            ShowSubtitleStreamsMenu();            break;            case 200073:            ShowPostProcessingMenu();            break;        }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 4: // TVGuide            {              TvNewScheduleSearch.SearchFor = TvNewScheduleSearch.SearchType.KeyWord;              GUIWindowManager.ActivateWindow((int)Window.WINDOW_TVGUIDE);              break;            }            case 10104: // MiniEPG            {              ShowMiniEpg();              break;            }            case 941: // Change aspect ratio            ShowAspectRatioMenu();            break;            case 2700: // Open CI Menu            PrepareCiMenu();            break;            //case 6008: // TvChannel sort          //  SortChannels();          //  break;            case 492: // Show audio language menu            ShowAudioLanguageMenu();            break;            case 200059:            ShowAudioDualMonoModeMenu(dualMonoMode);            break;            case 1441: // Fullscreen teletext            GUIWindowManager.ActivateWindow((int)Window.WINDOW_FULLSCREEN_TELETEXT);            break;            case 970:            // switch back to previous window            _isOsdVisible = false;            GUIWindowManager.IsOsdVisible = false;            GUIGraphicsContext.IsFullScreenVideo = false;            GUIWindowManager.ShowPreviousWindow();            break;            case 11000:            TvCropSettings cropSettings =              (TvCropSettings)GUIWindowManager.GetWindow((int)Window.WINDOW_TV_CROP_SETTINGS);            _isDialogVisible = true;            cropSettings.DoModal(GetID);            _isDialogVisible = false;            break;            case 100748: // Show Program Info            ShowProgramInfo();            break;            case 601: // RecordNow                    case 265: // StopRec.                      TVHome.ManualRecord(TVHome.Navigator.Channel' GetID);            break;            case 200042: // Linked channels            CacheManager.Clear();            linkages = layer.GetLinkagesForChannel(TVHome.Navigator.Channel);            ShowLinkedChannelsMenu(linkages);            break;            case 200041: // Tuning details            GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_TUNING_DETAILS);            break;            case 882: // Quality settings            ShowQualitySettingsMenu();            break;            case 368: // IMDB            OnGetIMDBInfo();            break;            case 200091:            ShowChapterStreamsMenu();            break;            case 462:            ShowSubtitleStreamsMenu();            break;            case 200073:            ShowPostProcessingMenu();            break;        }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 4: // TVGuide            {              TvNewScheduleSearch.SearchFor = TvNewScheduleSearch.SearchType.KeyWord;              GUIWindowManager.ActivateWindow((int)Window.WINDOW_TVGUIDE);              break;            }            case 10104: // MiniEPG            {              ShowMiniEpg();              break;            }            case 941: // Change aspect ratio            ShowAspectRatioMenu();            break;            case 2700: // Open CI Menu            PrepareCiMenu();            break;            //case 6008: // TvChannel sort          //  SortChannels();          //  break;            case 492: // Show audio language menu            ShowAudioLanguageMenu();            break;            case 200059:            ShowAudioDualMonoModeMenu(dualMonoMode);            break;            case 1441: // Fullscreen teletext            GUIWindowManager.ActivateWindow((int)Window.WINDOW_FULLSCREEN_TELETEXT);            break;            case 970:            // switch back to previous window            _isOsdVisible = false;            GUIWindowManager.IsOsdVisible = false;            GUIGraphicsContext.IsFullScreenVideo = false;            GUIWindowManager.ShowPreviousWindow();            break;            case 11000:            TvCropSettings cropSettings =              (TvCropSettings)GUIWindowManager.GetWindow((int)Window.WINDOW_TV_CROP_SETTINGS);            _isDialogVisible = true;            cropSettings.DoModal(GetID);            _isDialogVisible = false;            break;            case 100748: // Show Program Info            ShowProgramInfo();            break;            case 601: // RecordNow                    case 265: // StopRec.                      TVHome.ManualRecord(TVHome.Navigator.Channel' GetID);            break;            case 200042: // Linked channels            CacheManager.Clear();            linkages = layer.GetLinkagesForChannel(TVHome.Navigator.Channel);            ShowLinkedChannelsMenu(linkages);            break;            case 200041: // Tuning details            GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_TUNING_DETAILS);            break;            case 882: // Quality settings            ShowQualitySettingsMenu();            break;            case 368: // IMDB            OnGetIMDBInfo();            break;            case 200091:            ShowChapterStreamsMenu();            break;            case 462:            ShowSubtitleStreamsMenu();            break;            case 200073:            ShowPostProcessingMenu();            break;        }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowChapterStreamsMenu,The following statement contains a magic number: dlg.SetHeading(200091);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowChapterStreamsMenu,The following statement contains a magic number: dlg.Add(String.Format("{0}"' GUILocalizeStrings.Get(975)));
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowChapterStreamsMenu,The following statement contains a magic number: dlg.Add(String.Format("{0}"' GUILocalizeStrings.Get(976)));
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowChapterStreamsMenu,The following statement contains a magic number: item.Label = (String.Format("{0} #{1}"' GUILocalizeStrings.Get(200091)' (i + 1)));
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,OnGetIMDBInfo,The following statement contains a magic number: GUIButtonControl btnPlay = (GUIButtonControl)videoInfo.GetControl(2);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,OnGetIMDBInfo,The following statement contains a magic number: GUICheckButton btnCast = (GUICheckButton)videoInfo.GetControl(4);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,OnGetIMDBInfo,The following statement contains a magic number: GUICheckButton btnWatched = (GUICheckButton)videoInfo.GetControl(6);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowQualitySettingsMenu,The following statement contains a magic number: dlg.SetHeading(882);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowQualitySettingsMenu,The following statement contains a magic number: dlg.AddLocalizedString(965);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowQualitySettingsMenu,The following statement contains a magic number: dlg.AddLocalizedString(966);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowQualitySettingsMenu,The following statement contains a magic number: dlg.AddLocalizedString(967);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowQualitySettingsMenu,The following statement contains a magic number: switch (_newBitRate)          {            case VIDEOENCODER_BITRATE_MODE.ConstantBitRate:              dlg.SelectedLabel = 0;              break;            case VIDEOENCODER_BITRATE_MODE.VariableBitRateAverage:              dlg.SelectedLabel = 1;              break;            case VIDEOENCODER_BITRATE_MODE.VariableBitRatePeak:              dlg.SelectedLabel = 2;              break;          }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowQualitySettingsMenu,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: // CBR              _newBitRate = VIDEOENCODER_BITRATE_MODE.ConstantBitRate;              break;              case 1: // VBR              _newBitRate = VIDEOENCODER_BITRATE_MODE.VariableBitRateAverage;              break;              case 2: // VBR Peak              _newBitRate = VIDEOENCODER_BITRATE_MODE.VariableBitRatePeak;              break;          }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowQualitySettingsMenu,The following statement contains a magic number: dlg.SetHeading(882);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowQualitySettingsMenu,The following statement contains a magic number: dlg.AddLocalizedString(886);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowQualitySettingsMenu,The following statement contains a magic number: dlg.AddLocalizedString(993);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowQualitySettingsMenu,The following statement contains a magic number: dlg.AddLocalizedString(893);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowQualitySettingsMenu,The following statement contains a magic number: dlg.AddLocalizedString(883);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowQualitySettingsMenu,The following statement contains a magic number: dlg.AddLocalizedString(884);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowQualitySettingsMenu,The following statement contains a magic number: dlg.AddLocalizedString(885);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowQualitySettingsMenu,The following statement contains a magic number: switch (_newQuality)          {            case QualityType.Default:              dlg.SelectedLabel = 0;              break;            case QualityType.Custom:              dlg.SelectedLabel = 1;              break;            case QualityType.Portable:              dlg.SelectedLabel = 2;              break;            case QualityType.Low:              dlg.SelectedLabel = 3;              break;            case QualityType.Medium:              dlg.SelectedLabel = 4;              break;            case QualityType.High:              dlg.SelectedLabel = 5;              break;          }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowQualitySettingsMenu,The following statement contains a magic number: switch (_newQuality)          {            case QualityType.Default:              dlg.SelectedLabel = 0;              break;            case QualityType.Custom:              dlg.SelectedLabel = 1;              break;            case QualityType.Portable:              dlg.SelectedLabel = 2;              break;            case QualityType.Low:              dlg.SelectedLabel = 3;              break;            case QualityType.Medium:              dlg.SelectedLabel = 4;              break;            case QualityType.High:              dlg.SelectedLabel = 5;              break;          }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowQualitySettingsMenu,The following statement contains a magic number: switch (_newQuality)          {            case QualityType.Default:              dlg.SelectedLabel = 0;              break;            case QualityType.Custom:              dlg.SelectedLabel = 1;              break;            case QualityType.Portable:              dlg.SelectedLabel = 2;              break;            case QualityType.Low:              dlg.SelectedLabel = 3;              break;            case QualityType.Medium:              dlg.SelectedLabel = 4;              break;            case QualityType.High:              dlg.SelectedLabel = 5;              break;          }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowQualitySettingsMenu,The following statement contains a magic number: switch (_newQuality)          {            case QualityType.Default:              dlg.SelectedLabel = 0;              break;            case QualityType.Custom:              dlg.SelectedLabel = 1;              break;            case QualityType.Portable:              dlg.SelectedLabel = 2;              break;            case QualityType.Low:              dlg.SelectedLabel = 3;              break;            case QualityType.Medium:              dlg.SelectedLabel = 4;              break;            case QualityType.High:              dlg.SelectedLabel = 5;              break;          }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowQualitySettingsMenu,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: // Default              _newQuality = QualityType.Default;              break;              case 1: // Custom              _newQuality = QualityType.Custom;              break;              case 2: // Protable              _newQuality = QualityType.Portable;              break;              case 3: // Low              _newQuality = QualityType.Low;              break;              case 4: // Medium              _newQuality = QualityType.Medium;              break;              case 5: // High              _newQuality = QualityType.High;              break;          }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowQualitySettingsMenu,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: // Default              _newQuality = QualityType.Default;              break;              case 1: // Custom              _newQuality = QualityType.Custom;              break;              case 2: // Protable              _newQuality = QualityType.Portable;              break;              case 3: // Low              _newQuality = QualityType.Low;              break;              case 4: // Medium              _newQuality = QualityType.Medium;              break;              case 5: // High              _newQuality = QualityType.High;              break;          }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowQualitySettingsMenu,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: // Default              _newQuality = QualityType.Default;              break;              case 1: // Custom              _newQuality = QualityType.Custom;              break;              case 2: // Protable              _newQuality = QualityType.Portable;              break;              case 3: // Low              _newQuality = QualityType.Low;              break;              case 4: // Medium              _newQuality = QualityType.Medium;              break;              case 5: // High              _newQuality = QualityType.High;              break;          }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowQualitySettingsMenu,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: // Default              _newQuality = QualityType.Default;              break;              case 1: // Custom              _newQuality = QualityType.Custom;              break;              case 2: // Protable              _newQuality = QualityType.Portable;              break;              case 3: // Low              _newQuality = QualityType.Low;              break;              case 4: // Medium              _newQuality = QualityType.Medium;              break;              case 5: // High              _newQuality = QualityType.High;              break;          }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowAspectRatioMenu,The following statement contains a magic number: dlg.SetHeading(941);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowAspectRatioMenu,The following statement contains a magic number: dlg.AddLocalizedString(942);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowAspectRatioMenu,The following statement contains a magic number: dlg.AddLocalizedString(943);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowAspectRatioMenu,The following statement contains a magic number: dlg.AddLocalizedString(944);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowAspectRatioMenu,The following statement contains a magic number: dlg.AddLocalizedString(945);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowAspectRatioMenu,The following statement contains a magic number: dlg.AddLocalizedString(946);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowAspectRatioMenu,The following statement contains a magic number: dlg.AddLocalizedString(947);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowAspectRatioMenu,The following statement contains a magic number: dlg.AddLocalizedString(1190);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowAudioLanguageMenu,The following statement contains a magic number: dlg.SetHeading(492);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowAudioDualMonoModeMenu,The following statement contains a magic number: dlg.SetHeading(200059);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowAudioDualMonoModeMenu,The following statement contains a magic number: dlg.AddLocalizedString(200060);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowAudioDualMonoModeMenu,The following statement contains a magic number: dlg.AddLocalizedString(200061);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowAudioDualMonoModeMenu,The following statement contains a magic number: dlg.AddLocalizedString(200062);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowAudioDualMonoModeMenu,The following statement contains a magic number: dlg.AddLocalizedString(200063);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowLinkedChannelsMenu,The following statement contains a magic number: dlg.SetHeading(200042);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowSubtitleStreamsMenu,The following statement contains a magic number: dlg.SetHeading(462);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowSubtitleStreamsMenu,The following statement contains a magic number: dlg.AddLocalizedString(519);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowSubtitleStreamsMenu,The following statement contains a magic number: dlg.SelectedLabel = g_Player.CurrentSubtitleStream + 2;
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowPostProcessingMenu,The following statement contains a magic number: dlg.SetHeading(200073);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowPostProcessingMenu,The following statement contains a magic number: dlg.Add(String.Format("{0} {1}"' GUILocalizeStrings.Get(200074)' (engine.EnablePostProcess) ? GUILocalizeStrings.Get(461) : ""));
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowPostProcessingMenu,The following statement contains a magic number: dlg.Add(String.Format("{0} {1}"' GUILocalizeStrings.Get(200074)' (engine.EnablePostProcess) ? GUILocalizeStrings.Get(461) : ""));
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowPostProcessingMenu,The following statement contains a magic number: dlg.Add(String.Format("{0} {1}"' GUILocalizeStrings.Get(200075)' (engine.EnableResize) ? GUILocalizeStrings.Get(461) : ""));
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowPostProcessingMenu,The following statement contains a magic number: dlg.Add(String.Format("{0} {1}"' GUILocalizeStrings.Get(200075)' (engine.EnableResize) ? GUILocalizeStrings.Get(461) : ""));
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowPostProcessingMenu,The following statement contains a magic number: dlg.Add(String.Format("{0} {1}"' GUILocalizeStrings.Get(200078)' (engine.EnableCrop) ? GUILocalizeStrings.Get(461) : ""));
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowPostProcessingMenu,The following statement contains a magic number: dlg.Add(String.Format("{0} {1}"' GUILocalizeStrings.Get(200078)' (engine.EnableCrop) ? GUILocalizeStrings.Get(461) : ""));
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowPostProcessingMenu,The following statement contains a magic number: dlg.Add(String.Format("{0} {1}"' GUILocalizeStrings.Get(200077)' (engine.EnableDeinterlace) ? GUILocalizeStrings.Get(461) : ""));
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowPostProcessingMenu,The following statement contains a magic number: dlg.Add(String.Format("{0} {1}"' GUILocalizeStrings.Get(200077)' (engine.EnableDeinterlace) ? GUILocalizeStrings.Get(461) : ""));
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowPostProcessingMenu,The following statement contains a magic number: dlg.AddLocalizedString(970);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowPostProcessingMenu,The following statement contains a magic number: dlg.SelectedId == 970
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowPostProcessingMenu,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: engine.EnablePostProcess = !engine.EnablePostProcess; break;            case 1: engine.EnableResize = !engine.EnableResize; break;            case 2: engine.EnableCrop = !engine.EnableCrop; break;            case 3: engine.EnableDeinterlace = !engine.EnableDeinterlace; break;          }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowPostProcessingMenu,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: engine.EnablePostProcess = !engine.EnablePostProcess; break;            case 1: engine.EnableResize = !engine.EnableResize; break;            case 2: engine.EnableCrop = !engine.EnableCrop; break;            case 3: engine.EnableDeinterlace = !engine.EnableDeinterlace; break;          }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,Process,The following statement contains a magic number: GUIMessage message = new GUIMessage(GUIMessage.MessageType.GUI_MSG_NOTIFY' GetID' GetID' 0' 5' 0' null);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,Process,The following statement contains a magic number: switch (VideoRendererStatistics.VideoState)              {                case VideoRendererStatistics.State.NoSignal:                  message.Label = GUILocalizeStrings.Get(1034);                  break;                case VideoRendererStatistics.State.Scrambled:                  message.Label = GUILocalizeStrings.Get(1035);                  break;                case VideoRendererStatistics.State.Signal:                  message.Label = GUILocalizeStrings.Get(1036);                  break;                default:                  message.Label = GUILocalizeStrings.Get(1036);                  break;              }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,Process,The following statement contains a magic number: switch (VideoRendererStatistics.VideoState)              {                case VideoRendererStatistics.State.NoSignal:                  message.Label = GUILocalizeStrings.Get(1034);                  break;                case VideoRendererStatistics.State.Scrambled:                  message.Label = GUILocalizeStrings.Get(1035);                  break;                case VideoRendererStatistics.State.Signal:                  message.Label = GUILocalizeStrings.Get(1036);                  break;                default:                  message.Label = GUILocalizeStrings.Get(1036);                  break;              }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,Process,The following statement contains a magic number: switch (VideoRendererStatistics.VideoState)              {                case VideoRendererStatistics.State.NoSignal:                  message.Label = GUILocalizeStrings.Get(1034);                  break;                case VideoRendererStatistics.State.Scrambled:                  message.Label = GUILocalizeStrings.Get(1035);                  break;                case VideoRendererStatistics.State.Signal:                  message.Label = GUILocalizeStrings.Get(1036);                  break;                default:                  message.Label = GUILocalizeStrings.Get(1036);                  break;              }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,Process,The following statement contains a magic number: switch (VideoRendererStatistics.VideoState)              {                case VideoRendererStatistics.State.NoSignal:                  message.Label = GUILocalizeStrings.Get(1034);                  break;                case VideoRendererStatistics.State.Scrambled:                  message.Label = GUILocalizeStrings.Get(1035);                  break;                case VideoRendererStatistics.State.Signal:                  message.Label = GUILocalizeStrings.Get(1036);                  break;                default:                  message.Label = GUILocalizeStrings.Get(1036);                  break;              }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,UpdateGUI,The following statement contains a magic number: switch (speed)        {          case 2:            ShowControl(GetID' (int)Control.IMG_2X);            break;          case 4:            ShowControl(GetID' (int)Control.IMG_4X);            break;          case 8:            ShowControl(GetID' (int)Control.IMG_8X);            break;          case 16:            ShowControl(GetID' (int)Control.IMG_16X);            break;          case 32:            ShowControl(GetID' (int)Control.IMG_32X);            break;          case -2:            ShowControl(GetID' (int)Control.IMG_MIN2X);            break;          case -4:            ShowControl(GetID' (int)Control.IMG_MIN4X);            break;          case -8:            ShowControl(GetID' (int)Control.IMG_MIN8X);            break;          case -16:            ShowControl(GetID' (int)Control.IMG_MIN16X);            break;          case -32:            ShowControl(GetID' (int)Control.IMG_MIN32X);            break;        }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,UpdateGUI,The following statement contains a magic number: switch (speed)        {          case 2:            ShowControl(GetID' (int)Control.IMG_2X);            break;          case 4:            ShowControl(GetID' (int)Control.IMG_4X);            break;          case 8:            ShowControl(GetID' (int)Control.IMG_8X);            break;          case 16:            ShowControl(GetID' (int)Control.IMG_16X);            break;          case 32:            ShowControl(GetID' (int)Control.IMG_32X);            break;          case -2:            ShowControl(GetID' (int)Control.IMG_MIN2X);            break;          case -4:            ShowControl(GetID' (int)Control.IMG_MIN4X);            break;          case -8:            ShowControl(GetID' (int)Control.IMG_MIN8X);            break;          case -16:            ShowControl(GetID' (int)Control.IMG_MIN16X);            break;          case -32:            ShowControl(GetID' (int)Control.IMG_MIN32X);            break;        }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,UpdateGUI,The following statement contains a magic number: switch (speed)        {          case 2:            ShowControl(GetID' (int)Control.IMG_2X);            break;          case 4:            ShowControl(GetID' (int)Control.IMG_4X);            break;          case 8:            ShowControl(GetID' (int)Control.IMG_8X);            break;          case 16:            ShowControl(GetID' (int)Control.IMG_16X);            break;          case 32:            ShowControl(GetID' (int)Control.IMG_32X);            break;          case -2:            ShowControl(GetID' (int)Control.IMG_MIN2X);            break;          case -4:            ShowControl(GetID' (int)Control.IMG_MIN4X);            break;          case -8:            ShowControl(GetID' (int)Control.IMG_MIN8X);            break;          case -16:            ShowControl(GetID' (int)Control.IMG_MIN16X);            break;          case -32:            ShowControl(GetID' (int)Control.IMG_MIN32X);            break;        }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,UpdateGUI,The following statement contains a magic number: switch (speed)        {          case 2:            ShowControl(GetID' (int)Control.IMG_2X);            break;          case 4:            ShowControl(GetID' (int)Control.IMG_4X);            break;          case 8:            ShowControl(GetID' (int)Control.IMG_8X);            break;          case 16:            ShowControl(GetID' (int)Control.IMG_16X);            break;          case 32:            ShowControl(GetID' (int)Control.IMG_32X);            break;          case -2:            ShowControl(GetID' (int)Control.IMG_MIN2X);            break;          case -4:            ShowControl(GetID' (int)Control.IMG_MIN4X);            break;          case -8:            ShowControl(GetID' (int)Control.IMG_MIN8X);            break;          case -16:            ShowControl(GetID' (int)Control.IMG_MIN16X);            break;          case -32:            ShowControl(GetID' (int)Control.IMG_MIN32X);            break;        }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,UpdateGUI,The following statement contains a magic number: switch (speed)        {          case 2:            ShowControl(GetID' (int)Control.IMG_2X);            break;          case 4:            ShowControl(GetID' (int)Control.IMG_4X);            break;          case 8:            ShowControl(GetID' (int)Control.IMG_8X);            break;          case 16:            ShowControl(GetID' (int)Control.IMG_16X);            break;          case 32:            ShowControl(GetID' (int)Control.IMG_32X);            break;          case -2:            ShowControl(GetID' (int)Control.IMG_MIN2X);            break;          case -4:            ShowControl(GetID' (int)Control.IMG_MIN4X);            break;          case -8:            ShowControl(GetID' (int)Control.IMG_MIN8X);            break;          case -16:            ShowControl(GetID' (int)Control.IMG_MIN16X);            break;          case -32:            ShowControl(GetID' (int)Control.IMG_MIN32X);            break;        }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,UpdateGUI,The following statement contains a magic number: switch (speed)        {          case 2:            ShowControl(GetID' (int)Control.IMG_2X);            break;          case 4:            ShowControl(GetID' (int)Control.IMG_4X);            break;          case 8:            ShowControl(GetID' (int)Control.IMG_8X);            break;          case 16:            ShowControl(GetID' (int)Control.IMG_16X);            break;          case 32:            ShowControl(GetID' (int)Control.IMG_32X);            break;          case -2:            ShowControl(GetID' (int)Control.IMG_MIN2X);            break;          case -4:            ShowControl(GetID' (int)Control.IMG_MIN4X);            break;          case -8:            ShowControl(GetID' (int)Control.IMG_MIN8X);            break;          case -16:            ShowControl(GetID' (int)Control.IMG_MIN16X);            break;          case -32:            ShowControl(GetID' (int)Control.IMG_MIN32X);            break;        }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,UpdateGUI,The following statement contains a magic number: switch (speed)        {          case 2:            ShowControl(GetID' (int)Control.IMG_2X);            break;          case 4:            ShowControl(GetID' (int)Control.IMG_4X);            break;          case 8:            ShowControl(GetID' (int)Control.IMG_8X);            break;          case 16:            ShowControl(GetID' (int)Control.IMG_16X);            break;          case 32:            ShowControl(GetID' (int)Control.IMG_32X);            break;          case -2:            ShowControl(GetID' (int)Control.IMG_MIN2X);            break;          case -4:            ShowControl(GetID' (int)Control.IMG_MIN4X);            break;          case -8:            ShowControl(GetID' (int)Control.IMG_MIN8X);            break;          case -16:            ShowControl(GetID' (int)Control.IMG_MIN16X);            break;          case -32:            ShowControl(GetID' (int)Control.IMG_MIN32X);            break;        }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,UpdateGUI,The following statement contains a magic number: switch (speed)        {          case 2:            ShowControl(GetID' (int)Control.IMG_2X);            break;          case 4:            ShowControl(GetID' (int)Control.IMG_4X);            break;          case 8:            ShowControl(GetID' (int)Control.IMG_8X);            break;          case 16:            ShowControl(GetID' (int)Control.IMG_16X);            break;          case 32:            ShowControl(GetID' (int)Control.IMG_32X);            break;          case -2:            ShowControl(GetID' (int)Control.IMG_MIN2X);            break;          case -4:            ShowControl(GetID' (int)Control.IMG_MIN4X);            break;          case -8:            ShowControl(GetID' (int)Control.IMG_MIN8X);            break;          case -16:            ShowControl(GetID' (int)Control.IMG_MIN16X);            break;          case -32:            ShowControl(GetID' (int)Control.IMG_MIN32X);            break;        }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,UpdateGUI,The following statement contains a magic number: switch (speed)        {          case 2:            ShowControl(GetID' (int)Control.IMG_2X);            break;          case 4:            ShowControl(GetID' (int)Control.IMG_4X);            break;          case 8:            ShowControl(GetID' (int)Control.IMG_8X);            break;          case 16:            ShowControl(GetID' (int)Control.IMG_16X);            break;          case 32:            ShowControl(GetID' (int)Control.IMG_32X);            break;          case -2:            ShowControl(GetID' (int)Control.IMG_MIN2X);            break;          case -4:            ShowControl(GetID' (int)Control.IMG_MIN4X);            break;          case -8:            ShowControl(GetID' (int)Control.IMG_MIN8X);            break;          case -16:            ShowControl(GetID' (int)Control.IMG_MIN16X);            break;          case -32:            ShowControl(GetID' (int)Control.IMG_MIN32X);            break;        }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,UpdateGUI,The following statement contains a magic number: switch (speed)        {          case 2:            ShowControl(GetID' (int)Control.IMG_2X);            break;          case 4:            ShowControl(GetID' (int)Control.IMG_4X);            break;          case 8:            ShowControl(GetID' (int)Control.IMG_8X);            break;          case 16:            ShowControl(GetID' (int)Control.IMG_16X);            break;          case 32:            ShowControl(GetID' (int)Control.IMG_32X);            break;          case -2:            ShowControl(GetID' (int)Control.IMG_MIN2X);            break;          case -4:            ShowControl(GetID' (int)Control.IMG_MIN4X);            break;          case -8:            ShowControl(GetID' (int)Control.IMG_MIN8X);            break;          case -16:            ShowControl(GetID' (int)Control.IMG_MIN16X);            break;          case -32:            ShowControl(GetID' (int)Control.IMG_MIN32X);            break;        }
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,CheckTimeOuts,The following statement contains a magic number: ts.TotalSeconds >= 3 && !VolumeHandler.Instance.IsMuted
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,CheckTimeOuts,The following statement contains a magic number: ts.TotalMilliseconds >= 2000
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,OnPageDown,The following statement contains a magic number: msg.Label = String.Format("{0}:{1}"' GUILocalizeStrings.Get(971)' TVHome.Navigator.ZapGroupName);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,OnPageUp,The following statement contains a magic number: msg.Label = String.Format("{0}:{1}"' GUILocalizeStrings.Get(971)' TVHome.Navigator.ZapGroupName);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,StartAutoZap,The following statement contains a magic number: _autoZapTimer.Interval = xmlreader.GetValueAsInt("capture"' "autoZapTimer"' 10000);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,OnProgress,The following statement contains a magic number: pDlgProgress.SetLine(2' line2);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,OnSearchStarting,The following statement contains a magic number: pDlgProgress.SetHeading(GUILocalizeStrings.Get(197));
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,OnSearchStarting,The following statement contains a magic number: pDlgProgress.SetLine(2' string.Empty);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,OnMovieNotFound,The following statement contains a magic number: pDlgOK.SetHeading(195);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,OnMovieNotFound,The following statement contains a magic number: pDlgOK.SetLine(2' string.Empty);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,OnDetailsStarting,The following statement contains a magic number: pDlgProgress.SetHeading(GUILocalizeStrings.Get(198));
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,OnDetailsStarting,The following statement contains a magic number: pDlgProgress.SetLine(2' string.Empty);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,OnDetailsNotFound,The following statement contains a magic number: pDlgOK.SetHeading(195);
Magic Number,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,OnDetailsNotFound,The following statement contains a magic number: pDlgOK.SetLine(2' string.Empty);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,LoadSettings,The following statement contains a magic number: _channelNumberMaxLength = xmlreader.GetValueAsInt("mytv"' "channelnumbermaxlength"' 3);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,LoadSettings,The following statement contains a magic number: _zapKeyTimeout = 1000 * xmlreader.GetValueAsInt("movieplayer"' "zapKeyTimeout"' 1);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,LoadSettings,The following statement contains a magic number: _timePerBlock = xmlreader.GetValueAsInt("tvguide"' "timeperblock"' 30);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,LoadGuideColors,The following statement contains a magic number: temp.Count == 2
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,LoadGuideColors,The following statement contains a magic number: temp.Count == 2
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_singleChannelView)            {              OnSwitchMode(true);              return;            }            GUIWindowManager.ShowPreviousWindow();            return;            case Action.ActionType.ACTION_KEY_PRESSED:            if (action.m_key != null)            {              OnKeyCode((char)action.m_key.KeyChar);            }            break;            case Action.ActionType.ACTION_RECORD:            if ((GetFocusControlId() != -1) && (_cursorY > 0) && (_cursorX >= 0))            {              OnRecord();            }            break;            case Action.ActionType.ACTION_MOUSE_MOVE:            {              int x = (int)action.fAmount1;              int y = (int)action.fAmount2;              foreach (GUIControl control in controlList)              {                if (control.GetID >= (int)Controls.IMG_CHAN1 + 0 &&                    control.GetID <= (int)Controls.IMG_CHAN1 + _channelCount)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      UnFocus();                      _cursorX = control.GetID - (int)Controls.IMG_CHAN1;                      _cursorY = 0;                        if (_singleChannelNumber != _cursorX + ChannelOffset)                      {                        Update(false);                      }                      UpdateCurrentProgram();                      UpdateHorizontalScrollbar();                      UpdateVerticalScrollbar();                      updateSingleChannelNumber();                      return;                    }                  }                }                if (control.GetID >= GUIDE_COMPONENTID_START)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      int iControlId = control.GetID;                      if (iControlId >= GUIDE_COMPONENTID_START)                      {                        iControlId -= GUIDE_COMPONENTID_START;                        int iCursorY = (iControlId / RowID);                        iControlId -= iCursorY * RowID;                        if (iControlId % ColID == 0)                        {                          int iCursorX = (iControlId / ColID) + 1;                          if (iCursorY != _cursorX || iCursorX != _cursorY)                          {                            UnFocus();                            _cursorX = iCursorY;                            _cursorY = iCursorX;                            UpdateCurrentProgram();                            SetFocus();                            UpdateHorizontalScrollbar();                            UpdateVerticalScrollbar();                            updateSingleChannelNumber();                            return;                          }                          return;                        }                      }                    }                  }                }              }              UnFocus();              _cursorY = -1;              _cursorX = -1;              base.OnAction(action);            }            break;            case Action.ActionType.ACTION_TVGUIDE_RESET:            _cursorY = 0;            _viewingTime = DateTime.Now;            Update(false);            break;              case Action.ActionType.ACTION_CONTEXT_MENU:            {              if (_cursorY >= 0 && _cursorX >= 0)              {                if (_cursorY == 0)                {                  _backupSingleViewCursorX = _cursorX;                  OnSwitchMode(false);                  return;                }                else                {                  ShowContextMenu();                }              }              else              {                action.wID = Action.ActionType.ACTION_SELECT_ITEM;                GUIWindowManager.OnAction(action);              }            }            break;            case Action.ActionType.ACTION_PAGE_UP:            OnPageUp();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_PAGE_DOWN:            OnPageDown();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (_cursorX >= 0)              {                OnLeft();                updateSingleChannelNumber();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (_cursorX >= 0)              {                OnRight();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_UP:            {              if (_cursorX >= 0)              {                OnUp(true' false);                updateSingleChannelNumber();                UpdateVerticalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_DOWN:            {              if (_cursorX >= 0)              {                OnDown(true);                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              else              {                _cursorX = 0;                SetFocus();                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              return;            }            //break;          case Action.ActionType.ACTION_SHOW_INFO:            {              ShowContextMenu();            }            break;          case Action.ActionType.ACTION_INCREASE_TIMEBLOCK:            {              _timePerBlock += 15;              if (_timePerBlock > 60)              {                _timePerBlock = 60;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;            case Action.ActionType.ACTION_REWIND:          case Action.ActionType.ACTION_MUSIC_REWIND:            _viewingTime = _viewingTime.AddHours(-3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_FORWARD:          case Action.ActionType.ACTION_MUSIC_FORWARD:            _viewingTime = _viewingTime.AddHours(3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_DECREASE_TIMEBLOCK:            {              if (_timePerBlock > 15)              {                _timePerBlock -= 15;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_DEFAULT_TIMEBLOCK:            {              _timePerBlock = 30;              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_TVGUIDE_INCREASE_DAY:            OnNextDay();            break;            case Action.ActionType.ACTION_TVGUIDE_DECREASE_DAY:            OnPreviousDay();            break;            // TV group changing actions          case Action.ActionType.ACTION_TVGUIDE_NEXT_GROUP:            OnChangeChannelGroup(1);            break;            case Action.ActionType.ACTION_TVGUIDE_PREV_GROUP:            OnChangeChannelGroup(-1);            break;        }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_singleChannelView)            {              OnSwitchMode(true);              return;            }            GUIWindowManager.ShowPreviousWindow();            return;            case Action.ActionType.ACTION_KEY_PRESSED:            if (action.m_key != null)            {              OnKeyCode((char)action.m_key.KeyChar);            }            break;            case Action.ActionType.ACTION_RECORD:            if ((GetFocusControlId() != -1) && (_cursorY > 0) && (_cursorX >= 0))            {              OnRecord();            }            break;            case Action.ActionType.ACTION_MOUSE_MOVE:            {              int x = (int)action.fAmount1;              int y = (int)action.fAmount2;              foreach (GUIControl control in controlList)              {                if (control.GetID >= (int)Controls.IMG_CHAN1 + 0 &&                    control.GetID <= (int)Controls.IMG_CHAN1 + _channelCount)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      UnFocus();                      _cursorX = control.GetID - (int)Controls.IMG_CHAN1;                      _cursorY = 0;                        if (_singleChannelNumber != _cursorX + ChannelOffset)                      {                        Update(false);                      }                      UpdateCurrentProgram();                      UpdateHorizontalScrollbar();                      UpdateVerticalScrollbar();                      updateSingleChannelNumber();                      return;                    }                  }                }                if (control.GetID >= GUIDE_COMPONENTID_START)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      int iControlId = control.GetID;                      if (iControlId >= GUIDE_COMPONENTID_START)                      {                        iControlId -= GUIDE_COMPONENTID_START;                        int iCursorY = (iControlId / RowID);                        iControlId -= iCursorY * RowID;                        if (iControlId % ColID == 0)                        {                          int iCursorX = (iControlId / ColID) + 1;                          if (iCursorY != _cursorX || iCursorX != _cursorY)                          {                            UnFocus();                            _cursorX = iCursorY;                            _cursorY = iCursorX;                            UpdateCurrentProgram();                            SetFocus();                            UpdateHorizontalScrollbar();                            UpdateVerticalScrollbar();                            updateSingleChannelNumber();                            return;                          }                          return;                        }                      }                    }                  }                }              }              UnFocus();              _cursorY = -1;              _cursorX = -1;              base.OnAction(action);            }            break;            case Action.ActionType.ACTION_TVGUIDE_RESET:            _cursorY = 0;            _viewingTime = DateTime.Now;            Update(false);            break;              case Action.ActionType.ACTION_CONTEXT_MENU:            {              if (_cursorY >= 0 && _cursorX >= 0)              {                if (_cursorY == 0)                {                  _backupSingleViewCursorX = _cursorX;                  OnSwitchMode(false);                  return;                }                else                {                  ShowContextMenu();                }              }              else              {                action.wID = Action.ActionType.ACTION_SELECT_ITEM;                GUIWindowManager.OnAction(action);              }            }            break;            case Action.ActionType.ACTION_PAGE_UP:            OnPageUp();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_PAGE_DOWN:            OnPageDown();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (_cursorX >= 0)              {                OnLeft();                updateSingleChannelNumber();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (_cursorX >= 0)              {                OnRight();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_UP:            {              if (_cursorX >= 0)              {                OnUp(true' false);                updateSingleChannelNumber();                UpdateVerticalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_DOWN:            {              if (_cursorX >= 0)              {                OnDown(true);                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              else              {                _cursorX = 0;                SetFocus();                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              return;            }            //break;          case Action.ActionType.ACTION_SHOW_INFO:            {              ShowContextMenu();            }            break;          case Action.ActionType.ACTION_INCREASE_TIMEBLOCK:            {              _timePerBlock += 15;              if (_timePerBlock > 60)              {                _timePerBlock = 60;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;            case Action.ActionType.ACTION_REWIND:          case Action.ActionType.ACTION_MUSIC_REWIND:            _viewingTime = _viewingTime.AddHours(-3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_FORWARD:          case Action.ActionType.ACTION_MUSIC_FORWARD:            _viewingTime = _viewingTime.AddHours(3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_DECREASE_TIMEBLOCK:            {              if (_timePerBlock > 15)              {                _timePerBlock -= 15;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_DEFAULT_TIMEBLOCK:            {              _timePerBlock = 30;              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_TVGUIDE_INCREASE_DAY:            OnNextDay();            break;            case Action.ActionType.ACTION_TVGUIDE_DECREASE_DAY:            OnPreviousDay();            break;            // TV group changing actions          case Action.ActionType.ACTION_TVGUIDE_NEXT_GROUP:            OnChangeChannelGroup(1);            break;            case Action.ActionType.ACTION_TVGUIDE_PREV_GROUP:            OnChangeChannelGroup(-1);            break;        }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_singleChannelView)            {              OnSwitchMode(true);              return;            }            GUIWindowManager.ShowPreviousWindow();            return;            case Action.ActionType.ACTION_KEY_PRESSED:            if (action.m_key != null)            {              OnKeyCode((char)action.m_key.KeyChar);            }            break;            case Action.ActionType.ACTION_RECORD:            if ((GetFocusControlId() != -1) && (_cursorY > 0) && (_cursorX >= 0))            {              OnRecord();            }            break;            case Action.ActionType.ACTION_MOUSE_MOVE:            {              int x = (int)action.fAmount1;              int y = (int)action.fAmount2;              foreach (GUIControl control in controlList)              {                if (control.GetID >= (int)Controls.IMG_CHAN1 + 0 &&                    control.GetID <= (int)Controls.IMG_CHAN1 + _channelCount)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      UnFocus();                      _cursorX = control.GetID - (int)Controls.IMG_CHAN1;                      _cursorY = 0;                        if (_singleChannelNumber != _cursorX + ChannelOffset)                      {                        Update(false);                      }                      UpdateCurrentProgram();                      UpdateHorizontalScrollbar();                      UpdateVerticalScrollbar();                      updateSingleChannelNumber();                      return;                    }                  }                }                if (control.GetID >= GUIDE_COMPONENTID_START)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      int iControlId = control.GetID;                      if (iControlId >= GUIDE_COMPONENTID_START)                      {                        iControlId -= GUIDE_COMPONENTID_START;                        int iCursorY = (iControlId / RowID);                        iControlId -= iCursorY * RowID;                        if (iControlId % ColID == 0)                        {                          int iCursorX = (iControlId / ColID) + 1;                          if (iCursorY != _cursorX || iCursorX != _cursorY)                          {                            UnFocus();                            _cursorX = iCursorY;                            _cursorY = iCursorX;                            UpdateCurrentProgram();                            SetFocus();                            UpdateHorizontalScrollbar();                            UpdateVerticalScrollbar();                            updateSingleChannelNumber();                            return;                          }                          return;                        }                      }                    }                  }                }              }              UnFocus();              _cursorY = -1;              _cursorX = -1;              base.OnAction(action);            }            break;            case Action.ActionType.ACTION_TVGUIDE_RESET:            _cursorY = 0;            _viewingTime = DateTime.Now;            Update(false);            break;              case Action.ActionType.ACTION_CONTEXT_MENU:            {              if (_cursorY >= 0 && _cursorX >= 0)              {                if (_cursorY == 0)                {                  _backupSingleViewCursorX = _cursorX;                  OnSwitchMode(false);                  return;                }                else                {                  ShowContextMenu();                }              }              else              {                action.wID = Action.ActionType.ACTION_SELECT_ITEM;                GUIWindowManager.OnAction(action);              }            }            break;            case Action.ActionType.ACTION_PAGE_UP:            OnPageUp();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_PAGE_DOWN:            OnPageDown();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (_cursorX >= 0)              {                OnLeft();                updateSingleChannelNumber();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (_cursorX >= 0)              {                OnRight();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_UP:            {              if (_cursorX >= 0)              {                OnUp(true' false);                updateSingleChannelNumber();                UpdateVerticalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_DOWN:            {              if (_cursorX >= 0)              {                OnDown(true);                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              else              {                _cursorX = 0;                SetFocus();                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              return;            }            //break;          case Action.ActionType.ACTION_SHOW_INFO:            {              ShowContextMenu();            }            break;          case Action.ActionType.ACTION_INCREASE_TIMEBLOCK:            {              _timePerBlock += 15;              if (_timePerBlock > 60)              {                _timePerBlock = 60;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;            case Action.ActionType.ACTION_REWIND:          case Action.ActionType.ACTION_MUSIC_REWIND:            _viewingTime = _viewingTime.AddHours(-3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_FORWARD:          case Action.ActionType.ACTION_MUSIC_FORWARD:            _viewingTime = _viewingTime.AddHours(3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_DECREASE_TIMEBLOCK:            {              if (_timePerBlock > 15)              {                _timePerBlock -= 15;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_DEFAULT_TIMEBLOCK:            {              _timePerBlock = 30;              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_TVGUIDE_INCREASE_DAY:            OnNextDay();            break;            case Action.ActionType.ACTION_TVGUIDE_DECREASE_DAY:            OnPreviousDay();            break;            // TV group changing actions          case Action.ActionType.ACTION_TVGUIDE_NEXT_GROUP:            OnChangeChannelGroup(1);            break;            case Action.ActionType.ACTION_TVGUIDE_PREV_GROUP:            OnChangeChannelGroup(-1);            break;        }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_singleChannelView)            {              OnSwitchMode(true);              return;            }            GUIWindowManager.ShowPreviousWindow();            return;            case Action.ActionType.ACTION_KEY_PRESSED:            if (action.m_key != null)            {              OnKeyCode((char)action.m_key.KeyChar);            }            break;            case Action.ActionType.ACTION_RECORD:            if ((GetFocusControlId() != -1) && (_cursorY > 0) && (_cursorX >= 0))            {              OnRecord();            }            break;            case Action.ActionType.ACTION_MOUSE_MOVE:            {              int x = (int)action.fAmount1;              int y = (int)action.fAmount2;              foreach (GUIControl control in controlList)              {                if (control.GetID >= (int)Controls.IMG_CHAN1 + 0 &&                    control.GetID <= (int)Controls.IMG_CHAN1 + _channelCount)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      UnFocus();                      _cursorX = control.GetID - (int)Controls.IMG_CHAN1;                      _cursorY = 0;                        if (_singleChannelNumber != _cursorX + ChannelOffset)                      {                        Update(false);                      }                      UpdateCurrentProgram();                      UpdateHorizontalScrollbar();                      UpdateVerticalScrollbar();                      updateSingleChannelNumber();                      return;                    }                  }                }                if (control.GetID >= GUIDE_COMPONENTID_START)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      int iControlId = control.GetID;                      if (iControlId >= GUIDE_COMPONENTID_START)                      {                        iControlId -= GUIDE_COMPONENTID_START;                        int iCursorY = (iControlId / RowID);                        iControlId -= iCursorY * RowID;                        if (iControlId % ColID == 0)                        {                          int iCursorX = (iControlId / ColID) + 1;                          if (iCursorY != _cursorX || iCursorX != _cursorY)                          {                            UnFocus();                            _cursorX = iCursorY;                            _cursorY = iCursorX;                            UpdateCurrentProgram();                            SetFocus();                            UpdateHorizontalScrollbar();                            UpdateVerticalScrollbar();                            updateSingleChannelNumber();                            return;                          }                          return;                        }                      }                    }                  }                }              }              UnFocus();              _cursorY = -1;              _cursorX = -1;              base.OnAction(action);            }            break;            case Action.ActionType.ACTION_TVGUIDE_RESET:            _cursorY = 0;            _viewingTime = DateTime.Now;            Update(false);            break;              case Action.ActionType.ACTION_CONTEXT_MENU:            {              if (_cursorY >= 0 && _cursorX >= 0)              {                if (_cursorY == 0)                {                  _backupSingleViewCursorX = _cursorX;                  OnSwitchMode(false);                  return;                }                else                {                  ShowContextMenu();                }              }              else              {                action.wID = Action.ActionType.ACTION_SELECT_ITEM;                GUIWindowManager.OnAction(action);              }            }            break;            case Action.ActionType.ACTION_PAGE_UP:            OnPageUp();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_PAGE_DOWN:            OnPageDown();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (_cursorX >= 0)              {                OnLeft();                updateSingleChannelNumber();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (_cursorX >= 0)              {                OnRight();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_UP:            {              if (_cursorX >= 0)              {                OnUp(true' false);                updateSingleChannelNumber();                UpdateVerticalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_DOWN:            {              if (_cursorX >= 0)              {                OnDown(true);                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              else              {                _cursorX = 0;                SetFocus();                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              return;            }            //break;          case Action.ActionType.ACTION_SHOW_INFO:            {              ShowContextMenu();            }            break;          case Action.ActionType.ACTION_INCREASE_TIMEBLOCK:            {              _timePerBlock += 15;              if (_timePerBlock > 60)              {                _timePerBlock = 60;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;            case Action.ActionType.ACTION_REWIND:          case Action.ActionType.ACTION_MUSIC_REWIND:            _viewingTime = _viewingTime.AddHours(-3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_FORWARD:          case Action.ActionType.ACTION_MUSIC_FORWARD:            _viewingTime = _viewingTime.AddHours(3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_DECREASE_TIMEBLOCK:            {              if (_timePerBlock > 15)              {                _timePerBlock -= 15;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_DEFAULT_TIMEBLOCK:            {              _timePerBlock = 30;              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_TVGUIDE_INCREASE_DAY:            OnNextDay();            break;            case Action.ActionType.ACTION_TVGUIDE_DECREASE_DAY:            OnPreviousDay();            break;            // TV group changing actions          case Action.ActionType.ACTION_TVGUIDE_NEXT_GROUP:            OnChangeChannelGroup(1);            break;            case Action.ActionType.ACTION_TVGUIDE_PREV_GROUP:            OnChangeChannelGroup(-1);            break;        }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_singleChannelView)            {              OnSwitchMode(true);              return;            }            GUIWindowManager.ShowPreviousWindow();            return;            case Action.ActionType.ACTION_KEY_PRESSED:            if (action.m_key != null)            {              OnKeyCode((char)action.m_key.KeyChar);            }            break;            case Action.ActionType.ACTION_RECORD:            if ((GetFocusControlId() != -1) && (_cursorY > 0) && (_cursorX >= 0))            {              OnRecord();            }            break;            case Action.ActionType.ACTION_MOUSE_MOVE:            {              int x = (int)action.fAmount1;              int y = (int)action.fAmount2;              foreach (GUIControl control in controlList)              {                if (control.GetID >= (int)Controls.IMG_CHAN1 + 0 &&                    control.GetID <= (int)Controls.IMG_CHAN1 + _channelCount)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      UnFocus();                      _cursorX = control.GetID - (int)Controls.IMG_CHAN1;                      _cursorY = 0;                        if (_singleChannelNumber != _cursorX + ChannelOffset)                      {                        Update(false);                      }                      UpdateCurrentProgram();                      UpdateHorizontalScrollbar();                      UpdateVerticalScrollbar();                      updateSingleChannelNumber();                      return;                    }                  }                }                if (control.GetID >= GUIDE_COMPONENTID_START)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      int iControlId = control.GetID;                      if (iControlId >= GUIDE_COMPONENTID_START)                      {                        iControlId -= GUIDE_COMPONENTID_START;                        int iCursorY = (iControlId / RowID);                        iControlId -= iCursorY * RowID;                        if (iControlId % ColID == 0)                        {                          int iCursorX = (iControlId / ColID) + 1;                          if (iCursorY != _cursorX || iCursorX != _cursorY)                          {                            UnFocus();                            _cursorX = iCursorY;                            _cursorY = iCursorX;                            UpdateCurrentProgram();                            SetFocus();                            UpdateHorizontalScrollbar();                            UpdateVerticalScrollbar();                            updateSingleChannelNumber();                            return;                          }                          return;                        }                      }                    }                  }                }              }              UnFocus();              _cursorY = -1;              _cursorX = -1;              base.OnAction(action);            }            break;            case Action.ActionType.ACTION_TVGUIDE_RESET:            _cursorY = 0;            _viewingTime = DateTime.Now;            Update(false);            break;              case Action.ActionType.ACTION_CONTEXT_MENU:            {              if (_cursorY >= 0 && _cursorX >= 0)              {                if (_cursorY == 0)                {                  _backupSingleViewCursorX = _cursorX;                  OnSwitchMode(false);                  return;                }                else                {                  ShowContextMenu();                }              }              else              {                action.wID = Action.ActionType.ACTION_SELECT_ITEM;                GUIWindowManager.OnAction(action);              }            }            break;            case Action.ActionType.ACTION_PAGE_UP:            OnPageUp();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_PAGE_DOWN:            OnPageDown();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (_cursorX >= 0)              {                OnLeft();                updateSingleChannelNumber();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (_cursorX >= 0)              {                OnRight();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_UP:            {              if (_cursorX >= 0)              {                OnUp(true' false);                updateSingleChannelNumber();                UpdateVerticalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_DOWN:            {              if (_cursorX >= 0)              {                OnDown(true);                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              else              {                _cursorX = 0;                SetFocus();                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              return;            }            //break;          case Action.ActionType.ACTION_SHOW_INFO:            {              ShowContextMenu();            }            break;          case Action.ActionType.ACTION_INCREASE_TIMEBLOCK:            {              _timePerBlock += 15;              if (_timePerBlock > 60)              {                _timePerBlock = 60;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;            case Action.ActionType.ACTION_REWIND:          case Action.ActionType.ACTION_MUSIC_REWIND:            _viewingTime = _viewingTime.AddHours(-3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_FORWARD:          case Action.ActionType.ACTION_MUSIC_FORWARD:            _viewingTime = _viewingTime.AddHours(3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_DECREASE_TIMEBLOCK:            {              if (_timePerBlock > 15)              {                _timePerBlock -= 15;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_DEFAULT_TIMEBLOCK:            {              _timePerBlock = 30;              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_TVGUIDE_INCREASE_DAY:            OnNextDay();            break;            case Action.ActionType.ACTION_TVGUIDE_DECREASE_DAY:            OnPreviousDay();            break;            // TV group changing actions          case Action.ActionType.ACTION_TVGUIDE_NEXT_GROUP:            OnChangeChannelGroup(1);            break;            case Action.ActionType.ACTION_TVGUIDE_PREV_GROUP:            OnChangeChannelGroup(-1);            break;        }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_singleChannelView)            {              OnSwitchMode(true);              return;            }            GUIWindowManager.ShowPreviousWindow();            return;            case Action.ActionType.ACTION_KEY_PRESSED:            if (action.m_key != null)            {              OnKeyCode((char)action.m_key.KeyChar);            }            break;            case Action.ActionType.ACTION_RECORD:            if ((GetFocusControlId() != -1) && (_cursorY > 0) && (_cursorX >= 0))            {              OnRecord();            }            break;            case Action.ActionType.ACTION_MOUSE_MOVE:            {              int x = (int)action.fAmount1;              int y = (int)action.fAmount2;              foreach (GUIControl control in controlList)              {                if (control.GetID >= (int)Controls.IMG_CHAN1 + 0 &&                    control.GetID <= (int)Controls.IMG_CHAN1 + _channelCount)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      UnFocus();                      _cursorX = control.GetID - (int)Controls.IMG_CHAN1;                      _cursorY = 0;                        if (_singleChannelNumber != _cursorX + ChannelOffset)                      {                        Update(false);                      }                      UpdateCurrentProgram();                      UpdateHorizontalScrollbar();                      UpdateVerticalScrollbar();                      updateSingleChannelNumber();                      return;                    }                  }                }                if (control.GetID >= GUIDE_COMPONENTID_START)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      int iControlId = control.GetID;                      if (iControlId >= GUIDE_COMPONENTID_START)                      {                        iControlId -= GUIDE_COMPONENTID_START;                        int iCursorY = (iControlId / RowID);                        iControlId -= iCursorY * RowID;                        if (iControlId % ColID == 0)                        {                          int iCursorX = (iControlId / ColID) + 1;                          if (iCursorY != _cursorX || iCursorX != _cursorY)                          {                            UnFocus();                            _cursorX = iCursorY;                            _cursorY = iCursorX;                            UpdateCurrentProgram();                            SetFocus();                            UpdateHorizontalScrollbar();                            UpdateVerticalScrollbar();                            updateSingleChannelNumber();                            return;                          }                          return;                        }                      }                    }                  }                }              }              UnFocus();              _cursorY = -1;              _cursorX = -1;              base.OnAction(action);            }            break;            case Action.ActionType.ACTION_TVGUIDE_RESET:            _cursorY = 0;            _viewingTime = DateTime.Now;            Update(false);            break;              case Action.ActionType.ACTION_CONTEXT_MENU:            {              if (_cursorY >= 0 && _cursorX >= 0)              {                if (_cursorY == 0)                {                  _backupSingleViewCursorX = _cursorX;                  OnSwitchMode(false);                  return;                }                else                {                  ShowContextMenu();                }              }              else              {                action.wID = Action.ActionType.ACTION_SELECT_ITEM;                GUIWindowManager.OnAction(action);              }            }            break;            case Action.ActionType.ACTION_PAGE_UP:            OnPageUp();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_PAGE_DOWN:            OnPageDown();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (_cursorX >= 0)              {                OnLeft();                updateSingleChannelNumber();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (_cursorX >= 0)              {                OnRight();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_UP:            {              if (_cursorX >= 0)              {                OnUp(true' false);                updateSingleChannelNumber();                UpdateVerticalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_DOWN:            {              if (_cursorX >= 0)              {                OnDown(true);                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              else              {                _cursorX = 0;                SetFocus();                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              return;            }            //break;          case Action.ActionType.ACTION_SHOW_INFO:            {              ShowContextMenu();            }            break;          case Action.ActionType.ACTION_INCREASE_TIMEBLOCK:            {              _timePerBlock += 15;              if (_timePerBlock > 60)              {                _timePerBlock = 60;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;            case Action.ActionType.ACTION_REWIND:          case Action.ActionType.ACTION_MUSIC_REWIND:            _viewingTime = _viewingTime.AddHours(-3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_FORWARD:          case Action.ActionType.ACTION_MUSIC_FORWARD:            _viewingTime = _viewingTime.AddHours(3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_DECREASE_TIMEBLOCK:            {              if (_timePerBlock > 15)              {                _timePerBlock -= 15;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_DEFAULT_TIMEBLOCK:            {              _timePerBlock = 30;              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_TVGUIDE_INCREASE_DAY:            OnNextDay();            break;            case Action.ActionType.ACTION_TVGUIDE_DECREASE_DAY:            OnPreviousDay();            break;            // TV group changing actions          case Action.ActionType.ACTION_TVGUIDE_NEXT_GROUP:            OnChangeChannelGroup(1);            break;            case Action.ActionType.ACTION_TVGUIDE_PREV_GROUP:            OnChangeChannelGroup(-1);            break;        }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_singleChannelView)            {              OnSwitchMode(true);              return;            }            GUIWindowManager.ShowPreviousWindow();            return;            case Action.ActionType.ACTION_KEY_PRESSED:            if (action.m_key != null)            {              OnKeyCode((char)action.m_key.KeyChar);            }            break;            case Action.ActionType.ACTION_RECORD:            if ((GetFocusControlId() != -1) && (_cursorY > 0) && (_cursorX >= 0))            {              OnRecord();            }            break;            case Action.ActionType.ACTION_MOUSE_MOVE:            {              int x = (int)action.fAmount1;              int y = (int)action.fAmount2;              foreach (GUIControl control in controlList)              {                if (control.GetID >= (int)Controls.IMG_CHAN1 + 0 &&                    control.GetID <= (int)Controls.IMG_CHAN1 + _channelCount)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      UnFocus();                      _cursorX = control.GetID - (int)Controls.IMG_CHAN1;                      _cursorY = 0;                        if (_singleChannelNumber != _cursorX + ChannelOffset)                      {                        Update(false);                      }                      UpdateCurrentProgram();                      UpdateHorizontalScrollbar();                      UpdateVerticalScrollbar();                      updateSingleChannelNumber();                      return;                    }                  }                }                if (control.GetID >= GUIDE_COMPONENTID_START)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      int iControlId = control.GetID;                      if (iControlId >= GUIDE_COMPONENTID_START)                      {                        iControlId -= GUIDE_COMPONENTID_START;                        int iCursorY = (iControlId / RowID);                        iControlId -= iCursorY * RowID;                        if (iControlId % ColID == 0)                        {                          int iCursorX = (iControlId / ColID) + 1;                          if (iCursorY != _cursorX || iCursorX != _cursorY)                          {                            UnFocus();                            _cursorX = iCursorY;                            _cursorY = iCursorX;                            UpdateCurrentProgram();                            SetFocus();                            UpdateHorizontalScrollbar();                            UpdateVerticalScrollbar();                            updateSingleChannelNumber();                            return;                          }                          return;                        }                      }                    }                  }                }              }              UnFocus();              _cursorY = -1;              _cursorX = -1;              base.OnAction(action);            }            break;            case Action.ActionType.ACTION_TVGUIDE_RESET:            _cursorY = 0;            _viewingTime = DateTime.Now;            Update(false);            break;              case Action.ActionType.ACTION_CONTEXT_MENU:            {              if (_cursorY >= 0 && _cursorX >= 0)              {                if (_cursorY == 0)                {                  _backupSingleViewCursorX = _cursorX;                  OnSwitchMode(false);                  return;                }                else                {                  ShowContextMenu();                }              }              else              {                action.wID = Action.ActionType.ACTION_SELECT_ITEM;                GUIWindowManager.OnAction(action);              }            }            break;            case Action.ActionType.ACTION_PAGE_UP:            OnPageUp();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_PAGE_DOWN:            OnPageDown();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (_cursorX >= 0)              {                OnLeft();                updateSingleChannelNumber();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (_cursorX >= 0)              {                OnRight();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_UP:            {              if (_cursorX >= 0)              {                OnUp(true' false);                updateSingleChannelNumber();                UpdateVerticalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_DOWN:            {              if (_cursorX >= 0)              {                OnDown(true);                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              else              {                _cursorX = 0;                SetFocus();                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              return;            }            //break;          case Action.ActionType.ACTION_SHOW_INFO:            {              ShowContextMenu();            }            break;          case Action.ActionType.ACTION_INCREASE_TIMEBLOCK:            {              _timePerBlock += 15;              if (_timePerBlock > 60)              {                _timePerBlock = 60;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;            case Action.ActionType.ACTION_REWIND:          case Action.ActionType.ACTION_MUSIC_REWIND:            _viewingTime = _viewingTime.AddHours(-3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_FORWARD:          case Action.ActionType.ACTION_MUSIC_FORWARD:            _viewingTime = _viewingTime.AddHours(3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_DECREASE_TIMEBLOCK:            {              if (_timePerBlock > 15)              {                _timePerBlock -= 15;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_DEFAULT_TIMEBLOCK:            {              _timePerBlock = 30;              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_TVGUIDE_INCREASE_DAY:            OnNextDay();            break;            case Action.ActionType.ACTION_TVGUIDE_DECREASE_DAY:            OnPreviousDay();            break;            // TV group changing actions          case Action.ActionType.ACTION_TVGUIDE_NEXT_GROUP:            OnChangeChannelGroup(1);            break;            case Action.ActionType.ACTION_TVGUIDE_PREV_GROUP:            OnChangeChannelGroup(-1);            break;        }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_singleChannelView)            {              OnSwitchMode(true);              return;            }            GUIWindowManager.ShowPreviousWindow();            return;            case Action.ActionType.ACTION_KEY_PRESSED:            if (action.m_key != null)            {              OnKeyCode((char)action.m_key.KeyChar);            }            break;            case Action.ActionType.ACTION_RECORD:            if ((GetFocusControlId() != -1) && (_cursorY > 0) && (_cursorX >= 0))            {              OnRecord();            }            break;            case Action.ActionType.ACTION_MOUSE_MOVE:            {              int x = (int)action.fAmount1;              int y = (int)action.fAmount2;              foreach (GUIControl control in controlList)              {                if (control.GetID >= (int)Controls.IMG_CHAN1 + 0 &&                    control.GetID <= (int)Controls.IMG_CHAN1 + _channelCount)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      UnFocus();                      _cursorX = control.GetID - (int)Controls.IMG_CHAN1;                      _cursorY = 0;                        if (_singleChannelNumber != _cursorX + ChannelOffset)                      {                        Update(false);                      }                      UpdateCurrentProgram();                      UpdateHorizontalScrollbar();                      UpdateVerticalScrollbar();                      updateSingleChannelNumber();                      return;                    }                  }                }                if (control.GetID >= GUIDE_COMPONENTID_START)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      int iControlId = control.GetID;                      if (iControlId >= GUIDE_COMPONENTID_START)                      {                        iControlId -= GUIDE_COMPONENTID_START;                        int iCursorY = (iControlId / RowID);                        iControlId -= iCursorY * RowID;                        if (iControlId % ColID == 0)                        {                          int iCursorX = (iControlId / ColID) + 1;                          if (iCursorY != _cursorX || iCursorX != _cursorY)                          {                            UnFocus();                            _cursorX = iCursorY;                            _cursorY = iCursorX;                            UpdateCurrentProgram();                            SetFocus();                            UpdateHorizontalScrollbar();                            UpdateVerticalScrollbar();                            updateSingleChannelNumber();                            return;                          }                          return;                        }                      }                    }                  }                }              }              UnFocus();              _cursorY = -1;              _cursorX = -1;              base.OnAction(action);            }            break;            case Action.ActionType.ACTION_TVGUIDE_RESET:            _cursorY = 0;            _viewingTime = DateTime.Now;            Update(false);            break;              case Action.ActionType.ACTION_CONTEXT_MENU:            {              if (_cursorY >= 0 && _cursorX >= 0)              {                if (_cursorY == 0)                {                  _backupSingleViewCursorX = _cursorX;                  OnSwitchMode(false);                  return;                }                else                {                  ShowContextMenu();                }              }              else              {                action.wID = Action.ActionType.ACTION_SELECT_ITEM;                GUIWindowManager.OnAction(action);              }            }            break;            case Action.ActionType.ACTION_PAGE_UP:            OnPageUp();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_PAGE_DOWN:            OnPageDown();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (_cursorX >= 0)              {                OnLeft();                updateSingleChannelNumber();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (_cursorX >= 0)              {                OnRight();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_UP:            {              if (_cursorX >= 0)              {                OnUp(true' false);                updateSingleChannelNumber();                UpdateVerticalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_DOWN:            {              if (_cursorX >= 0)              {                OnDown(true);                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              else              {                _cursorX = 0;                SetFocus();                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              return;            }            //break;          case Action.ActionType.ACTION_SHOW_INFO:            {              ShowContextMenu();            }            break;          case Action.ActionType.ACTION_INCREASE_TIMEBLOCK:            {              _timePerBlock += 15;              if (_timePerBlock > 60)              {                _timePerBlock = 60;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;            case Action.ActionType.ACTION_REWIND:          case Action.ActionType.ACTION_MUSIC_REWIND:            _viewingTime = _viewingTime.AddHours(-3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_FORWARD:          case Action.ActionType.ACTION_MUSIC_FORWARD:            _viewingTime = _viewingTime.AddHours(3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_DECREASE_TIMEBLOCK:            {              if (_timePerBlock > 15)              {                _timePerBlock -= 15;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_DEFAULT_TIMEBLOCK:            {              _timePerBlock = 30;              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_TVGUIDE_INCREASE_DAY:            OnNextDay();            break;            case Action.ActionType.ACTION_TVGUIDE_DECREASE_DAY:            OnPreviousDay();            break;            // TV group changing actions          case Action.ActionType.ACTION_TVGUIDE_NEXT_GROUP:            OnChangeChannelGroup(1);            break;            case Action.ActionType.ACTION_TVGUIDE_PREV_GROUP:            OnChangeChannelGroup(-1);            break;        }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_singleChannelView)            {              OnSwitchMode(true);              return;            }            GUIWindowManager.ShowPreviousWindow();            return;            case Action.ActionType.ACTION_KEY_PRESSED:            if (action.m_key != null)            {              OnKeyCode((char)action.m_key.KeyChar);            }            break;            case Action.ActionType.ACTION_RECORD:            if ((GetFocusControlId() != -1) && (_cursorY > 0) && (_cursorX >= 0))            {              OnRecord();            }            break;            case Action.ActionType.ACTION_MOUSE_MOVE:            {              int x = (int)action.fAmount1;              int y = (int)action.fAmount2;              foreach (GUIControl control in controlList)              {                if (control.GetID >= (int)Controls.IMG_CHAN1 + 0 &&                    control.GetID <= (int)Controls.IMG_CHAN1 + _channelCount)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      UnFocus();                      _cursorX = control.GetID - (int)Controls.IMG_CHAN1;                      _cursorY = 0;                        if (_singleChannelNumber != _cursorX + ChannelOffset)                      {                        Update(false);                      }                      UpdateCurrentProgram();                      UpdateHorizontalScrollbar();                      UpdateVerticalScrollbar();                      updateSingleChannelNumber();                      return;                    }                  }                }                if (control.GetID >= GUIDE_COMPONENTID_START)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      int iControlId = control.GetID;                      if (iControlId >= GUIDE_COMPONENTID_START)                      {                        iControlId -= GUIDE_COMPONENTID_START;                        int iCursorY = (iControlId / RowID);                        iControlId -= iCursorY * RowID;                        if (iControlId % ColID == 0)                        {                          int iCursorX = (iControlId / ColID) + 1;                          if (iCursorY != _cursorX || iCursorX != _cursorY)                          {                            UnFocus();                            _cursorX = iCursorY;                            _cursorY = iCursorX;                            UpdateCurrentProgram();                            SetFocus();                            UpdateHorizontalScrollbar();                            UpdateVerticalScrollbar();                            updateSingleChannelNumber();                            return;                          }                          return;                        }                      }                    }                  }                }              }              UnFocus();              _cursorY = -1;              _cursorX = -1;              base.OnAction(action);            }            break;            case Action.ActionType.ACTION_TVGUIDE_RESET:            _cursorY = 0;            _viewingTime = DateTime.Now;            Update(false);            break;              case Action.ActionType.ACTION_CONTEXT_MENU:            {              if (_cursorY >= 0 && _cursorX >= 0)              {                if (_cursorY == 0)                {                  _backupSingleViewCursorX = _cursorX;                  OnSwitchMode(false);                  return;                }                else                {                  ShowContextMenu();                }              }              else              {                action.wID = Action.ActionType.ACTION_SELECT_ITEM;                GUIWindowManager.OnAction(action);              }            }            break;            case Action.ActionType.ACTION_PAGE_UP:            OnPageUp();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_PAGE_DOWN:            OnPageDown();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (_cursorX >= 0)              {                OnLeft();                updateSingleChannelNumber();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (_cursorX >= 0)              {                OnRight();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_UP:            {              if (_cursorX >= 0)              {                OnUp(true' false);                updateSingleChannelNumber();                UpdateVerticalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_DOWN:            {              if (_cursorX >= 0)              {                OnDown(true);                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              else              {                _cursorX = 0;                SetFocus();                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              return;            }            //break;          case Action.ActionType.ACTION_SHOW_INFO:            {              ShowContextMenu();            }            break;          case Action.ActionType.ACTION_INCREASE_TIMEBLOCK:            {              _timePerBlock += 15;              if (_timePerBlock > 60)              {                _timePerBlock = 60;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;            case Action.ActionType.ACTION_REWIND:          case Action.ActionType.ACTION_MUSIC_REWIND:            _viewingTime = _viewingTime.AddHours(-3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_FORWARD:          case Action.ActionType.ACTION_MUSIC_FORWARD:            _viewingTime = _viewingTime.AddHours(3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_DECREASE_TIMEBLOCK:            {              if (_timePerBlock > 15)              {                _timePerBlock -= 15;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_DEFAULT_TIMEBLOCK:            {              _timePerBlock = 30;              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_TVGUIDE_INCREASE_DAY:            OnNextDay();            break;            case Action.ActionType.ACTION_TVGUIDE_DECREASE_DAY:            OnPreviousDay();            break;            // TV group changing actions          case Action.ActionType.ACTION_TVGUIDE_NEXT_GROUP:            OnChangeChannelGroup(1);            break;            case Action.ActionType.ACTION_TVGUIDE_PREV_GROUP:            OnChangeChannelGroup(-1);            break;        }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_singleChannelView)            {              OnSwitchMode(true);              return;            }            GUIWindowManager.ShowPreviousWindow();            return;            case Action.ActionType.ACTION_KEY_PRESSED:            if (action.m_key != null)            {              OnKeyCode((char)action.m_key.KeyChar);            }            break;            case Action.ActionType.ACTION_RECORD:            if ((GetFocusControlId() != -1) && (_cursorY > 0) && (_cursorX >= 0))            {              OnRecord();            }            break;            case Action.ActionType.ACTION_MOUSE_MOVE:            {              int x = (int)action.fAmount1;              int y = (int)action.fAmount2;              foreach (GUIControl control in controlList)              {                if (control.GetID >= (int)Controls.IMG_CHAN1 + 0 &&                    control.GetID <= (int)Controls.IMG_CHAN1 + _channelCount)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      UnFocus();                      _cursorX = control.GetID - (int)Controls.IMG_CHAN1;                      _cursorY = 0;                        if (_singleChannelNumber != _cursorX + ChannelOffset)                      {                        Update(false);                      }                      UpdateCurrentProgram();                      UpdateHorizontalScrollbar();                      UpdateVerticalScrollbar();                      updateSingleChannelNumber();                      return;                    }                  }                }                if (control.GetID >= GUIDE_COMPONENTID_START)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      int iControlId = control.GetID;                      if (iControlId >= GUIDE_COMPONENTID_START)                      {                        iControlId -= GUIDE_COMPONENTID_START;                        int iCursorY = (iControlId / RowID);                        iControlId -= iCursorY * RowID;                        if (iControlId % ColID == 0)                        {                          int iCursorX = (iControlId / ColID) + 1;                          if (iCursorY != _cursorX || iCursorX != _cursorY)                          {                            UnFocus();                            _cursorX = iCursorY;                            _cursorY = iCursorX;                            UpdateCurrentProgram();                            SetFocus();                            UpdateHorizontalScrollbar();                            UpdateVerticalScrollbar();                            updateSingleChannelNumber();                            return;                          }                          return;                        }                      }                    }                  }                }              }              UnFocus();              _cursorY = -1;              _cursorX = -1;              base.OnAction(action);            }            break;            case Action.ActionType.ACTION_TVGUIDE_RESET:            _cursorY = 0;            _viewingTime = DateTime.Now;            Update(false);            break;              case Action.ActionType.ACTION_CONTEXT_MENU:            {              if (_cursorY >= 0 && _cursorX >= 0)              {                if (_cursorY == 0)                {                  _backupSingleViewCursorX = _cursorX;                  OnSwitchMode(false);                  return;                }                else                {                  ShowContextMenu();                }              }              else              {                action.wID = Action.ActionType.ACTION_SELECT_ITEM;                GUIWindowManager.OnAction(action);              }            }            break;            case Action.ActionType.ACTION_PAGE_UP:            OnPageUp();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_PAGE_DOWN:            OnPageDown();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (_cursorX >= 0)              {                OnLeft();                updateSingleChannelNumber();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (_cursorX >= 0)              {                OnRight();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_UP:            {              if (_cursorX >= 0)              {                OnUp(true' false);                updateSingleChannelNumber();                UpdateVerticalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_DOWN:            {              if (_cursorX >= 0)              {                OnDown(true);                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              else              {                _cursorX = 0;                SetFocus();                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              return;            }            //break;          case Action.ActionType.ACTION_SHOW_INFO:            {              ShowContextMenu();            }            break;          case Action.ActionType.ACTION_INCREASE_TIMEBLOCK:            {              _timePerBlock += 15;              if (_timePerBlock > 60)              {                _timePerBlock = 60;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;            case Action.ActionType.ACTION_REWIND:          case Action.ActionType.ACTION_MUSIC_REWIND:            _viewingTime = _viewingTime.AddHours(-3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_FORWARD:          case Action.ActionType.ACTION_MUSIC_FORWARD:            _viewingTime = _viewingTime.AddHours(3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_DECREASE_TIMEBLOCK:            {              if (_timePerBlock > 15)              {                _timePerBlock -= 15;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_DEFAULT_TIMEBLOCK:            {              _timePerBlock = 30;              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_TVGUIDE_INCREASE_DAY:            OnNextDay();            break;            case Action.ActionType.ACTION_TVGUIDE_DECREASE_DAY:            OnPreviousDay();            break;            // TV group changing actions          case Action.ActionType.ACTION_TVGUIDE_NEXT_GROUP:            OnChangeChannelGroup(1);            break;            case Action.ActionType.ACTION_TVGUIDE_PREV_GROUP:            OnChangeChannelGroup(-1);            break;        }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_singleChannelView)            {              OnSwitchMode(true);              return;            }            GUIWindowManager.ShowPreviousWindow();            return;            case Action.ActionType.ACTION_KEY_PRESSED:            if (action.m_key != null)            {              OnKeyCode((char)action.m_key.KeyChar);            }            break;            case Action.ActionType.ACTION_RECORD:            if ((GetFocusControlId() != -1) && (_cursorY > 0) && (_cursorX >= 0))            {              OnRecord();            }            break;            case Action.ActionType.ACTION_MOUSE_MOVE:            {              int x = (int)action.fAmount1;              int y = (int)action.fAmount2;              foreach (GUIControl control in controlList)              {                if (control.GetID >= (int)Controls.IMG_CHAN1 + 0 &&                    control.GetID <= (int)Controls.IMG_CHAN1 + _channelCount)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      UnFocus();                      _cursorX = control.GetID - (int)Controls.IMG_CHAN1;                      _cursorY = 0;                        if (_singleChannelNumber != _cursorX + ChannelOffset)                      {                        Update(false);                      }                      UpdateCurrentProgram();                      UpdateHorizontalScrollbar();                      UpdateVerticalScrollbar();                      updateSingleChannelNumber();                      return;                    }                  }                }                if (control.GetID >= GUIDE_COMPONENTID_START)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      int iControlId = control.GetID;                      if (iControlId >= GUIDE_COMPONENTID_START)                      {                        iControlId -= GUIDE_COMPONENTID_START;                        int iCursorY = (iControlId / RowID);                        iControlId -= iCursorY * RowID;                        if (iControlId % ColID == 0)                        {                          int iCursorX = (iControlId / ColID) + 1;                          if (iCursorY != _cursorX || iCursorX != _cursorY)                          {                            UnFocus();                            _cursorX = iCursorY;                            _cursorY = iCursorX;                            UpdateCurrentProgram();                            SetFocus();                            UpdateHorizontalScrollbar();                            UpdateVerticalScrollbar();                            updateSingleChannelNumber();                            return;                          }                          return;                        }                      }                    }                  }                }              }              UnFocus();              _cursorY = -1;              _cursorX = -1;              base.OnAction(action);            }            break;            case Action.ActionType.ACTION_TVGUIDE_RESET:            _cursorY = 0;            _viewingTime = DateTime.Now;            Update(false);            break;              case Action.ActionType.ACTION_CONTEXT_MENU:            {              if (_cursorY >= 0 && _cursorX >= 0)              {                if (_cursorY == 0)                {                  _backupSingleViewCursorX = _cursorX;                  OnSwitchMode(false);                  return;                }                else                {                  ShowContextMenu();                }              }              else              {                action.wID = Action.ActionType.ACTION_SELECT_ITEM;                GUIWindowManager.OnAction(action);              }            }            break;            case Action.ActionType.ACTION_PAGE_UP:            OnPageUp();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_PAGE_DOWN:            OnPageDown();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (_cursorX >= 0)              {                OnLeft();                updateSingleChannelNumber();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (_cursorX >= 0)              {                OnRight();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_UP:            {              if (_cursorX >= 0)              {                OnUp(true' false);                updateSingleChannelNumber();                UpdateVerticalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_DOWN:            {              if (_cursorX >= 0)              {                OnDown(true);                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              else              {                _cursorX = 0;                SetFocus();                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              return;            }            //break;          case Action.ActionType.ACTION_SHOW_INFO:            {              ShowContextMenu();            }            break;          case Action.ActionType.ACTION_INCREASE_TIMEBLOCK:            {              _timePerBlock += 15;              if (_timePerBlock > 60)              {                _timePerBlock = 60;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;            case Action.ActionType.ACTION_REWIND:          case Action.ActionType.ACTION_MUSIC_REWIND:            _viewingTime = _viewingTime.AddHours(-3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_FORWARD:          case Action.ActionType.ACTION_MUSIC_FORWARD:            _viewingTime = _viewingTime.AddHours(3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_DECREASE_TIMEBLOCK:            {              if (_timePerBlock > 15)              {                _timePerBlock -= 15;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_DEFAULT_TIMEBLOCK:            {              _timePerBlock = 30;              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_TVGUIDE_INCREASE_DAY:            OnNextDay();            break;            case Action.ActionType.ACTION_TVGUIDE_DECREASE_DAY:            OnPreviousDay();            break;            // TV group changing actions          case Action.ActionType.ACTION_TVGUIDE_NEXT_GROUP:            OnChangeChannelGroup(1);            break;            case Action.ActionType.ACTION_TVGUIDE_PREV_GROUP:            OnChangeChannelGroup(-1);            break;        }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnMessage,The following statement contains a magic number: switch (message.Message)          {            case GUIMessage.MessageType.GUI_MSG_PERCENTAGE_CHANGED:              if (message.SenderControlId == (int)Controls.HORZ_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                fPercentage *= 24.0f;                fPercentage *= 60.0f;                _viewingTime = new DateTime(_viewingTime.Year' _viewingTime.Month' _viewingTime.Day' 0' 0' 0' 0);                _viewingTime = _viewingTime.AddMinutes((int)fPercentage);              }                if (message.SenderControlId == (int)Controls.VERT_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                if (_singleChannelView)                {                  fPercentage *= (float)_totalProgramCount;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }                else                {                  fPercentage *= (float)_channelList.Count;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }              }              break;              case GUIMessage.MessageType.GUI_MSG_SKIN_CHANGED:              {                base.OnMessage(message);                _guideColorsLoaded = false;                return true;              }              case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:              {                if (!_singleChannelView)                {                  base.OnMessage(message);                  SaveSettings();                  if (_recordingList != null && TVHome.Connected)                  {                    _recordingList.Clear();                  }                    _controls = new Dictionary<int' GUIButton3PartControl>();                  _channelList = null;                  _recordingList = null;                  _currentProgram = null;                }                  return true;              }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:              {                  if (!TVHome.Connected)                {                  RemoteControl.Clear();                  GUIWindowManager.ActivateWindow((int)Window.WINDOW_SETTINGS_TVENGINE);                  return false;                }                  TVHome.WaitForGentleConnection();                  if (TVHome.Navigator == null)                {                  TVHome.OnLoaded();                }                else if (TVHome.Navigator.Channel == null)                {                  TVHome.m_navigator.ReLoad();                  TVHome.LoadSettings(false);                }                  // Create the channel navigator (it will load groups and channels)                if (TVHome.m_navigator == null)                {                  TVHome.m_navigator = new ChannelNavigator();                }                  GUIPropertyManager.SetProperty("#itemcount"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem2"' string.Empty);                GUIPropertyManager.SetProperty("#selectedthumb"' string.Empty);                  if (_shouldRestore)                {                  DoRestoreSkin();                }                else                {                  LoadSkin();                  AllocResources();                }                  InitControls();                  base.OnMessage(message);                  UpdateOverlayAllowed();                GUIGraphicsContext.Overlay = _isOverlayAllowed;                  // set topbar autohide                switch (_autoHideTopbarType)                {                  case AutoHideTopBar.No:                    _autoHideTopbar = false;                    break;                  case AutoHideTopBar.Yes:                    _autoHideTopbar = true;                    break;                  default:                    _autoHideTopbar = GUIGraphicsContext.DefaultTopBarHide;                    break;                }                GUIGraphicsContext.AutoHideTopBar = _autoHideTopbar;                GUIGraphicsContext.TopBarHidden = _autoHideTopbar;                GUIGraphicsContext.DisableTopBar = _disableTopBar;                UpdateChannelCount();                  // Loading tvguide settings will overwrite the guide cursor position.  If we are coming back from the program info window (where                // recording selections are made) we would like to reposition the cursor to the program from which we invoked the                // program info window; the user comes back to where they started.  To do this we need to save and restore the cursor                // position after loading tvguide settings.                _backupCursorX = _cursorX;                _backupCursorY = _cursorY;                _backupChannelOffset = ChannelOffset;                  LoadSettings();                  if (message.Param1 == (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  _cursorX = _backupCursorX;                  _cursorY = _backupCursorY;                  ChannelOffset = _backupChannelOffset;                }                  LoadSchedules(true);                _currentProgram = null;                if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  _viewingTime = DateTime.Now;                  _singleChannelView = false;                  _showChannelLogos = false;                  if (TVHome.Card.IsTimeShifting)                  {                    _currentChannel = TVHome.Navigator.Channel;                    PositionGuideCursorToCurrentChannel();                  }                }                // Mantis 3579: the above lines can lead to too large channeloffset.                 // Now we check if the offset is too large' and if it is' we reduce it and increase the cursor position accordingly                if (!_guideContinuousScroll && (ChannelOffset > _channelList.Count - _channelCount))                {                  _cursorX += ChannelOffset - (_channelList.Count - _channelCount);                  ChannelOffset = _channelList.Count - _channelCount;                }                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                if (cntlDay != null)                {                  DateTime dtNow = DateTime.Now;                  cntlDay.Reset();                  cntlDay.SetRange(0' MaxDaysInGuide - 1);                  for (int iDay = 0; iDay < MaxDaysInGuide; iDay++)                  {                    DateTime dtTemp = dtNow.AddDays(iDay);                    string day = Utils.GetShortDayString(dtTemp);                    cntlDay.AddLabel(day' iDay);                  }                }                else                {                  Log.Debug("TvGuideBase: SpinControl cntlDay is null!");                }                  GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                if (cntlTimeInterval != null)                {                  cntlTimeInterval.Reset();                  for (int i = 1; i <= 4; i++)                  {                    cntlTimeInterval.AddLabel(String.Empty' i);                  }                  cntlTimeInterval.Value = (_timePerBlock / 15) - 1;                }                else                {                  Log.Debug("TvGuideBase: SpinControl cntlTimeInterval is null!");                }                  InitGenreKey();                  if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  Update(true);                }                else                {                  Update(false);                }                  SetFocus();                  if (_currentProgram != null)                {                  m_dtStartTime = _currentProgram.StartTime;                }                UpdateCurrentProgram();                return true;              }              //break;              case GUIMessage.MessageType.GUI_MSG_CLICKED:              int iControl = message.SenderControlId;              if (iControl == (int)Controls.SPINCONTROL_DAY)              {                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                int iDay = cntlDay.Value;                  _viewingTime = DateTime.Now;                _viewingTime = new DateTime(DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' _viewingTime.Hour'                                            _viewingTime.Minute' 0' 0);                _viewingTime = _viewingTime.AddDays(iDay);                _recalculateProgramOffset = true;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.SPINCONTROL_TIME_INTERVAL)              {                GUISpinControl cntlTimeInt = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                int iInterval = (cntlTimeInt.Value) + 1;                if (iInterval > 4)                {                  iInterval = 4;                }                _timePerBlock = iInterval * 15;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.CHANNEL_GROUP_BUTTON)              {                OnSelectChannelGroup();                return true;              }              if (iControl >= GUIDE_COMPONENTID_START)              {                if (OnSelectItem(true))                {                  // Tuning a channel was attempted.  Save the channel setting to ensure that the guide channel selection is in sync                  // with the desired (the channel may not be playing) channel selection.                  SaveSettings();                  Update(false);                  SetFocus();                }              }              else if (_cursorY == 0)              {                _backupSingleViewCursorX = _cursorX;                OnSwitchMode(false);              }              break;          }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnMessage,The following statement contains a magic number: switch (message.Message)          {            case GUIMessage.MessageType.GUI_MSG_PERCENTAGE_CHANGED:              if (message.SenderControlId == (int)Controls.HORZ_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                fPercentage *= 24.0f;                fPercentage *= 60.0f;                _viewingTime = new DateTime(_viewingTime.Year' _viewingTime.Month' _viewingTime.Day' 0' 0' 0' 0);                _viewingTime = _viewingTime.AddMinutes((int)fPercentage);              }                if (message.SenderControlId == (int)Controls.VERT_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                if (_singleChannelView)                {                  fPercentage *= (float)_totalProgramCount;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }                else                {                  fPercentage *= (float)_channelList.Count;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }              }              break;              case GUIMessage.MessageType.GUI_MSG_SKIN_CHANGED:              {                base.OnMessage(message);                _guideColorsLoaded = false;                return true;              }              case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:              {                if (!_singleChannelView)                {                  base.OnMessage(message);                  SaveSettings();                  if (_recordingList != null && TVHome.Connected)                  {                    _recordingList.Clear();                  }                    _controls = new Dictionary<int' GUIButton3PartControl>();                  _channelList = null;                  _recordingList = null;                  _currentProgram = null;                }                  return true;              }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:              {                  if (!TVHome.Connected)                {                  RemoteControl.Clear();                  GUIWindowManager.ActivateWindow((int)Window.WINDOW_SETTINGS_TVENGINE);                  return false;                }                  TVHome.WaitForGentleConnection();                  if (TVHome.Navigator == null)                {                  TVHome.OnLoaded();                }                else if (TVHome.Navigator.Channel == null)                {                  TVHome.m_navigator.ReLoad();                  TVHome.LoadSettings(false);                }                  // Create the channel navigator (it will load groups and channels)                if (TVHome.m_navigator == null)                {                  TVHome.m_navigator = new ChannelNavigator();                }                  GUIPropertyManager.SetProperty("#itemcount"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem2"' string.Empty);                GUIPropertyManager.SetProperty("#selectedthumb"' string.Empty);                  if (_shouldRestore)                {                  DoRestoreSkin();                }                else                {                  LoadSkin();                  AllocResources();                }                  InitControls();                  base.OnMessage(message);                  UpdateOverlayAllowed();                GUIGraphicsContext.Overlay = _isOverlayAllowed;                  // set topbar autohide                switch (_autoHideTopbarType)                {                  case AutoHideTopBar.No:                    _autoHideTopbar = false;                    break;                  case AutoHideTopBar.Yes:                    _autoHideTopbar = true;                    break;                  default:                    _autoHideTopbar = GUIGraphicsContext.DefaultTopBarHide;                    break;                }                GUIGraphicsContext.AutoHideTopBar = _autoHideTopbar;                GUIGraphicsContext.TopBarHidden = _autoHideTopbar;                GUIGraphicsContext.DisableTopBar = _disableTopBar;                UpdateChannelCount();                  // Loading tvguide settings will overwrite the guide cursor position.  If we are coming back from the program info window (where                // recording selections are made) we would like to reposition the cursor to the program from which we invoked the                // program info window; the user comes back to where they started.  To do this we need to save and restore the cursor                // position after loading tvguide settings.                _backupCursorX = _cursorX;                _backupCursorY = _cursorY;                _backupChannelOffset = ChannelOffset;                  LoadSettings();                  if (message.Param1 == (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  _cursorX = _backupCursorX;                  _cursorY = _backupCursorY;                  ChannelOffset = _backupChannelOffset;                }                  LoadSchedules(true);                _currentProgram = null;                if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  _viewingTime = DateTime.Now;                  _singleChannelView = false;                  _showChannelLogos = false;                  if (TVHome.Card.IsTimeShifting)                  {                    _currentChannel = TVHome.Navigator.Channel;                    PositionGuideCursorToCurrentChannel();                  }                }                // Mantis 3579: the above lines can lead to too large channeloffset.                 // Now we check if the offset is too large' and if it is' we reduce it and increase the cursor position accordingly                if (!_guideContinuousScroll && (ChannelOffset > _channelList.Count - _channelCount))                {                  _cursorX += ChannelOffset - (_channelList.Count - _channelCount);                  ChannelOffset = _channelList.Count - _channelCount;                }                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                if (cntlDay != null)                {                  DateTime dtNow = DateTime.Now;                  cntlDay.Reset();                  cntlDay.SetRange(0' MaxDaysInGuide - 1);                  for (int iDay = 0; iDay < MaxDaysInGuide; iDay++)                  {                    DateTime dtTemp = dtNow.AddDays(iDay);                    string day = Utils.GetShortDayString(dtTemp);                    cntlDay.AddLabel(day' iDay);                  }                }                else                {                  Log.Debug("TvGuideBase: SpinControl cntlDay is null!");                }                  GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                if (cntlTimeInterval != null)                {                  cntlTimeInterval.Reset();                  for (int i = 1; i <= 4; i++)                  {                    cntlTimeInterval.AddLabel(String.Empty' i);                  }                  cntlTimeInterval.Value = (_timePerBlock / 15) - 1;                }                else                {                  Log.Debug("TvGuideBase: SpinControl cntlTimeInterval is null!");                }                  InitGenreKey();                  if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  Update(true);                }                else                {                  Update(false);                }                  SetFocus();                  if (_currentProgram != null)                {                  m_dtStartTime = _currentProgram.StartTime;                }                UpdateCurrentProgram();                return true;              }              //break;              case GUIMessage.MessageType.GUI_MSG_CLICKED:              int iControl = message.SenderControlId;              if (iControl == (int)Controls.SPINCONTROL_DAY)              {                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                int iDay = cntlDay.Value;                  _viewingTime = DateTime.Now;                _viewingTime = new DateTime(DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' _viewingTime.Hour'                                            _viewingTime.Minute' 0' 0);                _viewingTime = _viewingTime.AddDays(iDay);                _recalculateProgramOffset = true;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.SPINCONTROL_TIME_INTERVAL)              {                GUISpinControl cntlTimeInt = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                int iInterval = (cntlTimeInt.Value) + 1;                if (iInterval > 4)                {                  iInterval = 4;                }                _timePerBlock = iInterval * 15;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.CHANNEL_GROUP_BUTTON)              {                OnSelectChannelGroup();                return true;              }              if (iControl >= GUIDE_COMPONENTID_START)              {                if (OnSelectItem(true))                {                  // Tuning a channel was attempted.  Save the channel setting to ensure that the guide channel selection is in sync                  // with the desired (the channel may not be playing) channel selection.                  SaveSettings();                  Update(false);                  SetFocus();                }              }              else if (_cursorY == 0)              {                _backupSingleViewCursorX = _cursorX;                OnSwitchMode(false);              }              break;          }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnMessage,The following statement contains a magic number: switch (message.Message)          {            case GUIMessage.MessageType.GUI_MSG_PERCENTAGE_CHANGED:              if (message.SenderControlId == (int)Controls.HORZ_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                fPercentage *= 24.0f;                fPercentage *= 60.0f;                _viewingTime = new DateTime(_viewingTime.Year' _viewingTime.Month' _viewingTime.Day' 0' 0' 0' 0);                _viewingTime = _viewingTime.AddMinutes((int)fPercentage);              }                if (message.SenderControlId == (int)Controls.VERT_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                if (_singleChannelView)                {                  fPercentage *= (float)_totalProgramCount;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }                else                {                  fPercentage *= (float)_channelList.Count;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }              }              break;              case GUIMessage.MessageType.GUI_MSG_SKIN_CHANGED:              {                base.OnMessage(message);                _guideColorsLoaded = false;                return true;              }              case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:              {                if (!_singleChannelView)                {                  base.OnMessage(message);                  SaveSettings();                  if (_recordingList != null && TVHome.Connected)                  {                    _recordingList.Clear();                  }                    _controls = new Dictionary<int' GUIButton3PartControl>();                  _channelList = null;                  _recordingList = null;                  _currentProgram = null;                }                  return true;              }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:              {                  if (!TVHome.Connected)                {                  RemoteControl.Clear();                  GUIWindowManager.ActivateWindow((int)Window.WINDOW_SETTINGS_TVENGINE);                  return false;                }                  TVHome.WaitForGentleConnection();                  if (TVHome.Navigator == null)                {                  TVHome.OnLoaded();                }                else if (TVHome.Navigator.Channel == null)                {                  TVHome.m_navigator.ReLoad();                  TVHome.LoadSettings(false);                }                  // Create the channel navigator (it will load groups and channels)                if (TVHome.m_navigator == null)                {                  TVHome.m_navigator = new ChannelNavigator();                }                  GUIPropertyManager.SetProperty("#itemcount"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem2"' string.Empty);                GUIPropertyManager.SetProperty("#selectedthumb"' string.Empty);                  if (_shouldRestore)                {                  DoRestoreSkin();                }                else                {                  LoadSkin();                  AllocResources();                }                  InitControls();                  base.OnMessage(message);                  UpdateOverlayAllowed();                GUIGraphicsContext.Overlay = _isOverlayAllowed;                  // set topbar autohide                switch (_autoHideTopbarType)                {                  case AutoHideTopBar.No:                    _autoHideTopbar = false;                    break;                  case AutoHideTopBar.Yes:                    _autoHideTopbar = true;                    break;                  default:                    _autoHideTopbar = GUIGraphicsContext.DefaultTopBarHide;                    break;                }                GUIGraphicsContext.AutoHideTopBar = _autoHideTopbar;                GUIGraphicsContext.TopBarHidden = _autoHideTopbar;                GUIGraphicsContext.DisableTopBar = _disableTopBar;                UpdateChannelCount();                  // Loading tvguide settings will overwrite the guide cursor position.  If we are coming back from the program info window (where                // recording selections are made) we would like to reposition the cursor to the program from which we invoked the                // program info window; the user comes back to where they started.  To do this we need to save and restore the cursor                // position after loading tvguide settings.                _backupCursorX = _cursorX;                _backupCursorY = _cursorY;                _backupChannelOffset = ChannelOffset;                  LoadSettings();                  if (message.Param1 == (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  _cursorX = _backupCursorX;                  _cursorY = _backupCursorY;                  ChannelOffset = _backupChannelOffset;                }                  LoadSchedules(true);                _currentProgram = null;                if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  _viewingTime = DateTime.Now;                  _singleChannelView = false;                  _showChannelLogos = false;                  if (TVHome.Card.IsTimeShifting)                  {                    _currentChannel = TVHome.Navigator.Channel;                    PositionGuideCursorToCurrentChannel();                  }                }                // Mantis 3579: the above lines can lead to too large channeloffset.                 // Now we check if the offset is too large' and if it is' we reduce it and increase the cursor position accordingly                if (!_guideContinuousScroll && (ChannelOffset > _channelList.Count - _channelCount))                {                  _cursorX += ChannelOffset - (_channelList.Count - _channelCount);                  ChannelOffset = _channelList.Count - _channelCount;                }                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                if (cntlDay != null)                {                  DateTime dtNow = DateTime.Now;                  cntlDay.Reset();                  cntlDay.SetRange(0' MaxDaysInGuide - 1);                  for (int iDay = 0; iDay < MaxDaysInGuide; iDay++)                  {                    DateTime dtTemp = dtNow.AddDays(iDay);                    string day = Utils.GetShortDayString(dtTemp);                    cntlDay.AddLabel(day' iDay);                  }                }                else                {                  Log.Debug("TvGuideBase: SpinControl cntlDay is null!");                }                  GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                if (cntlTimeInterval != null)                {                  cntlTimeInterval.Reset();                  for (int i = 1; i <= 4; i++)                  {                    cntlTimeInterval.AddLabel(String.Empty' i);                  }                  cntlTimeInterval.Value = (_timePerBlock / 15) - 1;                }                else                {                  Log.Debug("TvGuideBase: SpinControl cntlTimeInterval is null!");                }                  InitGenreKey();                  if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  Update(true);                }                else                {                  Update(false);                }                  SetFocus();                  if (_currentProgram != null)                {                  m_dtStartTime = _currentProgram.StartTime;                }                UpdateCurrentProgram();                return true;              }              //break;              case GUIMessage.MessageType.GUI_MSG_CLICKED:              int iControl = message.SenderControlId;              if (iControl == (int)Controls.SPINCONTROL_DAY)              {                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                int iDay = cntlDay.Value;                  _viewingTime = DateTime.Now;                _viewingTime = new DateTime(DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' _viewingTime.Hour'                                            _viewingTime.Minute' 0' 0);                _viewingTime = _viewingTime.AddDays(iDay);                _recalculateProgramOffset = true;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.SPINCONTROL_TIME_INTERVAL)              {                GUISpinControl cntlTimeInt = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                int iInterval = (cntlTimeInt.Value) + 1;                if (iInterval > 4)                {                  iInterval = 4;                }                _timePerBlock = iInterval * 15;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.CHANNEL_GROUP_BUTTON)              {                OnSelectChannelGroup();                return true;              }              if (iControl >= GUIDE_COMPONENTID_START)              {                if (OnSelectItem(true))                {                  // Tuning a channel was attempted.  Save the channel setting to ensure that the guide channel selection is in sync                  // with the desired (the channel may not be playing) channel selection.                  SaveSettings();                  Update(false);                  SetFocus();                }              }              else if (_cursorY == 0)              {                _backupSingleViewCursorX = _cursorX;                OnSwitchMode(false);              }              break;          }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnMessage,The following statement contains a magic number: switch (message.Message)          {            case GUIMessage.MessageType.GUI_MSG_PERCENTAGE_CHANGED:              if (message.SenderControlId == (int)Controls.HORZ_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                fPercentage *= 24.0f;                fPercentage *= 60.0f;                _viewingTime = new DateTime(_viewingTime.Year' _viewingTime.Month' _viewingTime.Day' 0' 0' 0' 0);                _viewingTime = _viewingTime.AddMinutes((int)fPercentage);              }                if (message.SenderControlId == (int)Controls.VERT_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                if (_singleChannelView)                {                  fPercentage *= (float)_totalProgramCount;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }                else                {                  fPercentage *= (float)_channelList.Count;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }              }              break;              case GUIMessage.MessageType.GUI_MSG_SKIN_CHANGED:              {                base.OnMessage(message);                _guideColorsLoaded = false;                return true;              }              case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:              {                if (!_singleChannelView)                {                  base.OnMessage(message);                  SaveSettings();                  if (_recordingList != null && TVHome.Connected)                  {                    _recordingList.Clear();                  }                    _controls = new Dictionary<int' GUIButton3PartControl>();                  _channelList = null;                  _recordingList = null;                  _currentProgram = null;                }                  return true;              }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:              {                  if (!TVHome.Connected)                {                  RemoteControl.Clear();                  GUIWindowManager.ActivateWindow((int)Window.WINDOW_SETTINGS_TVENGINE);                  return false;                }                  TVHome.WaitForGentleConnection();                  if (TVHome.Navigator == null)                {                  TVHome.OnLoaded();                }                else if (TVHome.Navigator.Channel == null)                {                  TVHome.m_navigator.ReLoad();                  TVHome.LoadSettings(false);                }                  // Create the channel navigator (it will load groups and channels)                if (TVHome.m_navigator == null)                {                  TVHome.m_navigator = new ChannelNavigator();                }                  GUIPropertyManager.SetProperty("#itemcount"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem2"' string.Empty);                GUIPropertyManager.SetProperty("#selectedthumb"' string.Empty);                  if (_shouldRestore)                {                  DoRestoreSkin();                }                else                {                  LoadSkin();                  AllocResources();                }                  InitControls();                  base.OnMessage(message);                  UpdateOverlayAllowed();                GUIGraphicsContext.Overlay = _isOverlayAllowed;                  // set topbar autohide                switch (_autoHideTopbarType)                {                  case AutoHideTopBar.No:                    _autoHideTopbar = false;                    break;                  case AutoHideTopBar.Yes:                    _autoHideTopbar = true;                    break;                  default:                    _autoHideTopbar = GUIGraphicsContext.DefaultTopBarHide;                    break;                }                GUIGraphicsContext.AutoHideTopBar = _autoHideTopbar;                GUIGraphicsContext.TopBarHidden = _autoHideTopbar;                GUIGraphicsContext.DisableTopBar = _disableTopBar;                UpdateChannelCount();                  // Loading tvguide settings will overwrite the guide cursor position.  If we are coming back from the program info window (where                // recording selections are made) we would like to reposition the cursor to the program from which we invoked the                // program info window; the user comes back to where they started.  To do this we need to save and restore the cursor                // position after loading tvguide settings.                _backupCursorX = _cursorX;                _backupCursorY = _cursorY;                _backupChannelOffset = ChannelOffset;                  LoadSettings();                  if (message.Param1 == (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  _cursorX = _backupCursorX;                  _cursorY = _backupCursorY;                  ChannelOffset = _backupChannelOffset;                }                  LoadSchedules(true);                _currentProgram = null;                if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  _viewingTime = DateTime.Now;                  _singleChannelView = false;                  _showChannelLogos = false;                  if (TVHome.Card.IsTimeShifting)                  {                    _currentChannel = TVHome.Navigator.Channel;                    PositionGuideCursorToCurrentChannel();                  }                }                // Mantis 3579: the above lines can lead to too large channeloffset.                 // Now we check if the offset is too large' and if it is' we reduce it and increase the cursor position accordingly                if (!_guideContinuousScroll && (ChannelOffset > _channelList.Count - _channelCount))                {                  _cursorX += ChannelOffset - (_channelList.Count - _channelCount);                  ChannelOffset = _channelList.Count - _channelCount;                }                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                if (cntlDay != null)                {                  DateTime dtNow = DateTime.Now;                  cntlDay.Reset();                  cntlDay.SetRange(0' MaxDaysInGuide - 1);                  for (int iDay = 0; iDay < MaxDaysInGuide; iDay++)                  {                    DateTime dtTemp = dtNow.AddDays(iDay);                    string day = Utils.GetShortDayString(dtTemp);                    cntlDay.AddLabel(day' iDay);                  }                }                else                {                  Log.Debug("TvGuideBase: SpinControl cntlDay is null!");                }                  GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                if (cntlTimeInterval != null)                {                  cntlTimeInterval.Reset();                  for (int i = 1; i <= 4; i++)                  {                    cntlTimeInterval.AddLabel(String.Empty' i);                  }                  cntlTimeInterval.Value = (_timePerBlock / 15) - 1;                }                else                {                  Log.Debug("TvGuideBase: SpinControl cntlTimeInterval is null!");                }                  InitGenreKey();                  if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  Update(true);                }                else                {                  Update(false);                }                  SetFocus();                  if (_currentProgram != null)                {                  m_dtStartTime = _currentProgram.StartTime;                }                UpdateCurrentProgram();                return true;              }              //break;              case GUIMessage.MessageType.GUI_MSG_CLICKED:              int iControl = message.SenderControlId;              if (iControl == (int)Controls.SPINCONTROL_DAY)              {                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                int iDay = cntlDay.Value;                  _viewingTime = DateTime.Now;                _viewingTime = new DateTime(DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' _viewingTime.Hour'                                            _viewingTime.Minute' 0' 0);                _viewingTime = _viewingTime.AddDays(iDay);                _recalculateProgramOffset = true;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.SPINCONTROL_TIME_INTERVAL)              {                GUISpinControl cntlTimeInt = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                int iInterval = (cntlTimeInt.Value) + 1;                if (iInterval > 4)                {                  iInterval = 4;                }                _timePerBlock = iInterval * 15;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.CHANNEL_GROUP_BUTTON)              {                OnSelectChannelGroup();                return true;              }              if (iControl >= GUIDE_COMPONENTID_START)              {                if (OnSelectItem(true))                {                  // Tuning a channel was attempted.  Save the channel setting to ensure that the guide channel selection is in sync                  // with the desired (the channel may not be playing) channel selection.                  SaveSettings();                  Update(false);                  SetFocus();                }              }              else if (_cursorY == 0)              {                _backupSingleViewCursorX = _cursorX;                OnSwitchMode(false);              }              break;          }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnMessage,The following statement contains a magic number: switch (message.Message)          {            case GUIMessage.MessageType.GUI_MSG_PERCENTAGE_CHANGED:              if (message.SenderControlId == (int)Controls.HORZ_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                fPercentage *= 24.0f;                fPercentage *= 60.0f;                _viewingTime = new DateTime(_viewingTime.Year' _viewingTime.Month' _viewingTime.Day' 0' 0' 0' 0);                _viewingTime = _viewingTime.AddMinutes((int)fPercentage);              }                if (message.SenderControlId == (int)Controls.VERT_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                if (_singleChannelView)                {                  fPercentage *= (float)_totalProgramCount;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }                else                {                  fPercentage *= (float)_channelList.Count;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }              }              break;              case GUIMessage.MessageType.GUI_MSG_SKIN_CHANGED:              {                base.OnMessage(message);                _guideColorsLoaded = false;                return true;              }              case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:              {                if (!_singleChannelView)                {                  base.OnMessage(message);                  SaveSettings();                  if (_recordingList != null && TVHome.Connected)                  {                    _recordingList.Clear();                  }                    _controls = new Dictionary<int' GUIButton3PartControl>();                  _channelList = null;                  _recordingList = null;                  _currentProgram = null;                }                  return true;              }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:              {                  if (!TVHome.Connected)                {                  RemoteControl.Clear();                  GUIWindowManager.ActivateWindow((int)Window.WINDOW_SETTINGS_TVENGINE);                  return false;                }                  TVHome.WaitForGentleConnection();                  if (TVHome.Navigator == null)                {                  TVHome.OnLoaded();                }                else if (TVHome.Navigator.Channel == null)                {                  TVHome.m_navigator.ReLoad();                  TVHome.LoadSettings(false);                }                  // Create the channel navigator (it will load groups and channels)                if (TVHome.m_navigator == null)                {                  TVHome.m_navigator = new ChannelNavigator();                }                  GUIPropertyManager.SetProperty("#itemcount"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem2"' string.Empty);                GUIPropertyManager.SetProperty("#selectedthumb"' string.Empty);                  if (_shouldRestore)                {                  DoRestoreSkin();                }                else                {                  LoadSkin();                  AllocResources();                }                  InitControls();                  base.OnMessage(message);                  UpdateOverlayAllowed();                GUIGraphicsContext.Overlay = _isOverlayAllowed;                  // set topbar autohide                switch (_autoHideTopbarType)                {                  case AutoHideTopBar.No:                    _autoHideTopbar = false;                    break;                  case AutoHideTopBar.Yes:                    _autoHideTopbar = true;                    break;                  default:                    _autoHideTopbar = GUIGraphicsContext.DefaultTopBarHide;                    break;                }                GUIGraphicsContext.AutoHideTopBar = _autoHideTopbar;                GUIGraphicsContext.TopBarHidden = _autoHideTopbar;                GUIGraphicsContext.DisableTopBar = _disableTopBar;                UpdateChannelCount();                  // Loading tvguide settings will overwrite the guide cursor position.  If we are coming back from the program info window (where                // recording selections are made) we would like to reposition the cursor to the program from which we invoked the                // program info window; the user comes back to where they started.  To do this we need to save and restore the cursor                // position after loading tvguide settings.                _backupCursorX = _cursorX;                _backupCursorY = _cursorY;                _backupChannelOffset = ChannelOffset;                  LoadSettings();                  if (message.Param1 == (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  _cursorX = _backupCursorX;                  _cursorY = _backupCursorY;                  ChannelOffset = _backupChannelOffset;                }                  LoadSchedules(true);                _currentProgram = null;                if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  _viewingTime = DateTime.Now;                  _singleChannelView = false;                  _showChannelLogos = false;                  if (TVHome.Card.IsTimeShifting)                  {                    _currentChannel = TVHome.Navigator.Channel;                    PositionGuideCursorToCurrentChannel();                  }                }                // Mantis 3579: the above lines can lead to too large channeloffset.                 // Now we check if the offset is too large' and if it is' we reduce it and increase the cursor position accordingly                if (!_guideContinuousScroll && (ChannelOffset > _channelList.Count - _channelCount))                {                  _cursorX += ChannelOffset - (_channelList.Count - _channelCount);                  ChannelOffset = _channelList.Count - _channelCount;                }                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                if (cntlDay != null)                {                  DateTime dtNow = DateTime.Now;                  cntlDay.Reset();                  cntlDay.SetRange(0' MaxDaysInGuide - 1);                  for (int iDay = 0; iDay < MaxDaysInGuide; iDay++)                  {                    DateTime dtTemp = dtNow.AddDays(iDay);                    string day = Utils.GetShortDayString(dtTemp);                    cntlDay.AddLabel(day' iDay);                  }                }                else                {                  Log.Debug("TvGuideBase: SpinControl cntlDay is null!");                }                  GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                if (cntlTimeInterval != null)                {                  cntlTimeInterval.Reset();                  for (int i = 1; i <= 4; i++)                  {                    cntlTimeInterval.AddLabel(String.Empty' i);                  }                  cntlTimeInterval.Value = (_timePerBlock / 15) - 1;                }                else                {                  Log.Debug("TvGuideBase: SpinControl cntlTimeInterval is null!");                }                  InitGenreKey();                  if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  Update(true);                }                else                {                  Update(false);                }                  SetFocus();                  if (_currentProgram != null)                {                  m_dtStartTime = _currentProgram.StartTime;                }                UpdateCurrentProgram();                return true;              }              //break;              case GUIMessage.MessageType.GUI_MSG_CLICKED:              int iControl = message.SenderControlId;              if (iControl == (int)Controls.SPINCONTROL_DAY)              {                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                int iDay = cntlDay.Value;                  _viewingTime = DateTime.Now;                _viewingTime = new DateTime(DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' _viewingTime.Hour'                                            _viewingTime.Minute' 0' 0);                _viewingTime = _viewingTime.AddDays(iDay);                _recalculateProgramOffset = true;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.SPINCONTROL_TIME_INTERVAL)              {                GUISpinControl cntlTimeInt = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                int iInterval = (cntlTimeInt.Value) + 1;                if (iInterval > 4)                {                  iInterval = 4;                }                _timePerBlock = iInterval * 15;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.CHANNEL_GROUP_BUTTON)              {                OnSelectChannelGroup();                return true;              }              if (iControl >= GUIDE_COMPONENTID_START)              {                if (OnSelectItem(true))                {                  // Tuning a channel was attempted.  Save the channel setting to ensure that the guide channel selection is in sync                  // with the desired (the channel may not be playing) channel selection.                  SaveSettings();                  Update(false);                  SetFocus();                }              }              else if (_cursorY == 0)              {                _backupSingleViewCursorX = _cursorX;                OnSwitchMode(false);              }              break;          }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnMessage,The following statement contains a magic number: switch (message.Message)          {            case GUIMessage.MessageType.GUI_MSG_PERCENTAGE_CHANGED:              if (message.SenderControlId == (int)Controls.HORZ_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                fPercentage *= 24.0f;                fPercentage *= 60.0f;                _viewingTime = new DateTime(_viewingTime.Year' _viewingTime.Month' _viewingTime.Day' 0' 0' 0' 0);                _viewingTime = _viewingTime.AddMinutes((int)fPercentage);              }                if (message.SenderControlId == (int)Controls.VERT_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                if (_singleChannelView)                {                  fPercentage *= (float)_totalProgramCount;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }                else                {                  fPercentage *= (float)_channelList.Count;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }              }              break;              case GUIMessage.MessageType.GUI_MSG_SKIN_CHANGED:              {                base.OnMessage(message);                _guideColorsLoaded = false;                return true;              }              case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:              {                if (!_singleChannelView)                {                  base.OnMessage(message);                  SaveSettings();                  if (_recordingList != null && TVHome.Connected)                  {                    _recordingList.Clear();                  }                    _controls = new Dictionary<int' GUIButton3PartControl>();                  _channelList = null;                  _recordingList = null;                  _currentProgram = null;                }                  return true;              }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:              {                  if (!TVHome.Connected)                {                  RemoteControl.Clear();                  GUIWindowManager.ActivateWindow((int)Window.WINDOW_SETTINGS_TVENGINE);                  return false;                }                  TVHome.WaitForGentleConnection();                  if (TVHome.Navigator == null)                {                  TVHome.OnLoaded();                }                else if (TVHome.Navigator.Channel == null)                {                  TVHome.m_navigator.ReLoad();                  TVHome.LoadSettings(false);                }                  // Create the channel navigator (it will load groups and channels)                if (TVHome.m_navigator == null)                {                  TVHome.m_navigator = new ChannelNavigator();                }                  GUIPropertyManager.SetProperty("#itemcount"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem2"' string.Empty);                GUIPropertyManager.SetProperty("#selectedthumb"' string.Empty);                  if (_shouldRestore)                {                  DoRestoreSkin();                }                else                {                  LoadSkin();                  AllocResources();                }                  InitControls();                  base.OnMessage(message);                  UpdateOverlayAllowed();                GUIGraphicsContext.Overlay = _isOverlayAllowed;                  // set topbar autohide                switch (_autoHideTopbarType)                {                  case AutoHideTopBar.No:                    _autoHideTopbar = false;                    break;                  case AutoHideTopBar.Yes:                    _autoHideTopbar = true;                    break;                  default:                    _autoHideTopbar = GUIGraphicsContext.DefaultTopBarHide;                    break;                }                GUIGraphicsContext.AutoHideTopBar = _autoHideTopbar;                GUIGraphicsContext.TopBarHidden = _autoHideTopbar;                GUIGraphicsContext.DisableTopBar = _disableTopBar;                UpdateChannelCount();                  // Loading tvguide settings will overwrite the guide cursor position.  If we are coming back from the program info window (where                // recording selections are made) we would like to reposition the cursor to the program from which we invoked the                // program info window; the user comes back to where they started.  To do this we need to save and restore the cursor                // position after loading tvguide settings.                _backupCursorX = _cursorX;                _backupCursorY = _cursorY;                _backupChannelOffset = ChannelOffset;                  LoadSettings();                  if (message.Param1 == (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  _cursorX = _backupCursorX;                  _cursorY = _backupCursorY;                  ChannelOffset = _backupChannelOffset;                }                  LoadSchedules(true);                _currentProgram = null;                if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  _viewingTime = DateTime.Now;                  _singleChannelView = false;                  _showChannelLogos = false;                  if (TVHome.Card.IsTimeShifting)                  {                    _currentChannel = TVHome.Navigator.Channel;                    PositionGuideCursorToCurrentChannel();                  }                }                // Mantis 3579: the above lines can lead to too large channeloffset.                 // Now we check if the offset is too large' and if it is' we reduce it and increase the cursor position accordingly                if (!_guideContinuousScroll && (ChannelOffset > _channelList.Count - _channelCount))                {                  _cursorX += ChannelOffset - (_channelList.Count - _channelCount);                  ChannelOffset = _channelList.Count - _channelCount;                }                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                if (cntlDay != null)                {                  DateTime dtNow = DateTime.Now;                  cntlDay.Reset();                  cntlDay.SetRange(0' MaxDaysInGuide - 1);                  for (int iDay = 0; iDay < MaxDaysInGuide; iDay++)                  {                    DateTime dtTemp = dtNow.AddDays(iDay);                    string day = Utils.GetShortDayString(dtTemp);                    cntlDay.AddLabel(day' iDay);                  }                }                else                {                  Log.Debug("TvGuideBase: SpinControl cntlDay is null!");                }                  GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                if (cntlTimeInterval != null)                {                  cntlTimeInterval.Reset();                  for (int i = 1; i <= 4; i++)                  {                    cntlTimeInterval.AddLabel(String.Empty' i);                  }                  cntlTimeInterval.Value = (_timePerBlock / 15) - 1;                }                else                {                  Log.Debug("TvGuideBase: SpinControl cntlTimeInterval is null!");                }                  InitGenreKey();                  if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  Update(true);                }                else                {                  Update(false);                }                  SetFocus();                  if (_currentProgram != null)                {                  m_dtStartTime = _currentProgram.StartTime;                }                UpdateCurrentProgram();                return true;              }              //break;              case GUIMessage.MessageType.GUI_MSG_CLICKED:              int iControl = message.SenderControlId;              if (iControl == (int)Controls.SPINCONTROL_DAY)              {                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                int iDay = cntlDay.Value;                  _viewingTime = DateTime.Now;                _viewingTime = new DateTime(DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' _viewingTime.Hour'                                            _viewingTime.Minute' 0' 0);                _viewingTime = _viewingTime.AddDays(iDay);                _recalculateProgramOffset = true;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.SPINCONTROL_TIME_INTERVAL)              {                GUISpinControl cntlTimeInt = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                int iInterval = (cntlTimeInt.Value) + 1;                if (iInterval > 4)                {                  iInterval = 4;                }                _timePerBlock = iInterval * 15;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.CHANNEL_GROUP_BUTTON)              {                OnSelectChannelGroup();                return true;              }              if (iControl >= GUIDE_COMPONENTID_START)              {                if (OnSelectItem(true))                {                  // Tuning a channel was attempted.  Save the channel setting to ensure that the guide channel selection is in sync                  // with the desired (the channel may not be playing) channel selection.                  SaveSettings();                  Update(false);                  SetFocus();                }              }              else if (_cursorY == 0)              {                _backupSingleViewCursorX = _cursorX;                OnSwitchMode(false);              }              break;          }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnMessage,The following statement contains a magic number: switch (message.Message)          {            case GUIMessage.MessageType.GUI_MSG_PERCENTAGE_CHANGED:              if (message.SenderControlId == (int)Controls.HORZ_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                fPercentage *= 24.0f;                fPercentage *= 60.0f;                _viewingTime = new DateTime(_viewingTime.Year' _viewingTime.Month' _viewingTime.Day' 0' 0' 0' 0);                _viewingTime = _viewingTime.AddMinutes((int)fPercentage);              }                if (message.SenderControlId == (int)Controls.VERT_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                if (_singleChannelView)                {                  fPercentage *= (float)_totalProgramCount;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }                else                {                  fPercentage *= (float)_channelList.Count;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }              }              break;              case GUIMessage.MessageType.GUI_MSG_SKIN_CHANGED:              {                base.OnMessage(message);                _guideColorsLoaded = false;                return true;              }              case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:              {                if (!_singleChannelView)                {                  base.OnMessage(message);                  SaveSettings();                  if (_recordingList != null && TVHome.Connected)                  {                    _recordingList.Clear();                  }                    _controls = new Dictionary<int' GUIButton3PartControl>();                  _channelList = null;                  _recordingList = null;                  _currentProgram = null;                }                  return true;              }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:              {                  if (!TVHome.Connected)                {                  RemoteControl.Clear();                  GUIWindowManager.ActivateWindow((int)Window.WINDOW_SETTINGS_TVENGINE);                  return false;                }                  TVHome.WaitForGentleConnection();                  if (TVHome.Navigator == null)                {                  TVHome.OnLoaded();                }                else if (TVHome.Navigator.Channel == null)                {                  TVHome.m_navigator.ReLoad();                  TVHome.LoadSettings(false);                }                  // Create the channel navigator (it will load groups and channels)                if (TVHome.m_navigator == null)                {                  TVHome.m_navigator = new ChannelNavigator();                }                  GUIPropertyManager.SetProperty("#itemcount"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem2"' string.Empty);                GUIPropertyManager.SetProperty("#selectedthumb"' string.Empty);                  if (_shouldRestore)                {                  DoRestoreSkin();                }                else                {                  LoadSkin();                  AllocResources();                }                  InitControls();                  base.OnMessage(message);                  UpdateOverlayAllowed();                GUIGraphicsContext.Overlay = _isOverlayAllowed;                  // set topbar autohide                switch (_autoHideTopbarType)                {                  case AutoHideTopBar.No:                    _autoHideTopbar = false;                    break;                  case AutoHideTopBar.Yes:                    _autoHideTopbar = true;                    break;                  default:                    _autoHideTopbar = GUIGraphicsContext.DefaultTopBarHide;                    break;                }                GUIGraphicsContext.AutoHideTopBar = _autoHideTopbar;                GUIGraphicsContext.TopBarHidden = _autoHideTopbar;                GUIGraphicsContext.DisableTopBar = _disableTopBar;                UpdateChannelCount();                  // Loading tvguide settings will overwrite the guide cursor position.  If we are coming back from the program info window (where                // recording selections are made) we would like to reposition the cursor to the program from which we invoked the                // program info window; the user comes back to where they started.  To do this we need to save and restore the cursor                // position after loading tvguide settings.                _backupCursorX = _cursorX;                _backupCursorY = _cursorY;                _backupChannelOffset = ChannelOffset;                  LoadSettings();                  if (message.Param1 == (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  _cursorX = _backupCursorX;                  _cursorY = _backupCursorY;                  ChannelOffset = _backupChannelOffset;                }                  LoadSchedules(true);                _currentProgram = null;                if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  _viewingTime = DateTime.Now;                  _singleChannelView = false;                  _showChannelLogos = false;                  if (TVHome.Card.IsTimeShifting)                  {                    _currentChannel = TVHome.Navigator.Channel;                    PositionGuideCursorToCurrentChannel();                  }                }                // Mantis 3579: the above lines can lead to too large channeloffset.                 // Now we check if the offset is too large' and if it is' we reduce it and increase the cursor position accordingly                if (!_guideContinuousScroll && (ChannelOffset > _channelList.Count - _channelCount))                {                  _cursorX += ChannelOffset - (_channelList.Count - _channelCount);                  ChannelOffset = _channelList.Count - _channelCount;                }                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                if (cntlDay != null)                {                  DateTime dtNow = DateTime.Now;                  cntlDay.Reset();                  cntlDay.SetRange(0' MaxDaysInGuide - 1);                  for (int iDay = 0; iDay < MaxDaysInGuide; iDay++)                  {                    DateTime dtTemp = dtNow.AddDays(iDay);                    string day = Utils.GetShortDayString(dtTemp);                    cntlDay.AddLabel(day' iDay);                  }                }                else                {                  Log.Debug("TvGuideBase: SpinControl cntlDay is null!");                }                  GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                if (cntlTimeInterval != null)                {                  cntlTimeInterval.Reset();                  for (int i = 1; i <= 4; i++)                  {                    cntlTimeInterval.AddLabel(String.Empty' i);                  }                  cntlTimeInterval.Value = (_timePerBlock / 15) - 1;                }                else                {                  Log.Debug("TvGuideBase: SpinControl cntlTimeInterval is null!");                }                  InitGenreKey();                  if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  Update(true);                }                else                {                  Update(false);                }                  SetFocus();                  if (_currentProgram != null)                {                  m_dtStartTime = _currentProgram.StartTime;                }                UpdateCurrentProgram();                return true;              }              //break;              case GUIMessage.MessageType.GUI_MSG_CLICKED:              int iControl = message.SenderControlId;              if (iControl == (int)Controls.SPINCONTROL_DAY)              {                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                int iDay = cntlDay.Value;                  _viewingTime = DateTime.Now;                _viewingTime = new DateTime(DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' _viewingTime.Hour'                                            _viewingTime.Minute' 0' 0);                _viewingTime = _viewingTime.AddDays(iDay);                _recalculateProgramOffset = true;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.SPINCONTROL_TIME_INTERVAL)              {                GUISpinControl cntlTimeInt = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                int iInterval = (cntlTimeInt.Value) + 1;                if (iInterval > 4)                {                  iInterval = 4;                }                _timePerBlock = iInterval * 15;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.CHANNEL_GROUP_BUTTON)              {                OnSelectChannelGroup();                return true;              }              if (iControl >= GUIDE_COMPONENTID_START)              {                if (OnSelectItem(true))                {                  // Tuning a channel was attempted.  Save the channel setting to ensure that the guide channel selection is in sync                  // with the desired (the channel may not be playing) channel selection.                  SaveSettings();                  Update(false);                  SetFocus();                }              }              else if (_cursorY == 0)              {                _backupSingleViewCursorX = _cursorX;                OnSwitchMode(false);              }              break;          }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnMessage,The following statement contains a magic number: switch (message.Message)          {            case GUIMessage.MessageType.GUI_MSG_PERCENTAGE_CHANGED:              if (message.SenderControlId == (int)Controls.HORZ_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                fPercentage *= 24.0f;                fPercentage *= 60.0f;                _viewingTime = new DateTime(_viewingTime.Year' _viewingTime.Month' _viewingTime.Day' 0' 0' 0' 0);                _viewingTime = _viewingTime.AddMinutes((int)fPercentage);              }                if (message.SenderControlId == (int)Controls.VERT_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                if (_singleChannelView)                {                  fPercentage *= (float)_totalProgramCount;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }                else                {                  fPercentage *= (float)_channelList.Count;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }              }              break;              case GUIMessage.MessageType.GUI_MSG_SKIN_CHANGED:              {                base.OnMessage(message);                _guideColorsLoaded = false;                return true;              }              case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:              {                if (!_singleChannelView)                {                  base.OnMessage(message);                  SaveSettings();                  if (_recordingList != null && TVHome.Connected)                  {                    _recordingList.Clear();                  }                    _controls = new Dictionary<int' GUIButton3PartControl>();                  _channelList = null;                  _recordingList = null;                  _currentProgram = null;                }                  return true;              }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:              {                  if (!TVHome.Connected)                {                  RemoteControl.Clear();                  GUIWindowManager.ActivateWindow((int)Window.WINDOW_SETTINGS_TVENGINE);                  return false;                }                  TVHome.WaitForGentleConnection();                  if (TVHome.Navigator == null)                {                  TVHome.OnLoaded();                }                else if (TVHome.Navigator.Channel == null)                {                  TVHome.m_navigator.ReLoad();                  TVHome.LoadSettings(false);                }                  // Create the channel navigator (it will load groups and channels)                if (TVHome.m_navigator == null)                {                  TVHome.m_navigator = new ChannelNavigator();                }                  GUIPropertyManager.SetProperty("#itemcount"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem2"' string.Empty);                GUIPropertyManager.SetProperty("#selectedthumb"' string.Empty);                  if (_shouldRestore)                {                  DoRestoreSkin();                }                else                {                  LoadSkin();                  AllocResources();                }                  InitControls();                  base.OnMessage(message);                  UpdateOverlayAllowed();                GUIGraphicsContext.Overlay = _isOverlayAllowed;                  // set topbar autohide                switch (_autoHideTopbarType)                {                  case AutoHideTopBar.No:                    _autoHideTopbar = false;                    break;                  case AutoHideTopBar.Yes:                    _autoHideTopbar = true;                    break;                  default:                    _autoHideTopbar = GUIGraphicsContext.DefaultTopBarHide;                    break;                }                GUIGraphicsContext.AutoHideTopBar = _autoHideTopbar;                GUIGraphicsContext.TopBarHidden = _autoHideTopbar;                GUIGraphicsContext.DisableTopBar = _disableTopBar;                UpdateChannelCount();                  // Loading tvguide settings will overwrite the guide cursor position.  If we are coming back from the program info window (where                // recording selections are made) we would like to reposition the cursor to the program from which we invoked the                // program info window; the user comes back to where they started.  To do this we need to save and restore the cursor                // position after loading tvguide settings.                _backupCursorX = _cursorX;                _backupCursorY = _cursorY;                _backupChannelOffset = ChannelOffset;                  LoadSettings();                  if (message.Param1 == (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  _cursorX = _backupCursorX;                  _cursorY = _backupCursorY;                  ChannelOffset = _backupChannelOffset;                }                  LoadSchedules(true);                _currentProgram = null;                if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  _viewingTime = DateTime.Now;                  _singleChannelView = false;                  _showChannelLogos = false;                  if (TVHome.Card.IsTimeShifting)                  {                    _currentChannel = TVHome.Navigator.Channel;                    PositionGuideCursorToCurrentChannel();                  }                }                // Mantis 3579: the above lines can lead to too large channeloffset.                 // Now we check if the offset is too large' and if it is' we reduce it and increase the cursor position accordingly                if (!_guideContinuousScroll && (ChannelOffset > _channelList.Count - _channelCount))                {                  _cursorX += ChannelOffset - (_channelList.Count - _channelCount);                  ChannelOffset = _channelList.Count - _channelCount;                }                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                if (cntlDay != null)                {                  DateTime dtNow = DateTime.Now;                  cntlDay.Reset();                  cntlDay.SetRange(0' MaxDaysInGuide - 1);                  for (int iDay = 0; iDay < MaxDaysInGuide; iDay++)                  {                    DateTime dtTemp = dtNow.AddDays(iDay);                    string day = Utils.GetShortDayString(dtTemp);                    cntlDay.AddLabel(day' iDay);                  }                }                else                {                  Log.Debug("TvGuideBase: SpinControl cntlDay is null!");                }                  GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                if (cntlTimeInterval != null)                {                  cntlTimeInterval.Reset();                  for (int i = 1; i <= 4; i++)                  {                    cntlTimeInterval.AddLabel(String.Empty' i);                  }                  cntlTimeInterval.Value = (_timePerBlock / 15) - 1;                }                else                {                  Log.Debug("TvGuideBase: SpinControl cntlTimeInterval is null!");                }                  InitGenreKey();                  if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  Update(true);                }                else                {                  Update(false);                }                  SetFocus();                  if (_currentProgram != null)                {                  m_dtStartTime = _currentProgram.StartTime;                }                UpdateCurrentProgram();                return true;              }              //break;              case GUIMessage.MessageType.GUI_MSG_CLICKED:              int iControl = message.SenderControlId;              if (iControl == (int)Controls.SPINCONTROL_DAY)              {                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                int iDay = cntlDay.Value;                  _viewingTime = DateTime.Now;                _viewingTime = new DateTime(DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' _viewingTime.Hour'                                            _viewingTime.Minute' 0' 0);                _viewingTime = _viewingTime.AddDays(iDay);                _recalculateProgramOffset = true;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.SPINCONTROL_TIME_INTERVAL)              {                GUISpinControl cntlTimeInt = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                int iInterval = (cntlTimeInt.Value) + 1;                if (iInterval > 4)                {                  iInterval = 4;                }                _timePerBlock = iInterval * 15;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.CHANNEL_GROUP_BUTTON)              {                OnSelectChannelGroup();                return true;              }              if (iControl >= GUIDE_COMPONENTID_START)              {                if (OnSelectItem(true))                {                  // Tuning a channel was attempted.  Save the channel setting to ensure that the guide channel selection is in sync                  // with the desired (the channel may not be playing) channel selection.                  SaveSettings();                  Update(false);                  SetFocus();                }              }              else if (_cursorY == 0)              {                _backupSingleViewCursorX = _cursorX;                OnSwitchMode(false);              }              break;          }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnMessage,The following statement contains a magic number: switch (message.Message)          {            case GUIMessage.MessageType.GUI_MSG_PERCENTAGE_CHANGED:              if (message.SenderControlId == (int)Controls.HORZ_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                fPercentage *= 24.0f;                fPercentage *= 60.0f;                _viewingTime = new DateTime(_viewingTime.Year' _viewingTime.Month' _viewingTime.Day' 0' 0' 0' 0);                _viewingTime = _viewingTime.AddMinutes((int)fPercentage);              }                if (message.SenderControlId == (int)Controls.VERT_SCROLLBAR)              {                _needUpdate = true;                float fPercentage = (float)message.Param1;                fPercentage /= 100.0f;                if (_singleChannelView)                {                  fPercentage *= (float)_totalProgramCount;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }                else                {                  fPercentage *= (float)_channelList.Count;                  int iChan = (int)fPercentage;                  ChannelOffset = 0;                  _cursorX = 0;                  while (iChan >= _channelCount)                  {                    iChan -= _channelCount;                    ChannelOffset += _channelCount;                  }                  _cursorX = iChan;                }              }              break;              case GUIMessage.MessageType.GUI_MSG_SKIN_CHANGED:              {                base.OnMessage(message);                _guideColorsLoaded = false;                return true;              }              case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:              {                if (!_singleChannelView)                {                  base.OnMessage(message);                  SaveSettings();                  if (_recordingList != null && TVHome.Connected)                  {                    _recordingList.Clear();                  }                    _controls = new Dictionary<int' GUIButton3PartControl>();                  _channelList = null;                  _recordingList = null;                  _currentProgram = null;                }                  return true;              }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:              {                  if (!TVHome.Connected)                {                  RemoteControl.Clear();                  GUIWindowManager.ActivateWindow((int)Window.WINDOW_SETTINGS_TVENGINE);                  return false;                }                  TVHome.WaitForGentleConnection();                  if (TVHome.Navigator == null)                {                  TVHome.OnLoaded();                }                else if (TVHome.Navigator.Channel == null)                {                  TVHome.m_navigator.ReLoad();                  TVHome.LoadSettings(false);                }                  // Create the channel navigator (it will load groups and channels)                if (TVHome.m_navigator == null)                {                  TVHome.m_navigator = new ChannelNavigator();                }                  GUIPropertyManager.SetProperty("#itemcount"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem"' string.Empty);                GUIPropertyManager.SetProperty("#selecteditem2"' string.Empty);                GUIPropertyManager.SetProperty("#selectedthumb"' string.Empty);                  if (_shouldRestore)                {                  DoRestoreSkin();                }                else                {                  LoadSkin();                  AllocResources();                }                  InitControls();                  base.OnMessage(message);                  UpdateOverlayAllowed();                GUIGraphicsContext.Overlay = _isOverlayAllowed;                  // set topbar autohide                switch (_autoHideTopbarType)                {                  case AutoHideTopBar.No:                    _autoHideTopbar = false;                    break;                  case AutoHideTopBar.Yes:                    _autoHideTopbar = true;                    break;                  default:                    _autoHideTopbar = GUIGraphicsContext.DefaultTopBarHide;                    break;                }                GUIGraphicsContext.AutoHideTopBar = _autoHideTopbar;                GUIGraphicsContext.TopBarHidden = _autoHideTopbar;                GUIGraphicsContext.DisableTopBar = _disableTopBar;                UpdateChannelCount();                  // Loading tvguide settings will overwrite the guide cursor position.  If we are coming back from the program info window (where                // recording selections are made) we would like to reposition the cursor to the program from which we invoked the                // program info window; the user comes back to where they started.  To do this we need to save and restore the cursor                // position after loading tvguide settings.                _backupCursorX = _cursorX;                _backupCursorY = _cursorY;                _backupChannelOffset = ChannelOffset;                  LoadSettings();                  if (message.Param1 == (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  _cursorX = _backupCursorX;                  _cursorY = _backupCursorY;                  ChannelOffset = _backupChannelOffset;                }                  LoadSchedules(true);                _currentProgram = null;                if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  _viewingTime = DateTime.Now;                  _singleChannelView = false;                  _showChannelLogos = false;                  if (TVHome.Card.IsTimeShifting)                  {                    _currentChannel = TVHome.Navigator.Channel;                    PositionGuideCursorToCurrentChannel();                  }                }                // Mantis 3579: the above lines can lead to too large channeloffset.                 // Now we check if the offset is too large' and if it is' we reduce it and increase the cursor position accordingly                if (!_guideContinuousScroll && (ChannelOffset > _channelList.Count - _channelCount))                {                  _cursorX += ChannelOffset - (_channelList.Count - _channelCount);                  ChannelOffset = _channelList.Count - _channelCount;                }                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                if (cntlDay != null)                {                  DateTime dtNow = DateTime.Now;                  cntlDay.Reset();                  cntlDay.SetRange(0' MaxDaysInGuide - 1);                  for (int iDay = 0; iDay < MaxDaysInGuide; iDay++)                  {                    DateTime dtTemp = dtNow.AddDays(iDay);                    string day = Utils.GetShortDayString(dtTemp);                    cntlDay.AddLabel(day' iDay);                  }                }                else                {                  Log.Debug("TvGuideBase: SpinControl cntlDay is null!");                }                  GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                if (cntlTimeInterval != null)                {                  cntlTimeInterval.Reset();                  for (int i = 1; i <= 4; i++)                  {                    cntlTimeInterval.AddLabel(String.Empty' i);                  }                  cntlTimeInterval.Value = (_timePerBlock / 15) - 1;                }                else                {                  Log.Debug("TvGuideBase: SpinControl cntlTimeInterval is null!");                }                  InitGenreKey();                  if (message.Param1 != (int)Window.WINDOW_TV_PROGRAM_INFO)                {                  Update(true);                }                else                {                  Update(false);                }                  SetFocus();                  if (_currentProgram != null)                {                  m_dtStartTime = _currentProgram.StartTime;                }                UpdateCurrentProgram();                return true;              }              //break;              case GUIMessage.MessageType.GUI_MSG_CLICKED:              int iControl = message.SenderControlId;              if (iControl == (int)Controls.SPINCONTROL_DAY)              {                GUISpinControl cntlDay = GetControl((int)Controls.SPINCONTROL_DAY) as GUISpinControl;                int iDay = cntlDay.Value;                  _viewingTime = DateTime.Now;                _viewingTime = new DateTime(DateTime.Now.Year' DateTime.Now.Month' DateTime.Now.Day' _viewingTime.Hour'                                            _viewingTime.Minute' 0' 0);                _viewingTime = _viewingTime.AddDays(iDay);                _recalculateProgramOffset = true;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.SPINCONTROL_TIME_INTERVAL)              {                GUISpinControl cntlTimeInt = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;                int iInterval = (cntlTimeInt.Value) + 1;                if (iInterval > 4)                {                  iInterval = 4;                }                _timePerBlock = iInterval * 15;                Update(false);                SetFocus();                return true;              }              if (iControl == (int)Controls.CHANNEL_GROUP_BUTTON)              {                OnSelectChannelGroup();                return true;              }              if (iControl >= GUIDE_COMPONENTID_START)              {                if (OnSelectItem(true))                {                  // Tuning a channel was attempted.  Save the channel setting to ensure that the guide channel selection is in sync                  // with the desired (the channel may not be playing) channel selection.                  SaveSettings();                  Update(false);                  SetFocus();                }              }              else if (_cursorY == 0)              {                _backupSingleViewCursorX = _cursorX;                OnSwitchMode(false);              }              break;          }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,Process,The following statement contains a magic number: ts.TotalMilliseconds > 1000
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: channelImage = new GUIImage(GetID' (int)Controls.SINGLE_CHANNEL_IMAGE'                                        GetControl((int)Controls.LABEL_TIME1).XPosition'                                        GetControl((int)Controls.LABEL_TIME1).YPosition - 15'                                        40' 40' strLogo' Color.White);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: channelImage = new GUIImage(GetID' (int)Controls.SINGLE_CHANNEL_IMAGE'                                        GetControl((int)Controls.LABEL_TIME1).XPosition'                                        GetControl((int)Controls.LABEL_TIME1).YPosition - 15'                                        40' 40' strLogo' Color.White);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: channelImage = new GUIImage(GetID' (int)Controls.SINGLE_CHANNEL_IMAGE'                                        GetControl((int)Controls.LABEL_TIME1).XPosition'                                        GetControl((int)Controls.LABEL_TIME1).YPosition - 15'                                        40' 40' strLogo' Color.White);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: channelLabel = new GUILabelControl(GetID' (int)Controls.SINGLE_CHANNEL_LABEL'                                             channelImage.XPosition + 44'                                             channelImage.YPosition + 10'                                             300' 40' "font16"' channel.DisplayName' 4294967295' GUIControl.Alignment.Left'                                             GUIControl.VAlignment.Top'                                             true' 0' 0' 0xFF000000);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: channelLabel = new GUILabelControl(GetID' (int)Controls.SINGLE_CHANNEL_LABEL'                                             channelImage.XPosition + 44'                                             channelImage.YPosition + 10'                                             300' 40' "font16"' channel.DisplayName' 4294967295' GUIControl.Alignment.Left'                                             GUIControl.VAlignment.Top'                                             true' 0' 0' 0xFF000000);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: channelLabel = new GUILabelControl(GetID' (int)Controls.SINGLE_CHANNEL_LABEL'                                             channelImage.XPosition + 44'                                             channelImage.YPosition + 10'                                             300' 40' "font16"' channel.DisplayName' 4294967295' GUIControl.Alignment.Left'                                             GUIControl.VAlignment.Top'                                             true' 0' 0' 0xFF000000);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: channelLabel = new GUILabelControl(GetID' (int)Controls.SINGLE_CHANNEL_LABEL'                                             channelImage.XPosition + 44'                                             channelImage.YPosition + 10'                                             300' 40' "font16"' channel.DisplayName' 4294967295' GUIControl.Alignment.Left'                                             GUIControl.VAlignment.Top'                                             true' 0' 0' 0xFF000000);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: channelLabel = new GUILabelControl(GetID' (int)Controls.SINGLE_CHANNEL_LABEL'                                             channelImage.XPosition + 44'                                             channelImage.YPosition + 10'                                             300' 40' "font16"' channel.DisplayName' 4294967295' GUIControl.Alignment.Left'                                             GUIControl.VAlignment.Top'                                             true' 0' 0' 0xFF000000);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: DateTime dtEnd = dtStart.AddDays(30);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: img = new GUIButton3PartControl(GetID' iControlId' iStartXPos' ypos' iTotalWidth' height - 2'                                              buttonTemplate.TexutureFocusLeftName'                                              buttonTemplate.TexutureFocusMidName'                                              buttonTemplate.TexutureFocusRightName'                                              buttonTemplate.TexutureNoFocusLeftName'                                              buttonTemplate.TexutureNoFocusMidName'                                              buttonTemplate.TexutureNoFocusRightName'                                              String.Empty);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: height = height - 10;
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: height /= 2;
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: iWidth -= 10;
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: iWidth > 10
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: img.TextOffsetX1 = 5;
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: img.TextOffsetY1 = 5;
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: img.TextOffsetX2 = 5;
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderSingleChannel,The following statement contains a magic number: img.TextOffsetY2 = img.Height / 2;
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderChannel,The following statement contains a magic number: Program prog = new Program(channel.IdChannel' Utils.longtodate(iStart)' Utils.longtodate(iProgEnd)'                                     GUILocalizeStrings.Get(736)' ""' ""' Program.ProgramState.None' DateTime.MinValue'                                     string.Empty'                                     string.Empty' string.Empty' string.Empty' -1' string.Empty' -1);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderChannel,The following statement contains a magic number: int iStartMin = ts.Hours * 60;
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderChannel,The following statement contains a magic number: ts.Seconds == 59
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderChannel,The following statement contains a magic number: iEndXPos = iStartXPos + 6;
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderChannel,The following statement contains a magic number: iEndXPos <= iStartXPos + 5
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderChannel,The following statement contains a magic number: iWidth -= 3;
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderChannel,The following statement contains a magic number: iWidth > 3
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderChannel,The following statement contains a magic number: img = new GUIButton3PartControl(GetID' iControlId' iStartXPos' ypos' iWidth' height - 2'                                              TexutureFocusLeftName'                                              TexutureFocusMidName'                                              TexutureFocusRightName'                                              TexutureNoFocusLeftName'                                              TexutureNoFocusMidName'                                              TexutureNoFocusRightName'                                              String.Empty);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderChannel,The following statement contains a magic number: iWidth -= 10;
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderChannel,The following statement contains a magic number: iWidth > 10
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderChannel,The following statement contains a magic number: img.TextOffsetX1 = 5;
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderChannel,The following statement contains a magic number: img.TextOffsetY1 = 5;
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderChannel,The following statement contains a magic number: img.TextOffsetX1 = 5;
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderChannel,The following statement contains a magic number: img.TextOffsetY1 = 5;
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderChannel,The following statement contains a magic number: img.TextOffsetX2 = 5;
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderChannel,The following statement contains a magic number: img.TextOffsetY2 = img.Height / 2;
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderChannel,The following statement contains a magic number: img.TextOffsetX2 = 5;
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,RenderChannel,The following statement contains a magic number: img.TextOffsetY2 = 5;
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,ProgramCount,The following statement contains a magic number: iProgram < _numberOfBlocks * 5
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,UpdateGroupButton,The following statement contains a magic number: GroupButtonText = String.Format("{0}: {1}"' GUILocalizeStrings.Get(971)' TVHome.Navigator.CurrentGroup.GroupName);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,ShowContextMenu,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(924));
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(938);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1041);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1212);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(939);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(629);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(971);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(368);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(2162);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(2163);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(2164);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)          {              case 1041:              ShowProgramInfo();              Log.Debug("TVGuide: show episodes or repeatings for current show");              break;            case 368: // IMDB              OnGetIMDBInfo();              break;            case 971: //group              OnSelectChannelGroup();              break;            case 1040: // set reminder            case 1212: // cancel reminder              OnNotify();              break;              case 938: // view channel                Log.Debug("viewch channel:{0}"' _currentChannel);              TVHome.ViewChannelAndCheck(_currentProgram.ReferencedChannel());              if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == _currentProgram.ReferencedChannel().IdChannel)              {                g_Player.ShowFullScreenWindow();              }              return;                case 939: // switch mode              _backupSingleViewCursorX = _cursorX;              OnSwitchMode(false);              break;            case 629: //stop recording              Schedule schedule = Schedule.FindNoEPGSchedule(_currentProgram.ReferencedChannel());              TVUtil.DeleteRecAndEntireSchedWithPrompt(schedule);              Update(true); //remove RED marker              break;              case 2162: // Remove channel              OnRemoveChannel();                break;              case 2163: // Add channel to a group              OnAddChannelToGroup();                break;              case 2164: // Remove channel from this group              OnRemoveChannelFromGroup();                break;              case 637: // edit recording            case 264: // record              if (_currentProgram.IdProgram == 0)              {                TVHome.StartRecordingSchedule(_currentProgram.ReferencedChannel()' true);                _currentProgram.IsRecordingOncePending = true;                Update(true); //remove RED marker              }              else              {                OnRecordContext();              }              break;          }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)          {              case 1041:              ShowProgramInfo();              Log.Debug("TVGuide: show episodes or repeatings for current show");              break;            case 368: // IMDB              OnGetIMDBInfo();              break;            case 971: //group              OnSelectChannelGroup();              break;            case 1040: // set reminder            case 1212: // cancel reminder              OnNotify();              break;              case 938: // view channel                Log.Debug("viewch channel:{0}"' _currentChannel);              TVHome.ViewChannelAndCheck(_currentProgram.ReferencedChannel());              if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == _currentProgram.ReferencedChannel().IdChannel)              {                g_Player.ShowFullScreenWindow();              }              return;                case 939: // switch mode              _backupSingleViewCursorX = _cursorX;              OnSwitchMode(false);              break;            case 629: //stop recording              Schedule schedule = Schedule.FindNoEPGSchedule(_currentProgram.ReferencedChannel());              TVUtil.DeleteRecAndEntireSchedWithPrompt(schedule);              Update(true); //remove RED marker              break;              case 2162: // Remove channel              OnRemoveChannel();                break;              case 2163: // Add channel to a group              OnAddChannelToGroup();                break;              case 2164: // Remove channel from this group              OnRemoveChannelFromGroup();                break;              case 637: // edit recording            case 264: // record              if (_currentProgram.IdProgram == 0)              {                TVHome.StartRecordingSchedule(_currentProgram.ReferencedChannel()' true);                _currentProgram.IsRecordingOncePending = true;                Update(true); //remove RED marker              }              else              {                OnRecordContext();              }              break;          }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)          {              case 1041:              ShowProgramInfo();              Log.Debug("TVGuide: show episodes or repeatings for current show");              break;            case 368: // IMDB              OnGetIMDBInfo();              break;            case 971: //group              OnSelectChannelGroup();              break;            case 1040: // set reminder            case 1212: // cancel reminder              OnNotify();              break;              case 938: // view channel                Log.Debug("viewch channel:{0}"' _currentChannel);              TVHome.ViewChannelAndCheck(_currentProgram.ReferencedChannel());              if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == _currentProgram.ReferencedChannel().IdChannel)              {                g_Player.ShowFullScreenWindow();              }              return;                case 939: // switch mode              _backupSingleViewCursorX = _cursorX;              OnSwitchMode(false);              break;            case 629: //stop recording              Schedule schedule = Schedule.FindNoEPGSchedule(_currentProgram.ReferencedChannel());              TVUtil.DeleteRecAndEntireSchedWithPrompt(schedule);              Update(true); //remove RED marker              break;              case 2162: // Remove channel              OnRemoveChannel();                break;              case 2163: // Add channel to a group              OnAddChannelToGroup();                break;              case 2164: // Remove channel from this group              OnRemoveChannelFromGroup();                break;              case 637: // edit recording            case 264: // record              if (_currentProgram.IdProgram == 0)              {                TVHome.StartRecordingSchedule(_currentProgram.ReferencedChannel()' true);                _currentProgram.IsRecordingOncePending = true;                Update(true); //remove RED marker              }              else              {                OnRecordContext();              }              break;          }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)          {              case 1041:              ShowProgramInfo();              Log.Debug("TVGuide: show episodes or repeatings for current show");              break;            case 368: // IMDB              OnGetIMDBInfo();              break;            case 971: //group              OnSelectChannelGroup();              break;            case 1040: // set reminder            case 1212: // cancel reminder              OnNotify();              break;              case 938: // view channel                Log.Debug("viewch channel:{0}"' _currentChannel);              TVHome.ViewChannelAndCheck(_currentProgram.ReferencedChannel());              if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == _currentProgram.ReferencedChannel().IdChannel)              {                g_Player.ShowFullScreenWindow();              }              return;                case 939: // switch mode              _backupSingleViewCursorX = _cursorX;              OnSwitchMode(false);              break;            case 629: //stop recording              Schedule schedule = Schedule.FindNoEPGSchedule(_currentProgram.ReferencedChannel());              TVUtil.DeleteRecAndEntireSchedWithPrompt(schedule);              Update(true); //remove RED marker              break;              case 2162: // Remove channel              OnRemoveChannel();                break;              case 2163: // Add channel to a group              OnAddChannelToGroup();                break;              case 2164: // Remove channel from this group              OnRemoveChannelFromGroup();                break;              case 637: // edit recording            case 264: // record              if (_currentProgram.IdProgram == 0)              {                TVHome.StartRecordingSchedule(_currentProgram.ReferencedChannel()' true);                _currentProgram.IsRecordingOncePending = true;                Update(true); //remove RED marker              }              else              {                OnRecordContext();              }              break;          }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)          {              case 1041:              ShowProgramInfo();              Log.Debug("TVGuide: show episodes or repeatings for current show");              break;            case 368: // IMDB              OnGetIMDBInfo();              break;            case 971: //group              OnSelectChannelGroup();              break;            case 1040: // set reminder            case 1212: // cancel reminder              OnNotify();              break;              case 938: // view channel                Log.Debug("viewch channel:{0}"' _currentChannel);              TVHome.ViewChannelAndCheck(_currentProgram.ReferencedChannel());              if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == _currentProgram.ReferencedChannel().IdChannel)              {                g_Player.ShowFullScreenWindow();              }              return;                case 939: // switch mode              _backupSingleViewCursorX = _cursorX;              OnSwitchMode(false);              break;            case 629: //stop recording              Schedule schedule = Schedule.FindNoEPGSchedule(_currentProgram.ReferencedChannel());              TVUtil.DeleteRecAndEntireSchedWithPrompt(schedule);              Update(true); //remove RED marker              break;              case 2162: // Remove channel              OnRemoveChannel();                break;              case 2163: // Add channel to a group              OnAddChannelToGroup();                break;              case 2164: // Remove channel from this group              OnRemoveChannelFromGroup();                break;              case 637: // edit recording            case 264: // record              if (_currentProgram.IdProgram == 0)              {                TVHome.StartRecordingSchedule(_currentProgram.ReferencedChannel()' true);                _currentProgram.IsRecordingOncePending = true;                Update(true); //remove RED marker              }              else              {                OnRecordContext();              }              break;          }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)          {              case 1041:              ShowProgramInfo();              Log.Debug("TVGuide: show episodes or repeatings for current show");              break;            case 368: // IMDB              OnGetIMDBInfo();              break;            case 971: //group              OnSelectChannelGroup();              break;            case 1040: // set reminder            case 1212: // cancel reminder              OnNotify();              break;              case 938: // view channel                Log.Debug("viewch channel:{0}"' _currentChannel);              TVHome.ViewChannelAndCheck(_currentProgram.ReferencedChannel());              if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == _currentProgram.ReferencedChannel().IdChannel)              {                g_Player.ShowFullScreenWindow();              }              return;                case 939: // switch mode              _backupSingleViewCursorX = _cursorX;              OnSwitchMode(false);              break;            case 629: //stop recording              Schedule schedule = Schedule.FindNoEPGSchedule(_currentProgram.ReferencedChannel());              TVUtil.DeleteRecAndEntireSchedWithPrompt(schedule);              Update(true); //remove RED marker              break;              case 2162: // Remove channel              OnRemoveChannel();                break;              case 2163: // Add channel to a group              OnAddChannelToGroup();                break;              case 2164: // Remove channel from this group              OnRemoveChannelFromGroup();                break;              case 637: // edit recording            case 264: // record              if (_currentProgram.IdProgram == 0)              {                TVHome.StartRecordingSchedule(_currentProgram.ReferencedChannel()' true);                _currentProgram.IsRecordingOncePending = true;                Update(true); //remove RED marker              }              else              {                OnRecordContext();              }              break;          }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)          {              case 1041:              ShowProgramInfo();              Log.Debug("TVGuide: show episodes or repeatings for current show");              break;            case 368: // IMDB              OnGetIMDBInfo();              break;            case 971: //group              OnSelectChannelGroup();              break;            case 1040: // set reminder            case 1212: // cancel reminder              OnNotify();              break;              case 938: // view channel                Log.Debug("viewch channel:{0}"' _currentChannel);              TVHome.ViewChannelAndCheck(_currentProgram.ReferencedChannel());              if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == _currentProgram.ReferencedChannel().IdChannel)              {                g_Player.ShowFullScreenWindow();              }              return;                case 939: // switch mode              _backupSingleViewCursorX = _cursorX;              OnSwitchMode(false);              break;            case 629: //stop recording              Schedule schedule = Schedule.FindNoEPGSchedule(_currentProgram.ReferencedChannel());              TVUtil.DeleteRecAndEntireSchedWithPrompt(schedule);              Update(true); //remove RED marker              break;              case 2162: // Remove channel              OnRemoveChannel();                break;              case 2163: // Add channel to a group              OnAddChannelToGroup();                break;              case 2164: // Remove channel from this group              OnRemoveChannelFromGroup();                break;              case 637: // edit recording            case 264: // record              if (_currentProgram.IdProgram == 0)              {                TVHome.StartRecordingSchedule(_currentProgram.ReferencedChannel()' true);                _currentProgram.IsRecordingOncePending = true;                Update(true); //remove RED marker              }              else              {                OnRecordContext();              }              break;          }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)          {              case 1041:              ShowProgramInfo();              Log.Debug("TVGuide: show episodes or repeatings for current show");              break;            case 368: // IMDB              OnGetIMDBInfo();              break;            case 971: //group              OnSelectChannelGroup();              break;            case 1040: // set reminder            case 1212: // cancel reminder              OnNotify();              break;              case 938: // view channel                Log.Debug("viewch channel:{0}"' _currentChannel);              TVHome.ViewChannelAndCheck(_currentProgram.ReferencedChannel());              if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == _currentProgram.ReferencedChannel().IdChannel)              {                g_Player.ShowFullScreenWindow();              }              return;                case 939: // switch mode              _backupSingleViewCursorX = _cursorX;              OnSwitchMode(false);              break;            case 629: //stop recording              Schedule schedule = Schedule.FindNoEPGSchedule(_currentProgram.ReferencedChannel());              TVUtil.DeleteRecAndEntireSchedWithPrompt(schedule);              Update(true); //remove RED marker              break;              case 2162: // Remove channel              OnRemoveChannel();                break;              case 2163: // Add channel to a group              OnAddChannelToGroup();                break;              case 2164: // Remove channel from this group              OnRemoveChannelFromGroup();                break;              case 637: // edit recording            case 264: // record              if (_currentProgram.IdProgram == 0)              {                TVHome.StartRecordingSchedule(_currentProgram.ReferencedChannel()' true);                _currentProgram.IsRecordingOncePending = true;                Update(true); //remove RED marker              }              else              {                OnRecordContext();              }              break;          }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)          {              case 1041:              ShowProgramInfo();              Log.Debug("TVGuide: show episodes or repeatings for current show");              break;            case 368: // IMDB              OnGetIMDBInfo();              break;            case 971: //group              OnSelectChannelGroup();              break;            case 1040: // set reminder            case 1212: // cancel reminder              OnNotify();              break;              case 938: // view channel                Log.Debug("viewch channel:{0}"' _currentChannel);              TVHome.ViewChannelAndCheck(_currentProgram.ReferencedChannel());              if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == _currentProgram.ReferencedChannel().IdChannel)              {                g_Player.ShowFullScreenWindow();              }              return;                case 939: // switch mode              _backupSingleViewCursorX = _cursorX;              OnSwitchMode(false);              break;            case 629: //stop recording              Schedule schedule = Schedule.FindNoEPGSchedule(_currentProgram.ReferencedChannel());              TVUtil.DeleteRecAndEntireSchedWithPrompt(schedule);              Update(true); //remove RED marker              break;              case 2162: // Remove channel              OnRemoveChannel();                break;              case 2163: // Add channel to a group              OnAddChannelToGroup();                break;              case 2164: // Remove channel from this group              OnRemoveChannelFromGroup();                break;              case 637: // edit recording            case 264: // record              if (_currentProgram.IdProgram == 0)              {                TVHome.StartRecordingSchedule(_currentProgram.ReferencedChannel()' true);                _currentProgram.IsRecordingOncePending = true;                Update(true); //remove RED marker              }              else              {                OnRecordContext();              }              break;          }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)          {              case 1041:              ShowProgramInfo();              Log.Debug("TVGuide: show episodes or repeatings for current show");              break;            case 368: // IMDB              OnGetIMDBInfo();              break;            case 971: //group              OnSelectChannelGroup();              break;            case 1040: // set reminder            case 1212: // cancel reminder              OnNotify();              break;              case 938: // view channel                Log.Debug("viewch channel:{0}"' _currentChannel);              TVHome.ViewChannelAndCheck(_currentProgram.ReferencedChannel());              if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == _currentProgram.ReferencedChannel().IdChannel)              {                g_Player.ShowFullScreenWindow();              }              return;                case 939: // switch mode              _backupSingleViewCursorX = _cursorX;              OnSwitchMode(false);              break;            case 629: //stop recording              Schedule schedule = Schedule.FindNoEPGSchedule(_currentProgram.ReferencedChannel());              TVUtil.DeleteRecAndEntireSchedWithPrompt(schedule);              Update(true); //remove RED marker              break;              case 2162: // Remove channel              OnRemoveChannel();                break;              case 2163: // Add channel to a group              OnAddChannelToGroup();                break;              case 2164: // Remove channel from this group              OnRemoveChannelFromGroup();                break;              case 637: // edit recording            case 264: // record              if (_currentProgram.IdProgram == 0)              {                TVHome.StartRecordingSchedule(_currentProgram.ReferencedChannel()' true);                _currentProgram.IsRecordingOncePending = true;                Update(true); //remove RED marker              }              else              {                OnRecordContext();              }              break;          }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)          {              case 1041:              ShowProgramInfo();              Log.Debug("TVGuide: show episodes or repeatings for current show");              break;            case 368: // IMDB              OnGetIMDBInfo();              break;            case 971: //group              OnSelectChannelGroup();              break;            case 1040: // set reminder            case 1212: // cancel reminder              OnNotify();              break;              case 938: // view channel                Log.Debug("viewch channel:{0}"' _currentChannel);              TVHome.ViewChannelAndCheck(_currentProgram.ReferencedChannel());              if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == _currentProgram.ReferencedChannel().IdChannel)              {                g_Player.ShowFullScreenWindow();              }              return;                case 939: // switch mode              _backupSingleViewCursorX = _cursorX;              OnSwitchMode(false);              break;            case 629: //stop recording              Schedule schedule = Schedule.FindNoEPGSchedule(_currentProgram.ReferencedChannel());              TVUtil.DeleteRecAndEntireSchedWithPrompt(schedule);              Update(true); //remove RED marker              break;              case 2162: // Remove channel              OnRemoveChannel();                break;              case 2163: // Add channel to a group              OnAddChannelToGroup();                break;              case 2164: // Remove channel from this group              OnRemoveChannelFromGroup();                break;              case 637: // edit recording            case 264: // record              if (_currentProgram.IdProgram == 0)              {                TVHome.StartRecordingSchedule(_currentProgram.ReferencedChannel()' true);                _currentProgram.IsRecordingOncePending = true;                Update(true); //remove RED marker              }              else              {                OnRecordContext();              }              break;          }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)          {              case 1041:              ShowProgramInfo();              Log.Debug("TVGuide: show episodes or repeatings for current show");              break;            case 368: // IMDB              OnGetIMDBInfo();              break;            case 971: //group              OnSelectChannelGroup();              break;            case 1040: // set reminder            case 1212: // cancel reminder              OnNotify();              break;              case 938: // view channel                Log.Debug("viewch channel:{0}"' _currentChannel);              TVHome.ViewChannelAndCheck(_currentProgram.ReferencedChannel());              if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == _currentProgram.ReferencedChannel().IdChannel)              {                g_Player.ShowFullScreenWindow();              }              return;                case 939: // switch mode              _backupSingleViewCursorX = _cursorX;              OnSwitchMode(false);              break;            case 629: //stop recording              Schedule schedule = Schedule.FindNoEPGSchedule(_currentProgram.ReferencedChannel());              TVUtil.DeleteRecAndEntireSchedWithPrompt(schedule);              Update(true); //remove RED marker              break;              case 2162: // Remove channel              OnRemoveChannel();                break;              case 2163: // Add channel to a group              OnAddChannelToGroup();                break;              case 2164: // Remove channel from this group              OnRemoveChannelFromGroup();                break;              case 637: // edit recording            case 264: // record              if (_currentProgram.IdProgram == 0)              {                TVHome.StartRecordingSchedule(_currentProgram.ReferencedChannel()' true);                _currentProgram.IsRecordingOncePending = true;                Update(true); //remove RED marker              }              else              {                OnRecordContext();              }              break;          }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)          {              case 1041:              ShowProgramInfo();              Log.Debug("TVGuide: show episodes or repeatings for current show");              break;            case 368: // IMDB              OnGetIMDBInfo();              break;            case 971: //group              OnSelectChannelGroup();              break;            case 1040: // set reminder            case 1212: // cancel reminder              OnNotify();              break;              case 938: // view channel                Log.Debug("viewch channel:{0}"' _currentChannel);              TVHome.ViewChannelAndCheck(_currentProgram.ReferencedChannel());              if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == _currentProgram.ReferencedChannel().IdChannel)              {                g_Player.ShowFullScreenWindow();              }              return;                case 939: // switch mode              _backupSingleViewCursorX = _cursorX;              OnSwitchMode(false);              break;            case 629: //stop recording              Schedule schedule = Schedule.FindNoEPGSchedule(_currentProgram.ReferencedChannel());              TVUtil.DeleteRecAndEntireSchedWithPrompt(schedule);              Update(true); //remove RED marker              break;              case 2162: // Remove channel              OnRemoveChannel();                break;              case 2163: // Add channel to a group              OnAddChannelToGroup();                break;              case 2164: // Remove channel from this group              OnRemoveChannelFromGroup();                break;              case 637: // edit recording            case 264: // record              if (_currentProgram.IdProgram == 0)              {                TVHome.StartRecordingSchedule(_currentProgram.ReferencedChannel()' true);                _currentProgram.IsRecordingOncePending = true;                Update(true); //remove RED marker              }              else              {                OnRecordContext();              }              break;          }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnRemoveChannel,The following statement contains a magic number: GUIDialogYesNo.SetHeading(GUILocalizeStrings.Get(2162));
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnRemoveChannel,The following statement contains a magic number: GUIDialogYesNo.SetLine(1' GUILocalizeStrings.Get(2165));
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnRemoveChannel,The following statement contains a magic number: GUIDialogYesNo.SetLine(2' _currentChannel.DisplayName);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnAddChannelToGroup,The following statement contains a magic number: dlg.SetHeading(971);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnGetIMDBInfo,The following statement contains a magic number: GUIButtonControl btnPlay = (GUIButtonControl)videoInfo.GetControl(2);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnGetIMDBInfo,The following statement contains a magic number: GUICheckButton btnCast = (GUICheckButton)videoInfo.GetControl(4);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnGetIMDBInfo,The following statement contains a magic number: GUICheckButton btnWatched = (GUICheckButton)videoInfo.GetControl(6);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnSelectItem,The following statement contains a magic number: dlg.AddLocalizedString(979);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnSelectItem,The following statement contains a magic number: dlg.AddLocalizedString(938);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnSelectItem,The following statement contains a magic number: switch (dlg.SelectedId)                  {                    case 979: // Play recording from beginning                      {                        Recording recDB = Recording.Retrieve(fileName);                        if (recDB != null)                        {                          TVUtil.PlayRecording(recDB);                        }                      }                      return tuneAttempted;                      case 938: // View this channel                      {                        TVHome.ViewChannelAndCheck(_currentProgram.ReferencedChannel());                        if (g_Player.Playing)                        {                          g_Player.ShowFullScreenWindow();                        }                      }                      tuneAttempted = true;                      return tuneAttempted;                  }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnSelectItem,The following statement contains a magic number: switch (dlg.SelectedId)                  {                    case 979: // Play recording from beginning                      {                        Recording recDB = Recording.Retrieve(fileName);                        if (recDB != null)                        {                          TVUtil.PlayRecording(recDB);                        }                      }                      return tuneAttempted;                      case 938: // View this channel                      {                        TVHome.ViewChannelAndCheck(_currentProgram.ReferencedChannel());                        if (g_Player.Playing)                        {                          g_Player.ShowFullScreenWindow();                        }                      }                      tuneAttempted = true;                      return tuneAttempted;                  }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,ChangeChannelNr,The following statement contains a magic number: int channelDistance = 99999;
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetChannels,The following statement contains a magic number: tvGuidChannel.channel = new Channel(false' true' 0' DateTime.MinValue' false'                                                DateTime.MinValue' 0' true' ""' GUILocalizeStrings.Get(911)' 10000);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetChannels,The following statement contains a magic number: tvGuidChannel.channel = new Channel(false' true' 0' DateTime.MinValue' false'                                                DateTime.MinValue' 0' true' ""' GUILocalizeStrings.Get(911)' 10000);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetChannels,The following statement contains a magic number: i < 10
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,UpdateVerticalScrollbar,The following statement contains a magic number: float percentage = (current / total) * 100.0f;
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,UpdateVerticalScrollbar,The following statement contains a magic number: percentage = 100;
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,UpdateVerticalScrollbar,The following statement contains a magic number: percentage > 100
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,UpdateHorizontalScrollbar,The following statement contains a magic number: float percentage = (float)_viewingTime.Hour * 60 + _viewingTime.Minute +            (float)_timePerBlock * ((float)_viewingTime.Hour / 24.0f);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,UpdateHorizontalScrollbar,The following statement contains a magic number: float percentage = (float)_viewingTime.Hour * 60 + _viewingTime.Minute +            (float)_timePerBlock * ((float)_viewingTime.Hour / 24.0f);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,UpdateHorizontalScrollbar,The following statement contains a magic number: percentage /= (24.0f * 60.0f);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,UpdateHorizontalScrollbar,The following statement contains a magic number: percentage /= (24.0f * 60.0f);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,UpdateHorizontalScrollbar,The following statement contains a magic number: percentage *= 100.0f;
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,UpdateHorizontalScrollbar,The following statement contains a magic number: percentage = 100;
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,UpdateHorizontalScrollbar,The following statement contains a magic number: percentage > 100
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,CalcDays,The following statement contains a magic number: iDay += (new DateTime(DateTime.Now.Year' 12' 31)).DayOfYear;
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,CalcDays,The following statement contains a magic number: iDay += (new DateTime(DateTime.Now.Year' 12' 31)).DayOfYear;
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetDuration,The following statement contains a magic number: switch (progDuration.Hours)        {          case 0:            duration = progDuration.Minutes + space + GUILocalizeStrings.Get(3004);            break;          case 1:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001);            }            break;          default:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 0)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3002);            }            break;        }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetDuration,The following statement contains a magic number: switch (progDuration.Hours)        {          case 0:            duration = progDuration.Minutes + space + GUILocalizeStrings.Get(3004);            break;          case 1:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001);            }            break;          default:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 0)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3002);            }            break;        }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetDuration,The following statement contains a magic number: switch (progDuration.Hours)        {          case 0:            duration = progDuration.Minutes + space + GUILocalizeStrings.Get(3004);            break;          case 1:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001);            }            break;          default:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 0)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3002);            }            break;        }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetDuration,The following statement contains a magic number: switch (progDuration.Hours)        {          case 0:            duration = progDuration.Minutes + space + GUILocalizeStrings.Get(3004);            break;          case 1:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001);            }            break;          default:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 0)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3002);            }            break;        }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetDuration,The following statement contains a magic number: switch (progDuration.Hours)        {          case 0:            duration = progDuration.Minutes + space + GUILocalizeStrings.Get(3004);            break;          case 1:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001);            }            break;          default:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 0)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3002);            }            break;        }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetDuration,The following statement contains a magic number: switch (progDuration.Hours)        {          case 0:            duration = progDuration.Minutes + space + GUILocalizeStrings.Get(3004);            break;          case 1:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001);            }            break;          default:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 0)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3002);            }            break;        }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetDuration,The following statement contains a magic number: switch (progDuration.Hours)        {          case 0:            duration = progDuration.Minutes + space + GUILocalizeStrings.Get(3004);            break;          case 1:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001);            }            break;          default:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 0)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3002);            }            break;        }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetDuration,The following statement contains a magic number: switch (progDuration.Hours)        {          case 0:            duration = progDuration.Minutes + space + GUILocalizeStrings.Get(3004);            break;          case 1:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001);            }            break;          default:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 0)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3002);            }            break;        }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetDuration,The following statement contains a magic number: switch (progDuration.Hours)        {          case 0:            duration = progDuration.Minutes + space + GUILocalizeStrings.Get(3004);            break;          case 1:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 1)            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001) + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3001);            }            break;          default:            if (progDuration.Minutes == 1)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3003);            }            else if (progDuration.Minutes > 0)            {              duration = progDuration.Hours + " Hours" + "' " + progDuration.Minutes + space +                GUILocalizeStrings.Get(3004);            }            else            {              duration = progDuration.Hours + space + GUILocalizeStrings.Get(3002);            }            break;        }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetDurationAsMinutes,The following statement contains a magic number: return progDuration.TotalMinutes + " " + GUILocalizeStrings.Get(2998);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,GetStartTimeFromNow,The following statement contains a magic number: switch (timeRelative.Hours)            {              case 0:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); // starts in 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3013);                }                break;              case 1:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in 1 hour' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3001) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in 1 hour' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + GUILocalizeStrings.Get(3001);                  //starts in 1 hour                }                break;              default:                if (timeRelative.Minutes == 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3003); //starts in x hours' 1 minute                }                else if (timeRelative.Minutes > 1)                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002) + "' " + timeRelative.Minutes + space +                    GUILocalizeStrings.Get(3004); //starts in x hours' x minutes                }                else                {                  timeFromNow = GUILocalizeStrings.Get(3009) + " " + timeRelative.Hours + space +                    GUILocalizeStrings.Get(3002); //starts in x hours                }                break;            }
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,setGuideHeadingVisibility,The following statement contains a magic number: ((GUILabelControl)control).Label == GUILocalizeStrings.Get(4)
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnProgress,The following statement contains a magic number: pDlgProgress.SetLine(2' line2);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnSearchStarting,The following statement contains a magic number: pDlgProgress.SetHeading(GUILocalizeStrings.Get(197));
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnSearchStarting,The following statement contains a magic number: pDlgProgress.SetLine(2' string.Empty);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnMovieNotFound,The following statement contains a magic number: pDlgOK.SetHeading(195);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnMovieNotFound,The following statement contains a magic number: pDlgOK.SetLine(2' string.Empty);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnDetailsStarting,The following statement contains a magic number: pDlgProgress.SetHeading(GUILocalizeStrings.Get(198));
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnDetailsStarting,The following statement contains a magic number: pDlgProgress.SetLine(2' string.Empty);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnDetailsNotFound,The following statement contains a magic number: pDlgOK.SetHeading(195);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnDetailsNotFound,The following statement contains a magic number: pDlgOK.SetLine(2' string.Empty);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnSelectMovie,The following statement contains a magic number: pDlgSelect.SetHeading(196);
Magic Number,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnSelectMovie,The following statement contains a magic number: pDlgSelect.SetButtonLabel(413);
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,GetHome,The following statement contains a magic number: strButtonText = GUILocalizeStrings.Get(605);
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_RECORD:            // record current program on current channel            // are we watching tv?                                ManualRecord(Navigator.Channel' GetID);            break;          case Action.ActionType.ACTION_PREV_CHANNEL:            OnPreviousChannel();            break;          case Action.ActionType.ACTION_PAGE_DOWN:            OnPreviousChannel();            break;          case Action.ActionType.ACTION_NEXT_CHANNEL:            OnNextChannel();            break;          case Action.ActionType.ACTION_PAGE_UP:            OnNextChannel();            break;          case Action.ActionType.ACTION_LAST_VIEWED_CHANNEL:            OnLastViewedChannel();            break;          case Action.ActionType.ACTION_PREVIOUS_MENU:            {              // goto home               // are we watching tv & doing timeshifting                // No' then stop viewing...               //g_Player.Stop();              GUIWindowManager.ShowPreviousWindow();              return;            }          case Action.ActionType.ACTION_KEY_PRESSED:            {              if ((char)action.m_key.KeyChar == '0')              {                OnLastViewedChannel();              }            }            break;          case Action.ActionType.ACTION_SHOW_GUI:            {              // If we are in tvhome and TV is currently off and no fullscreen TV then turn ON TV now!              if (!g_Player.IsTimeShifting && !g_Player.FullScreen)              {                OnClicked(8' btnTvOnOff' Action.ActionType.ACTION_MOUSE_CLICK); //8=togglebutton              }              break;            }        }
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnPageLoad,The following statement contains a magic number: btnActiveStreams.Label = GUILocalizeStrings.Get(692);
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,StartRecordingSchedule,The following statement contains a magic number: Schedule newSchedule = new Schedule(channel.IdChannel'                                              GUILocalizeStrings.Get(413) + " (" + channel.DisplayName + ")"'                                              DateTime.Now' DateTime.Now.AddDays(1));
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ShowDlgAsynch,The following statement contains a magic number: pDlgOK.SetHeading(257);
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ShowDlgAsynch,The following statement contains a magic number: pDlgOK.SetText(GUILocalizeStrings.Get(1510));
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ShowDlgAsynch,The following statement contains a magic number: pDlgOK.TimeOut = 5;
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ShowDlgThread,The following statement contains a magic number: count < 50
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,WaitForGentleConnection,The following statement contains a magic number: !success && timer.ElapsedMilliseconds < 10000
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,LoadSettings,The following statement contains a magic number: lang.Length != 3
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,LoadSettings,The following statement contains a magic number: _notifyTVTimeout = xmlreader.GetValueAsInt("mytv"' "notifyTVTimeout"' 15);
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,LoadSettings,The following statement contains a magic number: _preNotifyConfig = xmlreader.GetValueAsInt("mytv"' "notifyTVBefore"' 300);
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,HandleWakeUpTvServer,The following statement contains a magic number: intTimeOut = xmlreader.GetValueAsInt("tvservice"' "WOLTimeOut"' 10);
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,HandleWakeUpTvServer,The following statement contains a magic number: Log.Debug("TVHome: WOL - Valid auto MAC address: {0:x}:{1:x}:{2:x}:{3:x}:{4:x}:{5:x}"                            ' hwAddress[0]' hwAddress[1]' hwAddress[2]' hwAddress[3]' hwAddress[4]' hwAddress[5]);
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,HandleWakeUpTvServer,The following statement contains a magic number: Log.Debug("TVHome: WOL - Valid auto MAC address: {0:x}:{1:x}:{2:x}:{3:x}:{4:x}:{5:x}"                            ' hwAddress[0]' hwAddress[1]' hwAddress[2]' hwAddress[3]' hwAddress[4]' hwAddress[5]);
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,HandleWakeUpTvServer,The following statement contains a magic number: Log.Debug("TVHome: WOL - Valid auto MAC address: {0:x}:{1:x}:{2:x}:{3:x}:{4:x}:{5:x}"                            ' hwAddress[0]' hwAddress[1]' hwAddress[2]' hwAddress[3]' hwAddress[4]' hwAddress[5]);
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,HandleWakeUpTvServer,The following statement contains a magic number: Log.Debug("TVHome: WOL - Valid auto MAC address: {0:x}:{1:x}:{2:x}:{3:x}:{4:x}:{5:x}"                            ' hwAddress[0]' hwAddress[1]' hwAddress[2]' hwAddress[3]' hwAddress[4]' hwAddress[5]);
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,HeartBeatTransmitter,The following statement contains a magic number: int countToHBLoop = 5;
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,HeartBeatTransmitter,The following statement contains a magic number: countToHBLoop >= 5
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,HeartBeatTransmitter,The following statement contains a magic number: Thread.Sleep(HEARTBEAT_INTERVAL * 1000);
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,NotifyUser,The following statement contains a magic number: pDlgOK.SetHeading(GUILocalizeStrings.Get(605) + " - " + Navigator.CurrentChannel);
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnSelectGroup,The following statement contains a magic number: dlg.SetHeading(971);
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,TvDelayThread,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,TvDelayThread,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,TvDelayThread,The following statement contains a magic number: _playbackStopped && waits < 100
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnGlobalMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_STOP_SERVER_TIMESHIFTING:            {              User user = new User();              if (user.Name == Card.User.Name)              {                Card.StopTimeShifting();              }              break;            }          case GUIMessage.MessageType.GUI_MSG_GET_PROGRAM_INFO:            {              if (!Radio.CurrentChannel.IsWebstream() && Navigator.Channel != null && Navigator.Channel.CurrentProgram.Title != null                && Navigator.Channel.NextProgram.Title != null)              {                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_SEND_PROGRAM_INFO' 0' 0' 0' 0' 0' null);                msg.Label = Navigator.Channel.CurrentProgram.Title;                msg.Label2 = Navigator.Channel.NextProgram.Title;                GUIWindowManager.SendMessage(msg);              }              break;            }          case GUIMessage.MessageType.GUI_MSG_NOTIFY_REC:            string heading = message.Label;            string text = message.Label2;            Channel ch = message.Object as Channel;            //Log.Debug("Received rec notify message: {0}' {1}' {2}"' heading' text' (ch != null).ToString()); //remove later            string logo = TVUtil.GetChannelLogo(ch);            GUIDialogNotify pDlgNotify = (GUIDialogNotify)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_NOTIFY);            if (pDlgNotify != null)            {              pDlgNotify.Reset();              pDlgNotify.ClearAll();              pDlgNotify.SetHeading(heading);              if (!string.IsNullOrEmpty(text))              {                pDlgNotify.SetText(text);              }              pDlgNotify.SetImage(logo);              pDlgNotify.TimeOut = 5;                pDlgNotify.DoModal(GUIWindowManager.ActiveWindow);            }            break;          case GUIMessage.MessageType.GUI_MSG_NOTIFY_TV_PROGRAM:            {              TVNotifyYesNoDialog tvNotifyDlg = (TVNotifyYesNoDialog)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_TVNOTIFYYESNO);                TVProgramDescription notify = message.Object as TVProgramDescription;              if (tvNotifyDlg == null || notify == null)              {                return;              }              int minUntilStart = _preNotifyConfig / 60;              if (notify.StartTime > DateTime.Now)              {                if (minUntilStart > 1)                {                  tvNotifyDlg.SetHeading(String.Format(GUILocalizeStrings.Get(1018)' minUntilStart));                }                else                {                  tvNotifyDlg.SetHeading(1019); // Program is about to begin                }              }              else              {                tvNotifyDlg.SetHeading(String.Format(GUILocalizeStrings.Get(1206)' (DateTime.Now - notify.StartTime).Minutes.ToString()));              }              tvNotifyDlg.SetLine(1' notify.Title);              tvNotifyDlg.SetLine(2' notify.Description);              tvNotifyDlg.SetLine(4' String.Format(GUILocalizeStrings.Get(1207)' notify.Channel.DisplayName));              Channel c = notify.Channel;              string strLogo = string.Empty;              if (c.IsTv)              {                strLogo = MediaPortal.Util.Utils.GetCoverArt(Thumbs.TVChannel' c.DisplayName);              }              else if (c.IsRadio)              {                strLogo = MediaPortal.Util.Utils.GetCoverArt(Thumbs.Radio' c.DisplayName);              }                tvNotifyDlg.SetImage(strLogo);              tvNotifyDlg.TimeOut = _notifyTVTimeout;              if (_playNotifyBeep)              {                MediaPortal.Util.Utils.PlaySound("notify.wav"' false' true);              }              tvNotifyDlg.SetDefaultToYes(false);              tvNotifyDlg.DoModal(GUIWindowManager.ActiveWindow);                if (tvNotifyDlg.IsConfirmed)              {                try                {                  MediaPortal.Player.g_Player.Stop();                    if (c.IsTv)                  {                    MediaPortal.GUI.Library.GUIWindowManager.ActivateWindow((int)MediaPortal.GUI.Library.GUIWindow.Window.WINDOW_TV);                    TVHome.ViewChannelAndCheck(c);                    if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == c.IdChannel)                    {                      g_Player.ShowFullScreenWindow();                    }                  }                  else if (c.IsRadio)                  {                    MediaPortal.GUI.Library.GUIWindowManager.ActivateWindow((int)MediaPortal.GUI.Library.GUIWindow.Window.WINDOW_RADIO);                    Radio.CurrentChannel = c;                    Radio.Play();                  }                }                catch (Exception e)                {                  Log.Error("TVHome: TVNotification: Error on starting channel {0} after notification: {1} {2} {3}"' notify.Channel.DisplayName' e.Message' e.Source' e.StackTrace);                }                }              break;            }        }
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnGlobalMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_STOP_SERVER_TIMESHIFTING:            {              User user = new User();              if (user.Name == Card.User.Name)              {                Card.StopTimeShifting();              }              break;            }          case GUIMessage.MessageType.GUI_MSG_GET_PROGRAM_INFO:            {              if (!Radio.CurrentChannel.IsWebstream() && Navigator.Channel != null && Navigator.Channel.CurrentProgram.Title != null                && Navigator.Channel.NextProgram.Title != null)              {                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_SEND_PROGRAM_INFO' 0' 0' 0' 0' 0' null);                msg.Label = Navigator.Channel.CurrentProgram.Title;                msg.Label2 = Navigator.Channel.NextProgram.Title;                GUIWindowManager.SendMessage(msg);              }              break;            }          case GUIMessage.MessageType.GUI_MSG_NOTIFY_REC:            string heading = message.Label;            string text = message.Label2;            Channel ch = message.Object as Channel;            //Log.Debug("Received rec notify message: {0}' {1}' {2}"' heading' text' (ch != null).ToString()); //remove later            string logo = TVUtil.GetChannelLogo(ch);            GUIDialogNotify pDlgNotify = (GUIDialogNotify)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_NOTIFY);            if (pDlgNotify != null)            {              pDlgNotify.Reset();              pDlgNotify.ClearAll();              pDlgNotify.SetHeading(heading);              if (!string.IsNullOrEmpty(text))              {                pDlgNotify.SetText(text);              }              pDlgNotify.SetImage(logo);              pDlgNotify.TimeOut = 5;                pDlgNotify.DoModal(GUIWindowManager.ActiveWindow);            }            break;          case GUIMessage.MessageType.GUI_MSG_NOTIFY_TV_PROGRAM:            {              TVNotifyYesNoDialog tvNotifyDlg = (TVNotifyYesNoDialog)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_TVNOTIFYYESNO);                TVProgramDescription notify = message.Object as TVProgramDescription;              if (tvNotifyDlg == null || notify == null)              {                return;              }              int minUntilStart = _preNotifyConfig / 60;              if (notify.StartTime > DateTime.Now)              {                if (minUntilStart > 1)                {                  tvNotifyDlg.SetHeading(String.Format(GUILocalizeStrings.Get(1018)' minUntilStart));                }                else                {                  tvNotifyDlg.SetHeading(1019); // Program is about to begin                }              }              else              {                tvNotifyDlg.SetHeading(String.Format(GUILocalizeStrings.Get(1206)' (DateTime.Now - notify.StartTime).Minutes.ToString()));              }              tvNotifyDlg.SetLine(1' notify.Title);              tvNotifyDlg.SetLine(2' notify.Description);              tvNotifyDlg.SetLine(4' String.Format(GUILocalizeStrings.Get(1207)' notify.Channel.DisplayName));              Channel c = notify.Channel;              string strLogo = string.Empty;              if (c.IsTv)              {                strLogo = MediaPortal.Util.Utils.GetCoverArt(Thumbs.TVChannel' c.DisplayName);              }              else if (c.IsRadio)              {                strLogo = MediaPortal.Util.Utils.GetCoverArt(Thumbs.Radio' c.DisplayName);              }                tvNotifyDlg.SetImage(strLogo);              tvNotifyDlg.TimeOut = _notifyTVTimeout;              if (_playNotifyBeep)              {                MediaPortal.Util.Utils.PlaySound("notify.wav"' false' true);              }              tvNotifyDlg.SetDefaultToYes(false);              tvNotifyDlg.DoModal(GUIWindowManager.ActiveWindow);                if (tvNotifyDlg.IsConfirmed)              {                try                {                  MediaPortal.Player.g_Player.Stop();                    if (c.IsTv)                  {                    MediaPortal.GUI.Library.GUIWindowManager.ActivateWindow((int)MediaPortal.GUI.Library.GUIWindow.Window.WINDOW_TV);                    TVHome.ViewChannelAndCheck(c);                    if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == c.IdChannel)                    {                      g_Player.ShowFullScreenWindow();                    }                  }                  else if (c.IsRadio)                  {                    MediaPortal.GUI.Library.GUIWindowManager.ActivateWindow((int)MediaPortal.GUI.Library.GUIWindow.Window.WINDOW_RADIO);                    Radio.CurrentChannel = c;                    Radio.Play();                  }                }                catch (Exception e)                {                  Log.Error("TVHome: TVNotification: Error on starting channel {0} after notification: {1} {2} {3}"' notify.Channel.DisplayName' e.Message' e.Source' e.StackTrace);                }                }              break;            }        }
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnGlobalMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_STOP_SERVER_TIMESHIFTING:            {              User user = new User();              if (user.Name == Card.User.Name)              {                Card.StopTimeShifting();              }              break;            }          case GUIMessage.MessageType.GUI_MSG_GET_PROGRAM_INFO:            {              if (!Radio.CurrentChannel.IsWebstream() && Navigator.Channel != null && Navigator.Channel.CurrentProgram.Title != null                && Navigator.Channel.NextProgram.Title != null)              {                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_SEND_PROGRAM_INFO' 0' 0' 0' 0' 0' null);                msg.Label = Navigator.Channel.CurrentProgram.Title;                msg.Label2 = Navigator.Channel.NextProgram.Title;                GUIWindowManager.SendMessage(msg);              }              break;            }          case GUIMessage.MessageType.GUI_MSG_NOTIFY_REC:            string heading = message.Label;            string text = message.Label2;            Channel ch = message.Object as Channel;            //Log.Debug("Received rec notify message: {0}' {1}' {2}"' heading' text' (ch != null).ToString()); //remove later            string logo = TVUtil.GetChannelLogo(ch);            GUIDialogNotify pDlgNotify = (GUIDialogNotify)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_NOTIFY);            if (pDlgNotify != null)            {              pDlgNotify.Reset();              pDlgNotify.ClearAll();              pDlgNotify.SetHeading(heading);              if (!string.IsNullOrEmpty(text))              {                pDlgNotify.SetText(text);              }              pDlgNotify.SetImage(logo);              pDlgNotify.TimeOut = 5;                pDlgNotify.DoModal(GUIWindowManager.ActiveWindow);            }            break;          case GUIMessage.MessageType.GUI_MSG_NOTIFY_TV_PROGRAM:            {              TVNotifyYesNoDialog tvNotifyDlg = (TVNotifyYesNoDialog)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_TVNOTIFYYESNO);                TVProgramDescription notify = message.Object as TVProgramDescription;              if (tvNotifyDlg == null || notify == null)              {                return;              }              int minUntilStart = _preNotifyConfig / 60;              if (notify.StartTime > DateTime.Now)              {                if (minUntilStart > 1)                {                  tvNotifyDlg.SetHeading(String.Format(GUILocalizeStrings.Get(1018)' minUntilStart));                }                else                {                  tvNotifyDlg.SetHeading(1019); // Program is about to begin                }              }              else              {                tvNotifyDlg.SetHeading(String.Format(GUILocalizeStrings.Get(1206)' (DateTime.Now - notify.StartTime).Minutes.ToString()));              }              tvNotifyDlg.SetLine(1' notify.Title);              tvNotifyDlg.SetLine(2' notify.Description);              tvNotifyDlg.SetLine(4' String.Format(GUILocalizeStrings.Get(1207)' notify.Channel.DisplayName));              Channel c = notify.Channel;              string strLogo = string.Empty;              if (c.IsTv)              {                strLogo = MediaPortal.Util.Utils.GetCoverArt(Thumbs.TVChannel' c.DisplayName);              }              else if (c.IsRadio)              {                strLogo = MediaPortal.Util.Utils.GetCoverArt(Thumbs.Radio' c.DisplayName);              }                tvNotifyDlg.SetImage(strLogo);              tvNotifyDlg.TimeOut = _notifyTVTimeout;              if (_playNotifyBeep)              {                MediaPortal.Util.Utils.PlaySound("notify.wav"' false' true);              }              tvNotifyDlg.SetDefaultToYes(false);              tvNotifyDlg.DoModal(GUIWindowManager.ActiveWindow);                if (tvNotifyDlg.IsConfirmed)              {                try                {                  MediaPortal.Player.g_Player.Stop();                    if (c.IsTv)                  {                    MediaPortal.GUI.Library.GUIWindowManager.ActivateWindow((int)MediaPortal.GUI.Library.GUIWindow.Window.WINDOW_TV);                    TVHome.ViewChannelAndCheck(c);                    if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == c.IdChannel)                    {                      g_Player.ShowFullScreenWindow();                    }                  }                  else if (c.IsRadio)                  {                    MediaPortal.GUI.Library.GUIWindowManager.ActivateWindow((int)MediaPortal.GUI.Library.GUIWindow.Window.WINDOW_RADIO);                    Radio.CurrentChannel = c;                    Radio.Play();                  }                }                catch (Exception e)                {                  Log.Error("TVHome: TVNotification: Error on starting channel {0} after notification: {1} {2} {3}"' notify.Channel.DisplayName' e.Message' e.Source' e.StackTrace);                }                }              break;            }        }
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnGlobalMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_STOP_SERVER_TIMESHIFTING:            {              User user = new User();              if (user.Name == Card.User.Name)              {                Card.StopTimeShifting();              }              break;            }          case GUIMessage.MessageType.GUI_MSG_GET_PROGRAM_INFO:            {              if (!Radio.CurrentChannel.IsWebstream() && Navigator.Channel != null && Navigator.Channel.CurrentProgram.Title != null                && Navigator.Channel.NextProgram.Title != null)              {                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_SEND_PROGRAM_INFO' 0' 0' 0' 0' 0' null);                msg.Label = Navigator.Channel.CurrentProgram.Title;                msg.Label2 = Navigator.Channel.NextProgram.Title;                GUIWindowManager.SendMessage(msg);              }              break;            }          case GUIMessage.MessageType.GUI_MSG_NOTIFY_REC:            string heading = message.Label;            string text = message.Label2;            Channel ch = message.Object as Channel;            //Log.Debug("Received rec notify message: {0}' {1}' {2}"' heading' text' (ch != null).ToString()); //remove later            string logo = TVUtil.GetChannelLogo(ch);            GUIDialogNotify pDlgNotify = (GUIDialogNotify)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_NOTIFY);            if (pDlgNotify != null)            {              pDlgNotify.Reset();              pDlgNotify.ClearAll();              pDlgNotify.SetHeading(heading);              if (!string.IsNullOrEmpty(text))              {                pDlgNotify.SetText(text);              }              pDlgNotify.SetImage(logo);              pDlgNotify.TimeOut = 5;                pDlgNotify.DoModal(GUIWindowManager.ActiveWindow);            }            break;          case GUIMessage.MessageType.GUI_MSG_NOTIFY_TV_PROGRAM:            {              TVNotifyYesNoDialog tvNotifyDlg = (TVNotifyYesNoDialog)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_TVNOTIFYYESNO);                TVProgramDescription notify = message.Object as TVProgramDescription;              if (tvNotifyDlg == null || notify == null)              {                return;              }              int minUntilStart = _preNotifyConfig / 60;              if (notify.StartTime > DateTime.Now)              {                if (minUntilStart > 1)                {                  tvNotifyDlg.SetHeading(String.Format(GUILocalizeStrings.Get(1018)' minUntilStart));                }                else                {                  tvNotifyDlg.SetHeading(1019); // Program is about to begin                }              }              else              {                tvNotifyDlg.SetHeading(String.Format(GUILocalizeStrings.Get(1206)' (DateTime.Now - notify.StartTime).Minutes.ToString()));              }              tvNotifyDlg.SetLine(1' notify.Title);              tvNotifyDlg.SetLine(2' notify.Description);              tvNotifyDlg.SetLine(4' String.Format(GUILocalizeStrings.Get(1207)' notify.Channel.DisplayName));              Channel c = notify.Channel;              string strLogo = string.Empty;              if (c.IsTv)              {                strLogo = MediaPortal.Util.Utils.GetCoverArt(Thumbs.TVChannel' c.DisplayName);              }              else if (c.IsRadio)              {                strLogo = MediaPortal.Util.Utils.GetCoverArt(Thumbs.Radio' c.DisplayName);              }                tvNotifyDlg.SetImage(strLogo);              tvNotifyDlg.TimeOut = _notifyTVTimeout;              if (_playNotifyBeep)              {                MediaPortal.Util.Utils.PlaySound("notify.wav"' false' true);              }              tvNotifyDlg.SetDefaultToYes(false);              tvNotifyDlg.DoModal(GUIWindowManager.ActiveWindow);                if (tvNotifyDlg.IsConfirmed)              {                try                {                  MediaPortal.Player.g_Player.Stop();                    if (c.IsTv)                  {                    MediaPortal.GUI.Library.GUIWindowManager.ActivateWindow((int)MediaPortal.GUI.Library.GUIWindow.Window.WINDOW_TV);                    TVHome.ViewChannelAndCheck(c);                    if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == c.IdChannel)                    {                      g_Player.ShowFullScreenWindow();                    }                  }                  else if (c.IsRadio)                  {                    MediaPortal.GUI.Library.GUIWindowManager.ActivateWindow((int)MediaPortal.GUI.Library.GUIWindow.Window.WINDOW_RADIO);                    Radio.CurrentChannel = c;                    Radio.Play();                  }                }                catch (Exception e)                {                  Log.Error("TVHome: TVNotification: Error on starting channel {0} after notification: {1} {2} {3}"' notify.Channel.DisplayName' e.Message' e.Source' e.StackTrace);                }                }              break;            }        }
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnGlobalMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_STOP_SERVER_TIMESHIFTING:            {              User user = new User();              if (user.Name == Card.User.Name)              {                Card.StopTimeShifting();              }              break;            }          case GUIMessage.MessageType.GUI_MSG_GET_PROGRAM_INFO:            {              if (!Radio.CurrentChannel.IsWebstream() && Navigator.Channel != null && Navigator.Channel.CurrentProgram.Title != null                && Navigator.Channel.NextProgram.Title != null)              {                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_SEND_PROGRAM_INFO' 0' 0' 0' 0' 0' null);                msg.Label = Navigator.Channel.CurrentProgram.Title;                msg.Label2 = Navigator.Channel.NextProgram.Title;                GUIWindowManager.SendMessage(msg);              }              break;            }          case GUIMessage.MessageType.GUI_MSG_NOTIFY_REC:            string heading = message.Label;            string text = message.Label2;            Channel ch = message.Object as Channel;            //Log.Debug("Received rec notify message: {0}' {1}' {2}"' heading' text' (ch != null).ToString()); //remove later            string logo = TVUtil.GetChannelLogo(ch);            GUIDialogNotify pDlgNotify = (GUIDialogNotify)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_NOTIFY);            if (pDlgNotify != null)            {              pDlgNotify.Reset();              pDlgNotify.ClearAll();              pDlgNotify.SetHeading(heading);              if (!string.IsNullOrEmpty(text))              {                pDlgNotify.SetText(text);              }              pDlgNotify.SetImage(logo);              pDlgNotify.TimeOut = 5;                pDlgNotify.DoModal(GUIWindowManager.ActiveWindow);            }            break;          case GUIMessage.MessageType.GUI_MSG_NOTIFY_TV_PROGRAM:            {              TVNotifyYesNoDialog tvNotifyDlg = (TVNotifyYesNoDialog)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_TVNOTIFYYESNO);                TVProgramDescription notify = message.Object as TVProgramDescription;              if (tvNotifyDlg == null || notify == null)              {                return;              }              int minUntilStart = _preNotifyConfig / 60;              if (notify.StartTime > DateTime.Now)              {                if (minUntilStart > 1)                {                  tvNotifyDlg.SetHeading(String.Format(GUILocalizeStrings.Get(1018)' minUntilStart));                }                else                {                  tvNotifyDlg.SetHeading(1019); // Program is about to begin                }              }              else              {                tvNotifyDlg.SetHeading(String.Format(GUILocalizeStrings.Get(1206)' (DateTime.Now - notify.StartTime).Minutes.ToString()));              }              tvNotifyDlg.SetLine(1' notify.Title);              tvNotifyDlg.SetLine(2' notify.Description);              tvNotifyDlg.SetLine(4' String.Format(GUILocalizeStrings.Get(1207)' notify.Channel.DisplayName));              Channel c = notify.Channel;              string strLogo = string.Empty;              if (c.IsTv)              {                strLogo = MediaPortal.Util.Utils.GetCoverArt(Thumbs.TVChannel' c.DisplayName);              }              else if (c.IsRadio)              {                strLogo = MediaPortal.Util.Utils.GetCoverArt(Thumbs.Radio' c.DisplayName);              }                tvNotifyDlg.SetImage(strLogo);              tvNotifyDlg.TimeOut = _notifyTVTimeout;              if (_playNotifyBeep)              {                MediaPortal.Util.Utils.PlaySound("notify.wav"' false' true);              }              tvNotifyDlg.SetDefaultToYes(false);              tvNotifyDlg.DoModal(GUIWindowManager.ActiveWindow);                if (tvNotifyDlg.IsConfirmed)              {                try                {                  MediaPortal.Player.g_Player.Stop();                    if (c.IsTv)                  {                    MediaPortal.GUI.Library.GUIWindowManager.ActivateWindow((int)MediaPortal.GUI.Library.GUIWindow.Window.WINDOW_TV);                    TVHome.ViewChannelAndCheck(c);                    if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == c.IdChannel)                    {                      g_Player.ShowFullScreenWindow();                    }                  }                  else if (c.IsRadio)                  {                    MediaPortal.GUI.Library.GUIWindowManager.ActivateWindow((int)MediaPortal.GUI.Library.GUIWindow.Window.WINDOW_RADIO);                    Radio.CurrentChannel = c;                    Radio.Play();                  }                }                catch (Exception e)                {                  Log.Error("TVHome: TVNotification: Error on starting channel {0} after notification: {1} {2} {3}"' notify.Channel.DisplayName' e.Message' e.Source' e.StackTrace);                }                }              break;            }        }
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnGlobalMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_STOP_SERVER_TIMESHIFTING:            {              User user = new User();              if (user.Name == Card.User.Name)              {                Card.StopTimeShifting();              }              break;            }          case GUIMessage.MessageType.GUI_MSG_GET_PROGRAM_INFO:            {              if (!Radio.CurrentChannel.IsWebstream() && Navigator.Channel != null && Navigator.Channel.CurrentProgram.Title != null                && Navigator.Channel.NextProgram.Title != null)              {                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_SEND_PROGRAM_INFO' 0' 0' 0' 0' 0' null);                msg.Label = Navigator.Channel.CurrentProgram.Title;                msg.Label2 = Navigator.Channel.NextProgram.Title;                GUIWindowManager.SendMessage(msg);              }              break;            }          case GUIMessage.MessageType.GUI_MSG_NOTIFY_REC:            string heading = message.Label;            string text = message.Label2;            Channel ch = message.Object as Channel;            //Log.Debug("Received rec notify message: {0}' {1}' {2}"' heading' text' (ch != null).ToString()); //remove later            string logo = TVUtil.GetChannelLogo(ch);            GUIDialogNotify pDlgNotify = (GUIDialogNotify)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_NOTIFY);            if (pDlgNotify != null)            {              pDlgNotify.Reset();              pDlgNotify.ClearAll();              pDlgNotify.SetHeading(heading);              if (!string.IsNullOrEmpty(text))              {                pDlgNotify.SetText(text);              }              pDlgNotify.SetImage(logo);              pDlgNotify.TimeOut = 5;                pDlgNotify.DoModal(GUIWindowManager.ActiveWindow);            }            break;          case GUIMessage.MessageType.GUI_MSG_NOTIFY_TV_PROGRAM:            {              TVNotifyYesNoDialog tvNotifyDlg = (TVNotifyYesNoDialog)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_TVNOTIFYYESNO);                TVProgramDescription notify = message.Object as TVProgramDescription;              if (tvNotifyDlg == null || notify == null)              {                return;              }              int minUntilStart = _preNotifyConfig / 60;              if (notify.StartTime > DateTime.Now)              {                if (minUntilStart > 1)                {                  tvNotifyDlg.SetHeading(String.Format(GUILocalizeStrings.Get(1018)' minUntilStart));                }                else                {                  tvNotifyDlg.SetHeading(1019); // Program is about to begin                }              }              else              {                tvNotifyDlg.SetHeading(String.Format(GUILocalizeStrings.Get(1206)' (DateTime.Now - notify.StartTime).Minutes.ToString()));              }              tvNotifyDlg.SetLine(1' notify.Title);              tvNotifyDlg.SetLine(2' notify.Description);              tvNotifyDlg.SetLine(4' String.Format(GUILocalizeStrings.Get(1207)' notify.Channel.DisplayName));              Channel c = notify.Channel;              string strLogo = string.Empty;              if (c.IsTv)              {                strLogo = MediaPortal.Util.Utils.GetCoverArt(Thumbs.TVChannel' c.DisplayName);              }              else if (c.IsRadio)              {                strLogo = MediaPortal.Util.Utils.GetCoverArt(Thumbs.Radio' c.DisplayName);              }                tvNotifyDlg.SetImage(strLogo);              tvNotifyDlg.TimeOut = _notifyTVTimeout;              if (_playNotifyBeep)              {                MediaPortal.Util.Utils.PlaySound("notify.wav"' false' true);              }              tvNotifyDlg.SetDefaultToYes(false);              tvNotifyDlg.DoModal(GUIWindowManager.ActiveWindow);                if (tvNotifyDlg.IsConfirmed)              {                try                {                  MediaPortal.Player.g_Player.Stop();                    if (c.IsTv)                  {                    MediaPortal.GUI.Library.GUIWindowManager.ActivateWindow((int)MediaPortal.GUI.Library.GUIWindow.Window.WINDOW_TV);                    TVHome.ViewChannelAndCheck(c);                    if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == c.IdChannel)                    {                      g_Player.ShowFullScreenWindow();                    }                  }                  else if (c.IsRadio)                  {                    MediaPortal.GUI.Library.GUIWindowManager.ActivateWindow((int)MediaPortal.GUI.Library.GUIWindow.Window.WINDOW_RADIO);                    Radio.CurrentChannel = c;                    Radio.Play();                  }                }                catch (Exception e)                {                  Log.Error("TVHome: TVNotification: Error on starting channel {0} after notification: {1} {2} {3}"' notify.Channel.DisplayName' e.Message' e.Source' e.StackTrace);                }                }              break;            }        }
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnGlobalMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_STOP_SERVER_TIMESHIFTING:            {              User user = new User();              if (user.Name == Card.User.Name)              {                Card.StopTimeShifting();              }              break;            }          case GUIMessage.MessageType.GUI_MSG_GET_PROGRAM_INFO:            {              if (!Radio.CurrentChannel.IsWebstream() && Navigator.Channel != null && Navigator.Channel.CurrentProgram.Title != null                && Navigator.Channel.NextProgram.Title != null)              {                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_SEND_PROGRAM_INFO' 0' 0' 0' 0' 0' null);                msg.Label = Navigator.Channel.CurrentProgram.Title;                msg.Label2 = Navigator.Channel.NextProgram.Title;                GUIWindowManager.SendMessage(msg);              }              break;            }          case GUIMessage.MessageType.GUI_MSG_NOTIFY_REC:            string heading = message.Label;            string text = message.Label2;            Channel ch = message.Object as Channel;            //Log.Debug("Received rec notify message: {0}' {1}' {2}"' heading' text' (ch != null).ToString()); //remove later            string logo = TVUtil.GetChannelLogo(ch);            GUIDialogNotify pDlgNotify = (GUIDialogNotify)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_NOTIFY);            if (pDlgNotify != null)            {              pDlgNotify.Reset();              pDlgNotify.ClearAll();              pDlgNotify.SetHeading(heading);              if (!string.IsNullOrEmpty(text))              {                pDlgNotify.SetText(text);              }              pDlgNotify.SetImage(logo);              pDlgNotify.TimeOut = 5;                pDlgNotify.DoModal(GUIWindowManager.ActiveWindow);            }            break;          case GUIMessage.MessageType.GUI_MSG_NOTIFY_TV_PROGRAM:            {              TVNotifyYesNoDialog tvNotifyDlg = (TVNotifyYesNoDialog)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_TVNOTIFYYESNO);                TVProgramDescription notify = message.Object as TVProgramDescription;              if (tvNotifyDlg == null || notify == null)              {                return;              }              int minUntilStart = _preNotifyConfig / 60;              if (notify.StartTime > DateTime.Now)              {                if (minUntilStart > 1)                {                  tvNotifyDlg.SetHeading(String.Format(GUILocalizeStrings.Get(1018)' minUntilStart));                }                else                {                  tvNotifyDlg.SetHeading(1019); // Program is about to begin                }              }              else              {                tvNotifyDlg.SetHeading(String.Format(GUILocalizeStrings.Get(1206)' (DateTime.Now - notify.StartTime).Minutes.ToString()));              }              tvNotifyDlg.SetLine(1' notify.Title);              tvNotifyDlg.SetLine(2' notify.Description);              tvNotifyDlg.SetLine(4' String.Format(GUILocalizeStrings.Get(1207)' notify.Channel.DisplayName));              Channel c = notify.Channel;              string strLogo = string.Empty;              if (c.IsTv)              {                strLogo = MediaPortal.Util.Utils.GetCoverArt(Thumbs.TVChannel' c.DisplayName);              }              else if (c.IsRadio)              {                strLogo = MediaPortal.Util.Utils.GetCoverArt(Thumbs.Radio' c.DisplayName);              }                tvNotifyDlg.SetImage(strLogo);              tvNotifyDlg.TimeOut = _notifyTVTimeout;              if (_playNotifyBeep)              {                MediaPortal.Util.Utils.PlaySound("notify.wav"' false' true);              }              tvNotifyDlg.SetDefaultToYes(false);              tvNotifyDlg.DoModal(GUIWindowManager.ActiveWindow);                if (tvNotifyDlg.IsConfirmed)              {                try                {                  MediaPortal.Player.g_Player.Stop();                    if (c.IsTv)                  {                    MediaPortal.GUI.Library.GUIWindowManager.ActivateWindow((int)MediaPortal.GUI.Library.GUIWindow.Window.WINDOW_TV);                    TVHome.ViewChannelAndCheck(c);                    if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == c.IdChannel)                    {                      g_Player.ShowFullScreenWindow();                    }                  }                  else if (c.IsRadio)                  {                    MediaPortal.GUI.Library.GUIWindowManager.ActivateWindow((int)MediaPortal.GUI.Library.GUIWindow.Window.WINDOW_RADIO);                    Radio.CurrentChannel = c;                    Radio.Play();                  }                }                catch (Exception e)                {                  Log.Error("TVHome: TVNotification: Error on starting channel {0} after notification: {1} {2} {3}"' notify.Channel.DisplayName' e.Message' e.Source' e.StackTrace);                }                }              break;            }        }
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnGlobalMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_STOP_SERVER_TIMESHIFTING:            {              User user = new User();              if (user.Name == Card.User.Name)              {                Card.StopTimeShifting();              }              break;            }          case GUIMessage.MessageType.GUI_MSG_GET_PROGRAM_INFO:            {              if (!Radio.CurrentChannel.IsWebstream() && Navigator.Channel != null && Navigator.Channel.CurrentProgram.Title != null                && Navigator.Channel.NextProgram.Title != null)              {                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_SEND_PROGRAM_INFO' 0' 0' 0' 0' 0' null);                msg.Label = Navigator.Channel.CurrentProgram.Title;                msg.Label2 = Navigator.Channel.NextProgram.Title;                GUIWindowManager.SendMessage(msg);              }              break;            }          case GUIMessage.MessageType.GUI_MSG_NOTIFY_REC:            string heading = message.Label;            string text = message.Label2;            Channel ch = message.Object as Channel;            //Log.Debug("Received rec notify message: {0}' {1}' {2}"' heading' text' (ch != null).ToString()); //remove later            string logo = TVUtil.GetChannelLogo(ch);            GUIDialogNotify pDlgNotify = (GUIDialogNotify)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_NOTIFY);            if (pDlgNotify != null)            {              pDlgNotify.Reset();              pDlgNotify.ClearAll();              pDlgNotify.SetHeading(heading);              if (!string.IsNullOrEmpty(text))              {                pDlgNotify.SetText(text);              }              pDlgNotify.SetImage(logo);              pDlgNotify.TimeOut = 5;                pDlgNotify.DoModal(GUIWindowManager.ActiveWindow);            }            break;          case GUIMessage.MessageType.GUI_MSG_NOTIFY_TV_PROGRAM:            {              TVNotifyYesNoDialog tvNotifyDlg = (TVNotifyYesNoDialog)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_TVNOTIFYYESNO);                TVProgramDescription notify = message.Object as TVProgramDescription;              if (tvNotifyDlg == null || notify == null)              {                return;              }              int minUntilStart = _preNotifyConfig / 60;              if (notify.StartTime > DateTime.Now)              {                if (minUntilStart > 1)                {                  tvNotifyDlg.SetHeading(String.Format(GUILocalizeStrings.Get(1018)' minUntilStart));                }                else                {                  tvNotifyDlg.SetHeading(1019); // Program is about to begin                }              }              else              {                tvNotifyDlg.SetHeading(String.Format(GUILocalizeStrings.Get(1206)' (DateTime.Now - notify.StartTime).Minutes.ToString()));              }              tvNotifyDlg.SetLine(1' notify.Title);              tvNotifyDlg.SetLine(2' notify.Description);              tvNotifyDlg.SetLine(4' String.Format(GUILocalizeStrings.Get(1207)' notify.Channel.DisplayName));              Channel c = notify.Channel;              string strLogo = string.Empty;              if (c.IsTv)              {                strLogo = MediaPortal.Util.Utils.GetCoverArt(Thumbs.TVChannel' c.DisplayName);              }              else if (c.IsRadio)              {                strLogo = MediaPortal.Util.Utils.GetCoverArt(Thumbs.Radio' c.DisplayName);              }                tvNotifyDlg.SetImage(strLogo);              tvNotifyDlg.TimeOut = _notifyTVTimeout;              if (_playNotifyBeep)              {                MediaPortal.Util.Utils.PlaySound("notify.wav"' false' true);              }              tvNotifyDlg.SetDefaultToYes(false);              tvNotifyDlg.DoModal(GUIWindowManager.ActiveWindow);                if (tvNotifyDlg.IsConfirmed)              {                try                {                  MediaPortal.Player.g_Player.Stop();                    if (c.IsTv)                  {                    MediaPortal.GUI.Library.GUIWindowManager.ActivateWindow((int)MediaPortal.GUI.Library.GUIWindow.Window.WINDOW_TV);                    TVHome.ViewChannelAndCheck(c);                    if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == c.IdChannel)                    {                      g_Player.ShowFullScreenWindow();                    }                  }                  else if (c.IsRadio)                  {                    MediaPortal.GUI.Library.GUIWindowManager.ActivateWindow((int)MediaPortal.GUI.Library.GUIWindow.Window.WINDOW_RADIO);                    Radio.CurrentChannel = c;                    Radio.Play();                  }                }                catch (Exception e)                {                  Log.Error("TVHome: TVNotification: Error on starting channel {0} after notification: {1} {2} {3}"' notify.Channel.DisplayName' e.Message' e.Source' e.StackTrace);                }                }              break;            }        }
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ManualRecord,The following statement contains a magic number: pDlgOK.SetHeading(605);
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ManualRecord,The following statement contains a magic number: pDlgOK.AddLocalizedString(875);
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ManualRecord,The following statement contains a magic number: pDlgOK.AddLocalizedString(876);
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ManualRecord,The following statement contains a magic number: switch (pDlgOK.SelectedId)              {                case 875:                  //record current program                                    TVProgramInfo.CreateProgram(prog' (int)ScheduleRecordingType.Once' dialogId);                  GUIMessage msgManualRecord = new GUIMessage(GUIMessage.MessageType.GUI_MSG_MANUAL_RECORDING_STARTED' 0' 0' 0' 0' 0' null);                  GUIWindowManager.SendMessage(msgManualRecord);                  return true;                  case 876:                  //manual                  StartRecordingSchedule(channel' true);                  return true;               }
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ManualRecord,The following statement contains a magic number: switch (pDlgOK.SelectedId)              {                case 875:                  //record current program                                    TVProgramInfo.CreateProgram(prog' (int)ScheduleRecordingType.Once' dialogId);                  GUIMessage msgManualRecord = new GUIMessage(GUIMessage.MessageType.GUI_MSG_MANUAL_RECORDING_STARTED' 0' 0' 0' 0' 0' null);                  GUIWindowManager.SendMessage(msgManualRecord);                  return true;                  case 876:                  //manual                  StartRecordingSchedule(channel' true);                  return true;               }
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnActiveRecordings,The following statement contains a magic number: dlg.SetHeading(200052);
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnActiveStreams,The following statement contains a magic number: dlg.SetHeading(692);
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnActiveStreams,The following statement contains a magic number: pDlgOK.SetHeading(692);
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnActiveStreams,The following statement contains a magic number: pDlgOK.SetLine(1' GUILocalizeStrings.Get(1511));
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnActiveStreams,The following statement contains a magic number: pDlgOK.SetLine(2' "");
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,UpdateStateOfRecButton,The following statement contains a magic number: label = GUILocalizeStrings.Get(629);
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,UpdateRecordingProperties,The following statement contains a magic number: percentLivePoint *= 100.0d;
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,UpdateRecordingProperties,The following statement contains a magic number: GUIPropertyManager.SetProperty("#TV.View.channel"' displayName + " (" + GUILocalizeStrings.Get(604) + ")");
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ResetTvProperties,The following statement contains a magic number: GUIPropertyManager.SetProperty("#TV.View.title"' GUILocalizeStrings.Get(736));
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ResetTvProperties,The following statement contains a magic number: GUIPropertyManager.SetProperty("#TV.View.compositetitle"' GUILocalizeStrings.Get(736));
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ShouldApplyDualMonoMode,The following statement contains a magic number: return (dualMonoModeEnabled && language.Length == 6);
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,GetDualMonoMode,The following statement contains a magic number: string leftAudioLang = streams[currentIndex].Language.Substring(0' 3);
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,GetDualMonoMode,The following statement contains a magic number: string rightAudioLang = streams[currentIndex].Language.Substring(3' 3);
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,GetDualMonoMode,The following statement contains a magic number: string rightAudioLang = streams[currentIndex].Language.Substring(3' 3);
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ChannelTuneFailedNotifyUser,The following statement contains a magic number: _lastError.Messages.Add(GUILocalizeStrings.Get(1500));
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ChannelTuneFailedNotifyUser,The following statement contains a magic number: switch (succeeded)        {          case TvResult.NoPmtFound:            TextID = 1498;            break;          case TvResult.NoSignalDetected:            TextID = 1499;            break;          case TvResult.CardIsDisabled:            TextID = 1501;            break;          case TvResult.AllCardsBusy:            TextID = 1502;            break;          case TvResult.ChannelIsScrambled:            TextID = 1503;            break;          case TvResult.NoVideoAudioDetected:            TextID = 1504;            break;          case TvResult.UnableToStartGraph:            TextID = 1505;            break;          case TvResult.TuneCancelled:            TextID = 1524;            break;          case TvResult.UnknownError:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;          case TvResult.UnknownChannel:            TextID = 1507;            break;          case TvResult.ChannelNotMappedToAnyCard:            TextID = 1508;            break;          case TvResult.NoTuningDetails:            TextID = 1509;            break;          case TvResult.GraphBuildingFailed:            TextID = 1518;            break;          case TvResult.SWEncoderMissing:            TextID = 1519;            break;          case TvResult.NoFreeDiskSpace:            TextID = 1520;            break;          default:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;        }
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ChannelTuneFailedNotifyUser,The following statement contains a magic number: switch (succeeded)        {          case TvResult.NoPmtFound:            TextID = 1498;            break;          case TvResult.NoSignalDetected:            TextID = 1499;            break;          case TvResult.CardIsDisabled:            TextID = 1501;            break;          case TvResult.AllCardsBusy:            TextID = 1502;            break;          case TvResult.ChannelIsScrambled:            TextID = 1503;            break;          case TvResult.NoVideoAudioDetected:            TextID = 1504;            break;          case TvResult.UnableToStartGraph:            TextID = 1505;            break;          case TvResult.TuneCancelled:            TextID = 1524;            break;          case TvResult.UnknownError:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;          case TvResult.UnknownChannel:            TextID = 1507;            break;          case TvResult.ChannelNotMappedToAnyCard:            TextID = 1508;            break;          case TvResult.NoTuningDetails:            TextID = 1509;            break;          case TvResult.GraphBuildingFailed:            TextID = 1518;            break;          case TvResult.SWEncoderMissing:            TextID = 1519;            break;          case TvResult.NoFreeDiskSpace:            TextID = 1520;            break;          default:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;        }
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ChannelTuneFailedNotifyUser,The following statement contains a magic number: switch (succeeded)        {          case TvResult.NoPmtFound:            TextID = 1498;            break;          case TvResult.NoSignalDetected:            TextID = 1499;            break;          case TvResult.CardIsDisabled:            TextID = 1501;            break;          case TvResult.AllCardsBusy:            TextID = 1502;            break;          case TvResult.ChannelIsScrambled:            TextID = 1503;            break;          case TvResult.NoVideoAudioDetected:            TextID = 1504;            break;          case TvResult.UnableToStartGraph:            TextID = 1505;            break;          case TvResult.TuneCancelled:            TextID = 1524;            break;          case TvResult.UnknownError:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;          case TvResult.UnknownChannel:            TextID = 1507;            break;          case TvResult.ChannelNotMappedToAnyCard:            TextID = 1508;            break;          case TvResult.NoTuningDetails:            TextID = 1509;            break;          case TvResult.GraphBuildingFailed:            TextID = 1518;            break;          case TvResult.SWEncoderMissing:            TextID = 1519;            break;          case TvResult.NoFreeDiskSpace:            TextID = 1520;            break;          default:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;        }
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ChannelTuneFailedNotifyUser,The following statement contains a magic number: switch (succeeded)        {          case TvResult.NoPmtFound:            TextID = 1498;            break;          case TvResult.NoSignalDetected:            TextID = 1499;            break;          case TvResult.CardIsDisabled:            TextID = 1501;            break;          case TvResult.AllCardsBusy:            TextID = 1502;            break;          case TvResult.ChannelIsScrambled:            TextID = 1503;            break;          case TvResult.NoVideoAudioDetected:            TextID = 1504;            break;          case TvResult.UnableToStartGraph:            TextID = 1505;            break;          case TvResult.TuneCancelled:            TextID = 1524;            break;          case TvResult.UnknownError:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;          case TvResult.UnknownChannel:            TextID = 1507;            break;          case TvResult.ChannelNotMappedToAnyCard:            TextID = 1508;            break;          case TvResult.NoTuningDetails:            TextID = 1509;            break;          case TvResult.GraphBuildingFailed:            TextID = 1518;            break;          case TvResult.SWEncoderMissing:            TextID = 1519;            break;          case TvResult.NoFreeDiskSpace:            TextID = 1520;            break;          default:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;        }
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ChannelTuneFailedNotifyUser,The following statement contains a magic number: switch (succeeded)        {          case TvResult.NoPmtFound:            TextID = 1498;            break;          case TvResult.NoSignalDetected:            TextID = 1499;            break;          case TvResult.CardIsDisabled:            TextID = 1501;            break;          case TvResult.AllCardsBusy:            TextID = 1502;            break;          case TvResult.ChannelIsScrambled:            TextID = 1503;            break;          case TvResult.NoVideoAudioDetected:            TextID = 1504;            break;          case TvResult.UnableToStartGraph:            TextID = 1505;            break;          case TvResult.TuneCancelled:            TextID = 1524;            break;          case TvResult.UnknownError:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;          case TvResult.UnknownChannel:            TextID = 1507;            break;          case TvResult.ChannelNotMappedToAnyCard:            TextID = 1508;            break;          case TvResult.NoTuningDetails:            TextID = 1509;            break;          case TvResult.GraphBuildingFailed:            TextID = 1518;            break;          case TvResult.SWEncoderMissing:            TextID = 1519;            break;          case TvResult.NoFreeDiskSpace:            TextID = 1520;            break;          default:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;        }
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ChannelTuneFailedNotifyUser,The following statement contains a magic number: switch (succeeded)        {          case TvResult.NoPmtFound:            TextID = 1498;            break;          case TvResult.NoSignalDetected:            TextID = 1499;            break;          case TvResult.CardIsDisabled:            TextID = 1501;            break;          case TvResult.AllCardsBusy:            TextID = 1502;            break;          case TvResult.ChannelIsScrambled:            TextID = 1503;            break;          case TvResult.NoVideoAudioDetected:            TextID = 1504;            break;          case TvResult.UnableToStartGraph:            TextID = 1505;            break;          case TvResult.TuneCancelled:            TextID = 1524;            break;          case TvResult.UnknownError:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;          case TvResult.UnknownChannel:            TextID = 1507;            break;          case TvResult.ChannelNotMappedToAnyCard:            TextID = 1508;            break;          case TvResult.NoTuningDetails:            TextID = 1509;            break;          case TvResult.GraphBuildingFailed:            TextID = 1518;            break;          case TvResult.SWEncoderMissing:            TextID = 1519;            break;          case TvResult.NoFreeDiskSpace:            TextID = 1520;            break;          default:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;        }
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ChannelTuneFailedNotifyUser,The following statement contains a magic number: switch (succeeded)        {          case TvResult.NoPmtFound:            TextID = 1498;            break;          case TvResult.NoSignalDetected:            TextID = 1499;            break;          case TvResult.CardIsDisabled:            TextID = 1501;            break;          case TvResult.AllCardsBusy:            TextID = 1502;            break;          case TvResult.ChannelIsScrambled:            TextID = 1503;            break;          case TvResult.NoVideoAudioDetected:            TextID = 1504;            break;          case TvResult.UnableToStartGraph:            TextID = 1505;            break;          case TvResult.TuneCancelled:            TextID = 1524;            break;          case TvResult.UnknownError:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;          case TvResult.UnknownChannel:            TextID = 1507;            break;          case TvResult.ChannelNotMappedToAnyCard:            TextID = 1508;            break;          case TvResult.NoTuningDetails:            TextID = 1509;            break;          case TvResult.GraphBuildingFailed:            TextID = 1518;            break;          case TvResult.SWEncoderMissing:            TextID = 1519;            break;          case TvResult.NoFreeDiskSpace:            TextID = 1520;            break;          default:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;        }
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ChannelTuneFailedNotifyUser,The following statement contains a magic number: switch (succeeded)        {          case TvResult.NoPmtFound:            TextID = 1498;            break;          case TvResult.NoSignalDetected:            TextID = 1499;            break;          case TvResult.CardIsDisabled:            TextID = 1501;            break;          case TvResult.AllCardsBusy:            TextID = 1502;            break;          case TvResult.ChannelIsScrambled:            TextID = 1503;            break;          case TvResult.NoVideoAudioDetected:            TextID = 1504;            break;          case TvResult.UnableToStartGraph:            TextID = 1505;            break;          case TvResult.TuneCancelled:            TextID = 1524;            break;          case TvResult.UnknownError:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;          case TvResult.UnknownChannel:            TextID = 1507;            break;          case TvResult.ChannelNotMappedToAnyCard:            TextID = 1508;            break;          case TvResult.NoTuningDetails:            TextID = 1509;            break;          case TvResult.GraphBuildingFailed:            TextID = 1518;            break;          case TvResult.SWEncoderMissing:            TextID = 1519;            break;          case TvResult.NoFreeDiskSpace:            TextID = 1520;            break;          default:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;        }
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ChannelTuneFailedNotifyUser,The following statement contains a magic number: switch (succeeded)        {          case TvResult.NoPmtFound:            TextID = 1498;            break;          case TvResult.NoSignalDetected:            TextID = 1499;            break;          case TvResult.CardIsDisabled:            TextID = 1501;            break;          case TvResult.AllCardsBusy:            TextID = 1502;            break;          case TvResult.ChannelIsScrambled:            TextID = 1503;            break;          case TvResult.NoVideoAudioDetected:            TextID = 1504;            break;          case TvResult.UnableToStartGraph:            TextID = 1505;            break;          case TvResult.TuneCancelled:            TextID = 1524;            break;          case TvResult.UnknownError:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;          case TvResult.UnknownChannel:            TextID = 1507;            break;          case TvResult.ChannelNotMappedToAnyCard:            TextID = 1508;            break;          case TvResult.NoTuningDetails:            TextID = 1509;            break;          case TvResult.GraphBuildingFailed:            TextID = 1518;            break;          case TvResult.SWEncoderMissing:            TextID = 1519;            break;          case TvResult.NoFreeDiskSpace:            TextID = 1520;            break;          default:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;        }
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ChannelTuneFailedNotifyUser,The following statement contains a magic number: switch (succeeded)        {          case TvResult.NoPmtFound:            TextID = 1498;            break;          case TvResult.NoSignalDetected:            TextID = 1499;            break;          case TvResult.CardIsDisabled:            TextID = 1501;            break;          case TvResult.AllCardsBusy:            TextID = 1502;            break;          case TvResult.ChannelIsScrambled:            TextID = 1503;            break;          case TvResult.NoVideoAudioDetected:            TextID = 1504;            break;          case TvResult.UnableToStartGraph:            TextID = 1505;            break;          case TvResult.TuneCancelled:            TextID = 1524;            break;          case TvResult.UnknownError:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;          case TvResult.UnknownChannel:            TextID = 1507;            break;          case TvResult.ChannelNotMappedToAnyCard:            TextID = 1508;            break;          case TvResult.NoTuningDetails:            TextID = 1509;            break;          case TvResult.GraphBuildingFailed:            TextID = 1518;            break;          case TvResult.SWEncoderMissing:            TextID = 1519;            break;          case TvResult.NoFreeDiskSpace:            TextID = 1520;            break;          default:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;        }
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ChannelTuneFailedNotifyUser,The following statement contains a magic number: switch (succeeded)        {          case TvResult.NoPmtFound:            TextID = 1498;            break;          case TvResult.NoSignalDetected:            TextID = 1499;            break;          case TvResult.CardIsDisabled:            TextID = 1501;            break;          case TvResult.AllCardsBusy:            TextID = 1502;            break;          case TvResult.ChannelIsScrambled:            TextID = 1503;            break;          case TvResult.NoVideoAudioDetected:            TextID = 1504;            break;          case TvResult.UnableToStartGraph:            TextID = 1505;            break;          case TvResult.TuneCancelled:            TextID = 1524;            break;          case TvResult.UnknownError:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;          case TvResult.UnknownChannel:            TextID = 1507;            break;          case TvResult.ChannelNotMappedToAnyCard:            TextID = 1508;            break;          case TvResult.NoTuningDetails:            TextID = 1509;            break;          case TvResult.GraphBuildingFailed:            TextID = 1518;            break;          case TvResult.SWEncoderMissing:            TextID = 1519;            break;          case TvResult.NoFreeDiskSpace:            TextID = 1520;            break;          default:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;        }
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ChannelTuneFailedNotifyUser,The following statement contains a magic number: switch (succeeded)        {          case TvResult.NoPmtFound:            TextID = 1498;            break;          case TvResult.NoSignalDetected:            TextID = 1499;            break;          case TvResult.CardIsDisabled:            TextID = 1501;            break;          case TvResult.AllCardsBusy:            TextID = 1502;            break;          case TvResult.ChannelIsScrambled:            TextID = 1503;            break;          case TvResult.NoVideoAudioDetected:            TextID = 1504;            break;          case TvResult.UnableToStartGraph:            TextID = 1505;            break;          case TvResult.TuneCancelled:            TextID = 1524;            break;          case TvResult.UnknownError:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;          case TvResult.UnknownChannel:            TextID = 1507;            break;          case TvResult.ChannelNotMappedToAnyCard:            TextID = 1508;            break;          case TvResult.NoTuningDetails:            TextID = 1509;            break;          case TvResult.GraphBuildingFailed:            TextID = 1518;            break;          case TvResult.SWEncoderMissing:            TextID = 1519;            break;          case TvResult.NoFreeDiskSpace:            TextID = 1520;            break;          default:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;        }
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ChannelTuneFailedNotifyUser,The following statement contains a magic number: switch (succeeded)        {          case TvResult.NoPmtFound:            TextID = 1498;            break;          case TvResult.NoSignalDetected:            TextID = 1499;            break;          case TvResult.CardIsDisabled:            TextID = 1501;            break;          case TvResult.AllCardsBusy:            TextID = 1502;            break;          case TvResult.ChannelIsScrambled:            TextID = 1503;            break;          case TvResult.NoVideoAudioDetected:            TextID = 1504;            break;          case TvResult.UnableToStartGraph:            TextID = 1505;            break;          case TvResult.TuneCancelled:            TextID = 1524;            break;          case TvResult.UnknownError:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;          case TvResult.UnknownChannel:            TextID = 1507;            break;          case TvResult.ChannelNotMappedToAnyCard:            TextID = 1508;            break;          case TvResult.NoTuningDetails:            TextID = 1509;            break;          case TvResult.GraphBuildingFailed:            TextID = 1518;            break;          case TvResult.SWEncoderMissing:            TextID = 1519;            break;          case TvResult.NoFreeDiskSpace:            TextID = 1520;            break;          default:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;        }
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ChannelTuneFailedNotifyUser,The following statement contains a magic number: switch (succeeded)        {          case TvResult.NoPmtFound:            TextID = 1498;            break;          case TvResult.NoSignalDetected:            TextID = 1499;            break;          case TvResult.CardIsDisabled:            TextID = 1501;            break;          case TvResult.AllCardsBusy:            TextID = 1502;            break;          case TvResult.ChannelIsScrambled:            TextID = 1503;            break;          case TvResult.NoVideoAudioDetected:            TextID = 1504;            break;          case TvResult.UnableToStartGraph:            TextID = 1505;            break;          case TvResult.TuneCancelled:            TextID = 1524;            break;          case TvResult.UnknownError:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;          case TvResult.UnknownChannel:            TextID = 1507;            break;          case TvResult.ChannelNotMappedToAnyCard:            TextID = 1508;            break;          case TvResult.NoTuningDetails:            TextID = 1509;            break;          case TvResult.GraphBuildingFailed:            TextID = 1518;            break;          case TvResult.SWEncoderMissing:            TextID = 1519;            break;          case TvResult.NoFreeDiskSpace:            TextID = 1520;            break;          default:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;        }
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ChannelTuneFailedNotifyUser,The following statement contains a magic number: switch (succeeded)        {          case TvResult.NoPmtFound:            TextID = 1498;            break;          case TvResult.NoSignalDetected:            TextID = 1499;            break;          case TvResult.CardIsDisabled:            TextID = 1501;            break;          case TvResult.AllCardsBusy:            TextID = 1502;            break;          case TvResult.ChannelIsScrambled:            TextID = 1503;            break;          case TvResult.NoVideoAudioDetected:            TextID = 1504;            break;          case TvResult.UnableToStartGraph:            TextID = 1505;            break;          case TvResult.TuneCancelled:            TextID = 1524;            break;          case TvResult.UnknownError:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;          case TvResult.UnknownChannel:            TextID = 1507;            break;          case TvResult.ChannelNotMappedToAnyCard:            TextID = 1508;            break;          case TvResult.NoTuningDetails:            TextID = 1509;            break;          case TvResult.GraphBuildingFailed:            TextID = 1518;            break;          case TvResult.SWEncoderMissing:            TextID = 1519;            break;          case TvResult.NoFreeDiskSpace:            TextID = 1520;            break;          default:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;        }
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ChannelTuneFailedNotifyUser,The following statement contains a magic number: switch (succeeded)        {          case TvResult.NoPmtFound:            TextID = 1498;            break;          case TvResult.NoSignalDetected:            TextID = 1499;            break;          case TvResult.CardIsDisabled:            TextID = 1501;            break;          case TvResult.AllCardsBusy:            TextID = 1502;            break;          case TvResult.ChannelIsScrambled:            TextID = 1503;            break;          case TvResult.NoVideoAudioDetected:            TextID = 1504;            break;          case TvResult.UnableToStartGraph:            TextID = 1505;            break;          case TvResult.TuneCancelled:            TextID = 1524;            break;          case TvResult.UnknownError:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;          case TvResult.UnknownChannel:            TextID = 1507;            break;          case TvResult.ChannelNotMappedToAnyCard:            TextID = 1508;            break;          case TvResult.NoTuningDetails:            TextID = 1509;            break;          case TvResult.GraphBuildingFailed:            TextID = 1518;            break;          case TvResult.SWEncoderMissing:            TextID = 1519;            break;          case TvResult.NoFreeDiskSpace:            TextID = 1520;            break;          default:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;        }
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ChannelTuneFailedNotifyUser,The following statement contains a magic number: switch (succeeded)        {          case TvResult.NoPmtFound:            TextID = 1498;            break;          case TvResult.NoSignalDetected:            TextID = 1499;            break;          case TvResult.CardIsDisabled:            TextID = 1501;            break;          case TvResult.AllCardsBusy:            TextID = 1502;            break;          case TvResult.ChannelIsScrambled:            TextID = 1503;            break;          case TvResult.NoVideoAudioDetected:            TextID = 1504;            break;          case TvResult.UnableToStartGraph:            TextID = 1505;            break;          case TvResult.TuneCancelled:            TextID = 1524;            break;          case TvResult.UnknownError:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;          case TvResult.UnknownChannel:            TextID = 1507;            break;          case TvResult.ChannelNotMappedToAnyCard:            TextID = 1508;            break;          case TvResult.NoTuningDetails:            TextID = 1509;            break;          case TvResult.GraphBuildingFailed:            TextID = 1518;            break;          case TvResult.SWEncoderMissing:            TextID = 1519;            break;          case TvResult.NoFreeDiskSpace:            TextID = 1520;            break;          default:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;        }
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ChannelTuneFailedNotifyUser,The following statement contains a magic number: switch (succeeded)        {          case TvResult.NoPmtFound:            TextID = 1498;            break;          case TvResult.NoSignalDetected:            TextID = 1499;            break;          case TvResult.CardIsDisabled:            TextID = 1501;            break;          case TvResult.AllCardsBusy:            TextID = 1502;            break;          case TvResult.ChannelIsScrambled:            TextID = 1503;            break;          case TvResult.NoVideoAudioDetected:            TextID = 1504;            break;          case TvResult.UnableToStartGraph:            TextID = 1505;            break;          case TvResult.TuneCancelled:            TextID = 1524;            break;          case TvResult.UnknownError:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;          case TvResult.UnknownChannel:            TextID = 1507;            break;          case TvResult.ChannelNotMappedToAnyCard:            TextID = 1508;            break;          case TvResult.NoTuningDetails:            TextID = 1509;            break;          case TvResult.GraphBuildingFailed:            TextID = 1518;            break;          case TvResult.SWEncoderMissing:            TextID = 1519;            break;          case TvResult.NoFreeDiskSpace:            TextID = 1520;            break;          default:            // this error can also happen if we have no connection to the server.            if (!Connected) // || !IsRemotingConnected())            {              TextID = 1510;            }            else            {              TextID = 1506;            }            break;        }
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ChannelTuneFailedNotifyUser,The following statement contains a magic number: string caption = GUILocalizeStrings.Get(605) + " - " + _lastError.FailingChannel.DisplayName;
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ChannelTuneFailedNotifyUser,The following statement contains a magic number: msg.Param1 = 3;
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,StopRenderBlackImage,The following statement contains a magic number: FramesBeforeStopRenderBlackImage = 3;
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,RenderBlackImage,The following statement contains a magic number: _waitForBlackScreen.WaitOne(1000' false);
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ViewChannelAndCheck,The following statement contains a magic number: double dTime = g_Player.Duration - 5;
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,StartPlay,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,StartPlay,The following statement contains a magic number: !tsFileExists && timeout < 50
Magic Number,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ShowCiMenu,The following statement contains a magic number: switch (currentCiMenu.State)        {          // choices available' so show them          case TvLibrary.Interfaces.CiMenuState.Ready:            dlgCiMenu.Reset();            dlgCiMenu.SetHeading(currentCiMenu.Title' currentCiMenu.Subtitle' currentCiMenu.BottomText); // CI Menu              for (int i = 0; i < currentCiMenu.NumChoices; i++) // CI Menu Entries              dlgCiMenu.Add(currentCiMenu.MenuEntries[i].Message); // take only message' numbers come from dialog              // show dialog and wait for result                   dlgCiMenu.DoModal(GUIWindowManager.ActiveWindow);            if (currentCiMenu.State != TvLibrary.Interfaces.CiMenuState.Error)            {              if (dlgCiMenu.SelectedId != -1)              {                TVHome.Card.SelectCiMenu(Convert.ToByte(dlgCiMenu.SelectedId));              }              else              {                if (CiMenuList.Count == 0)      // Another menu is pending' do not answer...                  TVHome.Card.SelectCiMenu(0); // 0 means "back"              }            }            else            {              TVHome.Card.CloseMenu(); // in case of error close the menu            }            break;            // errors and menu options with no choices          case TvLibrary.Interfaces.CiMenuState.Error:          case TvLibrary.Interfaces.CiMenuState.NoChoices:              if (_dialogNotify == null)            {              _dialogNotify = (GUIDialogNotify)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_NOTIFY);            }            if (null != _dialogNotify)            {              _dialogNotify.Reset();              _dialogNotify.ClearAll();              _dialogNotify.SetHeading(currentCiMenu.Title);              _dialogNotify.SetText(String.Format("{0}\r\n{1}"' currentCiMenu.Subtitle' currentCiMenu.BottomText));              _dialogNotify.TimeOut = 2; // seconds              _dialogNotify.DoModal(GUIWindowManager.ActiveWindow);            }            break;            // requests require users input so open keyboard          case TvLibrary.Interfaces.CiMenuState.Request:            String result = "";            if (              GetKeyboard(currentCiMenu.RequestText' currentCiMenu.AnswerLength' currentCiMenu.Password' ref result) ==              true)            {              TVHome.Card.SendMenuAnswer(false' result); // send answer' cancel=false            }            else            {              TVHome.Card.SendMenuAnswer(true' null); // cancel request             }            break;          case CiMenuState.Close:            if (_dialogNotify != null)            {              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT' _dialogNotify.GetID' 0' 0' 0' 0' null);              _dialogNotify.OnMessage(msg);	// Send a de-init msg to hide the current notify dialog            }            if (dlgCiMenu != null)            {              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT' dlgCiMenu.GetID' 0' 0' 0' 0' null);              dlgCiMenu.OnMessage(msg);	// Send a de-init msg to hide the current CI menu dialog            }            break;        }
Magic Number,TvPlugin,ChannelNavigator,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHomeNavigator.cs,ZapToLastViewedChannel,The following statement contains a magic number: m_zaptime = DateTime.Now.AddMilliseconds(100);
Magic Number,TvPlugin,ChannelNavigator,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHomeNavigator.cs,LoadSettings,The following statement contains a magic number: m_zapdelay = 1000 * xmlreader.GetValueAsInt("movieplayer"' "zapdelay"' 2);
Magic Number,TvPlugin,ChannelNavigator,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHomeNavigator.cs,LoadSettings,The following statement contains a magic number: m_zapdelay = 1000 * xmlreader.GetValueAsInt("movieplayer"' "zapdelay"' 2);
Magic Number,TvPlugin,TvMiniGuide,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvMiniGuide.cs,LoadSettings,The following statement contains a magic number: _channelNumberMaxLength = xmlreader.GetValueAsInt("mytv"' "channelnumbermaxlength"' 3);
Magic Number,TvPlugin,TvMiniGuide,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvMiniGuide.cs,GetChannels,The following statement contains a magic number: Channel newChannel = new Channel(false' true' 0' DateTime.MinValue' false'                                             DateTime.MinValue' 0' true' ""' GUILocalizeStrings.Get(911)' 0);
Magic Number,TvPlugin,TvMiniGuide,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvMiniGuide.cs,GetChannels,The following statement contains a magic number: i < 10
Magic Number,TvPlugin,TvMiniGuide,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvMiniGuide.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              if (message.SenderControlId == 35 || message.SenderControlId == 37) // listbox              {                if ((int)Action.ActionType.ACTION_SELECT_ITEM == message.Param1)                {                  // switching logic                  SelectedChannel = (Channel)lstChannels.SelectedListItem.TVTag;                    Channel changeChannel = null;                  if (AutoZap)                  {                    if (TVHome.Navigator.Channel.IdChannel != SelectedChannel.IdChannel || !g_Player.IsTimeShifting || g_Player.IsTVRecording)                    {                      List<Channel> tvChannelList = GetChannelListByGroup();                      if (tvChannelList != null)                      {                        changeChannel = (Channel)tvChannelList[lstChannels.SelectedListItemIndex];                      }                    }                  }                  _canceled = false;                  PageDestroy();                    //This one shows the zapOSD when changing channel from mini GUIDE' this is currently unwanted.                  /*                  TvFullScreen TVWindow = (TvFullScreen)GUIWindowManager.GetWindow((int)(int)GUIWindow.Window.WINDOW_TVFULLSCREEN);                  if (TVWindow != null) TVWindow.UpdateOSD(changeChannel.Name);                                  */                    TVHome.UserChannelChanged = true;                    if (changeChannel != null)                  {                    TVHome.ViewChannel(changeChannel);                  }                }              }              else if (message.SenderControlId == 36) // spincontrol              {                // switch group                              OnGroupChanged();              }              else if (message.SenderControlId == 34) // exit button              {                // exit                _canceled = true;                PageDestroy();              }              break;            }        }
Magic Number,TvPlugin,TvMiniGuide,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvMiniGuide.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              if (message.SenderControlId == 35 || message.SenderControlId == 37) // listbox              {                if ((int)Action.ActionType.ACTION_SELECT_ITEM == message.Param1)                {                  // switching logic                  SelectedChannel = (Channel)lstChannels.SelectedListItem.TVTag;                    Channel changeChannel = null;                  if (AutoZap)                  {                    if (TVHome.Navigator.Channel.IdChannel != SelectedChannel.IdChannel || !g_Player.IsTimeShifting || g_Player.IsTVRecording)                    {                      List<Channel> tvChannelList = GetChannelListByGroup();                      if (tvChannelList != null)                      {                        changeChannel = (Channel)tvChannelList[lstChannels.SelectedListItemIndex];                      }                    }                  }                  _canceled = false;                  PageDestroy();                    //This one shows the zapOSD when changing channel from mini GUIDE' this is currently unwanted.                  /*                  TvFullScreen TVWindow = (TvFullScreen)GUIWindowManager.GetWindow((int)(int)GUIWindow.Window.WINDOW_TVFULLSCREEN);                  if (TVWindow != null) TVWindow.UpdateOSD(changeChannel.Name);                                  */                    TVHome.UserChannelChanged = true;                    if (changeChannel != null)                  {                    TVHome.ViewChannel(changeChannel);                  }                }              }              else if (message.SenderControlId == 36) // spincontrol              {                // switch group                              OnGroupChanged();              }              else if (message.SenderControlId == 34) // exit button              {                // exit                _canceled = true;                PageDestroy();              }              break;            }        }
Magic Number,TvPlugin,TvMiniGuide,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvMiniGuide.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              if (message.SenderControlId == 35 || message.SenderControlId == 37) // listbox              {                if ((int)Action.ActionType.ACTION_SELECT_ITEM == message.Param1)                {                  // switching logic                  SelectedChannel = (Channel)lstChannels.SelectedListItem.TVTag;                    Channel changeChannel = null;                  if (AutoZap)                  {                    if (TVHome.Navigator.Channel.IdChannel != SelectedChannel.IdChannel || !g_Player.IsTimeShifting || g_Player.IsTVRecording)                    {                      List<Channel> tvChannelList = GetChannelListByGroup();                      if (tvChannelList != null)                      {                        changeChannel = (Channel)tvChannelList[lstChannels.SelectedListItemIndex];                      }                    }                  }                  _canceled = false;                  PageDestroy();                    //This one shows the zapOSD when changing channel from mini GUIDE' this is currently unwanted.                  /*                  TvFullScreen TVWindow = (TvFullScreen)GUIWindowManager.GetWindow((int)(int)GUIWindow.Window.WINDOW_TVFULLSCREEN);                  if (TVWindow != null) TVWindow.UpdateOSD(changeChannel.Name);                                  */                    TVHome.UserChannelChanged = true;                    if (changeChannel != null)                  {                    TVHome.ViewChannel(changeChannel);                  }                }              }              else if (message.SenderControlId == 36) // spincontrol              {                // switch group                              OnGroupChanged();              }              else if (message.SenderControlId == 34) // exit button              {                // exit                _canceled = true;                PageDestroy();              }              break;            }        }
Magic Number,TvPlugin,TvMiniGuide,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvMiniGuide.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              if (message.SenderControlId == 35 || message.SenderControlId == 37) // listbox              {                if ((int)Action.ActionType.ACTION_SELECT_ITEM == message.Param1)                {                  // switching logic                  SelectedChannel = (Channel)lstChannels.SelectedListItem.TVTag;                    Channel changeChannel = null;                  if (AutoZap)                  {                    if (TVHome.Navigator.Channel.IdChannel != SelectedChannel.IdChannel || !g_Player.IsTimeShifting || g_Player.IsTVRecording)                    {                      List<Channel> tvChannelList = GetChannelListByGroup();                      if (tvChannelList != null)                      {                        changeChannel = (Channel)tvChannelList[lstChannels.SelectedListItemIndex];                      }                    }                  }                  _canceled = false;                  PageDestroy();                    //This one shows the zapOSD when changing channel from mini GUIDE' this is currently unwanted.                  /*                  TvFullScreen TVWindow = (TvFullScreen)GUIWindowManager.GetWindow((int)(int)GUIWindow.Window.WINDOW_TVFULLSCREEN);                  if (TVWindow != null) TVWindow.UpdateOSD(changeChannel.Name);                                  */                    TVHome.UserChannelChanged = true;                    if (changeChannel != null)                  {                    TVHome.ViewChannel(changeChannel);                  }                }              }              else if (message.SenderControlId == 36) // spincontrol              {                // switch group                              OnGroupChanged();              }              else if (message.SenderControlId == 34) // exit button              {                // exit                _canceled = true;                PageDestroy();              }              break;            }        }
Magic Number,TvPlugin,TvMiniGuide,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvMiniGuide.cs,FillGroupList,The following statement contains a magic number: _channelGroupList.Count < 2
Magic Number,TvPlugin,TvMiniGuide,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvMiniGuide.cs,FillChannelList,The following statement contains a magic number: GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_SETFOCUS' GetID' 0' 37' 0' 0' null);
Magic Number,TvPlugin,TvMiniGuide,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvMiniGuide.cs,FillChannelList,The following statement contains a magic number: lstChannels.GetID == 37
Magic Number,TvPlugin,TvMiniGuide,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvMiniGuide.cs,GetNowAndNext,The following statement contains a magic number: List<List<Channel>> tvChannelListSegments = SplitChannelList(tvChannelList' 100);
Magic Number,TvPlugin,TvMiniGuide,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvMiniGuide.cs,CalculateProgress,The following statement contains a magic number: fprogress = (passed.TotalMinutes / length.TotalMinutes) * 100;
Magic Number,TvPlugin,TvMiniGuide,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvMiniGuide.cs,CalculateProgress,The following statement contains a magic number: fprogress = 100.0f;
Magic Number,TvPlugin,TvMiniGuide,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvMiniGuide.cs,CalculateProgress,The following statement contains a magic number: fprogress > 100.0f
Magic Number,TvPlugin,TvNewScheduleSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearch.cs,OnAction,The following statement contains a magic number: LastActionTime + 100 > Environment.TickCount && action == LastAction
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnQuickRecord,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(891));
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnQuickRecord,The following statement contains a magic number: dlg.SetHeading(616);
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnQuickRecord,The following statement contains a magic number: i <= 615
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnQuickRecord,The following statement contains a magic number: dlg.SetHeading(142);
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnQuickRecord,The following statement contains a magic number: steps = 15;
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnQuickRecord,The following statement contains a magic number: hour < 10
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnQuickRecord,The following statement contains a magic number: minute < 10
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnQuickRecord,The following statement contains a magic number: minute < 60
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnQuickRecord,The following statement contains a magic number: hour <= 23
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnQuickRecord,The following statement contains a magic number: dlg.SelectedLabel = (DateTime.Now.Hour * (60 / steps)) + (Convert.ToInt16(DateTime.Now.Minute / steps));
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnQuickRecord,The following statement contains a magic number: hour = (mins) / 60;
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnQuickRecord,The following statement contains a magic number: minute = ((mins) % 60);
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnQuickRecord,The following statement contains a magic number: dlg.SetHeading(180);
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnQuickRecord,The following statement contains a magic number: dlg.Add(String.Format("{0} {1}"' hours.ToString("f2")' GUILocalizeStrings.Get(3002)));
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnQuickRecord,The following statement contains a magic number: hours <= 24f
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnQuickRecord,The following statement contains a magic number: int duration = (dlg.SelectedLabel + 1) * 30;
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnQuickRecord,The following statement contains a magic number: rec.ProgramName = GUILocalizeStrings.Get(413) + " (" + rec.ReferencedChannel().DisplayName + ")";
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnAdvancedRecord,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(891));
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnAdvancedRecord,The following statement contains a magic number: dlg.SetHeading(616);
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnAdvancedRecord,The following statement contains a magic number: i <= 615
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnAdvancedRecord,The following statement contains a magic number: switch (dlg.SelectedLabel)        {          case 0: //once            rec.ScheduleType = (int)ScheduleRecordingType.Once;            break;          case 1: //everytime' this channel            rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;            break;          case 2: //everytime' all channels            rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;            break;          case 3: //weekly            rec.ScheduleType = (int)ScheduleRecordingType.Weekly;            break;          case 4: //daily            rec.ScheduleType = (int)ScheduleRecordingType.Daily;            break;          case 5: //WorkingDays            rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;            break;          case 6: //Weekend            rec.ScheduleType = (int)ScheduleRecordingType.Weekends;            break;          case 7://everytime weekly' this channel            rec.ScheduleType = (int) ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;            break;        }
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnAdvancedRecord,The following statement contains a magic number: switch (dlg.SelectedLabel)        {          case 0: //once            rec.ScheduleType = (int)ScheduleRecordingType.Once;            break;          case 1: //everytime' this channel            rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;            break;          case 2: //everytime' all channels            rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;            break;          case 3: //weekly            rec.ScheduleType = (int)ScheduleRecordingType.Weekly;            break;          case 4: //daily            rec.ScheduleType = (int)ScheduleRecordingType.Daily;            break;          case 5: //WorkingDays            rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;            break;          case 6: //Weekend            rec.ScheduleType = (int)ScheduleRecordingType.Weekends;            break;          case 7://everytime weekly' this channel            rec.ScheduleType = (int) ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;            break;        }
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnAdvancedRecord,The following statement contains a magic number: switch (dlg.SelectedLabel)        {          case 0: //once            rec.ScheduleType = (int)ScheduleRecordingType.Once;            break;          case 1: //everytime' this channel            rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;            break;          case 2: //everytime' all channels            rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;            break;          case 3: //weekly            rec.ScheduleType = (int)ScheduleRecordingType.Weekly;            break;          case 4: //daily            rec.ScheduleType = (int)ScheduleRecordingType.Daily;            break;          case 5: //WorkingDays            rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;            break;          case 6: //Weekend            rec.ScheduleType = (int)ScheduleRecordingType.Weekends;            break;          case 7://everytime weekly' this channel            rec.ScheduleType = (int) ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;            break;        }
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnAdvancedRecord,The following statement contains a magic number: switch (dlg.SelectedLabel)        {          case 0: //once            rec.ScheduleType = (int)ScheduleRecordingType.Once;            break;          case 1: //everytime' this channel            rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;            break;          case 2: //everytime' all channels            rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;            break;          case 3: //weekly            rec.ScheduleType = (int)ScheduleRecordingType.Weekly;            break;          case 4: //daily            rec.ScheduleType = (int)ScheduleRecordingType.Daily;            break;          case 5: //WorkingDays            rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;            break;          case 6: //Weekend            rec.ScheduleType = (int)ScheduleRecordingType.Weekends;            break;          case 7://everytime weekly' this channel            rec.ScheduleType = (int) ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;            break;        }
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnAdvancedRecord,The following statement contains a magic number: switch (dlg.SelectedLabel)        {          case 0: //once            rec.ScheduleType = (int)ScheduleRecordingType.Once;            break;          case 1: //everytime' this channel            rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;            break;          case 2: //everytime' all channels            rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;            break;          case 3: //weekly            rec.ScheduleType = (int)ScheduleRecordingType.Weekly;            break;          case 4: //daily            rec.ScheduleType = (int)ScheduleRecordingType.Daily;            break;          case 5: //WorkingDays            rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;            break;          case 6: //Weekend            rec.ScheduleType = (int)ScheduleRecordingType.Weekends;            break;          case 7://everytime weekly' this channel            rec.ScheduleType = (int) ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;            break;        }
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnAdvancedRecord,The following statement contains a magic number: switch (dlg.SelectedLabel)        {          case 0: //once            rec.ScheduleType = (int)ScheduleRecordingType.Once;            break;          case 1: //everytime' this channel            rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;            break;          case 2: //everytime' all channels            rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;            break;          case 3: //weekly            rec.ScheduleType = (int)ScheduleRecordingType.Weekly;            break;          case 4: //daily            rec.ScheduleType = (int)ScheduleRecordingType.Daily;            break;          case 5: //WorkingDays            rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;            break;          case 6: //Weekend            rec.ScheduleType = (int)ScheduleRecordingType.Weekends;            break;          case 7://everytime weekly' this channel            rec.ScheduleType = (int) ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;            break;        }
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnAdvancedRecord,The following statement contains a magic number: dlg.SetHeading(636);
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnAdvancedRecord,The following statement contains a magic number: day < 30
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnAdvancedRecord,The following statement contains a magic number: dlg.SetHeading(142);
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnAdvancedRecord,The following statement contains a magic number: steps = 5;
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnAdvancedRecord,The following statement contains a magic number: hour < 10
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnAdvancedRecord,The following statement contains a magic number: minute < 10
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnAdvancedRecord,The following statement contains a magic number: minute < 60
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnAdvancedRecord,The following statement contains a magic number: hour <= 23
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnAdvancedRecord,The following statement contains a magic number: dlg.SelectedLabel = (DateTime.Now.Hour * (60 / steps)) + (Convert.ToInt16(DateTime.Now.Minute / steps));
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnAdvancedRecord,The following statement contains a magic number: hour = (mins) / 60;
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnAdvancedRecord,The following statement contains a magic number: minute = ((mins) % 60);
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnAdvancedRecord,The following statement contains a magic number: dlg.SetHeading(180);
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnAdvancedRecord,The following statement contains a magic number: dlg.Add(String.Format("{0} {1}"' hours.ToString("f2")' GUILocalizeStrings.Get(3002)));
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnAdvancedRecord,The following statement contains a magic number: hours <= 24f
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnAdvancedRecord,The following statement contains a magic number: int duration = (dlg.SelectedLabel + 1) * 30;
Magic Number,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnAdvancedRecord,The following statement contains a magic number: rec.ProgramName = GUILocalizeStrings.Get(413) + " (" + rec.ReferencedChannel().DisplayName + ")";
Magic Number,TvPlugin,TvNotifyManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNotifyManager.cs,TvNotifyManager,The following statement contains a magic number: _preNotifyConfig = xmlreader.GetValueAsInt("mytv"' "notifyTVBefore"' 300);
Magic Number,TvPlugin,TvNotifyManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNotifyManager.cs,TvNotifyManager,The following statement contains a magic number: _timer.Interval = 15000;
Magic Number,TvPlugin,TvNotifyManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNotifyManager.cs,ProcessRecordings,The following statement contains a magic number: Notify(GUILocalizeStrings.Get(1004)'                           String.Format("{0}. {1}"' rec.ProgramName' GUILocalizeStrings.Get(200055))'                           TVHome.Navigator.Channel);
Magic Number,TvPlugin,TvNotifyManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNotifyManager.cs,ProcessRecordings,The following statement contains a magic number: Notify(GUILocalizeStrings.Get(1004)'                           String.Format("{0}. {1}"' rec.ProgramName' GUILocalizeStrings.Get(200055))'                           TVHome.Navigator.Channel);
Magic Number,TvPlugin,TvNotifyManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNotifyManager.cs,ProcessRecordings,The following statement contains a magic number: Notify(GUILocalizeStrings.Get(1446)' text' newRecording.ReferencedChannel());
Magic Number,TvPlugin,TvNotifyManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNotifyManager.cs,ProcessRecordings,The following statement contains a magic number: tsStart.TotalSeconds < 60
Magic Number,TvPlugin,TvNotifyManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNotifyManager.cs,ProcessRecordings,The following statement contains a magic number: tsEnd.TotalSeconds > 60
Magic Number,TvPlugin,TvNotifyManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNotifyManager.cs,ProcessRecordings,The following statement contains a magic number: Notify(GUILocalizeStrings.Get(1447)' textPrg' stoppedRec.ReferencedChannel());
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,Init,The following statement contains a magic number: _immediateSeekValue = xmlreader.GetValueAsInt("movieplayer"' "immediateskipstepsize"' 10);
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,Render,The following statement contains a magic number: UpdateInt == 50
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,Render,The following statement contains a magic number: UpdateInt == 50 || UpdateInt == 0
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,CanStopTimeshifting,The following statement contains a magic number: dlgPlayStop.SetHeading(GUILocalizeStrings.Get(605));
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,CanStopTimeshifting,The following statement contains a magic number: dlgPlayStop.SetLine(1' GUILocalizeStrings.Get(2550));
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,CanStopTimeshifting,The following statement contains a magic number: dlgPlayStop.SetLine(2' GUILocalizeStrings.Get(2551));
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,CanStopTimeshifting,The following statement contains a magic number: dlgPlayStop.SetLine(2' GUILocalizeStrings.Get(2551));
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT: // fired when OSD is hidden            {              //if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(true);              // following line should stay. Problems with OSD not              // appearing are already fixed elsewhere              //for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)              //{              //  HideControl(GetID' i);              //}              Dispose();              GUIPropertyManager.SetProperty("#currentmodule"' GUIWindowManager.GetWindow(message.Param1).GetModuleName());              return true;            }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT: // fired when OSD is shown            {              // following line should stay. Problems with OSD not              // appearing are already fixed elsewhere              SqlBuilder sb = new SqlBuilder(StatementType.Select' typeof (Channel));              sb.AddConstraint(Operator.Equals' "istv"' 1);              sb.AddOrderByField(true' "sortOrder");              SqlStatement stmt = sb.GetStatement(true);              listTvChannels = ObjectFactory.GetCollection(typeof (Channel)' stmt.Execute());              GUIPropertyManager.SetProperty("#currentmodule"' GetModuleName());              previousProgram = null;              AllocResources();              // if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(false);              ResetAllControls(); // make sure the controls are positioned relevant to the OSD Y offset              isSubMenuVisible = false;              m_iActiveMenuButtonID = 0;              m_iActiveMenu = 0;              m_bNeedRefresh = false;              m_dateTime = DateTime.Now;              Reset();              FocusControl(GetID' (int)Controls.OSD_PLAY' 0); // set focus to play button by default when window is shown              ShowPrograms();              QueueAnimation(AnimationType.WindowOpen);              for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)              {                ShowControl(GetID' i);              }              if (g_Player.Paused)              {                ToggleButton((int)Controls.OSD_PLAY' true);                // make sure play button is down (so it shows the pause symbol)              }              else              {                ToggleButton((int)Controls.OSD_PLAY' false); // make sure play button is up (so it shows the play symbol)              }              m_delayInterval = MediaPortal.Player.Subtitles.SubEngine.GetInstance().DelayInterval;              if (m_delayInterval > 0)                m_subtitleDelay = MediaPortal.Player.Subtitles.SubEngine.GetInstance().Delay / m_delayInterval;              if (g_Player.HasPostprocessing)             {               m_delayIntervalAudio = PostProcessingEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = PostProcessingEngine.GetInstance().AudioDelay / m_delayIntervalAudio;               }             }             else if (g_Player.HasAudioEngine)             {               m_delayIntervalAudio = AudioPostEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = AudioPostEngine.GetInstance().AudioDelay / m_delayIntervalAudio;               }             }                g_Player.UpdateMediaInfoProperties();              GUIPropertyManager.SetProperty("#TV.View.HasTeletext"' TVHome.Card.HasTeletext.ToString());                MediaPortal.Player.VideoStreamFormat videoFormat = g_Player.GetVideoFormat();                GUIPropertyManager.SetProperty("#Play.Current.TSBitRate"'               ((float)MediaPortal.Player.g_Player.GetVideoFormat().bitrate / 1024 / 1024).ToString("0.00"' CultureInfo.InvariantCulture));                GUIPropertyManager.SetProperty("#TV.TuningDetails.SignalLevel"' TVHome.Card.SignalLevel.ToString());              GUIPropertyManager.SetProperty("#TV.TuningDetails.SignalQuality"' TVHome.Card.SignalQuality.ToString());                GUIPropertyManager.SetProperty("#Play.Current.VideoFormat.RawResolution"'                videoFormat.width.ToString() + "x" + videoFormat.height.ToString());                GUIPropertyManager.SetProperty("#TV.TuningDetails.FreeToAir"' string.Empty);                Channel chan = TVHome.Navigator.Channel;              if (chan != null)              {                IList<TuningDetail> details = chan.ReferringTuningDetail();                if (details.Count > 0)                {                  TuningDetail detail = null;                  switch (TVHome.Card.Type)                  {                    case TvLibrary.Interfaces.CardType.Analog:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 0)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.Atsc:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 1)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbC:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 2)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbS:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 3)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbT:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 4)                          detail = t;                      }                      break;                    default:                      detail = details[0];                      break;                  }                  if (detail != null)                  {                    GUIPropertyManager.SetProperty("#TV.TuningDetails.FreeToAir"' detail.FreeToAir.ToString());                  }                }              }            }            return true;            case GUIMessage.MessageType.GUI_MSG_SETFOCUS:            goto case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS;            case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS:            {              if (message.SenderControlId == 13)              {                return true;              }            }            break;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId; // get the ID of the control sending us a message                if (btnChannelUp != null && iControl == btnChannelUp.GetID)              {                OnNextChannel();              }                if (btnChannelDown != null && iControl == btnChannelDown.GetID)              {                OnPreviousChannel();              }                if (!g_Player.IsTVRecording)              {                if (btnPreviousProgram != null && iControl == btnPreviousProgram.GetID)                {                  Program prog = GetChannel().GetProgramAt(m_dateTime);                  if (prog != null)                  {                    prog =                      GetChannel().GetProgramAt(                        prog.StartTime.Subtract(new TimeSpan(0' 1' 0)));                    if (prog != null)                    {                      m_dateTime = prog.StartTime.AddMinutes(1);                    }                  }                  ShowPrograms();                }                if (iControl == btnNextProgram.GetID)                {                  Program prog = GetChannel().GetProgramAt(m_dateTime);                  if (prog != null)                  {                    prog = GetChannel().GetProgramAt(prog.EndTime.AddMinutes(+1));                    if (prog != null)                    {                      m_dateTime = prog.StartTime.AddMinutes(1);                    }                  }                  ShowPrograms();                }              }                if (iControl >= (int)Controls.OSD_VOLUMESLIDER)                // one of the settings (sub menu) controls is sending us a message              {                Handle_ControlSetting(iControl' message.Param1);              }                if (iControl == (int)Controls.OSD_PAUSE)              {                if (g_Player.Paused)                {                  ToggleButton((int)Controls.OSD_PLAY' true);                  // make sure play button is down (so it shows the pause symbol)                                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_PLAY' false);                  // make sure play button is up (so it shows the play symbol)                  if (g_Player.Speed < 1) // are we not playing back at normal speed                  {                    ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                    ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  }                  else                  {                    ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                    if (g_Player.Speed == 1)                    {                      ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                    }                  }                }              }                if (iControl == (int)Controls.OSD_PLAY)              {                //TODO                int iSpeed = g_Player.Speed;                if (iSpeed != 1) // we're in ffwd or rewind mode                {                  g_Player.Speed = 1; // drop back to single speed                  ToggleButton((int)Controls.OSD_REWIND' false); // pop all the relevant                  ToggleButton((int)Controls.OSD_FFWD' false); // buttons back to                  ToggleButton((int)Controls.OSD_PLAY' false); // their up state                }                else                {                  g_Player.Pause(); // Pause/Un-Pause playback                  if (g_Player.Paused)                  {                    ToggleButton((int)Controls.OSD_PLAY' true);                    // make sure play button is down (so it shows the pause symbol)                  }                  else                  {                    ToggleButton((int)Controls.OSD_PLAY' false);                    // make sure play button is up (so it shows the play symbol)                  }                }              }                if (iControl == (int)Controls.OSD_STOP)              {                if (isSubMenuVisible) // sub menu currently active ?                {                  FocusControl(GetID' m_iActiveMenuButtonID' 0); // set focus to last menu button                  ToggleSubMenu(0' m_iActiveMenu); // hide the currently active sub-menu                }                //g_application.m_guiWindowFullScreen.m_bOSDVisible = false;	// toggle the OSD off so parent window can de-init                Log.Debug("TVOSD:stop");                if (TVHome.Card.IsRecording)                {                  int id = TVHome.Card.RecordingScheduleId;                  if (id > 0)                  {                    TVHome.TvServer.StopRecordingSchedule(id);                  }                }                //GUIWindowManager.ShowPreviousWindow();							// go back to the previous window              }                if (iControl == (int)Controls.OSD_REWIND)              {                if (g_Player.Paused)                {                  g_Player.Pause(); // Unpause playback                }                  if (g_Player.Speed < 1) // are we not playing back at normal speed                {                  ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                  if (g_Player.Speed == 1)                  {                    ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  }                }              }                if (iControl == (int)Controls.OSD_FFWD)              {                if (g_Player.Paused)                {                  g_Player.Pause(); // Unpause playback                }                  if (g_Player.Speed > 1) // are we not playing back at normal speed                {                  ToggleButton((int)Controls.OSD_FFWD' true); // make sure out button is in the down position                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  if (g_Player.Speed == 1)                  {                    ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                  }                }              }                if (iControl == (int)Controls.OSD_SKIPBWD)              {                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(-_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(-_immediateSeekValue);                }                ToggleButton((int)Controls.OSD_SKIPBWD' false); // pop the button back to it's up state              }                if (iControl == (int)Controls.OSD_SKIPFWD)              {                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(_immediateSeekValue);                }                ToggleButton((int)Controls.OSD_SKIPFWD' false); // pop the button back to it's up state              }                if (iControl == (int)Controls.OSD_MUTE)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VOL); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  int iValue = g_Player.Volume;                  GUISliderControl pSlider = GetControl((int)Controls.OSD_VOLUMESLIDER) as GUISliderControl;                  if (null != pSlider)                  {                    pSlider.Percentage = iValue; // Update our volume slider accordingly ...                  }                  ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER); // show the volume control                  ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER_LABEL);                  FocusControl(GetID' (int)Controls.OSD_VOLUMESLIDER' 0); // set focus to it                }                else // sub menu is off                {                  FocusControl(GetID' (int)Controls.OSD_MUTE' 0); // set focus to the mute button                }              }                if (iControl == (int)Controls.OSD_SUBTITLES)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_SUBTITLES); // hide or show the sub-menu                if (isSubMenuVisible)                {                  // set the controls values                  GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_SUBTITLE_DELAY);                  pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                  pControl.FloatInterval = 1;                  pControl.SetRange(-10' 10);                  SetSliderValue(-10' 10' m_subtitleDelay' (int)Controls.OSD_SUBTITLE_DELAY);                  SetCheckmarkValue(g_Player.EnableSubtitle' (int)Controls.OSD_SUBTITLE_ONOFF);                  // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY_LABEL);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_ONOFF);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_LIST);                    FocusControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY' 0);                  // set focus to the first control in our group                  PopulateSubTitles(); // populate the list control with subtitles for this video                }              }                if (iControl == (int)Controls.OSD_BOOKMARKS)              {                //not used              }                if (iControl == (int)Controls.OSD_VIDEO)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VIDEO); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  // set the controls values                  float fPercent = (float)(100 * (g_Player.CurrentPosition / g_Player.Duration));                  SetSliderValue(0.0f' 100.0f' (float)fPercent' (int)Controls.OSD_VIDEOPOS);                    bool hasPostProc = g_Player.HasPostprocessing;                  if (hasPostProc)                  {                    IPostProcessingEngine engine = PostProcessingEngine.GetInstance();                    SetCheckmarkValue(engine.EnablePostProcess' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    SetCheckmarkValue(engine.EnableResize' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    SetCheckmarkValue(engine.EnableCrop' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    SetCheckmarkValue(engine.EnableDeinterlace' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    UpdatePostProcessing();                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL_LABEL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL_LABEL);                  }                    //SetCheckmarkValue(g_stSettings.m_bNonInterleaved' Controls.OSD_NONINTERLEAVED);                  //SetCheckmarkValue(g_stSettings.m_bNoCache' Controls.OSD_NOCACHE);                  //SetCheckmarkValue(g_stSettings.m_bFrameRateConversions' Controls.OSD_ADJFRAMERATE);                    UpdateGammaContrastBrightness();                  // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_VIDEOPOS);                  ShowControl(GetID' (int)Controls.OSD_VIDEOPOS_LABEL);                  ShowControl(GetID' (int)Controls.OSD_NONINTERLEAVED);                  ShowControl(GetID' (int)Controls.OSD_NOCACHE);                  ShowControl(GetID' (int)Controls.OSD_ADJFRAMERATE);                  ShowControl(GetID' (int)Controls.OSD_SATURATIONLABEL);                  ShowControl(GetID' (int)Controls.OSD_SATURATION);                  ShowControl(GetID' (int)Controls.OSD_SHARPNESSLABEL);                  ShowControl(GetID' (int)Controls.OSD_SHARPNESS);                  ShowControl(GetID' (int)Controls.OSD_BRIGHTNESS);                  ShowControl(GetID' (int)Controls.OSD_BRIGHTNESSLABEL);                  ShowControl(GetID' (int)Controls.OSD_CONTRAST);                  ShowControl(GetID' (int)Controls.OSD_CONTRASTLABEL);                  ShowControl(GetID' (int)Controls.OSD_GAMMA);                  ShowControl(GetID' (int)Controls.OSD_GAMMALABEL);                  FocusControl(GetID' (int)Controls.OSD_VIDEOPOS' 0); // set focus to the first control in our group                }              }                if (iControl == (int)Controls.OSD_AUDIO)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_AUDIO); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  int iValue = g_Player.Volume;                  GUISliderControl pSlider = GetControl((int)Controls.OSD_AUDIOVOLUMESLIDER) as GUISliderControl;                  if (null != pSlider)                  {                    pSlider.Percentage = iValue; // Update our volume slider accordingly ...                  }                    // set the controls values                  GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_AVDELAY);                  pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                  pControl.SetRange(-20' 20);                  SetSliderValue(-20' 20' m_audioDelay' (int)Controls.OSD_AVDELAY);                    bool hasPostProc = (g_Player.HasPostprocessing || g_Player.HasAudioEngine);                  if (hasPostProc)                  {                    GUIPropertyManager.SetProperty("#TvOSD.AudioVideoDelayPossible"' "true");                    pControl.FloatInterval = 1;                  }                  else                  {                     GUIPropertyManager.SetProperty("#TvOSD.AudioVideoDelayPossible"' "false");                    pControl.FloatValue = 0;                    m_audioDelay = 0;                    pControl.FloatInterval = 0;                  }                    // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_AVDELAY);                  ShowControl(GetID' (int)Controls.OSD_AVDELAY_LABEL);                  ShowControl(GetID' (int)Controls.OSD_AUDIOSTREAM_LIST);                  ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER);                  ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER_LABEL);                    FocusControl(GetID' (int)Controls.OSD_AVDELAY' 0); // set focus to the first control in our group                  PopulateAudioStreams(); // populate the list control with audio streams for this video                }              }                return true;            }        }
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT: // fired when OSD is hidden            {              //if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(true);              // following line should stay. Problems with OSD not              // appearing are already fixed elsewhere              //for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)              //{              //  HideControl(GetID' i);              //}              Dispose();              GUIPropertyManager.SetProperty("#currentmodule"' GUIWindowManager.GetWindow(message.Param1).GetModuleName());              return true;            }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT: // fired when OSD is shown            {              // following line should stay. Problems with OSD not              // appearing are already fixed elsewhere              SqlBuilder sb = new SqlBuilder(StatementType.Select' typeof (Channel));              sb.AddConstraint(Operator.Equals' "istv"' 1);              sb.AddOrderByField(true' "sortOrder");              SqlStatement stmt = sb.GetStatement(true);              listTvChannels = ObjectFactory.GetCollection(typeof (Channel)' stmt.Execute());              GUIPropertyManager.SetProperty("#currentmodule"' GetModuleName());              previousProgram = null;              AllocResources();              // if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(false);              ResetAllControls(); // make sure the controls are positioned relevant to the OSD Y offset              isSubMenuVisible = false;              m_iActiveMenuButtonID = 0;              m_iActiveMenu = 0;              m_bNeedRefresh = false;              m_dateTime = DateTime.Now;              Reset();              FocusControl(GetID' (int)Controls.OSD_PLAY' 0); // set focus to play button by default when window is shown              ShowPrograms();              QueueAnimation(AnimationType.WindowOpen);              for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)              {                ShowControl(GetID' i);              }              if (g_Player.Paused)              {                ToggleButton((int)Controls.OSD_PLAY' true);                // make sure play button is down (so it shows the pause symbol)              }              else              {                ToggleButton((int)Controls.OSD_PLAY' false); // make sure play button is up (so it shows the play symbol)              }              m_delayInterval = MediaPortal.Player.Subtitles.SubEngine.GetInstance().DelayInterval;              if (m_delayInterval > 0)                m_subtitleDelay = MediaPortal.Player.Subtitles.SubEngine.GetInstance().Delay / m_delayInterval;              if (g_Player.HasPostprocessing)             {               m_delayIntervalAudio = PostProcessingEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = PostProcessingEngine.GetInstance().AudioDelay / m_delayIntervalAudio;               }             }             else if (g_Player.HasAudioEngine)             {               m_delayIntervalAudio = AudioPostEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = AudioPostEngine.GetInstance().AudioDelay / m_delayIntervalAudio;               }             }                g_Player.UpdateMediaInfoProperties();              GUIPropertyManager.SetProperty("#TV.View.HasTeletext"' TVHome.Card.HasTeletext.ToString());                MediaPortal.Player.VideoStreamFormat videoFormat = g_Player.GetVideoFormat();                GUIPropertyManager.SetProperty("#Play.Current.TSBitRate"'               ((float)MediaPortal.Player.g_Player.GetVideoFormat().bitrate / 1024 / 1024).ToString("0.00"' CultureInfo.InvariantCulture));                GUIPropertyManager.SetProperty("#TV.TuningDetails.SignalLevel"' TVHome.Card.SignalLevel.ToString());              GUIPropertyManager.SetProperty("#TV.TuningDetails.SignalQuality"' TVHome.Card.SignalQuality.ToString());                GUIPropertyManager.SetProperty("#Play.Current.VideoFormat.RawResolution"'                videoFormat.width.ToString() + "x" + videoFormat.height.ToString());                GUIPropertyManager.SetProperty("#TV.TuningDetails.FreeToAir"' string.Empty);                Channel chan = TVHome.Navigator.Channel;              if (chan != null)              {                IList<TuningDetail> details = chan.ReferringTuningDetail();                if (details.Count > 0)                {                  TuningDetail detail = null;                  switch (TVHome.Card.Type)                  {                    case TvLibrary.Interfaces.CardType.Analog:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 0)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.Atsc:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 1)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbC:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 2)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbS:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 3)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbT:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 4)                          detail = t;                      }                      break;                    default:                      detail = details[0];                      break;                  }                  if (detail != null)                  {                    GUIPropertyManager.SetProperty("#TV.TuningDetails.FreeToAir"' detail.FreeToAir.ToString());                  }                }              }            }            return true;            case GUIMessage.MessageType.GUI_MSG_SETFOCUS:            goto case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS;            case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS:            {              if (message.SenderControlId == 13)              {                return true;              }            }            break;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId; // get the ID of the control sending us a message                if (btnChannelUp != null && iControl == btnChannelUp.GetID)              {                OnNextChannel();              }                if (btnChannelDown != null && iControl == btnChannelDown.GetID)              {                OnPreviousChannel();              }                if (!g_Player.IsTVRecording)              {                if (btnPreviousProgram != null && iControl == btnPreviousProgram.GetID)                {                  Program prog = GetChannel().GetProgramAt(m_dateTime);                  if (prog != null)                  {                    prog =                      GetChannel().GetProgramAt(                        prog.StartTime.Subtract(new TimeSpan(0' 1' 0)));                    if (prog != null)                    {                      m_dateTime = prog.StartTime.AddMinutes(1);                    }                  }                  ShowPrograms();                }                if (iControl == btnNextProgram.GetID)                {                  Program prog = GetChannel().GetProgramAt(m_dateTime);                  if (prog != null)                  {                    prog = GetChannel().GetProgramAt(prog.EndTime.AddMinutes(+1));                    if (prog != null)                    {                      m_dateTime = prog.StartTime.AddMinutes(1);                    }                  }                  ShowPrograms();                }              }                if (iControl >= (int)Controls.OSD_VOLUMESLIDER)                // one of the settings (sub menu) controls is sending us a message              {                Handle_ControlSetting(iControl' message.Param1);              }                if (iControl == (int)Controls.OSD_PAUSE)              {                if (g_Player.Paused)                {                  ToggleButton((int)Controls.OSD_PLAY' true);                  // make sure play button is down (so it shows the pause symbol)                                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_PLAY' false);                  // make sure play button is up (so it shows the play symbol)                  if (g_Player.Speed < 1) // are we not playing back at normal speed                  {                    ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                    ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  }                  else                  {                    ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                    if (g_Player.Speed == 1)                    {                      ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                    }                  }                }              }                if (iControl == (int)Controls.OSD_PLAY)              {                //TODO                int iSpeed = g_Player.Speed;                if (iSpeed != 1) // we're in ffwd or rewind mode                {                  g_Player.Speed = 1; // drop back to single speed                  ToggleButton((int)Controls.OSD_REWIND' false); // pop all the relevant                  ToggleButton((int)Controls.OSD_FFWD' false); // buttons back to                  ToggleButton((int)Controls.OSD_PLAY' false); // their up state                }                else                {                  g_Player.Pause(); // Pause/Un-Pause playback                  if (g_Player.Paused)                  {                    ToggleButton((int)Controls.OSD_PLAY' true);                    // make sure play button is down (so it shows the pause symbol)                  }                  else                  {                    ToggleButton((int)Controls.OSD_PLAY' false);                    // make sure play button is up (so it shows the play symbol)                  }                }              }                if (iControl == (int)Controls.OSD_STOP)              {                if (isSubMenuVisible) // sub menu currently active ?                {                  FocusControl(GetID' m_iActiveMenuButtonID' 0); // set focus to last menu button                  ToggleSubMenu(0' m_iActiveMenu); // hide the currently active sub-menu                }                //g_application.m_guiWindowFullScreen.m_bOSDVisible = false;	// toggle the OSD off so parent window can de-init                Log.Debug("TVOSD:stop");                if (TVHome.Card.IsRecording)                {                  int id = TVHome.Card.RecordingScheduleId;                  if (id > 0)                  {                    TVHome.TvServer.StopRecordingSchedule(id);                  }                }                //GUIWindowManager.ShowPreviousWindow();							// go back to the previous window              }                if (iControl == (int)Controls.OSD_REWIND)              {                if (g_Player.Paused)                {                  g_Player.Pause(); // Unpause playback                }                  if (g_Player.Speed < 1) // are we not playing back at normal speed                {                  ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                  if (g_Player.Speed == 1)                  {                    ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  }                }              }                if (iControl == (int)Controls.OSD_FFWD)              {                if (g_Player.Paused)                {                  g_Player.Pause(); // Unpause playback                }                  if (g_Player.Speed > 1) // are we not playing back at normal speed                {                  ToggleButton((int)Controls.OSD_FFWD' true); // make sure out button is in the down position                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  if (g_Player.Speed == 1)                  {                    ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                  }                }              }                if (iControl == (int)Controls.OSD_SKIPBWD)              {                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(-_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(-_immediateSeekValue);                }                ToggleButton((int)Controls.OSD_SKIPBWD' false); // pop the button back to it's up state              }                if (iControl == (int)Controls.OSD_SKIPFWD)              {                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(_immediateSeekValue);                }                ToggleButton((int)Controls.OSD_SKIPFWD' false); // pop the button back to it's up state              }                if (iControl == (int)Controls.OSD_MUTE)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VOL); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  int iValue = g_Player.Volume;                  GUISliderControl pSlider = GetControl((int)Controls.OSD_VOLUMESLIDER) as GUISliderControl;                  if (null != pSlider)                  {                    pSlider.Percentage = iValue; // Update our volume slider accordingly ...                  }                  ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER); // show the volume control                  ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER_LABEL);                  FocusControl(GetID' (int)Controls.OSD_VOLUMESLIDER' 0); // set focus to it                }                else // sub menu is off                {                  FocusControl(GetID' (int)Controls.OSD_MUTE' 0); // set focus to the mute button                }              }                if (iControl == (int)Controls.OSD_SUBTITLES)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_SUBTITLES); // hide or show the sub-menu                if (isSubMenuVisible)                {                  // set the controls values                  GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_SUBTITLE_DELAY);                  pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                  pControl.FloatInterval = 1;                  pControl.SetRange(-10' 10);                  SetSliderValue(-10' 10' m_subtitleDelay' (int)Controls.OSD_SUBTITLE_DELAY);                  SetCheckmarkValue(g_Player.EnableSubtitle' (int)Controls.OSD_SUBTITLE_ONOFF);                  // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY_LABEL);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_ONOFF);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_LIST);                    FocusControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY' 0);                  // set focus to the first control in our group                  PopulateSubTitles(); // populate the list control with subtitles for this video                }              }                if (iControl == (int)Controls.OSD_BOOKMARKS)              {                //not used              }                if (iControl == (int)Controls.OSD_VIDEO)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VIDEO); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  // set the controls values                  float fPercent = (float)(100 * (g_Player.CurrentPosition / g_Player.Duration));                  SetSliderValue(0.0f' 100.0f' (float)fPercent' (int)Controls.OSD_VIDEOPOS);                    bool hasPostProc = g_Player.HasPostprocessing;                  if (hasPostProc)                  {                    IPostProcessingEngine engine = PostProcessingEngine.GetInstance();                    SetCheckmarkValue(engine.EnablePostProcess' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    SetCheckmarkValue(engine.EnableResize' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    SetCheckmarkValue(engine.EnableCrop' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    SetCheckmarkValue(engine.EnableDeinterlace' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    UpdatePostProcessing();                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL_LABEL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL_LABEL);                  }                    //SetCheckmarkValue(g_stSettings.m_bNonInterleaved' Controls.OSD_NONINTERLEAVED);                  //SetCheckmarkValue(g_stSettings.m_bNoCache' Controls.OSD_NOCACHE);                  //SetCheckmarkValue(g_stSettings.m_bFrameRateConversions' Controls.OSD_ADJFRAMERATE);                    UpdateGammaContrastBrightness();                  // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_VIDEOPOS);                  ShowControl(GetID' (int)Controls.OSD_VIDEOPOS_LABEL);                  ShowControl(GetID' (int)Controls.OSD_NONINTERLEAVED);                  ShowControl(GetID' (int)Controls.OSD_NOCACHE);                  ShowControl(GetID' (int)Controls.OSD_ADJFRAMERATE);                  ShowControl(GetID' (int)Controls.OSD_SATURATIONLABEL);                  ShowControl(GetID' (int)Controls.OSD_SATURATION);                  ShowControl(GetID' (int)Controls.OSD_SHARPNESSLABEL);                  ShowControl(GetID' (int)Controls.OSD_SHARPNESS);                  ShowControl(GetID' (int)Controls.OSD_BRIGHTNESS);                  ShowControl(GetID' (int)Controls.OSD_BRIGHTNESSLABEL);                  ShowControl(GetID' (int)Controls.OSD_CONTRAST);                  ShowControl(GetID' (int)Controls.OSD_CONTRASTLABEL);                  ShowControl(GetID' (int)Controls.OSD_GAMMA);                  ShowControl(GetID' (int)Controls.OSD_GAMMALABEL);                  FocusControl(GetID' (int)Controls.OSD_VIDEOPOS' 0); // set focus to the first control in our group                }              }                if (iControl == (int)Controls.OSD_AUDIO)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_AUDIO); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  int iValue = g_Player.Volume;                  GUISliderControl pSlider = GetControl((int)Controls.OSD_AUDIOVOLUMESLIDER) as GUISliderControl;                  if (null != pSlider)                  {                    pSlider.Percentage = iValue; // Update our volume slider accordingly ...                  }                    // set the controls values                  GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_AVDELAY);                  pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                  pControl.SetRange(-20' 20);                  SetSliderValue(-20' 20' m_audioDelay' (int)Controls.OSD_AVDELAY);                    bool hasPostProc = (g_Player.HasPostprocessing || g_Player.HasAudioEngine);                  if (hasPostProc)                  {                    GUIPropertyManager.SetProperty("#TvOSD.AudioVideoDelayPossible"' "true");                    pControl.FloatInterval = 1;                  }                  else                  {                     GUIPropertyManager.SetProperty("#TvOSD.AudioVideoDelayPossible"' "false");                    pControl.FloatValue = 0;                    m_audioDelay = 0;                    pControl.FloatInterval = 0;                  }                    // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_AVDELAY);                  ShowControl(GetID' (int)Controls.OSD_AVDELAY_LABEL);                  ShowControl(GetID' (int)Controls.OSD_AUDIOSTREAM_LIST);                  ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER);                  ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER_LABEL);                    FocusControl(GetID' (int)Controls.OSD_AVDELAY' 0); // set focus to the first control in our group                  PopulateAudioStreams(); // populate the list control with audio streams for this video                }              }                return true;            }        }
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT: // fired when OSD is hidden            {              //if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(true);              // following line should stay. Problems with OSD not              // appearing are already fixed elsewhere              //for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)              //{              //  HideControl(GetID' i);              //}              Dispose();              GUIPropertyManager.SetProperty("#currentmodule"' GUIWindowManager.GetWindow(message.Param1).GetModuleName());              return true;            }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT: // fired when OSD is shown            {              // following line should stay. Problems with OSD not              // appearing are already fixed elsewhere              SqlBuilder sb = new SqlBuilder(StatementType.Select' typeof (Channel));              sb.AddConstraint(Operator.Equals' "istv"' 1);              sb.AddOrderByField(true' "sortOrder");              SqlStatement stmt = sb.GetStatement(true);              listTvChannels = ObjectFactory.GetCollection(typeof (Channel)' stmt.Execute());              GUIPropertyManager.SetProperty("#currentmodule"' GetModuleName());              previousProgram = null;              AllocResources();              // if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(false);              ResetAllControls(); // make sure the controls are positioned relevant to the OSD Y offset              isSubMenuVisible = false;              m_iActiveMenuButtonID = 0;              m_iActiveMenu = 0;              m_bNeedRefresh = false;              m_dateTime = DateTime.Now;              Reset();              FocusControl(GetID' (int)Controls.OSD_PLAY' 0); // set focus to play button by default when window is shown              ShowPrograms();              QueueAnimation(AnimationType.WindowOpen);              for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)              {                ShowControl(GetID' i);              }              if (g_Player.Paused)              {                ToggleButton((int)Controls.OSD_PLAY' true);                // make sure play button is down (so it shows the pause symbol)              }              else              {                ToggleButton((int)Controls.OSD_PLAY' false); // make sure play button is up (so it shows the play symbol)              }              m_delayInterval = MediaPortal.Player.Subtitles.SubEngine.GetInstance().DelayInterval;              if (m_delayInterval > 0)                m_subtitleDelay = MediaPortal.Player.Subtitles.SubEngine.GetInstance().Delay / m_delayInterval;              if (g_Player.HasPostprocessing)             {               m_delayIntervalAudio = PostProcessingEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = PostProcessingEngine.GetInstance().AudioDelay / m_delayIntervalAudio;               }             }             else if (g_Player.HasAudioEngine)             {               m_delayIntervalAudio = AudioPostEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = AudioPostEngine.GetInstance().AudioDelay / m_delayIntervalAudio;               }             }                g_Player.UpdateMediaInfoProperties();              GUIPropertyManager.SetProperty("#TV.View.HasTeletext"' TVHome.Card.HasTeletext.ToString());                MediaPortal.Player.VideoStreamFormat videoFormat = g_Player.GetVideoFormat();                GUIPropertyManager.SetProperty("#Play.Current.TSBitRate"'               ((float)MediaPortal.Player.g_Player.GetVideoFormat().bitrate / 1024 / 1024).ToString("0.00"' CultureInfo.InvariantCulture));                GUIPropertyManager.SetProperty("#TV.TuningDetails.SignalLevel"' TVHome.Card.SignalLevel.ToString());              GUIPropertyManager.SetProperty("#TV.TuningDetails.SignalQuality"' TVHome.Card.SignalQuality.ToString());                GUIPropertyManager.SetProperty("#Play.Current.VideoFormat.RawResolution"'                videoFormat.width.ToString() + "x" + videoFormat.height.ToString());                GUIPropertyManager.SetProperty("#TV.TuningDetails.FreeToAir"' string.Empty);                Channel chan = TVHome.Navigator.Channel;              if (chan != null)              {                IList<TuningDetail> details = chan.ReferringTuningDetail();                if (details.Count > 0)                {                  TuningDetail detail = null;                  switch (TVHome.Card.Type)                  {                    case TvLibrary.Interfaces.CardType.Analog:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 0)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.Atsc:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 1)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbC:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 2)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbS:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 3)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbT:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 4)                          detail = t;                      }                      break;                    default:                      detail = details[0];                      break;                  }                  if (detail != null)                  {                    GUIPropertyManager.SetProperty("#TV.TuningDetails.FreeToAir"' detail.FreeToAir.ToString());                  }                }              }            }            return true;            case GUIMessage.MessageType.GUI_MSG_SETFOCUS:            goto case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS;            case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS:            {              if (message.SenderControlId == 13)              {                return true;              }            }            break;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId; // get the ID of the control sending us a message                if (btnChannelUp != null && iControl == btnChannelUp.GetID)              {                OnNextChannel();              }                if (btnChannelDown != null && iControl == btnChannelDown.GetID)              {                OnPreviousChannel();              }                if (!g_Player.IsTVRecording)              {                if (btnPreviousProgram != null && iControl == btnPreviousProgram.GetID)                {                  Program prog = GetChannel().GetProgramAt(m_dateTime);                  if (prog != null)                  {                    prog =                      GetChannel().GetProgramAt(                        prog.StartTime.Subtract(new TimeSpan(0' 1' 0)));                    if (prog != null)                    {                      m_dateTime = prog.StartTime.AddMinutes(1);                    }                  }                  ShowPrograms();                }                if (iControl == btnNextProgram.GetID)                {                  Program prog = GetChannel().GetProgramAt(m_dateTime);                  if (prog != null)                  {                    prog = GetChannel().GetProgramAt(prog.EndTime.AddMinutes(+1));                    if (prog != null)                    {                      m_dateTime = prog.StartTime.AddMinutes(1);                    }                  }                  ShowPrograms();                }              }                if (iControl >= (int)Controls.OSD_VOLUMESLIDER)                // one of the settings (sub menu) controls is sending us a message              {                Handle_ControlSetting(iControl' message.Param1);              }                if (iControl == (int)Controls.OSD_PAUSE)              {                if (g_Player.Paused)                {                  ToggleButton((int)Controls.OSD_PLAY' true);                  // make sure play button is down (so it shows the pause symbol)                                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_PLAY' false);                  // make sure play button is up (so it shows the play symbol)                  if (g_Player.Speed < 1) // are we not playing back at normal speed                  {                    ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                    ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  }                  else                  {                    ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                    if (g_Player.Speed == 1)                    {                      ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                    }                  }                }              }                if (iControl == (int)Controls.OSD_PLAY)              {                //TODO                int iSpeed = g_Player.Speed;                if (iSpeed != 1) // we're in ffwd or rewind mode                {                  g_Player.Speed = 1; // drop back to single speed                  ToggleButton((int)Controls.OSD_REWIND' false); // pop all the relevant                  ToggleButton((int)Controls.OSD_FFWD' false); // buttons back to                  ToggleButton((int)Controls.OSD_PLAY' false); // their up state                }                else                {                  g_Player.Pause(); // Pause/Un-Pause playback                  if (g_Player.Paused)                  {                    ToggleButton((int)Controls.OSD_PLAY' true);                    // make sure play button is down (so it shows the pause symbol)                  }                  else                  {                    ToggleButton((int)Controls.OSD_PLAY' false);                    // make sure play button is up (so it shows the play symbol)                  }                }              }                if (iControl == (int)Controls.OSD_STOP)              {                if (isSubMenuVisible) // sub menu currently active ?                {                  FocusControl(GetID' m_iActiveMenuButtonID' 0); // set focus to last menu button                  ToggleSubMenu(0' m_iActiveMenu); // hide the currently active sub-menu                }                //g_application.m_guiWindowFullScreen.m_bOSDVisible = false;	// toggle the OSD off so parent window can de-init                Log.Debug("TVOSD:stop");                if (TVHome.Card.IsRecording)                {                  int id = TVHome.Card.RecordingScheduleId;                  if (id > 0)                  {                    TVHome.TvServer.StopRecordingSchedule(id);                  }                }                //GUIWindowManager.ShowPreviousWindow();							// go back to the previous window              }                if (iControl == (int)Controls.OSD_REWIND)              {                if (g_Player.Paused)                {                  g_Player.Pause(); // Unpause playback                }                  if (g_Player.Speed < 1) // are we not playing back at normal speed                {                  ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                  if (g_Player.Speed == 1)                  {                    ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  }                }              }                if (iControl == (int)Controls.OSD_FFWD)              {                if (g_Player.Paused)                {                  g_Player.Pause(); // Unpause playback                }                  if (g_Player.Speed > 1) // are we not playing back at normal speed                {                  ToggleButton((int)Controls.OSD_FFWD' true); // make sure out button is in the down position                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  if (g_Player.Speed == 1)                  {                    ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                  }                }              }                if (iControl == (int)Controls.OSD_SKIPBWD)              {                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(-_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(-_immediateSeekValue);                }                ToggleButton((int)Controls.OSD_SKIPBWD' false); // pop the button back to it's up state              }                if (iControl == (int)Controls.OSD_SKIPFWD)              {                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(_immediateSeekValue);                }                ToggleButton((int)Controls.OSD_SKIPFWD' false); // pop the button back to it's up state              }                if (iControl == (int)Controls.OSD_MUTE)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VOL); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  int iValue = g_Player.Volume;                  GUISliderControl pSlider = GetControl((int)Controls.OSD_VOLUMESLIDER) as GUISliderControl;                  if (null != pSlider)                  {                    pSlider.Percentage = iValue; // Update our volume slider accordingly ...                  }                  ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER); // show the volume control                  ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER_LABEL);                  FocusControl(GetID' (int)Controls.OSD_VOLUMESLIDER' 0); // set focus to it                }                else // sub menu is off                {                  FocusControl(GetID' (int)Controls.OSD_MUTE' 0); // set focus to the mute button                }              }                if (iControl == (int)Controls.OSD_SUBTITLES)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_SUBTITLES); // hide or show the sub-menu                if (isSubMenuVisible)                {                  // set the controls values                  GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_SUBTITLE_DELAY);                  pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                  pControl.FloatInterval = 1;                  pControl.SetRange(-10' 10);                  SetSliderValue(-10' 10' m_subtitleDelay' (int)Controls.OSD_SUBTITLE_DELAY);                  SetCheckmarkValue(g_Player.EnableSubtitle' (int)Controls.OSD_SUBTITLE_ONOFF);                  // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY_LABEL);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_ONOFF);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_LIST);                    FocusControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY' 0);                  // set focus to the first control in our group                  PopulateSubTitles(); // populate the list control with subtitles for this video                }              }                if (iControl == (int)Controls.OSD_BOOKMARKS)              {                //not used              }                if (iControl == (int)Controls.OSD_VIDEO)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VIDEO); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  // set the controls values                  float fPercent = (float)(100 * (g_Player.CurrentPosition / g_Player.Duration));                  SetSliderValue(0.0f' 100.0f' (float)fPercent' (int)Controls.OSD_VIDEOPOS);                    bool hasPostProc = g_Player.HasPostprocessing;                  if (hasPostProc)                  {                    IPostProcessingEngine engine = PostProcessingEngine.GetInstance();                    SetCheckmarkValue(engine.EnablePostProcess' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    SetCheckmarkValue(engine.EnableResize' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    SetCheckmarkValue(engine.EnableCrop' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    SetCheckmarkValue(engine.EnableDeinterlace' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    UpdatePostProcessing();                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL_LABEL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL_LABEL);                  }                    //SetCheckmarkValue(g_stSettings.m_bNonInterleaved' Controls.OSD_NONINTERLEAVED);                  //SetCheckmarkValue(g_stSettings.m_bNoCache' Controls.OSD_NOCACHE);                  //SetCheckmarkValue(g_stSettings.m_bFrameRateConversions' Controls.OSD_ADJFRAMERATE);                    UpdateGammaContrastBrightness();                  // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_VIDEOPOS);                  ShowControl(GetID' (int)Controls.OSD_VIDEOPOS_LABEL);                  ShowControl(GetID' (int)Controls.OSD_NONINTERLEAVED);                  ShowControl(GetID' (int)Controls.OSD_NOCACHE);                  ShowControl(GetID' (int)Controls.OSD_ADJFRAMERATE);                  ShowControl(GetID' (int)Controls.OSD_SATURATIONLABEL);                  ShowControl(GetID' (int)Controls.OSD_SATURATION);                  ShowControl(GetID' (int)Controls.OSD_SHARPNESSLABEL);                  ShowControl(GetID' (int)Controls.OSD_SHARPNESS);                  ShowControl(GetID' (int)Controls.OSD_BRIGHTNESS);                  ShowControl(GetID' (int)Controls.OSD_BRIGHTNESSLABEL);                  ShowControl(GetID' (int)Controls.OSD_CONTRAST);                  ShowControl(GetID' (int)Controls.OSD_CONTRASTLABEL);                  ShowControl(GetID' (int)Controls.OSD_GAMMA);                  ShowControl(GetID' (int)Controls.OSD_GAMMALABEL);                  FocusControl(GetID' (int)Controls.OSD_VIDEOPOS' 0); // set focus to the first control in our group                }              }                if (iControl == (int)Controls.OSD_AUDIO)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_AUDIO); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  int iValue = g_Player.Volume;                  GUISliderControl pSlider = GetControl((int)Controls.OSD_AUDIOVOLUMESLIDER) as GUISliderControl;                  if (null != pSlider)                  {                    pSlider.Percentage = iValue; // Update our volume slider accordingly ...                  }                    // set the controls values                  GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_AVDELAY);                  pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                  pControl.SetRange(-20' 20);                  SetSliderValue(-20' 20' m_audioDelay' (int)Controls.OSD_AVDELAY);                    bool hasPostProc = (g_Player.HasPostprocessing || g_Player.HasAudioEngine);                  if (hasPostProc)                  {                    GUIPropertyManager.SetProperty("#TvOSD.AudioVideoDelayPossible"' "true");                    pControl.FloatInterval = 1;                  }                  else                  {                     GUIPropertyManager.SetProperty("#TvOSD.AudioVideoDelayPossible"' "false");                    pControl.FloatValue = 0;                    m_audioDelay = 0;                    pControl.FloatInterval = 0;                  }                    // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_AVDELAY);                  ShowControl(GetID' (int)Controls.OSD_AVDELAY_LABEL);                  ShowControl(GetID' (int)Controls.OSD_AUDIOSTREAM_LIST);                  ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER);                  ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER_LABEL);                    FocusControl(GetID' (int)Controls.OSD_AVDELAY' 0); // set focus to the first control in our group                  PopulateAudioStreams(); // populate the list control with audio streams for this video                }              }                return true;            }        }
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT: // fired when OSD is hidden            {              //if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(true);              // following line should stay. Problems with OSD not              // appearing are already fixed elsewhere              //for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)              //{              //  HideControl(GetID' i);              //}              Dispose();              GUIPropertyManager.SetProperty("#currentmodule"' GUIWindowManager.GetWindow(message.Param1).GetModuleName());              return true;            }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT: // fired when OSD is shown            {              // following line should stay. Problems with OSD not              // appearing are already fixed elsewhere              SqlBuilder sb = new SqlBuilder(StatementType.Select' typeof (Channel));              sb.AddConstraint(Operator.Equals' "istv"' 1);              sb.AddOrderByField(true' "sortOrder");              SqlStatement stmt = sb.GetStatement(true);              listTvChannels = ObjectFactory.GetCollection(typeof (Channel)' stmt.Execute());              GUIPropertyManager.SetProperty("#currentmodule"' GetModuleName());              previousProgram = null;              AllocResources();              // if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(false);              ResetAllControls(); // make sure the controls are positioned relevant to the OSD Y offset              isSubMenuVisible = false;              m_iActiveMenuButtonID = 0;              m_iActiveMenu = 0;              m_bNeedRefresh = false;              m_dateTime = DateTime.Now;              Reset();              FocusControl(GetID' (int)Controls.OSD_PLAY' 0); // set focus to play button by default when window is shown              ShowPrograms();              QueueAnimation(AnimationType.WindowOpen);              for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)              {                ShowControl(GetID' i);              }              if (g_Player.Paused)              {                ToggleButton((int)Controls.OSD_PLAY' true);                // make sure play button is down (so it shows the pause symbol)              }              else              {                ToggleButton((int)Controls.OSD_PLAY' false); // make sure play button is up (so it shows the play symbol)              }              m_delayInterval = MediaPortal.Player.Subtitles.SubEngine.GetInstance().DelayInterval;              if (m_delayInterval > 0)                m_subtitleDelay = MediaPortal.Player.Subtitles.SubEngine.GetInstance().Delay / m_delayInterval;              if (g_Player.HasPostprocessing)             {               m_delayIntervalAudio = PostProcessingEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = PostProcessingEngine.GetInstance().AudioDelay / m_delayIntervalAudio;               }             }             else if (g_Player.HasAudioEngine)             {               m_delayIntervalAudio = AudioPostEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = AudioPostEngine.GetInstance().AudioDelay / m_delayIntervalAudio;               }             }                g_Player.UpdateMediaInfoProperties();              GUIPropertyManager.SetProperty("#TV.View.HasTeletext"' TVHome.Card.HasTeletext.ToString());                MediaPortal.Player.VideoStreamFormat videoFormat = g_Player.GetVideoFormat();                GUIPropertyManager.SetProperty("#Play.Current.TSBitRate"'               ((float)MediaPortal.Player.g_Player.GetVideoFormat().bitrate / 1024 / 1024).ToString("0.00"' CultureInfo.InvariantCulture));                GUIPropertyManager.SetProperty("#TV.TuningDetails.SignalLevel"' TVHome.Card.SignalLevel.ToString());              GUIPropertyManager.SetProperty("#TV.TuningDetails.SignalQuality"' TVHome.Card.SignalQuality.ToString());                GUIPropertyManager.SetProperty("#Play.Current.VideoFormat.RawResolution"'                videoFormat.width.ToString() + "x" + videoFormat.height.ToString());                GUIPropertyManager.SetProperty("#TV.TuningDetails.FreeToAir"' string.Empty);                Channel chan = TVHome.Navigator.Channel;              if (chan != null)              {                IList<TuningDetail> details = chan.ReferringTuningDetail();                if (details.Count > 0)                {                  TuningDetail detail = null;                  switch (TVHome.Card.Type)                  {                    case TvLibrary.Interfaces.CardType.Analog:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 0)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.Atsc:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 1)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbC:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 2)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbS:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 3)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbT:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 4)                          detail = t;                      }                      break;                    default:                      detail = details[0];                      break;                  }                  if (detail != null)                  {                    GUIPropertyManager.SetProperty("#TV.TuningDetails.FreeToAir"' detail.FreeToAir.ToString());                  }                }              }            }            return true;            case GUIMessage.MessageType.GUI_MSG_SETFOCUS:            goto case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS;            case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS:            {              if (message.SenderControlId == 13)              {                return true;              }            }            break;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId; // get the ID of the control sending us a message                if (btnChannelUp != null && iControl == btnChannelUp.GetID)              {                OnNextChannel();              }                if (btnChannelDown != null && iControl == btnChannelDown.GetID)              {                OnPreviousChannel();              }                if (!g_Player.IsTVRecording)              {                if (btnPreviousProgram != null && iControl == btnPreviousProgram.GetID)                {                  Program prog = GetChannel().GetProgramAt(m_dateTime);                  if (prog != null)                  {                    prog =                      GetChannel().GetProgramAt(                        prog.StartTime.Subtract(new TimeSpan(0' 1' 0)));                    if (prog != null)                    {                      m_dateTime = prog.StartTime.AddMinutes(1);                    }                  }                  ShowPrograms();                }                if (iControl == btnNextProgram.GetID)                {                  Program prog = GetChannel().GetProgramAt(m_dateTime);                  if (prog != null)                  {                    prog = GetChannel().GetProgramAt(prog.EndTime.AddMinutes(+1));                    if (prog != null)                    {                      m_dateTime = prog.StartTime.AddMinutes(1);                    }                  }                  ShowPrograms();                }              }                if (iControl >= (int)Controls.OSD_VOLUMESLIDER)                // one of the settings (sub menu) controls is sending us a message              {                Handle_ControlSetting(iControl' message.Param1);              }                if (iControl == (int)Controls.OSD_PAUSE)              {                if (g_Player.Paused)                {                  ToggleButton((int)Controls.OSD_PLAY' true);                  // make sure play button is down (so it shows the pause symbol)                                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_PLAY' false);                  // make sure play button is up (so it shows the play symbol)                  if (g_Player.Speed < 1) // are we not playing back at normal speed                  {                    ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                    ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  }                  else                  {                    ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                    if (g_Player.Speed == 1)                    {                      ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                    }                  }                }              }                if (iControl == (int)Controls.OSD_PLAY)              {                //TODO                int iSpeed = g_Player.Speed;                if (iSpeed != 1) // we're in ffwd or rewind mode                {                  g_Player.Speed = 1; // drop back to single speed                  ToggleButton((int)Controls.OSD_REWIND' false); // pop all the relevant                  ToggleButton((int)Controls.OSD_FFWD' false); // buttons back to                  ToggleButton((int)Controls.OSD_PLAY' false); // their up state                }                else                {                  g_Player.Pause(); // Pause/Un-Pause playback                  if (g_Player.Paused)                  {                    ToggleButton((int)Controls.OSD_PLAY' true);                    // make sure play button is down (so it shows the pause symbol)                  }                  else                  {                    ToggleButton((int)Controls.OSD_PLAY' false);                    // make sure play button is up (so it shows the play symbol)                  }                }              }                if (iControl == (int)Controls.OSD_STOP)              {                if (isSubMenuVisible) // sub menu currently active ?                {                  FocusControl(GetID' m_iActiveMenuButtonID' 0); // set focus to last menu button                  ToggleSubMenu(0' m_iActiveMenu); // hide the currently active sub-menu                }                //g_application.m_guiWindowFullScreen.m_bOSDVisible = false;	// toggle the OSD off so parent window can de-init                Log.Debug("TVOSD:stop");                if (TVHome.Card.IsRecording)                {                  int id = TVHome.Card.RecordingScheduleId;                  if (id > 0)                  {                    TVHome.TvServer.StopRecordingSchedule(id);                  }                }                //GUIWindowManager.ShowPreviousWindow();							// go back to the previous window              }                if (iControl == (int)Controls.OSD_REWIND)              {                if (g_Player.Paused)                {                  g_Player.Pause(); // Unpause playback                }                  if (g_Player.Speed < 1) // are we not playing back at normal speed                {                  ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                  if (g_Player.Speed == 1)                  {                    ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  }                }              }                if (iControl == (int)Controls.OSD_FFWD)              {                if (g_Player.Paused)                {                  g_Player.Pause(); // Unpause playback                }                  if (g_Player.Speed > 1) // are we not playing back at normal speed                {                  ToggleButton((int)Controls.OSD_FFWD' true); // make sure out button is in the down position                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  if (g_Player.Speed == 1)                  {                    ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                  }                }              }                if (iControl == (int)Controls.OSD_SKIPBWD)              {                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(-_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(-_immediateSeekValue);                }                ToggleButton((int)Controls.OSD_SKIPBWD' false); // pop the button back to it's up state              }                if (iControl == (int)Controls.OSD_SKIPFWD)              {                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(_immediateSeekValue);                }                ToggleButton((int)Controls.OSD_SKIPFWD' false); // pop the button back to it's up state              }                if (iControl == (int)Controls.OSD_MUTE)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VOL); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  int iValue = g_Player.Volume;                  GUISliderControl pSlider = GetControl((int)Controls.OSD_VOLUMESLIDER) as GUISliderControl;                  if (null != pSlider)                  {                    pSlider.Percentage = iValue; // Update our volume slider accordingly ...                  }                  ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER); // show the volume control                  ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER_LABEL);                  FocusControl(GetID' (int)Controls.OSD_VOLUMESLIDER' 0); // set focus to it                }                else // sub menu is off                {                  FocusControl(GetID' (int)Controls.OSD_MUTE' 0); // set focus to the mute button                }              }                if (iControl == (int)Controls.OSD_SUBTITLES)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_SUBTITLES); // hide or show the sub-menu                if (isSubMenuVisible)                {                  // set the controls values                  GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_SUBTITLE_DELAY);                  pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                  pControl.FloatInterval = 1;                  pControl.SetRange(-10' 10);                  SetSliderValue(-10' 10' m_subtitleDelay' (int)Controls.OSD_SUBTITLE_DELAY);                  SetCheckmarkValue(g_Player.EnableSubtitle' (int)Controls.OSD_SUBTITLE_ONOFF);                  // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY_LABEL);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_ONOFF);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_LIST);                    FocusControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY' 0);                  // set focus to the first control in our group                  PopulateSubTitles(); // populate the list control with subtitles for this video                }              }                if (iControl == (int)Controls.OSD_BOOKMARKS)              {                //not used              }                if (iControl == (int)Controls.OSD_VIDEO)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VIDEO); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  // set the controls values                  float fPercent = (float)(100 * (g_Player.CurrentPosition / g_Player.Duration));                  SetSliderValue(0.0f' 100.0f' (float)fPercent' (int)Controls.OSD_VIDEOPOS);                    bool hasPostProc = g_Player.HasPostprocessing;                  if (hasPostProc)                  {                    IPostProcessingEngine engine = PostProcessingEngine.GetInstance();                    SetCheckmarkValue(engine.EnablePostProcess' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    SetCheckmarkValue(engine.EnableResize' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    SetCheckmarkValue(engine.EnableCrop' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    SetCheckmarkValue(engine.EnableDeinterlace' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    UpdatePostProcessing();                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL_LABEL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL_LABEL);                  }                    //SetCheckmarkValue(g_stSettings.m_bNonInterleaved' Controls.OSD_NONINTERLEAVED);                  //SetCheckmarkValue(g_stSettings.m_bNoCache' Controls.OSD_NOCACHE);                  //SetCheckmarkValue(g_stSettings.m_bFrameRateConversions' Controls.OSD_ADJFRAMERATE);                    UpdateGammaContrastBrightness();                  // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_VIDEOPOS);                  ShowControl(GetID' (int)Controls.OSD_VIDEOPOS_LABEL);                  ShowControl(GetID' (int)Controls.OSD_NONINTERLEAVED);                  ShowControl(GetID' (int)Controls.OSD_NOCACHE);                  ShowControl(GetID' (int)Controls.OSD_ADJFRAMERATE);                  ShowControl(GetID' (int)Controls.OSD_SATURATIONLABEL);                  ShowControl(GetID' (int)Controls.OSD_SATURATION);                  ShowControl(GetID' (int)Controls.OSD_SHARPNESSLABEL);                  ShowControl(GetID' (int)Controls.OSD_SHARPNESS);                  ShowControl(GetID' (int)Controls.OSD_BRIGHTNESS);                  ShowControl(GetID' (int)Controls.OSD_BRIGHTNESSLABEL);                  ShowControl(GetID' (int)Controls.OSD_CONTRAST);                  ShowControl(GetID' (int)Controls.OSD_CONTRASTLABEL);                  ShowControl(GetID' (int)Controls.OSD_GAMMA);                  ShowControl(GetID' (int)Controls.OSD_GAMMALABEL);                  FocusControl(GetID' (int)Controls.OSD_VIDEOPOS' 0); // set focus to the first control in our group                }              }                if (iControl == (int)Controls.OSD_AUDIO)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_AUDIO); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  int iValue = g_Player.Volume;                  GUISliderControl pSlider = GetControl((int)Controls.OSD_AUDIOVOLUMESLIDER) as GUISliderControl;                  if (null != pSlider)                  {                    pSlider.Percentage = iValue; // Update our volume slider accordingly ...                  }                    // set the controls values                  GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_AVDELAY);                  pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                  pControl.SetRange(-20' 20);                  SetSliderValue(-20' 20' m_audioDelay' (int)Controls.OSD_AVDELAY);                    bool hasPostProc = (g_Player.HasPostprocessing || g_Player.HasAudioEngine);                  if (hasPostProc)                  {                    GUIPropertyManager.SetProperty("#TvOSD.AudioVideoDelayPossible"' "true");                    pControl.FloatInterval = 1;                  }                  else                  {                     GUIPropertyManager.SetProperty("#TvOSD.AudioVideoDelayPossible"' "false");                    pControl.FloatValue = 0;                    m_audioDelay = 0;                    pControl.FloatInterval = 0;                  }                    // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_AVDELAY);                  ShowControl(GetID' (int)Controls.OSD_AVDELAY_LABEL);                  ShowControl(GetID' (int)Controls.OSD_AUDIOSTREAM_LIST);                  ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER);                  ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER_LABEL);                    FocusControl(GetID' (int)Controls.OSD_AVDELAY' 0); // set focus to the first control in our group                  PopulateAudioStreams(); // populate the list control with audio streams for this video                }              }                return true;            }        }
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT: // fired when OSD is hidden            {              //if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(true);              // following line should stay. Problems with OSD not              // appearing are already fixed elsewhere              //for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)              //{              //  HideControl(GetID' i);              //}              Dispose();              GUIPropertyManager.SetProperty("#currentmodule"' GUIWindowManager.GetWindow(message.Param1).GetModuleName());              return true;            }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT: // fired when OSD is shown            {              // following line should stay. Problems with OSD not              // appearing are already fixed elsewhere              SqlBuilder sb = new SqlBuilder(StatementType.Select' typeof (Channel));              sb.AddConstraint(Operator.Equals' "istv"' 1);              sb.AddOrderByField(true' "sortOrder");              SqlStatement stmt = sb.GetStatement(true);              listTvChannels = ObjectFactory.GetCollection(typeof (Channel)' stmt.Execute());              GUIPropertyManager.SetProperty("#currentmodule"' GetModuleName());              previousProgram = null;              AllocResources();              // if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(false);              ResetAllControls(); // make sure the controls are positioned relevant to the OSD Y offset              isSubMenuVisible = false;              m_iActiveMenuButtonID = 0;              m_iActiveMenu = 0;              m_bNeedRefresh = false;              m_dateTime = DateTime.Now;              Reset();              FocusControl(GetID' (int)Controls.OSD_PLAY' 0); // set focus to play button by default when window is shown              ShowPrograms();              QueueAnimation(AnimationType.WindowOpen);              for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)              {                ShowControl(GetID' i);              }              if (g_Player.Paused)              {                ToggleButton((int)Controls.OSD_PLAY' true);                // make sure play button is down (so it shows the pause symbol)              }              else              {                ToggleButton((int)Controls.OSD_PLAY' false); // make sure play button is up (so it shows the play symbol)              }              m_delayInterval = MediaPortal.Player.Subtitles.SubEngine.GetInstance().DelayInterval;              if (m_delayInterval > 0)                m_subtitleDelay = MediaPortal.Player.Subtitles.SubEngine.GetInstance().Delay / m_delayInterval;              if (g_Player.HasPostprocessing)             {               m_delayIntervalAudio = PostProcessingEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = PostProcessingEngine.GetInstance().AudioDelay / m_delayIntervalAudio;               }             }             else if (g_Player.HasAudioEngine)             {               m_delayIntervalAudio = AudioPostEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = AudioPostEngine.GetInstance().AudioDelay / m_delayIntervalAudio;               }             }                g_Player.UpdateMediaInfoProperties();              GUIPropertyManager.SetProperty("#TV.View.HasTeletext"' TVHome.Card.HasTeletext.ToString());                MediaPortal.Player.VideoStreamFormat videoFormat = g_Player.GetVideoFormat();                GUIPropertyManager.SetProperty("#Play.Current.TSBitRate"'               ((float)MediaPortal.Player.g_Player.GetVideoFormat().bitrate / 1024 / 1024).ToString("0.00"' CultureInfo.InvariantCulture));                GUIPropertyManager.SetProperty("#TV.TuningDetails.SignalLevel"' TVHome.Card.SignalLevel.ToString());              GUIPropertyManager.SetProperty("#TV.TuningDetails.SignalQuality"' TVHome.Card.SignalQuality.ToString());                GUIPropertyManager.SetProperty("#Play.Current.VideoFormat.RawResolution"'                videoFormat.width.ToString() + "x" + videoFormat.height.ToString());                GUIPropertyManager.SetProperty("#TV.TuningDetails.FreeToAir"' string.Empty);                Channel chan = TVHome.Navigator.Channel;              if (chan != null)              {                IList<TuningDetail> details = chan.ReferringTuningDetail();                if (details.Count > 0)                {                  TuningDetail detail = null;                  switch (TVHome.Card.Type)                  {                    case TvLibrary.Interfaces.CardType.Analog:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 0)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.Atsc:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 1)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbC:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 2)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbS:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 3)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbT:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 4)                          detail = t;                      }                      break;                    default:                      detail = details[0];                      break;                  }                  if (detail != null)                  {                    GUIPropertyManager.SetProperty("#TV.TuningDetails.FreeToAir"' detail.FreeToAir.ToString());                  }                }              }            }            return true;            case GUIMessage.MessageType.GUI_MSG_SETFOCUS:            goto case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS;            case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS:            {              if (message.SenderControlId == 13)              {                return true;              }            }            break;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId; // get the ID of the control sending us a message                if (btnChannelUp != null && iControl == btnChannelUp.GetID)              {                OnNextChannel();              }                if (btnChannelDown != null && iControl == btnChannelDown.GetID)              {                OnPreviousChannel();              }                if (!g_Player.IsTVRecording)              {                if (btnPreviousProgram != null && iControl == btnPreviousProgram.GetID)                {                  Program prog = GetChannel().GetProgramAt(m_dateTime);                  if (prog != null)                  {                    prog =                      GetChannel().GetProgramAt(                        prog.StartTime.Subtract(new TimeSpan(0' 1' 0)));                    if (prog != null)                    {                      m_dateTime = prog.StartTime.AddMinutes(1);                    }                  }                  ShowPrograms();                }                if (iControl == btnNextProgram.GetID)                {                  Program prog = GetChannel().GetProgramAt(m_dateTime);                  if (prog != null)                  {                    prog = GetChannel().GetProgramAt(prog.EndTime.AddMinutes(+1));                    if (prog != null)                    {                      m_dateTime = prog.StartTime.AddMinutes(1);                    }                  }                  ShowPrograms();                }              }                if (iControl >= (int)Controls.OSD_VOLUMESLIDER)                // one of the settings (sub menu) controls is sending us a message              {                Handle_ControlSetting(iControl' message.Param1);              }                if (iControl == (int)Controls.OSD_PAUSE)              {                if (g_Player.Paused)                {                  ToggleButton((int)Controls.OSD_PLAY' true);                  // make sure play button is down (so it shows the pause symbol)                                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_PLAY' false);                  // make sure play button is up (so it shows the play symbol)                  if (g_Player.Speed < 1) // are we not playing back at normal speed                  {                    ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                    ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  }                  else                  {                    ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                    if (g_Player.Speed == 1)                    {                      ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                    }                  }                }              }                if (iControl == (int)Controls.OSD_PLAY)              {                //TODO                int iSpeed = g_Player.Speed;                if (iSpeed != 1) // we're in ffwd or rewind mode                {                  g_Player.Speed = 1; // drop back to single speed                  ToggleButton((int)Controls.OSD_REWIND' false); // pop all the relevant                  ToggleButton((int)Controls.OSD_FFWD' false); // buttons back to                  ToggleButton((int)Controls.OSD_PLAY' false); // their up state                }                else                {                  g_Player.Pause(); // Pause/Un-Pause playback                  if (g_Player.Paused)                  {                    ToggleButton((int)Controls.OSD_PLAY' true);                    // make sure play button is down (so it shows the pause symbol)                  }                  else                  {                    ToggleButton((int)Controls.OSD_PLAY' false);                    // make sure play button is up (so it shows the play symbol)                  }                }              }                if (iControl == (int)Controls.OSD_STOP)              {                if (isSubMenuVisible) // sub menu currently active ?                {                  FocusControl(GetID' m_iActiveMenuButtonID' 0); // set focus to last menu button                  ToggleSubMenu(0' m_iActiveMenu); // hide the currently active sub-menu                }                //g_application.m_guiWindowFullScreen.m_bOSDVisible = false;	// toggle the OSD off so parent window can de-init                Log.Debug("TVOSD:stop");                if (TVHome.Card.IsRecording)                {                  int id = TVHome.Card.RecordingScheduleId;                  if (id > 0)                  {                    TVHome.TvServer.StopRecordingSchedule(id);                  }                }                //GUIWindowManager.ShowPreviousWindow();							// go back to the previous window              }                if (iControl == (int)Controls.OSD_REWIND)              {                if (g_Player.Paused)                {                  g_Player.Pause(); // Unpause playback                }                  if (g_Player.Speed < 1) // are we not playing back at normal speed                {                  ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                  if (g_Player.Speed == 1)                  {                    ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  }                }              }                if (iControl == (int)Controls.OSD_FFWD)              {                if (g_Player.Paused)                {                  g_Player.Pause(); // Unpause playback                }                  if (g_Player.Speed > 1) // are we not playing back at normal speed                {                  ToggleButton((int)Controls.OSD_FFWD' true); // make sure out button is in the down position                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  if (g_Player.Speed == 1)                  {                    ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                  }                }              }                if (iControl == (int)Controls.OSD_SKIPBWD)              {                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(-_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(-_immediateSeekValue);                }                ToggleButton((int)Controls.OSD_SKIPBWD' false); // pop the button back to it's up state              }                if (iControl == (int)Controls.OSD_SKIPFWD)              {                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(_immediateSeekValue);                }                ToggleButton((int)Controls.OSD_SKIPFWD' false); // pop the button back to it's up state              }                if (iControl == (int)Controls.OSD_MUTE)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VOL); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  int iValue = g_Player.Volume;                  GUISliderControl pSlider = GetControl((int)Controls.OSD_VOLUMESLIDER) as GUISliderControl;                  if (null != pSlider)                  {                    pSlider.Percentage = iValue; // Update our volume slider accordingly ...                  }                  ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER); // show the volume control                  ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER_LABEL);                  FocusControl(GetID' (int)Controls.OSD_VOLUMESLIDER' 0); // set focus to it                }                else // sub menu is off                {                  FocusControl(GetID' (int)Controls.OSD_MUTE' 0); // set focus to the mute button                }              }                if (iControl == (int)Controls.OSD_SUBTITLES)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_SUBTITLES); // hide or show the sub-menu                if (isSubMenuVisible)                {                  // set the controls values                  GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_SUBTITLE_DELAY);                  pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                  pControl.FloatInterval = 1;                  pControl.SetRange(-10' 10);                  SetSliderValue(-10' 10' m_subtitleDelay' (int)Controls.OSD_SUBTITLE_DELAY);                  SetCheckmarkValue(g_Player.EnableSubtitle' (int)Controls.OSD_SUBTITLE_ONOFF);                  // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY_LABEL);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_ONOFF);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_LIST);                    FocusControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY' 0);                  // set focus to the first control in our group                  PopulateSubTitles(); // populate the list control with subtitles for this video                }              }                if (iControl == (int)Controls.OSD_BOOKMARKS)              {                //not used              }                if (iControl == (int)Controls.OSD_VIDEO)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VIDEO); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  // set the controls values                  float fPercent = (float)(100 * (g_Player.CurrentPosition / g_Player.Duration));                  SetSliderValue(0.0f' 100.0f' (float)fPercent' (int)Controls.OSD_VIDEOPOS);                    bool hasPostProc = g_Player.HasPostprocessing;                  if (hasPostProc)                  {                    IPostProcessingEngine engine = PostProcessingEngine.GetInstance();                    SetCheckmarkValue(engine.EnablePostProcess' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    SetCheckmarkValue(engine.EnableResize' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    SetCheckmarkValue(engine.EnableCrop' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    SetCheckmarkValue(engine.EnableDeinterlace' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    UpdatePostProcessing();                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL_LABEL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL_LABEL);                  }                    //SetCheckmarkValue(g_stSettings.m_bNonInterleaved' Controls.OSD_NONINTERLEAVED);                  //SetCheckmarkValue(g_stSettings.m_bNoCache' Controls.OSD_NOCACHE);                  //SetCheckmarkValue(g_stSettings.m_bFrameRateConversions' Controls.OSD_ADJFRAMERATE);                    UpdateGammaContrastBrightness();                  // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_VIDEOPOS);                  ShowControl(GetID' (int)Controls.OSD_VIDEOPOS_LABEL);                  ShowControl(GetID' (int)Controls.OSD_NONINTERLEAVED);                  ShowControl(GetID' (int)Controls.OSD_NOCACHE);                  ShowControl(GetID' (int)Controls.OSD_ADJFRAMERATE);                  ShowControl(GetID' (int)Controls.OSD_SATURATIONLABEL);                  ShowControl(GetID' (int)Controls.OSD_SATURATION);                  ShowControl(GetID' (int)Controls.OSD_SHARPNESSLABEL);                  ShowControl(GetID' (int)Controls.OSD_SHARPNESS);                  ShowControl(GetID' (int)Controls.OSD_BRIGHTNESS);                  ShowControl(GetID' (int)Controls.OSD_BRIGHTNESSLABEL);                  ShowControl(GetID' (int)Controls.OSD_CONTRAST);                  ShowControl(GetID' (int)Controls.OSD_CONTRASTLABEL);                  ShowControl(GetID' (int)Controls.OSD_GAMMA);                  ShowControl(GetID' (int)Controls.OSD_GAMMALABEL);                  FocusControl(GetID' (int)Controls.OSD_VIDEOPOS' 0); // set focus to the first control in our group                }              }                if (iControl == (int)Controls.OSD_AUDIO)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_AUDIO); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  int iValue = g_Player.Volume;                  GUISliderControl pSlider = GetControl((int)Controls.OSD_AUDIOVOLUMESLIDER) as GUISliderControl;                  if (null != pSlider)                  {                    pSlider.Percentage = iValue; // Update our volume slider accordingly ...                  }                    // set the controls values                  GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_AVDELAY);                  pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                  pControl.SetRange(-20' 20);                  SetSliderValue(-20' 20' m_audioDelay' (int)Controls.OSD_AVDELAY);                    bool hasPostProc = (g_Player.HasPostprocessing || g_Player.HasAudioEngine);                  if (hasPostProc)                  {                    GUIPropertyManager.SetProperty("#TvOSD.AudioVideoDelayPossible"' "true");                    pControl.FloatInterval = 1;                  }                  else                  {                     GUIPropertyManager.SetProperty("#TvOSD.AudioVideoDelayPossible"' "false");                    pControl.FloatValue = 0;                    m_audioDelay = 0;                    pControl.FloatInterval = 0;                  }                    // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_AVDELAY);                  ShowControl(GetID' (int)Controls.OSD_AVDELAY_LABEL);                  ShowControl(GetID' (int)Controls.OSD_AUDIOSTREAM_LIST);                  ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER);                  ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER_LABEL);                    FocusControl(GetID' (int)Controls.OSD_AVDELAY' 0); // set focus to the first control in our group                  PopulateAudioStreams(); // populate the list control with audio streams for this video                }              }                return true;            }        }
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT: // fired when OSD is hidden            {              //if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(true);              // following line should stay. Problems with OSD not              // appearing are already fixed elsewhere              //for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)              //{              //  HideControl(GetID' i);              //}              Dispose();              GUIPropertyManager.SetProperty("#currentmodule"' GUIWindowManager.GetWindow(message.Param1).GetModuleName());              return true;            }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT: // fired when OSD is shown            {              // following line should stay. Problems with OSD not              // appearing are already fixed elsewhere              SqlBuilder sb = new SqlBuilder(StatementType.Select' typeof (Channel));              sb.AddConstraint(Operator.Equals' "istv"' 1);              sb.AddOrderByField(true' "sortOrder");              SqlStatement stmt = sb.GetStatement(true);              listTvChannels = ObjectFactory.GetCollection(typeof (Channel)' stmt.Execute());              GUIPropertyManager.SetProperty("#currentmodule"' GetModuleName());              previousProgram = null;              AllocResources();              // if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(false);              ResetAllControls(); // make sure the controls are positioned relevant to the OSD Y offset              isSubMenuVisible = false;              m_iActiveMenuButtonID = 0;              m_iActiveMenu = 0;              m_bNeedRefresh = false;              m_dateTime = DateTime.Now;              Reset();              FocusControl(GetID' (int)Controls.OSD_PLAY' 0); // set focus to play button by default when window is shown              ShowPrograms();              QueueAnimation(AnimationType.WindowOpen);              for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)              {                ShowControl(GetID' i);              }              if (g_Player.Paused)              {                ToggleButton((int)Controls.OSD_PLAY' true);                // make sure play button is down (so it shows the pause symbol)              }              else              {                ToggleButton((int)Controls.OSD_PLAY' false); // make sure play button is up (so it shows the play symbol)              }              m_delayInterval = MediaPortal.Player.Subtitles.SubEngine.GetInstance().DelayInterval;              if (m_delayInterval > 0)                m_subtitleDelay = MediaPortal.Player.Subtitles.SubEngine.GetInstance().Delay / m_delayInterval;              if (g_Player.HasPostprocessing)             {               m_delayIntervalAudio = PostProcessingEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = PostProcessingEngine.GetInstance().AudioDelay / m_delayIntervalAudio;               }             }             else if (g_Player.HasAudioEngine)             {               m_delayIntervalAudio = AudioPostEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = AudioPostEngine.GetInstance().AudioDelay / m_delayIntervalAudio;               }             }                g_Player.UpdateMediaInfoProperties();              GUIPropertyManager.SetProperty("#TV.View.HasTeletext"' TVHome.Card.HasTeletext.ToString());                MediaPortal.Player.VideoStreamFormat videoFormat = g_Player.GetVideoFormat();                GUIPropertyManager.SetProperty("#Play.Current.TSBitRate"'               ((float)MediaPortal.Player.g_Player.GetVideoFormat().bitrate / 1024 / 1024).ToString("0.00"' CultureInfo.InvariantCulture));                GUIPropertyManager.SetProperty("#TV.TuningDetails.SignalLevel"' TVHome.Card.SignalLevel.ToString());              GUIPropertyManager.SetProperty("#TV.TuningDetails.SignalQuality"' TVHome.Card.SignalQuality.ToString());                GUIPropertyManager.SetProperty("#Play.Current.VideoFormat.RawResolution"'                videoFormat.width.ToString() + "x" + videoFormat.height.ToString());                GUIPropertyManager.SetProperty("#TV.TuningDetails.FreeToAir"' string.Empty);                Channel chan = TVHome.Navigator.Channel;              if (chan != null)              {                IList<TuningDetail> details = chan.ReferringTuningDetail();                if (details.Count > 0)                {                  TuningDetail detail = null;                  switch (TVHome.Card.Type)                  {                    case TvLibrary.Interfaces.CardType.Analog:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 0)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.Atsc:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 1)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbC:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 2)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbS:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 3)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbT:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 4)                          detail = t;                      }                      break;                    default:                      detail = details[0];                      break;                  }                  if (detail != null)                  {                    GUIPropertyManager.SetProperty("#TV.TuningDetails.FreeToAir"' detail.FreeToAir.ToString());                  }                }              }            }            return true;            case GUIMessage.MessageType.GUI_MSG_SETFOCUS:            goto case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS;            case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS:            {              if (message.SenderControlId == 13)              {                return true;              }            }            break;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId; // get the ID of the control sending us a message                if (btnChannelUp != null && iControl == btnChannelUp.GetID)              {                OnNextChannel();              }                if (btnChannelDown != null && iControl == btnChannelDown.GetID)              {                OnPreviousChannel();              }                if (!g_Player.IsTVRecording)              {                if (btnPreviousProgram != null && iControl == btnPreviousProgram.GetID)                {                  Program prog = GetChannel().GetProgramAt(m_dateTime);                  if (prog != null)                  {                    prog =                      GetChannel().GetProgramAt(                        prog.StartTime.Subtract(new TimeSpan(0' 1' 0)));                    if (prog != null)                    {                      m_dateTime = prog.StartTime.AddMinutes(1);                    }                  }                  ShowPrograms();                }                if (iControl == btnNextProgram.GetID)                {                  Program prog = GetChannel().GetProgramAt(m_dateTime);                  if (prog != null)                  {                    prog = GetChannel().GetProgramAt(prog.EndTime.AddMinutes(+1));                    if (prog != null)                    {                      m_dateTime = prog.StartTime.AddMinutes(1);                    }                  }                  ShowPrograms();                }              }                if (iControl >= (int)Controls.OSD_VOLUMESLIDER)                // one of the settings (sub menu) controls is sending us a message              {                Handle_ControlSetting(iControl' message.Param1);              }                if (iControl == (int)Controls.OSD_PAUSE)              {                if (g_Player.Paused)                {                  ToggleButton((int)Controls.OSD_PLAY' true);                  // make sure play button is down (so it shows the pause symbol)                                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_PLAY' false);                  // make sure play button is up (so it shows the play symbol)                  if (g_Player.Speed < 1) // are we not playing back at normal speed                  {                    ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                    ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  }                  else                  {                    ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                    if (g_Player.Speed == 1)                    {                      ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                    }                  }                }              }                if (iControl == (int)Controls.OSD_PLAY)              {                //TODO                int iSpeed = g_Player.Speed;                if (iSpeed != 1) // we're in ffwd or rewind mode                {                  g_Player.Speed = 1; // drop back to single speed                  ToggleButton((int)Controls.OSD_REWIND' false); // pop all the relevant                  ToggleButton((int)Controls.OSD_FFWD' false); // buttons back to                  ToggleButton((int)Controls.OSD_PLAY' false); // their up state                }                else                {                  g_Player.Pause(); // Pause/Un-Pause playback                  if (g_Player.Paused)                  {                    ToggleButton((int)Controls.OSD_PLAY' true);                    // make sure play button is down (so it shows the pause symbol)                  }                  else                  {                    ToggleButton((int)Controls.OSD_PLAY' false);                    // make sure play button is up (so it shows the play symbol)                  }                }              }                if (iControl == (int)Controls.OSD_STOP)              {                if (isSubMenuVisible) // sub menu currently active ?                {                  FocusControl(GetID' m_iActiveMenuButtonID' 0); // set focus to last menu button                  ToggleSubMenu(0' m_iActiveMenu); // hide the currently active sub-menu                }                //g_application.m_guiWindowFullScreen.m_bOSDVisible = false;	// toggle the OSD off so parent window can de-init                Log.Debug("TVOSD:stop");                if (TVHome.Card.IsRecording)                {                  int id = TVHome.Card.RecordingScheduleId;                  if (id > 0)                  {                    TVHome.TvServer.StopRecordingSchedule(id);                  }                }                //GUIWindowManager.ShowPreviousWindow();							// go back to the previous window              }                if (iControl == (int)Controls.OSD_REWIND)              {                if (g_Player.Paused)                {                  g_Player.Pause(); // Unpause playback                }                  if (g_Player.Speed < 1) // are we not playing back at normal speed                {                  ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                  if (g_Player.Speed == 1)                  {                    ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  }                }              }                if (iControl == (int)Controls.OSD_FFWD)              {                if (g_Player.Paused)                {                  g_Player.Pause(); // Unpause playback                }                  if (g_Player.Speed > 1) // are we not playing back at normal speed                {                  ToggleButton((int)Controls.OSD_FFWD' true); // make sure out button is in the down position                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  if (g_Player.Speed == 1)                  {                    ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                  }                }              }                if (iControl == (int)Controls.OSD_SKIPBWD)              {                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(-_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(-_immediateSeekValue);                }                ToggleButton((int)Controls.OSD_SKIPBWD' false); // pop the button back to it's up state              }                if (iControl == (int)Controls.OSD_SKIPFWD)              {                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(_immediateSeekValue);                }                ToggleButton((int)Controls.OSD_SKIPFWD' false); // pop the button back to it's up state              }                if (iControl == (int)Controls.OSD_MUTE)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VOL); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  int iValue = g_Player.Volume;                  GUISliderControl pSlider = GetControl((int)Controls.OSD_VOLUMESLIDER) as GUISliderControl;                  if (null != pSlider)                  {                    pSlider.Percentage = iValue; // Update our volume slider accordingly ...                  }                  ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER); // show the volume control                  ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER_LABEL);                  FocusControl(GetID' (int)Controls.OSD_VOLUMESLIDER' 0); // set focus to it                }                else // sub menu is off                {                  FocusControl(GetID' (int)Controls.OSD_MUTE' 0); // set focus to the mute button                }              }                if (iControl == (int)Controls.OSD_SUBTITLES)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_SUBTITLES); // hide or show the sub-menu                if (isSubMenuVisible)                {                  // set the controls values                  GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_SUBTITLE_DELAY);                  pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                  pControl.FloatInterval = 1;                  pControl.SetRange(-10' 10);                  SetSliderValue(-10' 10' m_subtitleDelay' (int)Controls.OSD_SUBTITLE_DELAY);                  SetCheckmarkValue(g_Player.EnableSubtitle' (int)Controls.OSD_SUBTITLE_ONOFF);                  // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY_LABEL);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_ONOFF);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_LIST);                    FocusControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY' 0);                  // set focus to the first control in our group                  PopulateSubTitles(); // populate the list control with subtitles for this video                }              }                if (iControl == (int)Controls.OSD_BOOKMARKS)              {                //not used              }                if (iControl == (int)Controls.OSD_VIDEO)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VIDEO); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  // set the controls values                  float fPercent = (float)(100 * (g_Player.CurrentPosition / g_Player.Duration));                  SetSliderValue(0.0f' 100.0f' (float)fPercent' (int)Controls.OSD_VIDEOPOS);                    bool hasPostProc = g_Player.HasPostprocessing;                  if (hasPostProc)                  {                    IPostProcessingEngine engine = PostProcessingEngine.GetInstance();                    SetCheckmarkValue(engine.EnablePostProcess' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    SetCheckmarkValue(engine.EnableResize' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    SetCheckmarkValue(engine.EnableCrop' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    SetCheckmarkValue(engine.EnableDeinterlace' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    UpdatePostProcessing();                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL_LABEL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL_LABEL);                  }                    //SetCheckmarkValue(g_stSettings.m_bNonInterleaved' Controls.OSD_NONINTERLEAVED);                  //SetCheckmarkValue(g_stSettings.m_bNoCache' Controls.OSD_NOCACHE);                  //SetCheckmarkValue(g_stSettings.m_bFrameRateConversions' Controls.OSD_ADJFRAMERATE);                    UpdateGammaContrastBrightness();                  // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_VIDEOPOS);                  ShowControl(GetID' (int)Controls.OSD_VIDEOPOS_LABEL);                  ShowControl(GetID' (int)Controls.OSD_NONINTERLEAVED);                  ShowControl(GetID' (int)Controls.OSD_NOCACHE);                  ShowControl(GetID' (int)Controls.OSD_ADJFRAMERATE);                  ShowControl(GetID' (int)Controls.OSD_SATURATIONLABEL);                  ShowControl(GetID' (int)Controls.OSD_SATURATION);                  ShowControl(GetID' (int)Controls.OSD_SHARPNESSLABEL);                  ShowControl(GetID' (int)Controls.OSD_SHARPNESS);                  ShowControl(GetID' (int)Controls.OSD_BRIGHTNESS);                  ShowControl(GetID' (int)Controls.OSD_BRIGHTNESSLABEL);                  ShowControl(GetID' (int)Controls.OSD_CONTRAST);                  ShowControl(GetID' (int)Controls.OSD_CONTRASTLABEL);                  ShowControl(GetID' (int)Controls.OSD_GAMMA);                  ShowControl(GetID' (int)Controls.OSD_GAMMALABEL);                  FocusControl(GetID' (int)Controls.OSD_VIDEOPOS' 0); // set focus to the first control in our group                }              }                if (iControl == (int)Controls.OSD_AUDIO)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_AUDIO); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  int iValue = g_Player.Volume;                  GUISliderControl pSlider = GetControl((int)Controls.OSD_AUDIOVOLUMESLIDER) as GUISliderControl;                  if (null != pSlider)                  {                    pSlider.Percentage = iValue; // Update our volume slider accordingly ...                  }                    // set the controls values                  GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_AVDELAY);                  pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                  pControl.SetRange(-20' 20);                  SetSliderValue(-20' 20' m_audioDelay' (int)Controls.OSD_AVDELAY);                    bool hasPostProc = (g_Player.HasPostprocessing || g_Player.HasAudioEngine);                  if (hasPostProc)                  {                    GUIPropertyManager.SetProperty("#TvOSD.AudioVideoDelayPossible"' "true");                    pControl.FloatInterval = 1;                  }                  else                  {                     GUIPropertyManager.SetProperty("#TvOSD.AudioVideoDelayPossible"' "false");                    pControl.FloatValue = 0;                    m_audioDelay = 0;                    pControl.FloatInterval = 0;                  }                    // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_AVDELAY);                  ShowControl(GetID' (int)Controls.OSD_AVDELAY_LABEL);                  ShowControl(GetID' (int)Controls.OSD_AUDIOSTREAM_LIST);                  ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER);                  ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER_LABEL);                    FocusControl(GetID' (int)Controls.OSD_AVDELAY' 0); // set focus to the first control in our group                  PopulateAudioStreams(); // populate the list control with audio streams for this video                }              }                return true;            }        }
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT: // fired when OSD is hidden            {              //if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(true);              // following line should stay. Problems with OSD not              // appearing are already fixed elsewhere              //for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)              //{              //  HideControl(GetID' i);              //}              Dispose();              GUIPropertyManager.SetProperty("#currentmodule"' GUIWindowManager.GetWindow(message.Param1).GetModuleName());              return true;            }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT: // fired when OSD is shown            {              // following line should stay. Problems with OSD not              // appearing are already fixed elsewhere              SqlBuilder sb = new SqlBuilder(StatementType.Select' typeof (Channel));              sb.AddConstraint(Operator.Equals' "istv"' 1);              sb.AddOrderByField(true' "sortOrder");              SqlStatement stmt = sb.GetStatement(true);              listTvChannels = ObjectFactory.GetCollection(typeof (Channel)' stmt.Execute());              GUIPropertyManager.SetProperty("#currentmodule"' GetModuleName());              previousProgram = null;              AllocResources();              // if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(false);              ResetAllControls(); // make sure the controls are positioned relevant to the OSD Y offset              isSubMenuVisible = false;              m_iActiveMenuButtonID = 0;              m_iActiveMenu = 0;              m_bNeedRefresh = false;              m_dateTime = DateTime.Now;              Reset();              FocusControl(GetID' (int)Controls.OSD_PLAY' 0); // set focus to play button by default when window is shown              ShowPrograms();              QueueAnimation(AnimationType.WindowOpen);              for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)              {                ShowControl(GetID' i);              }              if (g_Player.Paused)              {                ToggleButton((int)Controls.OSD_PLAY' true);                // make sure play button is down (so it shows the pause symbol)              }              else              {                ToggleButton((int)Controls.OSD_PLAY' false); // make sure play button is up (so it shows the play symbol)              }              m_delayInterval = MediaPortal.Player.Subtitles.SubEngine.GetInstance().DelayInterval;              if (m_delayInterval > 0)                m_subtitleDelay = MediaPortal.Player.Subtitles.SubEngine.GetInstance().Delay / m_delayInterval;              if (g_Player.HasPostprocessing)             {               m_delayIntervalAudio = PostProcessingEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = PostProcessingEngine.GetInstance().AudioDelay / m_delayIntervalAudio;               }             }             else if (g_Player.HasAudioEngine)             {               m_delayIntervalAudio = AudioPostEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = AudioPostEngine.GetInstance().AudioDelay / m_delayIntervalAudio;               }             }                g_Player.UpdateMediaInfoProperties();              GUIPropertyManager.SetProperty("#TV.View.HasTeletext"' TVHome.Card.HasTeletext.ToString());                MediaPortal.Player.VideoStreamFormat videoFormat = g_Player.GetVideoFormat();                GUIPropertyManager.SetProperty("#Play.Current.TSBitRate"'               ((float)MediaPortal.Player.g_Player.GetVideoFormat().bitrate / 1024 / 1024).ToString("0.00"' CultureInfo.InvariantCulture));                GUIPropertyManager.SetProperty("#TV.TuningDetails.SignalLevel"' TVHome.Card.SignalLevel.ToString());              GUIPropertyManager.SetProperty("#TV.TuningDetails.SignalQuality"' TVHome.Card.SignalQuality.ToString());                GUIPropertyManager.SetProperty("#Play.Current.VideoFormat.RawResolution"'                videoFormat.width.ToString() + "x" + videoFormat.height.ToString());                GUIPropertyManager.SetProperty("#TV.TuningDetails.FreeToAir"' string.Empty);                Channel chan = TVHome.Navigator.Channel;              if (chan != null)              {                IList<TuningDetail> details = chan.ReferringTuningDetail();                if (details.Count > 0)                {                  TuningDetail detail = null;                  switch (TVHome.Card.Type)                  {                    case TvLibrary.Interfaces.CardType.Analog:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 0)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.Atsc:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 1)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbC:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 2)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbS:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 3)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbT:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 4)                          detail = t;                      }                      break;                    default:                      detail = details[0];                      break;                  }                  if (detail != null)                  {                    GUIPropertyManager.SetProperty("#TV.TuningDetails.FreeToAir"' detail.FreeToAir.ToString());                  }                }              }            }            return true;            case GUIMessage.MessageType.GUI_MSG_SETFOCUS:            goto case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS;            case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS:            {              if (message.SenderControlId == 13)              {                return true;              }            }            break;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId; // get the ID of the control sending us a message                if (btnChannelUp != null && iControl == btnChannelUp.GetID)              {                OnNextChannel();              }                if (btnChannelDown != null && iControl == btnChannelDown.GetID)              {                OnPreviousChannel();              }                if (!g_Player.IsTVRecording)              {                if (btnPreviousProgram != null && iControl == btnPreviousProgram.GetID)                {                  Program prog = GetChannel().GetProgramAt(m_dateTime);                  if (prog != null)                  {                    prog =                      GetChannel().GetProgramAt(                        prog.StartTime.Subtract(new TimeSpan(0' 1' 0)));                    if (prog != null)                    {                      m_dateTime = prog.StartTime.AddMinutes(1);                    }                  }                  ShowPrograms();                }                if (iControl == btnNextProgram.GetID)                {                  Program prog = GetChannel().GetProgramAt(m_dateTime);                  if (prog != null)                  {                    prog = GetChannel().GetProgramAt(prog.EndTime.AddMinutes(+1));                    if (prog != null)                    {                      m_dateTime = prog.StartTime.AddMinutes(1);                    }                  }                  ShowPrograms();                }              }                if (iControl >= (int)Controls.OSD_VOLUMESLIDER)                // one of the settings (sub menu) controls is sending us a message              {                Handle_ControlSetting(iControl' message.Param1);              }                if (iControl == (int)Controls.OSD_PAUSE)              {                if (g_Player.Paused)                {                  ToggleButton((int)Controls.OSD_PLAY' true);                  // make sure play button is down (so it shows the pause symbol)                                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_PLAY' false);                  // make sure play button is up (so it shows the play symbol)                  if (g_Player.Speed < 1) // are we not playing back at normal speed                  {                    ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                    ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  }                  else                  {                    ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                    if (g_Player.Speed == 1)                    {                      ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                    }                  }                }              }                if (iControl == (int)Controls.OSD_PLAY)              {                //TODO                int iSpeed = g_Player.Speed;                if (iSpeed != 1) // we're in ffwd or rewind mode                {                  g_Player.Speed = 1; // drop back to single speed                  ToggleButton((int)Controls.OSD_REWIND' false); // pop all the relevant                  ToggleButton((int)Controls.OSD_FFWD' false); // buttons back to                  ToggleButton((int)Controls.OSD_PLAY' false); // their up state                }                else                {                  g_Player.Pause(); // Pause/Un-Pause playback                  if (g_Player.Paused)                  {                    ToggleButton((int)Controls.OSD_PLAY' true);                    // make sure play button is down (so it shows the pause symbol)                  }                  else                  {                    ToggleButton((int)Controls.OSD_PLAY' false);                    // make sure play button is up (so it shows the play symbol)                  }                }              }                if (iControl == (int)Controls.OSD_STOP)              {                if (isSubMenuVisible) // sub menu currently active ?                {                  FocusControl(GetID' m_iActiveMenuButtonID' 0); // set focus to last menu button                  ToggleSubMenu(0' m_iActiveMenu); // hide the currently active sub-menu                }                //g_application.m_guiWindowFullScreen.m_bOSDVisible = false;	// toggle the OSD off so parent window can de-init                Log.Debug("TVOSD:stop");                if (TVHome.Card.IsRecording)                {                  int id = TVHome.Card.RecordingScheduleId;                  if (id > 0)                  {                    TVHome.TvServer.StopRecordingSchedule(id);                  }                }                //GUIWindowManager.ShowPreviousWindow();							// go back to the previous window              }                if (iControl == (int)Controls.OSD_REWIND)              {                if (g_Player.Paused)                {                  g_Player.Pause(); // Unpause playback                }                  if (g_Player.Speed < 1) // are we not playing back at normal speed                {                  ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                  if (g_Player.Speed == 1)                  {                    ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  }                }              }                if (iControl == (int)Controls.OSD_FFWD)              {                if (g_Player.Paused)                {                  g_Player.Pause(); // Unpause playback                }                  if (g_Player.Speed > 1) // are we not playing back at normal speed                {                  ToggleButton((int)Controls.OSD_FFWD' true); // make sure out button is in the down position                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  if (g_Player.Speed == 1)                  {                    ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                  }                }              }                if (iControl == (int)Controls.OSD_SKIPBWD)              {                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(-_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(-_immediateSeekValue);                }                ToggleButton((int)Controls.OSD_SKIPBWD' false); // pop the button back to it's up state              }                if (iControl == (int)Controls.OSD_SKIPFWD)              {                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(_immediateSeekValue);                }                ToggleButton((int)Controls.OSD_SKIPFWD' false); // pop the button back to it's up state              }                if (iControl == (int)Controls.OSD_MUTE)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VOL); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  int iValue = g_Player.Volume;                  GUISliderControl pSlider = GetControl((int)Controls.OSD_VOLUMESLIDER) as GUISliderControl;                  if (null != pSlider)                  {                    pSlider.Percentage = iValue; // Update our volume slider accordingly ...                  }                  ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER); // show the volume control                  ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER_LABEL);                  FocusControl(GetID' (int)Controls.OSD_VOLUMESLIDER' 0); // set focus to it                }                else // sub menu is off                {                  FocusControl(GetID' (int)Controls.OSD_MUTE' 0); // set focus to the mute button                }              }                if (iControl == (int)Controls.OSD_SUBTITLES)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_SUBTITLES); // hide or show the sub-menu                if (isSubMenuVisible)                {                  // set the controls values                  GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_SUBTITLE_DELAY);                  pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                  pControl.FloatInterval = 1;                  pControl.SetRange(-10' 10);                  SetSliderValue(-10' 10' m_subtitleDelay' (int)Controls.OSD_SUBTITLE_DELAY);                  SetCheckmarkValue(g_Player.EnableSubtitle' (int)Controls.OSD_SUBTITLE_ONOFF);                  // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY_LABEL);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_ONOFF);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_LIST);                    FocusControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY' 0);                  // set focus to the first control in our group                  PopulateSubTitles(); // populate the list control with subtitles for this video                }              }                if (iControl == (int)Controls.OSD_BOOKMARKS)              {                //not used              }                if (iControl == (int)Controls.OSD_VIDEO)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VIDEO); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  // set the controls values                  float fPercent = (float)(100 * (g_Player.CurrentPosition / g_Player.Duration));                  SetSliderValue(0.0f' 100.0f' (float)fPercent' (int)Controls.OSD_VIDEOPOS);                    bool hasPostProc = g_Player.HasPostprocessing;                  if (hasPostProc)                  {                    IPostProcessingEngine engine = PostProcessingEngine.GetInstance();                    SetCheckmarkValue(engine.EnablePostProcess' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    SetCheckmarkValue(engine.EnableResize' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    SetCheckmarkValue(engine.EnableCrop' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    SetCheckmarkValue(engine.EnableDeinterlace' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    UpdatePostProcessing();                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL_LABEL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL_LABEL);                  }                    //SetCheckmarkValue(g_stSettings.m_bNonInterleaved' Controls.OSD_NONINTERLEAVED);                  //SetCheckmarkValue(g_stSettings.m_bNoCache' Controls.OSD_NOCACHE);                  //SetCheckmarkValue(g_stSettings.m_bFrameRateConversions' Controls.OSD_ADJFRAMERATE);                    UpdateGammaContrastBrightness();                  // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_VIDEOPOS);                  ShowControl(GetID' (int)Controls.OSD_VIDEOPOS_LABEL);                  ShowControl(GetID' (int)Controls.OSD_NONINTERLEAVED);                  ShowControl(GetID' (int)Controls.OSD_NOCACHE);                  ShowControl(GetID' (int)Controls.OSD_ADJFRAMERATE);                  ShowControl(GetID' (int)Controls.OSD_SATURATIONLABEL);                  ShowControl(GetID' (int)Controls.OSD_SATURATION);                  ShowControl(GetID' (int)Controls.OSD_SHARPNESSLABEL);                  ShowControl(GetID' (int)Controls.OSD_SHARPNESS);                  ShowControl(GetID' (int)Controls.OSD_BRIGHTNESS);                  ShowControl(GetID' (int)Controls.OSD_BRIGHTNESSLABEL);                  ShowControl(GetID' (int)Controls.OSD_CONTRAST);                  ShowControl(GetID' (int)Controls.OSD_CONTRASTLABEL);                  ShowControl(GetID' (int)Controls.OSD_GAMMA);                  ShowControl(GetID' (int)Controls.OSD_GAMMALABEL);                  FocusControl(GetID' (int)Controls.OSD_VIDEOPOS' 0); // set focus to the first control in our group                }              }                if (iControl == (int)Controls.OSD_AUDIO)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_AUDIO); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  int iValue = g_Player.Volume;                  GUISliderControl pSlider = GetControl((int)Controls.OSD_AUDIOVOLUMESLIDER) as GUISliderControl;                  if (null != pSlider)                  {                    pSlider.Percentage = iValue; // Update our volume slider accordingly ...                  }                    // set the controls values                  GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_AVDELAY);                  pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                  pControl.SetRange(-20' 20);                  SetSliderValue(-20' 20' m_audioDelay' (int)Controls.OSD_AVDELAY);                    bool hasPostProc = (g_Player.HasPostprocessing || g_Player.HasAudioEngine);                  if (hasPostProc)                  {                    GUIPropertyManager.SetProperty("#TvOSD.AudioVideoDelayPossible"' "true");                    pControl.FloatInterval = 1;                  }                  else                  {                     GUIPropertyManager.SetProperty("#TvOSD.AudioVideoDelayPossible"' "false");                    pControl.FloatValue = 0;                    m_audioDelay = 0;                    pControl.FloatInterval = 0;                  }                    // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_AVDELAY);                  ShowControl(GetID' (int)Controls.OSD_AVDELAY_LABEL);                  ShowControl(GetID' (int)Controls.OSD_AUDIOSTREAM_LIST);                  ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER);                  ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER_LABEL);                    FocusControl(GetID' (int)Controls.OSD_AVDELAY' 0); // set focus to the first control in our group                  PopulateAudioStreams(); // populate the list control with audio streams for this video                }              }                return true;            }        }
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT: // fired when OSD is hidden            {              //if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(true);              // following line should stay. Problems with OSD not              // appearing are already fixed elsewhere              //for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)              //{              //  HideControl(GetID' i);              //}              Dispose();              GUIPropertyManager.SetProperty("#currentmodule"' GUIWindowManager.GetWindow(message.Param1).GetModuleName());              return true;            }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT: // fired when OSD is shown            {              // following line should stay. Problems with OSD not              // appearing are already fixed elsewhere              SqlBuilder sb = new SqlBuilder(StatementType.Select' typeof (Channel));              sb.AddConstraint(Operator.Equals' "istv"' 1);              sb.AddOrderByField(true' "sortOrder");              SqlStatement stmt = sb.GetStatement(true);              listTvChannels = ObjectFactory.GetCollection(typeof (Channel)' stmt.Execute());              GUIPropertyManager.SetProperty("#currentmodule"' GetModuleName());              previousProgram = null;              AllocResources();              // if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(false);              ResetAllControls(); // make sure the controls are positioned relevant to the OSD Y offset              isSubMenuVisible = false;              m_iActiveMenuButtonID = 0;              m_iActiveMenu = 0;              m_bNeedRefresh = false;              m_dateTime = DateTime.Now;              Reset();              FocusControl(GetID' (int)Controls.OSD_PLAY' 0); // set focus to play button by default when window is shown              ShowPrograms();              QueueAnimation(AnimationType.WindowOpen);              for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)              {                ShowControl(GetID' i);              }              if (g_Player.Paused)              {                ToggleButton((int)Controls.OSD_PLAY' true);                // make sure play button is down (so it shows the pause symbol)              }              else              {                ToggleButton((int)Controls.OSD_PLAY' false); // make sure play button is up (so it shows the play symbol)              }              m_delayInterval = MediaPortal.Player.Subtitles.SubEngine.GetInstance().DelayInterval;              if (m_delayInterval > 0)                m_subtitleDelay = MediaPortal.Player.Subtitles.SubEngine.GetInstance().Delay / m_delayInterval;              if (g_Player.HasPostprocessing)             {               m_delayIntervalAudio = PostProcessingEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = PostProcessingEngine.GetInstance().AudioDelay / m_delayIntervalAudio;               }             }             else if (g_Player.HasAudioEngine)             {               m_delayIntervalAudio = AudioPostEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = AudioPostEngine.GetInstance().AudioDelay / m_delayIntervalAudio;               }             }                g_Player.UpdateMediaInfoProperties();              GUIPropertyManager.SetProperty("#TV.View.HasTeletext"' TVHome.Card.HasTeletext.ToString());                MediaPortal.Player.VideoStreamFormat videoFormat = g_Player.GetVideoFormat();                GUIPropertyManager.SetProperty("#Play.Current.TSBitRate"'               ((float)MediaPortal.Player.g_Player.GetVideoFormat().bitrate / 1024 / 1024).ToString("0.00"' CultureInfo.InvariantCulture));                GUIPropertyManager.SetProperty("#TV.TuningDetails.SignalLevel"' TVHome.Card.SignalLevel.ToString());              GUIPropertyManager.SetProperty("#TV.TuningDetails.SignalQuality"' TVHome.Card.SignalQuality.ToString());                GUIPropertyManager.SetProperty("#Play.Current.VideoFormat.RawResolution"'                videoFormat.width.ToString() + "x" + videoFormat.height.ToString());                GUIPropertyManager.SetProperty("#TV.TuningDetails.FreeToAir"' string.Empty);                Channel chan = TVHome.Navigator.Channel;              if (chan != null)              {                IList<TuningDetail> details = chan.ReferringTuningDetail();                if (details.Count > 0)                {                  TuningDetail detail = null;                  switch (TVHome.Card.Type)                  {                    case TvLibrary.Interfaces.CardType.Analog:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 0)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.Atsc:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 1)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbC:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 2)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbS:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 3)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbT:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 4)                          detail = t;                      }                      break;                    default:                      detail = details[0];                      break;                  }                  if (detail != null)                  {                    GUIPropertyManager.SetProperty("#TV.TuningDetails.FreeToAir"' detail.FreeToAir.ToString());                  }                }              }            }            return true;            case GUIMessage.MessageType.GUI_MSG_SETFOCUS:            goto case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS;            case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS:            {              if (message.SenderControlId == 13)              {                return true;              }            }            break;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId; // get the ID of the control sending us a message                if (btnChannelUp != null && iControl == btnChannelUp.GetID)              {                OnNextChannel();              }                if (btnChannelDown != null && iControl == btnChannelDown.GetID)              {                OnPreviousChannel();              }                if (!g_Player.IsTVRecording)              {                if (btnPreviousProgram != null && iControl == btnPreviousProgram.GetID)                {                  Program prog = GetChannel().GetProgramAt(m_dateTime);                  if (prog != null)                  {                    prog =                      GetChannel().GetProgramAt(                        prog.StartTime.Subtract(new TimeSpan(0' 1' 0)));                    if (prog != null)                    {                      m_dateTime = prog.StartTime.AddMinutes(1);                    }                  }                  ShowPrograms();                }                if (iControl == btnNextProgram.GetID)                {                  Program prog = GetChannel().GetProgramAt(m_dateTime);                  if (prog != null)                  {                    prog = GetChannel().GetProgramAt(prog.EndTime.AddMinutes(+1));                    if (prog != null)                    {                      m_dateTime = prog.StartTime.AddMinutes(1);                    }                  }                  ShowPrograms();                }              }                if (iControl >= (int)Controls.OSD_VOLUMESLIDER)                // one of the settings (sub menu) controls is sending us a message              {                Handle_ControlSetting(iControl' message.Param1);              }                if (iControl == (int)Controls.OSD_PAUSE)              {                if (g_Player.Paused)                {                  ToggleButton((int)Controls.OSD_PLAY' true);                  // make sure play button is down (so it shows the pause symbol)                                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_PLAY' false);                  // make sure play button is up (so it shows the play symbol)                  if (g_Player.Speed < 1) // are we not playing back at normal speed                  {                    ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                    ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  }                  else                  {                    ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                    if (g_Player.Speed == 1)                    {                      ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                    }                  }                }              }                if (iControl == (int)Controls.OSD_PLAY)              {                //TODO                int iSpeed = g_Player.Speed;                if (iSpeed != 1) // we're in ffwd or rewind mode                {                  g_Player.Speed = 1; // drop back to single speed                  ToggleButton((int)Controls.OSD_REWIND' false); // pop all the relevant                  ToggleButton((int)Controls.OSD_FFWD' false); // buttons back to                  ToggleButton((int)Controls.OSD_PLAY' false); // their up state                }                else                {                  g_Player.Pause(); // Pause/Un-Pause playback                  if (g_Player.Paused)                  {                    ToggleButton((int)Controls.OSD_PLAY' true);                    // make sure play button is down (so it shows the pause symbol)                  }                  else                  {                    ToggleButton((int)Controls.OSD_PLAY' false);                    // make sure play button is up (so it shows the play symbol)                  }                }              }                if (iControl == (int)Controls.OSD_STOP)              {                if (isSubMenuVisible) // sub menu currently active ?                {                  FocusControl(GetID' m_iActiveMenuButtonID' 0); // set focus to last menu button                  ToggleSubMenu(0' m_iActiveMenu); // hide the currently active sub-menu                }                //g_application.m_guiWindowFullScreen.m_bOSDVisible = false;	// toggle the OSD off so parent window can de-init                Log.Debug("TVOSD:stop");                if (TVHome.Card.IsRecording)                {                  int id = TVHome.Card.RecordingScheduleId;                  if (id > 0)                  {                    TVHome.TvServer.StopRecordingSchedule(id);                  }                }                //GUIWindowManager.ShowPreviousWindow();							// go back to the previous window              }                if (iControl == (int)Controls.OSD_REWIND)              {                if (g_Player.Paused)                {                  g_Player.Pause(); // Unpause playback                }                  if (g_Player.Speed < 1) // are we not playing back at normal speed                {                  ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                  if (g_Player.Speed == 1)                  {                    ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  }                }              }                if (iControl == (int)Controls.OSD_FFWD)              {                if (g_Player.Paused)                {                  g_Player.Pause(); // Unpause playback                }                  if (g_Player.Speed > 1) // are we not playing back at normal speed                {                  ToggleButton((int)Controls.OSD_FFWD' true); // make sure out button is in the down position                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  if (g_Player.Speed == 1)                  {                    ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                  }                }              }                if (iControl == (int)Controls.OSD_SKIPBWD)              {                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(-_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(-_immediateSeekValue);                }                ToggleButton((int)Controls.OSD_SKIPBWD' false); // pop the button back to it's up state              }                if (iControl == (int)Controls.OSD_SKIPFWD)              {                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(_immediateSeekValue);                }                ToggleButton((int)Controls.OSD_SKIPFWD' false); // pop the button back to it's up state              }                if (iControl == (int)Controls.OSD_MUTE)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VOL); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  int iValue = g_Player.Volume;                  GUISliderControl pSlider = GetControl((int)Controls.OSD_VOLUMESLIDER) as GUISliderControl;                  if (null != pSlider)                  {                    pSlider.Percentage = iValue; // Update our volume slider accordingly ...                  }                  ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER); // show the volume control                  ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER_LABEL);                  FocusControl(GetID' (int)Controls.OSD_VOLUMESLIDER' 0); // set focus to it                }                else // sub menu is off                {                  FocusControl(GetID' (int)Controls.OSD_MUTE' 0); // set focus to the mute button                }              }                if (iControl == (int)Controls.OSD_SUBTITLES)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_SUBTITLES); // hide or show the sub-menu                if (isSubMenuVisible)                {                  // set the controls values                  GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_SUBTITLE_DELAY);                  pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                  pControl.FloatInterval = 1;                  pControl.SetRange(-10' 10);                  SetSliderValue(-10' 10' m_subtitleDelay' (int)Controls.OSD_SUBTITLE_DELAY);                  SetCheckmarkValue(g_Player.EnableSubtitle' (int)Controls.OSD_SUBTITLE_ONOFF);                  // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY_LABEL);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_ONOFF);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_LIST);                    FocusControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY' 0);                  // set focus to the first control in our group                  PopulateSubTitles(); // populate the list control with subtitles for this video                }              }                if (iControl == (int)Controls.OSD_BOOKMARKS)              {                //not used              }                if (iControl == (int)Controls.OSD_VIDEO)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VIDEO); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  // set the controls values                  float fPercent = (float)(100 * (g_Player.CurrentPosition / g_Player.Duration));                  SetSliderValue(0.0f' 100.0f' (float)fPercent' (int)Controls.OSD_VIDEOPOS);                    bool hasPostProc = g_Player.HasPostprocessing;                  if (hasPostProc)                  {                    IPostProcessingEngine engine = PostProcessingEngine.GetInstance();                    SetCheckmarkValue(engine.EnablePostProcess' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    SetCheckmarkValue(engine.EnableResize' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    SetCheckmarkValue(engine.EnableCrop' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    SetCheckmarkValue(engine.EnableDeinterlace' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    UpdatePostProcessing();                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL_LABEL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL_LABEL);                  }                    //SetCheckmarkValue(g_stSettings.m_bNonInterleaved' Controls.OSD_NONINTERLEAVED);                  //SetCheckmarkValue(g_stSettings.m_bNoCache' Controls.OSD_NOCACHE);                  //SetCheckmarkValue(g_stSettings.m_bFrameRateConversions' Controls.OSD_ADJFRAMERATE);                    UpdateGammaContrastBrightness();                  // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_VIDEOPOS);                  ShowControl(GetID' (int)Controls.OSD_VIDEOPOS_LABEL);                  ShowControl(GetID' (int)Controls.OSD_NONINTERLEAVED);                  ShowControl(GetID' (int)Controls.OSD_NOCACHE);                  ShowControl(GetID' (int)Controls.OSD_ADJFRAMERATE);                  ShowControl(GetID' (int)Controls.OSD_SATURATIONLABEL);                  ShowControl(GetID' (int)Controls.OSD_SATURATION);                  ShowControl(GetID' (int)Controls.OSD_SHARPNESSLABEL);                  ShowControl(GetID' (int)Controls.OSD_SHARPNESS);                  ShowControl(GetID' (int)Controls.OSD_BRIGHTNESS);                  ShowControl(GetID' (int)Controls.OSD_BRIGHTNESSLABEL);                  ShowControl(GetID' (int)Controls.OSD_CONTRAST);                  ShowControl(GetID' (int)Controls.OSD_CONTRASTLABEL);                  ShowControl(GetID' (int)Controls.OSD_GAMMA);                  ShowControl(GetID' (int)Controls.OSD_GAMMALABEL);                  FocusControl(GetID' (int)Controls.OSD_VIDEOPOS' 0); // set focus to the first control in our group                }              }                if (iControl == (int)Controls.OSD_AUDIO)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_AUDIO); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  int iValue = g_Player.Volume;                  GUISliderControl pSlider = GetControl((int)Controls.OSD_AUDIOVOLUMESLIDER) as GUISliderControl;                  if (null != pSlider)                  {                    pSlider.Percentage = iValue; // Update our volume slider accordingly ...                  }                    // set the controls values                  GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_AVDELAY);                  pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                  pControl.SetRange(-20' 20);                  SetSliderValue(-20' 20' m_audioDelay' (int)Controls.OSD_AVDELAY);                    bool hasPostProc = (g_Player.HasPostprocessing || g_Player.HasAudioEngine);                  if (hasPostProc)                  {                    GUIPropertyManager.SetProperty("#TvOSD.AudioVideoDelayPossible"' "true");                    pControl.FloatInterval = 1;                  }                  else                  {                     GUIPropertyManager.SetProperty("#TvOSD.AudioVideoDelayPossible"' "false");                    pControl.FloatValue = 0;                    m_audioDelay = 0;                    pControl.FloatInterval = 0;                  }                    // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_AVDELAY);                  ShowControl(GetID' (int)Controls.OSD_AVDELAY_LABEL);                  ShowControl(GetID' (int)Controls.OSD_AUDIOSTREAM_LIST);                  ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER);                  ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER_LABEL);                    FocusControl(GetID' (int)Controls.OSD_AVDELAY' 0); // set focus to the first control in our group                  PopulateAudioStreams(); // populate the list control with audio streams for this video                }              }                return true;            }        }
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT: // fired when OSD is hidden            {              //if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(true);              // following line should stay. Problems with OSD not              // appearing are already fixed elsewhere              //for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)              //{              //  HideControl(GetID' i);              //}              Dispose();              GUIPropertyManager.SetProperty("#currentmodule"' GUIWindowManager.GetWindow(message.Param1).GetModuleName());              return true;            }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT: // fired when OSD is shown            {              // following line should stay. Problems with OSD not              // appearing are already fixed elsewhere              SqlBuilder sb = new SqlBuilder(StatementType.Select' typeof (Channel));              sb.AddConstraint(Operator.Equals' "istv"' 1);              sb.AddOrderByField(true' "sortOrder");              SqlStatement stmt = sb.GetStatement(true);              listTvChannels = ObjectFactory.GetCollection(typeof (Channel)' stmt.Execute());              GUIPropertyManager.SetProperty("#currentmodule"' GetModuleName());              previousProgram = null;              AllocResources();              // if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(false);              ResetAllControls(); // make sure the controls are positioned relevant to the OSD Y offset              isSubMenuVisible = false;              m_iActiveMenuButtonID = 0;              m_iActiveMenu = 0;              m_bNeedRefresh = false;              m_dateTime = DateTime.Now;              Reset();              FocusControl(GetID' (int)Controls.OSD_PLAY' 0); // set focus to play button by default when window is shown              ShowPrograms();              QueueAnimation(AnimationType.WindowOpen);              for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)              {                ShowControl(GetID' i);              }              if (g_Player.Paused)              {                ToggleButton((int)Controls.OSD_PLAY' true);                // make sure play button is down (so it shows the pause symbol)              }              else              {                ToggleButton((int)Controls.OSD_PLAY' false); // make sure play button is up (so it shows the play symbol)              }              m_delayInterval = MediaPortal.Player.Subtitles.SubEngine.GetInstance().DelayInterval;              if (m_delayInterval > 0)                m_subtitleDelay = MediaPortal.Player.Subtitles.SubEngine.GetInstance().Delay / m_delayInterval;              if (g_Player.HasPostprocessing)             {               m_delayIntervalAudio = PostProcessingEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = PostProcessingEngine.GetInstance().AudioDelay / m_delayIntervalAudio;               }             }             else if (g_Player.HasAudioEngine)             {               m_delayIntervalAudio = AudioPostEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = AudioPostEngine.GetInstance().AudioDelay / m_delayIntervalAudio;               }             }                g_Player.UpdateMediaInfoProperties();              GUIPropertyManager.SetProperty("#TV.View.HasTeletext"' TVHome.Card.HasTeletext.ToString());                MediaPortal.Player.VideoStreamFormat videoFormat = g_Player.GetVideoFormat();                GUIPropertyManager.SetProperty("#Play.Current.TSBitRate"'               ((float)MediaPortal.Player.g_Player.GetVideoFormat().bitrate / 1024 / 1024).ToString("0.00"' CultureInfo.InvariantCulture));                GUIPropertyManager.SetProperty("#TV.TuningDetails.SignalLevel"' TVHome.Card.SignalLevel.ToString());              GUIPropertyManager.SetProperty("#TV.TuningDetails.SignalQuality"' TVHome.Card.SignalQuality.ToString());                GUIPropertyManager.SetProperty("#Play.Current.VideoFormat.RawResolution"'                videoFormat.width.ToString() + "x" + videoFormat.height.ToString());                GUIPropertyManager.SetProperty("#TV.TuningDetails.FreeToAir"' string.Empty);                Channel chan = TVHome.Navigator.Channel;              if (chan != null)              {                IList<TuningDetail> details = chan.ReferringTuningDetail();                if (details.Count > 0)                {                  TuningDetail detail = null;                  switch (TVHome.Card.Type)                  {                    case TvLibrary.Interfaces.CardType.Analog:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 0)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.Atsc:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 1)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbC:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 2)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbS:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 3)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbT:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 4)                          detail = t;                      }                      break;                    default:                      detail = details[0];                      break;                  }                  if (detail != null)                  {                    GUIPropertyManager.SetProperty("#TV.TuningDetails.FreeToAir"' detail.FreeToAir.ToString());                  }                }              }            }            return true;            case GUIMessage.MessageType.GUI_MSG_SETFOCUS:            goto case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS;            case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS:            {              if (message.SenderControlId == 13)              {                return true;              }            }            break;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId; // get the ID of the control sending us a message                if (btnChannelUp != null && iControl == btnChannelUp.GetID)              {                OnNextChannel();              }                if (btnChannelDown != null && iControl == btnChannelDown.GetID)              {                OnPreviousChannel();              }                if (!g_Player.IsTVRecording)              {                if (btnPreviousProgram != null && iControl == btnPreviousProgram.GetID)                {                  Program prog = GetChannel().GetProgramAt(m_dateTime);                  if (prog != null)                  {                    prog =                      GetChannel().GetProgramAt(                        prog.StartTime.Subtract(new TimeSpan(0' 1' 0)));                    if (prog != null)                    {                      m_dateTime = prog.StartTime.AddMinutes(1);                    }                  }                  ShowPrograms();                }                if (iControl == btnNextProgram.GetID)                {                  Program prog = GetChannel().GetProgramAt(m_dateTime);                  if (prog != null)                  {                    prog = GetChannel().GetProgramAt(prog.EndTime.AddMinutes(+1));                    if (prog != null)                    {                      m_dateTime = prog.StartTime.AddMinutes(1);                    }                  }                  ShowPrograms();                }              }                if (iControl >= (int)Controls.OSD_VOLUMESLIDER)                // one of the settings (sub menu) controls is sending us a message              {                Handle_ControlSetting(iControl' message.Param1);              }                if (iControl == (int)Controls.OSD_PAUSE)              {                if (g_Player.Paused)                {                  ToggleButton((int)Controls.OSD_PLAY' true);                  // make sure play button is down (so it shows the pause symbol)                                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_PLAY' false);                  // make sure play button is up (so it shows the play symbol)                  if (g_Player.Speed < 1) // are we not playing back at normal speed                  {                    ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                    ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  }                  else                  {                    ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                    if (g_Player.Speed == 1)                    {                      ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                    }                  }                }              }                if (iControl == (int)Controls.OSD_PLAY)              {                //TODO                int iSpeed = g_Player.Speed;                if (iSpeed != 1) // we're in ffwd or rewind mode                {                  g_Player.Speed = 1; // drop back to single speed                  ToggleButton((int)Controls.OSD_REWIND' false); // pop all the relevant                  ToggleButton((int)Controls.OSD_FFWD' false); // buttons back to                  ToggleButton((int)Controls.OSD_PLAY' false); // their up state                }                else                {                  g_Player.Pause(); // Pause/Un-Pause playback                  if (g_Player.Paused)                  {                    ToggleButton((int)Controls.OSD_PLAY' true);                    // make sure play button is down (so it shows the pause symbol)                  }                  else                  {                    ToggleButton((int)Controls.OSD_PLAY' false);                    // make sure play button is up (so it shows the play symbol)                  }                }              }                if (iControl == (int)Controls.OSD_STOP)              {                if (isSubMenuVisible) // sub menu currently active ?                {                  FocusControl(GetID' m_iActiveMenuButtonID' 0); // set focus to last menu button                  ToggleSubMenu(0' m_iActiveMenu); // hide the currently active sub-menu                }                //g_application.m_guiWindowFullScreen.m_bOSDVisible = false;	// toggle the OSD off so parent window can de-init                Log.Debug("TVOSD:stop");                if (TVHome.Card.IsRecording)                {                  int id = TVHome.Card.RecordingScheduleId;                  if (id > 0)                  {                    TVHome.TvServer.StopRecordingSchedule(id);                  }                }                //GUIWindowManager.ShowPreviousWindow();							// go back to the previous window              }                if (iControl == (int)Controls.OSD_REWIND)              {                if (g_Player.Paused)                {                  g_Player.Pause(); // Unpause playback                }                  if (g_Player.Speed < 1) // are we not playing back at normal speed                {                  ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                  if (g_Player.Speed == 1)                  {                    ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  }                }              }                if (iControl == (int)Controls.OSD_FFWD)              {                if (g_Player.Paused)                {                  g_Player.Pause(); // Unpause playback                }                  if (g_Player.Speed > 1) // are we not playing back at normal speed                {                  ToggleButton((int)Controls.OSD_FFWD' true); // make sure out button is in the down position                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  if (g_Player.Speed == 1)                  {                    ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                  }                }              }                if (iControl == (int)Controls.OSD_SKIPBWD)              {                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(-_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(-_immediateSeekValue);                }                ToggleButton((int)Controls.OSD_SKIPBWD' false); // pop the button back to it's up state              }                if (iControl == (int)Controls.OSD_SKIPFWD)              {                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(_immediateSeekValue);                }                ToggleButton((int)Controls.OSD_SKIPFWD' false); // pop the button back to it's up state              }                if (iControl == (int)Controls.OSD_MUTE)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VOL); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  int iValue = g_Player.Volume;                  GUISliderControl pSlider = GetControl((int)Controls.OSD_VOLUMESLIDER) as GUISliderControl;                  if (null != pSlider)                  {                    pSlider.Percentage = iValue; // Update our volume slider accordingly ...                  }                  ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER); // show the volume control                  ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER_LABEL);                  FocusControl(GetID' (int)Controls.OSD_VOLUMESLIDER' 0); // set focus to it                }                else // sub menu is off                {                  FocusControl(GetID' (int)Controls.OSD_MUTE' 0); // set focus to the mute button                }              }                if (iControl == (int)Controls.OSD_SUBTITLES)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_SUBTITLES); // hide or show the sub-menu                if (isSubMenuVisible)                {                  // set the controls values                  GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_SUBTITLE_DELAY);                  pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                  pControl.FloatInterval = 1;                  pControl.SetRange(-10' 10);                  SetSliderValue(-10' 10' m_subtitleDelay' (int)Controls.OSD_SUBTITLE_DELAY);                  SetCheckmarkValue(g_Player.EnableSubtitle' (int)Controls.OSD_SUBTITLE_ONOFF);                  // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY_LABEL);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_ONOFF);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_LIST);                    FocusControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY' 0);                  // set focus to the first control in our group                  PopulateSubTitles(); // populate the list control with subtitles for this video                }              }                if (iControl == (int)Controls.OSD_BOOKMARKS)              {                //not used              }                if (iControl == (int)Controls.OSD_VIDEO)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VIDEO); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  // set the controls values                  float fPercent = (float)(100 * (g_Player.CurrentPosition / g_Player.Duration));                  SetSliderValue(0.0f' 100.0f' (float)fPercent' (int)Controls.OSD_VIDEOPOS);                    bool hasPostProc = g_Player.HasPostprocessing;                  if (hasPostProc)                  {                    IPostProcessingEngine engine = PostProcessingEngine.GetInstance();                    SetCheckmarkValue(engine.EnablePostProcess' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    SetCheckmarkValue(engine.EnableResize' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    SetCheckmarkValue(engine.EnableCrop' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    SetCheckmarkValue(engine.EnableDeinterlace' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    UpdatePostProcessing();                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL_LABEL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL_LABEL);                  }                    //SetCheckmarkValue(g_stSettings.m_bNonInterleaved' Controls.OSD_NONINTERLEAVED);                  //SetCheckmarkValue(g_stSettings.m_bNoCache' Controls.OSD_NOCACHE);                  //SetCheckmarkValue(g_stSettings.m_bFrameRateConversions' Controls.OSD_ADJFRAMERATE);                    UpdateGammaContrastBrightness();                  // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_VIDEOPOS);                  ShowControl(GetID' (int)Controls.OSD_VIDEOPOS_LABEL);                  ShowControl(GetID' (int)Controls.OSD_NONINTERLEAVED);                  ShowControl(GetID' (int)Controls.OSD_NOCACHE);                  ShowControl(GetID' (int)Controls.OSD_ADJFRAMERATE);                  ShowControl(GetID' (int)Controls.OSD_SATURATIONLABEL);                  ShowControl(GetID' (int)Controls.OSD_SATURATION);                  ShowControl(GetID' (int)Controls.OSD_SHARPNESSLABEL);                  ShowControl(GetID' (int)Controls.OSD_SHARPNESS);                  ShowControl(GetID' (int)Controls.OSD_BRIGHTNESS);                  ShowControl(GetID' (int)Controls.OSD_BRIGHTNESSLABEL);                  ShowControl(GetID' (int)Controls.OSD_CONTRAST);                  ShowControl(GetID' (int)Controls.OSD_CONTRASTLABEL);                  ShowControl(GetID' (int)Controls.OSD_GAMMA);                  ShowControl(GetID' (int)Controls.OSD_GAMMALABEL);                  FocusControl(GetID' (int)Controls.OSD_VIDEOPOS' 0); // set focus to the first control in our group                }              }                if (iControl == (int)Controls.OSD_AUDIO)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_AUDIO); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  int iValue = g_Player.Volume;                  GUISliderControl pSlider = GetControl((int)Controls.OSD_AUDIOVOLUMESLIDER) as GUISliderControl;                  if (null != pSlider)                  {                    pSlider.Percentage = iValue; // Update our volume slider accordingly ...                  }                    // set the controls values                  GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_AVDELAY);                  pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                  pControl.SetRange(-20' 20);                  SetSliderValue(-20' 20' m_audioDelay' (int)Controls.OSD_AVDELAY);                    bool hasPostProc = (g_Player.HasPostprocessing || g_Player.HasAudioEngine);                  if (hasPostProc)                  {                    GUIPropertyManager.SetProperty("#TvOSD.AudioVideoDelayPossible"' "true");                    pControl.FloatInterval = 1;                  }                  else                  {                     GUIPropertyManager.SetProperty("#TvOSD.AudioVideoDelayPossible"' "false");                    pControl.FloatValue = 0;                    m_audioDelay = 0;                    pControl.FloatInterval = 0;                  }                    // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_AVDELAY);                  ShowControl(GetID' (int)Controls.OSD_AVDELAY_LABEL);                  ShowControl(GetID' (int)Controls.OSD_AUDIOSTREAM_LIST);                  ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER);                  ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER_LABEL);                    FocusControl(GetID' (int)Controls.OSD_AVDELAY' 0); // set focus to the first control in our group                  PopulateAudioStreams(); // populate the list control with audio streams for this video                }              }                return true;            }        }
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT: // fired when OSD is hidden            {              //if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(true);              // following line should stay. Problems with OSD not              // appearing are already fixed elsewhere              //for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)              //{              //  HideControl(GetID' i);              //}              Dispose();              GUIPropertyManager.SetProperty("#currentmodule"' GUIWindowManager.GetWindow(message.Param1).GetModuleName());              return true;            }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT: // fired when OSD is shown            {              // following line should stay. Problems with OSD not              // appearing are already fixed elsewhere              SqlBuilder sb = new SqlBuilder(StatementType.Select' typeof (Channel));              sb.AddConstraint(Operator.Equals' "istv"' 1);              sb.AddOrderByField(true' "sortOrder");              SqlStatement stmt = sb.GetStatement(true);              listTvChannels = ObjectFactory.GetCollection(typeof (Channel)' stmt.Execute());              GUIPropertyManager.SetProperty("#currentmodule"' GetModuleName());              previousProgram = null;              AllocResources();              // if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(false);              ResetAllControls(); // make sure the controls are positioned relevant to the OSD Y offset              isSubMenuVisible = false;              m_iActiveMenuButtonID = 0;              m_iActiveMenu = 0;              m_bNeedRefresh = false;              m_dateTime = DateTime.Now;              Reset();              FocusControl(GetID' (int)Controls.OSD_PLAY' 0); // set focus to play button by default when window is shown              ShowPrograms();              QueueAnimation(AnimationType.WindowOpen);              for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)              {                ShowControl(GetID' i);              }              if (g_Player.Paused)              {                ToggleButton((int)Controls.OSD_PLAY' true);                // make sure play button is down (so it shows the pause symbol)              }              else              {                ToggleButton((int)Controls.OSD_PLAY' false); // make sure play button is up (so it shows the play symbol)              }              m_delayInterval = MediaPortal.Player.Subtitles.SubEngine.GetInstance().DelayInterval;              if (m_delayInterval > 0)                m_subtitleDelay = MediaPortal.Player.Subtitles.SubEngine.GetInstance().Delay / m_delayInterval;              if (g_Player.HasPostprocessing)             {               m_delayIntervalAudio = PostProcessingEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = PostProcessingEngine.GetInstance().AudioDelay / m_delayIntervalAudio;               }             }             else if (g_Player.HasAudioEngine)             {               m_delayIntervalAudio = AudioPostEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = AudioPostEngine.GetInstance().AudioDelay / m_delayIntervalAudio;               }             }                g_Player.UpdateMediaInfoProperties();              GUIPropertyManager.SetProperty("#TV.View.HasTeletext"' TVHome.Card.HasTeletext.ToString());                MediaPortal.Player.VideoStreamFormat videoFormat = g_Player.GetVideoFormat();                GUIPropertyManager.SetProperty("#Play.Current.TSBitRate"'               ((float)MediaPortal.Player.g_Player.GetVideoFormat().bitrate / 1024 / 1024).ToString("0.00"' CultureInfo.InvariantCulture));                GUIPropertyManager.SetProperty("#TV.TuningDetails.SignalLevel"' TVHome.Card.SignalLevel.ToString());              GUIPropertyManager.SetProperty("#TV.TuningDetails.SignalQuality"' TVHome.Card.SignalQuality.ToString());                GUIPropertyManager.SetProperty("#Play.Current.VideoFormat.RawResolution"'                videoFormat.width.ToString() + "x" + videoFormat.height.ToString());                GUIPropertyManager.SetProperty("#TV.TuningDetails.FreeToAir"' string.Empty);                Channel chan = TVHome.Navigator.Channel;              if (chan != null)              {                IList<TuningDetail> details = chan.ReferringTuningDetail();                if (details.Count > 0)                {                  TuningDetail detail = null;                  switch (TVHome.Card.Type)                  {                    case TvLibrary.Interfaces.CardType.Analog:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 0)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.Atsc:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 1)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbC:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 2)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbS:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 3)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbT:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 4)                          detail = t;                      }                      break;                    default:                      detail = details[0];                      break;                  }                  if (detail != null)                  {                    GUIPropertyManager.SetProperty("#TV.TuningDetails.FreeToAir"' detail.FreeToAir.ToString());                  }                }              }            }            return true;            case GUIMessage.MessageType.GUI_MSG_SETFOCUS:            goto case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS;            case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS:            {              if (message.SenderControlId == 13)              {                return true;              }            }            break;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId; // get the ID of the control sending us a message                if (btnChannelUp != null && iControl == btnChannelUp.GetID)              {                OnNextChannel();              }                if (btnChannelDown != null && iControl == btnChannelDown.GetID)              {                OnPreviousChannel();              }                if (!g_Player.IsTVRecording)              {                if (btnPreviousProgram != null && iControl == btnPreviousProgram.GetID)                {                  Program prog = GetChannel().GetProgramAt(m_dateTime);                  if (prog != null)                  {                    prog =                      GetChannel().GetProgramAt(                        prog.StartTime.Subtract(new TimeSpan(0' 1' 0)));                    if (prog != null)                    {                      m_dateTime = prog.StartTime.AddMinutes(1);                    }                  }                  ShowPrograms();                }                if (iControl == btnNextProgram.GetID)                {                  Program prog = GetChannel().GetProgramAt(m_dateTime);                  if (prog != null)                  {                    prog = GetChannel().GetProgramAt(prog.EndTime.AddMinutes(+1));                    if (prog != null)                    {                      m_dateTime = prog.StartTime.AddMinutes(1);                    }                  }                  ShowPrograms();                }              }                if (iControl >= (int)Controls.OSD_VOLUMESLIDER)                // one of the settings (sub menu) controls is sending us a message              {                Handle_ControlSetting(iControl' message.Param1);              }                if (iControl == (int)Controls.OSD_PAUSE)              {                if (g_Player.Paused)                {                  ToggleButton((int)Controls.OSD_PLAY' true);                  // make sure play button is down (so it shows the pause symbol)                                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_PLAY' false);                  // make sure play button is up (so it shows the play symbol)                  if (g_Player.Speed < 1) // are we not playing back at normal speed                  {                    ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                    ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  }                  else                  {                    ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                    if (g_Player.Speed == 1)                    {                      ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                    }                  }                }              }                if (iControl == (int)Controls.OSD_PLAY)              {                //TODO                int iSpeed = g_Player.Speed;                if (iSpeed != 1) // we're in ffwd or rewind mode                {                  g_Player.Speed = 1; // drop back to single speed                  ToggleButton((int)Controls.OSD_REWIND' false); // pop all the relevant                  ToggleButton((int)Controls.OSD_FFWD' false); // buttons back to                  ToggleButton((int)Controls.OSD_PLAY' false); // their up state                }                else                {                  g_Player.Pause(); // Pause/Un-Pause playback                  if (g_Player.Paused)                  {                    ToggleButton((int)Controls.OSD_PLAY' true);                    // make sure play button is down (so it shows the pause symbol)                  }                  else                  {                    ToggleButton((int)Controls.OSD_PLAY' false);                    // make sure play button is up (so it shows the play symbol)                  }                }              }                if (iControl == (int)Controls.OSD_STOP)              {                if (isSubMenuVisible) // sub menu currently active ?                {                  FocusControl(GetID' m_iActiveMenuButtonID' 0); // set focus to last menu button                  ToggleSubMenu(0' m_iActiveMenu); // hide the currently active sub-menu                }                //g_application.m_guiWindowFullScreen.m_bOSDVisible = false;	// toggle the OSD off so parent window can de-init                Log.Debug("TVOSD:stop");                if (TVHome.Card.IsRecording)                {                  int id = TVHome.Card.RecordingScheduleId;                  if (id > 0)                  {                    TVHome.TvServer.StopRecordingSchedule(id);                  }                }                //GUIWindowManager.ShowPreviousWindow();							// go back to the previous window              }                if (iControl == (int)Controls.OSD_REWIND)              {                if (g_Player.Paused)                {                  g_Player.Pause(); // Unpause playback                }                  if (g_Player.Speed < 1) // are we not playing back at normal speed                {                  ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                  if (g_Player.Speed == 1)                  {                    ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  }                }              }                if (iControl == (int)Controls.OSD_FFWD)              {                if (g_Player.Paused)                {                  g_Player.Pause(); // Unpause playback                }                  if (g_Player.Speed > 1) // are we not playing back at normal speed                {                  ToggleButton((int)Controls.OSD_FFWD' true); // make sure out button is in the down position                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  if (g_Player.Speed == 1)                  {                    ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                  }                }              }                if (iControl == (int)Controls.OSD_SKIPBWD)              {                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(-_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(-_immediateSeekValue);                }                ToggleButton((int)Controls.OSD_SKIPBWD' false); // pop the button back to it's up state              }                if (iControl == (int)Controls.OSD_SKIPFWD)              {                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(_immediateSeekValue);                }                ToggleButton((int)Controls.OSD_SKIPFWD' false); // pop the button back to it's up state              }                if (iControl == (int)Controls.OSD_MUTE)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VOL); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  int iValue = g_Player.Volume;                  GUISliderControl pSlider = GetControl((int)Controls.OSD_VOLUMESLIDER) as GUISliderControl;                  if (null != pSlider)                  {                    pSlider.Percentage = iValue; // Update our volume slider accordingly ...                  }                  ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER); // show the volume control                  ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER_LABEL);                  FocusControl(GetID' (int)Controls.OSD_VOLUMESLIDER' 0); // set focus to it                }                else // sub menu is off                {                  FocusControl(GetID' (int)Controls.OSD_MUTE' 0); // set focus to the mute button                }              }                if (iControl == (int)Controls.OSD_SUBTITLES)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_SUBTITLES); // hide or show the sub-menu                if (isSubMenuVisible)                {                  // set the controls values                  GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_SUBTITLE_DELAY);                  pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                  pControl.FloatInterval = 1;                  pControl.SetRange(-10' 10);                  SetSliderValue(-10' 10' m_subtitleDelay' (int)Controls.OSD_SUBTITLE_DELAY);                  SetCheckmarkValue(g_Player.EnableSubtitle' (int)Controls.OSD_SUBTITLE_ONOFF);                  // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY_LABEL);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_ONOFF);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_LIST);                    FocusControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY' 0);                  // set focus to the first control in our group                  PopulateSubTitles(); // populate the list control with subtitles for this video                }              }                if (iControl == (int)Controls.OSD_BOOKMARKS)              {                //not used              }                if (iControl == (int)Controls.OSD_VIDEO)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VIDEO); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  // set the controls values                  float fPercent = (float)(100 * (g_Player.CurrentPosition / g_Player.Duration));                  SetSliderValue(0.0f' 100.0f' (float)fPercent' (int)Controls.OSD_VIDEOPOS);                    bool hasPostProc = g_Player.HasPostprocessing;                  if (hasPostProc)                  {                    IPostProcessingEngine engine = PostProcessingEngine.GetInstance();                    SetCheckmarkValue(engine.EnablePostProcess' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    SetCheckmarkValue(engine.EnableResize' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    SetCheckmarkValue(engine.EnableCrop' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    SetCheckmarkValue(engine.EnableDeinterlace' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    UpdatePostProcessing();                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL_LABEL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL_LABEL);                  }                    //SetCheckmarkValue(g_stSettings.m_bNonInterleaved' Controls.OSD_NONINTERLEAVED);                  //SetCheckmarkValue(g_stSettings.m_bNoCache' Controls.OSD_NOCACHE);                  //SetCheckmarkValue(g_stSettings.m_bFrameRateConversions' Controls.OSD_ADJFRAMERATE);                    UpdateGammaContrastBrightness();                  // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_VIDEOPOS);                  ShowControl(GetID' (int)Controls.OSD_VIDEOPOS_LABEL);                  ShowControl(GetID' (int)Controls.OSD_NONINTERLEAVED);                  ShowControl(GetID' (int)Controls.OSD_NOCACHE);                  ShowControl(GetID' (int)Controls.OSD_ADJFRAMERATE);                  ShowControl(GetID' (int)Controls.OSD_SATURATIONLABEL);                  ShowControl(GetID' (int)Controls.OSD_SATURATION);                  ShowControl(GetID' (int)Controls.OSD_SHARPNESSLABEL);                  ShowControl(GetID' (int)Controls.OSD_SHARPNESS);                  ShowControl(GetID' (int)Controls.OSD_BRIGHTNESS);                  ShowControl(GetID' (int)Controls.OSD_BRIGHTNESSLABEL);                  ShowControl(GetID' (int)Controls.OSD_CONTRAST);                  ShowControl(GetID' (int)Controls.OSD_CONTRASTLABEL);                  ShowControl(GetID' (int)Controls.OSD_GAMMA);                  ShowControl(GetID' (int)Controls.OSD_GAMMALABEL);                  FocusControl(GetID' (int)Controls.OSD_VIDEOPOS' 0); // set focus to the first control in our group                }              }                if (iControl == (int)Controls.OSD_AUDIO)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_AUDIO); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  int iValue = g_Player.Volume;                  GUISliderControl pSlider = GetControl((int)Controls.OSD_AUDIOVOLUMESLIDER) as GUISliderControl;                  if (null != pSlider)                  {                    pSlider.Percentage = iValue; // Update our volume slider accordingly ...                  }                    // set the controls values                  GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_AVDELAY);                  pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                  pControl.SetRange(-20' 20);                  SetSliderValue(-20' 20' m_audioDelay' (int)Controls.OSD_AVDELAY);                    bool hasPostProc = (g_Player.HasPostprocessing || g_Player.HasAudioEngine);                  if (hasPostProc)                  {                    GUIPropertyManager.SetProperty("#TvOSD.AudioVideoDelayPossible"' "true");                    pControl.FloatInterval = 1;                  }                  else                  {                     GUIPropertyManager.SetProperty("#TvOSD.AudioVideoDelayPossible"' "false");                    pControl.FloatValue = 0;                    m_audioDelay = 0;                    pControl.FloatInterval = 0;                  }                    // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_AVDELAY);                  ShowControl(GetID' (int)Controls.OSD_AVDELAY_LABEL);                  ShowControl(GetID' (int)Controls.OSD_AUDIOSTREAM_LIST);                  ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER);                  ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER_LABEL);                    FocusControl(GetID' (int)Controls.OSD_AVDELAY' 0); // set focus to the first control in our group                  PopulateAudioStreams(); // populate the list control with audio streams for this video                }              }                return true;            }        }
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT: // fired when OSD is hidden            {              //if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(true);              // following line should stay. Problems with OSD not              // appearing are already fixed elsewhere              //for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)              //{              //  HideControl(GetID' i);              //}              Dispose();              GUIPropertyManager.SetProperty("#currentmodule"' GUIWindowManager.GetWindow(message.Param1).GetModuleName());              return true;            }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT: // fired when OSD is shown            {              // following line should stay. Problems with OSD not              // appearing are already fixed elsewhere              SqlBuilder sb = new SqlBuilder(StatementType.Select' typeof (Channel));              sb.AddConstraint(Operator.Equals' "istv"' 1);              sb.AddOrderByField(true' "sortOrder");              SqlStatement stmt = sb.GetStatement(true);              listTvChannels = ObjectFactory.GetCollection(typeof (Channel)' stmt.Execute());              GUIPropertyManager.SetProperty("#currentmodule"' GetModuleName());              previousProgram = null;              AllocResources();              // if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(false);              ResetAllControls(); // make sure the controls are positioned relevant to the OSD Y offset              isSubMenuVisible = false;              m_iActiveMenuButtonID = 0;              m_iActiveMenu = 0;              m_bNeedRefresh = false;              m_dateTime = DateTime.Now;              Reset();              FocusControl(GetID' (int)Controls.OSD_PLAY' 0); // set focus to play button by default when window is shown              ShowPrograms();              QueueAnimation(AnimationType.WindowOpen);              for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)              {                ShowControl(GetID' i);              }              if (g_Player.Paused)              {                ToggleButton((int)Controls.OSD_PLAY' true);                // make sure play button is down (so it shows the pause symbol)              }              else              {                ToggleButton((int)Controls.OSD_PLAY' false); // make sure play button is up (so it shows the play symbol)              }              m_delayInterval = MediaPortal.Player.Subtitles.SubEngine.GetInstance().DelayInterval;              if (m_delayInterval > 0)                m_subtitleDelay = MediaPortal.Player.Subtitles.SubEngine.GetInstance().Delay / m_delayInterval;              if (g_Player.HasPostprocessing)             {               m_delayIntervalAudio = PostProcessingEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = PostProcessingEngine.GetInstance().AudioDelay / m_delayIntervalAudio;               }             }             else if (g_Player.HasAudioEngine)             {               m_delayIntervalAudio = AudioPostEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = AudioPostEngine.GetInstance().AudioDelay / m_delayIntervalAudio;               }             }                g_Player.UpdateMediaInfoProperties();              GUIPropertyManager.SetProperty("#TV.View.HasTeletext"' TVHome.Card.HasTeletext.ToString());                MediaPortal.Player.VideoStreamFormat videoFormat = g_Player.GetVideoFormat();                GUIPropertyManager.SetProperty("#Play.Current.TSBitRate"'               ((float)MediaPortal.Player.g_Player.GetVideoFormat().bitrate / 1024 / 1024).ToString("0.00"' CultureInfo.InvariantCulture));                GUIPropertyManager.SetProperty("#TV.TuningDetails.SignalLevel"' TVHome.Card.SignalLevel.ToString());              GUIPropertyManager.SetProperty("#TV.TuningDetails.SignalQuality"' TVHome.Card.SignalQuality.ToString());                GUIPropertyManager.SetProperty("#Play.Current.VideoFormat.RawResolution"'                videoFormat.width.ToString() + "x" + videoFormat.height.ToString());                GUIPropertyManager.SetProperty("#TV.TuningDetails.FreeToAir"' string.Empty);                Channel chan = TVHome.Navigator.Channel;              if (chan != null)              {                IList<TuningDetail> details = chan.ReferringTuningDetail();                if (details.Count > 0)                {                  TuningDetail detail = null;                  switch (TVHome.Card.Type)                  {                    case TvLibrary.Interfaces.CardType.Analog:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 0)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.Atsc:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 1)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbC:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 2)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbS:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 3)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbT:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 4)                          detail = t;                      }                      break;                    default:                      detail = details[0];                      break;                  }                  if (detail != null)                  {                    GUIPropertyManager.SetProperty("#TV.TuningDetails.FreeToAir"' detail.FreeToAir.ToString());                  }                }              }            }            return true;            case GUIMessage.MessageType.GUI_MSG_SETFOCUS:            goto case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS;            case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS:            {              if (message.SenderControlId == 13)              {                return true;              }            }            break;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId; // get the ID of the control sending us a message                if (btnChannelUp != null && iControl == btnChannelUp.GetID)              {                OnNextChannel();              }                if (btnChannelDown != null && iControl == btnChannelDown.GetID)              {                OnPreviousChannel();              }                if (!g_Player.IsTVRecording)              {                if (btnPreviousProgram != null && iControl == btnPreviousProgram.GetID)                {                  Program prog = GetChannel().GetProgramAt(m_dateTime);                  if (prog != null)                  {                    prog =                      GetChannel().GetProgramAt(                        prog.StartTime.Subtract(new TimeSpan(0' 1' 0)));                    if (prog != null)                    {                      m_dateTime = prog.StartTime.AddMinutes(1);                    }                  }                  ShowPrograms();                }                if (iControl == btnNextProgram.GetID)                {                  Program prog = GetChannel().GetProgramAt(m_dateTime);                  if (prog != null)                  {                    prog = GetChannel().GetProgramAt(prog.EndTime.AddMinutes(+1));                    if (prog != null)                    {                      m_dateTime = prog.StartTime.AddMinutes(1);                    }                  }                  ShowPrograms();                }              }                if (iControl >= (int)Controls.OSD_VOLUMESLIDER)                // one of the settings (sub menu) controls is sending us a message              {                Handle_ControlSetting(iControl' message.Param1);              }                if (iControl == (int)Controls.OSD_PAUSE)              {                if (g_Player.Paused)                {                  ToggleButton((int)Controls.OSD_PLAY' true);                  // make sure play button is down (so it shows the pause symbol)                                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_PLAY' false);                  // make sure play button is up (so it shows the play symbol)                  if (g_Player.Speed < 1) // are we not playing back at normal speed                  {                    ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                    ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  }                  else                  {                    ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                    if (g_Player.Speed == 1)                    {                      ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                    }                  }                }              }                if (iControl == (int)Controls.OSD_PLAY)              {                //TODO                int iSpeed = g_Player.Speed;                if (iSpeed != 1) // we're in ffwd or rewind mode                {                  g_Player.Speed = 1; // drop back to single speed                  ToggleButton((int)Controls.OSD_REWIND' false); // pop all the relevant                  ToggleButton((int)Controls.OSD_FFWD' false); // buttons back to                  ToggleButton((int)Controls.OSD_PLAY' false); // their up state                }                else                {                  g_Player.Pause(); // Pause/Un-Pause playback                  if (g_Player.Paused)                  {                    ToggleButton((int)Controls.OSD_PLAY' true);                    // make sure play button is down (so it shows the pause symbol)                  }                  else                  {                    ToggleButton((int)Controls.OSD_PLAY' false);                    // make sure play button is up (so it shows the play symbol)                  }                }              }                if (iControl == (int)Controls.OSD_STOP)              {                if (isSubMenuVisible) // sub menu currently active ?                {                  FocusControl(GetID' m_iActiveMenuButtonID' 0); // set focus to last menu button                  ToggleSubMenu(0' m_iActiveMenu); // hide the currently active sub-menu                }                //g_application.m_guiWindowFullScreen.m_bOSDVisible = false;	// toggle the OSD off so parent window can de-init                Log.Debug("TVOSD:stop");                if (TVHome.Card.IsRecording)                {                  int id = TVHome.Card.RecordingScheduleId;                  if (id > 0)                  {                    TVHome.TvServer.StopRecordingSchedule(id);                  }                }                //GUIWindowManager.ShowPreviousWindow();							// go back to the previous window              }                if (iControl == (int)Controls.OSD_REWIND)              {                if (g_Player.Paused)                {                  g_Player.Pause(); // Unpause playback                }                  if (g_Player.Speed < 1) // are we not playing back at normal speed                {                  ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                  if (g_Player.Speed == 1)                  {                    ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  }                }              }                if (iControl == (int)Controls.OSD_FFWD)              {                if (g_Player.Paused)                {                  g_Player.Pause(); // Unpause playback                }                  if (g_Player.Speed > 1) // are we not playing back at normal speed                {                  ToggleButton((int)Controls.OSD_FFWD' true); // make sure out button is in the down position                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  if (g_Player.Speed == 1)                  {                    ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                  }                }              }                if (iControl == (int)Controls.OSD_SKIPBWD)              {                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(-_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(-_immediateSeekValue);                }                ToggleButton((int)Controls.OSD_SKIPBWD' false); // pop the button back to it's up state              }                if (iControl == (int)Controls.OSD_SKIPFWD)              {                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(_immediateSeekValue);                }                ToggleButton((int)Controls.OSD_SKIPFWD' false); // pop the button back to it's up state              }                if (iControl == (int)Controls.OSD_MUTE)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VOL); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  int iValue = g_Player.Volume;                  GUISliderControl pSlider = GetControl((int)Controls.OSD_VOLUMESLIDER) as GUISliderControl;                  if (null != pSlider)                  {                    pSlider.Percentage = iValue; // Update our volume slider accordingly ...                  }                  ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER); // show the volume control                  ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER_LABEL);                  FocusControl(GetID' (int)Controls.OSD_VOLUMESLIDER' 0); // set focus to it                }                else // sub menu is off                {                  FocusControl(GetID' (int)Controls.OSD_MUTE' 0); // set focus to the mute button                }              }                if (iControl == (int)Controls.OSD_SUBTITLES)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_SUBTITLES); // hide or show the sub-menu                if (isSubMenuVisible)                {                  // set the controls values                  GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_SUBTITLE_DELAY);                  pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                  pControl.FloatInterval = 1;                  pControl.SetRange(-10' 10);                  SetSliderValue(-10' 10' m_subtitleDelay' (int)Controls.OSD_SUBTITLE_DELAY);                  SetCheckmarkValue(g_Player.EnableSubtitle' (int)Controls.OSD_SUBTITLE_ONOFF);                  // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY_LABEL);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_ONOFF);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_LIST);                    FocusControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY' 0);                  // set focus to the first control in our group                  PopulateSubTitles(); // populate the list control with subtitles for this video                }              }                if (iControl == (int)Controls.OSD_BOOKMARKS)              {                //not used              }                if (iControl == (int)Controls.OSD_VIDEO)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VIDEO); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  // set the controls values                  float fPercent = (float)(100 * (g_Player.CurrentPosition / g_Player.Duration));                  SetSliderValue(0.0f' 100.0f' (float)fPercent' (int)Controls.OSD_VIDEOPOS);                    bool hasPostProc = g_Player.HasPostprocessing;                  if (hasPostProc)                  {                    IPostProcessingEngine engine = PostProcessingEngine.GetInstance();                    SetCheckmarkValue(engine.EnablePostProcess' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    SetCheckmarkValue(engine.EnableResize' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    SetCheckmarkValue(engine.EnableCrop' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    SetCheckmarkValue(engine.EnableDeinterlace' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    UpdatePostProcessing();                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL_LABEL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL_LABEL);                  }                    //SetCheckmarkValue(g_stSettings.m_bNonInterleaved' Controls.OSD_NONINTERLEAVED);                  //SetCheckmarkValue(g_stSettings.m_bNoCache' Controls.OSD_NOCACHE);                  //SetCheckmarkValue(g_stSettings.m_bFrameRateConversions' Controls.OSD_ADJFRAMERATE);                    UpdateGammaContrastBrightness();                  // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_VIDEOPOS);                  ShowControl(GetID' (int)Controls.OSD_VIDEOPOS_LABEL);                  ShowControl(GetID' (int)Controls.OSD_NONINTERLEAVED);                  ShowControl(GetID' (int)Controls.OSD_NOCACHE);                  ShowControl(GetID' (int)Controls.OSD_ADJFRAMERATE);                  ShowControl(GetID' (int)Controls.OSD_SATURATIONLABEL);                  ShowControl(GetID' (int)Controls.OSD_SATURATION);                  ShowControl(GetID' (int)Controls.OSD_SHARPNESSLABEL);                  ShowControl(GetID' (int)Controls.OSD_SHARPNESS);                  ShowControl(GetID' (int)Controls.OSD_BRIGHTNESS);                  ShowControl(GetID' (int)Controls.OSD_BRIGHTNESSLABEL);                  ShowControl(GetID' (int)Controls.OSD_CONTRAST);                  ShowControl(GetID' (int)Controls.OSD_CONTRASTLABEL);                  ShowControl(GetID' (int)Controls.OSD_GAMMA);                  ShowControl(GetID' (int)Controls.OSD_GAMMALABEL);                  FocusControl(GetID' (int)Controls.OSD_VIDEOPOS' 0); // set focus to the first control in our group                }              }                if (iControl == (int)Controls.OSD_AUDIO)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_AUDIO); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  int iValue = g_Player.Volume;                  GUISliderControl pSlider = GetControl((int)Controls.OSD_AUDIOVOLUMESLIDER) as GUISliderControl;                  if (null != pSlider)                  {                    pSlider.Percentage = iValue; // Update our volume slider accordingly ...                  }                    // set the controls values                  GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_AVDELAY);                  pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                  pControl.SetRange(-20' 20);                  SetSliderValue(-20' 20' m_audioDelay' (int)Controls.OSD_AVDELAY);                    bool hasPostProc = (g_Player.HasPostprocessing || g_Player.HasAudioEngine);                  if (hasPostProc)                  {                    GUIPropertyManager.SetProperty("#TvOSD.AudioVideoDelayPossible"' "true");                    pControl.FloatInterval = 1;                  }                  else                  {                     GUIPropertyManager.SetProperty("#TvOSD.AudioVideoDelayPossible"' "false");                    pControl.FloatValue = 0;                    m_audioDelay = 0;                    pControl.FloatInterval = 0;                  }                    // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_AVDELAY);                  ShowControl(GetID' (int)Controls.OSD_AVDELAY_LABEL);                  ShowControl(GetID' (int)Controls.OSD_AUDIOSTREAM_LIST);                  ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER);                  ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER_LABEL);                    FocusControl(GetID' (int)Controls.OSD_AVDELAY' 0); // set focus to the first control in our group                  PopulateAudioStreams(); // populate the list control with audio streams for this video                }              }                return true;            }        }
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT: // fired when OSD is hidden            {              //if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(true);              // following line should stay. Problems with OSD not              // appearing are already fixed elsewhere              //for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)              //{              //  HideControl(GetID' i);              //}              Dispose();              GUIPropertyManager.SetProperty("#currentmodule"' GUIWindowManager.GetWindow(message.Param1).GetModuleName());              return true;            }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT: // fired when OSD is shown            {              // following line should stay. Problems with OSD not              // appearing are already fixed elsewhere              SqlBuilder sb = new SqlBuilder(StatementType.Select' typeof (Channel));              sb.AddConstraint(Operator.Equals' "istv"' 1);              sb.AddOrderByField(true' "sortOrder");              SqlStatement stmt = sb.GetStatement(true);              listTvChannels = ObjectFactory.GetCollection(typeof (Channel)' stmt.Execute());              GUIPropertyManager.SetProperty("#currentmodule"' GetModuleName());              previousProgram = null;              AllocResources();              // if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(false);              ResetAllControls(); // make sure the controls are positioned relevant to the OSD Y offset              isSubMenuVisible = false;              m_iActiveMenuButtonID = 0;              m_iActiveMenu = 0;              m_bNeedRefresh = false;              m_dateTime = DateTime.Now;              Reset();              FocusControl(GetID' (int)Controls.OSD_PLAY' 0); // set focus to play button by default when window is shown              ShowPrograms();              QueueAnimation(AnimationType.WindowOpen);              for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)              {                ShowControl(GetID' i);              }              if (g_Player.Paused)              {                ToggleButton((int)Controls.OSD_PLAY' true);                // make sure play button is down (so it shows the pause symbol)              }              else              {                ToggleButton((int)Controls.OSD_PLAY' false); // make sure play button is up (so it shows the play symbol)              }              m_delayInterval = MediaPortal.Player.Subtitles.SubEngine.GetInstance().DelayInterval;              if (m_delayInterval > 0)                m_subtitleDelay = MediaPortal.Player.Subtitles.SubEngine.GetInstance().Delay / m_delayInterval;              if (g_Player.HasPostprocessing)             {               m_delayIntervalAudio = PostProcessingEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = PostProcessingEngine.GetInstance().AudioDelay / m_delayIntervalAudio;               }             }             else if (g_Player.HasAudioEngine)             {               m_delayIntervalAudio = AudioPostEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = AudioPostEngine.GetInstance().AudioDelay / m_delayIntervalAudio;               }             }                g_Player.UpdateMediaInfoProperties();              GUIPropertyManager.SetProperty("#TV.View.HasTeletext"' TVHome.Card.HasTeletext.ToString());                MediaPortal.Player.VideoStreamFormat videoFormat = g_Player.GetVideoFormat();                GUIPropertyManager.SetProperty("#Play.Current.TSBitRate"'               ((float)MediaPortal.Player.g_Player.GetVideoFormat().bitrate / 1024 / 1024).ToString("0.00"' CultureInfo.InvariantCulture));                GUIPropertyManager.SetProperty("#TV.TuningDetails.SignalLevel"' TVHome.Card.SignalLevel.ToString());              GUIPropertyManager.SetProperty("#TV.TuningDetails.SignalQuality"' TVHome.Card.SignalQuality.ToString());                GUIPropertyManager.SetProperty("#Play.Current.VideoFormat.RawResolution"'                videoFormat.width.ToString() + "x" + videoFormat.height.ToString());                GUIPropertyManager.SetProperty("#TV.TuningDetails.FreeToAir"' string.Empty);                Channel chan = TVHome.Navigator.Channel;              if (chan != null)              {                IList<TuningDetail> details = chan.ReferringTuningDetail();                if (details.Count > 0)                {                  TuningDetail detail = null;                  switch (TVHome.Card.Type)                  {                    case TvLibrary.Interfaces.CardType.Analog:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 0)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.Atsc:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 1)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbC:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 2)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbS:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 3)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbT:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 4)                          detail = t;                      }                      break;                    default:                      detail = details[0];                      break;                  }                  if (detail != null)                  {                    GUIPropertyManager.SetProperty("#TV.TuningDetails.FreeToAir"' detail.FreeToAir.ToString());                  }                }              }            }            return true;            case GUIMessage.MessageType.GUI_MSG_SETFOCUS:            goto case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS;            case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS:            {              if (message.SenderControlId == 13)              {                return true;              }            }            break;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId; // get the ID of the control sending us a message                if (btnChannelUp != null && iControl == btnChannelUp.GetID)              {                OnNextChannel();              }                if (btnChannelDown != null && iControl == btnChannelDown.GetID)              {                OnPreviousChannel();              }                if (!g_Player.IsTVRecording)              {                if (btnPreviousProgram != null && iControl == btnPreviousProgram.GetID)                {                  Program prog = GetChannel().GetProgramAt(m_dateTime);                  if (prog != null)                  {                    prog =                      GetChannel().GetProgramAt(                        prog.StartTime.Subtract(new TimeSpan(0' 1' 0)));                    if (prog != null)                    {                      m_dateTime = prog.StartTime.AddMinutes(1);                    }                  }                  ShowPrograms();                }                if (iControl == btnNextProgram.GetID)                {                  Program prog = GetChannel().GetProgramAt(m_dateTime);                  if (prog != null)                  {                    prog = GetChannel().GetProgramAt(prog.EndTime.AddMinutes(+1));                    if (prog != null)                    {                      m_dateTime = prog.StartTime.AddMinutes(1);                    }                  }                  ShowPrograms();                }              }                if (iControl >= (int)Controls.OSD_VOLUMESLIDER)                // one of the settings (sub menu) controls is sending us a message              {                Handle_ControlSetting(iControl' message.Param1);              }                if (iControl == (int)Controls.OSD_PAUSE)              {                if (g_Player.Paused)                {                  ToggleButton((int)Controls.OSD_PLAY' true);                  // make sure play button is down (so it shows the pause symbol)                                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_PLAY' false);                  // make sure play button is up (so it shows the play symbol)                  if (g_Player.Speed < 1) // are we not playing back at normal speed                  {                    ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                    ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  }                  else                  {                    ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                    if (g_Player.Speed == 1)                    {                      ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                    }                  }                }              }                if (iControl == (int)Controls.OSD_PLAY)              {                //TODO                int iSpeed = g_Player.Speed;                if (iSpeed != 1) // we're in ffwd or rewind mode                {                  g_Player.Speed = 1; // drop back to single speed                  ToggleButton((int)Controls.OSD_REWIND' false); // pop all the relevant                  ToggleButton((int)Controls.OSD_FFWD' false); // buttons back to                  ToggleButton((int)Controls.OSD_PLAY' false); // their up state                }                else                {                  g_Player.Pause(); // Pause/Un-Pause playback                  if (g_Player.Paused)                  {                    ToggleButton((int)Controls.OSD_PLAY' true);                    // make sure play button is down (so it shows the pause symbol)                  }                  else                  {                    ToggleButton((int)Controls.OSD_PLAY' false);                    // make sure play button is up (so it shows the play symbol)                  }                }              }                if (iControl == (int)Controls.OSD_STOP)              {                if (isSubMenuVisible) // sub menu currently active ?                {                  FocusControl(GetID' m_iActiveMenuButtonID' 0); // set focus to last menu button                  ToggleSubMenu(0' m_iActiveMenu); // hide the currently active sub-menu                }                //g_application.m_guiWindowFullScreen.m_bOSDVisible = false;	// toggle the OSD off so parent window can de-init                Log.Debug("TVOSD:stop");                if (TVHome.Card.IsRecording)                {                  int id = TVHome.Card.RecordingScheduleId;                  if (id > 0)                  {                    TVHome.TvServer.StopRecordingSchedule(id);                  }                }                //GUIWindowManager.ShowPreviousWindow();							// go back to the previous window              }                if (iControl == (int)Controls.OSD_REWIND)              {                if (g_Player.Paused)                {                  g_Player.Pause(); // Unpause playback                }                  if (g_Player.Speed < 1) // are we not playing back at normal speed                {                  ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                  if (g_Player.Speed == 1)                  {                    ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  }                }              }                if (iControl == (int)Controls.OSD_FFWD)              {                if (g_Player.Paused)                {                  g_Player.Pause(); // Unpause playback                }                  if (g_Player.Speed > 1) // are we not playing back at normal speed                {                  ToggleButton((int)Controls.OSD_FFWD' true); // make sure out button is in the down position                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  if (g_Player.Speed == 1)                  {                    ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                  }                }              }                if (iControl == (int)Controls.OSD_SKIPBWD)              {                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(-_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(-_immediateSeekValue);                }                ToggleButton((int)Controls.OSD_SKIPBWD' false); // pop the button back to it's up state              }                if (iControl == (int)Controls.OSD_SKIPFWD)              {                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(_immediateSeekValue);                }                ToggleButton((int)Controls.OSD_SKIPFWD' false); // pop the button back to it's up state              }                if (iControl == (int)Controls.OSD_MUTE)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VOL); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  int iValue = g_Player.Volume;                  GUISliderControl pSlider = GetControl((int)Controls.OSD_VOLUMESLIDER) as GUISliderControl;                  if (null != pSlider)                  {                    pSlider.Percentage = iValue; // Update our volume slider accordingly ...                  }                  ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER); // show the volume control                  ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER_LABEL);                  FocusControl(GetID' (int)Controls.OSD_VOLUMESLIDER' 0); // set focus to it                }                else // sub menu is off                {                  FocusControl(GetID' (int)Controls.OSD_MUTE' 0); // set focus to the mute button                }              }                if (iControl == (int)Controls.OSD_SUBTITLES)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_SUBTITLES); // hide or show the sub-menu                if (isSubMenuVisible)                {                  // set the controls values                  GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_SUBTITLE_DELAY);                  pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                  pControl.FloatInterval = 1;                  pControl.SetRange(-10' 10);                  SetSliderValue(-10' 10' m_subtitleDelay' (int)Controls.OSD_SUBTITLE_DELAY);                  SetCheckmarkValue(g_Player.EnableSubtitle' (int)Controls.OSD_SUBTITLE_ONOFF);                  // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY_LABEL);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_ONOFF);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_LIST);                    FocusControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY' 0);                  // set focus to the first control in our group                  PopulateSubTitles(); // populate the list control with subtitles for this video                }              }                if (iControl == (int)Controls.OSD_BOOKMARKS)              {                //not used              }                if (iControl == (int)Controls.OSD_VIDEO)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VIDEO); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  // set the controls values                  float fPercent = (float)(100 * (g_Player.CurrentPosition / g_Player.Duration));                  SetSliderValue(0.0f' 100.0f' (float)fPercent' (int)Controls.OSD_VIDEOPOS);                    bool hasPostProc = g_Player.HasPostprocessing;                  if (hasPostProc)                  {                    IPostProcessingEngine engine = PostProcessingEngine.GetInstance();                    SetCheckmarkValue(engine.EnablePostProcess' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    SetCheckmarkValue(engine.EnableResize' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    SetCheckmarkValue(engine.EnableCrop' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    SetCheckmarkValue(engine.EnableDeinterlace' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    UpdatePostProcessing();                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL_LABEL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL_LABEL);                  }                    //SetCheckmarkValue(g_stSettings.m_bNonInterleaved' Controls.OSD_NONINTERLEAVED);                  //SetCheckmarkValue(g_stSettings.m_bNoCache' Controls.OSD_NOCACHE);                  //SetCheckmarkValue(g_stSettings.m_bFrameRateConversions' Controls.OSD_ADJFRAMERATE);                    UpdateGammaContrastBrightness();                  // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_VIDEOPOS);                  ShowControl(GetID' (int)Controls.OSD_VIDEOPOS_LABEL);                  ShowControl(GetID' (int)Controls.OSD_NONINTERLEAVED);                  ShowControl(GetID' (int)Controls.OSD_NOCACHE);                  ShowControl(GetID' (int)Controls.OSD_ADJFRAMERATE);                  ShowControl(GetID' (int)Controls.OSD_SATURATIONLABEL);                  ShowControl(GetID' (int)Controls.OSD_SATURATION);                  ShowControl(GetID' (int)Controls.OSD_SHARPNESSLABEL);                  ShowControl(GetID' (int)Controls.OSD_SHARPNESS);                  ShowControl(GetID' (int)Controls.OSD_BRIGHTNESS);                  ShowControl(GetID' (int)Controls.OSD_BRIGHTNESSLABEL);                  ShowControl(GetID' (int)Controls.OSD_CONTRAST);                  ShowControl(GetID' (int)Controls.OSD_CONTRASTLABEL);                  ShowControl(GetID' (int)Controls.OSD_GAMMA);                  ShowControl(GetID' (int)Controls.OSD_GAMMALABEL);                  FocusControl(GetID' (int)Controls.OSD_VIDEOPOS' 0); // set focus to the first control in our group                }              }                if (iControl == (int)Controls.OSD_AUDIO)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_AUDIO); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  int iValue = g_Player.Volume;                  GUISliderControl pSlider = GetControl((int)Controls.OSD_AUDIOVOLUMESLIDER) as GUISliderControl;                  if (null != pSlider)                  {                    pSlider.Percentage = iValue; // Update our volume slider accordingly ...                  }                    // set the controls values                  GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_AVDELAY);                  pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                  pControl.SetRange(-20' 20);                  SetSliderValue(-20' 20' m_audioDelay' (int)Controls.OSD_AVDELAY);                    bool hasPostProc = (g_Player.HasPostprocessing || g_Player.HasAudioEngine);                  if (hasPostProc)                  {                    GUIPropertyManager.SetProperty("#TvOSD.AudioVideoDelayPossible"' "true");                    pControl.FloatInterval = 1;                  }                  else                  {                     GUIPropertyManager.SetProperty("#TvOSD.AudioVideoDelayPossible"' "false");                    pControl.FloatValue = 0;                    m_audioDelay = 0;                    pControl.FloatInterval = 0;                  }                    // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_AVDELAY);                  ShowControl(GetID' (int)Controls.OSD_AVDELAY_LABEL);                  ShowControl(GetID' (int)Controls.OSD_AUDIOSTREAM_LIST);                  ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER);                  ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER_LABEL);                    FocusControl(GetID' (int)Controls.OSD_AVDELAY' 0); // set focus to the first control in our group                  PopulateAudioStreams(); // populate the list control with audio streams for this video                }              }                return true;            }        }
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT: // fired when OSD is hidden            {              //if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(true);              // following line should stay. Problems with OSD not              // appearing are already fixed elsewhere              //for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)              //{              //  HideControl(GetID' i);              //}              Dispose();              GUIPropertyManager.SetProperty("#currentmodule"' GUIWindowManager.GetWindow(message.Param1).GetModuleName());              return true;            }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT: // fired when OSD is shown            {              // following line should stay. Problems with OSD not              // appearing are already fixed elsewhere              SqlBuilder sb = new SqlBuilder(StatementType.Select' typeof (Channel));              sb.AddConstraint(Operator.Equals' "istv"' 1);              sb.AddOrderByField(true' "sortOrder");              SqlStatement stmt = sb.GetStatement(true);              listTvChannels = ObjectFactory.GetCollection(typeof (Channel)' stmt.Execute());              GUIPropertyManager.SetProperty("#currentmodule"' GetModuleName());              previousProgram = null;              AllocResources();              // if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(false);              ResetAllControls(); // make sure the controls are positioned relevant to the OSD Y offset              isSubMenuVisible = false;              m_iActiveMenuButtonID = 0;              m_iActiveMenu = 0;              m_bNeedRefresh = false;              m_dateTime = DateTime.Now;              Reset();              FocusControl(GetID' (int)Controls.OSD_PLAY' 0); // set focus to play button by default when window is shown              ShowPrograms();              QueueAnimation(AnimationType.WindowOpen);              for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)              {                ShowControl(GetID' i);              }              if (g_Player.Paused)              {                ToggleButton((int)Controls.OSD_PLAY' true);                // make sure play button is down (so it shows the pause symbol)              }              else              {                ToggleButton((int)Controls.OSD_PLAY' false); // make sure play button is up (so it shows the play symbol)              }              m_delayInterval = MediaPortal.Player.Subtitles.SubEngine.GetInstance().DelayInterval;              if (m_delayInterval > 0)                m_subtitleDelay = MediaPortal.Player.Subtitles.SubEngine.GetInstance().Delay / m_delayInterval;              if (g_Player.HasPostprocessing)             {               m_delayIntervalAudio = PostProcessingEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = PostProcessingEngine.GetInstance().AudioDelay / m_delayIntervalAudio;               }             }             else if (g_Player.HasAudioEngine)             {               m_delayIntervalAudio = AudioPostEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = AudioPostEngine.GetInstance().AudioDelay / m_delayIntervalAudio;               }             }                g_Player.UpdateMediaInfoProperties();              GUIPropertyManager.SetProperty("#TV.View.HasTeletext"' TVHome.Card.HasTeletext.ToString());                MediaPortal.Player.VideoStreamFormat videoFormat = g_Player.GetVideoFormat();                GUIPropertyManager.SetProperty("#Play.Current.TSBitRate"'               ((float)MediaPortal.Player.g_Player.GetVideoFormat().bitrate / 1024 / 1024).ToString("0.00"' CultureInfo.InvariantCulture));                GUIPropertyManager.SetProperty("#TV.TuningDetails.SignalLevel"' TVHome.Card.SignalLevel.ToString());              GUIPropertyManager.SetProperty("#TV.TuningDetails.SignalQuality"' TVHome.Card.SignalQuality.ToString());                GUIPropertyManager.SetProperty("#Play.Current.VideoFormat.RawResolution"'                videoFormat.width.ToString() + "x" + videoFormat.height.ToString());                GUIPropertyManager.SetProperty("#TV.TuningDetails.FreeToAir"' string.Empty);                Channel chan = TVHome.Navigator.Channel;              if (chan != null)              {                IList<TuningDetail> details = chan.ReferringTuningDetail();                if (details.Count > 0)                {                  TuningDetail detail = null;                  switch (TVHome.Card.Type)                  {                    case TvLibrary.Interfaces.CardType.Analog:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 0)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.Atsc:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 1)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbC:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 2)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbS:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 3)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbT:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 4)                          detail = t;                      }                      break;                    default:                      detail = details[0];                      break;                  }                  if (detail != null)                  {                    GUIPropertyManager.SetProperty("#TV.TuningDetails.FreeToAir"' detail.FreeToAir.ToString());                  }                }              }            }            return true;            case GUIMessage.MessageType.GUI_MSG_SETFOCUS:            goto case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS;            case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS:            {              if (message.SenderControlId == 13)              {                return true;              }            }            break;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId; // get the ID of the control sending us a message                if (btnChannelUp != null && iControl == btnChannelUp.GetID)              {                OnNextChannel();              }                if (btnChannelDown != null && iControl == btnChannelDown.GetID)              {                OnPreviousChannel();              }                if (!g_Player.IsTVRecording)              {                if (btnPreviousProgram != null && iControl == btnPreviousProgram.GetID)                {                  Program prog = GetChannel().GetProgramAt(m_dateTime);                  if (prog != null)                  {                    prog =                      GetChannel().GetProgramAt(                        prog.StartTime.Subtract(new TimeSpan(0' 1' 0)));                    if (prog != null)                    {                      m_dateTime = prog.StartTime.AddMinutes(1);                    }                  }                  ShowPrograms();                }                if (iControl == btnNextProgram.GetID)                {                  Program prog = GetChannel().GetProgramAt(m_dateTime);                  if (prog != null)                  {                    prog = GetChannel().GetProgramAt(prog.EndTime.AddMinutes(+1));                    if (prog != null)                    {                      m_dateTime = prog.StartTime.AddMinutes(1);                    }                  }                  ShowPrograms();                }              }                if (iControl >= (int)Controls.OSD_VOLUMESLIDER)                // one of the settings (sub menu) controls is sending us a message              {                Handle_ControlSetting(iControl' message.Param1);              }                if (iControl == (int)Controls.OSD_PAUSE)              {                if (g_Player.Paused)                {                  ToggleButton((int)Controls.OSD_PLAY' true);                  // make sure play button is down (so it shows the pause symbol)                                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_PLAY' false);                  // make sure play button is up (so it shows the play symbol)                  if (g_Player.Speed < 1) // are we not playing back at normal speed                  {                    ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                    ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  }                  else                  {                    ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                    if (g_Player.Speed == 1)                    {                      ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                    }                  }                }              }                if (iControl == (int)Controls.OSD_PLAY)              {                //TODO                int iSpeed = g_Player.Speed;                if (iSpeed != 1) // we're in ffwd or rewind mode                {                  g_Player.Speed = 1; // drop back to single speed                  ToggleButton((int)Controls.OSD_REWIND' false); // pop all the relevant                  ToggleButton((int)Controls.OSD_FFWD' false); // buttons back to                  ToggleButton((int)Controls.OSD_PLAY' false); // their up state                }                else                {                  g_Player.Pause(); // Pause/Un-Pause playback                  if (g_Player.Paused)                  {                    ToggleButton((int)Controls.OSD_PLAY' true);                    // make sure play button is down (so it shows the pause symbol)                  }                  else                  {                    ToggleButton((int)Controls.OSD_PLAY' false);                    // make sure play button is up (so it shows the play symbol)                  }                }              }                if (iControl == (int)Controls.OSD_STOP)              {                if (isSubMenuVisible) // sub menu currently active ?                {                  FocusControl(GetID' m_iActiveMenuButtonID' 0); // set focus to last menu button                  ToggleSubMenu(0' m_iActiveMenu); // hide the currently active sub-menu                }                //g_application.m_guiWindowFullScreen.m_bOSDVisible = false;	// toggle the OSD off so parent window can de-init                Log.Debug("TVOSD:stop");                if (TVHome.Card.IsRecording)                {                  int id = TVHome.Card.RecordingScheduleId;                  if (id > 0)                  {                    TVHome.TvServer.StopRecordingSchedule(id);                  }                }                //GUIWindowManager.ShowPreviousWindow();							// go back to the previous window              }                if (iControl == (int)Controls.OSD_REWIND)              {                if (g_Player.Paused)                {                  g_Player.Pause(); // Unpause playback                }                  if (g_Player.Speed < 1) // are we not playing back at normal speed                {                  ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                  if (g_Player.Speed == 1)                  {                    ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  }                }              }                if (iControl == (int)Controls.OSD_FFWD)              {                if (g_Player.Paused)                {                  g_Player.Pause(); // Unpause playback                }                  if (g_Player.Speed > 1) // are we not playing back at normal speed                {                  ToggleButton((int)Controls.OSD_FFWD' true); // make sure out button is in the down position                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  if (g_Player.Speed == 1)                  {                    ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                  }                }              }                if (iControl == (int)Controls.OSD_SKIPBWD)              {                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(-_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(-_immediateSeekValue);                }                ToggleButton((int)Controls.OSD_SKIPBWD' false); // pop the button back to it's up state              }                if (iControl == (int)Controls.OSD_SKIPFWD)              {                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(_immediateSeekValue);                }                ToggleButton((int)Controls.OSD_SKIPFWD' false); // pop the button back to it's up state              }                if (iControl == (int)Controls.OSD_MUTE)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VOL); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  int iValue = g_Player.Volume;                  GUISliderControl pSlider = GetControl((int)Controls.OSD_VOLUMESLIDER) as GUISliderControl;                  if (null != pSlider)                  {                    pSlider.Percentage = iValue; // Update our volume slider accordingly ...                  }                  ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER); // show the volume control                  ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER_LABEL);                  FocusControl(GetID' (int)Controls.OSD_VOLUMESLIDER' 0); // set focus to it                }                else // sub menu is off                {                  FocusControl(GetID' (int)Controls.OSD_MUTE' 0); // set focus to the mute button                }              }                if (iControl == (int)Controls.OSD_SUBTITLES)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_SUBTITLES); // hide or show the sub-menu                if (isSubMenuVisible)                {                  // set the controls values                  GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_SUBTITLE_DELAY);                  pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                  pControl.FloatInterval = 1;                  pControl.SetRange(-10' 10);                  SetSliderValue(-10' 10' m_subtitleDelay' (int)Controls.OSD_SUBTITLE_DELAY);                  SetCheckmarkValue(g_Player.EnableSubtitle' (int)Controls.OSD_SUBTITLE_ONOFF);                  // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY_LABEL);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_ONOFF);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_LIST);                    FocusControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY' 0);                  // set focus to the first control in our group                  PopulateSubTitles(); // populate the list control with subtitles for this video                }              }                if (iControl == (int)Controls.OSD_BOOKMARKS)              {                //not used              }                if (iControl == (int)Controls.OSD_VIDEO)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VIDEO); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  // set the controls values                  float fPercent = (float)(100 * (g_Player.CurrentPosition / g_Player.Duration));                  SetSliderValue(0.0f' 100.0f' (float)fPercent' (int)Controls.OSD_VIDEOPOS);                    bool hasPostProc = g_Player.HasPostprocessing;                  if (hasPostProc)                  {                    IPostProcessingEngine engine = PostProcessingEngine.GetInstance();                    SetCheckmarkValue(engine.EnablePostProcess' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    SetCheckmarkValue(engine.EnableResize' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    SetCheckmarkValue(engine.EnableCrop' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    SetCheckmarkValue(engine.EnableDeinterlace' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    UpdatePostProcessing();                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL_LABEL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL_LABEL);                  }                    //SetCheckmarkValue(g_stSettings.m_bNonInterleaved' Controls.OSD_NONINTERLEAVED);                  //SetCheckmarkValue(g_stSettings.m_bNoCache' Controls.OSD_NOCACHE);                  //SetCheckmarkValue(g_stSettings.m_bFrameRateConversions' Controls.OSD_ADJFRAMERATE);                    UpdateGammaContrastBrightness();                  // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_VIDEOPOS);                  ShowControl(GetID' (int)Controls.OSD_VIDEOPOS_LABEL);                  ShowControl(GetID' (int)Controls.OSD_NONINTERLEAVED);                  ShowControl(GetID' (int)Controls.OSD_NOCACHE);                  ShowControl(GetID' (int)Controls.OSD_ADJFRAMERATE);                  ShowControl(GetID' (int)Controls.OSD_SATURATIONLABEL);                  ShowControl(GetID' (int)Controls.OSD_SATURATION);                  ShowControl(GetID' (int)Controls.OSD_SHARPNESSLABEL);                  ShowControl(GetID' (int)Controls.OSD_SHARPNESS);                  ShowControl(GetID' (int)Controls.OSD_BRIGHTNESS);                  ShowControl(GetID' (int)Controls.OSD_BRIGHTNESSLABEL);                  ShowControl(GetID' (int)Controls.OSD_CONTRAST);                  ShowControl(GetID' (int)Controls.OSD_CONTRASTLABEL);                  ShowControl(GetID' (int)Controls.OSD_GAMMA);                  ShowControl(GetID' (int)Controls.OSD_GAMMALABEL);                  FocusControl(GetID' (int)Controls.OSD_VIDEOPOS' 0); // set focus to the first control in our group                }              }                if (iControl == (int)Controls.OSD_AUDIO)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_AUDIO); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  int iValue = g_Player.Volume;                  GUISliderControl pSlider = GetControl((int)Controls.OSD_AUDIOVOLUMESLIDER) as GUISliderControl;                  if (null != pSlider)                  {                    pSlider.Percentage = iValue; // Update our volume slider accordingly ...                  }                    // set the controls values                  GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_AVDELAY);                  pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                  pControl.SetRange(-20' 20);                  SetSliderValue(-20' 20' m_audioDelay' (int)Controls.OSD_AVDELAY);                    bool hasPostProc = (g_Player.HasPostprocessing || g_Player.HasAudioEngine);                  if (hasPostProc)                  {                    GUIPropertyManager.SetProperty("#TvOSD.AudioVideoDelayPossible"' "true");                    pControl.FloatInterval = 1;                  }                  else                  {                     GUIPropertyManager.SetProperty("#TvOSD.AudioVideoDelayPossible"' "false");                    pControl.FloatValue = 0;                    m_audioDelay = 0;                    pControl.FloatInterval = 0;                  }                    // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_AVDELAY);                  ShowControl(GetID' (int)Controls.OSD_AVDELAY_LABEL);                  ShowControl(GetID' (int)Controls.OSD_AUDIOSTREAM_LIST);                  ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER);                  ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER_LABEL);                    FocusControl(GetID' (int)Controls.OSD_AVDELAY' 0); // set focus to the first control in our group                  PopulateAudioStreams(); // populate the list control with audio streams for this video                }              }                return true;            }        }
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT: // fired when OSD is hidden            {              //if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(true);              // following line should stay. Problems with OSD not              // appearing are already fixed elsewhere              //for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)              //{              //  HideControl(GetID' i);              //}              Dispose();              GUIPropertyManager.SetProperty("#currentmodule"' GUIWindowManager.GetWindow(message.Param1).GetModuleName());              return true;            }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT: // fired when OSD is shown            {              // following line should stay. Problems with OSD not              // appearing are already fixed elsewhere              SqlBuilder sb = new SqlBuilder(StatementType.Select' typeof (Channel));              sb.AddConstraint(Operator.Equals' "istv"' 1);              sb.AddOrderByField(true' "sortOrder");              SqlStatement stmt = sb.GetStatement(true);              listTvChannels = ObjectFactory.GetCollection(typeof (Channel)' stmt.Execute());              GUIPropertyManager.SetProperty("#currentmodule"' GetModuleName());              previousProgram = null;              AllocResources();              // if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(false);              ResetAllControls(); // make sure the controls are positioned relevant to the OSD Y offset              isSubMenuVisible = false;              m_iActiveMenuButtonID = 0;              m_iActiveMenu = 0;              m_bNeedRefresh = false;              m_dateTime = DateTime.Now;              Reset();              FocusControl(GetID' (int)Controls.OSD_PLAY' 0); // set focus to play button by default when window is shown              ShowPrograms();              QueueAnimation(AnimationType.WindowOpen);              for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)              {                ShowControl(GetID' i);              }              if (g_Player.Paused)              {                ToggleButton((int)Controls.OSD_PLAY' true);                // make sure play button is down (so it shows the pause symbol)              }              else              {                ToggleButton((int)Controls.OSD_PLAY' false); // make sure play button is up (so it shows the play symbol)              }              m_delayInterval = MediaPortal.Player.Subtitles.SubEngine.GetInstance().DelayInterval;              if (m_delayInterval > 0)                m_subtitleDelay = MediaPortal.Player.Subtitles.SubEngine.GetInstance().Delay / m_delayInterval;              if (g_Player.HasPostprocessing)             {               m_delayIntervalAudio = PostProcessingEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = PostProcessingEngine.GetInstance().AudioDelay / m_delayIntervalAudio;               }             }             else if (g_Player.HasAudioEngine)             {               m_delayIntervalAudio = AudioPostEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = AudioPostEngine.GetInstance().AudioDelay / m_delayIntervalAudio;               }             }                g_Player.UpdateMediaInfoProperties();              GUIPropertyManager.SetProperty("#TV.View.HasTeletext"' TVHome.Card.HasTeletext.ToString());                MediaPortal.Player.VideoStreamFormat videoFormat = g_Player.GetVideoFormat();                GUIPropertyManager.SetProperty("#Play.Current.TSBitRate"'               ((float)MediaPortal.Player.g_Player.GetVideoFormat().bitrate / 1024 / 1024).ToString("0.00"' CultureInfo.InvariantCulture));                GUIPropertyManager.SetProperty("#TV.TuningDetails.SignalLevel"' TVHome.Card.SignalLevel.ToString());              GUIPropertyManager.SetProperty("#TV.TuningDetails.SignalQuality"' TVHome.Card.SignalQuality.ToString());                GUIPropertyManager.SetProperty("#Play.Current.VideoFormat.RawResolution"'                videoFormat.width.ToString() + "x" + videoFormat.height.ToString());                GUIPropertyManager.SetProperty("#TV.TuningDetails.FreeToAir"' string.Empty);                Channel chan = TVHome.Navigator.Channel;              if (chan != null)              {                IList<TuningDetail> details = chan.ReferringTuningDetail();                if (details.Count > 0)                {                  TuningDetail detail = null;                  switch (TVHome.Card.Type)                  {                    case TvLibrary.Interfaces.CardType.Analog:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 0)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.Atsc:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 1)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbC:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 2)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbS:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 3)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbT:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 4)                          detail = t;                      }                      break;                    default:                      detail = details[0];                      break;                  }                  if (detail != null)                  {                    GUIPropertyManager.SetProperty("#TV.TuningDetails.FreeToAir"' detail.FreeToAir.ToString());                  }                }              }            }            return true;            case GUIMessage.MessageType.GUI_MSG_SETFOCUS:            goto case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS;            case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS:            {              if (message.SenderControlId == 13)              {                return true;              }            }            break;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId; // get the ID of the control sending us a message                if (btnChannelUp != null && iControl == btnChannelUp.GetID)              {                OnNextChannel();              }                if (btnChannelDown != null && iControl == btnChannelDown.GetID)              {                OnPreviousChannel();              }                if (!g_Player.IsTVRecording)              {                if (btnPreviousProgram != null && iControl == btnPreviousProgram.GetID)                {                  Program prog = GetChannel().GetProgramAt(m_dateTime);                  if (prog != null)                  {                    prog =                      GetChannel().GetProgramAt(                        prog.StartTime.Subtract(new TimeSpan(0' 1' 0)));                    if (prog != null)                    {                      m_dateTime = prog.StartTime.AddMinutes(1);                    }                  }                  ShowPrograms();                }                if (iControl == btnNextProgram.GetID)                {                  Program prog = GetChannel().GetProgramAt(m_dateTime);                  if (prog != null)                  {                    prog = GetChannel().GetProgramAt(prog.EndTime.AddMinutes(+1));                    if (prog != null)                    {                      m_dateTime = prog.StartTime.AddMinutes(1);                    }                  }                  ShowPrograms();                }              }                if (iControl >= (int)Controls.OSD_VOLUMESLIDER)                // one of the settings (sub menu) controls is sending us a message              {                Handle_ControlSetting(iControl' message.Param1);              }                if (iControl == (int)Controls.OSD_PAUSE)              {                if (g_Player.Paused)                {                  ToggleButton((int)Controls.OSD_PLAY' true);                  // make sure play button is down (so it shows the pause symbol)                                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_PLAY' false);                  // make sure play button is up (so it shows the play symbol)                  if (g_Player.Speed < 1) // are we not playing back at normal speed                  {                    ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                    ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  }                  else                  {                    ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                    if (g_Player.Speed == 1)                    {                      ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                    }                  }                }              }                if (iControl == (int)Controls.OSD_PLAY)              {                //TODO                int iSpeed = g_Player.Speed;                if (iSpeed != 1) // we're in ffwd or rewind mode                {                  g_Player.Speed = 1; // drop back to single speed                  ToggleButton((int)Controls.OSD_REWIND' false); // pop all the relevant                  ToggleButton((int)Controls.OSD_FFWD' false); // buttons back to                  ToggleButton((int)Controls.OSD_PLAY' false); // their up state                }                else                {                  g_Player.Pause(); // Pause/Un-Pause playback                  if (g_Player.Paused)                  {                    ToggleButton((int)Controls.OSD_PLAY' true);                    // make sure play button is down (so it shows the pause symbol)                  }                  else                  {                    ToggleButton((int)Controls.OSD_PLAY' false);                    // make sure play button is up (so it shows the play symbol)                  }                }              }                if (iControl == (int)Controls.OSD_STOP)              {                if (isSubMenuVisible) // sub menu currently active ?                {                  FocusControl(GetID' m_iActiveMenuButtonID' 0); // set focus to last menu button                  ToggleSubMenu(0' m_iActiveMenu); // hide the currently active sub-menu                }                //g_application.m_guiWindowFullScreen.m_bOSDVisible = false;	// toggle the OSD off so parent window can de-init                Log.Debug("TVOSD:stop");                if (TVHome.Card.IsRecording)                {                  int id = TVHome.Card.RecordingScheduleId;                  if (id > 0)                  {                    TVHome.TvServer.StopRecordingSchedule(id);                  }                }                //GUIWindowManager.ShowPreviousWindow();							// go back to the previous window              }                if (iControl == (int)Controls.OSD_REWIND)              {                if (g_Player.Paused)                {                  g_Player.Pause(); // Unpause playback                }                  if (g_Player.Speed < 1) // are we not playing back at normal speed                {                  ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                  if (g_Player.Speed == 1)                  {                    ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  }                }              }                if (iControl == (int)Controls.OSD_FFWD)              {                if (g_Player.Paused)                {                  g_Player.Pause(); // Unpause playback                }                  if (g_Player.Speed > 1) // are we not playing back at normal speed                {                  ToggleButton((int)Controls.OSD_FFWD' true); // make sure out button is in the down position                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  if (g_Player.Speed == 1)                  {                    ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                  }                }              }                if (iControl == (int)Controls.OSD_SKIPBWD)              {                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(-_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(-_immediateSeekValue);                }                ToggleButton((int)Controls.OSD_SKIPBWD' false); // pop the button back to it's up state              }                if (iControl == (int)Controls.OSD_SKIPFWD)              {                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(_immediateSeekValue);                }                ToggleButton((int)Controls.OSD_SKIPFWD' false); // pop the button back to it's up state              }                if (iControl == (int)Controls.OSD_MUTE)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VOL); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  int iValue = g_Player.Volume;                  GUISliderControl pSlider = GetControl((int)Controls.OSD_VOLUMESLIDER) as GUISliderControl;                  if (null != pSlider)                  {                    pSlider.Percentage = iValue; // Update our volume slider accordingly ...                  }                  ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER); // show the volume control                  ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER_LABEL);                  FocusControl(GetID' (int)Controls.OSD_VOLUMESLIDER' 0); // set focus to it                }                else // sub menu is off                {                  FocusControl(GetID' (int)Controls.OSD_MUTE' 0); // set focus to the mute button                }              }                if (iControl == (int)Controls.OSD_SUBTITLES)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_SUBTITLES); // hide or show the sub-menu                if (isSubMenuVisible)                {                  // set the controls values                  GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_SUBTITLE_DELAY);                  pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                  pControl.FloatInterval = 1;                  pControl.SetRange(-10' 10);                  SetSliderValue(-10' 10' m_subtitleDelay' (int)Controls.OSD_SUBTITLE_DELAY);                  SetCheckmarkValue(g_Player.EnableSubtitle' (int)Controls.OSD_SUBTITLE_ONOFF);                  // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY_LABEL);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_ONOFF);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_LIST);                    FocusControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY' 0);                  // set focus to the first control in our group                  PopulateSubTitles(); // populate the list control with subtitles for this video                }              }                if (iControl == (int)Controls.OSD_BOOKMARKS)              {                //not used              }                if (iControl == (int)Controls.OSD_VIDEO)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VIDEO); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  // set the controls values                  float fPercent = (float)(100 * (g_Player.CurrentPosition / g_Player.Duration));                  SetSliderValue(0.0f' 100.0f' (float)fPercent' (int)Controls.OSD_VIDEOPOS);                    bool hasPostProc = g_Player.HasPostprocessing;                  if (hasPostProc)                  {                    IPostProcessingEngine engine = PostProcessingEngine.GetInstance();                    SetCheckmarkValue(engine.EnablePostProcess' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    SetCheckmarkValue(engine.EnableResize' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    SetCheckmarkValue(engine.EnableCrop' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    SetCheckmarkValue(engine.EnableDeinterlace' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    UpdatePostProcessing();                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL_LABEL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL_LABEL);                  }                    //SetCheckmarkValue(g_stSettings.m_bNonInterleaved' Controls.OSD_NONINTERLEAVED);                  //SetCheckmarkValue(g_stSettings.m_bNoCache' Controls.OSD_NOCACHE);                  //SetCheckmarkValue(g_stSettings.m_bFrameRateConversions' Controls.OSD_ADJFRAMERATE);                    UpdateGammaContrastBrightness();                  // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_VIDEOPOS);                  ShowControl(GetID' (int)Controls.OSD_VIDEOPOS_LABEL);                  ShowControl(GetID' (int)Controls.OSD_NONINTERLEAVED);                  ShowControl(GetID' (int)Controls.OSD_NOCACHE);                  ShowControl(GetID' (int)Controls.OSD_ADJFRAMERATE);                  ShowControl(GetID' (int)Controls.OSD_SATURATIONLABEL);                  ShowControl(GetID' (int)Controls.OSD_SATURATION);                  ShowControl(GetID' (int)Controls.OSD_SHARPNESSLABEL);                  ShowControl(GetID' (int)Controls.OSD_SHARPNESS);                  ShowControl(GetID' (int)Controls.OSD_BRIGHTNESS);                  ShowControl(GetID' (int)Controls.OSD_BRIGHTNESSLABEL);                  ShowControl(GetID' (int)Controls.OSD_CONTRAST);                  ShowControl(GetID' (int)Controls.OSD_CONTRASTLABEL);                  ShowControl(GetID' (int)Controls.OSD_GAMMA);                  ShowControl(GetID' (int)Controls.OSD_GAMMALABEL);                  FocusControl(GetID' (int)Controls.OSD_VIDEOPOS' 0); // set focus to the first control in our group                }              }                if (iControl == (int)Controls.OSD_AUDIO)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_AUDIO); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  int iValue = g_Player.Volume;                  GUISliderControl pSlider = GetControl((int)Controls.OSD_AUDIOVOLUMESLIDER) as GUISliderControl;                  if (null != pSlider)                  {                    pSlider.Percentage = iValue; // Update our volume slider accordingly ...                  }                    // set the controls values                  GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_AVDELAY);                  pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                  pControl.SetRange(-20' 20);                  SetSliderValue(-20' 20' m_audioDelay' (int)Controls.OSD_AVDELAY);                    bool hasPostProc = (g_Player.HasPostprocessing || g_Player.HasAudioEngine);                  if (hasPostProc)                  {                    GUIPropertyManager.SetProperty("#TvOSD.AudioVideoDelayPossible"' "true");                    pControl.FloatInterval = 1;                  }                  else                  {                     GUIPropertyManager.SetProperty("#TvOSD.AudioVideoDelayPossible"' "false");                    pControl.FloatValue = 0;                    m_audioDelay = 0;                    pControl.FloatInterval = 0;                  }                    // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_AVDELAY);                  ShowControl(GetID' (int)Controls.OSD_AVDELAY_LABEL);                  ShowControl(GetID' (int)Controls.OSD_AUDIOSTREAM_LIST);                  ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER);                  ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER_LABEL);                    FocusControl(GetID' (int)Controls.OSD_AVDELAY' 0); // set focus to the first control in our group                  PopulateAudioStreams(); // populate the list control with audio streams for this video                }              }                return true;            }        }
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT: // fired when OSD is hidden            {              //if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(true);              // following line should stay. Problems with OSD not              // appearing are already fixed elsewhere              //for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)              //{              //  HideControl(GetID' i);              //}              Dispose();              GUIPropertyManager.SetProperty("#currentmodule"' GUIWindowManager.GetWindow(message.Param1).GetModuleName());              return true;            }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT: // fired when OSD is shown            {              // following line should stay. Problems with OSD not              // appearing are already fixed elsewhere              SqlBuilder sb = new SqlBuilder(StatementType.Select' typeof (Channel));              sb.AddConstraint(Operator.Equals' "istv"' 1);              sb.AddOrderByField(true' "sortOrder");              SqlStatement stmt = sb.GetStatement(true);              listTvChannels = ObjectFactory.GetCollection(typeof (Channel)' stmt.Execute());              GUIPropertyManager.SetProperty("#currentmodule"' GetModuleName());              previousProgram = null;              AllocResources();              // if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(false);              ResetAllControls(); // make sure the controls are positioned relevant to the OSD Y offset              isSubMenuVisible = false;              m_iActiveMenuButtonID = 0;              m_iActiveMenu = 0;              m_bNeedRefresh = false;              m_dateTime = DateTime.Now;              Reset();              FocusControl(GetID' (int)Controls.OSD_PLAY' 0); // set focus to play button by default when window is shown              ShowPrograms();              QueueAnimation(AnimationType.WindowOpen);              for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)              {                ShowControl(GetID' i);              }              if (g_Player.Paused)              {                ToggleButton((int)Controls.OSD_PLAY' true);                // make sure play button is down (so it shows the pause symbol)              }              else              {                ToggleButton((int)Controls.OSD_PLAY' false); // make sure play button is up (so it shows the play symbol)              }              m_delayInterval = MediaPortal.Player.Subtitles.SubEngine.GetInstance().DelayInterval;              if (m_delayInterval > 0)                m_subtitleDelay = MediaPortal.Player.Subtitles.SubEngine.GetInstance().Delay / m_delayInterval;              if (g_Player.HasPostprocessing)             {               m_delayIntervalAudio = PostProcessingEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = PostProcessingEngine.GetInstance().AudioDelay / m_delayIntervalAudio;               }             }             else if (g_Player.HasAudioEngine)             {               m_delayIntervalAudio = AudioPostEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = AudioPostEngine.GetInstance().AudioDelay / m_delayIntervalAudio;               }             }                g_Player.UpdateMediaInfoProperties();              GUIPropertyManager.SetProperty("#TV.View.HasTeletext"' TVHome.Card.HasTeletext.ToString());                MediaPortal.Player.VideoStreamFormat videoFormat = g_Player.GetVideoFormat();                GUIPropertyManager.SetProperty("#Play.Current.TSBitRate"'               ((float)MediaPortal.Player.g_Player.GetVideoFormat().bitrate / 1024 / 1024).ToString("0.00"' CultureInfo.InvariantCulture));                GUIPropertyManager.SetProperty("#TV.TuningDetails.SignalLevel"' TVHome.Card.SignalLevel.ToString());              GUIPropertyManager.SetProperty("#TV.TuningDetails.SignalQuality"' TVHome.Card.SignalQuality.ToString());                GUIPropertyManager.SetProperty("#Play.Current.VideoFormat.RawResolution"'                videoFormat.width.ToString() + "x" + videoFormat.height.ToString());                GUIPropertyManager.SetProperty("#TV.TuningDetails.FreeToAir"' string.Empty);                Channel chan = TVHome.Navigator.Channel;              if (chan != null)              {                IList<TuningDetail> details = chan.ReferringTuningDetail();                if (details.Count > 0)                {                  TuningDetail detail = null;                  switch (TVHome.Card.Type)                  {                    case TvLibrary.Interfaces.CardType.Analog:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 0)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.Atsc:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 1)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbC:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 2)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbS:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 3)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbT:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 4)                          detail = t;                      }                      break;                    default:                      detail = details[0];                      break;                  }                  if (detail != null)                  {                    GUIPropertyManager.SetProperty("#TV.TuningDetails.FreeToAir"' detail.FreeToAir.ToString());                  }                }              }            }            return true;            case GUIMessage.MessageType.GUI_MSG_SETFOCUS:            goto case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS;            case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS:            {              if (message.SenderControlId == 13)              {                return true;              }            }            break;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId; // get the ID of the control sending us a message                if (btnChannelUp != null && iControl == btnChannelUp.GetID)              {                OnNextChannel();              }                if (btnChannelDown != null && iControl == btnChannelDown.GetID)              {                OnPreviousChannel();              }                if (!g_Player.IsTVRecording)              {                if (btnPreviousProgram != null && iControl == btnPreviousProgram.GetID)                {                  Program prog = GetChannel().GetProgramAt(m_dateTime);                  if (prog != null)                  {                    prog =                      GetChannel().GetProgramAt(                        prog.StartTime.Subtract(new TimeSpan(0' 1' 0)));                    if (prog != null)                    {                      m_dateTime = prog.StartTime.AddMinutes(1);                    }                  }                  ShowPrograms();                }                if (iControl == btnNextProgram.GetID)                {                  Program prog = GetChannel().GetProgramAt(m_dateTime);                  if (prog != null)                  {                    prog = GetChannel().GetProgramAt(prog.EndTime.AddMinutes(+1));                    if (prog != null)                    {                      m_dateTime = prog.StartTime.AddMinutes(1);                    }                  }                  ShowPrograms();                }              }                if (iControl >= (int)Controls.OSD_VOLUMESLIDER)                // one of the settings (sub menu) controls is sending us a message              {                Handle_ControlSetting(iControl' message.Param1);              }                if (iControl == (int)Controls.OSD_PAUSE)              {                if (g_Player.Paused)                {                  ToggleButton((int)Controls.OSD_PLAY' true);                  // make sure play button is down (so it shows the pause symbol)                                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_PLAY' false);                  // make sure play button is up (so it shows the play symbol)                  if (g_Player.Speed < 1) // are we not playing back at normal speed                  {                    ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                    ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  }                  else                  {                    ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                    if (g_Player.Speed == 1)                    {                      ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                    }                  }                }              }                if (iControl == (int)Controls.OSD_PLAY)              {                //TODO                int iSpeed = g_Player.Speed;                if (iSpeed != 1) // we're in ffwd or rewind mode                {                  g_Player.Speed = 1; // drop back to single speed                  ToggleButton((int)Controls.OSD_REWIND' false); // pop all the relevant                  ToggleButton((int)Controls.OSD_FFWD' false); // buttons back to                  ToggleButton((int)Controls.OSD_PLAY' false); // their up state                }                else                {                  g_Player.Pause(); // Pause/Un-Pause playback                  if (g_Player.Paused)                  {                    ToggleButton((int)Controls.OSD_PLAY' true);                    // make sure play button is down (so it shows the pause symbol)                  }                  else                  {                    ToggleButton((int)Controls.OSD_PLAY' false);                    // make sure play button is up (so it shows the play symbol)                  }                }              }                if (iControl == (int)Controls.OSD_STOP)              {                if (isSubMenuVisible) // sub menu currently active ?                {                  FocusControl(GetID' m_iActiveMenuButtonID' 0); // set focus to last menu button                  ToggleSubMenu(0' m_iActiveMenu); // hide the currently active sub-menu                }                //g_application.m_guiWindowFullScreen.m_bOSDVisible = false;	// toggle the OSD off so parent window can de-init                Log.Debug("TVOSD:stop");                if (TVHome.Card.IsRecording)                {                  int id = TVHome.Card.RecordingScheduleId;                  if (id > 0)                  {                    TVHome.TvServer.StopRecordingSchedule(id);                  }                }                //GUIWindowManager.ShowPreviousWindow();							// go back to the previous window              }                if (iControl == (int)Controls.OSD_REWIND)              {                if (g_Player.Paused)                {                  g_Player.Pause(); // Unpause playback                }                  if (g_Player.Speed < 1) // are we not playing back at normal speed                {                  ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                  if (g_Player.Speed == 1)                  {                    ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  }                }              }                if (iControl == (int)Controls.OSD_FFWD)              {                if (g_Player.Paused)                {                  g_Player.Pause(); // Unpause playback                }                  if (g_Player.Speed > 1) // are we not playing back at normal speed                {                  ToggleButton((int)Controls.OSD_FFWD' true); // make sure out button is in the down position                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  if (g_Player.Speed == 1)                  {                    ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                  }                }              }                if (iControl == (int)Controls.OSD_SKIPBWD)              {                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(-_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(-_immediateSeekValue);                }                ToggleButton((int)Controls.OSD_SKIPBWD' false); // pop the button back to it's up state              }                if (iControl == (int)Controls.OSD_SKIPFWD)              {                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(_immediateSeekValue);                }                ToggleButton((int)Controls.OSD_SKIPFWD' false); // pop the button back to it's up state              }                if (iControl == (int)Controls.OSD_MUTE)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VOL); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  int iValue = g_Player.Volume;                  GUISliderControl pSlider = GetControl((int)Controls.OSD_VOLUMESLIDER) as GUISliderControl;                  if (null != pSlider)                  {                    pSlider.Percentage = iValue; // Update our volume slider accordingly ...                  }                  ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER); // show the volume control                  ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER_LABEL);                  FocusControl(GetID' (int)Controls.OSD_VOLUMESLIDER' 0); // set focus to it                }                else // sub menu is off                {                  FocusControl(GetID' (int)Controls.OSD_MUTE' 0); // set focus to the mute button                }              }                if (iControl == (int)Controls.OSD_SUBTITLES)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_SUBTITLES); // hide or show the sub-menu                if (isSubMenuVisible)                {                  // set the controls values                  GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_SUBTITLE_DELAY);                  pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                  pControl.FloatInterval = 1;                  pControl.SetRange(-10' 10);                  SetSliderValue(-10' 10' m_subtitleDelay' (int)Controls.OSD_SUBTITLE_DELAY);                  SetCheckmarkValue(g_Player.EnableSubtitle' (int)Controls.OSD_SUBTITLE_ONOFF);                  // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY_LABEL);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_ONOFF);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_LIST);                    FocusControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY' 0);                  // set focus to the first control in our group                  PopulateSubTitles(); // populate the list control with subtitles for this video                }              }                if (iControl == (int)Controls.OSD_BOOKMARKS)              {                //not used              }                if (iControl == (int)Controls.OSD_VIDEO)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VIDEO); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  // set the controls values                  float fPercent = (float)(100 * (g_Player.CurrentPosition / g_Player.Duration));                  SetSliderValue(0.0f' 100.0f' (float)fPercent' (int)Controls.OSD_VIDEOPOS);                    bool hasPostProc = g_Player.HasPostprocessing;                  if (hasPostProc)                  {                    IPostProcessingEngine engine = PostProcessingEngine.GetInstance();                    SetCheckmarkValue(engine.EnablePostProcess' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    SetCheckmarkValue(engine.EnableResize' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    SetCheckmarkValue(engine.EnableCrop' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    SetCheckmarkValue(engine.EnableDeinterlace' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    UpdatePostProcessing();                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL_LABEL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL_LABEL);                  }                    //SetCheckmarkValue(g_stSettings.m_bNonInterleaved' Controls.OSD_NONINTERLEAVED);                  //SetCheckmarkValue(g_stSettings.m_bNoCache' Controls.OSD_NOCACHE);                  //SetCheckmarkValue(g_stSettings.m_bFrameRateConversions' Controls.OSD_ADJFRAMERATE);                    UpdateGammaContrastBrightness();                  // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_VIDEOPOS);                  ShowControl(GetID' (int)Controls.OSD_VIDEOPOS_LABEL);                  ShowControl(GetID' (int)Controls.OSD_NONINTERLEAVED);                  ShowControl(GetID' (int)Controls.OSD_NOCACHE);                  ShowControl(GetID' (int)Controls.OSD_ADJFRAMERATE);                  ShowControl(GetID' (int)Controls.OSD_SATURATIONLABEL);                  ShowControl(GetID' (int)Controls.OSD_SATURATION);                  ShowControl(GetID' (int)Controls.OSD_SHARPNESSLABEL);                  ShowControl(GetID' (int)Controls.OSD_SHARPNESS);                  ShowControl(GetID' (int)Controls.OSD_BRIGHTNESS);                  ShowControl(GetID' (int)Controls.OSD_BRIGHTNESSLABEL);                  ShowControl(GetID' (int)Controls.OSD_CONTRAST);                  ShowControl(GetID' (int)Controls.OSD_CONTRASTLABEL);                  ShowControl(GetID' (int)Controls.OSD_GAMMA);                  ShowControl(GetID' (int)Controls.OSD_GAMMALABEL);                  FocusControl(GetID' (int)Controls.OSD_VIDEOPOS' 0); // set focus to the first control in our group                }              }                if (iControl == (int)Controls.OSD_AUDIO)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_AUDIO); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  int iValue = g_Player.Volume;                  GUISliderControl pSlider = GetControl((int)Controls.OSD_AUDIOVOLUMESLIDER) as GUISliderControl;                  if (null != pSlider)                  {                    pSlider.Percentage = iValue; // Update our volume slider accordingly ...                  }                    // set the controls values                  GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_AVDELAY);                  pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                  pControl.SetRange(-20' 20);                  SetSliderValue(-20' 20' m_audioDelay' (int)Controls.OSD_AVDELAY);                    bool hasPostProc = (g_Player.HasPostprocessing || g_Player.HasAudioEngine);                  if (hasPostProc)                  {                    GUIPropertyManager.SetProperty("#TvOSD.AudioVideoDelayPossible"' "true");                    pControl.FloatInterval = 1;                  }                  else                  {                     GUIPropertyManager.SetProperty("#TvOSD.AudioVideoDelayPossible"' "false");                    pControl.FloatValue = 0;                    m_audioDelay = 0;                    pControl.FloatInterval = 0;                  }                    // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_AVDELAY);                  ShowControl(GetID' (int)Controls.OSD_AVDELAY_LABEL);                  ShowControl(GetID' (int)Controls.OSD_AUDIOSTREAM_LIST);                  ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER);                  ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER_LABEL);                    FocusControl(GetID' (int)Controls.OSD_AVDELAY' 0); // set focus to the first control in our group                  PopulateAudioStreams(); // populate the list control with audio streams for this video                }              }                return true;            }        }
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT: // fired when OSD is hidden            {              //if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(true);              // following line should stay. Problems with OSD not              // appearing are already fixed elsewhere              //for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)              //{              //  HideControl(GetID' i);              //}              Dispose();              GUIPropertyManager.SetProperty("#currentmodule"' GUIWindowManager.GetWindow(message.Param1).GetModuleName());              return true;            }              case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT: // fired when OSD is shown            {              // following line should stay. Problems with OSD not              // appearing are already fixed elsewhere              SqlBuilder sb = new SqlBuilder(StatementType.Select' typeof (Channel));              sb.AddConstraint(Operator.Equals' "istv"' 1);              sb.AddOrderByField(true' "sortOrder");              SqlStatement stmt = sb.GetStatement(true);              listTvChannels = ObjectFactory.GetCollection(typeof (Channel)' stmt.Execute());              GUIPropertyManager.SetProperty("#currentmodule"' GetModuleName());              previousProgram = null;              AllocResources();              // if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(false);              ResetAllControls(); // make sure the controls are positioned relevant to the OSD Y offset              isSubMenuVisible = false;              m_iActiveMenuButtonID = 0;              m_iActiveMenu = 0;              m_bNeedRefresh = false;              m_dateTime = DateTime.Now;              Reset();              FocusControl(GetID' (int)Controls.OSD_PLAY' 0); // set focus to play button by default when window is shown              ShowPrograms();              QueueAnimation(AnimationType.WindowOpen);              for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)              {                ShowControl(GetID' i);              }              if (g_Player.Paused)              {                ToggleButton((int)Controls.OSD_PLAY' true);                // make sure play button is down (so it shows the pause symbol)              }              else              {                ToggleButton((int)Controls.OSD_PLAY' false); // make sure play button is up (so it shows the play symbol)              }              m_delayInterval = MediaPortal.Player.Subtitles.SubEngine.GetInstance().DelayInterval;              if (m_delayInterval > 0)                m_subtitleDelay = MediaPortal.Player.Subtitles.SubEngine.GetInstance().Delay / m_delayInterval;              if (g_Player.HasPostprocessing)             {               m_delayIntervalAudio = PostProcessingEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = PostProcessingEngine.GetInstance().AudioDelay / m_delayIntervalAudio;               }             }             else if (g_Player.HasAudioEngine)             {               m_delayIntervalAudio = AudioPostEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = AudioPostEngine.GetInstance().AudioDelay / m_delayIntervalAudio;               }             }                g_Player.UpdateMediaInfoProperties();              GUIPropertyManager.SetProperty("#TV.View.HasTeletext"' TVHome.Card.HasTeletext.ToString());                MediaPortal.Player.VideoStreamFormat videoFormat = g_Player.GetVideoFormat();                GUIPropertyManager.SetProperty("#Play.Current.TSBitRate"'               ((float)MediaPortal.Player.g_Player.GetVideoFormat().bitrate / 1024 / 1024).ToString("0.00"' CultureInfo.InvariantCulture));                GUIPropertyManager.SetProperty("#TV.TuningDetails.SignalLevel"' TVHome.Card.SignalLevel.ToString());              GUIPropertyManager.SetProperty("#TV.TuningDetails.SignalQuality"' TVHome.Card.SignalQuality.ToString());                GUIPropertyManager.SetProperty("#Play.Current.VideoFormat.RawResolution"'                videoFormat.width.ToString() + "x" + videoFormat.height.ToString());                GUIPropertyManager.SetProperty("#TV.TuningDetails.FreeToAir"' string.Empty);                Channel chan = TVHome.Navigator.Channel;              if (chan != null)              {                IList<TuningDetail> details = chan.ReferringTuningDetail();                if (details.Count > 0)                {                  TuningDetail detail = null;                  switch (TVHome.Card.Type)                  {                    case TvLibrary.Interfaces.CardType.Analog:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 0)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.Atsc:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 1)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbC:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 2)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbS:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 3)                          detail = t;                      }                      break;                    case TvLibrary.Interfaces.CardType.DvbT:                      foreach (TuningDetail t in details)                      {                        if (t.ChannelType == 4)                          detail = t;                      }                      break;                    default:                      detail = details[0];                      break;                  }                  if (detail != null)                  {                    GUIPropertyManager.SetProperty("#TV.TuningDetails.FreeToAir"' detail.FreeToAir.ToString());                  }                }              }            }            return true;            case GUIMessage.MessageType.GUI_MSG_SETFOCUS:            goto case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS;            case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS:            {              if (message.SenderControlId == 13)              {                return true;              }            }            break;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId; // get the ID of the control sending us a message                if (btnChannelUp != null && iControl == btnChannelUp.GetID)              {                OnNextChannel();              }                if (btnChannelDown != null && iControl == btnChannelDown.GetID)              {                OnPreviousChannel();              }                if (!g_Player.IsTVRecording)              {                if (btnPreviousProgram != null && iControl == btnPreviousProgram.GetID)                {                  Program prog = GetChannel().GetProgramAt(m_dateTime);                  if (prog != null)                  {                    prog =                      GetChannel().GetProgramAt(                        prog.StartTime.Subtract(new TimeSpan(0' 1' 0)));                    if (prog != null)                    {                      m_dateTime = prog.StartTime.AddMinutes(1);                    }                  }                  ShowPrograms();                }                if (iControl == btnNextProgram.GetID)                {                  Program prog = GetChannel().GetProgramAt(m_dateTime);                  if (prog != null)                  {                    prog = GetChannel().GetProgramAt(prog.EndTime.AddMinutes(+1));                    if (prog != null)                    {                      m_dateTime = prog.StartTime.AddMinutes(1);                    }                  }                  ShowPrograms();                }              }                if (iControl >= (int)Controls.OSD_VOLUMESLIDER)                // one of the settings (sub menu) controls is sending us a message              {                Handle_ControlSetting(iControl' message.Param1);              }                if (iControl == (int)Controls.OSD_PAUSE)              {                if (g_Player.Paused)                {                  ToggleButton((int)Controls.OSD_PLAY' true);                  // make sure play button is down (so it shows the pause symbol)                                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_PLAY' false);                  // make sure play button is up (so it shows the play symbol)                  if (g_Player.Speed < 1) // are we not playing back at normal speed                  {                    ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                    ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  }                  else                  {                    ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                    if (g_Player.Speed == 1)                    {                      ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                    }                  }                }              }                if (iControl == (int)Controls.OSD_PLAY)              {                //TODO                int iSpeed = g_Player.Speed;                if (iSpeed != 1) // we're in ffwd or rewind mode                {                  g_Player.Speed = 1; // drop back to single speed                  ToggleButton((int)Controls.OSD_REWIND' false); // pop all the relevant                  ToggleButton((int)Controls.OSD_FFWD' false); // buttons back to                  ToggleButton((int)Controls.OSD_PLAY' false); // their up state                }                else                {                  g_Player.Pause(); // Pause/Un-Pause playback                  if (g_Player.Paused)                  {                    ToggleButton((int)Controls.OSD_PLAY' true);                    // make sure play button is down (so it shows the pause symbol)                  }                  else                  {                    ToggleButton((int)Controls.OSD_PLAY' false);                    // make sure play button is up (so it shows the play symbol)                  }                }              }                if (iControl == (int)Controls.OSD_STOP)              {                if (isSubMenuVisible) // sub menu currently active ?                {                  FocusControl(GetID' m_iActiveMenuButtonID' 0); // set focus to last menu button                  ToggleSubMenu(0' m_iActiveMenu); // hide the currently active sub-menu                }                //g_application.m_guiWindowFullScreen.m_bOSDVisible = false;	// toggle the OSD off so parent window can de-init                Log.Debug("TVOSD:stop");                if (TVHome.Card.IsRecording)                {                  int id = TVHome.Card.RecordingScheduleId;                  if (id > 0)                  {                    TVHome.TvServer.StopRecordingSchedule(id);                  }                }                //GUIWindowManager.ShowPreviousWindow();							// go back to the previous window              }                if (iControl == (int)Controls.OSD_REWIND)              {                if (g_Player.Paused)                {                  g_Player.Pause(); // Unpause playback                }                  if (g_Player.Speed < 1) // are we not playing back at normal speed                {                  ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                  if (g_Player.Speed == 1)                  {                    ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  }                }              }                if (iControl == (int)Controls.OSD_FFWD)              {                if (g_Player.Paused)                {                  g_Player.Pause(); // Unpause playback                }                  if (g_Player.Speed > 1) // are we not playing back at normal speed                {                  ToggleButton((int)Controls.OSD_FFWD' true); // make sure out button is in the down position                  ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                }                else                {                  ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                  if (g_Player.Speed == 1)                  {                    ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                  }                }              }                if (iControl == (int)Controls.OSD_SKIPBWD)              {                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(-_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(-_immediateSeekValue);                }                ToggleButton((int)Controls.OSD_SKIPBWD' false); // pop the button back to it's up state              }                if (iControl == (int)Controls.OSD_SKIPFWD)              {                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(_immediateSeekValue);                }                ToggleButton((int)Controls.OSD_SKIPFWD' false); // pop the button back to it's up state              }                if (iControl == (int)Controls.OSD_MUTE)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VOL); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  int iValue = g_Player.Volume;                  GUISliderControl pSlider = GetControl((int)Controls.OSD_VOLUMESLIDER) as GUISliderControl;                  if (null != pSlider)                  {                    pSlider.Percentage = iValue; // Update our volume slider accordingly ...                  }                  ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER); // show the volume control                  ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER_LABEL);                  FocusControl(GetID' (int)Controls.OSD_VOLUMESLIDER' 0); // set focus to it                }                else // sub menu is off                {                  FocusControl(GetID' (int)Controls.OSD_MUTE' 0); // set focus to the mute button                }              }                if (iControl == (int)Controls.OSD_SUBTITLES)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_SUBTITLES); // hide or show the sub-menu                if (isSubMenuVisible)                {                  // set the controls values                  GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_SUBTITLE_DELAY);                  pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                  pControl.FloatInterval = 1;                  pControl.SetRange(-10' 10);                  SetSliderValue(-10' 10' m_subtitleDelay' (int)Controls.OSD_SUBTITLE_DELAY);                  SetCheckmarkValue(g_Player.EnableSubtitle' (int)Controls.OSD_SUBTITLE_ONOFF);                  // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY_LABEL);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_ONOFF);                  ShowControl(GetID' (int)Controls.OSD_SUBTITLE_LIST);                    FocusControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY' 0);                  // set focus to the first control in our group                  PopulateSubTitles(); // populate the list control with subtitles for this video                }              }                if (iControl == (int)Controls.OSD_BOOKMARKS)              {                //not used              }                if (iControl == (int)Controls.OSD_VIDEO)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VIDEO); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  // set the controls values                  float fPercent = (float)(100 * (g_Player.CurrentPosition / g_Player.Duration));                  SetSliderValue(0.0f' 100.0f' (float)fPercent' (int)Controls.OSD_VIDEOPOS);                    bool hasPostProc = g_Player.HasPostprocessing;                  if (hasPostProc)                  {                    IPostProcessingEngine engine = PostProcessingEngine.GetInstance();                    SetCheckmarkValue(engine.EnablePostProcess' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    SetCheckmarkValue(engine.EnableResize' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    SetCheckmarkValue(engine.EnableCrop' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    SetCheckmarkValue(engine.EnableDeinterlace' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    UpdatePostProcessing();                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL_LABEL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL_LABEL);                  }                    //SetCheckmarkValue(g_stSettings.m_bNonInterleaved' Controls.OSD_NONINTERLEAVED);                  //SetCheckmarkValue(g_stSettings.m_bNoCache' Controls.OSD_NOCACHE);                  //SetCheckmarkValue(g_stSettings.m_bFrameRateConversions' Controls.OSD_ADJFRAMERATE);                    UpdateGammaContrastBrightness();                  // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_VIDEOPOS);                  ShowControl(GetID' (int)Controls.OSD_VIDEOPOS_LABEL);                  ShowControl(GetID' (int)Controls.OSD_NONINTERLEAVED);                  ShowControl(GetID' (int)Controls.OSD_NOCACHE);                  ShowControl(GetID' (int)Controls.OSD_ADJFRAMERATE);                  ShowControl(GetID' (int)Controls.OSD_SATURATIONLABEL);                  ShowControl(GetID' (int)Controls.OSD_SATURATION);                  ShowControl(GetID' (int)Controls.OSD_SHARPNESSLABEL);                  ShowControl(GetID' (int)Controls.OSD_SHARPNESS);                  ShowControl(GetID' (int)Controls.OSD_BRIGHTNESS);                  ShowControl(GetID' (int)Controls.OSD_BRIGHTNESSLABEL);                  ShowControl(GetID' (int)Controls.OSD_CONTRAST);                  ShowControl(GetID' (int)Controls.OSD_CONTRASTLABEL);                  ShowControl(GetID' (int)Controls.OSD_GAMMA);                  ShowControl(GetID' (int)Controls.OSD_GAMMALABEL);                  FocusControl(GetID' (int)Controls.OSD_VIDEOPOS' 0); // set focus to the first control in our group                }              }                if (iControl == (int)Controls.OSD_AUDIO)              {                ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_AUDIO); // hide or show the sub-menu                if (isSubMenuVisible) // is sub menu on?                {                  int iValue = g_Player.Volume;                  GUISliderControl pSlider = GetControl((int)Controls.OSD_AUDIOVOLUMESLIDER) as GUISliderControl;                  if (null != pSlider)                  {                    pSlider.Percentage = iValue; // Update our volume slider accordingly ...                  }                    // set the controls values                  GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_AVDELAY);                  pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                  pControl.SetRange(-20' 20);                  SetSliderValue(-20' 20' m_audioDelay' (int)Controls.OSD_AVDELAY);                    bool hasPostProc = (g_Player.HasPostprocessing || g_Player.HasAudioEngine);                  if (hasPostProc)                  {                    GUIPropertyManager.SetProperty("#TvOSD.AudioVideoDelayPossible"' "true");                    pControl.FloatInterval = 1;                  }                  else                  {                     GUIPropertyManager.SetProperty("#TvOSD.AudioVideoDelayPossible"' "false");                    pControl.FloatValue = 0;                    m_audioDelay = 0;                    pControl.FloatInterval = 0;                  }                    // show the controls on this sub menu                  ShowControl(GetID' (int)Controls.OSD_AVDELAY);                  ShowControl(GetID' (int)Controls.OSD_AVDELAY_LABEL);                  ShowControl(GetID' (int)Controls.OSD_AUDIOSTREAM_LIST);                  ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER);                  ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER_LABEL);                    FocusControl(GetID' (int)Controls.OSD_AVDELAY' 0); // set focus to the first control in our group                  PopulateAudioStreams(); // populate the list control with audio streams for this video                }              }                return true;            }        }
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,UpdateGammaContrastBrightness,The following statement contains a magic number: SetSliderValue(0.0f' 100.0f' (float)fBrightNess' (int)Controls.OSD_BRIGHTNESS);
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,UpdateGammaContrastBrightness,The following statement contains a magic number: SetSliderValue(0.0f' 100.0f' (float)fContrast' (int)Controls.OSD_CONTRAST);
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,UpdateGammaContrastBrightness,The following statement contains a magic number: SetSliderValue(0.0f' 100.0f' (float)fGamma' (int)Controls.OSD_GAMMA);
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,UpdateGammaContrastBrightness,The following statement contains a magic number: SetSliderValue(0.0f' 100.0f' (float)fSaturation' (int)Controls.OSD_SATURATION);
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,UpdateGammaContrastBrightness,The following statement contains a magic number: SetSliderValue(0.0f' 100.0f' (float)fSharpness' (int)Controls.OSD_SHARPNESS);
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,UpdatePostProcessing,The following statement contains a magic number: SetSliderValue(0.0f' 100.0f' (float)engine.CropVertical' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL);
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,UpdatePostProcessing,The following statement contains a magic number: SetSliderValue(0.0f' 100.0f' (float)engine.CropHorizontal' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL);
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,ToggleSubMenu,The following statement contains a magic number: iX = (pButton.XPosition + (pButton.Width / 2));
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,ToggleSubMenu,The following statement contains a magic number: pImgNib.SetPosition(iX - (pImgNib.TextureWidth / 2)' iY - pImgNib.TextureHeight);
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,PopulateAudioStreams,The following statement contains a magic number: string strLabel = GUILocalizeStrings.Get(460);
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,PopulateAudioStreams,The following statement contains a magic number: string strActiveLabel = GUILocalizeStrings.Get(461);
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,PopulateSubTitles,The following statement contains a magic number: string strLabel = GUILocalizeStrings.Get(462);
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,PopulateSubTitles,The following statement contains a magic number: string strActiveLabel = GUILocalizeStrings.Get(461);
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,ResetAllControls,The following statement contains a magic number: dwPosY < (int)100
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,SetRecorderStatus,The following statement contains a magic number: ts.TotalSeconds > 15 || forced
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,UpdateProgressBar,The following statement contains a magic number: GUIPropertyManager.SetProperty("#Play.Current.TSBitRate"'           ((float)MediaPortal.Player.g_Player.GetVideoFormat().bitrate / 1024 / 1024).ToString("0.00"' CultureInfo.InvariantCulture));
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,UpdateProgressBar,The following statement contains a magic number: GUIPropertyManager.SetProperty("#Play.Current.TSBitRate"'           ((float)MediaPortal.Player.g_Player.GetVideoFormat().bitrate / 1024 / 1024).ToString("0.00"' CultureInfo.InvariantCulture));
Magic Number,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,UpdateProgressBar,The following statement contains a magic number: fPercent *= 100.0d;
Magic Number,TvPlugin,TvOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVOverlay.cs,ShouldRenderLayer,The following statement contains a magic number: ts.TotalMilliseconds < 1000
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnPageLoad,The following statement contains a magic number: util = new TVUtil(31);
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,SetLabels,The following statement contains a magic number: item.Label3 = GUILocalizeStrings.Get(682);
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,SetLabels,The following statement contains a magic number: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              item.Label2 = String.Format("{0} {1} - {2}"'                                          Utils.GetShortDayString(rec.StartTime)'                                          rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                          rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              ;              break;            case ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekly:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650);              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,SetLabels,The following statement contains a magic number: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              item.Label2 = String.Format("{0} {1} - {2}"'                                          Utils.GetShortDayString(rec.StartTime)'                                          rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                          rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              ;              break;            case ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekly:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650);              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,SetLabels,The following statement contains a magic number: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              item.Label2 = String.Format("{0} {1} - {2}"'                                          Utils.GetShortDayString(rec.StartTime)'                                          rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                          rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              ;              break;            case ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekly:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650);              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,SetLabels,The following statement contains a magic number: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              item.Label2 = String.Format("{0} {1} - {2}"'                                          Utils.GetShortDayString(rec.StartTime)'                                          rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                          rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              ;              break;            case ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekly:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650);              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,SetLabels,The following statement contains a magic number: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              item.Label2 = String.Format("{0} {1} - {2}"'                                          Utils.GetShortDayString(rec.StartTime)'                                          rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                          rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              ;              break;            case ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekly:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650);              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,SetLabels,The following statement contains a magic number: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              item.Label2 = String.Format("{0} {1} - {2}"'                                          Utils.GetShortDayString(rec.StartTime)'                                          rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                          rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              ;              break;            case ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekly:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650);              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,SetLabels,The following statement contains a magic number: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              item.Label2 = String.Format("{0} {1} - {2}"'                                          Utils.GetShortDayString(rec.StartTime)'                                          rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                          rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              ;              break;            case ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekly:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650);              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,SetLabels,The following statement contains a magic number: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              item.Label2 = String.Format("{0} {1} - {2}"'                                          Utils.GetShortDayString(rec.StartTime)'                                          rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                          rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              ;              break;            case ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekly:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650);              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,SetLabels,The following statement contains a magic number: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              item.Label2 = String.Format("{0} {1} - {2}"'                                          Utils.GetShortDayString(rec.StartTime)'                                          rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                          rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              ;              break;            case ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekly:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650);              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,SetLabels,The following statement contains a magic number: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              item.Label2 = String.Format("{0} {1} - {2}"'                                          Utils.GetShortDayString(rec.StartTime)'                                          rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                          rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              ;              break;            case ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekly:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650);              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,SetLabels,The following statement contains a magic number: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              item.Label2 = String.Format("{0} {1} - {2}"'                                          Utils.GetShortDayString(rec.StartTime)'                                          rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                          rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              ;              break;            case ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekly:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650);              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,SetLabels,The following statement contains a magic number: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              item.Label2 = String.Format("{0} {1} - {2}"'                                          Utils.GetShortDayString(rec.StartTime)'                                          rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                          rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              ;              break;            case ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekly:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650);              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,SetLabels,The following statement contains a magic number: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              item.Label2 = String.Format("{0} {1} - {2}"'                                          Utils.GetShortDayString(rec.StartTime)'                                          rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                          rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              ;              break;            case ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekly:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650);              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,SetLabels,The following statement contains a magic number: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              item.Label2 = String.Format("{0} {1} - {2}"'                                          Utils.GetShortDayString(rec.StartTime)'                                          rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                          rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              ;              break;            case ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekly:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650);              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,SetLabels,The following statement contains a magic number: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              item.Label2 = String.Format("{0} {1} - {2}"'                                          Utils.GetShortDayString(rec.StartTime)'                                          rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                          rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              ;              break;            case ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekly:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650);              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,SetLabels,The following statement contains a magic number: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              item.Label2 = String.Format("{0} {1} - {2}"'                                          Utils.GetShortDayString(rec.StartTime)'                                          rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                          rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              ;              break;            case ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekly:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650);              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,SetLabels,The following statement contains a magic number: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              item.Label2 = String.Format("{0} {1} - {2}"'                                          Utils.GetShortDayString(rec.StartTime)'                                          rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                          rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              ;              break;            case ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekly:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650);              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,SetLabels,The following statement contains a magic number: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              item.Label2 = String.Format("{0} {1} - {2}"'                                          Utils.GetShortDayString(rec.StartTime)'                                          rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                          rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              ;              break;            case ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekly:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650);              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,SetLabels,The following statement contains a magic number: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              item.Label2 = String.Format("{0} {1} - {2}"'                                          Utils.GetShortDayString(rec.StartTime)'                                          rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                          rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              ;              break;            case ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekly:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650);              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,SetLabels,The following statement contains a magic number: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              item.Label2 = String.Format("{0} {1} - {2}"'                                          Utils.GetShortDayString(rec.StartTime)'                                          rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                          rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              ;              break;            case ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekly:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650);              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,SetLabels,The following statement contains a magic number: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              item.Label2 = String.Format("{0} {1} - {2}"'                                          Utils.GetShortDayString(rec.StartTime)'                                          rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                          rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              ;              break;            case ScheduleRecordingType.Daily:              strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.WorkingDays:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(648);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekends:              strTime = String.Format("{0}-{1} {2}-{3}"'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                      GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1}"' strType' strTime);              break;              case ScheduleRecordingType.Weekly:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday:                  day = GUILocalizeStrings.Get(11);                  break;                case DayOfWeek.Tuesday:                  day = GUILocalizeStrings.Get(12);                  break;                case DayOfWeek.Wednesday:                  day = GUILocalizeStrings.Get(13);                  break;                case DayOfWeek.Thursday:                  day = GUILocalizeStrings.Get(14);                  break;                case DayOfWeek.Friday:                  day = GUILocalizeStrings.Get(15);                  break;                case DayOfWeek.Saturday:                  day = GUILocalizeStrings.Get(16);                  break;                default:                  day = GUILocalizeStrings.Get(17);                  break;              }                strTime = String.Format("{0}-{1}"'                                      rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                      rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));              strType = GUILocalizeStrings.Get(649);              item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              switch (rec.StartTime.DayOfWeek)              {                case DayOfWeek.Monday: day = GUILocalizeStrings.Get(11); break;                case DayOfWeek.Tuesday: day = GUILocalizeStrings.Get(12); break;                case DayOfWeek.Wednesday: day = GUILocalizeStrings.Get(13); break;                case DayOfWeek.Thursday: day = GUILocalizeStrings.Get(14); break;                case DayOfWeek.Friday: day = GUILocalizeStrings.Get(15); break;                case DayOfWeek.Saturday: day = GUILocalizeStrings.Get(16); break;                default: day = GUILocalizeStrings.Get(17); break;              }                item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(650);              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              item.Label = rec.ProgramName;              item.Label2 = GUILocalizeStrings.Get(651);              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnClick,The following statement contains a magic number: dlg.AddLocalizedString(618);
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnClick,The following statement contains a magic number: dlg.AddLocalizedString(979);
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnClick,The following statement contains a magic number: dlg.AddLocalizedString(980);
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnClick,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 888: ////Episodes management            OnSetEpisodesToKeep(rec);            break;          case 882:            OnSetQuality(rec);            break;            case 981: //Delete this recording only            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                    rec.Persist();                    server.OnNewSchedule();                  }                }              }              else              {                server.StopRecordingSchedule(rec.IdSchedule);                CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                rec.Persist();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 982: //Delete series recording            goto case 618;            case 618: // delete entire recording            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    rec.Delete();                    server.OnNewSchedule();                  }                }              }              else              {                rec.Delete();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 979: // Play recording from beginning            if (g_Player.Playing && g_Player.IsTVRecording)            {              g_Player.Stop(true);            }            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            g_Player.SeekAbsolute(0);            if (TVHome.Card.IsTimeShifting)            {              g_Player.ShowFullScreenWindow();              return;            }            break;            case 980: // Play recording from live point            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            if (TVHome.Card.IsTimeShifting)            {              if (g_Player.Playing)              {                g_Player.SeekAsolutePercentage(99);              }              g_Player.ShowFullScreenWindow();              return;            }            break;        }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnClick,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 888: ////Episodes management            OnSetEpisodesToKeep(rec);            break;          case 882:            OnSetQuality(rec);            break;            case 981: //Delete this recording only            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                    rec.Persist();                    server.OnNewSchedule();                  }                }              }              else              {                server.StopRecordingSchedule(rec.IdSchedule);                CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                rec.Persist();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 982: //Delete series recording            goto case 618;            case 618: // delete entire recording            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    rec.Delete();                    server.OnNewSchedule();                  }                }              }              else              {                rec.Delete();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 979: // Play recording from beginning            if (g_Player.Playing && g_Player.IsTVRecording)            {              g_Player.Stop(true);            }            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            g_Player.SeekAbsolute(0);            if (TVHome.Card.IsTimeShifting)            {              g_Player.ShowFullScreenWindow();              return;            }            break;            case 980: // Play recording from live point            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            if (TVHome.Card.IsTimeShifting)            {              if (g_Player.Playing)              {                g_Player.SeekAsolutePercentage(99);              }              g_Player.ShowFullScreenWindow();              return;            }            break;        }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnClick,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 888: ////Episodes management            OnSetEpisodesToKeep(rec);            break;          case 882:            OnSetQuality(rec);            break;            case 981: //Delete this recording only            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                    rec.Persist();                    server.OnNewSchedule();                  }                }              }              else              {                server.StopRecordingSchedule(rec.IdSchedule);                CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                rec.Persist();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 982: //Delete series recording            goto case 618;            case 618: // delete entire recording            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    rec.Delete();                    server.OnNewSchedule();                  }                }              }              else              {                rec.Delete();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 979: // Play recording from beginning            if (g_Player.Playing && g_Player.IsTVRecording)            {              g_Player.Stop(true);            }            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            g_Player.SeekAbsolute(0);            if (TVHome.Card.IsTimeShifting)            {              g_Player.ShowFullScreenWindow();              return;            }            break;            case 980: // Play recording from live point            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            if (TVHome.Card.IsTimeShifting)            {              if (g_Player.Playing)              {                g_Player.SeekAsolutePercentage(99);              }              g_Player.ShowFullScreenWindow();              return;            }            break;        }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnClick,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 888: ////Episodes management            OnSetEpisodesToKeep(rec);            break;          case 882:            OnSetQuality(rec);            break;            case 981: //Delete this recording only            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                    rec.Persist();                    server.OnNewSchedule();                  }                }              }              else              {                server.StopRecordingSchedule(rec.IdSchedule);                CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                rec.Persist();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 982: //Delete series recording            goto case 618;            case 618: // delete entire recording            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    rec.Delete();                    server.OnNewSchedule();                  }                }              }              else              {                rec.Delete();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 979: // Play recording from beginning            if (g_Player.Playing && g_Player.IsTVRecording)            {              g_Player.Stop(true);            }            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            g_Player.SeekAbsolute(0);            if (TVHome.Card.IsTimeShifting)            {              g_Player.ShowFullScreenWindow();              return;            }            break;            case 980: // Play recording from live point            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            if (TVHome.Card.IsTimeShifting)            {              if (g_Player.Playing)              {                g_Player.SeekAsolutePercentage(99);              }              g_Player.ShowFullScreenWindow();              return;            }            break;        }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnClick,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 888: ////Episodes management            OnSetEpisodesToKeep(rec);            break;          case 882:            OnSetQuality(rec);            break;            case 981: //Delete this recording only            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                    rec.Persist();                    server.OnNewSchedule();                  }                }              }              else              {                server.StopRecordingSchedule(rec.IdSchedule);                CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                rec.Persist();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 982: //Delete series recording            goto case 618;            case 618: // delete entire recording            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    rec.Delete();                    server.OnNewSchedule();                  }                }              }              else              {                rec.Delete();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 979: // Play recording from beginning            if (g_Player.Playing && g_Player.IsTVRecording)            {              g_Player.Stop(true);            }            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            g_Player.SeekAbsolute(0);            if (TVHome.Card.IsTimeShifting)            {              g_Player.ShowFullScreenWindow();              return;            }            break;            case 980: // Play recording from live point            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            if (TVHome.Card.IsTimeShifting)            {              if (g_Player.Playing)              {                g_Player.SeekAsolutePercentage(99);              }              g_Player.ShowFullScreenWindow();              return;            }            break;        }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnClick,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 888: ////Episodes management            OnSetEpisodesToKeep(rec);            break;          case 882:            OnSetQuality(rec);            break;            case 981: //Delete this recording only            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                    rec.Persist();                    server.OnNewSchedule();                  }                }              }              else              {                server.StopRecordingSchedule(rec.IdSchedule);                CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                rec.Persist();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 982: //Delete series recording            goto case 618;            case 618: // delete entire recording            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    rec.Delete();                    server.OnNewSchedule();                  }                }              }              else              {                rec.Delete();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 979: // Play recording from beginning            if (g_Player.Playing && g_Player.IsTVRecording)            {              g_Player.Stop(true);            }            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            g_Player.SeekAbsolute(0);            if (TVHome.Card.IsTimeShifting)            {              g_Player.ShowFullScreenWindow();              return;            }            break;            case 980: // Play recording from live point            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            if (TVHome.Card.IsTimeShifting)            {              if (g_Player.Playing)              {                g_Player.SeekAsolutePercentage(99);              }              g_Player.ShowFullScreenWindow();              return;            }            break;        }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnClick,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 888: ////Episodes management            OnSetEpisodesToKeep(rec);            break;          case 882:            OnSetQuality(rec);            break;            case 981: //Delete this recording only            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                    rec.Persist();                    server.OnNewSchedule();                  }                }              }              else              {                server.StopRecordingSchedule(rec.IdSchedule);                CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                rec.Persist();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 982: //Delete series recording            goto case 618;            case 618: // delete entire recording            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    rec.Delete();                    server.OnNewSchedule();                  }                }              }              else              {                rec.Delete();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 979: // Play recording from beginning            if (g_Player.Playing && g_Player.IsTVRecording)            {              g_Player.Stop(true);            }            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            g_Player.SeekAbsolute(0);            if (TVHome.Card.IsTimeShifting)            {              g_Player.ShowFullScreenWindow();              return;            }            break;            case 980: // Play recording from live point            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            if (TVHome.Card.IsTimeShifting)            {              if (g_Player.Playing)              {                g_Player.SeekAsolutePercentage(99);              }              g_Player.ShowFullScreenWindow();              return;            }            break;        }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnClick,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 888: ////Episodes management            OnSetEpisodesToKeep(rec);            break;          case 882:            OnSetQuality(rec);            break;            case 981: //Delete this recording only            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                    rec.Persist();                    server.OnNewSchedule();                  }                }              }              else              {                server.StopRecordingSchedule(rec.IdSchedule);                CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                rec.Persist();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 982: //Delete series recording            goto case 618;            case 618: // delete entire recording            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    rec.Delete();                    server.OnNewSchedule();                  }                }              }              else              {                rec.Delete();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 979: // Play recording from beginning            if (g_Player.Playing && g_Player.IsTVRecording)            {              g_Player.Stop(true);            }            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            g_Player.SeekAbsolute(0);            if (TVHome.Card.IsTimeShifting)            {              g_Player.ShowFullScreenWindow();              return;            }            break;            case 980: // Play recording from live point            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            if (TVHome.Card.IsTimeShifting)            {              if (g_Player.Playing)              {                g_Player.SeekAsolutePercentage(99);              }              g_Player.ShowFullScreenWindow();              return;            }            break;        }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnClick,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 888: ////Episodes management            OnSetEpisodesToKeep(rec);            break;          case 882:            OnSetQuality(rec);            break;            case 981: //Delete this recording only            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                    rec.Persist();                    server.OnNewSchedule();                  }                }              }              else              {                server.StopRecordingSchedule(rec.IdSchedule);                CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                rec.Persist();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 982: //Delete series recording            goto case 618;            case 618: // delete entire recording            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    rec.Delete();                    server.OnNewSchedule();                  }                }              }              else              {                rec.Delete();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 979: // Play recording from beginning            if (g_Player.Playing && g_Player.IsTVRecording)            {              g_Player.Stop(true);            }            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            g_Player.SeekAbsolute(0);            if (TVHome.Card.IsTimeShifting)            {              g_Player.ShowFullScreenWindow();              return;            }            break;            case 980: // Play recording from live point            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            if (TVHome.Card.IsTimeShifting)            {              if (g_Player.Playing)              {                g_Player.SeekAsolutePercentage(99);              }              g_Player.ShowFullScreenWindow();              return;            }            break;        }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnClick,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 888: ////Episodes management            OnSetEpisodesToKeep(rec);            break;          case 882:            OnSetQuality(rec);            break;            case 981: //Delete this recording only            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                    rec.Persist();                    server.OnNewSchedule();                  }                }              }              else              {                server.StopRecordingSchedule(rec.IdSchedule);                CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                rec.Persist();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 982: //Delete series recording            goto case 618;            case 618: // delete entire recording            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    rec.Delete();                    server.OnNewSchedule();                  }                }              }              else              {                rec.Delete();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 979: // Play recording from beginning            if (g_Player.Playing && g_Player.IsTVRecording)            {              g_Player.Stop(true);            }            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            g_Player.SeekAbsolute(0);            if (TVHome.Card.IsTimeShifting)            {              g_Player.ShowFullScreenWindow();              return;            }            break;            case 980: // Play recording from live point            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            if (TVHome.Card.IsTimeShifting)            {              if (g_Player.Playing)              {                g_Player.SeekAsolutePercentage(99);              }              g_Player.ShowFullScreenWindow();              return;            }            break;        }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnClick,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 888: ////Episodes management            OnSetEpisodesToKeep(rec);            break;          case 882:            OnSetQuality(rec);            break;            case 981: //Delete this recording only            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                    rec.Persist();                    server.OnNewSchedule();                  }                }              }              else              {                server.StopRecordingSchedule(rec.IdSchedule);                CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                rec.Persist();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 982: //Delete series recording            goto case 618;            case 618: // delete entire recording            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    rec.Delete();                    server.OnNewSchedule();                  }                }              }              else              {                rec.Delete();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 979: // Play recording from beginning            if (g_Player.Playing && g_Player.IsTVRecording)            {              g_Player.Stop(true);            }            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            g_Player.SeekAbsolute(0);            if (TVHome.Card.IsTimeShifting)            {              g_Player.ShowFullScreenWindow();              return;            }            break;            case 980: // Play recording from live point            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            if (TVHome.Card.IsTimeShifting)            {              if (g_Player.Playing)              {                g_Player.SeekAsolutePercentage(99);              }              g_Player.ShowFullScreenWindow();              return;            }            break;        }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnClick,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 888: ////Episodes management            OnSetEpisodesToKeep(rec);            break;          case 882:            OnSetQuality(rec);            break;            case 981: //Delete this recording only            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                    rec.Persist();                    server.OnNewSchedule();                  }                }              }              else              {                server.StopRecordingSchedule(rec.IdSchedule);                CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                rec.Persist();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 982: //Delete series recording            goto case 618;            case 618: // delete entire recording            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    rec.Delete();                    server.OnNewSchedule();                  }                }              }              else              {                rec.Delete();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 979: // Play recording from beginning            if (g_Player.Playing && g_Player.IsTVRecording)            {              g_Player.Stop(true);            }            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            g_Player.SeekAbsolute(0);            if (TVHome.Card.IsTimeShifting)            {              g_Player.ShowFullScreenWindow();              return;            }            break;            case 980: // Play recording from live point            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            if (TVHome.Card.IsTimeShifting)            {              if (g_Player.Playing)              {                g_Player.SeekAsolutePercentage(99);              }              g_Player.ShowFullScreenWindow();              return;            }            break;        }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnClick,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 888: ////Episodes management            OnSetEpisodesToKeep(rec);            break;          case 882:            OnSetQuality(rec);            break;            case 981: //Delete this recording only            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                    rec.Persist();                    server.OnNewSchedule();                  }                }              }              else              {                server.StopRecordingSchedule(rec.IdSchedule);                CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                rec.Persist();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 982: //Delete series recording            goto case 618;            case 618: // delete entire recording            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    rec.Delete();                    server.OnNewSchedule();                  }                }              }              else              {                rec.Delete();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 979: // Play recording from beginning            if (g_Player.Playing && g_Player.IsTVRecording)            {              g_Player.Stop(true);            }            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            g_Player.SeekAbsolute(0);            if (TVHome.Card.IsTimeShifting)            {              g_Player.ShowFullScreenWindow();              return;            }            break;            case 980: // Play recording from live point            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            if (TVHome.Card.IsTimeShifting)            {              if (g_Player.Playing)              {                g_Player.SeekAsolutePercentage(99);              }              g_Player.ShowFullScreenWindow();              return;            }            break;        }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnClick,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 888: ////Episodes management            OnSetEpisodesToKeep(rec);            break;          case 882:            OnSetQuality(rec);            break;            case 981: //Delete this recording only            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                    rec.Persist();                    server.OnNewSchedule();                  }                }              }              else              {                server.StopRecordingSchedule(rec.IdSchedule);                CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                rec.Persist();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 982: //Delete series recording            goto case 618;            case 618: // delete entire recording            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    rec.Delete();                    server.OnNewSchedule();                  }                }              }              else              {                rec.Delete();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 979: // Play recording from beginning            if (g_Player.Playing && g_Player.IsTVRecording)            {              g_Player.Stop(true);            }            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            g_Player.SeekAbsolute(0);            if (TVHome.Card.IsTimeShifting)            {              g_Player.ShowFullScreenWindow();              return;            }            break;            case 980: // Play recording from live point            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            if (TVHome.Card.IsTimeShifting)            {              if (g_Player.Playing)              {                g_Player.SeekAsolutePercentage(99);              }              g_Player.ShowFullScreenWindow();              return;            }            break;        }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnClick,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 888: ////Episodes management            OnSetEpisodesToKeep(rec);            break;          case 882:            OnSetQuality(rec);            break;            case 981: //Delete this recording only            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                    rec.Persist();                    server.OnNewSchedule();                  }                }              }              else              {                server.StopRecordingSchedule(rec.IdSchedule);                CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                rec.Persist();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 982: //Delete series recording            goto case 618;            case 618: // delete entire recording            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    rec.Delete();                    server.OnNewSchedule();                  }                }              }              else              {                rec.Delete();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 979: // Play recording from beginning            if (g_Player.Playing && g_Player.IsTVRecording)            {              g_Player.Stop(true);            }            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            g_Player.SeekAbsolute(0);            if (TVHome.Card.IsTimeShifting)            {              g_Player.ShowFullScreenWindow();              return;            }            break;            case 980: // Play recording from live point            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            if (TVHome.Card.IsTimeShifting)            {              if (g_Player.Playing)              {                g_Player.SeekAsolutePercentage(99);              }              g_Player.ShowFullScreenWindow();              return;            }            break;        }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnClick,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 888: ////Episodes management            OnSetEpisodesToKeep(rec);            break;          case 882:            OnSetQuality(rec);            break;            case 981: //Delete this recording only            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                    rec.Persist();                    server.OnNewSchedule();                  }                }              }              else              {                server.StopRecordingSchedule(rec.IdSchedule);                CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                rec.Persist();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 982: //Delete series recording            goto case 618;            case 618: // delete entire recording            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    rec.Delete();                    server.OnNewSchedule();                  }                }              }              else              {                rec.Delete();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 979: // Play recording from beginning            if (g_Player.Playing && g_Player.IsTVRecording)            {              g_Player.Stop(true);            }            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            g_Player.SeekAbsolute(0);            if (TVHome.Card.IsTimeShifting)            {              g_Player.ShowFullScreenWindow();              return;            }            break;            case 980: // Play recording from live point            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            if (TVHome.Card.IsTimeShifting)            {              if (g_Player.Playing)              {                g_Player.SeekAsolutePercentage(99);              }              g_Player.ShowFullScreenWindow();              return;            }            break;        }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnClick,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 888: ////Episodes management            OnSetEpisodesToKeep(rec);            break;          case 882:            OnSetQuality(rec);            break;            case 981: //Delete this recording only            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                    rec.Persist();                    server.OnNewSchedule();                  }                }              }              else              {                server.StopRecordingSchedule(rec.IdSchedule);                CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                rec.Persist();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 982: //Delete series recording            goto case 618;            case 618: // delete entire recording            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    rec.Delete();                    server.OnNewSchedule();                  }                }              }              else              {                rec.Delete();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 979: // Play recording from beginning            if (g_Player.Playing && g_Player.IsTVRecording)            {              g_Player.Stop(true);            }            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            g_Player.SeekAbsolute(0);            if (TVHome.Card.IsTimeShifting)            {              g_Player.ShowFullScreenWindow();              return;            }            break;            case 980: // Play recording from live point            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            if (TVHome.Card.IsTimeShifting)            {              if (g_Player.Playing)              {                g_Player.SeekAsolutePercentage(99);              }              g_Player.ShowFullScreenWindow();              return;            }            break;        }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnClick,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 888: ////Episodes management            OnSetEpisodesToKeep(rec);            break;          case 882:            OnSetQuality(rec);            break;            case 981: //Delete this recording only            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                    rec.Persist();                    server.OnNewSchedule();                  }                }              }              else              {                server.StopRecordingSchedule(rec.IdSchedule);                CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                rec.Persist();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 982: //Delete series recording            goto case 618;            case 618: // delete entire recording            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    rec.Delete();                    server.OnNewSchedule();                  }                }              }              else              {                rec.Delete();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 979: // Play recording from beginning            if (g_Player.Playing && g_Player.IsTVRecording)            {              g_Player.Stop(true);            }            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            g_Player.SeekAbsolute(0);            if (TVHome.Card.IsTimeShifting)            {              g_Player.ShowFullScreenWindow();              return;            }            break;            case 980: // Play recording from live point            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            if (TVHome.Card.IsTimeShifting)            {              if (g_Player.Playing)              {                g_Player.SeekAsolutePercentage(99);              }              g_Player.ShowFullScreenWindow();              return;            }            break;        }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnClick,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 888: ////Episodes management            OnSetEpisodesToKeep(rec);            break;          case 882:            OnSetQuality(rec);            break;            case 981: //Delete this recording only            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                    rec.Persist();                    server.OnNewSchedule();                  }                }              }              else              {                server.StopRecordingSchedule(rec.IdSchedule);                CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                rec.Persist();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 982: //Delete series recording            goto case 618;            case 618: // delete entire recording            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    rec.Delete();                    server.OnNewSchedule();                  }                }              }              else              {                rec.Delete();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 979: // Play recording from beginning            if (g_Player.Playing && g_Player.IsTVRecording)            {              g_Player.Stop(true);            }            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            g_Player.SeekAbsolute(0);            if (TVHome.Card.IsTimeShifting)            {              g_Player.ShowFullScreenWindow();              return;            }            break;            case 980: // Play recording from live point            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            if (TVHome.Card.IsTimeShifting)            {              if (g_Player.Playing)              {                g_Player.SeekAsolutePercentage(99);              }              g_Player.ShowFullScreenWindow();              return;            }            break;        }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnClick,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 888: ////Episodes management            OnSetEpisodesToKeep(rec);            break;          case 882:            OnSetQuality(rec);            break;            case 981: //Delete this recording only            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                    rec.Persist();                    server.OnNewSchedule();                  }                }              }              else              {                server.StopRecordingSchedule(rec.IdSchedule);                CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                rec.Persist();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 982: //Delete series recording            goto case 618;            case 618: // delete entire recording            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    rec.Delete();                    server.OnNewSchedule();                  }                }              }              else              {                rec.Delete();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 979: // Play recording from beginning            if (g_Player.Playing && g_Player.IsTVRecording)            {              g_Player.Stop(true);            }            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            g_Player.SeekAbsolute(0);            if (TVHome.Card.IsTimeShifting)            {              g_Player.ShowFullScreenWindow();              return;            }            break;            case 980: // Play recording from live point            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            if (TVHome.Card.IsTimeShifting)            {              if (g_Player.Playing)              {                g_Player.SeekAsolutePercentage(99);              }              g_Player.ShowFullScreenWindow();              return;            }            break;        }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnClick,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 888: ////Episodes management            OnSetEpisodesToKeep(rec);            break;          case 882:            OnSetQuality(rec);            break;            case 981: //Delete this recording only            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                    rec.Persist();                    server.OnNewSchedule();                  }                }              }              else              {                server.StopRecordingSchedule(rec.IdSchedule);                CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                rec.Persist();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 982: //Delete series recording            goto case 618;            case 618: // delete entire recording            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    rec.Delete();                    server.OnNewSchedule();                  }                }              }              else              {                rec.Delete();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 979: // Play recording from beginning            if (g_Player.Playing && g_Player.IsTVRecording)            {              g_Player.Stop(true);            }            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            g_Player.SeekAbsolute(0);            if (TVHome.Card.IsTimeShifting)            {              g_Player.ShowFullScreenWindow();              return;            }            break;            case 980: // Play recording from live point            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            if (TVHome.Card.IsTimeShifting)            {              if (g_Player.Playing)              {                g_Player.SeekAsolutePercentage(99);              }              g_Player.ShowFullScreenWindow();              return;            }            break;        }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,ChangeType,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(616));
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,ChangeType,The following statement contains a magic number: i <= 615
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,ChangeType,The following statement contains a magic number: dlg.Add(GUILocalizeStrings.Get(990000));
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,ChangeType,The following statement contains a magic number: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              dlg.SelectedLabel = 0;              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              dlg.SelectedLabel = 1;              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              dlg.SelectedLabel = 2;              break;            case ScheduleRecordingType.Weekly:              dlg.SelectedLabel = 3;              break;            case ScheduleRecordingType.Daily:              dlg.SelectedLabel = 4;              break;            case ScheduleRecordingType.WorkingDays:              dlg.SelectedLabel = 5;              break;            case ScheduleRecordingType.Weekends:              dlg.SelectedLabel = 6;              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              dlg.SelectedLabel = 7;              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,ChangeType,The following statement contains a magic number: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              dlg.SelectedLabel = 0;              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              dlg.SelectedLabel = 1;              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              dlg.SelectedLabel = 2;              break;            case ScheduleRecordingType.Weekly:              dlg.SelectedLabel = 3;              break;            case ScheduleRecordingType.Daily:              dlg.SelectedLabel = 4;              break;            case ScheduleRecordingType.WorkingDays:              dlg.SelectedLabel = 5;              break;            case ScheduleRecordingType.Weekends:              dlg.SelectedLabel = 6;              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              dlg.SelectedLabel = 7;              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,ChangeType,The following statement contains a magic number: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              dlg.SelectedLabel = 0;              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              dlg.SelectedLabel = 1;              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              dlg.SelectedLabel = 2;              break;            case ScheduleRecordingType.Weekly:              dlg.SelectedLabel = 3;              break;            case ScheduleRecordingType.Daily:              dlg.SelectedLabel = 4;              break;            case ScheduleRecordingType.WorkingDays:              dlg.SelectedLabel = 5;              break;            case ScheduleRecordingType.Weekends:              dlg.SelectedLabel = 6;              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              dlg.SelectedLabel = 7;              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,ChangeType,The following statement contains a magic number: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              dlg.SelectedLabel = 0;              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              dlg.SelectedLabel = 1;              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              dlg.SelectedLabel = 2;              break;            case ScheduleRecordingType.Weekly:              dlg.SelectedLabel = 3;              break;            case ScheduleRecordingType.Daily:              dlg.SelectedLabel = 4;              break;            case ScheduleRecordingType.WorkingDays:              dlg.SelectedLabel = 5;              break;            case ScheduleRecordingType.Weekends:              dlg.SelectedLabel = 6;              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              dlg.SelectedLabel = 7;              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,ChangeType,The following statement contains a magic number: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              dlg.SelectedLabel = 0;              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              dlg.SelectedLabel = 1;              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              dlg.SelectedLabel = 2;              break;            case ScheduleRecordingType.Weekly:              dlg.SelectedLabel = 3;              break;            case ScheduleRecordingType.Daily:              dlg.SelectedLabel = 4;              break;            case ScheduleRecordingType.WorkingDays:              dlg.SelectedLabel = 5;              break;            case ScheduleRecordingType.Weekends:              dlg.SelectedLabel = 6;              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              dlg.SelectedLabel = 7;              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,ChangeType,The following statement contains a magic number: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              dlg.SelectedLabel = 0;              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              dlg.SelectedLabel = 1;              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              dlg.SelectedLabel = 2;              break;            case ScheduleRecordingType.Weekly:              dlg.SelectedLabel = 3;              break;            case ScheduleRecordingType.Daily:              dlg.SelectedLabel = 4;              break;            case ScheduleRecordingType.WorkingDays:              dlg.SelectedLabel = 5;              break;            case ScheduleRecordingType.Weekends:              dlg.SelectedLabel = 6;              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              dlg.SelectedLabel = 7;              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,ChangeType,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: //once              rec.ScheduleType = (int)ScheduleRecordingType.Once;              rec.Canceled = Schedule.MinSchedule;              break;            case 1: //everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              rec.Canceled = Schedule.MinSchedule;              break;            case 2: //everytime' all channels              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              rec.Canceled = Schedule.MinSchedule;              break;            case 3: //weekly              rec.ScheduleType = (int)ScheduleRecordingType.Weekly;              rec.Canceled = Schedule.MinSchedule;              break;            case 4: //daily              rec.ScheduleType = (int)ScheduleRecordingType.Daily;              rec.Canceled = Schedule.MinSchedule;              break;            case 5: //WorkingDays              rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;              rec.Canceled = Schedule.MinSchedule;              break;            case 6: //Weekends              rec.ScheduleType = (int)ScheduleRecordingType.Weekends;              rec.Canceled = Schedule.MinSchedule;              break;            case 7://weekly everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              rec.Canceled = Schedule.MinSchedule;              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,ChangeType,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: //once              rec.ScheduleType = (int)ScheduleRecordingType.Once;              rec.Canceled = Schedule.MinSchedule;              break;            case 1: //everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              rec.Canceled = Schedule.MinSchedule;              break;            case 2: //everytime' all channels              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              rec.Canceled = Schedule.MinSchedule;              break;            case 3: //weekly              rec.ScheduleType = (int)ScheduleRecordingType.Weekly;              rec.Canceled = Schedule.MinSchedule;              break;            case 4: //daily              rec.ScheduleType = (int)ScheduleRecordingType.Daily;              rec.Canceled = Schedule.MinSchedule;              break;            case 5: //WorkingDays              rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;              rec.Canceled = Schedule.MinSchedule;              break;            case 6: //Weekends              rec.ScheduleType = (int)ScheduleRecordingType.Weekends;              rec.Canceled = Schedule.MinSchedule;              break;            case 7://weekly everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              rec.Canceled = Schedule.MinSchedule;              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,ChangeType,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: //once              rec.ScheduleType = (int)ScheduleRecordingType.Once;              rec.Canceled = Schedule.MinSchedule;              break;            case 1: //everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              rec.Canceled = Schedule.MinSchedule;              break;            case 2: //everytime' all channels              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              rec.Canceled = Schedule.MinSchedule;              break;            case 3: //weekly              rec.ScheduleType = (int)ScheduleRecordingType.Weekly;              rec.Canceled = Schedule.MinSchedule;              break;            case 4: //daily              rec.ScheduleType = (int)ScheduleRecordingType.Daily;              rec.Canceled = Schedule.MinSchedule;              break;            case 5: //WorkingDays              rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;              rec.Canceled = Schedule.MinSchedule;              break;            case 6: //Weekends              rec.ScheduleType = (int)ScheduleRecordingType.Weekends;              rec.Canceled = Schedule.MinSchedule;              break;            case 7://weekly everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              rec.Canceled = Schedule.MinSchedule;              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,ChangeType,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: //once              rec.ScheduleType = (int)ScheduleRecordingType.Once;              rec.Canceled = Schedule.MinSchedule;              break;            case 1: //everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              rec.Canceled = Schedule.MinSchedule;              break;            case 2: //everytime' all channels              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              rec.Canceled = Schedule.MinSchedule;              break;            case 3: //weekly              rec.ScheduleType = (int)ScheduleRecordingType.Weekly;              rec.Canceled = Schedule.MinSchedule;              break;            case 4: //daily              rec.ScheduleType = (int)ScheduleRecordingType.Daily;              rec.Canceled = Schedule.MinSchedule;              break;            case 5: //WorkingDays              rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;              rec.Canceled = Schedule.MinSchedule;              break;            case 6: //Weekends              rec.ScheduleType = (int)ScheduleRecordingType.Weekends;              rec.Canceled = Schedule.MinSchedule;              break;            case 7://weekly everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              rec.Canceled = Schedule.MinSchedule;              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,ChangeType,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: //once              rec.ScheduleType = (int)ScheduleRecordingType.Once;              rec.Canceled = Schedule.MinSchedule;              break;            case 1: //everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              rec.Canceled = Schedule.MinSchedule;              break;            case 2: //everytime' all channels              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              rec.Canceled = Schedule.MinSchedule;              break;            case 3: //weekly              rec.ScheduleType = (int)ScheduleRecordingType.Weekly;              rec.Canceled = Schedule.MinSchedule;              break;            case 4: //daily              rec.ScheduleType = (int)ScheduleRecordingType.Daily;              rec.Canceled = Schedule.MinSchedule;              break;            case 5: //WorkingDays              rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;              rec.Canceled = Schedule.MinSchedule;              break;            case 6: //Weekends              rec.ScheduleType = (int)ScheduleRecordingType.Weekends;              rec.Canceled = Schedule.MinSchedule;              break;            case 7://weekly everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              rec.Canceled = Schedule.MinSchedule;              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,ChangeType,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: //once              rec.ScheduleType = (int)ScheduleRecordingType.Once;              rec.Canceled = Schedule.MinSchedule;              break;            case 1: //everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              rec.Canceled = Schedule.MinSchedule;              break;            case 2: //everytime' all channels              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              rec.Canceled = Schedule.MinSchedule;              break;            case 3: //weekly              rec.ScheduleType = (int)ScheduleRecordingType.Weekly;              rec.Canceled = Schedule.MinSchedule;              break;            case 4: //daily              rec.ScheduleType = (int)ScheduleRecordingType.Daily;              rec.Canceled = Schedule.MinSchedule;              break;            case 5: //WorkingDays              rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;              rec.Canceled = Schedule.MinSchedule;              break;            case 6: //Weekends              rec.ScheduleType = (int)ScheduleRecordingType.Weekends;              rec.Canceled = Schedule.MinSchedule;              break;            case 7://weekly everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              rec.Canceled = Schedule.MinSchedule;              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,GetRecType,The following statement contains a magic number: switch (recType)        {          case ScheduleRecordingType.Daily:            strType = GUILocalizeStrings.Get(648); //daily            break;          case ScheduleRecordingType.EveryTimeOnEveryChannel:            strType = GUILocalizeStrings.Get(651); //Everytime on any channel            break;          case ScheduleRecordingType.EveryTimeOnThisChannel:            strType = GUILocalizeStrings.Get(650); //Everytime on this channel            break;          case ScheduleRecordingType.Once:            strType = GUILocalizeStrings.Get(647); //Once            break;          case ScheduleRecordingType.WorkingDays:            strType = GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.WorkingDays)); //Working Days            break;          case ScheduleRecordingType.Weekends:            strType = GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.WeekendDays)); //Weekend Days            break;          case ScheduleRecordingType.Weekly:            strType = GUILocalizeStrings.Get(679); //Weekly            break;          case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:            strType = GUILocalizeStrings.Get(990000);//Weekly Everytime on this channel            break;        }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,GetRecType,The following statement contains a magic number: switch (recType)        {          case ScheduleRecordingType.Daily:            strType = GUILocalizeStrings.Get(648); //daily            break;          case ScheduleRecordingType.EveryTimeOnEveryChannel:            strType = GUILocalizeStrings.Get(651); //Everytime on any channel            break;          case ScheduleRecordingType.EveryTimeOnThisChannel:            strType = GUILocalizeStrings.Get(650); //Everytime on this channel            break;          case ScheduleRecordingType.Once:            strType = GUILocalizeStrings.Get(647); //Once            break;          case ScheduleRecordingType.WorkingDays:            strType = GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.WorkingDays)); //Working Days            break;          case ScheduleRecordingType.Weekends:            strType = GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.WeekendDays)); //Weekend Days            break;          case ScheduleRecordingType.Weekly:            strType = GUILocalizeStrings.Get(679); //Weekly            break;          case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:            strType = GUILocalizeStrings.Get(990000);//Weekly Everytime on this channel            break;        }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,GetRecType,The following statement contains a magic number: switch (recType)        {          case ScheduleRecordingType.Daily:            strType = GUILocalizeStrings.Get(648); //daily            break;          case ScheduleRecordingType.EveryTimeOnEveryChannel:            strType = GUILocalizeStrings.Get(651); //Everytime on any channel            break;          case ScheduleRecordingType.EveryTimeOnThisChannel:            strType = GUILocalizeStrings.Get(650); //Everytime on this channel            break;          case ScheduleRecordingType.Once:            strType = GUILocalizeStrings.Get(647); //Once            break;          case ScheduleRecordingType.WorkingDays:            strType = GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.WorkingDays)); //Working Days            break;          case ScheduleRecordingType.Weekends:            strType = GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.WeekendDays)); //Weekend Days            break;          case ScheduleRecordingType.Weekly:            strType = GUILocalizeStrings.Get(679); //Weekly            break;          case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:            strType = GUILocalizeStrings.Get(990000);//Weekly Everytime on this channel            break;        }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,GetRecType,The following statement contains a magic number: switch (recType)        {          case ScheduleRecordingType.Daily:            strType = GUILocalizeStrings.Get(648); //daily            break;          case ScheduleRecordingType.EveryTimeOnEveryChannel:            strType = GUILocalizeStrings.Get(651); //Everytime on any channel            break;          case ScheduleRecordingType.EveryTimeOnThisChannel:            strType = GUILocalizeStrings.Get(650); //Everytime on this channel            break;          case ScheduleRecordingType.Once:            strType = GUILocalizeStrings.Get(647); //Once            break;          case ScheduleRecordingType.WorkingDays:            strType = GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.WorkingDays)); //Working Days            break;          case ScheduleRecordingType.Weekends:            strType = GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.WeekendDays)); //Weekend Days            break;          case ScheduleRecordingType.Weekly:            strType = GUILocalizeStrings.Get(679); //Weekly            break;          case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:            strType = GUILocalizeStrings.Get(990000);//Weekly Everytime on this channel            break;        }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,GetRecType,The following statement contains a magic number: switch (recType)        {          case ScheduleRecordingType.Daily:            strType = GUILocalizeStrings.Get(648); //daily            break;          case ScheduleRecordingType.EveryTimeOnEveryChannel:            strType = GUILocalizeStrings.Get(651); //Everytime on any channel            break;          case ScheduleRecordingType.EveryTimeOnThisChannel:            strType = GUILocalizeStrings.Get(650); //Everytime on this channel            break;          case ScheduleRecordingType.Once:            strType = GUILocalizeStrings.Get(647); //Once            break;          case ScheduleRecordingType.WorkingDays:            strType = GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.WorkingDays)); //Working Days            break;          case ScheduleRecordingType.Weekends:            strType = GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.WeekendDays)); //Weekend Days            break;          case ScheduleRecordingType.Weekly:            strType = GUILocalizeStrings.Get(679); //Weekly            break;          case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:            strType = GUILocalizeStrings.Get(990000);//Weekly Everytime on this channel            break;        }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,GetRecType,The following statement contains a magic number: switch (recType)        {          case ScheduleRecordingType.Daily:            strType = GUILocalizeStrings.Get(648); //daily            break;          case ScheduleRecordingType.EveryTimeOnEveryChannel:            strType = GUILocalizeStrings.Get(651); //Everytime on any channel            break;          case ScheduleRecordingType.EveryTimeOnThisChannel:            strType = GUILocalizeStrings.Get(650); //Everytime on this channel            break;          case ScheduleRecordingType.Once:            strType = GUILocalizeStrings.Get(647); //Once            break;          case ScheduleRecordingType.WorkingDays:            strType = GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.WorkingDays)); //Working Days            break;          case ScheduleRecordingType.Weekends:            strType = GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.WeekendDays)); //Weekend Days            break;          case ScheduleRecordingType.Weekly:            strType = GUILocalizeStrings.Get(679); //Weekly            break;          case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:            strType = GUILocalizeStrings.Get(990000);//Weekly Everytime on this channel            break;        }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetEpisodesToKeep,The following statement contains a magic number: dlg.SetHeading(887);
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetEpisodesToKeep,The following statement contains a magic number: dlg.AddLocalizedString(889);
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetEpisodesToKeep,The following statement contains a magic number: dlg.Add(i.ToString() + " " + GUILocalizeStrings.Get(874));
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetEpisodesToKeep,The following statement contains a magic number: i < 40
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetQuality,The following statement contains a magic number: dlg.SetHeading(882);
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetQuality,The following statement contains a magic number: dlg.AddLocalizedString(968);
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetQuality,The following statement contains a magic number: dlg.AddLocalizedString(965);
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetQuality,The following statement contains a magic number: dlg.AddLocalizedString(966);
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetQuality,The following statement contains a magic number: dlg.AddLocalizedString(967);
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetQuality,The following statement contains a magic number: switch (_newBitRate)          {            case VIDEOENCODER_BITRATE_MODE.NotSet:              dlg.SelectedLabel = 0;              break;            case VIDEOENCODER_BITRATE_MODE.ConstantBitRate:              dlg.SelectedLabel = 1;              break;            case VIDEOENCODER_BITRATE_MODE.VariableBitRateAverage:              dlg.SelectedLabel = 2;              break;            case VIDEOENCODER_BITRATE_MODE.VariableBitRatePeak:              dlg.SelectedLabel = 3;              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetQuality,The following statement contains a magic number: switch (_newBitRate)          {            case VIDEOENCODER_BITRATE_MODE.NotSet:              dlg.SelectedLabel = 0;              break;            case VIDEOENCODER_BITRATE_MODE.ConstantBitRate:              dlg.SelectedLabel = 1;              break;            case VIDEOENCODER_BITRATE_MODE.VariableBitRateAverage:              dlg.SelectedLabel = 2;              break;            case VIDEOENCODER_BITRATE_MODE.VariableBitRatePeak:              dlg.SelectedLabel = 3;              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetQuality,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: // Not Set              _newBitRate = VIDEOENCODER_BITRATE_MODE.NotSet;              break;              case 1: // CBR              _newBitRate = VIDEOENCODER_BITRATE_MODE.ConstantBitRate;              break;              case 2: // VBR              _newBitRate = VIDEOENCODER_BITRATE_MODE.VariableBitRateAverage;              break;              case 3: // VBR Peak              _newBitRate = VIDEOENCODER_BITRATE_MODE.VariableBitRatePeak;              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetQuality,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: // Not Set              _newBitRate = VIDEOENCODER_BITRATE_MODE.NotSet;              break;              case 1: // CBR              _newBitRate = VIDEOENCODER_BITRATE_MODE.ConstantBitRate;              break;              case 2: // VBR              _newBitRate = VIDEOENCODER_BITRATE_MODE.VariableBitRateAverage;              break;              case 3: // VBR Peak              _newBitRate = VIDEOENCODER_BITRATE_MODE.VariableBitRatePeak;              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetQuality,The following statement contains a magic number: dlg.SetHeading(882);
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetQuality,The following statement contains a magic number: dlg.AddLocalizedString(968);
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetQuality,The following statement contains a magic number: dlg.AddLocalizedString(886);
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetQuality,The following statement contains a magic number: dlg.AddLocalizedString(993);
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetQuality,The following statement contains a magic number: dlg.AddLocalizedString(893);
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetQuality,The following statement contains a magic number: dlg.AddLocalizedString(883);
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetQuality,The following statement contains a magic number: dlg.AddLocalizedString(884);
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetQuality,The following statement contains a magic number: dlg.AddLocalizedString(885);
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetQuality,The following statement contains a magic number: switch (_newQuality)          {            case QualityType.NotSet:              dlg.SelectedLabel = 0;              break;            case QualityType.Default:              dlg.SelectedLabel = 1;              break;            case QualityType.Custom:              dlg.SelectedLabel = 2;              break;            case QualityType.Portable:              dlg.SelectedLabel = 3;              break;            case QualityType.Low:              dlg.SelectedLabel = 4;              break;            case QualityType.Medium:              dlg.SelectedLabel = 5;              break;            case QualityType.High:              dlg.SelectedLabel = 6;              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetQuality,The following statement contains a magic number: switch (_newQuality)          {            case QualityType.NotSet:              dlg.SelectedLabel = 0;              break;            case QualityType.Default:              dlg.SelectedLabel = 1;              break;            case QualityType.Custom:              dlg.SelectedLabel = 2;              break;            case QualityType.Portable:              dlg.SelectedLabel = 3;              break;            case QualityType.Low:              dlg.SelectedLabel = 4;              break;            case QualityType.Medium:              dlg.SelectedLabel = 5;              break;            case QualityType.High:              dlg.SelectedLabel = 6;              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetQuality,The following statement contains a magic number: switch (_newQuality)          {            case QualityType.NotSet:              dlg.SelectedLabel = 0;              break;            case QualityType.Default:              dlg.SelectedLabel = 1;              break;            case QualityType.Custom:              dlg.SelectedLabel = 2;              break;            case QualityType.Portable:              dlg.SelectedLabel = 3;              break;            case QualityType.Low:              dlg.SelectedLabel = 4;              break;            case QualityType.Medium:              dlg.SelectedLabel = 5;              break;            case QualityType.High:              dlg.SelectedLabel = 6;              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetQuality,The following statement contains a magic number: switch (_newQuality)          {            case QualityType.NotSet:              dlg.SelectedLabel = 0;              break;            case QualityType.Default:              dlg.SelectedLabel = 1;              break;            case QualityType.Custom:              dlg.SelectedLabel = 2;              break;            case QualityType.Portable:              dlg.SelectedLabel = 3;              break;            case QualityType.Low:              dlg.SelectedLabel = 4;              break;            case QualityType.Medium:              dlg.SelectedLabel = 5;              break;            case QualityType.High:              dlg.SelectedLabel = 6;              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetQuality,The following statement contains a magic number: switch (_newQuality)          {            case QualityType.NotSet:              dlg.SelectedLabel = 0;              break;            case QualityType.Default:              dlg.SelectedLabel = 1;              break;            case QualityType.Custom:              dlg.SelectedLabel = 2;              break;            case QualityType.Portable:              dlg.SelectedLabel = 3;              break;            case QualityType.Low:              dlg.SelectedLabel = 4;              break;            case QualityType.Medium:              dlg.SelectedLabel = 5;              break;            case QualityType.High:              dlg.SelectedLabel = 6;              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetQuality,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: // Not Set              _newQuality = QualityType.NotSet;              break;              case 1: // Default              _newQuality = QualityType.Default;              break;              case 2: // Custom              _newQuality = QualityType.Custom;              break;              case 3: // Protable              _newQuality = QualityType.Portable;              break;              case 4: // Low              _newQuality = QualityType.Low;              break;              case 5: // Medium              _newQuality = QualityType.Medium;              break;              case 6: // High              _newQuality = QualityType.High;              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetQuality,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: // Not Set              _newQuality = QualityType.NotSet;              break;              case 1: // Default              _newQuality = QualityType.Default;              break;              case 2: // Custom              _newQuality = QualityType.Custom;              break;              case 3: // Protable              _newQuality = QualityType.Portable;              break;              case 4: // Low              _newQuality = QualityType.Low;              break;              case 5: // Medium              _newQuality = QualityType.Medium;              break;              case 6: // High              _newQuality = QualityType.High;              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetQuality,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: // Not Set              _newQuality = QualityType.NotSet;              break;              case 1: // Default              _newQuality = QualityType.Default;              break;              case 2: // Custom              _newQuality = QualityType.Custom;              break;              case 3: // Protable              _newQuality = QualityType.Portable;              break;              case 4: // Low              _newQuality = QualityType.Low;              break;              case 5: // Medium              _newQuality = QualityType.Medium;              break;              case 6: // High              _newQuality = QualityType.High;              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetQuality,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: // Not Set              _newQuality = QualityType.NotSet;              break;              case 1: // Default              _newQuality = QualityType.Default;              break;              case 2: // Custom              _newQuality = QualityType.Custom;              break;              case 3: // Protable              _newQuality = QualityType.Portable;              break;              case 4: // Low              _newQuality = QualityType.Low;              break;              case 5: // Medium              _newQuality = QualityType.Medium;              break;              case 6: // High              _newQuality = QualityType.High;              break;          }
Magic Number,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetQuality,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: // Not Set              _newQuality = QualityType.NotSet;              break;              case 1: // Default              _newQuality = QualityType.Default;              break;              case 2: // Custom              _newQuality = QualityType.Custom;              break;              case 3: // Protable              _newQuality = QualityType.Portable;              break;              case 4: // Low              _newQuality = QualityType.Low;              break;              case 5: // Medium              _newQuality = QualityType.Medium;              break;              case 6: // High              _newQuality = QualityType.High;              break;          }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,PopulateListviewWithUpcomingEpisodes,The following statement contains a magic number: List<Program> episodes = (List<Program>)layer.SearchMinimalPrograms(dtDay' dtDay.AddDays(28)' initialProgram.Title' null);
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,PopulateListviewWithUpcomingEpisodes,The following statement contains a magic number: lblUpcomingEpsiodes.Label = GUILocalizeStrings.Get(1203' new object[] { activeRecordings });
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,CheckRecordingStatus,The following statement contains a magic number: btnRecord.Label = GUILocalizeStrings.Get(1039);
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnPreRecordInterval,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(1444));
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnPreRecordInterval,The following statement contains a magic number: dlg.Add(String.Format("{0} {1}"' interval'                                      GUILocalizeStrings.Get(3003) + " (" + GUILocalizeStrings.Get(886) + ")"));
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnPreRecordInterval,The following statement contains a magic number: dlg.Add(String.Format("{0} {1}"' interval'                                      GUILocalizeStrings.Get(3003) + " (" + GUILocalizeStrings.Get(886) + ")"));
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnPostRecordInterval,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(1445));
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnPostRecordInterval,The following statement contains a magic number: dlg.Add(String.Format("{0} {1}"' interval'                                      GUILocalizeStrings.Get(3003) + " (" + GUILocalizeStrings.Get(886) + ")"));
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnPostRecordInterval,The following statement contains a magic number: dlg.Add(String.Format("{0} {1}"' interval'                                      GUILocalizeStrings.Get(3003) + " (" + GUILocalizeStrings.Get(886) + ")"));
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnSetQuality,The following statement contains a magic number: dlg.SetHeading(882);
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnSetQuality,The following statement contains a magic number: dlg.AddLocalizedString(968);
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnSetQuality,The following statement contains a magic number: dlg.AddLocalizedString(965);
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnSetQuality,The following statement contains a magic number: dlg.AddLocalizedString(966);
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnSetQuality,The following statement contains a magic number: dlg.AddLocalizedString(967);
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnSetQuality,The following statement contains a magic number: switch (_newBitRate)          {            case VIDEOENCODER_BITRATE_MODE.NotSet:              dlg.SelectedLabel = 0;              break;            case VIDEOENCODER_BITRATE_MODE.ConstantBitRate:              dlg.SelectedLabel = 1;              break;            case VIDEOENCODER_BITRATE_MODE.VariableBitRateAverage:              dlg.SelectedLabel = 2;              break;            case VIDEOENCODER_BITRATE_MODE.VariableBitRatePeak:              dlg.SelectedLabel = 3;              break;          }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnSetQuality,The following statement contains a magic number: switch (_newBitRate)          {            case VIDEOENCODER_BITRATE_MODE.NotSet:              dlg.SelectedLabel = 0;              break;            case VIDEOENCODER_BITRATE_MODE.ConstantBitRate:              dlg.SelectedLabel = 1;              break;            case VIDEOENCODER_BITRATE_MODE.VariableBitRateAverage:              dlg.SelectedLabel = 2;              break;            case VIDEOENCODER_BITRATE_MODE.VariableBitRatePeak:              dlg.SelectedLabel = 3;              break;          }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnSetQuality,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: // Not Set              _newBitRate = VIDEOENCODER_BITRATE_MODE.NotSet;              break;              case 1: // CBR              _newBitRate = VIDEOENCODER_BITRATE_MODE.ConstantBitRate;              break;              case 2: // VBR              _newBitRate = VIDEOENCODER_BITRATE_MODE.VariableBitRateAverage;              break;              case 3: // VBR Peak              _newBitRate = VIDEOENCODER_BITRATE_MODE.VariableBitRatePeak;              break;          }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnSetQuality,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: // Not Set              _newBitRate = VIDEOENCODER_BITRATE_MODE.NotSet;              break;              case 1: // CBR              _newBitRate = VIDEOENCODER_BITRATE_MODE.ConstantBitRate;              break;              case 2: // VBR              _newBitRate = VIDEOENCODER_BITRATE_MODE.VariableBitRateAverage;              break;              case 3: // VBR Peak              _newBitRate = VIDEOENCODER_BITRATE_MODE.VariableBitRatePeak;              break;          }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnSetQuality,The following statement contains a magic number: dlg.SetHeading(882);
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnSetQuality,The following statement contains a magic number: dlg.AddLocalizedString(968);
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnSetQuality,The following statement contains a magic number: dlg.AddLocalizedString(886);
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnSetQuality,The following statement contains a magic number: dlg.AddLocalizedString(993);
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnSetQuality,The following statement contains a magic number: dlg.AddLocalizedString(893);
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnSetQuality,The following statement contains a magic number: dlg.AddLocalizedString(883);
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnSetQuality,The following statement contains a magic number: dlg.AddLocalizedString(884);
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnSetQuality,The following statement contains a magic number: dlg.AddLocalizedString(885);
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnSetQuality,The following statement contains a magic number: switch (_newQuality)          {            case QualityType.NotSet:              dlg.SelectedLabel = 0;              break;            case QualityType.Default:              dlg.SelectedLabel = 1;              break;            case QualityType.Custom:              dlg.SelectedLabel = 2;              break;            case QualityType.Portable:              dlg.SelectedLabel = 3;              break;            case QualityType.Low:              dlg.SelectedLabel = 4;              break;            case QualityType.Medium:              dlg.SelectedLabel = 5;              break;            case QualityType.High:              dlg.SelectedLabel = 6;              break;          }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnSetQuality,The following statement contains a magic number: switch (_newQuality)          {            case QualityType.NotSet:              dlg.SelectedLabel = 0;              break;            case QualityType.Default:              dlg.SelectedLabel = 1;              break;            case QualityType.Custom:              dlg.SelectedLabel = 2;              break;            case QualityType.Portable:              dlg.SelectedLabel = 3;              break;            case QualityType.Low:              dlg.SelectedLabel = 4;              break;            case QualityType.Medium:              dlg.SelectedLabel = 5;              break;            case QualityType.High:              dlg.SelectedLabel = 6;              break;          }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnSetQuality,The following statement contains a magic number: switch (_newQuality)          {            case QualityType.NotSet:              dlg.SelectedLabel = 0;              break;            case QualityType.Default:              dlg.SelectedLabel = 1;              break;            case QualityType.Custom:              dlg.SelectedLabel = 2;              break;            case QualityType.Portable:              dlg.SelectedLabel = 3;              break;            case QualityType.Low:              dlg.SelectedLabel = 4;              break;            case QualityType.Medium:              dlg.SelectedLabel = 5;              break;            case QualityType.High:              dlg.SelectedLabel = 6;              break;          }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnSetQuality,The following statement contains a magic number: switch (_newQuality)          {            case QualityType.NotSet:              dlg.SelectedLabel = 0;              break;            case QualityType.Default:              dlg.SelectedLabel = 1;              break;            case QualityType.Custom:              dlg.SelectedLabel = 2;              break;            case QualityType.Portable:              dlg.SelectedLabel = 3;              break;            case QualityType.Low:              dlg.SelectedLabel = 4;              break;            case QualityType.Medium:              dlg.SelectedLabel = 5;              break;            case QualityType.High:              dlg.SelectedLabel = 6;              break;          }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnSetQuality,The following statement contains a magic number: switch (_newQuality)          {            case QualityType.NotSet:              dlg.SelectedLabel = 0;              break;            case QualityType.Default:              dlg.SelectedLabel = 1;              break;            case QualityType.Custom:              dlg.SelectedLabel = 2;              break;            case QualityType.Portable:              dlg.SelectedLabel = 3;              break;            case QualityType.Low:              dlg.SelectedLabel = 4;              break;            case QualityType.Medium:              dlg.SelectedLabel = 5;              break;            case QualityType.High:              dlg.SelectedLabel = 6;              break;          }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnSetQuality,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: // Default              _newQuality = QualityType.Default;              break;              case 1: // Custom              _newQuality = QualityType.Custom;              break;              case 2: // Protable              _newQuality = QualityType.Portable;              break;              case 3: // Low              _newQuality = QualityType.Low;              break;              case 4: // Medium              _newQuality = QualityType.Medium;              break;              case 5: // High              _newQuality = QualityType.High;              break;          }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnSetQuality,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: // Default              _newQuality = QualityType.Default;              break;              case 1: // Custom              _newQuality = QualityType.Custom;              break;              case 2: // Protable              _newQuality = QualityType.Portable;              break;              case 3: // Low              _newQuality = QualityType.Low;              break;              case 4: // Medium              _newQuality = QualityType.Medium;              break;              case 5: // High              _newQuality = QualityType.High;              break;          }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnSetQuality,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: // Default              _newQuality = QualityType.Default;              break;              case 1: // Custom              _newQuality = QualityType.Custom;              break;              case 2: // Protable              _newQuality = QualityType.Portable;              break;              case 3: // Low              _newQuality = QualityType.Low;              break;              case 4: // Medium              _newQuality = QualityType.Medium;              break;              case 5: // High              _newQuality = QualityType.High;              break;          }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnSetQuality,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: // Default              _newQuality = QualityType.Default;              break;              case 1: // Custom              _newQuality = QualityType.Custom;              break;              case 2: // Protable              _newQuality = QualityType.Portable;              break;              case 3: // Low              _newQuality = QualityType.Low;              break;              case 4: // Medium              _newQuality = QualityType.Medium;              break;              case 5: // High              _newQuality = QualityType.High;              break;          }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,CancelProgram,The following statement contains a magic number: dlg.AddLocalizedString(981);
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,CancelProgram,The following statement contains a magic number: dlg.AddLocalizedString(982);
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,CancelProgram,The following statement contains a magic number: switch (dlg.SelectedId)          {            case 981: //delete specific series                break;            case 982: //Delete entire recording              deleteEntireSched = true;              break;          }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,CancelProgram,The following statement contains a magic number: switch (dlg.SelectedId)          {            case 981: //delete specific series                break;            case 982: //Delete entire recording              deleteEntireSched = true;              break;          }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,CreateProgram,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(879));
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,CreateProgram,The following statement contains a magic number: switch (dlg.SelectedLabel)            {              case 0: // Skip new Recording                {                  Log.Debug("TVProgramInfo.CreateProgram: Skip new recording");                  return;                }              case 1: // Don't record the already scheduled one(s)                {                  Log.Debug("TVProgramInfo.CreateProgram: Skip old recording(s)");                  foreach (Schedule conflict in conflicts)                  {                    Program prog =                      new Program(conflict.IdChannel' conflict.StartTime' conflict.EndTime' conflict.ProgramName' "-"' "-"'                                  Program.ProgramState.None'                                  DateTime.MinValue' string.Empty' string.Empty' string.Empty' string.Empty' -1'                                  string.Empty' -1);                    CancelProgram(prog' Schedule.Retrieve(conflict.IdSchedule)' dialogId);                  }                  break;                }              case 2: // keep conflict                {                  Log.Debug("TVProgramInfo.CreateProgram: Keep Conflict");                  break;                }              case 3: // Skip for conflicting episodes                {                  Log.Debug("TVProgramInfo.CreateProgram: Skip conflicting episode(s)");                  skipConflictingEpisodes = true;                  break;                }              default: // Skipping new Recording                {                  Log.Debug("TVProgramInfo.CreateProgram: Default => Skip new recording");                  return;                }            }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,CreateProgram,The following statement contains a magic number: switch (dlg.SelectedLabel)            {              case 0: // Skip new Recording                {                  Log.Debug("TVProgramInfo.CreateProgram: Skip new recording");                  return;                }              case 1: // Don't record the already scheduled one(s)                {                  Log.Debug("TVProgramInfo.CreateProgram: Skip old recording(s)");                  foreach (Schedule conflict in conflicts)                  {                    Program prog =                      new Program(conflict.IdChannel' conflict.StartTime' conflict.EndTime' conflict.ProgramName' "-"' "-"'                                  Program.ProgramState.None'                                  DateTime.MinValue' string.Empty' string.Empty' string.Empty' string.Empty' -1'                                  string.Empty' -1);                    CancelProgram(prog' Schedule.Retrieve(conflict.IdSchedule)' dialogId);                  }                  break;                }              case 2: // keep conflict                {                  Log.Debug("TVProgramInfo.CreateProgram: Keep Conflict");                  break;                }              case 3: // Skip for conflicting episodes                {                  Log.Debug("TVProgramInfo.CreateProgram: Skip conflicting episode(s)");                  skipConflictingEpisodes = true;                  break;                }              default: // Skipping new Recording                {                  Log.Debug("TVProgramInfo.CreateProgram: Default => Skip new recording");                  return;                }            }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,CreateProgram,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(1508));
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,CreateProgram,The following statement contains a magic number: switch (dlg.SelectedLabel)            {              case 0: // Skip new Recording                {                  Log.Debug("TVProgramInfo.CreateProgram: Skip new recording");                  return;                }              case 2: // keep notViewable                {                  Log.Debug("TVProgramInfo.CreateProgram: Keep notViewable");                  break;                }              case 3: // Skip for notViewable episodes                {                  Log.Debug("TVProgramInfo.CreateProgram: Skip notViewable episode(s)");                  skipNotViewableEpisodes = true;                  break;                }              default: // Skipping new notViewable                {                  Log.Debug("TVProgramInfo.CreateProgram: Default => Skip new notViewable");                  return;                }            }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,CreateProgram,The following statement contains a magic number: switch (dlg.SelectedLabel)            {              case 0: // Skip new Recording                {                  Log.Debug("TVProgramInfo.CreateProgram: Skip new recording");                  return;                }              case 2: // keep notViewable                {                  Log.Debug("TVProgramInfo.CreateProgram: Keep notViewable");                  break;                }              case 3: // Skip for notViewable episodes                {                  Log.Debug("TVProgramInfo.CreateProgram: Skip notViewable episode(s)");                  skipNotViewableEpisodes = true;                  break;                }              default: // Skipping new notViewable                {                  Log.Debug("TVProgramInfo.CreateProgram: Default => Skip new notViewable");                  return;                }            }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnAdvancedRecord,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(616));
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnAdvancedRecord,The following statement contains a magic number: i <= 615
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnAdvancedRecord,The following statement contains a magic number: dlg.AddLocalizedString(990000);
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnAdvancedRecord,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: //once              scheduleType = (int)ScheduleRecordingType.Once;              break;            case 1: //everytime' this channel              scheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              break;            case 2: //everytime' all channels              scheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              break;            case 3: //weekly              scheduleType = (int)ScheduleRecordingType.Weekly;              break;            case 4: //daily              scheduleType = (int)ScheduleRecordingType.Daily;              break;            case 5: //WorkingDays              scheduleType = (int)ScheduleRecordingType.WorkingDays;              break;            case 6: //Weekends              scheduleType = (int)ScheduleRecordingType.Weekends;              break;            case 7://Weekly everytime' this channel              scheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              break;          }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnAdvancedRecord,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: //once              scheduleType = (int)ScheduleRecordingType.Once;              break;            case 1: //everytime' this channel              scheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              break;            case 2: //everytime' all channels              scheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              break;            case 3: //weekly              scheduleType = (int)ScheduleRecordingType.Weekly;              break;            case 4: //daily              scheduleType = (int)ScheduleRecordingType.Daily;              break;            case 5: //WorkingDays              scheduleType = (int)ScheduleRecordingType.WorkingDays;              break;            case 6: //Weekends              scheduleType = (int)ScheduleRecordingType.Weekends;              break;            case 7://Weekly everytime' this channel              scheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              break;          }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnAdvancedRecord,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: //once              scheduleType = (int)ScheduleRecordingType.Once;              break;            case 1: //everytime' this channel              scheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              break;            case 2: //everytime' all channels              scheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              break;            case 3: //weekly              scheduleType = (int)ScheduleRecordingType.Weekly;              break;            case 4: //daily              scheduleType = (int)ScheduleRecordingType.Daily;              break;            case 5: //WorkingDays              scheduleType = (int)ScheduleRecordingType.WorkingDays;              break;            case 6: //Weekends              scheduleType = (int)ScheduleRecordingType.Weekends;              break;            case 7://Weekly everytime' this channel              scheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              break;          }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnAdvancedRecord,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: //once              scheduleType = (int)ScheduleRecordingType.Once;              break;            case 1: //everytime' this channel              scheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              break;            case 2: //everytime' all channels              scheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              break;            case 3: //weekly              scheduleType = (int)ScheduleRecordingType.Weekly;              break;            case 4: //daily              scheduleType = (int)ScheduleRecordingType.Daily;              break;            case 5: //WorkingDays              scheduleType = (int)ScheduleRecordingType.WorkingDays;              break;            case 6: //Weekends              scheduleType = (int)ScheduleRecordingType.Weekends;              break;            case 7://Weekly everytime' this channel              scheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              break;          }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnAdvancedRecord,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: //once              scheduleType = (int)ScheduleRecordingType.Once;              break;            case 1: //everytime' this channel              scheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              break;            case 2: //everytime' all channels              scheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              break;            case 3: //weekly              scheduleType = (int)ScheduleRecordingType.Weekly;              break;            case 4: //daily              scheduleType = (int)ScheduleRecordingType.Daily;              break;            case 5: //WorkingDays              scheduleType = (int)ScheduleRecordingType.WorkingDays;              break;            case 6: //Weekends              scheduleType = (int)ScheduleRecordingType.Weekends;              break;            case 7://Weekly everytime' this channel              scheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              break;          }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnAdvancedRecord,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: //once              scheduleType = (int)ScheduleRecordingType.Once;              break;            case 1: //everytime' this channel              scheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              break;            case 2: //everytime' all channels              scheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              break;            case 3: //weekly              scheduleType = (int)ScheduleRecordingType.Weekly;              break;            case 4: //daily              scheduleType = (int)ScheduleRecordingType.Daily;              break;            case 5: //WorkingDays              scheduleType = (int)ScheduleRecordingType.WorkingDays;              break;            case 6: //Weekends              scheduleType = (int)ScheduleRecordingType.Weekends;              break;            case 7://Weekly everytime' this channel              scheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              break;          }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnAdvancedRecord,The following statement contains a magic number: DateTime dtEnd = dtStart.AddHours(3);
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnAdvancedRecord,The following statement contains a magic number: dlgYesNo.SetHeading(1012);
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnAdvancedRecord,The following statement contains a magic number: dlgYesNo.SetLine(2' 1013);
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnAdvancedRecord,The following statement contains a magic number: dlgYesNo.SetLine(2' 1013);
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnAdvancedRecord,The following statement contains a magic number: ts.TotalMinutes <= 40
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnAdvancedRecord,The following statement contains a magic number: programs.Count >= 2
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnKeep,The following statement contains a magic number: dlg.SetHeading(1042);
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnKeep,The following statement contains a magic number: dlg.AddLocalizedString(1043);
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnKeep,The following statement contains a magic number: dlg.AddLocalizedString(1044);
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnKeep,The following statement contains a magic number: dlg.AddLocalizedString(1045);
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnKeep,The following statement contains a magic number: dlg.AddLocalizedString(1046);
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnKeep,The following statement contains a magic number: switch (rec.KeepMethod)        {          case (int)KeepMethodType.UntilWatched:            dlg.SelectedLabel = 0;            break;          case (int)KeepMethodType.UntilSpaceNeeded:            dlg.SelectedLabel = 1;            break;          case (int)KeepMethodType.TillDate:            dlg.SelectedLabel = 2;            break;          case (int)KeepMethodType.Always:            dlg.SelectedLabel = 3;            break;        }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnKeep,The following statement contains a magic number: switch (rec.KeepMethod)        {          case (int)KeepMethodType.UntilWatched:            dlg.SelectedLabel = 0;            break;          case (int)KeepMethodType.UntilSpaceNeeded:            dlg.SelectedLabel = 1;            break;          case (int)KeepMethodType.TillDate:            dlg.SelectedLabel = 2;            break;          case (int)KeepMethodType.Always:            dlg.SelectedLabel = 3;            break;        }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnKeep,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 1043:            rec.KeepMethod = (int)KeepMethodType.UntilWatched;            break;          case 1044:            rec.KeepMethod = (int)KeepMethodType.UntilSpaceNeeded;              break;          case 1045:            rec.KeepMethod = (int)KeepMethodType.TillDate;            dlg.Reset();            dlg.ShowQuickNumbers = false;            dlg.SetHeading(1045);            for (int iDay = 1; iDay <= 100; iDay++)            {              DateTime dt = CurrentProgram.StartTime.AddDays(iDay);              dlg.Add(dt.ToLongDateString());            }            TimeSpan ts = (rec.KeepDate - CurrentProgram.StartTime);            int days = (int)ts.TotalDays;            if (days >= 100)            {              days = 30;            }            dlg.SelectedLabel = days - 1;            dlg.DoModal(GetID);            if (dlg.SelectedLabel < 0)            {              return;            }            rec.KeepDate = CurrentProgram.StartTime.AddDays(dlg.SelectedLabel + 1);            break;          case 1046:            rec.KeepMethod = (int)KeepMethodType.Always;            break;        }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnKeep,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 1043:            rec.KeepMethod = (int)KeepMethodType.UntilWatched;            break;          case 1044:            rec.KeepMethod = (int)KeepMethodType.UntilSpaceNeeded;              break;          case 1045:            rec.KeepMethod = (int)KeepMethodType.TillDate;            dlg.Reset();            dlg.ShowQuickNumbers = false;            dlg.SetHeading(1045);            for (int iDay = 1; iDay <= 100; iDay++)            {              DateTime dt = CurrentProgram.StartTime.AddDays(iDay);              dlg.Add(dt.ToLongDateString());            }            TimeSpan ts = (rec.KeepDate - CurrentProgram.StartTime);            int days = (int)ts.TotalDays;            if (days >= 100)            {              days = 30;            }            dlg.SelectedLabel = days - 1;            dlg.DoModal(GetID);            if (dlg.SelectedLabel < 0)            {              return;            }            rec.KeepDate = CurrentProgram.StartTime.AddDays(dlg.SelectedLabel + 1);            break;          case 1046:            rec.KeepMethod = (int)KeepMethodType.Always;            break;        }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnKeep,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 1043:            rec.KeepMethod = (int)KeepMethodType.UntilWatched;            break;          case 1044:            rec.KeepMethod = (int)KeepMethodType.UntilSpaceNeeded;              break;          case 1045:            rec.KeepMethod = (int)KeepMethodType.TillDate;            dlg.Reset();            dlg.ShowQuickNumbers = false;            dlg.SetHeading(1045);            for (int iDay = 1; iDay <= 100; iDay++)            {              DateTime dt = CurrentProgram.StartTime.AddDays(iDay);              dlg.Add(dt.ToLongDateString());            }            TimeSpan ts = (rec.KeepDate - CurrentProgram.StartTime);            int days = (int)ts.TotalDays;            if (days >= 100)            {              days = 30;            }            dlg.SelectedLabel = days - 1;            dlg.DoModal(GetID);            if (dlg.SelectedLabel < 0)            {              return;            }            rec.KeepDate = CurrentProgram.StartTime.AddDays(dlg.SelectedLabel + 1);            break;          case 1046:            rec.KeepMethod = (int)KeepMethodType.Always;            break;        }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnKeep,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 1043:            rec.KeepMethod = (int)KeepMethodType.UntilWatched;            break;          case 1044:            rec.KeepMethod = (int)KeepMethodType.UntilSpaceNeeded;              break;          case 1045:            rec.KeepMethod = (int)KeepMethodType.TillDate;            dlg.Reset();            dlg.ShowQuickNumbers = false;            dlg.SetHeading(1045);            for (int iDay = 1; iDay <= 100; iDay++)            {              DateTime dt = CurrentProgram.StartTime.AddDays(iDay);              dlg.Add(dt.ToLongDateString());            }            TimeSpan ts = (rec.KeepDate - CurrentProgram.StartTime);            int days = (int)ts.TotalDays;            if (days >= 100)            {              days = 30;            }            dlg.SelectedLabel = days - 1;            dlg.DoModal(GetID);            if (dlg.SelectedLabel < 0)            {              return;            }            rec.KeepDate = CurrentProgram.StartTime.AddDays(dlg.SelectedLabel + 1);            break;          case 1046:            rec.KeepMethod = (int)KeepMethodType.Always;            break;        }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnKeep,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 1043:            rec.KeepMethod = (int)KeepMethodType.UntilWatched;            break;          case 1044:            rec.KeepMethod = (int)KeepMethodType.UntilSpaceNeeded;              break;          case 1045:            rec.KeepMethod = (int)KeepMethodType.TillDate;            dlg.Reset();            dlg.ShowQuickNumbers = false;            dlg.SetHeading(1045);            for (int iDay = 1; iDay <= 100; iDay++)            {              DateTime dt = CurrentProgram.StartTime.AddDays(iDay);              dlg.Add(dt.ToLongDateString());            }            TimeSpan ts = (rec.KeepDate - CurrentProgram.StartTime);            int days = (int)ts.TotalDays;            if (days >= 100)            {              days = 30;            }            dlg.SelectedLabel = days - 1;            dlg.DoModal(GetID);            if (dlg.SelectedLabel < 0)            {              return;            }            rec.KeepDate = CurrentProgram.StartTime.AddDays(dlg.SelectedLabel + 1);            break;          case 1046:            rec.KeepMethod = (int)KeepMethodType.Always;            break;        }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnKeep,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 1043:            rec.KeepMethod = (int)KeepMethodType.UntilWatched;            break;          case 1044:            rec.KeepMethod = (int)KeepMethodType.UntilSpaceNeeded;              break;          case 1045:            rec.KeepMethod = (int)KeepMethodType.TillDate;            dlg.Reset();            dlg.ShowQuickNumbers = false;            dlg.SetHeading(1045);            for (int iDay = 1; iDay <= 100; iDay++)            {              DateTime dt = CurrentProgram.StartTime.AddDays(iDay);              dlg.Add(dt.ToLongDateString());            }            TimeSpan ts = (rec.KeepDate - CurrentProgram.StartTime);            int days = (int)ts.TotalDays;            if (days >= 100)            {              days = 30;            }            dlg.SelectedLabel = days - 1;            dlg.DoModal(GetID);            if (dlg.SelectedLabel < 0)            {              return;            }            rec.KeepDate = CurrentProgram.StartTime.AddDays(dlg.SelectedLabel + 1);            break;          case 1046:            rec.KeepMethod = (int)KeepMethodType.Always;            break;        }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnKeep,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 1043:            rec.KeepMethod = (int)KeepMethodType.UntilWatched;            break;          case 1044:            rec.KeepMethod = (int)KeepMethodType.UntilSpaceNeeded;              break;          case 1045:            rec.KeepMethod = (int)KeepMethodType.TillDate;            dlg.Reset();            dlg.ShowQuickNumbers = false;            dlg.SetHeading(1045);            for (int iDay = 1; iDay <= 100; iDay++)            {              DateTime dt = CurrentProgram.StartTime.AddDays(iDay);              dlg.Add(dt.ToLongDateString());            }            TimeSpan ts = (rec.KeepDate - CurrentProgram.StartTime);            int days = (int)ts.TotalDays;            if (days >= 100)            {              days = 30;            }            dlg.SelectedLabel = days - 1;            dlg.DoModal(GetID);            if (dlg.SelectedLabel < 0)            {              return;            }            rec.KeepDate = CurrentProgram.StartTime.AddDays(dlg.SelectedLabel + 1);            break;          case 1046:            rec.KeepMethod = (int)KeepMethodType.Always;            break;        }
Magic Number,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnKeep,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 1043:            rec.KeepMethod = (int)KeepMethodType.UntilWatched;            break;          case 1044:            rec.KeepMethod = (int)KeepMethodType.UntilSpaceNeeded;              break;          case 1045:            rec.KeepMethod = (int)KeepMethodType.TillDate;            dlg.Reset();            dlg.ShowQuickNumbers = false;            dlg.SetHeading(1045);            for (int iDay = 1; iDay <= 100; iDay++)            {              DateTime dt = CurrentProgram.StartTime.AddDays(iDay);              dlg.Add(dt.ToLongDateString());            }            TimeSpan ts = (rec.KeepDate - CurrentProgram.StartTime);            int days = (int)ts.TotalDays;            if (days >= 100)            {              days = 30;            }            dlg.SelectedLabel = days - 1;            dlg.DoModal(GetID);            if (dlg.SelectedLabel < 0)            {              return;            }            rec.KeepDate = CurrentProgram.StartTime.AddDays(dlg.SelectedLabel + 1);            break;          case 1046:            rec.KeepMethod = (int)KeepMethodType.Always;            break;        }
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,LoadSettings,The following statement contains a magic number: _watchedPercentage = xmlreader.GetValueAsInt("movies"' "playedpercentagewatched"' 95);
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnShowSort,The following statement contains a magic number: dlg.SetHeading(495);
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(620);
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(104);
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(268);
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(669);
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(671);
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(1017);
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(656);
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 656: // delete            OnDeleteRecording(iItem);            break;            case 655: // play            if (OnSelectedRecording(iItem))            {              return;            }            break;            case 1048: // Settings            TvRecordedInfo.CurrentProgram = rec;            GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_RECORDED_INFO);            break;            case 200072:            ShowUpcomingEpisodes(rec);            break;            case 830: // Reset watched status            _iSelectedItem = GetSelectedItemNo();            ResetWatchedStatus(rec);            LoadDirectory();            GUIControl.SelectItemControl(GetID' facadeLayout.GetID' _iSelectedItem);            break;        }
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 656: // delete            OnDeleteRecording(iItem);            break;            case 655: // play            if (OnSelectedRecording(iItem))            {              return;            }            break;            case 1048: // Settings            TvRecordedInfo.CurrentProgram = rec;            GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_RECORDED_INFO);            break;            case 200072:            ShowUpcomingEpisodes(rec);            break;            case 830: // Reset watched status            _iSelectedItem = GetSelectedItemNo();            ResetWatchedStatus(rec);            LoadDirectory();            GUIControl.SelectItemControl(GetID' facadeLayout.GetID' _iSelectedItem);            break;        }
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 656: // delete            OnDeleteRecording(iItem);            break;            case 655: // play            if (OnSelectedRecording(iItem))            {              return;            }            break;            case 1048: // Settings            TvRecordedInfo.CurrentProgram = rec;            GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_RECORDED_INFO);            break;            case 200072:            ShowUpcomingEpisodes(rec);            break;            case 830: // Reset watched status            _iSelectedItem = GetSelectedItemNo();            ResetWatchedStatus(rec);            LoadDirectory();            GUIControl.SelectItemControl(GetID' facadeLayout.GetID' _iSelectedItem);            break;        }
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 656: // delete            OnDeleteRecording(iItem);            break;            case 655: // play            if (OnSelectedRecording(iItem))            {              return;            }            break;            case 1048: // Settings            TvRecordedInfo.CurrentProgram = rec;            GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_RECORDED_INFO);            break;            case 200072:            ShowUpcomingEpisodes(rec);            break;            case 830: // Reset watched status            _iSelectedItem = GetSelectedItemNo();            ResetWatchedStatus(rec);            LoadDirectory();            GUIControl.SelectItemControl(GetID' facadeLayout.GetID' _iSelectedItem);            break;        }
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 656: // delete            OnDeleteRecording(iItem);            break;            case 655: // play            if (OnSelectedRecording(iItem))            {              return;            }            break;            case 1048: // Settings            TvRecordedInfo.CurrentProgram = rec;            GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_RECORDED_INFO);            break;            case 200072:            ShowUpcomingEpisodes(rec);            break;            case 830: // Reset watched status            _iSelectedItem = GetSelectedItemNo();            ResetWatchedStatus(rec);            LoadDirectory();            GUIControl.SelectItemControl(GetID' facadeLayout.GetID' _iSelectedItem);            break;        }
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,Process,The following statement contains a magic number: (_resetSMSsearch == true) && (_resetSMSsearchDelay.Subtract(DateTime.Now).Seconds < -2)
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,InitViewSelections,The following statement contains a magic number: btnViews.AddItem(GUILocalizeStrings.Get(914)' index++);
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,InitViewSelections,The following statement contains a magic number: btnViews.AddItem(GUILocalizeStrings.Get(135)' index++);
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,InitViewSelections,The following statement contains a magic number: btnViews.AddItem(GUILocalizeStrings.Get(915)' index++);
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,InitViewSelections,The following statement contains a magic number: btnViews.AddItem(GUILocalizeStrings.Get(636)' index++);
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,InitViewSelections,The following statement contains a magic number: switch (_currentDbView)        {          case DBView.Recordings:            btnViews.SetSelectedItemByValue(0);            break;          case DBView.Genre:            btnViews.SetSelectedItemByValue(1);            break;          case DBView.Channel:            btnViews.SetSelectedItemByValue(2);            break;          case DBView.History:            btnViews.SetSelectedItemByValue(3);            break;        }
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,InitViewSelections,The following statement contains a magic number: switch (_currentDbView)        {          case DBView.Recordings:            btnViews.SetSelectedItemByValue(0);            break;          case DBView.Genre:            btnViews.SetSelectedItemByValue(1);            break;          case DBView.Channel:            btnViews.SetSelectedItemByValue(2);            break;          case DBView.History:            btnViews.SetSelectedItemByValue(3);            break;        }
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,SetView,The following statement contains a magic number: switch (selectedViewId)          {            case 0:              _currentDbView = DBView.Recordings;              break;            case 1:              _currentDbView = DBView.Genre;              break;            case 2:              _currentDbView = DBView.Channel;              break;            case 3:              _currentDbView = DBView.History;              break;          }
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,SetView,The following statement contains a magic number: switch (selectedViewId)          {            case 0:              _currentDbView = DBView.Recordings;              break;            case 1:              _currentDbView = DBView.Genre;              break;            case 2:              _currentDbView = DBView.Channel;              break;            case 3:              _currentDbView = DBView.History;              break;          }
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,UpdateButtonStates,The following statement contains a magic number: switch (_currentSortMethod)            {              case SortMethod.Channel:                strLine = GUILocalizeStrings.Get(620); //Sort by: Channel                break;              case SortMethod.Date:                strLine = GUILocalizeStrings.Get(621); //Sort by: Date                break;              case SortMethod.Name:                strLine = GUILocalizeStrings.Get(268); //Sort by: Title                break;              case SortMethod.Genre:                strLine = GUILocalizeStrings.Get(678); //Sort by: Genre                break;              case SortMethod.Played:                strLine = GUILocalizeStrings.Get(671); //Sort by: Watched                break;              case SortMethod.Duration:                strLine = GUILocalizeStrings.Get(1017); //Sort by: Duration                break;            }
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,UpdateButtonStates,The following statement contains a magic number: switch (_currentSortMethod)            {              case SortMethod.Channel:                strLine = GUILocalizeStrings.Get(620); //Sort by: Channel                break;              case SortMethod.Date:                strLine = GUILocalizeStrings.Get(621); //Sort by: Date                break;              case SortMethod.Name:                strLine = GUILocalizeStrings.Get(268); //Sort by: Title                break;              case SortMethod.Genre:                strLine = GUILocalizeStrings.Get(678); //Sort by: Genre                break;              case SortMethod.Played:                strLine = GUILocalizeStrings.Get(671); //Sort by: Watched                break;              case SortMethod.Duration:                strLine = GUILocalizeStrings.Get(1017); //Sort by: Duration                break;            }
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,UpdateButtonStates,The following statement contains a magic number: switch (_currentSortMethod)            {              case SortMethod.Channel:                strLine = GUILocalizeStrings.Get(620); //Sort by: Channel                break;              case SortMethod.Date:                strLine = GUILocalizeStrings.Get(621); //Sort by: Date                break;              case SortMethod.Name:                strLine = GUILocalizeStrings.Get(268); //Sort by: Title                break;              case SortMethod.Genre:                strLine = GUILocalizeStrings.Get(678); //Sort by: Genre                break;              case SortMethod.Played:                strLine = GUILocalizeStrings.Get(671); //Sort by: Watched                break;              case SortMethod.Duration:                strLine = GUILocalizeStrings.Get(1017); //Sort by: Duration                break;            }
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,UpdateButtonStates,The following statement contains a magic number: switch (_currentSortMethod)            {              case SortMethod.Channel:                strLine = GUILocalizeStrings.Get(620); //Sort by: Channel                break;              case SortMethod.Date:                strLine = GUILocalizeStrings.Get(621); //Sort by: Date                break;              case SortMethod.Name:                strLine = GUILocalizeStrings.Get(268); //Sort by: Title                break;              case SortMethod.Genre:                strLine = GUILocalizeStrings.Get(678); //Sort by: Genre                break;              case SortMethod.Played:                strLine = GUILocalizeStrings.Get(671); //Sort by: Watched                break;              case SortMethod.Duration:                strLine = GUILocalizeStrings.Get(1017); //Sort by: Duration                break;            }
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,UpdateButtonStates,The following statement contains a magic number: switch (_currentSortMethod)            {              case SortMethod.Channel:                strLine = GUILocalizeStrings.Get(620); //Sort by: Channel                break;              case SortMethod.Date:                strLine = GUILocalizeStrings.Get(621); //Sort by: Date                break;              case SortMethod.Name:                strLine = GUILocalizeStrings.Get(268); //Sort by: Title                break;              case SortMethod.Genre:                strLine = GUILocalizeStrings.Get(678); //Sort by: Genre                break;              case SortMethod.Played:                strLine = GUILocalizeStrings.Get(671); //Sort by: Watched                break;              case SortMethod.Duration:                strLine = GUILocalizeStrings.Get(1017); //Sort by: Duration                break;            }
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,UpdateButtonStates,The following statement contains a magic number: switch (_currentSortMethod)            {              case SortMethod.Channel:                strLine = GUILocalizeStrings.Get(620); //Sort by: Channel                break;              case SortMethod.Date:                strLine = GUILocalizeStrings.Get(621); //Sort by: Date                break;              case SortMethod.Name:                strLine = GUILocalizeStrings.Get(268); //Sort by: Title                break;              case SortMethod.Genre:                strLine = GUILocalizeStrings.Get(678); //Sort by: Genre                break;              case SortMethod.Played:                strLine = GUILocalizeStrings.Get(671); //Sort by: Watched                break;              case SortMethod.Duration:                strLine = GUILocalizeStrings.Get(1017); //Sort by: Duration                break;            }
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,ListFolder,The following statement contains a magic number: var actualLabel = _currentLabel == GUILocalizeStrings.Get(2014) ? string.Empty : _currentLabel;
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,ListFolder,The following statement contains a magic number: switch (_currentDbView)            {              case DBView.History:                addToList = GetSpokenViewDate(rec.StartTime).Equals(actualLabel);                break;              case DBView.Recordings:                addToList = rec.Title.Equals(_currentLabel' StringComparison.InvariantCultureIgnoreCase) ||                            TVUtil.GetDisplayTitle(rec).Equals(actualLabel' StringComparison.InvariantCultureIgnoreCase);                break;              case DBView.Channel:                // possible that recording links to a channel that no longer exists                // make sure we pick those up if that value is selected                Channel channel = channels.FirstOrDefault(chan => rec.IdChannel == chan.IdChannel);                addToList = actualLabel.Equals(GUILocalizeStrings.Get(1507)) && channel == null ||                            GetChannelRecordingDisplayName(rec' channel).Equals(actualLabel' StringComparison.InvariantCultureIgnoreCase);                break;              case DBView.Genre:                addToList = rec.Genre.Equals(actualLabel' StringComparison.InvariantCultureIgnoreCase);                break;            }
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,LoadDirectory,The following statement contains a magic number: switch (_currentDbView)            {              case DBView.History:                groups = recordings.GroupBy(r => GetSpokenViewDate(r.StartTime)).Select(g => g.OrderByDescending(h => h.StartTime).First());                break;              case DBView.Recordings:                groups = recordings.GroupBy(r => r.Title' StringComparer.InvariantCultureIgnoreCase).Select(g => g.OrderByDescending(h => h.StartTime).First());                break;              case DBView.Channel:                //recording can link to channels that no longer exist. convert these to an unknown channel (string 1507) group                groups = recordings.GroupBy(r =>                {                  Channel channel = channels.FirstOrDefault(chan => r.IdChannel == chan.IdChannel);                  return channel == null ? GUILocalizeStrings.Get(1507) : channel.DisplayName;                }' StringComparer.InvariantCultureIgnoreCase).Select(g => g.OrderByDescending(h => h.StartTime).First());                break;              case DBView.Genre:                groups = recordings.GroupBy(r => r.Genre' StringComparer.InvariantCultureIgnoreCase).Select(g => g.OrderByDescending(h => h.StartTime).First());                break;            }
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,LoadDirectory,The following statement contains a magic number: switch (_currentDbView)              {                case DBView.History:                  item.Label = GetSpokenViewDate(folder.StartTime);                  item.Label2 = string.Empty;                  break;                case DBView.Recordings:                  string title = folder.Title;                  singleRecording = true;                  int count = 0;                  foreach (Recording recording in recordings)                  {                    if (!recording.Title.Equals(title' StringComparison.InvariantCultureIgnoreCase)) continue;                    count++;                    if (count <= 1) continue;                    singleRecording = false;                    break;                  }                    if (singleRecording)                  {                    item = BuildItemFromRecording(folder' channels.FirstOrDefault(chan => folder.IdChannel == chan.IdChannel));                    item.Label2 = TVUtil.GetRecordingDateString(folder);                  }                  else                  {                    item.Label = folder.Title;                    item.Label2 = GetSpokenViewDate(folder.StartTime);                  }                    break;                case DBView.Channel:                  // recordings can be linked to channels that no longer exist.                  Channel channel = channels.FirstOrDefault(chan => folder.IdChannel == chan.IdChannel);                  item.Label = channel == null ? GUILocalizeStrings.Get(1507) : channel.DisplayName;                  item.Label2 = GetSpokenViewDate(folder.StartTime);                  break;                case DBView.Genre:                  item.Label = folder.Genre;                  item.Label2 = GetSpokenViewDate(folder.StartTime);                  break;              }
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,LoadDirectory,The following statement contains a magic number: item.Label = GUILocalizeStrings.Get(2014);
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,BuildItemFromRecording,The following statement contains a magic number: string strChannelName = refCh != null ? refCh.DisplayName : GUILocalizeStrings.Get(1507);
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,BuildItemFromRecording,The following statement contains a magic number: switch (_currentDbView)          {            case DBView.Recordings:              item.Label = TVUtil.GetDisplayTitle(aRecording);              break;            case DBView.Channel:              item.Label = strChannelName;              break;            case DBView.Genre:              item.Label = !String.IsNullOrEmpty(aRecording.Genre) ? aRecording.Genre : GUILocalizeStrings.Get(2014); // unknown              break;            case DBView.History:              item.Label = GetSpokenViewDate(aRecording.StartTime);              break;          }
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,SetLabels,The following statement contains a magic number: item1.Label3 = GUILocalizeStrings.Get(2014);
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,SetLabels,The following statement contains a magic number: item1.Label2 = GUILocalizeStrings.Get(2014);
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnDeleteRecording,The following statement contains a magic number: dlgYesNo.SetHeading(GUILocalizeStrings.Get(2166));
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnDeleteRecording,The following statement contains a magic number: dlgYesNo.SetLine(2' string.Empty);
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnDeleteRecording,The following statement contains a magic number: dlgYesNo.SetLine(3' string.Empty);
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,TryDeleteRecordingAndNotifyUser,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,TryDeleteRecordingAndNotifyUser,The following statement contains a magic number: !deleteRecording && timeout < 5
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,TryDeleteRecordingAndNotifyUser,The following statement contains a magic number: dlgOk.SetHeading(257);
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,TryDeleteRecordingAndNotifyUser,The following statement contains a magic number: dlgOk.SetLine(1' GUILocalizeStrings.Get(200054));
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,TryDeleteRecordingAndNotifyUser,The following statement contains a magic number: dlgOk.SetLine(2' TVUtil.GetDisplayTitle(rec));
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnCleanup,The following statement contains a magic number: dlgYesNo.SetHeading(GUILocalizeStrings.Get(200043));
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnCleanup,The following statement contains a magic number: dlgYesNo.SetLine(1' GUILocalizeStrings.Get(200050));
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnCleanup,The following statement contains a magic number: dlgYesNo.SetLine(2' GUILocalizeStrings.Get(506));
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnCleanup,The following statement contains a magic number: dlgYesNo.SetLine(2' GUILocalizeStrings.Get(506));
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnCleanup,The following statement contains a magic number: dlgYesNo.SetLine(3' string.Empty);
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnCleanup,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(200043));
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnCleanup,The following statement contains a magic number: dlg.Add(new GUIListItem(GUILocalizeStrings.Get(676)));
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnCleanup,The following statement contains a magic number: dlg.Add(new GUIListItem(GUILocalizeStrings.Get(200044)));
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnCleanup,The following statement contains a magic number: dlg.Add(new GUIListItem(GUILocalizeStrings.Get(200045)));
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnCleanup,The following statement contains a magic number: dlg.Add(new GUIListItem(GUILocalizeStrings.Get(200049)));
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnCleanup,The following statement contains a magic number: dlg.Add(new GUIListItem(GUILocalizeStrings.Get(222)));
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnCleanup,The following statement contains a magic number: dlg.SelectedLabel > 4
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnCleanup,The following statement contains a magic number: (dlg.SelectedLabel == 0) || (dlg.SelectedLabel == 2)
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnCleanup,The following statement contains a magic number: (dlg.SelectedLabel == 1) || (dlg.SelectedLabel == 2)
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnCleanup,The following statement contains a magic number: dlg.SelectedLabel == 3 && _currentLabel != ""
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,UpdateProperties,The following statement contains a magic number: int percentWatched = (int)Math.Ceiling((rec.StopTime / duration1.TotalSeconds) * 100);
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,Compare,The following statement contains a magic number: switch (cSortMethod)            {              case SortMethod.Played:                {                  item1.Label2 = string.Format("{0} {1}"' rec1.TimesWatched' GUILocalizeStrings.Get(677)); //times                  item2.Label2 = string.Format("{0} {1}"' rec2.TimesWatched' GUILocalizeStrings.Get(677)); //times                  if (rec1.TimesWatched != rec2.TimesWatched)                  {                    return m_bSortAscending ? rec1.TimesWatched - rec2.TimesWatched : rec2.TimesWatched - rec1.TimesWatched;                  }                    cSortMethod = SortMethod.Name;                  break;                }                case SortMethod.Name:                {                  iComp = string.Compare(TVUtil.GetDisplayTitle(rec1)' TVUtil.GetDisplayTitle(rec2)' true);                  if (iComp != 0)                  {                    return m_bSortAscending ? iComp : -iComp;                  }                    cSortMethod = SortMethod.Channel;                  break;                }                case SortMethod.Channel:                {                  // if there is no referenced channel (eg. recording that links to a channel that is now deleted)                  // set channel name to unknown channel string (1507) to avoid null reference exceptions                  Channel ch1 = rec1.ReferencedChannel();                  Channel ch2 = rec2.ReferencedChannel();                  string ch1Name = ch1 == null ? GUILocalizeStrings.Get(1507) : ch1.DisplayName;                  string ch2Name = ch2 == null ? GUILocalizeStrings.Get(1507) : ch2.DisplayName;                    iComp = string.Compare(ch1Name' ch2Name' true);                  if (iComp != 0)                  {                    return m_bSortAscending ? iComp : -iComp;                  }                    cSortMethod = SortMethod.Date;                  break;                }              case SortMethod.Duration:                {                  TimeSpan duration1 = (rec1.EndTime - rec1.StartTime);                  TimeSpan duration2 = rec2.EndTime - rec2.StartTime;                  if (duration1 != duration2)                  {                    return duration1 > duration2 ? 1 : -1;                  }                    cSortMethod = SortMethod.Date;                  break;                }              case SortMethod.Date:                {                  if (rec1.StartTime != rec2.StartTime)                  {                    return m_bSortAscending ? (rec1.StartTime < rec2.StartTime ? 1 : -1) : (rec1.StartTime > rec2.StartTime ? 1 : -1);                  }                  return 0;                }                case SortMethod.Genre:                {                  item1.Label2 = rec1.Genre;                  item2.Label2 = rec2.Genre;                    if (rec1.Genre != rec2.Genre)                  {                    return m_bSortAscending ? string.Compare(rec1.Genre' rec2.Genre' true) : string.Compare(rec2.Genre' rec1.Genre' true);                  }                    if (rec1.StartTime != rec2.StartTime)                  {                    return m_bSortAscending ? (rec1.StartTime - rec2.StartTime).Minutes : (rec2.StartTime - rec1.StartTime).Minutes;                  }                    if (rec1.IdChannel != rec2.IdChannel)                  {                    // if there is no referenced channel (eg. recording that links to a channel that is now deleted)                    // set channel name to unknown channel string (1507) to avoid null reference exceptions                    Channel ch1 = rec1.ReferencedChannel();                    Channel ch2 = rec2.ReferencedChannel();                    string ch1Name = ch1 == null ? GUILocalizeStrings.Get(1507) : ch1.DisplayName;                    string ch2Name = ch2 == null ? GUILocalizeStrings.Get(1507) : ch2.DisplayName;                    return m_bSortAscending ? string.Compare(ch1Name' ch2Name) : string.Compare(ch2Name' ch1Name);                  }                    if (TVUtil.GetDisplayTitle(rec1) != TVUtil.GetDisplayTitle(rec2))                  {                    return m_bSortAscending ? string.Compare(TVUtil.GetDisplayTitle(rec1)' TVUtil.GetDisplayTitle(rec2)) : string.Compare(TVUtil.GetDisplayTitle(rec2)' TVUtil.GetDisplayTitle(rec1));                  }                    cSortMethod = SortMethod.Date;                  break;                }            }
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,Compare,The following statement contains a magic number: switch (cSortMethod)            {              case SortMethod.Played:                {                  item1.Label2 = string.Format("{0} {1}"' rec1.TimesWatched' GUILocalizeStrings.Get(677)); //times                  item2.Label2 = string.Format("{0} {1}"' rec2.TimesWatched' GUILocalizeStrings.Get(677)); //times                  if (rec1.TimesWatched != rec2.TimesWatched)                  {                    return m_bSortAscending ? rec1.TimesWatched - rec2.TimesWatched : rec2.TimesWatched - rec1.TimesWatched;                  }                    cSortMethod = SortMethod.Name;                  break;                }                case SortMethod.Name:                {                  iComp = string.Compare(TVUtil.GetDisplayTitle(rec1)' TVUtil.GetDisplayTitle(rec2)' true);                  if (iComp != 0)                  {                    return m_bSortAscending ? iComp : -iComp;                  }                    cSortMethod = SortMethod.Channel;                  break;                }                case SortMethod.Channel:                {                  // if there is no referenced channel (eg. recording that links to a channel that is now deleted)                  // set channel name to unknown channel string (1507) to avoid null reference exceptions                  Channel ch1 = rec1.ReferencedChannel();                  Channel ch2 = rec2.ReferencedChannel();                  string ch1Name = ch1 == null ? GUILocalizeStrings.Get(1507) : ch1.DisplayName;                  string ch2Name = ch2 == null ? GUILocalizeStrings.Get(1507) : ch2.DisplayName;                    iComp = string.Compare(ch1Name' ch2Name' true);                  if (iComp != 0)                  {                    return m_bSortAscending ? iComp : -iComp;                  }                    cSortMethod = SortMethod.Date;                  break;                }              case SortMethod.Duration:                {                  TimeSpan duration1 = (rec1.EndTime - rec1.StartTime);                  TimeSpan duration2 = rec2.EndTime - rec2.StartTime;                  if (duration1 != duration2)                  {                    return duration1 > duration2 ? 1 : -1;                  }                    cSortMethod = SortMethod.Date;                  break;                }              case SortMethod.Date:                {                  if (rec1.StartTime != rec2.StartTime)                  {                    return m_bSortAscending ? (rec1.StartTime < rec2.StartTime ? 1 : -1) : (rec1.StartTime > rec2.StartTime ? 1 : -1);                  }                  return 0;                }                case SortMethod.Genre:                {                  item1.Label2 = rec1.Genre;                  item2.Label2 = rec2.Genre;                    if (rec1.Genre != rec2.Genre)                  {                    return m_bSortAscending ? string.Compare(rec1.Genre' rec2.Genre' true) : string.Compare(rec2.Genre' rec1.Genre' true);                  }                    if (rec1.StartTime != rec2.StartTime)                  {                    return m_bSortAscending ? (rec1.StartTime - rec2.StartTime).Minutes : (rec2.StartTime - rec1.StartTime).Minutes;                  }                    if (rec1.IdChannel != rec2.IdChannel)                  {                    // if there is no referenced channel (eg. recording that links to a channel that is now deleted)                    // set channel name to unknown channel string (1507) to avoid null reference exceptions                    Channel ch1 = rec1.ReferencedChannel();                    Channel ch2 = rec2.ReferencedChannel();                    string ch1Name = ch1 == null ? GUILocalizeStrings.Get(1507) : ch1.DisplayName;                    string ch2Name = ch2 == null ? GUILocalizeStrings.Get(1507) : ch2.DisplayName;                    return m_bSortAscending ? string.Compare(ch1Name' ch2Name) : string.Compare(ch2Name' ch1Name);                  }                    if (TVUtil.GetDisplayTitle(rec1) != TVUtil.GetDisplayTitle(rec2))                  {                    return m_bSortAscending ? string.Compare(TVUtil.GetDisplayTitle(rec1)' TVUtil.GetDisplayTitle(rec2)) : string.Compare(TVUtil.GetDisplayTitle(rec2)' TVUtil.GetDisplayTitle(rec1));                  }                    cSortMethod = SortMethod.Date;                  break;                }            }
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,Compare,The following statement contains a magic number: switch (cSortMethod)            {              case SortMethod.Played:                {                  item1.Label2 = string.Format("{0} {1}"' rec1.TimesWatched' GUILocalizeStrings.Get(677)); //times                  item2.Label2 = string.Format("{0} {1}"' rec2.TimesWatched' GUILocalizeStrings.Get(677)); //times                  if (rec1.TimesWatched != rec2.TimesWatched)                  {                    return m_bSortAscending ? rec1.TimesWatched - rec2.TimesWatched : rec2.TimesWatched - rec1.TimesWatched;                  }                    cSortMethod = SortMethod.Name;                  break;                }                case SortMethod.Name:                {                  iComp = string.Compare(TVUtil.GetDisplayTitle(rec1)' TVUtil.GetDisplayTitle(rec2)' true);                  if (iComp != 0)                  {                    return m_bSortAscending ? iComp : -iComp;                  }                    cSortMethod = SortMethod.Channel;                  break;                }                case SortMethod.Channel:                {                  // if there is no referenced channel (eg. recording that links to a channel that is now deleted)                  // set channel name to unknown channel string (1507) to avoid null reference exceptions                  Channel ch1 = rec1.ReferencedChannel();                  Channel ch2 = rec2.ReferencedChannel();                  string ch1Name = ch1 == null ? GUILocalizeStrings.Get(1507) : ch1.DisplayName;                  string ch2Name = ch2 == null ? GUILocalizeStrings.Get(1507) : ch2.DisplayName;                    iComp = string.Compare(ch1Name' ch2Name' true);                  if (iComp != 0)                  {                    return m_bSortAscending ? iComp : -iComp;                  }                    cSortMethod = SortMethod.Date;                  break;                }              case SortMethod.Duration:                {                  TimeSpan duration1 = (rec1.EndTime - rec1.StartTime);                  TimeSpan duration2 = rec2.EndTime - rec2.StartTime;                  if (duration1 != duration2)                  {                    return duration1 > duration2 ? 1 : -1;                  }                    cSortMethod = SortMethod.Date;                  break;                }              case SortMethod.Date:                {                  if (rec1.StartTime != rec2.StartTime)                  {                    return m_bSortAscending ? (rec1.StartTime < rec2.StartTime ? 1 : -1) : (rec1.StartTime > rec2.StartTime ? 1 : -1);                  }                  return 0;                }                case SortMethod.Genre:                {                  item1.Label2 = rec1.Genre;                  item2.Label2 = rec2.Genre;                    if (rec1.Genre != rec2.Genre)                  {                    return m_bSortAscending ? string.Compare(rec1.Genre' rec2.Genre' true) : string.Compare(rec2.Genre' rec1.Genre' true);                  }                    if (rec1.StartTime != rec2.StartTime)                  {                    return m_bSortAscending ? (rec1.StartTime - rec2.StartTime).Minutes : (rec2.StartTime - rec1.StartTime).Minutes;                  }                    if (rec1.IdChannel != rec2.IdChannel)                  {                    // if there is no referenced channel (eg. recording that links to a channel that is now deleted)                    // set channel name to unknown channel string (1507) to avoid null reference exceptions                    Channel ch1 = rec1.ReferencedChannel();                    Channel ch2 = rec2.ReferencedChannel();                    string ch1Name = ch1 == null ? GUILocalizeStrings.Get(1507) : ch1.DisplayName;                    string ch2Name = ch2 == null ? GUILocalizeStrings.Get(1507) : ch2.DisplayName;                    return m_bSortAscending ? string.Compare(ch1Name' ch2Name) : string.Compare(ch2Name' ch1Name);                  }                    if (TVUtil.GetDisplayTitle(rec1) != TVUtil.GetDisplayTitle(rec2))                  {                    return m_bSortAscending ? string.Compare(TVUtil.GetDisplayTitle(rec1)' TVUtil.GetDisplayTitle(rec2)) : string.Compare(TVUtil.GetDisplayTitle(rec2)' TVUtil.GetDisplayTitle(rec1));                  }                    cSortMethod = SortMethod.Date;                  break;                }            }
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,Compare,The following statement contains a magic number: switch (cSortMethod)            {              case SortMethod.Played:                {                  item1.Label2 = string.Format("{0} {1}"' rec1.TimesWatched' GUILocalizeStrings.Get(677)); //times                  item2.Label2 = string.Format("{0} {1}"' rec2.TimesWatched' GUILocalizeStrings.Get(677)); //times                  if (rec1.TimesWatched != rec2.TimesWatched)                  {                    return m_bSortAscending ? rec1.TimesWatched - rec2.TimesWatched : rec2.TimesWatched - rec1.TimesWatched;                  }                    cSortMethod = SortMethod.Name;                  break;                }                case SortMethod.Name:                {                  iComp = string.Compare(TVUtil.GetDisplayTitle(rec1)' TVUtil.GetDisplayTitle(rec2)' true);                  if (iComp != 0)                  {                    return m_bSortAscending ? iComp : -iComp;                  }                    cSortMethod = SortMethod.Channel;                  break;                }                case SortMethod.Channel:                {                  // if there is no referenced channel (eg. recording that links to a channel that is now deleted)                  // set channel name to unknown channel string (1507) to avoid null reference exceptions                  Channel ch1 = rec1.ReferencedChannel();                  Channel ch2 = rec2.ReferencedChannel();                  string ch1Name = ch1 == null ? GUILocalizeStrings.Get(1507) : ch1.DisplayName;                  string ch2Name = ch2 == null ? GUILocalizeStrings.Get(1507) : ch2.DisplayName;                    iComp = string.Compare(ch1Name' ch2Name' true);                  if (iComp != 0)                  {                    return m_bSortAscending ? iComp : -iComp;                  }                    cSortMethod = SortMethod.Date;                  break;                }              case SortMethod.Duration:                {                  TimeSpan duration1 = (rec1.EndTime - rec1.StartTime);                  TimeSpan duration2 = rec2.EndTime - rec2.StartTime;                  if (duration1 != duration2)                  {                    return duration1 > duration2 ? 1 : -1;                  }                    cSortMethod = SortMethod.Date;                  break;                }              case SortMethod.Date:                {                  if (rec1.StartTime != rec2.StartTime)                  {                    return m_bSortAscending ? (rec1.StartTime < rec2.StartTime ? 1 : -1) : (rec1.StartTime > rec2.StartTime ? 1 : -1);                  }                  return 0;                }                case SortMethod.Genre:                {                  item1.Label2 = rec1.Genre;                  item2.Label2 = rec2.Genre;                    if (rec1.Genre != rec2.Genre)                  {                    return m_bSortAscending ? string.Compare(rec1.Genre' rec2.Genre' true) : string.Compare(rec2.Genre' rec1.Genre' true);                  }                    if (rec1.StartTime != rec2.StartTime)                  {                    return m_bSortAscending ? (rec1.StartTime - rec2.StartTime).Minutes : (rec2.StartTime - rec1.StartTime).Minutes;                  }                    if (rec1.IdChannel != rec2.IdChannel)                  {                    // if there is no referenced channel (eg. recording that links to a channel that is now deleted)                    // set channel name to unknown channel string (1507) to avoid null reference exceptions                    Channel ch1 = rec1.ReferencedChannel();                    Channel ch2 = rec2.ReferencedChannel();                    string ch1Name = ch1 == null ? GUILocalizeStrings.Get(1507) : ch1.DisplayName;                    string ch2Name = ch2 == null ? GUILocalizeStrings.Get(1507) : ch2.DisplayName;                    return m_bSortAscending ? string.Compare(ch1Name' ch2Name) : string.Compare(ch2Name' ch1Name);                  }                    if (TVUtil.GetDisplayTitle(rec1) != TVUtil.GetDisplayTitle(rec2))                  {                    return m_bSortAscending ? string.Compare(TVUtil.GetDisplayTitle(rec1)' TVUtil.GetDisplayTitle(rec2)) : string.Compare(TVUtil.GetDisplayTitle(rec2)' TVUtil.GetDisplayTitle(rec1));                  }                    cSortMethod = SortMethod.Date;                  break;                }            }
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,Compare,The following statement contains a magic number: switch (cSortMethod)            {              case SortMethod.Played:                {                  item1.Label2 = string.Format("{0} {1}"' rec1.TimesWatched' GUILocalizeStrings.Get(677)); //times                  item2.Label2 = string.Format("{0} {1}"' rec2.TimesWatched' GUILocalizeStrings.Get(677)); //times                  if (rec1.TimesWatched != rec2.TimesWatched)                  {                    return m_bSortAscending ? rec1.TimesWatched - rec2.TimesWatched : rec2.TimesWatched - rec1.TimesWatched;                  }                    cSortMethod = SortMethod.Name;                  break;                }                case SortMethod.Name:                {                  iComp = string.Compare(TVUtil.GetDisplayTitle(rec1)' TVUtil.GetDisplayTitle(rec2)' true);                  if (iComp != 0)                  {                    return m_bSortAscending ? iComp : -iComp;                  }                    cSortMethod = SortMethod.Channel;                  break;                }                case SortMethod.Channel:                {                  // if there is no referenced channel (eg. recording that links to a channel that is now deleted)                  // set channel name to unknown channel string (1507) to avoid null reference exceptions                  Channel ch1 = rec1.ReferencedChannel();                  Channel ch2 = rec2.ReferencedChannel();                  string ch1Name = ch1 == null ? GUILocalizeStrings.Get(1507) : ch1.DisplayName;                  string ch2Name = ch2 == null ? GUILocalizeStrings.Get(1507) : ch2.DisplayName;                    iComp = string.Compare(ch1Name' ch2Name' true);                  if (iComp != 0)                  {                    return m_bSortAscending ? iComp : -iComp;                  }                    cSortMethod = SortMethod.Date;                  break;                }              case SortMethod.Duration:                {                  TimeSpan duration1 = (rec1.EndTime - rec1.StartTime);                  TimeSpan duration2 = rec2.EndTime - rec2.StartTime;                  if (duration1 != duration2)                  {                    return duration1 > duration2 ? 1 : -1;                  }                    cSortMethod = SortMethod.Date;                  break;                }              case SortMethod.Date:                {                  if (rec1.StartTime != rec2.StartTime)                  {                    return m_bSortAscending ? (rec1.StartTime < rec2.StartTime ? 1 : -1) : (rec1.StartTime > rec2.StartTime ? 1 : -1);                  }                  return 0;                }                case SortMethod.Genre:                {                  item1.Label2 = rec1.Genre;                  item2.Label2 = rec2.Genre;                    if (rec1.Genre != rec2.Genre)                  {                    return m_bSortAscending ? string.Compare(rec1.Genre' rec2.Genre' true) : string.Compare(rec2.Genre' rec1.Genre' true);                  }                    if (rec1.StartTime != rec2.StartTime)                  {                    return m_bSortAscending ? (rec1.StartTime - rec2.StartTime).Minutes : (rec2.StartTime - rec1.StartTime).Minutes;                  }                    if (rec1.IdChannel != rec2.IdChannel)                  {                    // if there is no referenced channel (eg. recording that links to a channel that is now deleted)                    // set channel name to unknown channel string (1507) to avoid null reference exceptions                    Channel ch1 = rec1.ReferencedChannel();                    Channel ch2 = rec2.ReferencedChannel();                    string ch1Name = ch1 == null ? GUILocalizeStrings.Get(1507) : ch1.DisplayName;                    string ch2Name = ch2 == null ? GUILocalizeStrings.Get(1507) : ch2.DisplayName;                    return m_bSortAscending ? string.Compare(ch1Name' ch2Name) : string.Compare(ch2Name' ch1Name);                  }                    if (TVUtil.GetDisplayTitle(rec1) != TVUtil.GetDisplayTitle(rec2))                  {                    return m_bSortAscending ? string.Compare(TVUtil.GetDisplayTitle(rec1)' TVUtil.GetDisplayTitle(rec2)) : string.Compare(TVUtil.GetDisplayTitle(rec2)' TVUtil.GetDisplayTitle(rec1));                  }                    cSortMethod = SortMethod.Date;                  break;                }            }
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,Compare,The following statement contains a magic number: switch (cSortMethod)            {              case SortMethod.Played:                {                  item1.Label2 = string.Format("{0} {1}"' rec1.TimesWatched' GUILocalizeStrings.Get(677)); //times                  item2.Label2 = string.Format("{0} {1}"' rec2.TimesWatched' GUILocalizeStrings.Get(677)); //times                  if (rec1.TimesWatched != rec2.TimesWatched)                  {                    return m_bSortAscending ? rec1.TimesWatched - rec2.TimesWatched : rec2.TimesWatched - rec1.TimesWatched;                  }                    cSortMethod = SortMethod.Name;                  break;                }                case SortMethod.Name:                {                  iComp = string.Compare(TVUtil.GetDisplayTitle(rec1)' TVUtil.GetDisplayTitle(rec2)' true);                  if (iComp != 0)                  {                    return m_bSortAscending ? iComp : -iComp;                  }                    cSortMethod = SortMethod.Channel;                  break;                }                case SortMethod.Channel:                {                  // if there is no referenced channel (eg. recording that links to a channel that is now deleted)                  // set channel name to unknown channel string (1507) to avoid null reference exceptions                  Channel ch1 = rec1.ReferencedChannel();                  Channel ch2 = rec2.ReferencedChannel();                  string ch1Name = ch1 == null ? GUILocalizeStrings.Get(1507) : ch1.DisplayName;                  string ch2Name = ch2 == null ? GUILocalizeStrings.Get(1507) : ch2.DisplayName;                    iComp = string.Compare(ch1Name' ch2Name' true);                  if (iComp != 0)                  {                    return m_bSortAscending ? iComp : -iComp;                  }                    cSortMethod = SortMethod.Date;                  break;                }              case SortMethod.Duration:                {                  TimeSpan duration1 = (rec1.EndTime - rec1.StartTime);                  TimeSpan duration2 = rec2.EndTime - rec2.StartTime;                  if (duration1 != duration2)                  {                    return duration1 > duration2 ? 1 : -1;                  }                    cSortMethod = SortMethod.Date;                  break;                }              case SortMethod.Date:                {                  if (rec1.StartTime != rec2.StartTime)                  {                    return m_bSortAscending ? (rec1.StartTime < rec2.StartTime ? 1 : -1) : (rec1.StartTime > rec2.StartTime ? 1 : -1);                  }                  return 0;                }                case SortMethod.Genre:                {                  item1.Label2 = rec1.Genre;                  item2.Label2 = rec2.Genre;                    if (rec1.Genre != rec2.Genre)                  {                    return m_bSortAscending ? string.Compare(rec1.Genre' rec2.Genre' true) : string.Compare(rec2.Genre' rec1.Genre' true);                  }                    if (rec1.StartTime != rec2.StartTime)                  {                    return m_bSortAscending ? (rec1.StartTime - rec2.StartTime).Minutes : (rec2.StartTime - rec1.StartTime).Minutes;                  }                    if (rec1.IdChannel != rec2.IdChannel)                  {                    // if there is no referenced channel (eg. recording that links to a channel that is now deleted)                    // set channel name to unknown channel string (1507) to avoid null reference exceptions                    Channel ch1 = rec1.ReferencedChannel();                    Channel ch2 = rec2.ReferencedChannel();                    string ch1Name = ch1 == null ? GUILocalizeStrings.Get(1507) : ch1.DisplayName;                    string ch2Name = ch2 == null ? GUILocalizeStrings.Get(1507) : ch2.DisplayName;                    return m_bSortAscending ? string.Compare(ch1Name' ch2Name) : string.Compare(ch2Name' ch1Name);                  }                    if (TVUtil.GetDisplayTitle(rec1) != TVUtil.GetDisplayTitle(rec2))                  {                    return m_bSortAscending ? string.Compare(TVUtil.GetDisplayTitle(rec1)' TVUtil.GetDisplayTitle(rec2)) : string.Compare(TVUtil.GetDisplayTitle(rec2)' TVUtil.GetDisplayTitle(rec1));                  }                    cSortMethod = SortMethod.Date;                  break;                }            }
Magic Number,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,doOnPlayBackStoppedOrChanged,The following statement contains a magic number: playTimePercentage = (int)Math.Ceiling((stoptime / g_Player.Player.Duration) * 100);
Magic Number,TvPlugin,TvRecordedInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVRecordedInfo.cs,OnKeep,The following statement contains a magic number: dlg.SetHeading(1042);
Magic Number,TvPlugin,TvRecordedInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVRecordedInfo.cs,OnKeep,The following statement contains a magic number: dlg.AddLocalizedString(1043);
Magic Number,TvPlugin,TvRecordedInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVRecordedInfo.cs,OnKeep,The following statement contains a magic number: dlg.AddLocalizedString(1044);
Magic Number,TvPlugin,TvRecordedInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVRecordedInfo.cs,OnKeep,The following statement contains a magic number: dlg.AddLocalizedString(1045);
Magic Number,TvPlugin,TvRecordedInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVRecordedInfo.cs,OnKeep,The following statement contains a magic number: dlg.AddLocalizedString(1046);
Magic Number,TvPlugin,TvRecordedInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVRecordedInfo.cs,OnKeep,The following statement contains a magic number: switch ((KeepMethodType)currentProgram.KeepUntil)        {          case KeepMethodType.UntilWatched:            dlg.SelectedLabel = 0;            break;          case KeepMethodType.UntilSpaceNeeded:            dlg.SelectedLabel = 1;            break;          case KeepMethodType.TillDate:            dlg.SelectedLabel = 2;            break;          case KeepMethodType.Always:            dlg.SelectedLabel = 3;            break;        }
Magic Number,TvPlugin,TvRecordedInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVRecordedInfo.cs,OnKeep,The following statement contains a magic number: switch ((KeepMethodType)currentProgram.KeepUntil)        {          case KeepMethodType.UntilWatched:            dlg.SelectedLabel = 0;            break;          case KeepMethodType.UntilSpaceNeeded:            dlg.SelectedLabel = 1;            break;          case KeepMethodType.TillDate:            dlg.SelectedLabel = 2;            break;          case KeepMethodType.Always:            dlg.SelectedLabel = 3;            break;        }
Magic Number,TvPlugin,TvRecordedInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVRecordedInfo.cs,OnKeep,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 1043:            currentProgram.KeepUntil = (int)KeepMethodType.UntilWatched;            break;          case 1044:            currentProgram.KeepUntil = (int)KeepMethodType.UntilSpaceNeeded;              break;          case 1045:            currentProgram.KeepUntil = (int)KeepMethodType.TillDate;            dlg.Reset();            dlg.ShowQuickNumbers = false;            dlg.SetHeading(1045);            for (int iDay = 1; iDay <= 100; iDay++)            {              DateTime dt = currentProgram.StartTime.AddDays(iDay);              if (currentProgram.StartTime < DateTime.Now)              {                dt = DateTime.Now.AddDays(iDay);              }                dlg.Add(dt.ToLongDateString());            }            TimeSpan ts = (currentProgram.KeepUntilDate - currentProgram.StartTime);            if (currentProgram.StartTime < DateTime.Now)            {              ts = (currentProgram.KeepUntilDate - DateTime.Now);            }            int days = (int)ts.TotalDays;            if (days >= 100)            {              days = 30;            }            dlg.SelectedLabel = days - 1;            dlg.DoModal(GetID);            if (dlg.SelectedLabel < 0)            {              return;            }            if (currentProgram.StartTime < DateTime.Now)            {              currentProgram.KeepUntilDate = DateTime.Now.AddDays(dlg.SelectedLabel + 1);            }            else            {              currentProgram.KeepUntilDate = currentProgram.StartTime.AddDays(dlg.SelectedLabel + 1);            }            break;          case 1046:            currentProgram.KeepUntil = (int)KeepMethodType.Always;            break;        }
Magic Number,TvPlugin,TvRecordedInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVRecordedInfo.cs,OnKeep,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 1043:            currentProgram.KeepUntil = (int)KeepMethodType.UntilWatched;            break;          case 1044:            currentProgram.KeepUntil = (int)KeepMethodType.UntilSpaceNeeded;              break;          case 1045:            currentProgram.KeepUntil = (int)KeepMethodType.TillDate;            dlg.Reset();            dlg.ShowQuickNumbers = false;            dlg.SetHeading(1045);            for (int iDay = 1; iDay <= 100; iDay++)            {              DateTime dt = currentProgram.StartTime.AddDays(iDay);              if (currentProgram.StartTime < DateTime.Now)              {                dt = DateTime.Now.AddDays(iDay);              }                dlg.Add(dt.ToLongDateString());            }            TimeSpan ts = (currentProgram.KeepUntilDate - currentProgram.StartTime);            if (currentProgram.StartTime < DateTime.Now)            {              ts = (currentProgram.KeepUntilDate - DateTime.Now);            }            int days = (int)ts.TotalDays;            if (days >= 100)            {              days = 30;            }            dlg.SelectedLabel = days - 1;            dlg.DoModal(GetID);            if (dlg.SelectedLabel < 0)            {              return;            }            if (currentProgram.StartTime < DateTime.Now)            {              currentProgram.KeepUntilDate = DateTime.Now.AddDays(dlg.SelectedLabel + 1);            }            else            {              currentProgram.KeepUntilDate = currentProgram.StartTime.AddDays(dlg.SelectedLabel + 1);            }            break;          case 1046:            currentProgram.KeepUntil = (int)KeepMethodType.Always;            break;        }
Magic Number,TvPlugin,TvRecordedInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVRecordedInfo.cs,OnKeep,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 1043:            currentProgram.KeepUntil = (int)KeepMethodType.UntilWatched;            break;          case 1044:            currentProgram.KeepUntil = (int)KeepMethodType.UntilSpaceNeeded;              break;          case 1045:            currentProgram.KeepUntil = (int)KeepMethodType.TillDate;            dlg.Reset();            dlg.ShowQuickNumbers = false;            dlg.SetHeading(1045);            for (int iDay = 1; iDay <= 100; iDay++)            {              DateTime dt = currentProgram.StartTime.AddDays(iDay);              if (currentProgram.StartTime < DateTime.Now)              {                dt = DateTime.Now.AddDays(iDay);              }                dlg.Add(dt.ToLongDateString());            }            TimeSpan ts = (currentProgram.KeepUntilDate - currentProgram.StartTime);            if (currentProgram.StartTime < DateTime.Now)            {              ts = (currentProgram.KeepUntilDate - DateTime.Now);            }            int days = (int)ts.TotalDays;            if (days >= 100)            {              days = 30;            }            dlg.SelectedLabel = days - 1;            dlg.DoModal(GetID);            if (dlg.SelectedLabel < 0)            {              return;            }            if (currentProgram.StartTime < DateTime.Now)            {              currentProgram.KeepUntilDate = DateTime.Now.AddDays(dlg.SelectedLabel + 1);            }            else            {              currentProgram.KeepUntilDate = currentProgram.StartTime.AddDays(dlg.SelectedLabel + 1);            }            break;          case 1046:            currentProgram.KeepUntil = (int)KeepMethodType.Always;            break;        }
Magic Number,TvPlugin,TvRecordedInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVRecordedInfo.cs,OnKeep,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 1043:            currentProgram.KeepUntil = (int)KeepMethodType.UntilWatched;            break;          case 1044:            currentProgram.KeepUntil = (int)KeepMethodType.UntilSpaceNeeded;              break;          case 1045:            currentProgram.KeepUntil = (int)KeepMethodType.TillDate;            dlg.Reset();            dlg.ShowQuickNumbers = false;            dlg.SetHeading(1045);            for (int iDay = 1; iDay <= 100; iDay++)            {              DateTime dt = currentProgram.StartTime.AddDays(iDay);              if (currentProgram.StartTime < DateTime.Now)              {                dt = DateTime.Now.AddDays(iDay);              }                dlg.Add(dt.ToLongDateString());            }            TimeSpan ts = (currentProgram.KeepUntilDate - currentProgram.StartTime);            if (currentProgram.StartTime < DateTime.Now)            {              ts = (currentProgram.KeepUntilDate - DateTime.Now);            }            int days = (int)ts.TotalDays;            if (days >= 100)            {              days = 30;            }            dlg.SelectedLabel = days - 1;            dlg.DoModal(GetID);            if (dlg.SelectedLabel < 0)            {              return;            }            if (currentProgram.StartTime < DateTime.Now)            {              currentProgram.KeepUntilDate = DateTime.Now.AddDays(dlg.SelectedLabel + 1);            }            else            {              currentProgram.KeepUntilDate = currentProgram.StartTime.AddDays(dlg.SelectedLabel + 1);            }            break;          case 1046:            currentProgram.KeepUntil = (int)KeepMethodType.Always;            break;        }
Magic Number,TvPlugin,TvRecordedInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVRecordedInfo.cs,OnKeep,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 1043:            currentProgram.KeepUntil = (int)KeepMethodType.UntilWatched;            break;          case 1044:            currentProgram.KeepUntil = (int)KeepMethodType.UntilSpaceNeeded;              break;          case 1045:            currentProgram.KeepUntil = (int)KeepMethodType.TillDate;            dlg.Reset();            dlg.ShowQuickNumbers = false;            dlg.SetHeading(1045);            for (int iDay = 1; iDay <= 100; iDay++)            {              DateTime dt = currentProgram.StartTime.AddDays(iDay);              if (currentProgram.StartTime < DateTime.Now)              {                dt = DateTime.Now.AddDays(iDay);              }                dlg.Add(dt.ToLongDateString());            }            TimeSpan ts = (currentProgram.KeepUntilDate - currentProgram.StartTime);            if (currentProgram.StartTime < DateTime.Now)            {              ts = (currentProgram.KeepUntilDate - DateTime.Now);            }            int days = (int)ts.TotalDays;            if (days >= 100)            {              days = 30;            }            dlg.SelectedLabel = days - 1;            dlg.DoModal(GetID);            if (dlg.SelectedLabel < 0)            {              return;            }            if (currentProgram.StartTime < DateTime.Now)            {              currentProgram.KeepUntilDate = DateTime.Now.AddDays(dlg.SelectedLabel + 1);            }            else            {              currentProgram.KeepUntilDate = currentProgram.StartTime.AddDays(dlg.SelectedLabel + 1);            }            break;          case 1046:            currentProgram.KeepUntil = (int)KeepMethodType.Always;            break;        }
Magic Number,TvPlugin,TvRecordedInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVRecordedInfo.cs,OnKeep,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 1043:            currentProgram.KeepUntil = (int)KeepMethodType.UntilWatched;            break;          case 1044:            currentProgram.KeepUntil = (int)KeepMethodType.UntilSpaceNeeded;              break;          case 1045:            currentProgram.KeepUntil = (int)KeepMethodType.TillDate;            dlg.Reset();            dlg.ShowQuickNumbers = false;            dlg.SetHeading(1045);            for (int iDay = 1; iDay <= 100; iDay++)            {              DateTime dt = currentProgram.StartTime.AddDays(iDay);              if (currentProgram.StartTime < DateTime.Now)              {                dt = DateTime.Now.AddDays(iDay);              }                dlg.Add(dt.ToLongDateString());            }            TimeSpan ts = (currentProgram.KeepUntilDate - currentProgram.StartTime);            if (currentProgram.StartTime < DateTime.Now)            {              ts = (currentProgram.KeepUntilDate - DateTime.Now);            }            int days = (int)ts.TotalDays;            if (days >= 100)            {              days = 30;            }            dlg.SelectedLabel = days - 1;            dlg.DoModal(GetID);            if (dlg.SelectedLabel < 0)            {              return;            }            if (currentProgram.StartTime < DateTime.Now)            {              currentProgram.KeepUntilDate = DateTime.Now.AddDays(dlg.SelectedLabel + 1);            }            else            {              currentProgram.KeepUntilDate = currentProgram.StartTime.AddDays(dlg.SelectedLabel + 1);            }            break;          case 1046:            currentProgram.KeepUntil = (int)KeepMethodType.Always;            break;        }
Magic Number,TvPlugin,TvRecordedInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVRecordedInfo.cs,OnKeep,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 1043:            currentProgram.KeepUntil = (int)KeepMethodType.UntilWatched;            break;          case 1044:            currentProgram.KeepUntil = (int)KeepMethodType.UntilSpaceNeeded;              break;          case 1045:            currentProgram.KeepUntil = (int)KeepMethodType.TillDate;            dlg.Reset();            dlg.ShowQuickNumbers = false;            dlg.SetHeading(1045);            for (int iDay = 1; iDay <= 100; iDay++)            {              DateTime dt = currentProgram.StartTime.AddDays(iDay);              if (currentProgram.StartTime < DateTime.Now)              {                dt = DateTime.Now.AddDays(iDay);              }                dlg.Add(dt.ToLongDateString());            }            TimeSpan ts = (currentProgram.KeepUntilDate - currentProgram.StartTime);            if (currentProgram.StartTime < DateTime.Now)            {              ts = (currentProgram.KeepUntilDate - DateTime.Now);            }            int days = (int)ts.TotalDays;            if (days >= 100)            {              days = 30;            }            dlg.SelectedLabel = days - 1;            dlg.DoModal(GetID);            if (dlg.SelectedLabel < 0)            {              return;            }            if (currentProgram.StartTime < DateTime.Now)            {              currentProgram.KeepUntilDate = DateTime.Now.AddDays(dlg.SelectedLabel + 1);            }            else            {              currentProgram.KeepUntilDate = currentProgram.StartTime.AddDays(dlg.SelectedLabel + 1);            }            break;          case 1046:            currentProgram.KeepUntil = (int)KeepMethodType.Always;            break;        }
Magic Number,TvPlugin,TvRecordedInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVRecordedInfo.cs,OnKeep,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 1043:            currentProgram.KeepUntil = (int)KeepMethodType.UntilWatched;            break;          case 1044:            currentProgram.KeepUntil = (int)KeepMethodType.UntilSpaceNeeded;              break;          case 1045:            currentProgram.KeepUntil = (int)KeepMethodType.TillDate;            dlg.Reset();            dlg.ShowQuickNumbers = false;            dlg.SetHeading(1045);            for (int iDay = 1; iDay <= 100; iDay++)            {              DateTime dt = currentProgram.StartTime.AddDays(iDay);              if (currentProgram.StartTime < DateTime.Now)              {                dt = DateTime.Now.AddDays(iDay);              }                dlg.Add(dt.ToLongDateString());            }            TimeSpan ts = (currentProgram.KeepUntilDate - currentProgram.StartTime);            if (currentProgram.StartTime < DateTime.Now)            {              ts = (currentProgram.KeepUntilDate - DateTime.Now);            }            int days = (int)ts.TotalDays;            if (days >= 100)            {              days = 30;            }            dlg.SelectedLabel = days - 1;            dlg.DoModal(GetID);            if (dlg.SelectedLabel < 0)            {              return;            }            if (currentProgram.StartTime < DateTime.Now)            {              currentProgram.KeepUntilDate = DateTime.Now.AddDays(dlg.SelectedLabel + 1);            }            else            {              currentProgram.KeepUntilDate = currentProgram.StartTime.AddDays(dlg.SelectedLabel + 1);            }            break;          case 1046:            currentProgram.KeepUntil = (int)KeepMethodType.Always;            break;        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,OnClicked,The following statement contains a magic number: dlg.SetHeading(495);
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,OnClicked,The following statement contains a magic number: dlg.AddLocalizedString(620);
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,OnClicked,The following statement contains a magic number: dlg.AddLocalizedString(621);
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,OnClicked,The following statement contains a magic number: dlg.AddLocalizedString(268);
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,Compare,The following statement contains a magic number: int type1 = 2' type2 = 2;
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,Compare,The following statement contains a magic number: int type1 = 2' type2 = 2;
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,Compare,The following statement contains a magic number: item1.Label3 == GUILocalizeStrings.Get(682)
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,Compare,The following statement contains a magic number: item2.Label3 == GUILocalizeStrings.Get(682)
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,UpdateButtonStates,The following statement contains a magic number: switch (sortMethod)       {          case SortMethod.Channel:            strLine = GUILocalizeStrings.Get(620); // Sort by: Channel            break;          case SortMethod.Date:            strLine = GUILocalizeStrings.Get(621); // Sort by: Date            break;          case SortMethod.Name:            strLine = GUILocalizeStrings.Get(268); // Sort by: Title            break;        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,UpdateButtonStates,The following statement contains a magic number: switch (sortMethod)       {          case SortMethod.Channel:            strLine = GUILocalizeStrings.Get(620); // Sort by: Channel            break;          case SortMethod.Date:            strLine = GUILocalizeStrings.Get(621); // Sort by: Date            break;          case SortMethod.Name:            strLine = GUILocalizeStrings.Get(268); // Sort by: Title            break;        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,UpdateButtonStates,The following statement contains a magic number: switch (sortMethod)       {          case SortMethod.Channel:            strLine = GUILocalizeStrings.Get(620); // Sort by: Channel            break;          case SortMethod.Date:            strLine = GUILocalizeStrings.Get(621); // Sort by: Date            break;          case SortMethod.Name:            strLine = GUILocalizeStrings.Get(268); // Sort by: Title            break;        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)            {              case (int)ScheduleRecordingType.Once:                item.Label2 = String.Format("{0} {1} - {2}"'                                            Utils.GetShortDayString(rec.StartTime)'                                            rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                            rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                ;                break;              case (int)ScheduleRecordingType.Daily:                strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.WorkingDays:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.Weekends:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;              case (int)ScheduleRecordingType.Weekly:                switch (rec.StartTime.DayOfWeek)                {                  case DayOfWeek.Monday:                    day = GUILocalizeStrings.Get(11);                    break;                  case DayOfWeek.Tuesday:                    day = GUILocalizeStrings.Get(12);                    break;                  case DayOfWeek.Wednesday:                    day = GUILocalizeStrings.Get(13);                    break;                  case DayOfWeek.Thursday:                    day = GUILocalizeStrings.Get(14);                    break;                  case DayOfWeek.Friday:                    day = GUILocalizeStrings.Get(15);                    break;                  case DayOfWeek.Saturday:                    day = GUILocalizeStrings.Get(16);                    break;                  default:                    day = GUILocalizeStrings.Get(17);                    break;                }                  strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);                break;              case (int)ScheduleRecordingType.EveryTimeOnThisChannel:                item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});                break;              case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:                item.Label2 = GUILocalizeStrings.Get(651);                break;             case (int) ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:               switch (rec.StartTime.DayOfWeek)               {                   case DayOfWeek.Monday:                       day = GUILocalizeStrings.Get(11);                       break;                   case DayOfWeek.Tuesday:                       day = GUILocalizeStrings.Get(12);                       break;                   case DayOfWeek.Wednesday:                       day = GUILocalizeStrings.Get(13);                       break;                   case DayOfWeek.Thursday:                       day = GUILocalizeStrings.Get(14);                       break;                   case DayOfWeek.Friday:                       day = GUILocalizeStrings.Get(15);                       break;                   case DayOfWeek.Saturday:                       day = GUILocalizeStrings.Get(16);                       break;                   default:                       day = GUILocalizeStrings.Get(17);                       break;            }               item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });               break;                        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)            {              case (int)ScheduleRecordingType.Once:                item.Label2 = String.Format("{0} {1} - {2}"'                                            Utils.GetShortDayString(rec.StartTime)'                                            rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                            rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                ;                break;              case (int)ScheduleRecordingType.Daily:                strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.WorkingDays:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.Weekends:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;              case (int)ScheduleRecordingType.Weekly:                switch (rec.StartTime.DayOfWeek)                {                  case DayOfWeek.Monday:                    day = GUILocalizeStrings.Get(11);                    break;                  case DayOfWeek.Tuesday:                    day = GUILocalizeStrings.Get(12);                    break;                  case DayOfWeek.Wednesday:                    day = GUILocalizeStrings.Get(13);                    break;                  case DayOfWeek.Thursday:                    day = GUILocalizeStrings.Get(14);                    break;                  case DayOfWeek.Friday:                    day = GUILocalizeStrings.Get(15);                    break;                  case DayOfWeek.Saturday:                    day = GUILocalizeStrings.Get(16);                    break;                  default:                    day = GUILocalizeStrings.Get(17);                    break;                }                  strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);                break;              case (int)ScheduleRecordingType.EveryTimeOnThisChannel:                item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});                break;              case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:                item.Label2 = GUILocalizeStrings.Get(651);                break;             case (int) ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:               switch (rec.StartTime.DayOfWeek)               {                   case DayOfWeek.Monday:                       day = GUILocalizeStrings.Get(11);                       break;                   case DayOfWeek.Tuesday:                       day = GUILocalizeStrings.Get(12);                       break;                   case DayOfWeek.Wednesday:                       day = GUILocalizeStrings.Get(13);                       break;                   case DayOfWeek.Thursday:                       day = GUILocalizeStrings.Get(14);                       break;                   case DayOfWeek.Friday:                       day = GUILocalizeStrings.Get(15);                       break;                   case DayOfWeek.Saturday:                       day = GUILocalizeStrings.Get(16);                       break;                   default:                       day = GUILocalizeStrings.Get(17);                       break;            }               item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });               break;                        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)            {              case (int)ScheduleRecordingType.Once:                item.Label2 = String.Format("{0} {1} - {2}"'                                            Utils.GetShortDayString(rec.StartTime)'                                            rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                            rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                ;                break;              case (int)ScheduleRecordingType.Daily:                strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.WorkingDays:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.Weekends:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;              case (int)ScheduleRecordingType.Weekly:                switch (rec.StartTime.DayOfWeek)                {                  case DayOfWeek.Monday:                    day = GUILocalizeStrings.Get(11);                    break;                  case DayOfWeek.Tuesday:                    day = GUILocalizeStrings.Get(12);                    break;                  case DayOfWeek.Wednesday:                    day = GUILocalizeStrings.Get(13);                    break;                  case DayOfWeek.Thursday:                    day = GUILocalizeStrings.Get(14);                    break;                  case DayOfWeek.Friday:                    day = GUILocalizeStrings.Get(15);                    break;                  case DayOfWeek.Saturday:                    day = GUILocalizeStrings.Get(16);                    break;                  default:                    day = GUILocalizeStrings.Get(17);                    break;                }                  strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);                break;              case (int)ScheduleRecordingType.EveryTimeOnThisChannel:                item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});                break;              case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:                item.Label2 = GUILocalizeStrings.Get(651);                break;             case (int) ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:               switch (rec.StartTime.DayOfWeek)               {                   case DayOfWeek.Monday:                       day = GUILocalizeStrings.Get(11);                       break;                   case DayOfWeek.Tuesday:                       day = GUILocalizeStrings.Get(12);                       break;                   case DayOfWeek.Wednesday:                       day = GUILocalizeStrings.Get(13);                       break;                   case DayOfWeek.Thursday:                       day = GUILocalizeStrings.Get(14);                       break;                   case DayOfWeek.Friday:                       day = GUILocalizeStrings.Get(15);                       break;                   case DayOfWeek.Saturday:                       day = GUILocalizeStrings.Get(16);                       break;                   default:                       day = GUILocalizeStrings.Get(17);                       break;            }               item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });               break;                        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)            {              case (int)ScheduleRecordingType.Once:                item.Label2 = String.Format("{0} {1} - {2}"'                                            Utils.GetShortDayString(rec.StartTime)'                                            rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                            rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                ;                break;              case (int)ScheduleRecordingType.Daily:                strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.WorkingDays:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.Weekends:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;              case (int)ScheduleRecordingType.Weekly:                switch (rec.StartTime.DayOfWeek)                {                  case DayOfWeek.Monday:                    day = GUILocalizeStrings.Get(11);                    break;                  case DayOfWeek.Tuesday:                    day = GUILocalizeStrings.Get(12);                    break;                  case DayOfWeek.Wednesday:                    day = GUILocalizeStrings.Get(13);                    break;                  case DayOfWeek.Thursday:                    day = GUILocalizeStrings.Get(14);                    break;                  case DayOfWeek.Friday:                    day = GUILocalizeStrings.Get(15);                    break;                  case DayOfWeek.Saturday:                    day = GUILocalizeStrings.Get(16);                    break;                  default:                    day = GUILocalizeStrings.Get(17);                    break;                }                  strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);                break;              case (int)ScheduleRecordingType.EveryTimeOnThisChannel:                item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});                break;              case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:                item.Label2 = GUILocalizeStrings.Get(651);                break;             case (int) ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:               switch (rec.StartTime.DayOfWeek)               {                   case DayOfWeek.Monday:                       day = GUILocalizeStrings.Get(11);                       break;                   case DayOfWeek.Tuesday:                       day = GUILocalizeStrings.Get(12);                       break;                   case DayOfWeek.Wednesday:                       day = GUILocalizeStrings.Get(13);                       break;                   case DayOfWeek.Thursday:                       day = GUILocalizeStrings.Get(14);                       break;                   case DayOfWeek.Friday:                       day = GUILocalizeStrings.Get(15);                       break;                   case DayOfWeek.Saturday:                       day = GUILocalizeStrings.Get(16);                       break;                   default:                       day = GUILocalizeStrings.Get(17);                       break;            }               item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });               break;                        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)            {              case (int)ScheduleRecordingType.Once:                item.Label2 = String.Format("{0} {1} - {2}"'                                            Utils.GetShortDayString(rec.StartTime)'                                            rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                            rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                ;                break;              case (int)ScheduleRecordingType.Daily:                strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.WorkingDays:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.Weekends:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;              case (int)ScheduleRecordingType.Weekly:                switch (rec.StartTime.DayOfWeek)                {                  case DayOfWeek.Monday:                    day = GUILocalizeStrings.Get(11);                    break;                  case DayOfWeek.Tuesday:                    day = GUILocalizeStrings.Get(12);                    break;                  case DayOfWeek.Wednesday:                    day = GUILocalizeStrings.Get(13);                    break;                  case DayOfWeek.Thursday:                    day = GUILocalizeStrings.Get(14);                    break;                  case DayOfWeek.Friday:                    day = GUILocalizeStrings.Get(15);                    break;                  case DayOfWeek.Saturday:                    day = GUILocalizeStrings.Get(16);                    break;                  default:                    day = GUILocalizeStrings.Get(17);                    break;                }                  strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);                break;              case (int)ScheduleRecordingType.EveryTimeOnThisChannel:                item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});                break;              case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:                item.Label2 = GUILocalizeStrings.Get(651);                break;             case (int) ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:               switch (rec.StartTime.DayOfWeek)               {                   case DayOfWeek.Monday:                       day = GUILocalizeStrings.Get(11);                       break;                   case DayOfWeek.Tuesday:                       day = GUILocalizeStrings.Get(12);                       break;                   case DayOfWeek.Wednesday:                       day = GUILocalizeStrings.Get(13);                       break;                   case DayOfWeek.Thursday:                       day = GUILocalizeStrings.Get(14);                       break;                   case DayOfWeek.Friday:                       day = GUILocalizeStrings.Get(15);                       break;                   case DayOfWeek.Saturday:                       day = GUILocalizeStrings.Get(16);                       break;                   default:                       day = GUILocalizeStrings.Get(17);                       break;            }               item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });               break;                        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)            {              case (int)ScheduleRecordingType.Once:                item.Label2 = String.Format("{0} {1} - {2}"'                                            Utils.GetShortDayString(rec.StartTime)'                                            rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                            rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                ;                break;              case (int)ScheduleRecordingType.Daily:                strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.WorkingDays:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.Weekends:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;              case (int)ScheduleRecordingType.Weekly:                switch (rec.StartTime.DayOfWeek)                {                  case DayOfWeek.Monday:                    day = GUILocalizeStrings.Get(11);                    break;                  case DayOfWeek.Tuesday:                    day = GUILocalizeStrings.Get(12);                    break;                  case DayOfWeek.Wednesday:                    day = GUILocalizeStrings.Get(13);                    break;                  case DayOfWeek.Thursday:                    day = GUILocalizeStrings.Get(14);                    break;                  case DayOfWeek.Friday:                    day = GUILocalizeStrings.Get(15);                    break;                  case DayOfWeek.Saturday:                    day = GUILocalizeStrings.Get(16);                    break;                  default:                    day = GUILocalizeStrings.Get(17);                    break;                }                  strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);                break;              case (int)ScheduleRecordingType.EveryTimeOnThisChannel:                item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});                break;              case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:                item.Label2 = GUILocalizeStrings.Get(651);                break;             case (int) ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:               switch (rec.StartTime.DayOfWeek)               {                   case DayOfWeek.Monday:                       day = GUILocalizeStrings.Get(11);                       break;                   case DayOfWeek.Tuesday:                       day = GUILocalizeStrings.Get(12);                       break;                   case DayOfWeek.Wednesday:                       day = GUILocalizeStrings.Get(13);                       break;                   case DayOfWeek.Thursday:                       day = GUILocalizeStrings.Get(14);                       break;                   case DayOfWeek.Friday:                       day = GUILocalizeStrings.Get(15);                       break;                   case DayOfWeek.Saturday:                       day = GUILocalizeStrings.Get(16);                       break;                   default:                       day = GUILocalizeStrings.Get(17);                       break;            }               item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });               break;                        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)            {              case (int)ScheduleRecordingType.Once:                item.Label2 = String.Format("{0} {1} - {2}"'                                            Utils.GetShortDayString(rec.StartTime)'                                            rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                            rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                ;                break;              case (int)ScheduleRecordingType.Daily:                strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.WorkingDays:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.Weekends:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;              case (int)ScheduleRecordingType.Weekly:                switch (rec.StartTime.DayOfWeek)                {                  case DayOfWeek.Monday:                    day = GUILocalizeStrings.Get(11);                    break;                  case DayOfWeek.Tuesday:                    day = GUILocalizeStrings.Get(12);                    break;                  case DayOfWeek.Wednesday:                    day = GUILocalizeStrings.Get(13);                    break;                  case DayOfWeek.Thursday:                    day = GUILocalizeStrings.Get(14);                    break;                  case DayOfWeek.Friday:                    day = GUILocalizeStrings.Get(15);                    break;                  case DayOfWeek.Saturday:                    day = GUILocalizeStrings.Get(16);                    break;                  default:                    day = GUILocalizeStrings.Get(17);                    break;                }                  strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);                break;              case (int)ScheduleRecordingType.EveryTimeOnThisChannel:                item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});                break;              case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:                item.Label2 = GUILocalizeStrings.Get(651);                break;             case (int) ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:               switch (rec.StartTime.DayOfWeek)               {                   case DayOfWeek.Monday:                       day = GUILocalizeStrings.Get(11);                       break;                   case DayOfWeek.Tuesday:                       day = GUILocalizeStrings.Get(12);                       break;                   case DayOfWeek.Wednesday:                       day = GUILocalizeStrings.Get(13);                       break;                   case DayOfWeek.Thursday:                       day = GUILocalizeStrings.Get(14);                       break;                   case DayOfWeek.Friday:                       day = GUILocalizeStrings.Get(15);                       break;                   case DayOfWeek.Saturday:                       day = GUILocalizeStrings.Get(16);                       break;                   default:                       day = GUILocalizeStrings.Get(17);                       break;            }               item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });               break;                        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)            {              case (int)ScheduleRecordingType.Once:                item.Label2 = String.Format("{0} {1} - {2}"'                                            Utils.GetShortDayString(rec.StartTime)'                                            rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                            rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                ;                break;              case (int)ScheduleRecordingType.Daily:                strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.WorkingDays:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.Weekends:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;              case (int)ScheduleRecordingType.Weekly:                switch (rec.StartTime.DayOfWeek)                {                  case DayOfWeek.Monday:                    day = GUILocalizeStrings.Get(11);                    break;                  case DayOfWeek.Tuesday:                    day = GUILocalizeStrings.Get(12);                    break;                  case DayOfWeek.Wednesday:                    day = GUILocalizeStrings.Get(13);                    break;                  case DayOfWeek.Thursday:                    day = GUILocalizeStrings.Get(14);                    break;                  case DayOfWeek.Friday:                    day = GUILocalizeStrings.Get(15);                    break;                  case DayOfWeek.Saturday:                    day = GUILocalizeStrings.Get(16);                    break;                  default:                    day = GUILocalizeStrings.Get(17);                    break;                }                  strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);                break;              case (int)ScheduleRecordingType.EveryTimeOnThisChannel:                item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});                break;              case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:                item.Label2 = GUILocalizeStrings.Get(651);                break;             case (int) ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:               switch (rec.StartTime.DayOfWeek)               {                   case DayOfWeek.Monday:                       day = GUILocalizeStrings.Get(11);                       break;                   case DayOfWeek.Tuesday:                       day = GUILocalizeStrings.Get(12);                       break;                   case DayOfWeek.Wednesday:                       day = GUILocalizeStrings.Get(13);                       break;                   case DayOfWeek.Thursday:                       day = GUILocalizeStrings.Get(14);                       break;                   case DayOfWeek.Friday:                       day = GUILocalizeStrings.Get(15);                       break;                   case DayOfWeek.Saturday:                       day = GUILocalizeStrings.Get(16);                       break;                   default:                       day = GUILocalizeStrings.Get(17);                       break;            }               item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });               break;                        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)            {              case (int)ScheduleRecordingType.Once:                item.Label2 = String.Format("{0} {1} - {2}"'                                            Utils.GetShortDayString(rec.StartTime)'                                            rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                            rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                ;                break;              case (int)ScheduleRecordingType.Daily:                strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.WorkingDays:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.Weekends:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;              case (int)ScheduleRecordingType.Weekly:                switch (rec.StartTime.DayOfWeek)                {                  case DayOfWeek.Monday:                    day = GUILocalizeStrings.Get(11);                    break;                  case DayOfWeek.Tuesday:                    day = GUILocalizeStrings.Get(12);                    break;                  case DayOfWeek.Wednesday:                    day = GUILocalizeStrings.Get(13);                    break;                  case DayOfWeek.Thursday:                    day = GUILocalizeStrings.Get(14);                    break;                  case DayOfWeek.Friday:                    day = GUILocalizeStrings.Get(15);                    break;                  case DayOfWeek.Saturday:                    day = GUILocalizeStrings.Get(16);                    break;                  default:                    day = GUILocalizeStrings.Get(17);                    break;                }                  strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);                break;              case (int)ScheduleRecordingType.EveryTimeOnThisChannel:                item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});                break;              case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:                item.Label2 = GUILocalizeStrings.Get(651);                break;             case (int) ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:               switch (rec.StartTime.DayOfWeek)               {                   case DayOfWeek.Monday:                       day = GUILocalizeStrings.Get(11);                       break;                   case DayOfWeek.Tuesday:                       day = GUILocalizeStrings.Get(12);                       break;                   case DayOfWeek.Wednesday:                       day = GUILocalizeStrings.Get(13);                       break;                   case DayOfWeek.Thursday:                       day = GUILocalizeStrings.Get(14);                       break;                   case DayOfWeek.Friday:                       day = GUILocalizeStrings.Get(15);                       break;                   case DayOfWeek.Saturday:                       day = GUILocalizeStrings.Get(16);                       break;                   default:                       day = GUILocalizeStrings.Get(17);                       break;            }               item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });               break;                        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)            {              case (int)ScheduleRecordingType.Once:                item.Label2 = String.Format("{0} {1} - {2}"'                                            Utils.GetShortDayString(rec.StartTime)'                                            rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                            rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                ;                break;              case (int)ScheduleRecordingType.Daily:                strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.WorkingDays:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.Weekends:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;              case (int)ScheduleRecordingType.Weekly:                switch (rec.StartTime.DayOfWeek)                {                  case DayOfWeek.Monday:                    day = GUILocalizeStrings.Get(11);                    break;                  case DayOfWeek.Tuesday:                    day = GUILocalizeStrings.Get(12);                    break;                  case DayOfWeek.Wednesday:                    day = GUILocalizeStrings.Get(13);                    break;                  case DayOfWeek.Thursday:                    day = GUILocalizeStrings.Get(14);                    break;                  case DayOfWeek.Friday:                    day = GUILocalizeStrings.Get(15);                    break;                  case DayOfWeek.Saturday:                    day = GUILocalizeStrings.Get(16);                    break;                  default:                    day = GUILocalizeStrings.Get(17);                    break;                }                  strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);                break;              case (int)ScheduleRecordingType.EveryTimeOnThisChannel:                item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});                break;              case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:                item.Label2 = GUILocalizeStrings.Get(651);                break;             case (int) ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:               switch (rec.StartTime.DayOfWeek)               {                   case DayOfWeek.Monday:                       day = GUILocalizeStrings.Get(11);                       break;                   case DayOfWeek.Tuesday:                       day = GUILocalizeStrings.Get(12);                       break;                   case DayOfWeek.Wednesday:                       day = GUILocalizeStrings.Get(13);                       break;                   case DayOfWeek.Thursday:                       day = GUILocalizeStrings.Get(14);                       break;                   case DayOfWeek.Friday:                       day = GUILocalizeStrings.Get(15);                       break;                   case DayOfWeek.Saturday:                       day = GUILocalizeStrings.Get(16);                       break;                   default:                       day = GUILocalizeStrings.Get(17);                       break;            }               item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });               break;                        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)            {              case (int)ScheduleRecordingType.Once:                item.Label2 = String.Format("{0} {1} - {2}"'                                            Utils.GetShortDayString(rec.StartTime)'                                            rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                            rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                ;                break;              case (int)ScheduleRecordingType.Daily:                strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.WorkingDays:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.Weekends:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;              case (int)ScheduleRecordingType.Weekly:                switch (rec.StartTime.DayOfWeek)                {                  case DayOfWeek.Monday:                    day = GUILocalizeStrings.Get(11);                    break;                  case DayOfWeek.Tuesday:                    day = GUILocalizeStrings.Get(12);                    break;                  case DayOfWeek.Wednesday:                    day = GUILocalizeStrings.Get(13);                    break;                  case DayOfWeek.Thursday:                    day = GUILocalizeStrings.Get(14);                    break;                  case DayOfWeek.Friday:                    day = GUILocalizeStrings.Get(15);                    break;                  case DayOfWeek.Saturday:                    day = GUILocalizeStrings.Get(16);                    break;                  default:                    day = GUILocalizeStrings.Get(17);                    break;                }                  strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);                break;              case (int)ScheduleRecordingType.EveryTimeOnThisChannel:                item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});                break;              case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:                item.Label2 = GUILocalizeStrings.Get(651);                break;             case (int) ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:               switch (rec.StartTime.DayOfWeek)               {                   case DayOfWeek.Monday:                       day = GUILocalizeStrings.Get(11);                       break;                   case DayOfWeek.Tuesday:                       day = GUILocalizeStrings.Get(12);                       break;                   case DayOfWeek.Wednesday:                       day = GUILocalizeStrings.Get(13);                       break;                   case DayOfWeek.Thursday:                       day = GUILocalizeStrings.Get(14);                       break;                   case DayOfWeek.Friday:                       day = GUILocalizeStrings.Get(15);                       break;                   case DayOfWeek.Saturday:                       day = GUILocalizeStrings.Get(16);                       break;                   default:                       day = GUILocalizeStrings.Get(17);                       break;            }               item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });               break;                        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)            {              case (int)ScheduleRecordingType.Once:                item.Label2 = String.Format("{0} {1} - {2}"'                                            Utils.GetShortDayString(rec.StartTime)'                                            rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                            rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                ;                break;              case (int)ScheduleRecordingType.Daily:                strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.WorkingDays:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.Weekends:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;              case (int)ScheduleRecordingType.Weekly:                switch (rec.StartTime.DayOfWeek)                {                  case DayOfWeek.Monday:                    day = GUILocalizeStrings.Get(11);                    break;                  case DayOfWeek.Tuesday:                    day = GUILocalizeStrings.Get(12);                    break;                  case DayOfWeek.Wednesday:                    day = GUILocalizeStrings.Get(13);                    break;                  case DayOfWeek.Thursday:                    day = GUILocalizeStrings.Get(14);                    break;                  case DayOfWeek.Friday:                    day = GUILocalizeStrings.Get(15);                    break;                  case DayOfWeek.Saturday:                    day = GUILocalizeStrings.Get(16);                    break;                  default:                    day = GUILocalizeStrings.Get(17);                    break;                }                  strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);                break;              case (int)ScheduleRecordingType.EveryTimeOnThisChannel:                item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});                break;              case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:                item.Label2 = GUILocalizeStrings.Get(651);                break;             case (int) ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:               switch (rec.StartTime.DayOfWeek)               {                   case DayOfWeek.Monday:                       day = GUILocalizeStrings.Get(11);                       break;                   case DayOfWeek.Tuesday:                       day = GUILocalizeStrings.Get(12);                       break;                   case DayOfWeek.Wednesday:                       day = GUILocalizeStrings.Get(13);                       break;                   case DayOfWeek.Thursday:                       day = GUILocalizeStrings.Get(14);                       break;                   case DayOfWeek.Friday:                       day = GUILocalizeStrings.Get(15);                       break;                   case DayOfWeek.Saturday:                       day = GUILocalizeStrings.Get(16);                       break;                   default:                       day = GUILocalizeStrings.Get(17);                       break;            }               item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });               break;                        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)            {              case (int)ScheduleRecordingType.Once:                item.Label2 = String.Format("{0} {1} - {2}"'                                            Utils.GetShortDayString(rec.StartTime)'                                            rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                            rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                ;                break;              case (int)ScheduleRecordingType.Daily:                strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.WorkingDays:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.Weekends:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;              case (int)ScheduleRecordingType.Weekly:                switch (rec.StartTime.DayOfWeek)                {                  case DayOfWeek.Monday:                    day = GUILocalizeStrings.Get(11);                    break;                  case DayOfWeek.Tuesday:                    day = GUILocalizeStrings.Get(12);                    break;                  case DayOfWeek.Wednesday:                    day = GUILocalizeStrings.Get(13);                    break;                  case DayOfWeek.Thursday:                    day = GUILocalizeStrings.Get(14);                    break;                  case DayOfWeek.Friday:                    day = GUILocalizeStrings.Get(15);                    break;                  case DayOfWeek.Saturday:                    day = GUILocalizeStrings.Get(16);                    break;                  default:                    day = GUILocalizeStrings.Get(17);                    break;                }                  strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);                break;              case (int)ScheduleRecordingType.EveryTimeOnThisChannel:                item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});                break;              case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:                item.Label2 = GUILocalizeStrings.Get(651);                break;             case (int) ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:               switch (rec.StartTime.DayOfWeek)               {                   case DayOfWeek.Monday:                       day = GUILocalizeStrings.Get(11);                       break;                   case DayOfWeek.Tuesday:                       day = GUILocalizeStrings.Get(12);                       break;                   case DayOfWeek.Wednesday:                       day = GUILocalizeStrings.Get(13);                       break;                   case DayOfWeek.Thursday:                       day = GUILocalizeStrings.Get(14);                       break;                   case DayOfWeek.Friday:                       day = GUILocalizeStrings.Get(15);                       break;                   case DayOfWeek.Saturday:                       day = GUILocalizeStrings.Get(16);                       break;                   default:                       day = GUILocalizeStrings.Get(17);                       break;            }               item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });               break;                        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)            {              case (int)ScheduleRecordingType.Once:                item.Label2 = String.Format("{0} {1} - {2}"'                                            Utils.GetShortDayString(rec.StartTime)'                                            rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                            rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                ;                break;              case (int)ScheduleRecordingType.Daily:                strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.WorkingDays:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.Weekends:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;              case (int)ScheduleRecordingType.Weekly:                switch (rec.StartTime.DayOfWeek)                {                  case DayOfWeek.Monday:                    day = GUILocalizeStrings.Get(11);                    break;                  case DayOfWeek.Tuesday:                    day = GUILocalizeStrings.Get(12);                    break;                  case DayOfWeek.Wednesday:                    day = GUILocalizeStrings.Get(13);                    break;                  case DayOfWeek.Thursday:                    day = GUILocalizeStrings.Get(14);                    break;                  case DayOfWeek.Friday:                    day = GUILocalizeStrings.Get(15);                    break;                  case DayOfWeek.Saturday:                    day = GUILocalizeStrings.Get(16);                    break;                  default:                    day = GUILocalizeStrings.Get(17);                    break;                }                  strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);                break;              case (int)ScheduleRecordingType.EveryTimeOnThisChannel:                item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});                break;              case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:                item.Label2 = GUILocalizeStrings.Get(651);                break;             case (int) ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:               switch (rec.StartTime.DayOfWeek)               {                   case DayOfWeek.Monday:                       day = GUILocalizeStrings.Get(11);                       break;                   case DayOfWeek.Tuesday:                       day = GUILocalizeStrings.Get(12);                       break;                   case DayOfWeek.Wednesday:                       day = GUILocalizeStrings.Get(13);                       break;                   case DayOfWeek.Thursday:                       day = GUILocalizeStrings.Get(14);                       break;                   case DayOfWeek.Friday:                       day = GUILocalizeStrings.Get(15);                       break;                   case DayOfWeek.Saturday:                       day = GUILocalizeStrings.Get(16);                       break;                   default:                       day = GUILocalizeStrings.Get(17);                       break;            }               item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });               break;                        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)            {              case (int)ScheduleRecordingType.Once:                item.Label2 = String.Format("{0} {1} - {2}"'                                            Utils.GetShortDayString(rec.StartTime)'                                            rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                            rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                ;                break;              case (int)ScheduleRecordingType.Daily:                strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.WorkingDays:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.Weekends:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;              case (int)ScheduleRecordingType.Weekly:                switch (rec.StartTime.DayOfWeek)                {                  case DayOfWeek.Monday:                    day = GUILocalizeStrings.Get(11);                    break;                  case DayOfWeek.Tuesday:                    day = GUILocalizeStrings.Get(12);                    break;                  case DayOfWeek.Wednesday:                    day = GUILocalizeStrings.Get(13);                    break;                  case DayOfWeek.Thursday:                    day = GUILocalizeStrings.Get(14);                    break;                  case DayOfWeek.Friday:                    day = GUILocalizeStrings.Get(15);                    break;                  case DayOfWeek.Saturday:                    day = GUILocalizeStrings.Get(16);                    break;                  default:                    day = GUILocalizeStrings.Get(17);                    break;                }                  strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);                break;              case (int)ScheduleRecordingType.EveryTimeOnThisChannel:                item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});                break;              case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:                item.Label2 = GUILocalizeStrings.Get(651);                break;             case (int) ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:               switch (rec.StartTime.DayOfWeek)               {                   case DayOfWeek.Monday:                       day = GUILocalizeStrings.Get(11);                       break;                   case DayOfWeek.Tuesday:                       day = GUILocalizeStrings.Get(12);                       break;                   case DayOfWeek.Wednesday:                       day = GUILocalizeStrings.Get(13);                       break;                   case DayOfWeek.Thursday:                       day = GUILocalizeStrings.Get(14);                       break;                   case DayOfWeek.Friday:                       day = GUILocalizeStrings.Get(15);                       break;                   case DayOfWeek.Saturday:                       day = GUILocalizeStrings.Get(16);                       break;                   default:                       day = GUILocalizeStrings.Get(17);                       break;            }               item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });               break;                        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)            {              case (int)ScheduleRecordingType.Once:                item.Label2 = String.Format("{0} {1} - {2}"'                                            Utils.GetShortDayString(rec.StartTime)'                                            rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                            rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                ;                break;              case (int)ScheduleRecordingType.Daily:                strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.WorkingDays:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.Weekends:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;              case (int)ScheduleRecordingType.Weekly:                switch (rec.StartTime.DayOfWeek)                {                  case DayOfWeek.Monday:                    day = GUILocalizeStrings.Get(11);                    break;                  case DayOfWeek.Tuesday:                    day = GUILocalizeStrings.Get(12);                    break;                  case DayOfWeek.Wednesday:                    day = GUILocalizeStrings.Get(13);                    break;                  case DayOfWeek.Thursday:                    day = GUILocalizeStrings.Get(14);                    break;                  case DayOfWeek.Friday:                    day = GUILocalizeStrings.Get(15);                    break;                  case DayOfWeek.Saturday:                    day = GUILocalizeStrings.Get(16);                    break;                  default:                    day = GUILocalizeStrings.Get(17);                    break;                }                  strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);                break;              case (int)ScheduleRecordingType.EveryTimeOnThisChannel:                item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});                break;              case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:                item.Label2 = GUILocalizeStrings.Get(651);                break;             case (int) ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:               switch (rec.StartTime.DayOfWeek)               {                   case DayOfWeek.Monday:                       day = GUILocalizeStrings.Get(11);                       break;                   case DayOfWeek.Tuesday:                       day = GUILocalizeStrings.Get(12);                       break;                   case DayOfWeek.Wednesday:                       day = GUILocalizeStrings.Get(13);                       break;                   case DayOfWeek.Thursday:                       day = GUILocalizeStrings.Get(14);                       break;                   case DayOfWeek.Friday:                       day = GUILocalizeStrings.Get(15);                       break;                   case DayOfWeek.Saturday:                       day = GUILocalizeStrings.Get(16);                       break;                   default:                       day = GUILocalizeStrings.Get(17);                       break;            }               item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });               break;                        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)            {              case (int)ScheduleRecordingType.Once:                item.Label2 = String.Format("{0} {1} - {2}"'                                            Utils.GetShortDayString(rec.StartTime)'                                            rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                            rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                ;                break;              case (int)ScheduleRecordingType.Daily:                strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.WorkingDays:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.Weekends:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;              case (int)ScheduleRecordingType.Weekly:                switch (rec.StartTime.DayOfWeek)                {                  case DayOfWeek.Monday:                    day = GUILocalizeStrings.Get(11);                    break;                  case DayOfWeek.Tuesday:                    day = GUILocalizeStrings.Get(12);                    break;                  case DayOfWeek.Wednesday:                    day = GUILocalizeStrings.Get(13);                    break;                  case DayOfWeek.Thursday:                    day = GUILocalizeStrings.Get(14);                    break;                  case DayOfWeek.Friday:                    day = GUILocalizeStrings.Get(15);                    break;                  case DayOfWeek.Saturday:                    day = GUILocalizeStrings.Get(16);                    break;                  default:                    day = GUILocalizeStrings.Get(17);                    break;                }                  strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);                break;              case (int)ScheduleRecordingType.EveryTimeOnThisChannel:                item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});                break;              case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:                item.Label2 = GUILocalizeStrings.Get(651);                break;             case (int) ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:               switch (rec.StartTime.DayOfWeek)               {                   case DayOfWeek.Monday:                       day = GUILocalizeStrings.Get(11);                       break;                   case DayOfWeek.Tuesday:                       day = GUILocalizeStrings.Get(12);                       break;                   case DayOfWeek.Wednesday:                       day = GUILocalizeStrings.Get(13);                       break;                   case DayOfWeek.Thursday:                       day = GUILocalizeStrings.Get(14);                       break;                   case DayOfWeek.Friday:                       day = GUILocalizeStrings.Get(15);                       break;                   case DayOfWeek.Saturday:                       day = GUILocalizeStrings.Get(16);                       break;                   default:                       day = GUILocalizeStrings.Get(17);                       break;            }               item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });               break;                        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)            {              case (int)ScheduleRecordingType.Once:                item.Label2 = String.Format("{0} {1} - {2}"'                                            Utils.GetShortDayString(rec.StartTime)'                                            rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                            rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                ;                break;              case (int)ScheduleRecordingType.Daily:                strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.WorkingDays:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.Weekends:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;              case (int)ScheduleRecordingType.Weekly:                switch (rec.StartTime.DayOfWeek)                {                  case DayOfWeek.Monday:                    day = GUILocalizeStrings.Get(11);                    break;                  case DayOfWeek.Tuesday:                    day = GUILocalizeStrings.Get(12);                    break;                  case DayOfWeek.Wednesday:                    day = GUILocalizeStrings.Get(13);                    break;                  case DayOfWeek.Thursday:                    day = GUILocalizeStrings.Get(14);                    break;                  case DayOfWeek.Friday:                    day = GUILocalizeStrings.Get(15);                    break;                  case DayOfWeek.Saturday:                    day = GUILocalizeStrings.Get(16);                    break;                  default:                    day = GUILocalizeStrings.Get(17);                    break;                }                  strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);                break;              case (int)ScheduleRecordingType.EveryTimeOnThisChannel:                item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});                break;              case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:                item.Label2 = GUILocalizeStrings.Get(651);                break;             case (int) ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:               switch (rec.StartTime.DayOfWeek)               {                   case DayOfWeek.Monday:                       day = GUILocalizeStrings.Get(11);                       break;                   case DayOfWeek.Tuesday:                       day = GUILocalizeStrings.Get(12);                       break;                   case DayOfWeek.Wednesday:                       day = GUILocalizeStrings.Get(13);                       break;                   case DayOfWeek.Thursday:                       day = GUILocalizeStrings.Get(14);                       break;                   case DayOfWeek.Friday:                       day = GUILocalizeStrings.Get(15);                       break;                   case DayOfWeek.Saturday:                       day = GUILocalizeStrings.Get(16);                       break;                   default:                       day = GUILocalizeStrings.Get(17);                       break;            }               item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });               break;                        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)            {              case (int)ScheduleRecordingType.Once:                item.Label2 = String.Format("{0} {1} - {2}"'                                            Utils.GetShortDayString(rec.StartTime)'                                            rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                            rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                ;                break;              case (int)ScheduleRecordingType.Daily:                strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.WorkingDays:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.Weekends:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;              case (int)ScheduleRecordingType.Weekly:                switch (rec.StartTime.DayOfWeek)                {                  case DayOfWeek.Monday:                    day = GUILocalizeStrings.Get(11);                    break;                  case DayOfWeek.Tuesday:                    day = GUILocalizeStrings.Get(12);                    break;                  case DayOfWeek.Wednesday:                    day = GUILocalizeStrings.Get(13);                    break;                  case DayOfWeek.Thursday:                    day = GUILocalizeStrings.Get(14);                    break;                  case DayOfWeek.Friday:                    day = GUILocalizeStrings.Get(15);                    break;                  case DayOfWeek.Saturday:                    day = GUILocalizeStrings.Get(16);                    break;                  default:                    day = GUILocalizeStrings.Get(17);                    break;                }                  strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);                break;              case (int)ScheduleRecordingType.EveryTimeOnThisChannel:                item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});                break;              case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:                item.Label2 = GUILocalizeStrings.Get(651);                break;             case (int) ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:               switch (rec.StartTime.DayOfWeek)               {                   case DayOfWeek.Monday:                       day = GUILocalizeStrings.Get(11);                       break;                   case DayOfWeek.Tuesday:                       day = GUILocalizeStrings.Get(12);                       break;                   case DayOfWeek.Wednesday:                       day = GUILocalizeStrings.Get(13);                       break;                   case DayOfWeek.Thursday:                       day = GUILocalizeStrings.Get(14);                       break;                   case DayOfWeek.Friday:                       day = GUILocalizeStrings.Get(15);                       break;                   case DayOfWeek.Saturday:                       day = GUILocalizeStrings.Get(16);                       break;                   default:                       day = GUILocalizeStrings.Get(17);                       break;            }               item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });               break;                        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)            {              case (int)ScheduleRecordingType.Once:                item.Label2 = String.Format("{0} {1} - {2}"'                                            Utils.GetShortDayString(rec.StartTime)'                                            rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                            rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                ;                break;              case (int)ScheduleRecordingType.Daily:                strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.WorkingDays:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.Weekends:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;              case (int)ScheduleRecordingType.Weekly:                switch (rec.StartTime.DayOfWeek)                {                  case DayOfWeek.Monday:                    day = GUILocalizeStrings.Get(11);                    break;                  case DayOfWeek.Tuesday:                    day = GUILocalizeStrings.Get(12);                    break;                  case DayOfWeek.Wednesday:                    day = GUILocalizeStrings.Get(13);                    break;                  case DayOfWeek.Thursday:                    day = GUILocalizeStrings.Get(14);                    break;                  case DayOfWeek.Friday:                    day = GUILocalizeStrings.Get(15);                    break;                  case DayOfWeek.Saturday:                    day = GUILocalizeStrings.Get(16);                    break;                  default:                    day = GUILocalizeStrings.Get(17);                    break;                }                  strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);                break;              case (int)ScheduleRecordingType.EveryTimeOnThisChannel:                item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});                break;              case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:                item.Label2 = GUILocalizeStrings.Get(651);                break;             case (int) ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:               switch (rec.StartTime.DayOfWeek)               {                   case DayOfWeek.Monday:                       day = GUILocalizeStrings.Get(11);                       break;                   case DayOfWeek.Tuesday:                       day = GUILocalizeStrings.Get(12);                       break;                   case DayOfWeek.Wednesday:                       day = GUILocalizeStrings.Get(13);                       break;                   case DayOfWeek.Thursday:                       day = GUILocalizeStrings.Get(14);                       break;                   case DayOfWeek.Friday:                       day = GUILocalizeStrings.Get(15);                       break;                   case DayOfWeek.Saturday:                       day = GUILocalizeStrings.Get(16);                       break;                   default:                       day = GUILocalizeStrings.Get(17);                       break;            }               item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });               break;                        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,SetLabels,The following statement contains a magic number: switch (rec.ScheduleType)            {              case (int)ScheduleRecordingType.Once:                item.Label2 = String.Format("{0} {1} - {2}"'                                            Utils.GetShortDayString(rec.StartTime)'                                            rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                            rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                ;                break;              case (int)ScheduleRecordingType.Daily:                strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.WorkingDays:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWorkingDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWorkingDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(648);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;                case (int)ScheduleRecordingType.Weekends:                strTime = String.Format("{0}-{1} {2}-{3}"'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.FirstWeekendDay))'                                        GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.LastWeekendDay))'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1}"' strType' strTime);                break;              case (int)ScheduleRecordingType.Weekly:                switch (rec.StartTime.DayOfWeek)                {                  case DayOfWeek.Monday:                    day = GUILocalizeStrings.Get(11);                    break;                  case DayOfWeek.Tuesday:                    day = GUILocalizeStrings.Get(12);                    break;                  case DayOfWeek.Wednesday:                    day = GUILocalizeStrings.Get(13);                    break;                  case DayOfWeek.Thursday:                    day = GUILocalizeStrings.Get(14);                    break;                  case DayOfWeek.Friday:                    day = GUILocalizeStrings.Get(15);                    break;                  case DayOfWeek.Saturday:                    day = GUILocalizeStrings.Get(16);                    break;                  default:                    day = GUILocalizeStrings.Get(17);                    break;                }                  strTime = String.Format("{0}-{1}"'                                        rec.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat)'                                        rec.EndTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                strType = GUILocalizeStrings.Get(649);                item.Label2 = String.Format("{0} {1} {2}"' strType' day' strTime);                break;              case (int)ScheduleRecordingType.EveryTimeOnThisChannel:                item.Label2 = GUILocalizeStrings.Get(650' new object[] {rec.ReferencedChannel().DisplayName});                break;              case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:                item.Label2 = GUILocalizeStrings.Get(651);                break;             case (int) ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:               switch (rec.StartTime.DayOfWeek)               {                   case DayOfWeek.Monday:                       day = GUILocalizeStrings.Get(11);                       break;                   case DayOfWeek.Tuesday:                       day = GUILocalizeStrings.Get(12);                       break;                   case DayOfWeek.Wednesday:                       day = GUILocalizeStrings.Get(13);                       break;                   case DayOfWeek.Thursday:                       day = GUILocalizeStrings.Get(14);                       break;                   case DayOfWeek.Friday:                       day = GUILocalizeStrings.Get(15);                       break;                   case DayOfWeek.Saturday:                       day = GUILocalizeStrings.Get(16);                       break;                   default:                       day = GUILocalizeStrings.Get(17);                       break;            }               item.Label2 = GUILocalizeStrings.Get(990001' new object[] { day' rec.ReferencedChannel().DisplayName });               break;                        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(982);
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(888);
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(979);
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(980);
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1048);
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 888: ////Episodes management            TvPriorities.OnSetEpisodesToKeep(rec);            break;            case 1048: ////settings            Schedule schedule = item.MusicTag as Schedule;            if (schedule == null)            {              schedule = item.TVTag as Schedule;            }            if (schedule != null)            {              TVProgramInfo.CurrentRecording = schedule;                         GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_PROGRAM_INFO);            }            return;          case 882: ////Quality settings            TvPriorities.OnSetQuality(rec);            break;            case 981: //Cancel this show            {              var layer = new TvBusinessLayer();              // get the program that this episode is for              var progs = layer.GetPrograms(rec.ReferencedChannel()' rec.StartTime' rec.EndTime);              // pick up the schedule that is actually used for recording              // see TVUtil.GetRecordingTimes where schedules are all spawend as one off types              // and this is what rec is (ie. it does not actually exist in the database)              var realSchedule = Schedule.Retrieve(rec.IdParentSchedule) ?? rec;              bool res = TVUtil.DeleteRecAndSchedWithPrompt(realSchedule' progs[0]);              if (res)              {                LoadDirectory();              }            }            break;            case 982: //Delete series recording            goto case 618;            case 618: // delete entire recording            {                                      bool res = TVUtil.DeleteRecAndEntireSchedWithPrompt(rec' rec.StartTime);              if (res)              {                if (showSeries && !item.IsFolder)                {                  OnShowContextMenu(0' true);                  return;                }                else                {                  LoadDirectory();                }              }            }            break;            case 979: // Play recording from beginning            {              Recording recDB = Recording.Retrieve(fileName);              if (recDB != null)              {                TVUtil.PlayRecording(recDB);              }            }            return;            case 980: // Play recording from live point            {              TVHome.ViewChannelAndCheck(rec.ReferencedChannel());              if (g_Player.Playing)              {                g_Player.ShowFullScreenWindow();              }              /*              g_Player.Stop();              if (System.IO.File.Exists(fileName))              {                g_Player.Play(fileName' g_Player.MediaType.Recording);                g_Player.SeekAbsolute(g_Player.Duration);                g_Player.ShowFullScreenWindow();                 return;              }              else              {                string url = server.GetRtspUrlForFile(fileName);                Log.Info("recording url:{0}"' url);                if (url.Length > 0)                {                  g_Player.Play(url' g_Player.MediaType.Recording);                    if (g_Player.Playing)                  {                    g_Player.SeekAbsolute(g_Player.Duration);                    g_Player.SeekAbsolute(g_Player.Duration);                    g_Player.ShowFullScreenWindow();                    return;                  }                }              }*/            }            break;        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 888: ////Episodes management            TvPriorities.OnSetEpisodesToKeep(rec);            break;            case 1048: ////settings            Schedule schedule = item.MusicTag as Schedule;            if (schedule == null)            {              schedule = item.TVTag as Schedule;            }            if (schedule != null)            {              TVProgramInfo.CurrentRecording = schedule;                         GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_PROGRAM_INFO);            }            return;          case 882: ////Quality settings            TvPriorities.OnSetQuality(rec);            break;            case 981: //Cancel this show            {              var layer = new TvBusinessLayer();              // get the program that this episode is for              var progs = layer.GetPrograms(rec.ReferencedChannel()' rec.StartTime' rec.EndTime);              // pick up the schedule that is actually used for recording              // see TVUtil.GetRecordingTimes where schedules are all spawend as one off types              // and this is what rec is (ie. it does not actually exist in the database)              var realSchedule = Schedule.Retrieve(rec.IdParentSchedule) ?? rec;              bool res = TVUtil.DeleteRecAndSchedWithPrompt(realSchedule' progs[0]);              if (res)              {                LoadDirectory();              }            }            break;            case 982: //Delete series recording            goto case 618;            case 618: // delete entire recording            {                                      bool res = TVUtil.DeleteRecAndEntireSchedWithPrompt(rec' rec.StartTime);              if (res)              {                if (showSeries && !item.IsFolder)                {                  OnShowContextMenu(0' true);                  return;                }                else                {                  LoadDirectory();                }              }            }            break;            case 979: // Play recording from beginning            {              Recording recDB = Recording.Retrieve(fileName);              if (recDB != null)              {                TVUtil.PlayRecording(recDB);              }            }            return;            case 980: // Play recording from live point            {              TVHome.ViewChannelAndCheck(rec.ReferencedChannel());              if (g_Player.Playing)              {                g_Player.ShowFullScreenWindow();              }              /*              g_Player.Stop();              if (System.IO.File.Exists(fileName))              {                g_Player.Play(fileName' g_Player.MediaType.Recording);                g_Player.SeekAbsolute(g_Player.Duration);                g_Player.ShowFullScreenWindow();                 return;              }              else              {                string url = server.GetRtspUrlForFile(fileName);                Log.Info("recording url:{0}"' url);                if (url.Length > 0)                {                  g_Player.Play(url' g_Player.MediaType.Recording);                    if (g_Player.Playing)                  {                    g_Player.SeekAbsolute(g_Player.Duration);                    g_Player.SeekAbsolute(g_Player.Duration);                    g_Player.ShowFullScreenWindow();                    return;                  }                }              }*/            }            break;        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 888: ////Episodes management            TvPriorities.OnSetEpisodesToKeep(rec);            break;            case 1048: ////settings            Schedule schedule = item.MusicTag as Schedule;            if (schedule == null)            {              schedule = item.TVTag as Schedule;            }            if (schedule != null)            {              TVProgramInfo.CurrentRecording = schedule;                         GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_PROGRAM_INFO);            }            return;          case 882: ////Quality settings            TvPriorities.OnSetQuality(rec);            break;            case 981: //Cancel this show            {              var layer = new TvBusinessLayer();              // get the program that this episode is for              var progs = layer.GetPrograms(rec.ReferencedChannel()' rec.StartTime' rec.EndTime);              // pick up the schedule that is actually used for recording              // see TVUtil.GetRecordingTimes where schedules are all spawend as one off types              // and this is what rec is (ie. it does not actually exist in the database)              var realSchedule = Schedule.Retrieve(rec.IdParentSchedule) ?? rec;              bool res = TVUtil.DeleteRecAndSchedWithPrompt(realSchedule' progs[0]);              if (res)              {                LoadDirectory();              }            }            break;            case 982: //Delete series recording            goto case 618;            case 618: // delete entire recording            {                                      bool res = TVUtil.DeleteRecAndEntireSchedWithPrompt(rec' rec.StartTime);              if (res)              {                if (showSeries && !item.IsFolder)                {                  OnShowContextMenu(0' true);                  return;                }                else                {                  LoadDirectory();                }              }            }            break;            case 979: // Play recording from beginning            {              Recording recDB = Recording.Retrieve(fileName);              if (recDB != null)              {                TVUtil.PlayRecording(recDB);              }            }            return;            case 980: // Play recording from live point            {              TVHome.ViewChannelAndCheck(rec.ReferencedChannel());              if (g_Player.Playing)              {                g_Player.ShowFullScreenWindow();              }              /*              g_Player.Stop();              if (System.IO.File.Exists(fileName))              {                g_Player.Play(fileName' g_Player.MediaType.Recording);                g_Player.SeekAbsolute(g_Player.Duration);                g_Player.ShowFullScreenWindow();                 return;              }              else              {                string url = server.GetRtspUrlForFile(fileName);                Log.Info("recording url:{0}"' url);                if (url.Length > 0)                {                  g_Player.Play(url' g_Player.MediaType.Recording);                    if (g_Player.Playing)                  {                    g_Player.SeekAbsolute(g_Player.Duration);                    g_Player.SeekAbsolute(g_Player.Duration);                    g_Player.ShowFullScreenWindow();                    return;                  }                }              }*/            }            break;        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 888: ////Episodes management            TvPriorities.OnSetEpisodesToKeep(rec);            break;            case 1048: ////settings            Schedule schedule = item.MusicTag as Schedule;            if (schedule == null)            {              schedule = item.TVTag as Schedule;            }            if (schedule != null)            {              TVProgramInfo.CurrentRecording = schedule;                         GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_PROGRAM_INFO);            }            return;          case 882: ////Quality settings            TvPriorities.OnSetQuality(rec);            break;            case 981: //Cancel this show            {              var layer = new TvBusinessLayer();              // get the program that this episode is for              var progs = layer.GetPrograms(rec.ReferencedChannel()' rec.StartTime' rec.EndTime);              // pick up the schedule that is actually used for recording              // see TVUtil.GetRecordingTimes where schedules are all spawend as one off types              // and this is what rec is (ie. it does not actually exist in the database)              var realSchedule = Schedule.Retrieve(rec.IdParentSchedule) ?? rec;              bool res = TVUtil.DeleteRecAndSchedWithPrompt(realSchedule' progs[0]);              if (res)              {                LoadDirectory();              }            }            break;            case 982: //Delete series recording            goto case 618;            case 618: // delete entire recording            {                                      bool res = TVUtil.DeleteRecAndEntireSchedWithPrompt(rec' rec.StartTime);              if (res)              {                if (showSeries && !item.IsFolder)                {                  OnShowContextMenu(0' true);                  return;                }                else                {                  LoadDirectory();                }              }            }            break;            case 979: // Play recording from beginning            {              Recording recDB = Recording.Retrieve(fileName);              if (recDB != null)              {                TVUtil.PlayRecording(recDB);              }            }            return;            case 980: // Play recording from live point            {              TVHome.ViewChannelAndCheck(rec.ReferencedChannel());              if (g_Player.Playing)              {                g_Player.ShowFullScreenWindow();              }              /*              g_Player.Stop();              if (System.IO.File.Exists(fileName))              {                g_Player.Play(fileName' g_Player.MediaType.Recording);                g_Player.SeekAbsolute(g_Player.Duration);                g_Player.ShowFullScreenWindow();                 return;              }              else              {                string url = server.GetRtspUrlForFile(fileName);                Log.Info("recording url:{0}"' url);                if (url.Length > 0)                {                  g_Player.Play(url' g_Player.MediaType.Recording);                    if (g_Player.Playing)                  {                    g_Player.SeekAbsolute(g_Player.Duration);                    g_Player.SeekAbsolute(g_Player.Duration);                    g_Player.ShowFullScreenWindow();                    return;                  }                }              }*/            }            break;        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 888: ////Episodes management            TvPriorities.OnSetEpisodesToKeep(rec);            break;            case 1048: ////settings            Schedule schedule = item.MusicTag as Schedule;            if (schedule == null)            {              schedule = item.TVTag as Schedule;            }            if (schedule != null)            {              TVProgramInfo.CurrentRecording = schedule;                         GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_PROGRAM_INFO);            }            return;          case 882: ////Quality settings            TvPriorities.OnSetQuality(rec);            break;            case 981: //Cancel this show            {              var layer = new TvBusinessLayer();              // get the program that this episode is for              var progs = layer.GetPrograms(rec.ReferencedChannel()' rec.StartTime' rec.EndTime);              // pick up the schedule that is actually used for recording              // see TVUtil.GetRecordingTimes where schedules are all spawend as one off types              // and this is what rec is (ie. it does not actually exist in the database)              var realSchedule = Schedule.Retrieve(rec.IdParentSchedule) ?? rec;              bool res = TVUtil.DeleteRecAndSchedWithPrompt(realSchedule' progs[0]);              if (res)              {                LoadDirectory();              }            }            break;            case 982: //Delete series recording            goto case 618;            case 618: // delete entire recording            {                                      bool res = TVUtil.DeleteRecAndEntireSchedWithPrompt(rec' rec.StartTime);              if (res)              {                if (showSeries && !item.IsFolder)                {                  OnShowContextMenu(0' true);                  return;                }                else                {                  LoadDirectory();                }              }            }            break;            case 979: // Play recording from beginning            {              Recording recDB = Recording.Retrieve(fileName);              if (recDB != null)              {                TVUtil.PlayRecording(recDB);              }            }            return;            case 980: // Play recording from live point            {              TVHome.ViewChannelAndCheck(rec.ReferencedChannel());              if (g_Player.Playing)              {                g_Player.ShowFullScreenWindow();              }              /*              g_Player.Stop();              if (System.IO.File.Exists(fileName))              {                g_Player.Play(fileName' g_Player.MediaType.Recording);                g_Player.SeekAbsolute(g_Player.Duration);                g_Player.ShowFullScreenWindow();                 return;              }              else              {                string url = server.GetRtspUrlForFile(fileName);                Log.Info("recording url:{0}"' url);                if (url.Length > 0)                {                  g_Player.Play(url' g_Player.MediaType.Recording);                    if (g_Player.Playing)                  {                    g_Player.SeekAbsolute(g_Player.Duration);                    g_Player.SeekAbsolute(g_Player.Duration);                    g_Player.ShowFullScreenWindow();                    return;                  }                }              }*/            }            break;        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 888: ////Episodes management            TvPriorities.OnSetEpisodesToKeep(rec);            break;            case 1048: ////settings            Schedule schedule = item.MusicTag as Schedule;            if (schedule == null)            {              schedule = item.TVTag as Schedule;            }            if (schedule != null)            {              TVProgramInfo.CurrentRecording = schedule;                         GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_PROGRAM_INFO);            }            return;          case 882: ////Quality settings            TvPriorities.OnSetQuality(rec);            break;            case 981: //Cancel this show            {              var layer = new TvBusinessLayer();              // get the program that this episode is for              var progs = layer.GetPrograms(rec.ReferencedChannel()' rec.StartTime' rec.EndTime);              // pick up the schedule that is actually used for recording              // see TVUtil.GetRecordingTimes where schedules are all spawend as one off types              // and this is what rec is (ie. it does not actually exist in the database)              var realSchedule = Schedule.Retrieve(rec.IdParentSchedule) ?? rec;              bool res = TVUtil.DeleteRecAndSchedWithPrompt(realSchedule' progs[0]);              if (res)              {                LoadDirectory();              }            }            break;            case 982: //Delete series recording            goto case 618;            case 618: // delete entire recording            {                                      bool res = TVUtil.DeleteRecAndEntireSchedWithPrompt(rec' rec.StartTime);              if (res)              {                if (showSeries && !item.IsFolder)                {                  OnShowContextMenu(0' true);                  return;                }                else                {                  LoadDirectory();                }              }            }            break;            case 979: // Play recording from beginning            {              Recording recDB = Recording.Retrieve(fileName);              if (recDB != null)              {                TVUtil.PlayRecording(recDB);              }            }            return;            case 980: // Play recording from live point            {              TVHome.ViewChannelAndCheck(rec.ReferencedChannel());              if (g_Player.Playing)              {                g_Player.ShowFullScreenWindow();              }              /*              g_Player.Stop();              if (System.IO.File.Exists(fileName))              {                g_Player.Play(fileName' g_Player.MediaType.Recording);                g_Player.SeekAbsolute(g_Player.Duration);                g_Player.ShowFullScreenWindow();                 return;              }              else              {                string url = server.GetRtspUrlForFile(fileName);                Log.Info("recording url:{0}"' url);                if (url.Length > 0)                {                  g_Player.Play(url' g_Player.MediaType.Recording);                    if (g_Player.Playing)                  {                    g_Player.SeekAbsolute(g_Player.Duration);                    g_Player.SeekAbsolute(g_Player.Duration);                    g_Player.ShowFullScreenWindow();                    return;                  }                }              }*/            }            break;        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 888: ////Episodes management            TvPriorities.OnSetEpisodesToKeep(rec);            break;            case 1048: ////settings            Schedule schedule = item.MusicTag as Schedule;            if (schedule == null)            {              schedule = item.TVTag as Schedule;            }            if (schedule != null)            {              TVProgramInfo.CurrentRecording = schedule;                         GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_PROGRAM_INFO);            }            return;          case 882: ////Quality settings            TvPriorities.OnSetQuality(rec);            break;            case 981: //Cancel this show            {              var layer = new TvBusinessLayer();              // get the program that this episode is for              var progs = layer.GetPrograms(rec.ReferencedChannel()' rec.StartTime' rec.EndTime);              // pick up the schedule that is actually used for recording              // see TVUtil.GetRecordingTimes where schedules are all spawend as one off types              // and this is what rec is (ie. it does not actually exist in the database)              var realSchedule = Schedule.Retrieve(rec.IdParentSchedule) ?? rec;              bool res = TVUtil.DeleteRecAndSchedWithPrompt(realSchedule' progs[0]);              if (res)              {                LoadDirectory();              }            }            break;            case 982: //Delete series recording            goto case 618;            case 618: // delete entire recording            {                                      bool res = TVUtil.DeleteRecAndEntireSchedWithPrompt(rec' rec.StartTime);              if (res)              {                if (showSeries && !item.IsFolder)                {                  OnShowContextMenu(0' true);                  return;                }                else                {                  LoadDirectory();                }              }            }            break;            case 979: // Play recording from beginning            {              Recording recDB = Recording.Retrieve(fileName);              if (recDB != null)              {                TVUtil.PlayRecording(recDB);              }            }            return;            case 980: // Play recording from live point            {              TVHome.ViewChannelAndCheck(rec.ReferencedChannel());              if (g_Player.Playing)              {                g_Player.ShowFullScreenWindow();              }              /*              g_Player.Stop();              if (System.IO.File.Exists(fileName))              {                g_Player.Play(fileName' g_Player.MediaType.Recording);                g_Player.SeekAbsolute(g_Player.Duration);                g_Player.ShowFullScreenWindow();                 return;              }              else              {                string url = server.GetRtspUrlForFile(fileName);                Log.Info("recording url:{0}"' url);                if (url.Length > 0)                {                  g_Player.Play(url' g_Player.MediaType.Recording);                    if (g_Player.Playing)                  {                    g_Player.SeekAbsolute(g_Player.Duration);                    g_Player.SeekAbsolute(g_Player.Duration);                    g_Player.ShowFullScreenWindow();                    return;                  }                }              }*/            }            break;        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 888: ////Episodes management            TvPriorities.OnSetEpisodesToKeep(rec);            break;            case 1048: ////settings            Schedule schedule = item.MusicTag as Schedule;            if (schedule == null)            {              schedule = item.TVTag as Schedule;            }            if (schedule != null)            {              TVProgramInfo.CurrentRecording = schedule;                         GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_PROGRAM_INFO);            }            return;          case 882: ////Quality settings            TvPriorities.OnSetQuality(rec);            break;            case 981: //Cancel this show            {              var layer = new TvBusinessLayer();              // get the program that this episode is for              var progs = layer.GetPrograms(rec.ReferencedChannel()' rec.StartTime' rec.EndTime);              // pick up the schedule that is actually used for recording              // see TVUtil.GetRecordingTimes where schedules are all spawend as one off types              // and this is what rec is (ie. it does not actually exist in the database)              var realSchedule = Schedule.Retrieve(rec.IdParentSchedule) ?? rec;              bool res = TVUtil.DeleteRecAndSchedWithPrompt(realSchedule' progs[0]);              if (res)              {                LoadDirectory();              }            }            break;            case 982: //Delete series recording            goto case 618;            case 618: // delete entire recording            {                                      bool res = TVUtil.DeleteRecAndEntireSchedWithPrompt(rec' rec.StartTime);              if (res)              {                if (showSeries && !item.IsFolder)                {                  OnShowContextMenu(0' true);                  return;                }                else                {                  LoadDirectory();                }              }            }            break;            case 979: // Play recording from beginning            {              Recording recDB = Recording.Retrieve(fileName);              if (recDB != null)              {                TVUtil.PlayRecording(recDB);              }            }            return;            case 980: // Play recording from live point            {              TVHome.ViewChannelAndCheck(rec.ReferencedChannel());              if (g_Player.Playing)              {                g_Player.ShowFullScreenWindow();              }              /*              g_Player.Stop();              if (System.IO.File.Exists(fileName))              {                g_Player.Play(fileName' g_Player.MediaType.Recording);                g_Player.SeekAbsolute(g_Player.Duration);                g_Player.ShowFullScreenWindow();                 return;              }              else              {                string url = server.GetRtspUrlForFile(fileName);                Log.Info("recording url:{0}"' url);                if (url.Length > 0)                {                  g_Player.Play(url' g_Player.MediaType.Recording);                    if (g_Player.Playing)                  {                    g_Player.SeekAbsolute(g_Player.Duration);                    g_Player.SeekAbsolute(g_Player.Duration);                    g_Player.ShowFullScreenWindow();                    return;                  }                }              }*/            }            break;        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 888: ////Episodes management            TvPriorities.OnSetEpisodesToKeep(rec);            break;            case 1048: ////settings            Schedule schedule = item.MusicTag as Schedule;            if (schedule == null)            {              schedule = item.TVTag as Schedule;            }            if (schedule != null)            {              TVProgramInfo.CurrentRecording = schedule;                         GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_PROGRAM_INFO);            }            return;          case 882: ////Quality settings            TvPriorities.OnSetQuality(rec);            break;            case 981: //Cancel this show            {              var layer = new TvBusinessLayer();              // get the program that this episode is for              var progs = layer.GetPrograms(rec.ReferencedChannel()' rec.StartTime' rec.EndTime);              // pick up the schedule that is actually used for recording              // see TVUtil.GetRecordingTimes where schedules are all spawend as one off types              // and this is what rec is (ie. it does not actually exist in the database)              var realSchedule = Schedule.Retrieve(rec.IdParentSchedule) ?? rec;              bool res = TVUtil.DeleteRecAndSchedWithPrompt(realSchedule' progs[0]);              if (res)              {                LoadDirectory();              }            }            break;            case 982: //Delete series recording            goto case 618;            case 618: // delete entire recording            {                                      bool res = TVUtil.DeleteRecAndEntireSchedWithPrompt(rec' rec.StartTime);              if (res)              {                if (showSeries && !item.IsFolder)                {                  OnShowContextMenu(0' true);                  return;                }                else                {                  LoadDirectory();                }              }            }            break;            case 979: // Play recording from beginning            {              Recording recDB = Recording.Retrieve(fileName);              if (recDB != null)              {                TVUtil.PlayRecording(recDB);              }            }            return;            case 980: // Play recording from live point            {              TVHome.ViewChannelAndCheck(rec.ReferencedChannel());              if (g_Player.Playing)              {                g_Player.ShowFullScreenWindow();              }              /*              g_Player.Stop();              if (System.IO.File.Exists(fileName))              {                g_Player.Play(fileName' g_Player.MediaType.Recording);                g_Player.SeekAbsolute(g_Player.Duration);                g_Player.ShowFullScreenWindow();                 return;              }              else              {                string url = server.GetRtspUrlForFile(fileName);                Log.Info("recording url:{0}"' url);                if (url.Length > 0)                {                  g_Player.Play(url' g_Player.MediaType.Recording);                    if (g_Player.Playing)                  {                    g_Player.SeekAbsolute(g_Player.Duration);                    g_Player.SeekAbsolute(g_Player.Duration);                    g_Player.ShowFullScreenWindow();                    return;                  }                }              }*/            }            break;        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,ChangeType,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(616));
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,ChangeType,The following statement contains a magic number: i <= 615
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,ChangeType,The following statement contains a magic number: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              dlg.SelectedLabel = 0;              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              dlg.SelectedLabel = 1;              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              dlg.SelectedLabel = 2;              break;            case ScheduleRecordingType.Weekly:              dlg.SelectedLabel = 3;              break;            case ScheduleRecordingType.Daily:              dlg.SelectedLabel = 4;              break;            case ScheduleRecordingType.WorkingDays:              dlg.SelectedLabel = 5;              break;            case ScheduleRecordingType.Weekends:              dlg.SelectedLabel = 6;              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              dlg.SelectedLabel = 7;              break;          }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,ChangeType,The following statement contains a magic number: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              dlg.SelectedLabel = 0;              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              dlg.SelectedLabel = 1;              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              dlg.SelectedLabel = 2;              break;            case ScheduleRecordingType.Weekly:              dlg.SelectedLabel = 3;              break;            case ScheduleRecordingType.Daily:              dlg.SelectedLabel = 4;              break;            case ScheduleRecordingType.WorkingDays:              dlg.SelectedLabel = 5;              break;            case ScheduleRecordingType.Weekends:              dlg.SelectedLabel = 6;              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              dlg.SelectedLabel = 7;              break;          }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,ChangeType,The following statement contains a magic number: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              dlg.SelectedLabel = 0;              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              dlg.SelectedLabel = 1;              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              dlg.SelectedLabel = 2;              break;            case ScheduleRecordingType.Weekly:              dlg.SelectedLabel = 3;              break;            case ScheduleRecordingType.Daily:              dlg.SelectedLabel = 4;              break;            case ScheduleRecordingType.WorkingDays:              dlg.SelectedLabel = 5;              break;            case ScheduleRecordingType.Weekends:              dlg.SelectedLabel = 6;              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              dlg.SelectedLabel = 7;              break;          }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,ChangeType,The following statement contains a magic number: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              dlg.SelectedLabel = 0;              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              dlg.SelectedLabel = 1;              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              dlg.SelectedLabel = 2;              break;            case ScheduleRecordingType.Weekly:              dlg.SelectedLabel = 3;              break;            case ScheduleRecordingType.Daily:              dlg.SelectedLabel = 4;              break;            case ScheduleRecordingType.WorkingDays:              dlg.SelectedLabel = 5;              break;            case ScheduleRecordingType.Weekends:              dlg.SelectedLabel = 6;              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              dlg.SelectedLabel = 7;              break;          }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,ChangeType,The following statement contains a magic number: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              dlg.SelectedLabel = 0;              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              dlg.SelectedLabel = 1;              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              dlg.SelectedLabel = 2;              break;            case ScheduleRecordingType.Weekly:              dlg.SelectedLabel = 3;              break;            case ScheduleRecordingType.Daily:              dlg.SelectedLabel = 4;              break;            case ScheduleRecordingType.WorkingDays:              dlg.SelectedLabel = 5;              break;            case ScheduleRecordingType.Weekends:              dlg.SelectedLabel = 6;              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              dlg.SelectedLabel = 7;              break;          }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,ChangeType,The following statement contains a magic number: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              dlg.SelectedLabel = 0;              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              dlg.SelectedLabel = 1;              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              dlg.SelectedLabel = 2;              break;            case ScheduleRecordingType.Weekly:              dlg.SelectedLabel = 3;              break;            case ScheduleRecordingType.Daily:              dlg.SelectedLabel = 4;              break;            case ScheduleRecordingType.WorkingDays:              dlg.SelectedLabel = 5;              break;            case ScheduleRecordingType.Weekends:              dlg.SelectedLabel = 6;              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              dlg.SelectedLabel = 7;              break;          }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,ChangeType,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: //once              rec.ScheduleType = (int)ScheduleRecordingType.Once;              rec.Canceled = Schedule.MinSchedule;              break;            case 1: //everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              rec.Canceled = Schedule.MinSchedule;              break;            case 2: //everytime' all channels              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              rec.Canceled = Schedule.MinSchedule;              break;            case 3: //weekly              rec.ScheduleType = (int)ScheduleRecordingType.Weekly;              rec.Canceled = Schedule.MinSchedule;              break;            case 4: //daily              rec.ScheduleType = (int)ScheduleRecordingType.Daily;              rec.Canceled = Schedule.MinSchedule;              break;            case 5: //WorkingDays              rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;              rec.Canceled = Schedule.MinSchedule;              break;            case 6: //Weekends              rec.ScheduleType = (int)ScheduleRecordingType.Weekends;              rec.Canceled = Schedule.MinSchedule;              break;            case 7://Weekly everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              rec.Canceled = Schedule.MinSchedule;              break;          }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,ChangeType,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: //once              rec.ScheduleType = (int)ScheduleRecordingType.Once;              rec.Canceled = Schedule.MinSchedule;              break;            case 1: //everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              rec.Canceled = Schedule.MinSchedule;              break;            case 2: //everytime' all channels              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              rec.Canceled = Schedule.MinSchedule;              break;            case 3: //weekly              rec.ScheduleType = (int)ScheduleRecordingType.Weekly;              rec.Canceled = Schedule.MinSchedule;              break;            case 4: //daily              rec.ScheduleType = (int)ScheduleRecordingType.Daily;              rec.Canceled = Schedule.MinSchedule;              break;            case 5: //WorkingDays              rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;              rec.Canceled = Schedule.MinSchedule;              break;            case 6: //Weekends              rec.ScheduleType = (int)ScheduleRecordingType.Weekends;              rec.Canceled = Schedule.MinSchedule;              break;            case 7://Weekly everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              rec.Canceled = Schedule.MinSchedule;              break;          }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,ChangeType,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: //once              rec.ScheduleType = (int)ScheduleRecordingType.Once;              rec.Canceled = Schedule.MinSchedule;              break;            case 1: //everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              rec.Canceled = Schedule.MinSchedule;              break;            case 2: //everytime' all channels              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              rec.Canceled = Schedule.MinSchedule;              break;            case 3: //weekly              rec.ScheduleType = (int)ScheduleRecordingType.Weekly;              rec.Canceled = Schedule.MinSchedule;              break;            case 4: //daily              rec.ScheduleType = (int)ScheduleRecordingType.Daily;              rec.Canceled = Schedule.MinSchedule;              break;            case 5: //WorkingDays              rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;              rec.Canceled = Schedule.MinSchedule;              break;            case 6: //Weekends              rec.ScheduleType = (int)ScheduleRecordingType.Weekends;              rec.Canceled = Schedule.MinSchedule;              break;            case 7://Weekly everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              rec.Canceled = Schedule.MinSchedule;              break;          }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,ChangeType,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: //once              rec.ScheduleType = (int)ScheduleRecordingType.Once;              rec.Canceled = Schedule.MinSchedule;              break;            case 1: //everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              rec.Canceled = Schedule.MinSchedule;              break;            case 2: //everytime' all channels              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              rec.Canceled = Schedule.MinSchedule;              break;            case 3: //weekly              rec.ScheduleType = (int)ScheduleRecordingType.Weekly;              rec.Canceled = Schedule.MinSchedule;              break;            case 4: //daily              rec.ScheduleType = (int)ScheduleRecordingType.Daily;              rec.Canceled = Schedule.MinSchedule;              break;            case 5: //WorkingDays              rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;              rec.Canceled = Schedule.MinSchedule;              break;            case 6: //Weekends              rec.ScheduleType = (int)ScheduleRecordingType.Weekends;              rec.Canceled = Schedule.MinSchedule;              break;            case 7://Weekly everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              rec.Canceled = Schedule.MinSchedule;              break;          }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,ChangeType,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: //once              rec.ScheduleType = (int)ScheduleRecordingType.Once;              rec.Canceled = Schedule.MinSchedule;              break;            case 1: //everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              rec.Canceled = Schedule.MinSchedule;              break;            case 2: //everytime' all channels              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              rec.Canceled = Schedule.MinSchedule;              break;            case 3: //weekly              rec.ScheduleType = (int)ScheduleRecordingType.Weekly;              rec.Canceled = Schedule.MinSchedule;              break;            case 4: //daily              rec.ScheduleType = (int)ScheduleRecordingType.Daily;              rec.Canceled = Schedule.MinSchedule;              break;            case 5: //WorkingDays              rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;              rec.Canceled = Schedule.MinSchedule;              break;            case 6: //Weekends              rec.ScheduleType = (int)ScheduleRecordingType.Weekends;              rec.Canceled = Schedule.MinSchedule;              break;            case 7://Weekly everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              rec.Canceled = Schedule.MinSchedule;              break;          }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,ChangeType,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: //once              rec.ScheduleType = (int)ScheduleRecordingType.Once;              rec.Canceled = Schedule.MinSchedule;              break;            case 1: //everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              rec.Canceled = Schedule.MinSchedule;              break;            case 2: //everytime' all channels              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              rec.Canceled = Schedule.MinSchedule;              break;            case 3: //weekly              rec.ScheduleType = (int)ScheduleRecordingType.Weekly;              rec.Canceled = Schedule.MinSchedule;              break;            case 4: //daily              rec.ScheduleType = (int)ScheduleRecordingType.Daily;              rec.Canceled = Schedule.MinSchedule;              break;            case 5: //WorkingDays              rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;              rec.Canceled = Schedule.MinSchedule;              break;            case 6: //Weekends              rec.ScheduleType = (int)ScheduleRecordingType.Weekends;              rec.Canceled = Schedule.MinSchedule;              break;            case 7://Weekly everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              rec.Canceled = Schedule.MinSchedule;              break;          }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,OnEdit,The following statement contains a magic number: dlg.SetHeading(637);
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,GetScheduleType,The following statement contains a magic number: switch (ScheduleType)        {          case ScheduleRecordingType.Daily:            strType = GUILocalizeStrings.Get(648); //daily            break;          case ScheduleRecordingType.EveryTimeOnEveryChannel:            strType = GUILocalizeStrings.Get(651); //Everytime on any channel            break;          case ScheduleRecordingType.EveryTimeOnThisChannel:            strType = String.Format(GUILocalizeStrings.Get(650)' schedule.ReferencedChannel().DisplayName);            ; //Everytime on this channel            break;          case ScheduleRecordingType.Once:            strType = GUILocalizeStrings.Get(647); //Once            break;          case ScheduleRecordingType.WorkingDays:            strType = GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.WorkingDays)); //Working Days            break;          case ScheduleRecordingType.Weekends:            strType = GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.WeekendDays)); //Weekend Days            break;          case ScheduleRecordingType.Weekly:            strType = GUILocalizeStrings.Get(679); //Weekly            break;          case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:            strType = String.Format(GUILocalizeStrings.Get(990000)' schedule.ReferencedChannel().DisplayName); ;//Weekly Everytime on this channel            break;        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,GetScheduleType,The following statement contains a magic number: switch (ScheduleType)        {          case ScheduleRecordingType.Daily:            strType = GUILocalizeStrings.Get(648); //daily            break;          case ScheduleRecordingType.EveryTimeOnEveryChannel:            strType = GUILocalizeStrings.Get(651); //Everytime on any channel            break;          case ScheduleRecordingType.EveryTimeOnThisChannel:            strType = String.Format(GUILocalizeStrings.Get(650)' schedule.ReferencedChannel().DisplayName);            ; //Everytime on this channel            break;          case ScheduleRecordingType.Once:            strType = GUILocalizeStrings.Get(647); //Once            break;          case ScheduleRecordingType.WorkingDays:            strType = GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.WorkingDays)); //Working Days            break;          case ScheduleRecordingType.Weekends:            strType = GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.WeekendDays)); //Weekend Days            break;          case ScheduleRecordingType.Weekly:            strType = GUILocalizeStrings.Get(679); //Weekly            break;          case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:            strType = String.Format(GUILocalizeStrings.Get(990000)' schedule.ReferencedChannel().DisplayName); ;//Weekly Everytime on this channel            break;        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,GetScheduleType,The following statement contains a magic number: switch (ScheduleType)        {          case ScheduleRecordingType.Daily:            strType = GUILocalizeStrings.Get(648); //daily            break;          case ScheduleRecordingType.EveryTimeOnEveryChannel:            strType = GUILocalizeStrings.Get(651); //Everytime on any channel            break;          case ScheduleRecordingType.EveryTimeOnThisChannel:            strType = String.Format(GUILocalizeStrings.Get(650)' schedule.ReferencedChannel().DisplayName);            ; //Everytime on this channel            break;          case ScheduleRecordingType.Once:            strType = GUILocalizeStrings.Get(647); //Once            break;          case ScheduleRecordingType.WorkingDays:            strType = GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.WorkingDays)); //Working Days            break;          case ScheduleRecordingType.Weekends:            strType = GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.WeekendDays)); //Weekend Days            break;          case ScheduleRecordingType.Weekly:            strType = GUILocalizeStrings.Get(679); //Weekly            break;          case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:            strType = String.Format(GUILocalizeStrings.Get(990000)' schedule.ReferencedChannel().DisplayName); ;//Weekly Everytime on this channel            break;        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,GetScheduleType,The following statement contains a magic number: switch (ScheduleType)        {          case ScheduleRecordingType.Daily:            strType = GUILocalizeStrings.Get(648); //daily            break;          case ScheduleRecordingType.EveryTimeOnEveryChannel:            strType = GUILocalizeStrings.Get(651); //Everytime on any channel            break;          case ScheduleRecordingType.EveryTimeOnThisChannel:            strType = String.Format(GUILocalizeStrings.Get(650)' schedule.ReferencedChannel().DisplayName);            ; //Everytime on this channel            break;          case ScheduleRecordingType.Once:            strType = GUILocalizeStrings.Get(647); //Once            break;          case ScheduleRecordingType.WorkingDays:            strType = GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.WorkingDays)); //Working Days            break;          case ScheduleRecordingType.Weekends:            strType = GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.WeekendDays)); //Weekend Days            break;          case ScheduleRecordingType.Weekly:            strType = GUILocalizeStrings.Get(679); //Weekly            break;          case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:            strType = String.Format(GUILocalizeStrings.Get(990000)' schedule.ReferencedChannel().DisplayName); ;//Weekly Everytime on this channel            break;        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,GetScheduleType,The following statement contains a magic number: switch (ScheduleType)        {          case ScheduleRecordingType.Daily:            strType = GUILocalizeStrings.Get(648); //daily            break;          case ScheduleRecordingType.EveryTimeOnEveryChannel:            strType = GUILocalizeStrings.Get(651); //Everytime on any channel            break;          case ScheduleRecordingType.EveryTimeOnThisChannel:            strType = String.Format(GUILocalizeStrings.Get(650)' schedule.ReferencedChannel().DisplayName);            ; //Everytime on this channel            break;          case ScheduleRecordingType.Once:            strType = GUILocalizeStrings.Get(647); //Once            break;          case ScheduleRecordingType.WorkingDays:            strType = GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.WorkingDays)); //Working Days            break;          case ScheduleRecordingType.Weekends:            strType = GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.WeekendDays)); //Weekend Days            break;          case ScheduleRecordingType.Weekly:            strType = GUILocalizeStrings.Get(679); //Weekly            break;          case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:            strType = String.Format(GUILocalizeStrings.Get(990000)' schedule.ReferencedChannel().DisplayName); ;//Weekly Everytime on this channel            break;        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,GetScheduleType,The following statement contains a magic number: switch (ScheduleType)        {          case ScheduleRecordingType.Daily:            strType = GUILocalizeStrings.Get(648); //daily            break;          case ScheduleRecordingType.EveryTimeOnEveryChannel:            strType = GUILocalizeStrings.Get(651); //Everytime on any channel            break;          case ScheduleRecordingType.EveryTimeOnThisChannel:            strType = String.Format(GUILocalizeStrings.Get(650)' schedule.ReferencedChannel().DisplayName);            ; //Everytime on this channel            break;          case ScheduleRecordingType.Once:            strType = GUILocalizeStrings.Get(647); //Once            break;          case ScheduleRecordingType.WorkingDays:            strType = GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.WorkingDays)); //Working Days            break;          case ScheduleRecordingType.Weekends:            strType = GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.WeekendDays)); //Weekend Days            break;          case ScheduleRecordingType.Weekly:            strType = GUILocalizeStrings.Get(679); //Weekly            break;          case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:            strType = String.Format(GUILocalizeStrings.Get(990000)' schedule.ReferencedChannel().DisplayName); ;//Weekly Everytime on this channel            break;        }
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,OnCleanup,The following statement contains a magic number: pDlgOK.SetHeading(624);
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,OnCleanup,The following statement contains a magic number: pDlgOK.SetLine(1' String.Format("{0} {1}"' GUILocalizeStrings.Get(625)' iCleaned));
Magic Number,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,OnCleanup,The following statement contains a magic number: pDlgOK.SetLine(2' String.Empty);
Magic Number,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,Update,The following statement contains a magic number: switch (chosenSortMethod)        {          case SortMethod.Auto:            strLine = GUILocalizeStrings.Get(1202);            break;          case SortMethod.Name:            strLine = GUILocalizeStrings.Get(622);            break;          case SortMethod.Channel:            strLine = GUILocalizeStrings.Get(620);            break;          case SortMethod.Date:            strLine = GUILocalizeStrings.Get(621);            break;        }
Magic Number,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,Update,The following statement contains a magic number: switch (chosenSortMethod)        {          case SortMethod.Auto:            strLine = GUILocalizeStrings.Get(1202);            break;          case SortMethod.Name:            strLine = GUILocalizeStrings.Get(622);            break;          case SortMethod.Channel:            strLine = GUILocalizeStrings.Get(620);            break;          case SortMethod.Date:            strLine = GUILocalizeStrings.Get(621);            break;        }
Magic Number,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,Update,The following statement contains a magic number: switch (chosenSortMethod)        {          case SortMethod.Auto:            strLine = GUILocalizeStrings.Get(1202);            break;          case SortMethod.Name:            strLine = GUILocalizeStrings.Get(622);            break;          case SortMethod.Channel:            strLine = GUILocalizeStrings.Get(620);            break;          case SortMethod.Date:            strLine = GUILocalizeStrings.Get(621);            break;        }
Magic Number,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,Update,The following statement contains a magic number: switch (chosenSortMethod)        {          case SortMethod.Auto:            strLine = GUILocalizeStrings.Get(1202);            break;          case SortMethod.Name:            strLine = GUILocalizeStrings.Get(622);            break;          case SortMethod.Channel:            strLine = GUILocalizeStrings.Get(620);            break;          case SortMethod.Date:            strLine = GUILocalizeStrings.Get(621);            break;        }
Magic Number,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,OnRecord,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(616));
Magic Number,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,OnRecord,The following statement contains a magic number: i <= 615
Magic Number,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,OnRecord,The following statement contains a magic number: dlg.Add(GUILocalizeStrings.Get(990000));
Magic Number,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,OnRecord,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: //none              foreach (Schedule rec1 in listRecordings)              {                if (rec1.IsRecordingProgram(program' true))                {                  if (rec1.ScheduleType != (int)ScheduleRecordingType.Once)                  {                    //delete specific series                    Schedule sched = Schedule.Retrieve(rec1.IdSchedule);                    TVUtil.DeleteRecAndSchedWithPrompt(sched' program.IdChannel);                  }                  else                  {                    //cancel recording                                                        server.StopRecordingSchedule(rec1.IdSchedule);                    rec1.Delete();                    server.OnNewSchedule();                  }                }              }              listRecordings = Schedule.ListAll();              Update();              return;            case 1: //once              rec.ScheduleType = (int)ScheduleRecordingType.Once;              break;            case 2: //everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              break;            case 3: //everytime' all channels              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              break;            case 4: //weekly              rec.ScheduleType = (int)ScheduleRecordingType.Weekly;              break;            case 5: //daily              rec.ScheduleType = (int)ScheduleRecordingType.Daily;              break;            case 6: //WorkingDays              rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;              break;            case 7: //Weekends              rec.ScheduleType = (int)ScheduleRecordingType.Weekends;              break;            case 8://Weekly everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              break;          }
Magic Number,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,OnRecord,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: //none              foreach (Schedule rec1 in listRecordings)              {                if (rec1.IsRecordingProgram(program' true))                {                  if (rec1.ScheduleType != (int)ScheduleRecordingType.Once)                  {                    //delete specific series                    Schedule sched = Schedule.Retrieve(rec1.IdSchedule);                    TVUtil.DeleteRecAndSchedWithPrompt(sched' program.IdChannel);                  }                  else                  {                    //cancel recording                                                        server.StopRecordingSchedule(rec1.IdSchedule);                    rec1.Delete();                    server.OnNewSchedule();                  }                }              }              listRecordings = Schedule.ListAll();              Update();              return;            case 1: //once              rec.ScheduleType = (int)ScheduleRecordingType.Once;              break;            case 2: //everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              break;            case 3: //everytime' all channels              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              break;            case 4: //weekly              rec.ScheduleType = (int)ScheduleRecordingType.Weekly;              break;            case 5: //daily              rec.ScheduleType = (int)ScheduleRecordingType.Daily;              break;            case 6: //WorkingDays              rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;              break;            case 7: //Weekends              rec.ScheduleType = (int)ScheduleRecordingType.Weekends;              break;            case 8://Weekly everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              break;          }
Magic Number,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,OnRecord,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: //none              foreach (Schedule rec1 in listRecordings)              {                if (rec1.IsRecordingProgram(program' true))                {                  if (rec1.ScheduleType != (int)ScheduleRecordingType.Once)                  {                    //delete specific series                    Schedule sched = Schedule.Retrieve(rec1.IdSchedule);                    TVUtil.DeleteRecAndSchedWithPrompt(sched' program.IdChannel);                  }                  else                  {                    //cancel recording                                                        server.StopRecordingSchedule(rec1.IdSchedule);                    rec1.Delete();                    server.OnNewSchedule();                  }                }              }              listRecordings = Schedule.ListAll();              Update();              return;            case 1: //once              rec.ScheduleType = (int)ScheduleRecordingType.Once;              break;            case 2: //everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              break;            case 3: //everytime' all channels              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              break;            case 4: //weekly              rec.ScheduleType = (int)ScheduleRecordingType.Weekly;              break;            case 5: //daily              rec.ScheduleType = (int)ScheduleRecordingType.Daily;              break;            case 6: //WorkingDays              rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;              break;            case 7: //Weekends              rec.ScheduleType = (int)ScheduleRecordingType.Weekends;              break;            case 8://Weekly everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              break;          }
Magic Number,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,OnRecord,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: //none              foreach (Schedule rec1 in listRecordings)              {                if (rec1.IsRecordingProgram(program' true))                {                  if (rec1.ScheduleType != (int)ScheduleRecordingType.Once)                  {                    //delete specific series                    Schedule sched = Schedule.Retrieve(rec1.IdSchedule);                    TVUtil.DeleteRecAndSchedWithPrompt(sched' program.IdChannel);                  }                  else                  {                    //cancel recording                                                        server.StopRecordingSchedule(rec1.IdSchedule);                    rec1.Delete();                    server.OnNewSchedule();                  }                }              }              listRecordings = Schedule.ListAll();              Update();              return;            case 1: //once              rec.ScheduleType = (int)ScheduleRecordingType.Once;              break;            case 2: //everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              break;            case 3: //everytime' all channels              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              break;            case 4: //weekly              rec.ScheduleType = (int)ScheduleRecordingType.Weekly;              break;            case 5: //daily              rec.ScheduleType = (int)ScheduleRecordingType.Daily;              break;            case 6: //WorkingDays              rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;              break;            case 7: //Weekends              rec.ScheduleType = (int)ScheduleRecordingType.Weekends;              break;            case 8://Weekly everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              break;          }
Magic Number,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,OnRecord,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: //none              foreach (Schedule rec1 in listRecordings)              {                if (rec1.IsRecordingProgram(program' true))                {                  if (rec1.ScheduleType != (int)ScheduleRecordingType.Once)                  {                    //delete specific series                    Schedule sched = Schedule.Retrieve(rec1.IdSchedule);                    TVUtil.DeleteRecAndSchedWithPrompt(sched' program.IdChannel);                  }                  else                  {                    //cancel recording                                                        server.StopRecordingSchedule(rec1.IdSchedule);                    rec1.Delete();                    server.OnNewSchedule();                  }                }              }              listRecordings = Schedule.ListAll();              Update();              return;            case 1: //once              rec.ScheduleType = (int)ScheduleRecordingType.Once;              break;            case 2: //everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              break;            case 3: //everytime' all channels              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              break;            case 4: //weekly              rec.ScheduleType = (int)ScheduleRecordingType.Weekly;              break;            case 5: //daily              rec.ScheduleType = (int)ScheduleRecordingType.Daily;              break;            case 6: //WorkingDays              rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;              break;            case 7: //Weekends              rec.ScheduleType = (int)ScheduleRecordingType.Weekends;              break;            case 8://Weekly everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              break;          }
Magic Number,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,OnRecord,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: //none              foreach (Schedule rec1 in listRecordings)              {                if (rec1.IsRecordingProgram(program' true))                {                  if (rec1.ScheduleType != (int)ScheduleRecordingType.Once)                  {                    //delete specific series                    Schedule sched = Schedule.Retrieve(rec1.IdSchedule);                    TVUtil.DeleteRecAndSchedWithPrompt(sched' program.IdChannel);                  }                  else                  {                    //cancel recording                                                        server.StopRecordingSchedule(rec1.IdSchedule);                    rec1.Delete();                    server.OnNewSchedule();                  }                }              }              listRecordings = Schedule.ListAll();              Update();              return;            case 1: //once              rec.ScheduleType = (int)ScheduleRecordingType.Once;              break;            case 2: //everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              break;            case 3: //everytime' all channels              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              break;            case 4: //weekly              rec.ScheduleType = (int)ScheduleRecordingType.Weekly;              break;            case 5: //daily              rec.ScheduleType = (int)ScheduleRecordingType.Daily;              break;            case 6: //WorkingDays              rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;              break;            case 7: //Weekends              rec.ScheduleType = (int)ScheduleRecordingType.Weekends;              break;            case 8://Weekly everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              break;          }
Magic Number,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,OnRecord,The following statement contains a magic number: switch (dlg.SelectedLabel)          {            case 0: //none              foreach (Schedule rec1 in listRecordings)              {                if (rec1.IsRecordingProgram(program' true))                {                  if (rec1.ScheduleType != (int)ScheduleRecordingType.Once)                  {                    //delete specific series                    Schedule sched = Schedule.Retrieve(rec1.IdSchedule);                    TVUtil.DeleteRecAndSchedWithPrompt(sched' program.IdChannel);                  }                  else                  {                    //cancel recording                                                        server.StopRecordingSchedule(rec1.IdSchedule);                    rec1.Delete();                    server.OnNewSchedule();                  }                }              }              listRecordings = Schedule.ListAll();              Update();              return;            case 1: //once              rec.ScheduleType = (int)ScheduleRecordingType.Once;              break;            case 2: //everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              break;            case 3: //everytime' all channels              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              break;            case 4: //weekly              rec.ScheduleType = (int)ScheduleRecordingType.Weekly;              break;            case 5: //daily              rec.ScheduleType = (int)ScheduleRecordingType.Daily;              break;            case 6: //WorkingDays              rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;              break;            case 7: //Weekends              rec.ScheduleType = (int)ScheduleRecordingType.Weekends;              break;            case 8://Weekly everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              break;          }
Magic Number,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,UpdateButtonStates,The following statement contains a magic number: btnViewBy.Label = GUILocalizeStrings.Get(1521);
Magic Number,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,UpdateButtonStates,The following statement contains a magic number: btnViewBy.Label = GUILocalizeStrings.Get(1522);
Magic Number,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,UpdateButtonStates,The following statement contains a magic number: btnViewBy.Label = GUILocalizeStrings.Get(1521);
Magic Number,TvPlugin,TvRecordingSettings,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecordingSettings.cs,OnPageLoad,The following statement contains a magic number: spinPreRecord.SetRange(0' 30);
Magic Number,TvPlugin,TvRecordingSettings,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecordingSettings.cs,OnPageLoad,The following statement contains a magic number: spinPostRecord.SetRange(0' 30);
Magic Number,TvPlugin,TvSetup,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetup.cs,CheckTvServerConnection,The following statement contains a magic number: !CheckTcpPort(31456)
Magic Number,TvPlugin,TvSetup,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetup.cs,CheckDatabaseConnection,The following statement contains a magic number: !CheckTcpPort(1433)
Magic Number,TvPlugin,TvSetup,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetup.cs,CheckDatabaseConnection,The following statement contains a magic number: !CheckUdpPort(1434)
Magic Number,TvPlugin,TvSetup,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetup.cs,CheckTvServiceStatus,The following statement contains a magic number: ctrl.WaitForStatus(ServiceControllerStatus.Running' new TimeSpan(0' 0' 30));
Magic Number,TvPlugin,TvSetup,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetup.cs,OnClicked,The following statement contains a magic number: pDlgOK.SetHeading(GUILocalizeStrings.Get(605));
Magic Number,TvPlugin,TvSetup,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetup.cs,OnClicked,The following statement contains a magic number: pDlgOK.SetLine(1' GUILocalizeStrings.Get(200064));
Magic Number,TvPlugin,TvSetup,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetup.cs,OnClicked,The following statement contains a magic number: pDlgOK.SetLine(2' "");
Magic Number,TvPlugin,TvSetup,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetup.cs,OnClicked,The following statement contains a magic number: pDlgOK.SetLine(3' "");
Magic Number,TvPlugin,TvSetup,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetup.cs,OnClicked,The following statement contains a magic number: pDlgOK.SetHeading(GUILocalizeStrings.Get(200065));
Magic Number,TvPlugin,TvSetup,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetup.cs,OnClicked,The following statement contains a magic number: i < 4
Magic Number,TvPlugin,TvSetup,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetup.cs,OnClicked,The following statement contains a magic number: pDlgOK.SetHeading(GUILocalizeStrings.Get(605));
Magic Number,TvPlugin,TvSetup,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetup.cs,OnClicked,The following statement contains a magic number: pDlgOK.SetLine(1' GUILocalizeStrings.Get(200064));
Magic Number,TvPlugin,TvSetup,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetup.cs,OnClicked,The following statement contains a magic number: pDlgOK.SetLine(2' GUILocalizeStrings.Get(200067));
Magic Number,TvPlugin,TvSetup,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetup.cs,OnClicked,The following statement contains a magic number: pDlgOK.SetLine(2' GUILocalizeStrings.Get(200067));
Magic Number,TvPlugin,TvSetup,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetup.cs,OnClicked,The following statement contains a magic number: pDlgOK.SetLine(3' GUILocalizeStrings.Get(200069));
Magic Number,TvPlugin,TvSetup,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetup.cs,OnClicked,The following statement contains a magic number: pDlgOK.SetLine(3' GUILocalizeStrings.Get(200069));
Magic Number,TvPlugin,TvSetupAudioLanguageForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupAudioLanguageForm.cs,InitializeComponent,The following statement contains a magic number: this.mpListViewLanguages.Location = new System.Drawing.Point(25' 12);
Magic Number,TvPlugin,TvSetupAudioLanguageForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupAudioLanguageForm.cs,InitializeComponent,The following statement contains a magic number: this.mpListViewLanguages.Location = new System.Drawing.Point(25' 12);
Magic Number,TvPlugin,TvSetupAudioLanguageForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupAudioLanguageForm.cs,InitializeComponent,The following statement contains a magic number: this.mpListViewLanguages.Size = new System.Drawing.Size(208' 347);
Magic Number,TvPlugin,TvSetupAudioLanguageForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupAudioLanguageForm.cs,InitializeComponent,The following statement contains a magic number: this.mpListViewLanguages.Size = new System.Drawing.Size(208' 347);
Magic Number,TvPlugin,TvSetupAudioLanguageForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupAudioLanguageForm.cs,InitializeComponent,The following statement contains a magic number: this.mpListViewLanguages.TabIndex = 4;
Magic Number,TvPlugin,TvSetupAudioLanguageForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupAudioLanguageForm.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader2.Width = 180;
Magic Number,TvPlugin,TvSetupAudioLanguageForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupAudioLanguageForm.cs,InitializeComponent,The following statement contains a magic number: this.mpButtonCancel.Location = new System.Drawing.Point(158' 376);
Magic Number,TvPlugin,TvSetupAudioLanguageForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupAudioLanguageForm.cs,InitializeComponent,The following statement contains a magic number: this.mpButtonCancel.Location = new System.Drawing.Point(158' 376);
Magic Number,TvPlugin,TvSetupAudioLanguageForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupAudioLanguageForm.cs,InitializeComponent,The following statement contains a magic number: this.mpButtonCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,TvPlugin,TvSetupAudioLanguageForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupAudioLanguageForm.cs,InitializeComponent,The following statement contains a magic number: this.mpButtonCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,TvPlugin,TvSetupAudioLanguageForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupAudioLanguageForm.cs,InitializeComponent,The following statement contains a magic number: this.mpButtonCancel.TabIndex = 9;
Magic Number,TvPlugin,TvSetupAudioLanguageForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupAudioLanguageForm.cs,InitializeComponent,The following statement contains a magic number: this.mpButtonOk.Location = new System.Drawing.Point(28' 376);
Magic Number,TvPlugin,TvSetupAudioLanguageForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupAudioLanguageForm.cs,InitializeComponent,The following statement contains a magic number: this.mpButtonOk.Location = new System.Drawing.Point(28' 376);
Magic Number,TvPlugin,TvSetupAudioLanguageForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupAudioLanguageForm.cs,InitializeComponent,The following statement contains a magic number: this.mpButtonOk.Size = new System.Drawing.Size(75' 23);
Magic Number,TvPlugin,TvSetupAudioLanguageForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupAudioLanguageForm.cs,InitializeComponent,The following statement contains a magic number: this.mpButtonOk.Size = new System.Drawing.Size(75' 23);
Magic Number,TvPlugin,TvSetupAudioLanguageForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupAudioLanguageForm.cs,InitializeComponent,The following statement contains a magic number: this.mpButtonOk.TabIndex = 8;
Magic Number,TvPlugin,TvSetupAudioLanguageForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupAudioLanguageForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TvPlugin,TvSetupAudioLanguageForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupAudioLanguageForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TvPlugin,TvSetupAudioLanguageForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupAudioLanguageForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(259' 416);
Magic Number,TvPlugin,TvSetupAudioLanguageForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupAudioLanguageForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(259' 416);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox1.Location = new System.Drawing.Point(15' 81);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox1.Location = new System.Drawing.Point(15' 81);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox1.Size = new System.Drawing.Size(290' 96);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox1.Size = new System.Drawing.Size(290' 96);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox1.TabIndex = 4;
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpButtonSelectLanguages.Location = new System.Drawing.Point(261' 20);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpButtonSelectLanguages.Location = new System.Drawing.Point(261' 20);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpButtonSelectLanguages.Size = new System.Drawing.Size(24' 23);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpButtonSelectLanguages.Size = new System.Drawing.Size(24' 23);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpButtonSelectLanguages.TabIndex = 9;
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpTextBoxPreferredLanguages.Location = new System.Drawing.Point(124' 22);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpTextBoxPreferredLanguages.Location = new System.Drawing.Point(124' 22);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpTextBoxPreferredLanguages.Size = new System.Drawing.Size(133' 20);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpTextBoxPreferredLanguages.Size = new System.Drawing.Size(133' 20);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpTextBoxPreferredLanguages.TabIndex = 8;
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxPrefAC3.Location = new System.Drawing.Point(124' 64);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxPrefAC3.Location = new System.Drawing.Point(124' 64);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxPrefAC3.Size = new System.Drawing.Size(13' 12);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxPrefAC3.Size = new System.Drawing.Size(13' 12);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxPrefAC3.TabIndex = 7;
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel2.Location = new System.Drawing.Point(17' 64);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel2.Location = new System.Drawing.Point(17' 64);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel2.Size = new System.Drawing.Size(61' 13);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel2.Size = new System.Drawing.Size(61' 13);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel2.TabIndex = 6;
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel1.Location = new System.Drawing.Point(17' 29);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel1.Location = new System.Drawing.Point(17' 29);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel1.Size = new System.Drawing.Size(105' 13);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel1.Size = new System.Drawing.Size(105' 13);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel1.TabIndex = 4;
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox2.Location = new System.Drawing.Point(13' 12);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox2.Location = new System.Drawing.Point(13' 12);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox2.Size = new System.Drawing.Size(292' 63);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox2.Size = new System.Drawing.Size(292' 63);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox2.TabIndex = 5;
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpTextBoxHostname.Location = new System.Drawing.Point(126' 25);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpTextBoxHostname.Location = new System.Drawing.Point(126' 25);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpTextBoxHostname.Size = new System.Drawing.Size(161' 20);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpTextBoxHostname.Size = new System.Drawing.Size(161' 20);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpTextBoxHostname.TabIndex = 6;
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel3.Location = new System.Drawing.Point(19' 25);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel3.Location = new System.Drawing.Point(19' 25);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel3.Size = new System.Drawing.Size(58' 13);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel3.Size = new System.Drawing.Size(58' 13);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel3.TabIndex = 5;
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpButtonOk.Location = new System.Drawing.Point(32' 323);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpButtonOk.Location = new System.Drawing.Point(32' 323);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpButtonOk.Size = new System.Drawing.Size(75' 23);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpButtonOk.Size = new System.Drawing.Size(75' 23);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpButtonOk.TabIndex = 6;
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpButtonCancel.Location = new System.Drawing.Point(173' 323);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpButtonCancel.Location = new System.Drawing.Point(173' 323);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpButtonCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpButtonCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpButtonCancel.TabIndex = 7;
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox3.Location = new System.Drawing.Point(13' 183);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox3.Location = new System.Drawing.Point(13' 183);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox3.Size = new System.Drawing.Size(290' 125);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox3.Size = new System.Drawing.Size(290' 125);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox3.TabIndex = 8;
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxPrefRebuildGraphAudioChanged.Location = new System.Drawing.Point(263' 59);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxPrefRebuildGraphAudioChanged.Location = new System.Drawing.Point(263' 59);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxPrefRebuildGraphAudioChanged.Size = new System.Drawing.Size(13' 12);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxPrefRebuildGraphAudioChanged.Size = new System.Drawing.Size(13' 12);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxPrefRebuildGraphAudioChanged.TabIndex = 9;
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxavoidSeekingonChannelChange.Location = new System.Drawing.Point(263' 90);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxavoidSeekingonChannelChange.Location = new System.Drawing.Point(263' 90);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxavoidSeekingonChannelChange.Size = new System.Drawing.Size(15' 14);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxavoidSeekingonChannelChange.Size = new System.Drawing.Size(15' 14);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxavoidSeekingonChannelChange.TabIndex = 11;
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel6.Location = new System.Drawing.Point(16' 90);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel6.Location = new System.Drawing.Point(16' 90);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel6.Size = new System.Drawing.Size(217' 13);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel6.Size = new System.Drawing.Size(217' 13);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel6.TabIndex = 10;
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel5.Location = new System.Drawing.Point(16' 59);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel5.Location = new System.Drawing.Point(16' 59);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel5.Size = new System.Drawing.Size(204' 13);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel5.Size = new System.Drawing.Size(204' 13);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel5.TabIndex = 8;
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxPrefRebuildGraphVideoChanged.Location = new System.Drawing.Point(263' 24);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxPrefRebuildGraphVideoChanged.Location = new System.Drawing.Point(263' 24);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxPrefRebuildGraphVideoChanged.Size = new System.Drawing.Size(13' 12);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxPrefRebuildGraphVideoChanged.Size = new System.Drawing.Size(13' 12);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpCheckBoxPrefRebuildGraphVideoChanged.TabIndex = 7;
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel4.Location = new System.Drawing.Point(17' 24);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel4.Location = new System.Drawing.Point(17' 24);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel4.Size = new System.Drawing.Size(204' 13);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel4.Size = new System.Drawing.Size(204' 13);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpLabel4.TabIndex = 6;
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.toolTipChannelChangeVideoChanged.AutoPopDelay = 20000;
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.toolTipChannelChangeVideoChanged.InitialDelay = 500;
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.toolTipChannelChangeVideoChanged.ReshowDelay = 100;
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.toolTipChannelChangeAudioChanged.AutoPopDelay = 20000;
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.toolTipChannelChangeAudioChanged.InitialDelay = 500;
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.toolTipChannelChangeAudioChanged.ReshowDelay = 100;
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(27' 349);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(27' 349);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(262' 13);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(262' 13);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 9;
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(317' 369);
Magic Number,TvPlugin,TvSetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetupForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(317' 369);
Magic Number,TvPlugin,TvTimeShiftPositionWatcher,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvTimeShiftPositionWatcher.cs,_timer_Tick,The following statement contains a magic number: secondsElapsed == 60
Magic Number,TvPlugin,TvTimeShiftPositionWatcher,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvTimeShiftPositionWatcher.cs,StartTimer,The following statement contains a magic number: _timer.Interval = 1000;
Magic Number,TvPlugin,TVTuningDetails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVTuningDetails.cs,OnPageLoad,The following statement contains a magic number: switch (TVHome.Card.Type)            {              case TvLibrary.Interfaces.CardType.Analog:                foreach (TuningDetail t in details)                {                  if (t.ChannelType == 0)                    detail = t;                }                break;              case TvLibrary.Interfaces.CardType.Atsc:                foreach (TuningDetail t in details)                {                  if (t.ChannelType == 1)                    detail = t;                }                break;              case TvLibrary.Interfaces.CardType.DvbC:                foreach (TuningDetail t in details)                {                  if (t.ChannelType == 2)                    detail = t;                }                break;              case TvLibrary.Interfaces.CardType.DvbS:                foreach (TuningDetail t in details)                {                  if (t.ChannelType == 3)                    detail = t;                }                break;              case TvLibrary.Interfaces.CardType.DvbT:                foreach (TuningDetail t in details)                {                  if (t.ChannelType == 4)                    detail = t;                }                break;              default:                detail = details[0];                break;            }
Magic Number,TvPlugin,TVTuningDetails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVTuningDetails.cs,OnPageLoad,The following statement contains a magic number: switch (TVHome.Card.Type)            {              case TvLibrary.Interfaces.CardType.Analog:                foreach (TuningDetail t in details)                {                  if (t.ChannelType == 0)                    detail = t;                }                break;              case TvLibrary.Interfaces.CardType.Atsc:                foreach (TuningDetail t in details)                {                  if (t.ChannelType == 1)                    detail = t;                }                break;              case TvLibrary.Interfaces.CardType.DvbC:                foreach (TuningDetail t in details)                {                  if (t.ChannelType == 2)                    detail = t;                }                break;              case TvLibrary.Interfaces.CardType.DvbS:                foreach (TuningDetail t in details)                {                  if (t.ChannelType == 3)                    detail = t;                }                break;              case TvLibrary.Interfaces.CardType.DvbT:                foreach (TuningDetail t in details)                {                  if (t.ChannelType == 4)                    detail = t;                }                break;              default:                detail = details[0];                break;            }
Magic Number,TvPlugin,TVTuningDetails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVTuningDetails.cs,OnPageLoad,The following statement contains a magic number: switch (TVHome.Card.Type)            {              case TvLibrary.Interfaces.CardType.Analog:                foreach (TuningDetail t in details)                {                  if (t.ChannelType == 0)                    detail = t;                }                break;              case TvLibrary.Interfaces.CardType.Atsc:                foreach (TuningDetail t in details)                {                  if (t.ChannelType == 1)                    detail = t;                }                break;              case TvLibrary.Interfaces.CardType.DvbC:                foreach (TuningDetail t in details)                {                  if (t.ChannelType == 2)                    detail = t;                }                break;              case TvLibrary.Interfaces.CardType.DvbS:                foreach (TuningDetail t in details)                {                  if (t.ChannelType == 3)                    detail = t;                }                break;              case TvLibrary.Interfaces.CardType.DvbT:                foreach (TuningDetail t in details)                {                  if (t.ChannelType == 4)                    detail = t;                }                break;              default:                detail = details[0];                break;            }
Magic Number,TvPlugin,TVTuningDetails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVTuningDetails.cs,OnPageLoad,The following statement contains a magic number: switch (detail.ChannelType)              {                case 0:                  GUIPropertyManager.SetProperty("#TV.TuningDetails.ChannelType"' "Analog");                  break;                case 1:                  GUIPropertyManager.SetProperty("#TV.TuningDetails.ChannelType"' "Atsc");                  break;                case 2:                  GUIPropertyManager.SetProperty("#TV.TuningDetails.ChannelType"' "DVB-C");                  break;                case 3:                  GUIPropertyManager.SetProperty("#TV.TuningDetails.ChannelType"' "DVB-S");                  break;                case 4:                  GUIPropertyManager.SetProperty("#TV.TuningDetails.ChannelType"' "DVB-T");                  break;              }
Magic Number,TvPlugin,TVTuningDetails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVTuningDetails.cs,OnPageLoad,The following statement contains a magic number: switch (detail.ChannelType)              {                case 0:                  GUIPropertyManager.SetProperty("#TV.TuningDetails.ChannelType"' "Analog");                  break;                case 1:                  GUIPropertyManager.SetProperty("#TV.TuningDetails.ChannelType"' "Atsc");                  break;                case 2:                  GUIPropertyManager.SetProperty("#TV.TuningDetails.ChannelType"' "DVB-C");                  break;                case 3:                  GUIPropertyManager.SetProperty("#TV.TuningDetails.ChannelType"' "DVB-S");                  break;                case 4:                  GUIPropertyManager.SetProperty("#TV.TuningDetails.ChannelType"' "DVB-T");                  break;              }
Magic Number,TvPlugin,TVTuningDetails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVTuningDetails.cs,OnPageLoad,The following statement contains a magic number: switch (detail.ChannelType)              {                case 0:                  GUIPropertyManager.SetProperty("#TV.TuningDetails.ChannelType"' "Analog");                  break;                case 1:                  GUIPropertyManager.SetProperty("#TV.TuningDetails.ChannelType"' "Atsc");                  break;                case 2:                  GUIPropertyManager.SetProperty("#TV.TuningDetails.ChannelType"' "DVB-C");                  break;                case 3:                  GUIPropertyManager.SetProperty("#TV.TuningDetails.ChannelType"' "DVB-S");                  break;                case 4:                  GUIPropertyManager.SetProperty("#TV.TuningDetails.ChannelType"' "DVB-T");                  break;              }
Magic Number,TvPlugin,TVTuningDetails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVTuningDetails.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#Play.Current.TSBitRate"'                ((float)MediaPortal.Player.g_Player.GetVideoFormat().bitrate / 1024 / 1024).ToString("0.00"' CultureInfo.InvariantCulture));
Magic Number,TvPlugin,TVTuningDetails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVTuningDetails.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#Play.Current.TSBitRate"'                ((float)MediaPortal.Player.g_Player.GetVideoFormat().bitrate / 1024 / 1024).ToString("0.00"' CultureInfo.InvariantCulture));
Magic Number,TvPlugin,TVTuningDetails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVTuningDetails.cs,Process,The following statement contains a magic number: ts.TotalMilliseconds < 500
Magic Number,TvPlugin,TVTuningDetails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVTuningDetails.cs,Process,The following statement contains a magic number: GUIPropertyManager.SetProperty("#Play.Current.TSBitRate"'         ((float)MediaPortal.Player.g_Player.GetVideoFormat().bitrate / 1024 / 1024).ToString("0.00"' CultureInfo.InvariantCulture));
Magic Number,TvPlugin,TVTuningDetails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVTuningDetails.cs,Process,The following statement contains a magic number: GUIPropertyManager.SetProperty("#Play.Current.TSBitRate"'         ((float)MediaPortal.Player.g_Player.GetVideoFormat().bitrate / 1024 / 1024).ToString("0.00"' CultureInfo.InvariantCulture));
Magic Number,TvPlugin,TVUtil,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVUtil.cs,TVUtil,The following statement contains a magic number: _days = 15;
Magic Number,TvPlugin,TVUtil,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVUtil.cs,GetEpisodeInfo,The following statement contains a magic number: bool hasSeriesNum = !(String.IsNullOrEmpty(seriesNum)) && (ShowEpisodeInfo == 1 || ShowEpisodeInfo == 3);
Magic Number,TvPlugin,TVUtil,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVUtil.cs,GetEpisodeInfo,The following statement contains a magic number: bool hasEpisodeNum = !(String.IsNullOrEmpty(episodeNum)) && (ShowEpisodeInfo == 1 || ShowEpisodeInfo == 3);
Magic Number,TvPlugin,TVUtil,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVUtil.cs,GetEpisodeInfo,The following statement contains a magic number: bool hasEpisodePart = !(String.IsNullOrEmpty(episodePart)) && (ShowEpisodeInfo == 1 || ShowEpisodeInfo == 3);
Magic Number,TvPlugin,TVUtil,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVUtil.cs,GetEpisodeInfo,The following statement contains a magic number: bool hasEpisodeName = !(String.IsNullOrEmpty(episodeName)) && (ShowEpisodeInfo == 2 || ShowEpisodeInfo == 3);
Magic Number,TvPlugin,TVUtil,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVUtil.cs,GetEpisodeInfo,The following statement contains a magic number: bool hasEpisodeName = !(String.IsNullOrEmpty(episodeName)) && (ShowEpisodeInfo == 2 || ShowEpisodeInfo == 3);
Magic Number,TvPlugin,TVUtil,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVUtil.cs,GetEpisodeInfo,The following statement contains a magic number: ShowEpisodeInfo == 1 || ShowEpisodeInfo == 3
Magic Number,TvPlugin,TvZapOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVZapOSD.cs,OnPageDestroy,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(100000 + newWindowId));
Magic Number,TvPlugin,TvZapOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVZapOSD.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(100000 + GetID));
Magic Number,TvPlugin,TvZapOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVZapOSD.cs,ResetAllControls,The following statement contains a magic number: dwPosY < (int)100
Magic Number,TvPlugin,TvZapOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVZapOSD.cs,UpdateProgressBar,The following statement contains a magic number: fPercent *= 100.0d;
Magic Number,TvPlugin,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\WakeOnLanManager.cs,SendArpRequest,The following statement contains a magic number: byte[] hwAddr = new byte[6];
Magic Number,TvPlugin,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\WakeOnLanManager.cs,GetWakeOnLanMagicPacket,The following statement contains a magic number: hwAddress.Length != 6
Magic Number,TvPlugin,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\WakeOnLanManager.cs,GetWakeOnLanMagicPacket,The following statement contains a magic number: byte[] packet = new byte[102];
Magic Number,TvPlugin,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\WakeOnLanManager.cs,GetWakeOnLanMagicPacket,The following statement contains a magic number: i < 6
Magic Number,TvPlugin,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\WakeOnLanManager.cs,GetWakeOnLanMagicPacket,The following statement contains a magic number: packet[i * 6 + x] = hwAddress[x];
Magic Number,TvPlugin,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\WakeOnLanManager.cs,GetWakeOnLanMagicPacket,The following statement contains a magic number: x < 6
Magic Number,TvPlugin,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\WakeOnLanManager.cs,GetWakeOnLanMagicPacket,The following statement contains a magic number: i < 17
Magic Number,TvPlugin,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\WakeOnLanManager.cs,SendMagicPacket,The following statement contains a magic number: client.Connect(address' 1234);
Magic Number,TvPlugin,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\WakeOnLanManager.cs,IsValidEthernetAddress,The following statement contains a magic number: hwAddress.Length != 6
Magic Number,TvPlugin,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\WakeOnLanManager.cs,WakeupSystem,The following statement contains a magic number: Ping(wakeupTarget' 1000)
Magic Number,TvPlugin,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\WakeOnLanManager.cs,WakeupSystem,The following statement contains a magic number: Log.Debug("WOLMgr: Sending the wake-on-lan packet failed (local network maybe not ready)! {0}s"' (waited / 1000));
Magic Number,TvPlugin,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\WakeOnLanManager.cs,WakeupSystem,The following statement contains a magic number: Log.Debug("WOLMgr: System {0} still not reachable' waiting... {1}s"' wakeupTarget' (waited / 1000));
Magic Number,TvPlugin,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\WakeOnLanManager.cs,WakeupSystem,The following statement contains a magic number: System.Threading.Thread.Sleep(1000);
Magic Number,TvPlugin,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\WakeOnLanManager.cs,WakeupSystem,The following statement contains a magic number: waited += 1000;
Magic Number,TvPlugin,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\WakeOnLanManager.cs,WakeupSystem,The following statement contains a magic number: waited < timeout * 1000
Magic Number,TvPlugin,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\WakeOnLanManager.cs,GetHwAddrBytes,The following statement contains a magic number: byte[] addrn = new byte[6];
Magic Number,TvPlugin,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\WakeOnLanManager.cs,GetHwAddrBytes,The following statement contains a magic number: addr.Length != 6
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\Hamming.cs,GetPacketNumber,The following statement contains a magic number: int packetNumber = (magazine >> 3) + (rowAddress << 1);
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\Hamming.cs,GetPageNumber,The following statement contains a magic number: magazine = 8;
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\Hamming.cs,GetSubPageNumber,The following statement contains a magic number: int subPageNumber = ((Decode[rowData[offset + SUBPAGENUMBER_BYTE4_OFFSET]] & 3) << 12) + //3                            (Decode[rowData[offset + SUBPAGENUMBER_BYTE3_OFFSET]] << 8) + //f                            ((Decode[rowData[offset + SUBPAGENUMBER_BYTE2_OFFSET]] & 7) << 4) + //7                            (Decode[rowData[offset + SUBPAGENUMBER_BYTE1_OFFSET]] & 0xf);
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\Hamming.cs,GetSubPageNumber,The following statement contains a magic number: int subPageNumber = ((Decode[rowData[offset + SUBPAGENUMBER_BYTE4_OFFSET]] & 3) << 12) + //3                            (Decode[rowData[offset + SUBPAGENUMBER_BYTE3_OFFSET]] << 8) + //f                            ((Decode[rowData[offset + SUBPAGENUMBER_BYTE2_OFFSET]] & 7) << 4) + //7                            (Decode[rowData[offset + SUBPAGENUMBER_BYTE1_OFFSET]] & 0xf);
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\Hamming.cs,GetSubPageNumber,The following statement contains a magic number: int subPageNumber = ((Decode[rowData[offset + SUBPAGENUMBER_BYTE4_OFFSET]] & 3) << 12) + //3                            (Decode[rowData[offset + SUBPAGENUMBER_BYTE3_OFFSET]] << 8) + //f                            ((Decode[rowData[offset + SUBPAGENUMBER_BYTE2_OFFSET]] & 7) << 4) + //7                            (Decode[rowData[offset + SUBPAGENUMBER_BYTE1_OFFSET]] & 0xf);
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\Hamming.cs,GetSubPageNumber,The following statement contains a magic number: int subPageNumber = ((Decode[rowData[offset + SUBPAGENUMBER_BYTE4_OFFSET]] & 3) << 12) + //3                            (Decode[rowData[offset + SUBPAGENUMBER_BYTE3_OFFSET]] << 8) + //f                            ((Decode[rowData[offset + SUBPAGENUMBER_BYTE2_OFFSET]] & 7) << 4) + //7                            (Decode[rowData[offset + SUBPAGENUMBER_BYTE1_OFFSET]] & 0xf);
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\Hamming.cs,GetSubPageNumber,The following statement contains a magic number: int subPageNumber = ((Decode[rowData[offset + SUBPAGENUMBER_BYTE4_OFFSET]] & 3) << 12) + //3                            (Decode[rowData[offset + SUBPAGENUMBER_BYTE3_OFFSET]] << 8) + //f                            ((Decode[rowData[offset + SUBPAGENUMBER_BYTE2_OFFSET]] & 7) << 4) + //7                            (Decode[rowData[offset + SUBPAGENUMBER_BYTE1_OFFSET]] & 0xf);
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\Hamming.cs,SetSubPageNumber,The following statement contains a magic number: hexSubPageNr >>= 4;
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\Hamming.cs,SetSubPageNumber,The following statement contains a magic number: hexSubPageNr >>= 4;
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\Hamming.cs,SetSubPageNumber,The following statement contains a magic number: hexSubPageNr >>= 4;
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\Hamming.cs,SetHeader,The following statement contains a magic number: int magazine = (pagenr / 256) & 0x7;
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\Hamming.cs,SetHeader,The following statement contains a magic number: int pageTens = ((pagenr - (magazine * 256)) / 16) & 0xf;
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\Hamming.cs,SetHeader,The following statement contains a magic number: int pageTens = ((pagenr - (magazine * 256)) / 16) & 0xf;
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\Hamming.cs,SetHeader,The following statement contains a magic number: int pageUnits = (pagenr - (magazine * 256) - (pageTens * 16)) & 0xf;
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\Hamming.cs,SetHeader,The following statement contains a magic number: int pageUnits = (pagenr - (magazine * 256) - (pageTens * 16)) & 0xf;
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\Hamming.cs,SetHeader,The following statement contains a magic number: magazine == 8
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\Hamming.cs,SetHeader,The following statement contains a magic number: byData[offset + 8] = Encode[0];
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\Hamming.cs,SetHeader,The following statement contains a magic number: byData[offset + 9] = Encode[0];
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\Hamming.cs,SetHeader,The following statement contains a magic number: magazine = 8;
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\Hamming.cs,SetHeader,The following statement contains a magic number: byData[10] = (byte)('0' + magazine);
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\Hamming.cs,SetHeader,The following statement contains a magic number: byData[11] = (byte)('A' + (pageTens - 10));
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\Hamming.cs,SetHeader,The following statement contains a magic number: byData[11] = (byte)('A' + (pageTens - 10));
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\Hamming.cs,SetHeader,The following statement contains a magic number: pageTens > 9
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\Hamming.cs,SetHeader,The following statement contains a magic number: byData[12] = (byte)('A' + (pageUnits - 10));
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\Hamming.cs,SetHeader,The following statement contains a magic number: byData[12] = (byte)('A' + (pageUnits - 10));
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\Hamming.cs,SetHeader,The following statement contains a magic number: pageUnits > 9
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\Hamming.cs,SetHeader,The following statement contains a magic number: x < 42
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\Hamming.cs,SetPacketNumber,The following statement contains a magic number: iMagazine == 8
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\Hamming.cs,SetPacketNumber,The following statement contains a magic number: byData[offset + 0] = (packetNumber % 2) == 0 ? Encode[iMagazine] : Encode[iMagazine + 8];
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\Hamming.cs,SetPacketNumber,The following statement contains a magic number: byData[offset + 0] = (packetNumber % 2) == 0 ? Encode[iMagazine] : Encode[iMagazine + 8];
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\Hamming.cs,SetPacketNumber,The following statement contains a magic number: byData[offset + 1] = Encode[packetNumber / 2];
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: int[] mosaicY = new int[4];
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: mosaicY[1] = (h + 1) / 3;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: mosaicY[2] = (h * 2 + 1) / 3;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: mosaicY[2] = (h * 2 + 1) / 3;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: mosaicY[2] = (h * 2 + 1) / 3;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: mosaicY[3] = h;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: int bColor = (attrib >> 4) & 0x0F;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: int w1 = w / 2;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: graph.FillRectangle(foreBrush' x + 1' y + mosaicY[y1] + 1' w1 - 2' mosaicY[y1 + 1] - mosaicY[y1] - 2);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: graph.FillRectangle(foreBrush' x + 1' y + mosaicY[y1] + 1' w1 - 2' mosaicY[y1 + 1] - mosaicY[y1] - 2);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: graph.FillRectangle(foreBrush' x + w1 + 1' y + mosaicY[y1] + 1' w2 - 2'                                      mosaicY[y1 + 1] - mosaicY[y1] - 2);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: graph.FillRectangle(foreBrush' x + w1 + 1' y + mosaicY[y1] + 1' w2 - 2'                                      mosaicY[y1 + 1] - mosaicY[y1] - 2);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: (chr & 2) > 0
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: chr >>= 2;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: y1 < 3
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: int factor = (attrib & 1 << 10) > 0 ? 2 : 1;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: int factor = (attrib & 1 << 10) > 0 ? 2 : 1;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)              {                graph.FillRectangle(backBrush' x' y + h' w' h);              }              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              }              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              }              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)              {                graph.FillRectangle(backBrush' x' y + h' w' h);              }              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              }              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              }              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)              {                graph.FillRectangle(backBrush' x' y + h' w' h);              }              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              }              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              }              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)              {                graph.FillRectangle(backBrush' x' y + h' w' h);              }              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              }              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              }              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)              {                graph.FillRectangle(backBrush' x' y + h' w' h);              }              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              }              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              }              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)              {                graph.FillRectangle(backBrush' x' y + h' w' h);              }              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              }              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              }              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)              {                graph.FillRectangle(backBrush' x' y + h' w' h);              }              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              }              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              }              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)              {                graph.FillRectangle(backBrush' x' y + h' w' h);              }              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              }              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              }              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)              {                graph.FillRectangle(backBrush' x' y + h' w' h);              }              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              }              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              }              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)              {                graph.FillRectangle(backBrush' x' y + h' w' h);              }              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              }              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              }              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)              {                graph.FillRectangle(backBrush' x' y + h' w' h);              }              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              }              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              }              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)              {                graph.FillRectangle(backBrush' x' y + h' w' h);              }              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              }              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              }              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)              {                graph.FillRectangle(backBrush' x' y + h' w' h);              }              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              }              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              }              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)              {                graph.FillRectangle(backBrush' x' y + h' w' h);              }              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              }              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              }              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)              {                graph.FillRectangle(backBrush' x' y + h' w' h);              }              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              }              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              }              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)              {                graph.FillRectangle(backBrush' x' y + h' w' h);              }              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              }              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              }              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)              {                graph.FillRectangle(backBrush' x' y + h' w' h);              }              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              }              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              }              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)              {                graph.FillRectangle(backBrush' x' y + h' w' h);              }              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              }              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)              {                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              }              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: PointF xyPos = new PointF((float)x + ((w - ((int)width.Width)) / 2)' y);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: pageBitmap.SetPixel(x + xpos' y + (ypos * 2)' pixelColor[xpos' ypos]);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: pageBitmap.SetPixel(x + xpos' y + (ypos * 2) + 1' pixelColor[xpos' ypos]);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: y + (ypos * 2) + 1 < pageBitmap.Height
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,Render,The following statement contains a magic number: factor == 2
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,GetColor,The following statement contains a magic number: switch (colorNumber)        {          case (int)TextColors.Black:            return Color.Black;          case (int)TextColors.Red:            return Color.Red;          case (int)TextColors.Green:            return Color.FromArgb(0' 255' 0);          case (int)TextColors.Yellow:            return Color.Yellow;          case (int)TextColors.Blue:            return Color.Blue;          case (int)TextColors.Magenta:            return Color.Magenta;          case (int)TextColors.White:            return Color.White;          case (int)TextColors.Cyan:            return Color.Cyan;          case (int)TextColors.Trans1:            return Transparent;          case (int)TextColors.Trans2:            return Transparent;        }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,IsDecimalPage,The following statement contains a magic number: return ((i & 0x00F) <= 9) && ((i & 0x0F0) <= 0x90);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: byte[] pageChars = new byte[31 * 40];
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: byte[] pageChars = new byte[31 * 40];
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: int[] pageAttribs = new int[31 * 40];
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: int[] pageAttribs = new int[31 * 40];
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: rowNr * 42 >= byPage.Length
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: int packetNumber = Hamming.GetPacketNumber(rowNr * 42' ref byPage);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: packetNumber < 0 || packetNumber > 25
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: packetNumber == 25 || packetNumber == 0
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: col >= 10 && packetNumber == 0
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: byte kar = byPage[rowNr * 42 + col];
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: pageChars[packetNumber * 40 + col - 2] = kar;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: pageChars[packetNumber * 40 + col - 2] = kar;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: col < 42
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: packetNumber == 24
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: byte byte1 = Hamming.Decode[byPage[9]];
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: switch (languageCode)        {          case 0:            txtLanguage = 1;            break;          case 1:            txtLanguage = 4;            break;          case 2:            txtLanguage = _isRegionalDKorNO ? 13 : 11;            break;          case 3:            txtLanguage = 5;            break;          case 4:            txtLanguage = 3;            break;          case 5:            txtLanguage = 8;            break;          case 6:            txtLanguage = 0;            break;          default:            txtLanguage = 1;            break;        }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: switch (languageCode)        {          case 0:            txtLanguage = 1;            break;          case 1:            txtLanguage = 4;            break;          case 2:            txtLanguage = _isRegionalDKorNO ? 13 : 11;            break;          case 3:            txtLanguage = 5;            break;          case 4:            txtLanguage = 3;            break;          case 5:            txtLanguage = 8;            break;          case 6:            txtLanguage = 0;            break;          default:            txtLanguage = 1;            break;        }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: switch (languageCode)        {          case 0:            txtLanguage = 1;            break;          case 1:            txtLanguage = 4;            break;          case 2:            txtLanguage = _isRegionalDKorNO ? 13 : 11;            break;          case 3:            txtLanguage = 5;            break;          case 4:            txtLanguage = 3;            break;          case 5:            txtLanguage = 8;            break;          case 6:            txtLanguage = 0;            break;          default:            txtLanguage = 1;            break;        }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: switch (languageCode)        {          case 0:            txtLanguage = 1;            break;          case 1:            txtLanguage = 4;            break;          case 2:            txtLanguage = _isRegionalDKorNO ? 13 : 11;            break;          case 3:            txtLanguage = 5;            break;          case 4:            txtLanguage = 3;            break;          case 5:            txtLanguage = 8;            break;          case 6:            txtLanguage = 0;            break;          default:            txtLanguage = 1;            break;        }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: switch (languageCode)        {          case 0:            txtLanguage = 1;            break;          case 1:            txtLanguage = 4;            break;          case 2:            txtLanguage = _isRegionalDKorNO ? 13 : 11;            break;          case 3:            txtLanguage = 5;            break;          case 4:            txtLanguage = 3;            break;          case 5:            txtLanguage = 8;            break;          case 6:            txtLanguage = 0;            break;          default:            txtLanguage = 1;            break;        }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: switch (languageCode)        {          case 0:            txtLanguage = 1;            break;          case 1:            txtLanguage = 4;            break;          case 2:            txtLanguage = _isRegionalDKorNO ? 13 : 11;            break;          case 3:            txtLanguage = 5;            break;          case 4:            txtLanguage = 3;            break;          case 5:            txtLanguage = 8;            break;          case 6:            txtLanguage = 0;            break;          default:            txtLanguage = 1;            break;        }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: switch (languageCode)        {          case 0:            txtLanguage = 1;            break;          case 1:            txtLanguage = 4;            break;          case 2:            txtLanguage = _isRegionalDKorNO ? 13 : 11;            break;          case 3:            txtLanguage = 5;            break;          case 4:            txtLanguage = 3;            break;          case 5:            txtLanguage = 8;            break;          case 6:            txtLanguage = 0;            break;          default:            txtLanguage = 1;            break;        }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: switch (languageCode)        {          case 0:            txtLanguage = 1;            break;          case 1:            txtLanguage = 4;            break;          case 2:            txtLanguage = _isRegionalDKorNO ? 13 : 11;            break;          case 3:            txtLanguage = 5;            break;          case 4:            txtLanguage = 3;            break;          case 5:            txtLanguage = 8;            break;          case 6:            txtLanguage = 0;            break;          default:            txtLanguage = 1;            break;        }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: switch (languageCode)        {          case 0:            txtLanguage = 1;            break;          case 1:            txtLanguage = 4;            break;          case 2:            txtLanguage = _isRegionalDKorNO ? 13 : 11;            break;          case 3:            txtLanguage = 5;            break;          case 4:            txtLanguage = 3;            break;          case 5:            txtLanguage = 8;            break;          case 6:            txtLanguage = 0;            break;          default:            txtLanguage = 1;            break;        }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: switch (languageCode)        {          case 0:            txtLanguage = 1;            break;          case 1:            txtLanguage = 4;            break;          case 2:            txtLanguage = _isRegionalDKorNO ? 13 : 11;            break;          case 3:            txtLanguage = 5;            break;          case 4:            txtLanguage = 3;            break;          case 5:            txtLanguage = 8;            break;          case 6:            txtLanguage = 0;            break;          default:            txtLanguage = 1;            break;        }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: switch (languageCode)        {          case 0:            txtLanguage = 1;            break;          case 1:            txtLanguage = 4;            break;          case 2:            txtLanguage = _isRegionalDKorNO ? 13 : 11;            break;          case 3:            txtLanguage = 5;            break;          case 4:            txtLanguage = 3;            break;          case 5:            txtLanguage = 8;            break;          case 6:            txtLanguage = 0;            break;          default:            txtLanguage = 1;            break;        }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: bool displayHeaderAndTopText = !_fullscreenMode || !isBoxed || (isBoxed && _selectedPageText.IndexOf("-") != -1)                                       ||                                       (isBoxed && _selectedPageText.IndexOf("-") == -1 &&                                        !_selectedPageText.Equals(Convert.ToString(mPage' 16)));
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: row == 24 && !row24
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: pageChars[row * 40 + i] = 32;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: pageChars[row * 40 + i] = 32;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: pageAttribs[row * 40 + i] = ((int)TextColors.Trans1 << 4) | ((int)TextColors.White);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: pageAttribs[row * 40 + i] = ((int)TextColors.Trans1 << 4) | ((int)TextColors.White);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: i < 40
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: (row == 0 || row == 24) && !displayHeaderAndTopText
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: row <= 24
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: headline += new string((char)32' 32 - headline.Length);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: headline += new string((char)32' 32 - headline.Length);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: pageAttribs[i] = ((int)TextColors.Black << 4) | lineColor;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: i < 11
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: pageAttribs[i] = ((int)TextColors.Black << 4) | ((int)TextColors.White);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: i < 40
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: int width = _pageRenderWidth / 40;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: int height = _pageRenderHeight / 25;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: float nPercentage = ((float)_percentageOfMaximumHeight / 100);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: fntSize -= 0.1f;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: !displayHeaderAndTopText && row == 24
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: Render(ref renderGraphics' ref pageBitmap' pageChars[row * 40 + col]' pageAttribs[row * 40 + col]' ref x'                     ref y' width' height'                     txtLanguage);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: Render(ref renderGraphics' ref pageBitmap' pageChars[row * 40 + col]' pageAttribs[row * 40 + col]' ref x'                     ref y' width' height'                     txtLanguage);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: col < 40
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: y += height + (row == 23 ? 2 : 0);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: y += height + (row == 23 ? 2 : 0);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: row < 25
Magic Number,TvPlugin.teletext,TVTeletext,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvTeletext.cs,OnClicked,The following statement contains a magic number: _renderer.PageSelectText = Convert.ToString(currentPageNumber' 16);
Magic Number,TvPlugin.teletext,TVTeletext,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvTeletext.cs,OnClicked,The following statement contains a magic number: _renderer.PageSelectText = Convert.ToString(currentPageNumber' 16);
Magic Number,TvPlugin.teletext,TVTeletext,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvTeletext.cs,OnClicked,The following statement contains a magic number: _renderer.PageSelectText = Convert.ToString(currentPageNumber' 16);
Duplicate Code,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,Update,The method contains a code clone-set at the following line numbers (starting from the method definition): ((171' 194)' (293' 316)' (320' 343))
Duplicate Code,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,Update,The method contains a code clone-set at the following line numbers (starting from the method definition): ((293' 317)' (320' 344))
Duplicate Code,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,Update,The method contains a code clone-set at the following line numbers (starting from the method definition): ((226' 249)' (373' 396)' (464' 487))
Duplicate Code,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,Update,The method contains a code clone-set at the following line numbers (starting from the method definition): ((292' 311)' (319' 338))
Duplicate Code,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,Update,The method contains a code clone-set at the following line numbers (starting from the method definition): ((372' 391)' (463' 482))
Duplicate Code,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,LoadDirectory,The method contains a code clone-set at the following line numbers (starting from the method definition): ((68' 89)' (121' 142))
Duplicate Code,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,SetLabels,The method contains a code clone-set at the following line numbers (starting from the method definition): ((58' 81)' (96' 119))
Duplicate Code,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,Update,The method contains a code clone-set at the following line numbers (starting from the method definition): ((171' 200)' (292' 321))
Duplicate Code,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,Update,The method contains a code clone-set at the following line numbers (starting from the method definition): ((187' 208)' (393' 414))
Duplicate Code,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,Update,The method contains a code clone-set at the following line numbers (starting from the method definition): ((226' 249)' (345' 368)' (421' 444))
Duplicate Code,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,Update,The method contains a code clone-set at the following line numbers (starting from the method definition): ((344' 363)' (420' 439))
Missing Default,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_ITEM_FOCUS_CHANGED:            UpdateDescription();            break;        }
Missing Default,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,Update,The following switch statement is missing a default case: switch (currentSearchMode)        {          case SearchMode.Genre:            if (currentLevel == 0)            {              IList<string> genres;              TvBusinessLayer layer = new TvBusinessLayer();              genres = layer.GetProgramGenres();              foreach (string genre in genres)              {                GUIListItem item = new GUIListItem();                item.IsFolder = true;                item.Label = genre;                item.Path = genre;                item.ItemId = currentItemId;                currentItemId++;                Utils.SetDefaultIcons(item);                listView.Add(item);                itemCount++;              }            }            else            {              listView.Clear();              titleView.Clear();              GUIListItem item = new GUIListItem();              item.IsFolder = true;              item.Label = "..";              item.Label2 = String.Empty;              item.Path = String.Empty;              Utils.SetDefaultIcons(item);              //item.IconImage = "defaultFolderBig.png";              //item.IconImageBig = "defaultFolderBig.png";              listView.Add(item);              titleView.Add(item);                IList<Program> titles;              TvBusinessLayer layer = new TvBusinessLayer();              titles = layer.SearchProgramsPerGenre(currentGenre' filterShow'ChannelType.Radio);              foreach (Program program in titles)              {                //dont show programs which have ended                if (program.EndTime < DateTime.Now)                {                  continue;                }                bool add = true;                foreach (Program prog in programs)                {                  if (prog.Title == program.Title)                  {                    add = false;                  }                }                if (!add && filterShow == String.Empty)                {                  continue;                }                if (add)                {                  programs.Add(program);                }                  if (filterShow != String.Empty)                {                  if (program.Title == filterShow)                  {                    episodes.Add(program);                  }                }                  if (filterShow != String.Empty && program.Title != filterShow)                {                  continue;                }                  string strTime = String.Format("{0} {1}"'                                               Utils.GetShortDayString(program.StartTime)'                                               program.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                if (filterEpisode != String.Empty && strTime != filterEpisode)                {                  continue;                }                  item = new GUIListItem();                                //check if we are filtering for specific show or just letter                if (filterShow == String.Empty)                {                    //not searching for episode data so show just title                    item.Label = program.Title;                    item.Label2 = String.Empty;                    item.IsFolder = true;                }                else                {                    //searching for specific show so add episode data to display                    item.Label = TVUtil.GetDisplayTitle(program);                    item.Label2 = TVUtil.GetRecordingDateStringFull(program);                    item.IsFolder = false;                }                item.Path = program.Title;                item.TVTag = program;                item.ItemId = currentItemId;                currentItemId++;                bool isSerie;                if (IsRecording(program' out isSerie))                {                  if (isSerie)                  {                    item.PinImage = Thumbs.TvRecordingSeriesIcon;                  }                  else                  {                    item.PinImage = Thumbs.TvRecordingIcon;                  }                }                Utils.SetDefaultIcons(item);                SetChannelLogo(program' ref item' channelMap);                listView.Add(item);                titleView.Add(item);                itemCount++;              }            }            break;          case SearchMode.Title:            {              if (filterShow != String.Empty)              {                GUIListItem item = new GUIListItem();                item.IsFolder = true;                item.Label = "..";                item.Label2 = String.Empty;                item.Path = String.Empty;                Utils.SetDefaultIcons(item);                //item.IconImage = "defaultFolderBig.png";                //item.IconImageBig = "defaultFolderBig.png";                listView.Add(item);                titleView.Add(item);              }              IList<Program> titles = new List<Program>();              TvBusinessLayer layer = new TvBusinessLayer();              if (filterLetter == "#")              {                if (filterShow == String.Empty)                {                  titles = layer.SearchPrograms("[0-9]"' ChannelType.Radio);                }                else                {                  titles = layer.SearchPrograms("%" + filterShow' ChannelType.Radio);                }              }              else              {                if (filterShow == String.Empty)                {                  titles = layer.SearchPrograms(filterLetter' ChannelType.Radio);                }                else                {                  titles = layer.SearchPrograms("%" + filterShow' ChannelType.Radio);                }              }              foreach (Program program in titles)              {                if (filterLetter != "0")                {                  bool add = true;                  foreach (Program prog in programs)                  {                    if (prog.Title == program.Title)                    {                      add = false;                    }                  }                  if (!add && filterShow == String.Empty)                  {                    continue;                  }                  if (add)                  {                    programs.Add(program);                  }                    if (filterShow != String.Empty)                  {                    if (program.Title == filterShow)                    {                      episodes.Add(program);                    }                  }                }                else                {                  bool add = true;                  foreach (Program prog in programs)                  {                    if (prog.Title == program.Title)                    {                      add = false;                    }                  }                  if (!add && filterShow == String.Empty)                  {                    continue;                  }                  if (add)                  {                    programs.Add(program);                  }                    if (filterShow != String.Empty)                  {                    if (program.Title == filterShow)                    {                      episodes.Add(program);                    }                  }                }                if (filterShow != String.Empty && program.Title != filterShow)                {                  continue;                }                  GUIListItem item = new GUIListItem();                                  //check if we are filtering for specific show or just letter                if (filterShow == String.Empty)                {                    //not searching for episode data so show just title                    item.Label = program.Title;                    item.Label2 = String.Empty;                    item.IsFolder = true;                }                else                {                    //searching for specific show so add episode data to display                    item.Label = TVUtil.GetDisplayTitle(program);                    item.IsFolder = false;                    //moved this if statement but can not see it is doing anything?                    //if (program.StartTime > DateTime.MinValue)                    //{                        item.Label2 = TVUtil.GetRecordingDateStringFull(program);                    //}                }                  item.Path = program.Title;                item.TVTag = program;                item.ItemId = currentItemId;                currentItemId++;                bool isSerie;                if (IsRecording(program' out isSerie))                {                  if (isSerie)                  {                    item.PinImage = Thumbs.TvRecordingSeriesIcon;                  }                  else                  {                    item.PinImage = Thumbs.TvRecordingIcon;                  }                }                Utils.SetDefaultIcons(item);                SetChannelLogo(program' ref item' channelMap);                listView.Add(item);                titleView.Add(item);                itemCount++;              }            }            break;          case SearchMode.Description:            {              IList<Program> titles = new List<Program>();              long start = Utils.datetolong(DateTime.Now);              long end = Utils.datetolong(DateTime.Now.AddMonths(1));              TvBusinessLayer layer = new TvBusinessLayer();                if (filterLetter == "0")              {                if (filterShow == String.Empty)                {                  titles = layer.SearchProgramsByDescription(""' ChannelType.Radio);                }                else                {                  titles = layer.SearchProgramsByDescription(filterShow' ChannelType.Radio);                }              }              else              {                if (filterShow == String.Empty)                {                  titles = layer.SearchProgramsByDescription(filterLetter' ChannelType.Radio);                }                else                {                  titles = layer.SearchProgramsByDescription(filterShow' ChannelType.Radio);                }              }              foreach (Program program in titles)              {                if (program.Description.Length == 0)                {                  continue;                }                if (filterLetter != "0")                {                  programs.Add(program);                                    if (filterShow != String.Empty)                  {                    if (program.Title == filterShow)                    {                      episodes.Add(program);                    }                  }                }                  if (filterShow != String.Empty && program.Title != filterShow)                {                  continue;                }                  string strTime = String.Format("{0} {1}"'                                               Utils.GetShortDayString(program.StartTime)'                                               program.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                if (filterEpisode != String.Empty && strTime != filterEpisode)                {                  continue;                }                  GUIListItem item = new GUIListItem();                item.IsFolder = false;                item.Label = TVUtil.GetDisplayTitle(program);                item.Label2 = TVUtil.GetRecordingDateStringFull(program);                                  item.Path = program.Title;                item.TVTag = program;                item.ItemId = currentItemId;                currentItemId++;                bool isSerie;                if (IsRecording(program' out isSerie))                {                  if (isSerie)                  {                    item.PinImage = Thumbs.TvRecordingSeriesIcon;                  }                  else                  {                    item.PinImage = Thumbs.TvRecordingIcon;                  }                }                Utils.SetDefaultIcons(item);                SetChannelLogo(program' ref item' channelMap);                listView.Add(item);                titleView.Add(item);                itemCount++;              }            }            break;        }
Missing Default,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,Update,The following switch statement is missing a default case: switch (chosenSortMethod)        {          case SortMethod.Auto:            strLine = GUILocalizeStrings.Get(1202);            break;          case SortMethod.Name:            strLine = GUILocalizeStrings.Get(622);            break;          case SortMethod.Channel:            strLine = GUILocalizeStrings.Get(620);            break;          case SortMethod.Date:            strLine = GUILocalizeStrings.Get(621);            break;        }
Missing Default,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,OnClick,The following switch statement is missing a default case: switch (currentSearchMode)        {          case SearchMode.Genre:            if (currentLevel == 0)            {              filterLetter = "0";              filterShow = String.Empty;              filterEpisode = String.Empty;              currentGenre = item.Label;              currentLevel++;              Update();            }            else            {              Program program = item.TVTag as Program;              if (filterShow == String.Empty)              {                if (item.Label == "..")                {                  currentLevel = 0;                  currentGenre = String.Empty;                }                else                {                  filterShow = program.Title;                }                Update();              }              else              {                if (item.Label == "..")                {                  filterShow = String.Empty;                  Update();                }                else                {                  OnRecord(program);                }                              }            }            break;          case SearchMode.Title:            {              if (item.Label == ".." && item.IsFolder)              {                filterShow = String.Empty;                currentLevel = 0;                Update();                return;              }              Program program = item.TVTag as Program;              if (filterShow == String.Empty)              {                filterShow = program.Title;                Update();                return;              }              OnRecord(program);            }            break;          case SearchMode.Description:            {              Program program = item.TVTag as Program;              /*if (filterShow == String.Empty)              {                filterShow = program.Title;                Update();                return;              }*/              OnRecord(program);            }            break;        }
Missing Default,TvPlugin,RadioSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,OnRecord,The following switch statement is missing a default case: switch (dlg.SelectedLabel)          {            case 0: //none              foreach (Schedule rec1 in listRecordings)              {                if (rec1.IsRecordingProgram(program' true))                {                  if (rec1.ScheduleType != (int)ScheduleRecordingType.Once)                  {                    //delete specific series                    Schedule sched = Schedule.Retrieve(rec1.IdSchedule);                    TVUtil.DeleteRecAndSchedWithPrompt(sched' program.IdChannel);                  }                  else                  {                    //cancel recording                                                        server.StopRecordingSchedule(rec1.IdSchedule);                    rec1.Delete();                    server.OnNewSchedule();                  }                }              }              listRecordings = Schedule.ListAll();              Update();              return;            case 1: //once              rec.ScheduleType = (int)ScheduleRecordingType.Once;              break;            case 2: //everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              break;            case 3: //everytime' all channels              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              break;            case 4: //weekly              rec.ScheduleType = (int)ScheduleRecordingType.Weekly;              break;            case 5: //daily              rec.ScheduleType = (int)ScheduleRecordingType.Daily;              break;            case 6: //WorkingDays              rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;              break;            case 7: //Weekends              rec.ScheduleType = (int)ScheduleRecordingType.Weekends;              break;            case 8://Weekly everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              break;          }
Missing Default,TvPlugin,Comparer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,Compare,The following switch statement is missing a default case: switch (currentSortMethod)          {            case SortMethod.Name:              if (sortAscending)              {                iComp = String.Compare(item1.Label' item2.Label' true);              }              else              {                iComp = String.Compare(item2.Label' item1.Label' true);              }              return iComp;              case SortMethod.Channel:              if (prog1 != null && prog2 != null)              {                Channel ch1 = channelMap[prog1.IdChannel];                Channel ch2 = channelMap[prog2.IdChannel];                if (sortAscending)                {                  iComp = String.Compare(ch1.DisplayName' ch2.DisplayName' true);                }                else                {                  iComp = String.Compare(ch2.DisplayName' ch1.DisplayName' true);                }                return iComp;              }              return 0;              case SortMethod.Date:              if (prog1 != null && prog2 != null)              {                if (sortAscending)                {                  iComp = prog1.StartTime.CompareTo(prog2.StartTime);                }                else                {                  iComp = prog2.StartTime.CompareTo(prog1.StartTime);                }                return iComp;              }              return 0;          }
Missing Default,TvPlugin,Comparer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioSearch.cs,Compare,The following switch statement is missing a default case: switch (currentSortMethod)          {            case SortMethod.Name:              if (sortAscending)              {                iComp = String.Compare(item1.Label' item2.Label' true);              }              else              {                iComp = String.Compare(item2.Label' item1.Label' true);              }              return iComp;              case SortMethod.Channel:              if (prog1 != null && prog2 != null)              {                Channel ch1 = channelMap[prog1.IdChannel];                Channel ch2 = channelMap[prog2.IdChannel];                if (sortAscending)                {                  iComp = String.Compare(ch1.DisplayName' ch2.DisplayName' true);                }                else                {                  iComp = String.Compare(ch2.DisplayName' ch1.DisplayName' true);                }                return iComp;              }              return 0;              case SortMethod.Date:              if (prog1 != null && prog2 != null)              {                if (sortAscending)                {                  iComp = prog1.StartTime.CompareTo(prog2.StartTime);                }                else                {                  iComp = prog2.StartTime.CompareTo(prog1.StartTime);                }                return iComp;              }              return 0;          }
Missing Default,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,SaveSettings,The following switch statement is missing a default case: switch (_currentSortMethod)          {            case SortMethod.Channel:              xmlwriter.SetValue("radiorecorded"' "sort"' "channel");              break;            case SortMethod.Date:              xmlwriter.SetValue("radiorecorded"' "sort"' "date");              break;            case SortMethod.Name:              xmlwriter.SetValue("radiorecorded"' "sort"' "name");              break;            case SortMethod.Genre:              xmlwriter.SetValue("radiorecorded"' "sort"' "type");              break;            case SortMethod.Played:              xmlwriter.SetValue("radiorecorded"' "sort"' "played");              break;            case SortMethod.Duration:              xmlwriter.SetValue("radiorecorded"' "sort"' "duration");              break;          }
Missing Default,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)        {          case Action.ActionType.ACTION_DELETE_ITEM:            {              int item = GetSelectedItemNo();              if (item >= 0)              {                OnDeleteRecording(item);              }              UpdateProperties();            }            break;            case Action.ActionType.ACTION_PREVIOUS_MENU:            if (facadeLayout != null)            {              if (facadeLayout.Focus)              {                GUIListItem item = GetItem(0);                if (item != null)                {                  if (item.IsFolder && item.Label == "..")                  {                    _currentLabel = string.Empty;                    LoadDirectory();                    GUIControl.SelectItemControl(GetID' facadeLayout.GetID' _rootItem);                    _rootItem = 0;                    return;                  }                }              }            }            break;        }
Missing Default,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_ITEM_FOCUS_CHANGED:            UpdateProperties();            break;            case GUIMessage.MessageType.GUI_MSG_ITEM_SELECT:          case GUIMessage.MessageType.GUI_MSG_CLICKED:              // Depending on the mode' handle the GUI_MSG_ITEM_SELECT message from the dialog menu and            // the GUI_MSG_CLICKED message from the spin control.            // Respond to the correct control.  The value is retrived directly from the control by the called handler.            if (message.TargetControlId == btnViews.GetID)            {              // Set the new view.              SetView(btnViews.SelectedItemValue);            }            break;        }
Missing Default,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,OnShowContextMenu,The following switch statement is missing a default case: switch (dlg.SelectedId)        {          case 618: // delete            OnDeleteRecording(iItem);            break;            case 208: // play            if (OnSelectedRecording(iItem))            {              return;            }            break;            case 1048: // Settings            TvRecordedInfo.CurrentProgram = rec;            GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_RECORDED_INFO);            break;            case 200072:            ShowUpcomingEpisodes(rec);            break;            case 830: // Reset watched status            _iSelectedItem = GetSelectedItemNo();            ResetWatchedStatus(rec);            LoadDirectory();            GUIControl.SelectItemControl(GetID' facadeLayout.GetID' _iSelectedItem);            break;        }
Missing Default,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,InitViewSelections,The following switch statement is missing a default case: switch (_currentDbView)        {          case DBView.Recordings:            btnViews.SetSelectedItemByValue(0);            break;          case DBView.Genre:            btnViews.SetSelectedItemByValue(1);            break;          case DBView.Channel:            btnViews.SetSelectedItemByValue(2);            break;          case DBView.History:            btnViews.SetSelectedItemByValue(3);            break;        }
Missing Default,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,SetView,The following switch statement is missing a default case: switch (selectedViewId)          {            case 0:              _currentDbView = DBView.Recordings;              break;            case 1:              _currentDbView = DBView.Genre;              break;            case 2:              _currentDbView = DBView.Channel;              break;            case 3:              _currentDbView = DBView.History;              break;          }
Missing Default,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,UpdateButtonStates,The following switch statement is missing a default case: switch (_currentSortMethod)            {              case SortMethod.Channel:                strLine = GUILocalizeStrings.Get(620); //Sort by: Channel                break;              case SortMethod.Date:                strLine = GUILocalizeStrings.Get(621); //Sort by: Date                break;              case SortMethod.Name:                strLine = GUILocalizeStrings.Get(268); //Sort by: Title                break;              case SortMethod.Genre:                strLine = GUILocalizeStrings.Get(678); //Sort by: Genre                break;              case SortMethod.Played:                strLine = GUILocalizeStrings.Get(671); //Sort by: Watched                break;              case SortMethod.Duration:                strLine = GUILocalizeStrings.Get(1017); //Sort by: Duration                break;            }
Missing Default,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,ListFolder,The following switch statement is missing a default case: switch (_currentDbView)            {              case DBView.History:                addToList = GetSpokenViewDate(rec.StartTime).Equals(_currentLabel);                break;              case DBView.Recordings:                addToList = rec.Title.Equals(_currentLabel' StringComparison.InvariantCultureIgnoreCase) ||                            TVUtil.GetDisplayTitle(rec).Equals(_currentLabel'                                                               StringComparison.InvariantCultureIgnoreCase);                break;              case DBView.Channel:                addToList = GetRecordingDisplayName(rec).Equals(_currentLabel'                                                                StringComparison.InvariantCultureIgnoreCase);                break;              case DBView.Genre:                addToList = rec.Genre.Equals(_currentLabel' StringComparison.InvariantCultureIgnoreCase);                break;            }
Missing Default,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,LoadDirectory,The following switch statement is missing a default case: switch (_currentDbView)                      {                        case DBView.History:                          merge = GetSpokenViewDate(rec.StartTime).Equals(GetSpokenViewDate(listRec.StartTime));                          break;                        case DBView.Recordings:                          merge = rec.Title.Equals(listRec.Title' StringComparison.InvariantCultureIgnoreCase);                          //merge = TVUtil.GetDisplayTitle(rec).Equals(listRec.Title' StringComparison.InvariantCultureIgnoreCase);                          break;                        case DBView.Channel:                          merge = rec.IdChannel == listRec.IdChannel;                          break;                        case DBView.Genre:                          merge = rec.Genre.Equals(listRec.Genre' StringComparison.InvariantCultureIgnoreCase);                          break;                      }
Missing Default,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,LoadDirectory,The following switch statement is missing a default case: switch (_currentDbView)              {                case DBView.History:                  addToList = GetSpokenViewDate(rec.StartTime).Equals(_currentLabel);                  break;                case DBView.Recordings:                  addToList = rec.Title.Equals(_currentLabel' StringComparison.InvariantCultureIgnoreCase) ||                              TVUtil.GetDisplayTitle(rec).Equals(_currentLabel'                                                                 StringComparison.InvariantCultureIgnoreCase);                  break;                case DBView.Channel:                  addToList = GetRecordingDisplayName(rec).Equals(_currentLabel'                                                                  StringComparison.InvariantCultureIgnoreCase);                  break;                case DBView.Genre:                  addToList = rec.Genre.Equals(_currentLabel' StringComparison.InvariantCultureIgnoreCase);                  break;              }
Missing Default,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,BuildItemFromRecording,The following switch statement is missing a default case: switch (_currentDbView)          {            case DBView.Recordings:              item.Label = TVUtil.GetDisplayTitle(aRecording);              break;            case DBView.Channel:              item.Label = strChannelName;              break;            case DBView.Genre:              item.Label = aRecording.Genre;              break;            case DBView.History:              item.Label = GetSpokenViewDate(aRecording.StartTime);              break;          }
Missing Default,TvPlugin,RadioRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioRecorded.cs,Compare,The following switch statement is missing a default case: switch (_currentSortMethod)          {            case SortMethod.Played:              item1.Label2 = string.Format("{0} {1}"' rec1.TimesWatched' GUILocalizeStrings.Get(677)); //times              item2.Label2 = string.Format("{0} {1}"' rec2.TimesWatched' GUILocalizeStrings.Get(677)); //times              if (rec1.TimesWatched == rec2.TimesWatched)              {                goto case SortMethod.Name;              }              else              {                if (m_bSortAscending)                {                  return rec1.TimesWatched - rec2.TimesWatched;                }                else                {                  return rec2.TimesWatched - rec1.TimesWatched;                }              }            case SortMethod.Name:              if (m_bSortAscending)              {                iComp = string.Compare(TVUtil.GetDisplayTitle(rec1)' TVUtil.GetDisplayTitle(rec2)' true);                if (iComp == 0)                {                  goto case SortMethod.Channel;                }                else                {                  return iComp;                }              }              else              {                iComp = string.Compare(TVUtil.GetDisplayTitle(rec2)' TVUtil.GetDisplayTitle(rec1)' true);                if (iComp == 0)                {                  goto case SortMethod.Channel;                }                else                {                  return iComp;                }              }            case SortMethod.Channel:              if (m_bSortAscending)              {                iComp = string.Compare(rec1.ReferencedChannel().DisplayName' rec2.ReferencedChannel().DisplayName' true);                if (iComp == 0)                {                  goto case SortMethod.Date;                }                else                {                  return iComp;                }              }              else              {                iComp = string.Compare(rec2.ReferencedChannel().DisplayName' rec1.ReferencedChannel().DisplayName' true);                if (iComp == 0)                {                  goto case SortMethod.Date;                }                else                {                  return iComp;                }              }            case SortMethod.Duration:              {                TimeSpan duration1 = (rec1.EndTime - rec1.StartTime);                TimeSpan duration2 = rec2.EndTime - rec2.StartTime;                if (m_bSortAscending)                {                  if (duration1 == duration2)                  {                    goto case SortMethod.Date;                  }                  if (duration1 > duration2)                  {                    return 1;                  }                  return -1;                }                else                {                  if (duration1 == duration2)                  {                    goto case SortMethod.Date;                  }                  if (duration1 < duration2)                  {                    return 1;                  }                  return -1;                }              }            case SortMethod.Date:              if (m_bSortAscending)              {                if (rec1.StartTime == rec2.StartTime)                {                  return 0;                }                if (rec1.StartTime < rec2.StartTime)                {                  return 1;                }                return -1;              }              else              {                if (rec1.StartTime == rec2.StartTime)                {                  return 0;                }                if (rec1.StartTime > rec2.StartTime)                {                  return 1;                }                return -1;              }            case SortMethod.Genre:              item1.Label2 = rec1.Genre;              item2.Label2 = rec2.Genre;              if (rec1.Genre != rec2.Genre)              {                if (m_bSortAscending)                {                  return string.Compare(rec1.Genre' rec2.Genre' true);                }                else                {                  return string.Compare(rec2.Genre' rec1.Genre' true);                }              }              if (rec1.StartTime != rec2.StartTime)              {                if (m_bSortAscending)                {                  ts = rec1.StartTime - rec2.StartTime;                  return (int)(ts.Minutes);                }                else                {                  ts = rec2.StartTime - rec1.StartTime;                  return (int)(ts.Minutes);                }              }              if (rec1.IdChannel != rec2.IdChannel)              {                if (m_bSortAscending)                {                  return string.Compare(rec1.ReferencedChannel().DisplayName' rec2.ReferencedChannel().DisplayName);                }                else                {                  return string.Compare(rec2.ReferencedChannel().DisplayName' rec1.ReferencedChannel().DisplayName);                }              }              if (TVUtil.GetDisplayTitle(rec1) != TVUtil.GetDisplayTitle(rec2))              {                if (m_bSortAscending)                {                  return string.Compare(TVUtil.GetDisplayTitle(rec1)' TVUtil.GetDisplayTitle(rec2));                }                else                {                  return string.Compare(TVUtil.GetDisplayTitle(rec2)' TVUtil.GetDisplayTitle(rec1));                }              }              return 0;          }
Missing Default,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,SaveSettings,The following switch statement is missing a default case: switch (currentSortMethod)          {            case SortMethod.Name:              xmlwriter.SetValue("myradio"' "sort"' "name");              break;            case SortMethod.Type:              xmlwriter.SetValue("myradio"' "sort"' "type");              break;            case SortMethod.Genre:              xmlwriter.SetValue("myradio"' "sort"' "genre");              break;            case SortMethod.Bitrate:              xmlwriter.SetValue("myradio"' "sort"' "bitrate");              break;            case SortMethod.Number:              xmlwriter.SetValue("myradio"' "sort"' "number");              break;          }
Missing Default,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,OnPageLoad,The following switch statement is missing a default case: switch (currentSortMethod)        {          case SortMethod.Name:            btnSortBy.SelectedItem = 0;            break;          case SortMethod.Type:            btnSortBy.SelectedItem = 1;            break;          case SortMethod.Genre:            btnSortBy.SelectedItem = 2;            break;          case SortMethod.Bitrate:            btnSortBy.SelectedItem = 3;            break;          case SortMethod.Number:            btnSortBy.SelectedItem = 4;            break;        }
Missing Default,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,UpdateButtonStates,The following switch statement is missing a default case: switch (currentSortMethod)        {          case SortMethod.Name:            strLine = GUILocalizeStrings.Get(103);            break;          case SortMethod.Type:            strLine = GUILocalizeStrings.Get(668);            break;          case SortMethod.Genre:            strLine = GUILocalizeStrings.Get(669);            break;          case SortMethod.Bitrate:            strLine = GUILocalizeStrings.Get(670);            break;          case SortMethod.Number:            strLine = GUILocalizeStrings.Get(620);            break;        }
Missing Default,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,AllowLayout,The following switch statement is missing a default case: switch (layout)        {          case Layout.List:          case Layout.SmallIcons:          case Layout.LargeIcons:            return true;        }
Missing Default,TvPlugin,Radio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\Radio.cs,Compare,The following switch statement is missing a default case: switch (method)        {          case SortMethod.Name:            if (bAscending)            {              return String.Compare(item1.Label' item2.Label' true);            }            return String.Compare(item2.Label' item1.Label' true);            case SortMethod.Type:            string strURL1 = "0";            string strURL2 = "0";            if (item1.IconImage.ToLower().Equals("defaultmyradiostream.png"))            {              strURL1 = "1";            }            if (item2.IconImage.ToLower().Equals("defaultmyradiostream.png"))            {              strURL2 = "1";            }            if (strURL1.Equals(strURL2))            {              if (bAscending)              {                return String.Compare(item1.Label' item2.Label' true);              }              return String.Compare(item2.Label' item1.Label' true);            }            if (bAscending)            {              if (strURL1.Length > 0)              {                return 1;              }              return -1;            }            if (strURL1.Length > 0)            {              return -1;            }            return 1;            //break;            case SortMethod.Number:            if (channel1 != null && channel2 != null)            {              RadioGroupMap channel1GroupMap = (RadioGroupMap)item1.AlbumInfoTag;              RadioGroupMap channel2GroupMap = (RadioGroupMap)item2.AlbumInfoTag;              int channel1GroupSort = channel1GroupMap.SortOrder;              int channel2GroupSort = channel2GroupMap.SortOrder;              if (bAscending)              {                if (channel1GroupSort > channel2GroupSort)                {                  return 1;                }                return -1;              }              if (channel2GroupSort > channel1GroupSort)              {                return 1;              }              return -1;            }              if (channel1 != null)            {              return -1;            }            return channel2 != null ? 1 : 0;            //break;          case SortMethod.Bitrate:            IList<TuningDetail> details1 = channel1.ReferringTuningDetail();            TuningDetail detail1 = details1[0];            IList<TuningDetail> details2 = channel2.ReferringTuningDetail();            TuningDetail detail2 = details2[0];            if (detail1 != null && detail2 != null)            {              if (bAscending)              {                if (detail1.Bitrate > detail2.Bitrate)                {                  return 1;                }                return -1;              }              if (detail2.Bitrate > detail1.Bitrate)              {                return 1;              }              return -1;            }            return 0;        }
Missing Default,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_singleChannelView)            {              OnSwitchMode(true);              return;            }            GUIWindowManager.ShowPreviousWindow();            return;            case Action.ActionType.ACTION_KEY_PRESSED:            if (action.m_key != null)            {              OnKeyCode((char)action.m_key.KeyChar);            }            break;            case Action.ActionType.ACTION_RECORD:            if ((GetFocusControlId() != -1) && (_cursorY > 0) && (_cursorX >= 0))            {              OnRecord();            }            break;            case Action.ActionType.ACTION_MOUSE_MOVE:            {              int x = (int)action.fAmount1;              int y = (int)action.fAmount2;              foreach (GUIControl control in controlList)              {                if (control.GetID >= (int)Controls.IMG_CHAN1 + 0 &&                    control.GetID <= (int)Controls.IMG_CHAN1 + _channelCount)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      UnFocus();                      _cursorX = control.GetID - (int)Controls.IMG_CHAN1;                      _cursorY = 0;                        if (_singleChannelNumber != _cursorX + ChannelOffset)                      {                        Update(false);                      }                      UpdateCurrentProgram();                      UpdateHorizontalScrollbar();                      UpdateVerticalScrollbar();                      updateSingleChannelNumber();                      return;                    }                  }                }                if (control.GetID >= GUIDE_COMPONENTID_START)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      int iControlId = control.GetID;                      if (iControlId >= GUIDE_COMPONENTID_START)                      {                        iControlId -= GUIDE_COMPONENTID_START;                        int iCursorY = (iControlId / RowID);                        iControlId -= iCursorY * RowID;                        if (iControlId % ColID == 0)                        {                          int iCursorX = (iControlId / ColID) + 1;                          if (iCursorY != _cursorX || iCursorX != _cursorY)                          {                            UnFocus();                            _cursorX = iCursorY;                            _cursorY = iCursorX;                            UpdateCurrentProgram();                            SetFocus();                            UpdateHorizontalScrollbar();                            UpdateVerticalScrollbar();                            updateSingleChannelNumber();                            return;                          }                          return;                        }                      }                    }                  }                }              }              UnFocus();              _cursorY = -1;              _cursorX = -1;              base.OnAction(action);            }            break;            case Action.ActionType.ACTION_TVGUIDE_RESET:            _cursorY = 0;            _viewingTime = DateTime.Now;            Update(false);            break;              case Action.ActionType.ACTION_CONTEXT_MENU:            {              if (_cursorY >= 0 && _cursorX >= 0)              {                if (_cursorY == 0)                {                  _backupSingleViewCursorX = _cursorX;                  OnSwitchMode(false);                  return;                }                else                {                  ShowContextMenu();                }              }              else              {                action.wID = Action.ActionType.ACTION_SELECT_ITEM;                GUIWindowManager.OnAction(action);              }            }            break;            case Action.ActionType.ACTION_PAGE_UP:            OnPageUp();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_PAGE_DOWN:            OnPageDown();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (_cursorX >= 0)              {                OnLeft();                updateSingleChannelNumber();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (_cursorX >= 0)              {                OnRight();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_UP:            {              if (_cursorX >= 0)              {                OnUp(true' false);                updateSingleChannelNumber();                UpdateVerticalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_DOWN:            {              if (_cursorX >= 0)              {                OnDown(true);                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              else              {                _cursorX = 0;                SetFocus();                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              return;            }            //break;          case Action.ActionType.ACTION_SHOW_INFO:            {              ShowContextMenu();            }            break;          case Action.ActionType.ACTION_INCREASE_TIMEBLOCK:            {              _timePerBlock += 15;              if (_timePerBlock > 60)              {                _timePerBlock = 60;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;            case Action.ActionType.ACTION_REWIND:          case Action.ActionType.ACTION_MUSIC_REWIND:            _viewingTime = _viewingTime.AddHours(-3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_FORWARD:          case Action.ActionType.ACTION_MUSIC_FORWARD:            _viewingTime = _viewingTime.AddHours(3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_DECREASE_TIMEBLOCK:            {              if (_timePerBlock > 15)              {                _timePerBlock -= 15;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_DEFAULT_TIMEBLOCK:            {              _timePerBlock = 30;              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_TVGUIDE_INCREASE_DAY:            OnNextDay();            break;            case Action.ActionType.ACTION_TVGUIDE_DECREASE_DAY:            OnPreviousDay();            break;            // TV group changing actions          case Action.ActionType.ACTION_TVGUIDE_NEXT_GROUP:            OnChangeChannelGroup(1);            break;            case Action.ActionType.ACTION_TVGUIDE_PREV_GROUP:            OnChangeChannelGroup(-1);            break;        }
Missing Default,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,ShowContextMenu,The following switch statement is missing a default case: switch (dlg.SelectedId)          {              case 1041:              ShowProgramInfo();              Log.Debug("RadioGuide: show episodes or repeatings for current show");              break;            case 971: //group              OnSelectChannelGroup();              break;            case 1040: // set reminder            case 1212: // cancel reminder              OnNotify();              break;              case 1213: // listen to station                Log.Debug("viewch channel:{0}"' _currentChannel);              Radio.Play();              if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == _currentProgram.ReferencedChannel().IdChannel)              {                g_Player.ShowFullScreenWindow();              }              return;                case 939: // switch mode              _backupSingleViewCursorX = _cursorX;              OnSwitchMode(false);              break;            case 629: //stop recording              Schedule schedule = Schedule.FindNoEPGSchedule(_currentProgram.ReferencedChannel());              TVUtil.DeleteRecAndEntireSchedWithPrompt(schedule);              Update(true); //remove RED marker              break;              case 2162: // Remove channel              OnRemoveChannel();                break;              case 2163: // Add channel to a group              OnAddChannelToGroup();                break;              case 2164: // Remove channel from this group              OnRemoveChannelFromGroup();                break;              case 637: // edit recording            case 264: // record              if (_currentProgram.IdProgram == 0)              {                TVHome.StartRecordingSchedule(_currentProgram.ReferencedChannel()' true);                _currentProgram.IsRecordingOncePending = true;                Update(true); //remove RED marker              }              else              {                OnRecordContext();              }              break;          }
Missing Default,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnSelectItem,The following switch statement is missing a default case: switch (dlg.SelectedId)                  {                    case 979: // Play recording from beginning                      {                        Recording recDB = Recording.Retrieve(fileName);                        if (recDB != null)                        {                          GUIPropertyManager.RemovePlayerProperties();                          GUIPropertyManager.SetProperty("#Play.Current.ArtistThumb"' recDB.Description);                          GUIPropertyManager.SetProperty("#Play.Current.Album"' recDB.ReferencedChannel().DisplayName);                          GUIPropertyManager.SetProperty("#Play.Current.Title"' recDB.Description);                                                    string strLogo = Utils.GetCoverArt(Thumbs.Radio' recDB.ReferencedChannel().DisplayName);                          if (string.IsNullOrEmpty(strLogo))                          {                            strLogo = "defaultMyRadioBig.png";                          }                                                    GUIPropertyManager.SetProperty("#Play.Current.Thumb"' strLogo);                          TVUtil.PlayRecording(recDB' 0' g_Player.MediaType.Radio);                        }                      }                      return;                      case 1213: // listen to this station                      {                        Radio.Play();                        if (g_Player.Playing)                        {                          g_Player.ShowFullScreenWindow();                        }                      }                      return;                  }
Missing Default,TvPlugin,RadioGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\RadioGuideBase.cs,OnSelectItem,The following switch statement is missing a default case: switch (dlg.SelectedId)                  {                    case 1041:                      ShowProgramInfo();                      Log.Debug("RadioGuide: show episodes or repeatings for current show");                      break;                    case 1213:                      Log.Debug("RadioGuide: switch currently running show to fullscreen");                      GUIWaitCursor.Show();                      try                      {                        Radio.Play();                      }                      finally                      {                        GUIWaitCursor.Hide();                      }                      if (g_Player.Playing)                      {                        g_Player.ShowFullScreenWindow();                      }                      else                      {                        Log.Debug("RadioGuide: no show currently running to switch to fullscreen");                      }                      break;                  }
Missing Default,TvPlugin,TVTeletextFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvFullscreenTeletext.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)        {          case Action.ActionType.ACTION_SWITCH_TELETEXT_TRANSPARENT:            // Switch tranparent mode            _transparentMode = !_transparentMode;            _renderer.TransparentMode = _transparentMode;            // Rerender the image            RequestUpdate(false);            break;        }
Missing Default,TvPlugin,TvTeletextBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvTeletextBase.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)        {          case Action.ActionType.ACTION_REMOTE_RED_BUTTON:            // Red teletext button            showTeletextButtonPage(TeletextButton.Red);            break;          case Action.ActionType.ACTION_REMOTE_GREEN_BUTTON:            // Green teletext button            showTeletextButtonPage(TeletextButton.Green);            break;          case Action.ActionType.ACTION_REMOTE_YELLOW_BUTTON:            // Yellow teletext button            showTeletextButtonPage(TeletextButton.Yellow);            break;          case Action.ActionType.ACTION_REMOTE_BLUE_BUTTON:            // Blue teletext button            showTeletextButtonPage(TeletextButton.Blue);            break;          case Action.ActionType.ACTION_REMOTE_SUBPAGE_UP:            // Subpage up            SubpageUp();            break;          case Action.ActionType.ACTION_REMOTE_SUBPAGE_DOWN:            // Subpage down            SubpageDown();            break;          case Action.ActionType.ACTION_NEXT_TELETEXTPAGE:            // Page up            PageUp();            break;          case Action.ActionType.ACTION_PREV_TELETEXTPAGE:            // Page down            PageDown();            break;          case Action.ActionType.ACTION_CONTEXT_MENU:            // Show previous window            GUIWindowManager.ShowPreviousWindow();            break;          case Action.ActionType.ACTION_SWITCH_TELETEXT_HIDDEN:            //Change Hidden Mode            _hiddenMode = !_hiddenMode;            _renderer.HiddenMode = _hiddenMode;            // Rerender the image            RequestUpdate(false);            break;          case Action.ActionType.ACTION_SHOW_INDEXPAGE:            // Index page            showNewPage(0x100);            break;        }
Missing Default,TvPlugin,TvTeletextBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvTeletextBase.cs,showTeletextButtonPage,The following switch statement is missing a default case: switch (button)        {          case TeletextButton.Red:            showNewPage(TVHome.Card.GetTeletextRedPageNumber());            break;          case TeletextButton.Green:            showNewPage(TVHome.Card.GetTeletextGreenPageNumber());            break;          case TeletextButton.Yellow:            showNewPage(TVHome.Card.GetTeletextYellowPageNumber());            break;          case TeletextButton.Blue:            showNewPage(TVHome.Card.GetTeletextBluePageNumber());            break;        }
Missing Default,TvPlugin,TVConflictDialog,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVConflictDialog.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_CLICKED:            int iControl = message.SenderControlId;            if ((int)Controls.BUTTON_NEW_REC == iControl)            {              SelectedLabel = 0;              PageDestroy();            }            else if ((int)Controls.BUTTON_CONFLICT_REC == iControl)            {              SelectedLabel = 1;              PageDestroy();            }            else if ((int)Controls.BUTTON_KEEP_CONFLICT == iControl)            {              SelectedLabel = 2;              PageDestroy();            }            else if ((int)Controls.BUTTON_CONFLICT_EPISODE == iControl)            {              SelectedLabel = 3;              PageDestroy();            }            break;        }
Missing Default,TvPlugin,GUITVConflicts,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVConflicts.cs,OnClick,The following switch statement is missing a default case: switch (dlg.SelectedId)            {              case 981: //delete specific series                CanceledSchedule canceledSchedule = new CanceledSchedule(schedule.IdSchedule' schedule.IdChannel' schedule.StartTime);                canceledSchedule.Persist();                selectedItem = null;                TvServer server = new TvServer();                server.OnNewSchedule();                break;              case 982: //Delete entire recording                schedule.Delete();                selectedItem = null;                break;            }
Missing Default,TvPlugin,TvCropSettings,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvCropSettings.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              // fetch settings for the current capture card              _cropSettings = TvCropManager.CropSettings;              GUILabelControl cardLabel = GetControl((int)Controls.CONTROL_CARD_LABEL) as GUILabelControl;              cardLabel.Visible = false;                foreach (int iCtl in Enum.GetValues(typeof (Controls)))              {                if (GetControl(iCtl) is GUISpinControl)                {                  GUISpinControl cntl = (GUISpinControl)GetControl(iCtl);                  cntl.ShowRange = false;                }              }              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_CROP_TOP);              for (int i = 0; i <= 200; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_CROP_TOP' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_CROP_TOP' _cropSettings.Top);              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_CROP_BOTTOM);              for (int i = 0; i <= 200; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_CROP_BOTTOM' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_CROP_BOTTOM' _cropSettings.Bottom);              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_CROP_LEFT);              for (int i = 0; i <= 200; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_CROP_LEFT' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_CROP_LEFT' _cropSettings.Left);              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_CROP_RIGHT);              for (int i = 0; i <= 200; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_CROP_RIGHT' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_CROP_RIGHT' _cropSettings.Right);                break;            }          case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;              if (iControl == (int)Controls.CONTROL_EXIT)              {                Close();              }              else if (iControl == (int)Controls.CONTROL_CROP_TOP)              {                // do not use message.Label' because it's empty for "page up/down"' causing exceptions                _cropSettings.Top = (GetControl(iControl) as GUISpinControl).Value;              }              else if (iControl == (int)Controls.CONTROL_CROP_BOTTOM)              {                _cropSettings.Bottom = (GetControl(iControl) as GUISpinControl).Value;              }              else if (iControl == (int)Controls.CONTROL_CROP_LEFT)              {                _cropSettings.Left = (GetControl(iControl) as GUISpinControl).Value;              }              else if (iControl == (int)Controls.CONTROL_CROP_RIGHT)              {                _cropSettings.Right = (GetControl(iControl) as GUISpinControl).Value;              }                // ativate & save settings for the current capture card              TvCropManager.CropSettings = _cropSettings;                break;            }        }
Missing Default,TvPlugin,TvCropSettings,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvCropSettings.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)        {          case Action.ActionType.ACTION_CONTEXT_MENU:            Close();            return;          case Action.ActionType.ACTION_PREVIOUS_MENU:            Close();            return;        }
Missing Default,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_DOUBLECLICK:          case Action.ActionType.ACTION_SELECT_ITEM:            {              if (!g_Player.IsTVRecording)              {                if (_autoZapMode)                {                  StopAutoZap();                }                else if (_zapOsdVisible)                {                  TVHome.Navigator.ZapNow();                }                else                {                  ShowMiniEpg();                  // LastChannel has been moved to "0"                  //if (!GUIWindowManager.IsRouted)                  //{                  //  GUITVHome.OnLastViewedChannel();                  //}                }              }            }            break;            case Action.ActionType.ACTION_SHOW_INFO:          case Action.ActionType.ACTION_SHOW_CURRENT_TV_INFO:            {              if (action.fAmount1 != 0)              {                _zapTimeOutTimer = DateTime.MaxValue;                _zapTimeOutTimer = DateTime.Now;              }              else              {                _zapTimeOutTimer = DateTime.Now;              }                if (!_zapOsdVisible && !g_Player.IsTVRecording)              {                ShowZapOSD(_gotTvErrorMessage);                _gotTvErrorMessage = null;              }              else              {                _zapWindow.UpdateChannelInfo();                _zapTimeOutTimer = DateTime.Now;              }            }            break;            case Action.ActionType.ACTION_AUTOCROP:            {              Log.Debug("TvFullScreen.ACTION_AUTOCROP");              _statusVisible = true;              _statusTimeOutTimer = DateTime.Now;                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                              0' 0' null);              IAutoCrop cropper = GUIGraphicsContext.autoCropper;              if (cropper != null)              {                msg.Label = cropper.Crop();                if (msg.Label == null)                {                  msg.Label = "N/A";                }              }              else              {                msg.Label = "N/A";              }                OnMessage(msg);              break;            }            case Action.ActionType.ACTION_TOGGLE_AUTOCROP:            {              Log.Debug("TvFullScreen.ACTION_TOGGLE_AUTOCROP");              _statusVisible = true;              _statusTimeOutTimer = DateTime.Now;              IAutoCrop cropper = GUIGraphicsContext.autoCropper;                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                              0' 0' null);              msg.Label = "N/A";                if (cropper != null)              {                msg.Label = cropper.ToggleMode();              }              OnMessage(msg);              break;            }            case Action.ActionType.ACTION_ASPECT_RATIO:            {              _statusVisible = true;              _statusTimeOutTimer = DateTime.Now;              string status = "";                Geometry.Type arMode = GUIGraphicsContext.ARType;                bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)              {                if (_allowedArModes[i] == arMode)                {                  arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                  foundMode = true;                  break;                }              }              if (!foundMode && _allowedArModes.Count > 0)              {                arMode = _allowedArModes[0];              }                GUIGraphicsContext.ARType = arMode;              status = Utils.GetAspectRatioLocalizedString(arMode);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                              0' 0' null);              msg.Label = status;              OnMessage(msg);            }            break;            case Action.ActionType.ACTION_NEXT_SUBTITLE:            if (g_Player.SubtitleStreams > 0 || g_Player.SupportsCC)            {              _statusVisible = true;              _statusTimeOutTimer = DateTime.Now;                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                              0' 0' null);              g_Player.SwitchToNextSubtitle();              if (g_Player.EnableSubtitle)              {                if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                {                  msg.Label = "CC1 Analog or Digital";                }                else                {                  msg.Label = string.Format("{0} ({1}/{2})"' g_Player.SubtitleLanguage(g_Player.CurrentSubtitleStream)'                                            g_Player.CurrentSubtitleStream + 1' g_Player.SubtitleStreams);                }              }              else              {                msg.Label = GUILocalizeStrings.Get(519); // Subtitles off              }              OnMessage(msg);              Log.Info("MyTV toggle subtitle: switched subtitle to {0}"' msg.Label);            }            else            {              Log.Info("MyTV toggle subtitle: no subtitle streams available!");            }            break;            case Action.ActionType.ACTION_PAGE_UP:            OnPageUp();            break;            case Action.ActionType.ACTION_PAGE_DOWN:            OnPageDown();            break;            case Action.ActionType.ACTION_KEY_PRESSED:            {              if (action.m_key != null)              {                OnKeyCode((char)action.m_key.KeyChar);              }                _messageBoxVisible = false;            }            break;            case Action.ActionType.ACTION_REWIND:            {              if (g_Player.IsTimeShifting || g_Player.IsTVRecording)              {                _isPauseOsdVisible = false;                GUIWindowManager.IsPauseOsdVisible = false;                ScreenStateChanged();                UpdateGUI();              }            }            break;            case Action.ActionType.ACTION_FORWARD:            {              if (g_Player.IsTimeShifting || g_Player.IsTVRecording)              {                _isPauseOsdVisible = false;                GUIWindowManager.IsPauseOsdVisible = false;                ScreenStateChanged();                UpdateGUI();              }            }            break;            case Action.ActionType.ACTION_PREVIOUS_MENU:          case Action.ActionType.ACTION_SHOW_GUI:            Log.Debug("TvFullScreen: show gui");            GUIWindowManager.ShowPreviousWindow();            return;            case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD            {              Log.Debug("TvFullScreen.OSD:ON");              ShowMainOSD();            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:          case Action.ActionType.ACTION_STEP_BACK:            {              if (g_Player.IsTimeShifting || g_Player.IsTVRecording)              {                if (g_Player.Paused)                {                  g_Player.Pause();                  _isPauseOsdVisible = false;                  GUIWindowManager.IsPauseOsdVisible = false;                  ScreenStateChanged();                  UpdateGUI();                }                _stepSeekVisible = true;                _statusTimeOutTimer = DateTime.Now;                g_Player.SeekStep(false);                string strStatus = g_Player.GetStepDescription();                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                (int)Control.LABEL_ROW1' 0' 0' null);                msg.Label = strStatus;                OnMessage(msg);              }            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:          case Action.ActionType.ACTION_STEP_FORWARD:            {              if (g_Player.IsTimeShifting || g_Player.IsTVRecording)              {                if (g_Player.Paused)                {                  g_Player.Pause();                  _isPauseOsdVisible = false;                  GUIWindowManager.IsPauseOsdVisible = false;                  ScreenStateChanged();                  UpdateGUI();                }                _stepSeekVisible = true;                _statusTimeOutTimer = DateTime.Now;                g_Player.SeekStep(true);                string strStatus = g_Player.GetStepDescription();                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                (int)Control.LABEL_ROW1' 0' 0' null);                msg.Label = strStatus;                OnMessage(msg);              }            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:          case Action.ActionType.ACTION_BIG_STEP_BACK:            {              if (g_Player.IsTimeShifting || g_Player.IsTVRecording)              {                if (g_Player.Paused)                {                  g_Player.Pause();                  _isPauseOsdVisible = false;                  GUIWindowManager.IsPauseOsdVisible = false;                  ScreenStateChanged();                  UpdateGUI();                }                _statusVisible = true;                _statusTimeOutTimer = DateTime.Now;                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                  (int)Control.LABEL_ROW1' 0' 0' null);                msg.Label = "";                OnMessage(msg);                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(-_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(-_immediateSeekValue);                }              }            }            break;            case Action.ActionType.ACTION_MOVE_UP:          case Action.ActionType.ACTION_BIG_STEP_FORWARD:            {              if (g_Player.IsTimeShifting || g_Player.IsTVRecording)              {                if (g_Player.Paused)                {                  g_Player.Pause();                  _isPauseOsdVisible = false;                  GUIWindowManager.IsPauseOsdVisible = false;                  ScreenStateChanged();                  UpdateGUI();                }                _statusVisible = true;                _statusTimeOutTimer = DateTime.Now;                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                  (int)Control.LABEL_ROW1' 0' 0' null);                msg.Label = "";                OnMessage(msg);                if (_immediateSeekIsRelative)                {                  g_Player.SeekRelativePercentage(_immediateSeekValue);                }                else                {                  g_Player.SeekRelative(_immediateSeekValue);                }              }            }            break;            case Action.ActionType.ACTION_PAUSE:            {              ScreenStateChanged();              UpdateGUI();              if (g_Player.Paused)              {                if ((GUIGraphicsContext.Vmr9Active && VMR9Util.g_vmr9 != null))                {                  VMR9Util.g_vmr9.SetRepaint();                  VMR9Util.g_vmr9.Repaint(); // repaint vmr9                }                 _osdTimeoutTimer = DateTime.Now;                GUIWindowManager.IsPauseOsdVisible = true;              }              else              {                  GUIWindowManager.IsPauseOsdVisible = false;              }            }            break;            case Action.ActionType.ACTION_PLAY:          case Action.ActionType.ACTION_MUSIC_PLAY:                {                    GUIWindowManager.IsPauseOsdVisible = false;                    break;                }              case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;            case Action.ActionType.ACTION_AUTOZAP:            StartAutoZap();            break;            case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:          case Action.ActionType.ACTION_NEXT_AUDIO:            {              //IAudioStream[] streams = TVHome.Card.AvailableAudioStreams;                if (g_Player.AudioStreams > 1)              {                int newIndex = 0;                int oldIndex = 0;                string audioLang = g_Player.AudioLanguage(oldIndex);                oldIndex = g_Player.CurrentAudioStream;                g_Player.SwitchToNextAudio();                  newIndex = g_Player.CurrentAudioStream;                  if (newIndex + 1 > g_Player.AudioStreams)                {                  newIndex = 0;                }                  Log.Debug("TvFullScreen.Switching from audio stream {0} to {1}"' oldIndex' newIndex);                  // Show OSD Label                _statusVisible = true;                _statusTimeOutTimer = DateTime.Now;                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                (int)Control.LABEL_ROW1' 0' 0' null);                //msg.Label = string.Format("{0}:{1} ({2}/{3})"' streams[newIndex].StreamType' streams[newIndex].Language' newIndex + 1' streams.Length);                msg.Label = string.Format("{0}:{1} ({2}/{3})"' g_Player.AudioType(newIndex)'                                          g_Player.AudioLanguage(newIndex)' newIndex + 1' g_Player.AudioStreams);                  Log.Debug(msg.Label);                OnMessage(msg);              }            }            break;            case Action.ActionType.ACTION_STOP:            if (g_Player.IsTVRecording)            {              g_Player.Stop();            }            if (g_Player.IsTimeShifting && CanStopTimeshifting())            {              g_Player.Stop();            }            break;        }
Missing Default,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {            #region case GUI_MSG_HIDE_MESSAGE            case GUIMessage.MessageType.GUI_MSG_HIDE_MESSAGE:            {              _messageBoxVisible = false;            }            break;              #endregion              #region case GUI_MSG_SHOW_MESSAGE            case GUIMessage.MessageType.GUI_MSG_SHOW_MESSAGE:            {              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                              (int)Control.MSG_BOX_LABEL1' 0' 0' null);              msg.Label = message.Label;              OnMessage(msg);                msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.MSG_BOX_LABEL2' 0' 0'                                   null);              msg.Label = message.Label2;              OnMessage(msg);                msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.MSG_BOX_LABEL3' 0' 0'                                   null);              msg.Label = message.Label3;              OnMessage(msg);                msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.MSG_BOX_LABEL4' 0' 0'                                   null);              msg.Label = message.Label4;              OnMessage(msg);                _messageBoxVisible = true;              // Set specified timeout              _msgBoxTimeout = message.Param1;              _msgTimer = DateTime.Now;            }            break;              #endregion              #region case GUI_MSG_WINDOW_DEINIT            case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:            {              lock (this) {                Log.Debug("TvFullScreen:deinit->OSD:Off");                HideMainOSD();                  _isOsdVisible = false;                _isPauseOsdVisible = false;                GUIWindowManager.IsOsdVisible = false;                GUIWindowManager.IsPauseOsdVisible = false;                _channelInputVisible = false;                _keyPressedTimer = DateTime.Now;                _channelName = "";                  _stepSeekVisible = false;                _statusVisible = false;                _groupVisible = false;                _notifyDialogVisible = false;                _dialogYesNoVisible = false;                _bottomDialogMenuVisible = false;                _statusTimeOutTimer = DateTime.Now;                  _screenState.ContextMenuVisible = false;                _screenState.MsgBoxVisible = false;                _screenState.OsdVisible = false;                _screenState.Paused = false;                _screenState.ShowGroup = false;                _screenState.ShowInput = false;                _screenState.ShowStatusLine = false;                _screenState.ShowTime = false;                _screenState.ZapOsdVisible = false;                _needToClearScreen = false;                  GUIGraphicsContext.IsFullScreenVideo = false;                GUILayerManager.UnRegisterLayer(this);                  base.OnMessage(message);              }              return true;            }              #endregion              #region case GUI_MSG_WINDOW_INIT            case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);                if (!SettingsLoaded)                LoadSettings();              GUIGraphicsContext.IsFullScreenVideo = true;                _osdWindow = (TvOsd)GUIWindowManager.GetWindow((int)Window.WINDOW_TVOSD);              _zapWindow = (TvZapOsd)GUIWindowManager.GetWindow((int)Window.WINDOW_TVZAPOSD);                _lastPause = g_Player.Paused;              _lastSpeed = g_Player.Speed;                Log.Debug("TvFullScreen:init->OSD:Off");              Log.Debug("TvFullScreen: init' playing {0}' player.CurrentFile {1}' TVHome.Card.TimeShiftFileName {2}"'                        g_Player.Playing' g_Player.CurrentFile' TVHome.Card.TimeShiftFileName);                _isOsdVisible = false;              GUIWindowManager.IsOsdVisible = false;              _channelInputVisible = false;              _keyPressedTimer = DateTime.Now;              _channelName = "";                _isPauseOsdVisible = _lastPause;              GUIWindowManager.IsPauseOsdVisible = _lastPause;              //_zapTimeOutTimer=DateTime.Now;              _osdTimeoutTimer = DateTime.Now;                _stepSeekVisible = false;              _statusVisible = false;              _groupVisible = false;              _notifyDialogVisible = false;              _dialogYesNoVisible = false;              _bottomDialogMenuVisible = false;              _statusTimeOutTimer = DateTime.Now;              //imgVolumeBar.Current = VolumeHandler.Instance.Step;              //imgVolumeBar.Maximum = VolumeHandler.Instance.StepMax;                ResetAllControls(); // make sure the controls are positioned relevant to the OSD Y offset              ScreenStateChanged();              UpdateGUI();                GUIGraphicsContext.IsFullScreenVideo = true;              GUILayerManager.RegisterLayer(this' GUILayerManager.LayerType.Osd);                RenderVolume(false);                //return base.OnMessage(message);              return true;            }              #endregion              #region case GUI_MSG_SETFOCUS            case GUIMessage.MessageType.GUI_MSG_SETFOCUS:            goto case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS;              #endregion              #region case GUI_MSG_LOSTFOCUS            case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS:            if (_isOsdVisible)            {              return true;            }            if (message.SenderControlId != (int)Window.WINDOW_TVFULLSCREEN)            {              return true;            }            break;              #endregion        }
Missing Default,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowContextMenu,The following switch statement is missing a default case: switch (dlg.SelectedId)        {          case 4: // TVGuide            {              TvNewScheduleSearch.SearchFor = TvNewScheduleSearch.SearchType.KeyWord;              GUIWindowManager.ActivateWindow((int)Window.WINDOW_TVGUIDE);              break;            }            case 10104: // MiniEPG            {              ShowMiniEpg();              break;            }            case 941: // Change aspect ratio            ShowAspectRatioMenu();            break;            case 2700: // Open CI Menu            PrepareCiMenu();            break;            //case 6008: // TvChannel sort          //  SortChannels();          //  break;            case 492: // Show audio language menu            ShowAudioLanguageMenu();            break;            case 200059:            ShowAudioDualMonoModeMenu(dualMonoMode);            break;            case 1441: // Fullscreen teletext            GUIWindowManager.ActivateWindow((int)Window.WINDOW_FULLSCREEN_TELETEXT);            break;            case 970:            // switch back to previous window            _isOsdVisible = false;            GUIWindowManager.IsOsdVisible = false;            GUIGraphicsContext.IsFullScreenVideo = false;            GUIWindowManager.ShowPreviousWindow();            break;            case 11000:            TvCropSettings cropSettings =              (TvCropSettings)GUIWindowManager.GetWindow((int)Window.WINDOW_TV_CROP_SETTINGS);            _isDialogVisible = true;            cropSettings.DoModal(GetID);            _isDialogVisible = false;            break;            case 100748: // Show Program Info            ShowProgramInfo();            break;            case 601: // RecordNow                    case 265: // StopRec.                      TVHome.ManualRecord(TVHome.Navigator.Channel' GetID);            break;            case 200042: // Linked channels            CacheManager.Clear();            linkages = layer.GetLinkagesForChannel(TVHome.Navigator.Channel);            ShowLinkedChannelsMenu(linkages);            break;            case 200041: // Tuning details            GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_TUNING_DETAILS);            break;            case 882: // Quality settings            ShowQualitySettingsMenu();            break;            case 368: // IMDB            OnGetIMDBInfo();            break;            case 200091:            ShowChapterStreamsMenu();            break;            case 462:            ShowSubtitleStreamsMenu();            break;            case 200073:            ShowPostProcessingMenu();            break;        }
Missing Default,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowQualitySettingsMenu,The following switch statement is missing a default case: switch (_newBitRate)          {            case VIDEOENCODER_BITRATE_MODE.ConstantBitRate:              dlg.SelectedLabel = 0;              break;            case VIDEOENCODER_BITRATE_MODE.VariableBitRateAverage:              dlg.SelectedLabel = 1;              break;            case VIDEOENCODER_BITRATE_MODE.VariableBitRatePeak:              dlg.SelectedLabel = 2;              break;          }
Missing Default,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowQualitySettingsMenu,The following switch statement is missing a default case: switch (dlg.SelectedLabel)          {            case 0: // CBR              _newBitRate = VIDEOENCODER_BITRATE_MODE.ConstantBitRate;              break;              case 1: // VBR              _newBitRate = VIDEOENCODER_BITRATE_MODE.VariableBitRateAverage;              break;              case 2: // VBR Peak              _newBitRate = VIDEOENCODER_BITRATE_MODE.VariableBitRatePeak;              break;          }
Missing Default,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowQualitySettingsMenu,The following switch statement is missing a default case: switch (_newQuality)          {            case QualityType.Default:              dlg.SelectedLabel = 0;              break;            case QualityType.Custom:              dlg.SelectedLabel = 1;              break;            case QualityType.Portable:              dlg.SelectedLabel = 2;              break;            case QualityType.Low:              dlg.SelectedLabel = 3;              break;            case QualityType.Medium:              dlg.SelectedLabel = 4;              break;            case QualityType.High:              dlg.SelectedLabel = 5;              break;          }
Missing Default,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowQualitySettingsMenu,The following switch statement is missing a default case: switch (dlg.SelectedLabel)          {            case 0: // Default              _newQuality = QualityType.Default;              break;              case 1: // Custom              _newQuality = QualityType.Custom;              break;              case 2: // Protable              _newQuality = QualityType.Portable;              break;              case 3: // Low              _newQuality = QualityType.Low;              break;              case 4: // Medium              _newQuality = QualityType.Medium;              break;              case 5: // High              _newQuality = QualityType.High;              break;          }
Missing Default,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,ShowPostProcessingMenu,The following switch statement is missing a default case: switch (dlg.SelectedLabel)          {            case 0: engine.EnablePostProcess = !engine.EnablePostProcess; break;            case 1: engine.EnableResize = !engine.EnableResize; break;            case 2: engine.EnableCrop = !engine.EnableCrop; break;            case 3: engine.EnableDeinterlace = !engine.EnableDeinterlace; break;          }
Missing Default,TvPlugin,TvFullScreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvFullScreen.cs,UpdateGUI,The following switch statement is missing a default case: switch (speed)        {          case 2:            ShowControl(GetID' (int)Control.IMG_2X);            break;          case 4:            ShowControl(GetID' (int)Control.IMG_4X);            break;          case 8:            ShowControl(GetID' (int)Control.IMG_8X);            break;          case 16:            ShowControl(GetID' (int)Control.IMG_16X);            break;          case 32:            ShowControl(GetID' (int)Control.IMG_32X);            break;          case -2:            ShowControl(GetID' (int)Control.IMG_MIN2X);            break;          case -4:            ShowControl(GetID' (int)Control.IMG_MIN4X);            break;          case -8:            ShowControl(GetID' (int)Control.IMG_MIN8X);            break;          case -16:            ShowControl(GetID' (int)Control.IMG_MIN16X);            break;          case -32:            ShowControl(GetID' (int)Control.IMG_MIN32X);            break;        }
Missing Default,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_singleChannelView)            {              OnSwitchMode(true);              return;            }            GUIWindowManager.ShowPreviousWindow();            return;            case Action.ActionType.ACTION_KEY_PRESSED:            if (action.m_key != null)            {              OnKeyCode((char)action.m_key.KeyChar);            }            break;            case Action.ActionType.ACTION_RECORD:            if ((GetFocusControlId() != -1) && (_cursorY > 0) && (_cursorX >= 0))            {              OnRecord();            }            break;            case Action.ActionType.ACTION_MOUSE_MOVE:            {              int x = (int)action.fAmount1;              int y = (int)action.fAmount2;              foreach (GUIControl control in controlList)              {                if (control.GetID >= (int)Controls.IMG_CHAN1 + 0 &&                    control.GetID <= (int)Controls.IMG_CHAN1 + _channelCount)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      UnFocus();                      _cursorX = control.GetID - (int)Controls.IMG_CHAN1;                      _cursorY = 0;                        if (_singleChannelNumber != _cursorX + ChannelOffset)                      {                        Update(false);                      }                      UpdateCurrentProgram();                      UpdateHorizontalScrollbar();                      UpdateVerticalScrollbar();                      updateSingleChannelNumber();                      return;                    }                  }                }                if (control.GetID >= GUIDE_COMPONENTID_START)                {                  if (x >= control.XPosition && x < control.XPosition + control.Width)                  {                    if (y >= control.YPosition && y < control.YPosition + control.Height)                    {                      int iControlId = control.GetID;                      if (iControlId >= GUIDE_COMPONENTID_START)                      {                        iControlId -= GUIDE_COMPONENTID_START;                        int iCursorY = (iControlId / RowID);                        iControlId -= iCursorY * RowID;                        if (iControlId % ColID == 0)                        {                          int iCursorX = (iControlId / ColID) + 1;                          if (iCursorY != _cursorX || iCursorX != _cursorY)                          {                            UnFocus();                            _cursorX = iCursorY;                            _cursorY = iCursorX;                            UpdateCurrentProgram();                            SetFocus();                            UpdateHorizontalScrollbar();                            UpdateVerticalScrollbar();                            updateSingleChannelNumber();                            return;                          }                          return;                        }                      }                    }                  }                }              }              UnFocus();              _cursorY = -1;              _cursorX = -1;              base.OnAction(action);            }            break;            case Action.ActionType.ACTION_TVGUIDE_RESET:            _cursorY = 0;            _viewingTime = DateTime.Now;            Update(false);            break;              case Action.ActionType.ACTION_CONTEXT_MENU:            {              if (_cursorY >= 0 && _cursorX >= 0)              {                if (_cursorY == 0)                {                  _backupSingleViewCursorX = _cursorX;                  OnSwitchMode(false);                  return;                }                else                {                  ShowContextMenu();                }              }              else              {                action.wID = Action.ActionType.ACTION_SELECT_ITEM;                GUIWindowManager.OnAction(action);              }            }            break;            case Action.ActionType.ACTION_PAGE_UP:            OnPageUp();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_PAGE_DOWN:            OnPageDown();            updateSingleChannelNumber();            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (_cursorX >= 0)              {                OnLeft();                updateSingleChannelNumber();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (_cursorX >= 0)              {                OnRight();                UpdateHorizontalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_UP:            {              if (_cursorX >= 0)              {                OnUp(true' false);                updateSingleChannelNumber();                UpdateVerticalScrollbar();                return;              }            }            break;          case Action.ActionType.ACTION_MOVE_DOWN:            {              if (_cursorX >= 0)              {                OnDown(true);                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              else              {                _cursorX = 0;                SetFocus();                updateSingleChannelNumber();                UpdateVerticalScrollbar();              }              return;            }            //break;          case Action.ActionType.ACTION_SHOW_INFO:            {              ShowContextMenu();            }            break;          case Action.ActionType.ACTION_INCREASE_TIMEBLOCK:            {              _timePerBlock += 15;              if (_timePerBlock > 60)              {                _timePerBlock = 60;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;            case Action.ActionType.ACTION_REWIND:          case Action.ActionType.ACTION_MUSIC_REWIND:            _viewingTime = _viewingTime.AddHours(-3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_FORWARD:          case Action.ActionType.ACTION_MUSIC_FORWARD:            _viewingTime = _viewingTime.AddHours(3);            Update(false);            SetFocus();            break;            case Action.ActionType.ACTION_DECREASE_TIMEBLOCK:            {              if (_timePerBlock > 15)              {                _timePerBlock -= 15;              }              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_DEFAULT_TIMEBLOCK:            {              _timePerBlock = 30;              GUISpinControl cntlTimeInterval = GetControl((int)Controls.SPINCONTROL_TIME_INTERVAL) as GUISpinControl;              cntlTimeInterval.Value = (_timePerBlock / 15) - 1;              Update(false);              SetFocus();            }            break;          case Action.ActionType.ACTION_TVGUIDE_INCREASE_DAY:            OnNextDay();            break;            case Action.ActionType.ACTION_TVGUIDE_DECREASE_DAY:            OnPreviousDay();            break;            // TV group changing actions          case Action.ActionType.ACTION_TVGUIDE_NEXT_GROUP:            OnChangeChannelGroup(1);            break;            case Action.ActionType.ACTION_TVGUIDE_PREV_GROUP:            OnChangeChannelGroup(-1);            break;        }
Missing Default,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,ShowContextMenu,The following switch statement is missing a default case: switch (dlg.SelectedId)          {              case 1041:              ShowProgramInfo();              Log.Debug("TVGuide: show episodes or repeatings for current show");              break;            case 368: // IMDB              OnGetIMDBInfo();              break;            case 971: //group              OnSelectChannelGroup();              break;            case 1040: // set reminder            case 1212: // cancel reminder              OnNotify();              break;              case 938: // view channel                Log.Debug("viewch channel:{0}"' _currentChannel);              TVHome.ViewChannelAndCheck(_currentProgram.ReferencedChannel());              if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == _currentProgram.ReferencedChannel().IdChannel)              {                g_Player.ShowFullScreenWindow();              }              return;                case 939: // switch mode              _backupSingleViewCursorX = _cursorX;              OnSwitchMode(false);              break;            case 629: //stop recording              Schedule schedule = Schedule.FindNoEPGSchedule(_currentProgram.ReferencedChannel());              TVUtil.DeleteRecAndEntireSchedWithPrompt(schedule);              Update(true); //remove RED marker              break;              case 2162: // Remove channel              OnRemoveChannel();                break;              case 2163: // Add channel to a group              OnAddChannelToGroup();                break;              case 2164: // Remove channel from this group              OnRemoveChannelFromGroup();                break;              case 637: // edit recording            case 264: // record              if (_currentProgram.IdProgram == 0)              {                TVHome.StartRecordingSchedule(_currentProgram.ReferencedChannel()' true);                _currentProgram.IsRecordingOncePending = true;                Update(true); //remove RED marker              }              else              {                OnRecordContext();              }              break;          }
Missing Default,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnSelectItem,The following switch statement is missing a default case: switch (dlg.SelectedId)                  {                    case 979: // Play recording from beginning                      {                        Recording recDB = Recording.Retrieve(fileName);                        if (recDB != null)                        {                          TVUtil.PlayRecording(recDB);                        }                      }                      return tuneAttempted;                      case 938: // View this channel                      {                        TVHome.ViewChannelAndCheck(_currentProgram.ReferencedChannel());                        if (g_Player.Playing)                        {                          g_Player.ShowFullScreenWindow();                        }                      }                      tuneAttempted = true;                      return tuneAttempted;                  }
Missing Default,TvPlugin,TvGuideBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvGuideBase.cs,OnSelectItem,The following switch statement is missing a default case: switch (dlg.SelectedId)                  {                    case 1041:                      ShowProgramInfo();                      Log.Debug("TVGuide: show episodes or repeatings for current show");                      break;                    case 938:                      Log.Debug("TVGuide: switch currently running show to fullscreen");                      GUIWaitCursor.Show();                      try                      {                        TVHome.ViewChannelAndCheck(_currentProgram.ReferencedChannel());                      }                      finally                      {                        GUIWaitCursor.Hide();                      }                      if (g_Player.Playing)                      {                        g_Player.ShowFullScreenWindow();                      }                      else                      {                        Log.Debug("TVGuide: no show currently running to switch to fullscreen");                      }                      tuneAttempted = true;                      break;                  }
Missing Default,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)        {          case Action.ActionType.ACTION_RECORD:            // record current program on current channel            // are we watching tv?                                ManualRecord(Navigator.Channel' GetID);            break;          case Action.ActionType.ACTION_PREV_CHANNEL:            OnPreviousChannel();            break;          case Action.ActionType.ACTION_PAGE_DOWN:            OnPreviousChannel();            break;          case Action.ActionType.ACTION_NEXT_CHANNEL:            OnNextChannel();            break;          case Action.ActionType.ACTION_PAGE_UP:            OnNextChannel();            break;          case Action.ActionType.ACTION_LAST_VIEWED_CHANNEL:            OnLastViewedChannel();            break;          case Action.ActionType.ACTION_PREVIOUS_MENU:            {              // goto home               // are we watching tv & doing timeshifting                // No' then stop viewing...               //g_Player.Stop();              GUIWindowManager.ShowPreviousWindow();              return;            }          case Action.ActionType.ACTION_KEY_PRESSED:            {              if ((char)action.m_key.KeyChar == '0')              {                OnLastViewedChannel();              }            }            break;          case Action.ActionType.ACTION_SHOW_GUI:            {              // If we are in tvhome and TV is currently off and no fullscreen TV then turn ON TV now!              if (!g_Player.IsTimeShifting && !g_Player.FullScreen)              {                OnClicked(8' btnTvOnOff' Action.ActionType.ACTION_MOUSE_CLICK); //8=togglebutton              }              break;            }        }
Missing Default,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.PS_ONSTANDBY:            RemoteControl.Clear();            break;          case GUIMessage.MessageType.GUI_MSG_RESUME_TV:            {              // we only want to resume TV if previous window is NOT a tvplugin based one. (ex. tvguide.)              if (_autoTurnOnTv && !wasPrevWinTVplugin())              {                //restart viewing...                  Log.Info("tv home msg resume tv:{0}"' Navigator.CurrentChannel);                ViewChannel(Navigator.Channel);              }            }            break;        }
Missing Default,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,WndProc,The following switch statement is missing a default case: switch (msg.WParam.ToInt32())          {            case PBT_APMSTANDBY:              Log.Info("TVHome.WndProc(): Windows is going to standby");              OnSuspend();              break;            case PBT_APMSUSPEND:              Log.Info("TVHome.WndProc(): Windows is suspending");              OnSuspend();              break;            case PBT_APMQUERYSUSPEND:            case PBT_APMQUERYSTANDBY:              Log.Info("TVHome.WndProc(): Windows is going into powerstate (hibernation/standby)");              break;            case PBT_APMRESUMESUSPEND:            case PBT_APMRESUMEAUTOMATIC:              Log.Info("TVHome.WndProc(): Windows has resumed from hibernate mode");              OnResume();              break;            case PBT_APMRESUMESTANDBY:              Log.Info("TVHome.WndProc(): Windows has resumed from standby mode");              OnResume();              break;          }
Missing Default,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,OnGlobalMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_STOP_SERVER_TIMESHIFTING:            {              User user = new User();              if (user.Name == Card.User.Name)              {                Card.StopTimeShifting();              }              break;            }          case GUIMessage.MessageType.GUI_MSG_GET_PROGRAM_INFO:            {              if (!Radio.CurrentChannel.IsWebstream() && Navigator.Channel != null && Navigator.Channel.CurrentProgram.Title != null                && Navigator.Channel.NextProgram.Title != null)              {                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_SEND_PROGRAM_INFO' 0' 0' 0' 0' 0' null);                msg.Label = Navigator.Channel.CurrentProgram.Title;                msg.Label2 = Navigator.Channel.NextProgram.Title;                GUIWindowManager.SendMessage(msg);              }              break;            }          case GUIMessage.MessageType.GUI_MSG_NOTIFY_REC:            string heading = message.Label;            string text = message.Label2;            Channel ch = message.Object as Channel;            //Log.Debug("Received rec notify message: {0}' {1}' {2}"' heading' text' (ch != null).ToString()); //remove later            string logo = TVUtil.GetChannelLogo(ch);            GUIDialogNotify pDlgNotify = (GUIDialogNotify)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_NOTIFY);            if (pDlgNotify != null)            {              pDlgNotify.Reset();              pDlgNotify.ClearAll();              pDlgNotify.SetHeading(heading);              if (!string.IsNullOrEmpty(text))              {                pDlgNotify.SetText(text);              }              pDlgNotify.SetImage(logo);              pDlgNotify.TimeOut = 5;                pDlgNotify.DoModal(GUIWindowManager.ActiveWindow);            }            break;          case GUIMessage.MessageType.GUI_MSG_NOTIFY_TV_PROGRAM:            {              TVNotifyYesNoDialog tvNotifyDlg = (TVNotifyYesNoDialog)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_TVNOTIFYYESNO);                TVProgramDescription notify = message.Object as TVProgramDescription;              if (tvNotifyDlg == null || notify == null)              {                return;              }              int minUntilStart = _preNotifyConfig / 60;              if (notify.StartTime > DateTime.Now)              {                if (minUntilStart > 1)                {                  tvNotifyDlg.SetHeading(String.Format(GUILocalizeStrings.Get(1018)' minUntilStart));                }                else                {                  tvNotifyDlg.SetHeading(1019); // Program is about to begin                }              }              else              {                tvNotifyDlg.SetHeading(String.Format(GUILocalizeStrings.Get(1206)' (DateTime.Now - notify.StartTime).Minutes.ToString()));              }              tvNotifyDlg.SetLine(1' notify.Title);              tvNotifyDlg.SetLine(2' notify.Description);              tvNotifyDlg.SetLine(4' String.Format(GUILocalizeStrings.Get(1207)' notify.Channel.DisplayName));              Channel c = notify.Channel;              string strLogo = string.Empty;              if (c.IsTv)              {                strLogo = MediaPortal.Util.Utils.GetCoverArt(Thumbs.TVChannel' c.DisplayName);              }              else if (c.IsRadio)              {                strLogo = MediaPortal.Util.Utils.GetCoverArt(Thumbs.Radio' c.DisplayName);              }                tvNotifyDlg.SetImage(strLogo);              tvNotifyDlg.TimeOut = _notifyTVTimeout;              if (_playNotifyBeep)              {                MediaPortal.Util.Utils.PlaySound("notify.wav"' false' true);              }              tvNotifyDlg.SetDefaultToYes(false);              tvNotifyDlg.DoModal(GUIWindowManager.ActiveWindow);                if (tvNotifyDlg.IsConfirmed)              {                try                {                  MediaPortal.Player.g_Player.Stop();                    if (c.IsTv)                  {                    MediaPortal.GUI.Library.GUIWindowManager.ActivateWindow((int)MediaPortal.GUI.Library.GUIWindow.Window.WINDOW_TV);                    TVHome.ViewChannelAndCheck(c);                    if (TVHome.Card.IsTimeShifting && TVHome.Card.IdChannel == c.IdChannel)                    {                      g_Player.ShowFullScreenWindow();                    }                  }                  else if (c.IsRadio)                  {                    MediaPortal.GUI.Library.GUIWindowManager.ActivateWindow((int)MediaPortal.GUI.Library.GUIWindow.Window.WINDOW_RADIO);                    Radio.CurrentChannel = c;                    Radio.Play();                  }                }                catch (Exception e)                {                  Log.Error("TVHome: TVNotification: Error on starting channel {0} after notification: {1} {2} {3}"' notify.Channel.DisplayName' e.Message' e.Source' e.StackTrace);                }                }              break;            }        }
Missing Default,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ManualRecord,The following switch statement is missing a default case: switch (pDlgOK.SelectedId)              {                case 875:                  //record current program                                    TVProgramInfo.CreateProgram(prog' (int)ScheduleRecordingType.Once' dialogId);                  GUIMessage msgManualRecord = new GUIMessage(GUIMessage.MessageType.GUI_MSG_MANUAL_RECORDING_STARTED' 0' 0' 0' 0' 0' null);                  GUIWindowManager.SendMessage(msgManualRecord);                  return true;                  case 876:                  //manual                  StartRecordingSchedule(channel' true);                  return true;               }
Missing Default,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,UpdateAudioProperties,The following switch statement is missing a default case: switch (streamType)        {          case "AC3":          case "AC3plus": // just for the time being use the same icon for AC3 & AC3plus            GUIPropertyManager.SetProperty("#TV.View.IsAC3"'                                           string.Format("{0}{1}{2}"' GUIGraphicsContext.Skin' @"\Media\Logos\"'                                                         "ac3.png"));            break;            case "Mpeg1":            GUIPropertyManager.SetProperty("#TV.View.IsMP1A"'                                           string.Format("{0}{1}{2}"' GUIGraphicsContext.Skin' @"\Media\Logos\"'                                                         "mp1a.png"));            break;            case "Mpeg2":            GUIPropertyManager.SetProperty("#TV.View.IsMP2A"'                                           string.Format("{0}{1}{2}"' GUIGraphicsContext.Skin' @"\Media\Logos\"'                                                         "mp2a.png"));            break;            case "AAC":            GUIPropertyManager.SetProperty("#TV.View.IsAAC"'                                           string.Format("{0}{1}{2}"' GUIGraphicsContext.Skin' @"\Media\Logos\"'                                                         "aac.png"));            break;            case "LATMAAC":            GUIPropertyManager.SetProperty("#TV.View.IsLATMAAC"'                                           string.Format("{0}{1}{2}"' GUIGraphicsContext.Skin' @"\Media\Logos\"'                                                         "latmaac3.png"));            break;        }
Missing Default,TvPlugin,TVHome,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVHome.cs,ShowCiMenu,The following switch statement is missing a default case: switch (currentCiMenu.State)        {          // choices available' so show them          case TvLibrary.Interfaces.CiMenuState.Ready:            dlgCiMenu.Reset();            dlgCiMenu.SetHeading(currentCiMenu.Title' currentCiMenu.Subtitle' currentCiMenu.BottomText); // CI Menu              for (int i = 0; i < currentCiMenu.NumChoices; i++) // CI Menu Entries              dlgCiMenu.Add(currentCiMenu.MenuEntries[i].Message); // take only message' numbers come from dialog              // show dialog and wait for result                   dlgCiMenu.DoModal(GUIWindowManager.ActiveWindow);            if (currentCiMenu.State != TvLibrary.Interfaces.CiMenuState.Error)            {              if (dlgCiMenu.SelectedId != -1)              {                TVHome.Card.SelectCiMenu(Convert.ToByte(dlgCiMenu.SelectedId));              }              else              {                if (CiMenuList.Count == 0)      // Another menu is pending' do not answer...                  TVHome.Card.SelectCiMenu(0); // 0 means "back"              }            }            else            {              TVHome.Card.CloseMenu(); // in case of error close the menu            }            break;            // errors and menu options with no choices          case TvLibrary.Interfaces.CiMenuState.Error:          case TvLibrary.Interfaces.CiMenuState.NoChoices:              if (_dialogNotify == null)            {              _dialogNotify = (GUIDialogNotify)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_NOTIFY);            }            if (null != _dialogNotify)            {              _dialogNotify.Reset();              _dialogNotify.ClearAll();              _dialogNotify.SetHeading(currentCiMenu.Title);              _dialogNotify.SetText(String.Format("{0}\r\n{1}"' currentCiMenu.Subtitle' currentCiMenu.BottomText));              _dialogNotify.TimeOut = 2; // seconds              _dialogNotify.DoModal(GUIWindowManager.ActiveWindow);            }            break;            // requests require users input so open keyboard          case TvLibrary.Interfaces.CiMenuState.Request:            String result = "";            if (              GetKeyboard(currentCiMenu.RequestText' currentCiMenu.AnswerLength' currentCiMenu.Password' ref result) ==              true)            {              TVHome.Card.SendMenuAnswer(false' result); // send answer' cancel=false            }            else            {              TVHome.Card.SendMenuAnswer(true' null); // cancel request             }            break;          case CiMenuState.Close:            if (_dialogNotify != null)            {              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT' _dialogNotify.GetID' 0' 0' 0' 0' null);              _dialogNotify.OnMessage(msg);	// Send a de-init msg to hide the current notify dialog            }            if (dlgCiMenu != null)            {              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT' dlgCiMenu.GetID' 0' 0' 0' 0' null);              dlgCiMenu.OnMessage(msg);	// Send a de-init msg to hide the current CI menu dialog            }            break;        }
Missing Default,TvPlugin,TvMiniGuide,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvMiniGuide.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              if (message.SenderControlId == 35 || message.SenderControlId == 37) // listbox              {                if ((int)Action.ActionType.ACTION_SELECT_ITEM == message.Param1)                {                  // switching logic                  SelectedChannel = (Channel)lstChannels.SelectedListItem.TVTag;                    Channel changeChannel = null;                  if (AutoZap)                  {                    if (TVHome.Navigator.Channel.IdChannel != SelectedChannel.IdChannel || !g_Player.IsTimeShifting || g_Player.IsTVRecording)                    {                      List<Channel> tvChannelList = GetChannelListByGroup();                      if (tvChannelList != null)                      {                        changeChannel = (Channel)tvChannelList[lstChannels.SelectedListItemIndex];                      }                    }                  }                  _canceled = false;                  PageDestroy();                    //This one shows the zapOSD when changing channel from mini GUIDE' this is currently unwanted.                  /*                  TvFullScreen TVWindow = (TvFullScreen)GUIWindowManager.GetWindow((int)(int)GUIWindow.Window.WINDOW_TVFULLSCREEN);                  if (TVWindow != null) TVWindow.UpdateOSD(changeChannel.Name);                                  */                    TVHome.UserChannelChanged = true;                    if (changeChannel != null)                  {                    TVHome.ViewChannel(changeChannel);                  }                }              }              else if (message.SenderControlId == 36) // spincontrol              {                // switch group                              OnGroupChanged();              }              else if (message.SenderControlId == 34) // exit button              {                // exit                _canceled = true;                PageDestroy();              }              break;            }        }
Missing Default,TvPlugin,TvMiniGuide,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvMiniGuide.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)        {          case Action.ActionType.ACTION_CONTEXT_MENU:            //_running = false;            PageDestroy();            return;          case Action.ActionType.ACTION_PREVIOUS_MENU:            //_running = false;            _canceled = true;            PageDestroy();            return;          case Action.ActionType.ACTION_MOVE_LEFT:          case Action.ActionType.ACTION_TVGUIDE_PREV_GROUP:            // switch group            spinGroup.MoveUp();            return;          case Action.ActionType.ACTION_MOVE_RIGHT:          case Action.ActionType.ACTION_TVGUIDE_NEXT_GROUP:            // switch group            spinGroup.MoveDown();            return;        }
Missing Default,TvPlugin,TvNewScheduleSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearch.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            {              GUIWindowManager.ShowPreviousWindow();              return;            }        }
Missing Default,TvPlugin,TvNewScheduleSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearch.cs,Search,The following switch statement is missing a default case: switch (SearchFor)        {          case SearchType.Genres:            listPrograms = layer.SearchProgramsPerGenre("%" + _searchKeyword + "%"' "");            break;          case SearchType.KeyWord:            listPrograms = layer.SearchProgramsByDescription("%" + _searchKeyword);            break;          case SearchType.Title:            listPrograms = layer.SearchPrograms("%" + _searchKeyword);            break;        }
Missing Default,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            {              GUIWindowManager.ShowPreviousWindow();              return;            }        }
Missing Default,TvPlugin,TvNewScheduleSearchType,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvNewScheduleSearchType.cs,OnAdvancedRecord,The following switch statement is missing a default case: switch (dlg.SelectedLabel)        {          case 0: //once            rec.ScheduleType = (int)ScheduleRecordingType.Once;            break;          case 1: //everytime' this channel            rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;            break;          case 2: //everytime' all channels            rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;            break;          case 3: //weekly            rec.ScheduleType = (int)ScheduleRecordingType.Weekly;            break;          case 4: //daily            rec.ScheduleType = (int)ScheduleRecordingType.Daily;            break;          case 5: //WorkingDays            rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;            break;          case 6: //Weekend            rec.ScheduleType = (int)ScheduleRecordingType.Weekends;            break;          case 7://everytime weekly' this channel            rec.ScheduleType = (int) ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;            break;        }
Missing Default,TvPlugin,TVNotifyYesNoDialog,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVNotifyYesNoDialog.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              if (imgLogo != null)              {                SetImage(logoUrl);              }            }            return true;        }
Missing Default,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)        {          // translate movements (up' down' left right) back          case Action.ActionType.ACTION_STEP_BACK:            action.wID = Action.ActionType.ACTION_MOVE_LEFT;            break;            case Action.ActionType.ACTION_STEP_FORWARD:            action.wID = Action.ActionType.ACTION_MOVE_RIGHT;            break;            case Action.ActionType.ACTION_BIG_STEP_BACK:            action.wID = Action.ActionType.ACTION_MOVE_DOWN;            break;            case Action.ActionType.ACTION_BIG_STEP_FORWARD:            action.wID = Action.ActionType.ACTION_MOVE_UP;            break;            case Action.ActionType.ACTION_OSD_SHOW_LEFT:            break;            case Action.ActionType.ACTION_OSD_SHOW_RIGHT:            break;            case Action.ActionType.ACTION_OSD_SHOW_UP:            break;            case Action.ActionType.ACTION_OSD_SHOW_DOWN:            break;            case Action.ActionType.ACTION_OSD_SHOW_SELECT:            break;            case Action.ActionType.ACTION_OSD_HIDESUBMENU:            break;            case Action.ActionType.ACTION_CONTEXT_MENU:          case Action.ActionType.ACTION_PREVIOUS_MENU:          case Action.ActionType.ACTION_SHOW_OSD:            {              if (isSubMenuVisible) // is sub menu on?              {                FocusControl(GetID' m_iActiveMenuButtonID' 0); // set focus to last menu button                ToggleSubMenu(0' m_iActiveMenu); // hide the currently active sub-menu              }              if (action.wID == Action.ActionType.ACTION_CONTEXT_MENU)              {                TvFullScreen tvWindow = (TvFullScreen)GUIWindowManager.GetWindow((int)Window.WINDOW_TVFULLSCREEN);                tvWindow.OnAction(new Action(Action.ActionType.ACTION_SHOW_OSD' 0' 0));                tvWindow.OnAction(action);              }              return;            }            case Action.ActionType.ACTION_PAUSE:            {              // push a message through to this window to handle the remote control button              GUIMessage msgSet = new GUIMessage(GUIMessage.MessageType.GUI_MSG_CLICKED' GetID' (int)Controls.OSD_PAUSE'                                                 (int)Controls.OSD_PAUSE' 0' 0' null);              OnMessage(msgSet);                if (g_Player.Paused)              {                GUIWindowManager.IsPauseOsdVisible = true;              }              else              {                GUIWindowManager.IsPauseOsdVisible = false;              }              return;            }            case Action.ActionType.ACTION_PLAY:          case Action.ActionType.ACTION_MUSIC_PLAY:            {              g_Player.Speed = 1; // Single speed              ToggleButton((int)Controls.OSD_REWIND' false); // pop all the relevant              ToggleButton((int)Controls.OSD_FFWD' false); // buttons back to              ToggleButton((int)Controls.OSD_PLAY' false); // their up state              GUIWindowManager.IsPauseOsdVisible = false;              return;            }            case Action.ActionType.ACTION_STOP:            {              if (g_Player.IsTVRecording)              {                Log.Debug("TvOSD: stop from recorded TV");                g_Player.Stop();              }              if (g_Player.IsTimeShifting && CanStopTimeshifting())              {                Log.Debug("TvOSD: stop confirmed");                g_Player.Stop();              }              GUIWindowManager.IsPauseOsdVisible = false;              return;            }            case Action.ActionType.ACTION_FORWARD:            {              // push a message through to this window to handle the remote control button              GUIMessage msgSet = new GUIMessage(GUIMessage.MessageType.GUI_MSG_CLICKED' GetID' (int)Controls.OSD_FFWD'                                                 (int)Controls.OSD_FFWD' 0' 0' null);              OnMessage(msgSet);                GUIWindowManager.IsPauseOsdVisible = false;              return;            }            case Action.ActionType.ACTION_REWIND:            {              // push a message through to this window to handle the remote control button              GUIMessage msgSet = new GUIMessage(GUIMessage.MessageType.GUI_MSG_CLICKED' GetID' (int)Controls.OSD_REWIND'                                                 (int)Controls.OSD_REWIND' 0' 0' null);              OnMessage(msgSet);                GUIWindowManager.IsPauseOsdVisible = false;              return;            }            case Action.ActionType.ACTION_OSD_SHOW_VALUE_PLUS:            {              // push a message through to this window to handle the remote control button              GUIMessage msgSet = new GUIMessage(GUIMessage.MessageType.GUI_MSG_CLICKED' GetID' (int)Controls.OSD_SKIPFWD'                                                 (int)Controls.OSD_SKIPFWD' 0' 0' null);              OnMessage(msgSet);              return;            }            case Action.ActionType.ACTION_OSD_SHOW_VALUE_MIN:            {              // push a message through to this window to handle the remote control button              GUIMessage msgSet = new GUIMessage(GUIMessage.MessageType.GUI_MSG_CLICKED' GetID' (int)Controls.OSD_SKIPBWD'                                                 (int)Controls.OSD_SKIPBWD' 0' 0' null);              OnMessage(msgSet);              return;            }            case Action.ActionType.ACTION_NEXT_CHANNEL:            {              GUIWindowManager.IsPauseOsdVisible = false;              OnNextChannel();              return;            }            case Action.ActionType.ACTION_PREV_CHANNEL:            {              GUIWindowManager.IsPauseOsdVisible = false;              OnPreviousChannel();              return;            }        }
Missing Default,TvPlugin,TvOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvOSD.cs,Handle_ControlSetting,The following switch statement is missing a default case: switch (iControlID)        {          case (int)Controls.OSD_VOLUMESLIDER:          case (int)Controls.OSD_AUDIOVOLUMESLIDER:            {              GUISliderControl pControl = GetControl(iControlID) as GUISliderControl;              if (null != pControl)              {                // no volume control yet so no code here at the moment                if (g_Player.Playing)                {                  int iPercentage = pControl.Percentage;                  g_Player.Volume = iPercentage;                }              }            }            break;            case (int)Controls.OSD_VIDEOPOS:            {              g_Player.SeekAsolutePercentage((int)GetSliderValue(iControlID));            }            break;            case (int)Controls.OSD_SATURATION:            {              GUIGraphicsContext.Saturation = (int)GetSliderValue(iControlID);              UpdateGammaContrastBrightness();            }            break;            case (int)Controls.OSD_SHARPNESS:            {              GUIGraphicsContext.Sharpness = (int)GetSliderValue(iControlID);              UpdateGammaContrastBrightness();            }            break;            case (int)Controls.OSD_BRIGHTNESS:            {              GUIGraphicsContext.Brightness = (int)GetSliderValue(iControlID);              UpdateGammaContrastBrightness();            }            break;            case (int)Controls.OSD_CONTRAST:            {              GUIGraphicsContext.Contrast = (int)GetSliderValue(iControlID);              UpdateGammaContrastBrightness();            }            break;            case (int)Controls.OSD_GAMMA:            {              GUIGraphicsContext.Gamma = (int)GetSliderValue(iControlID);              UpdateGammaContrastBrightness();            }            break;            /* not used          case (int)Controls.OSD_AUDIOSTREAM_LIST:            {              }            break;            case (int)Controls.OSD_CREATEBOOKMARK:            {              }            break;            case (int)Controls.OSD_BOOKMARKS_LIST:            {              }            break;            case (int)Controls.OSD_CLEARBOOKMARKS:            {              }            break;          */            case (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF:            {              PostProcessingEngine.GetInstance().EnablePostProcess = !PostProcessingEngine.GetInstance().EnablePostProcess;            }            break;            case (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF:            {              PostProcessingEngine.GetInstance().EnableResize = !PostProcessingEngine.GetInstance().EnableResize;            }            break;            case (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF:            {              PostProcessingEngine.GetInstance().EnableDeinterlace = !PostProcessingEngine.GetInstance().EnableDeinterlace;            }            break;            case (int)Controls.OSD_SUBTITLE_ONOFF:            {              g_Player.EnableSubtitle = !g_Player.EnableSubtitle;            }            break;            case (int)Controls.OSD_SUBTITLE_LIST:            {              if (wID != 0) // check to see if list control has an action ID' remote can cause 0 based events              {                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_ITEM_SELECTED' GetID' 0'                                                (int)Controls.OSD_SUBTITLE_LIST' 0' 0' null);                OnMessage(msg); // retrieve the selected list item                if (g_Player.SupportsCC) // Subtitle CC                {                  if (g_Player.SupportsCC && msg.Param1 == 0)                  {                    msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_GET_SELECTED_ITEM' GetID' 0'                                                (int)Controls.OSD_SUBTITLE_LIST' msg.Param1' 0' null);                    g_Player.EnableSubtitle = false;                    g_Player.CurrentSubtitleStream = -1;                    Log.Info("Subtitle CC selected ");                  }                  else                  {                    Log.Info("Subtitle stream selected " + msg.Label);                    g_Player.CurrentSubtitleStream = msg.Param1 - 1; // set the current subtitle                    g_Player.EnableSubtitle = true;                  }                }                else                {                  Log.Info("Subtitle stream selected " + msg.Label);                  g_Player.CurrentSubtitleStream = msg.Param1; // set the current subtitle                }                PopulateSubTitles();              }            }            break;            case (int)Controls.OSD_SUBTITLE_DELAY:            {              GUISliderControl pControl = (GUISliderControl)GetControl(iControlID);              if (null != pControl && g_Player.EnableSubtitle)              {                if (pControl.FloatValue < m_subtitleDelay)                {                  MediaPortal.Player.Subtitles.SubEngine.GetInstance().DelayMinus((int)pControl.FloatValue);                }                else if (pControl.FloatValue > m_subtitleDelay)                {                  MediaPortal.Player.Subtitles.SubEngine.GetInstance().DelayPlus((int)pControl.FloatValue);                }                m_subtitleDelay = (int)pControl.FloatValue;              }            }            break;            case (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL:            {              GUISliderControl pControl = (GUISliderControl)GetControl(iControlID);              if (null != pControl)              {                PostProcessingEngine.GetInstance().CropVertical = pControl.Percentage;                UpdatePostProcessing();              }            }            break;            case (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL:            {              GUISliderControl pControl = (GUISliderControl)GetControl(iControlID);              if (null != pControl)              {                PostProcessingEngine.GetInstance().CropHorizontal = pControl.Percentage;                UpdatePostProcessing();              }            }            break;            case (int)Controls.OSD_AVDELAY:            {              IPostProcessingEngine postEngine = PostProcessingEngine.GetInstance();              IAudioPostEngine audioEngine = AudioPostEngine.GetInstance();                GUISliderControl pControl = (GUISliderControl)GetControl(iControlID);              if (null != pControl && g_Player.HasPostprocessing)              {                if (pControl.FloatValue < m_audioDelay)                {                  PostProcessingEngine.GetInstance().AudioDelayMinus();                }                else if (pControl.FloatValue > m_audioDelay)                {                  PostProcessingEngine.GetInstance().AudioDelayPlus();                }                m_audioDelay = (int) pControl.FloatValue;              }              else if (null != pControl && g_Player.HasAudioEngine)              {                if (pControl.FloatValue < m_audioDelay)                {                  AudioPostEngine.GetInstance().AudioDelayMinus();                }                else if (pControl.FloatValue > m_audioDelay)                {                  AudioPostEngine.GetInstance().AudioDelayPlus();                }                m_audioDelay = (int) pControl.FloatValue;              }            }            break;        }
Missing Default,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_ITEM_FOCUS_CHANGED:            UpdateDescription();            break;        }
Missing Default,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnClick,The following switch statement is missing a default case: switch (dlg.SelectedId)        {          case 888: ////Episodes management            OnSetEpisodesToKeep(rec);            break;          case 882:            OnSetQuality(rec);            break;            case 981: //Delete this recording only            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                    rec.Persist();                    server.OnNewSchedule();                  }                }              }              else              {                server.StopRecordingSchedule(rec.IdSchedule);                CanceledSchedule schedule = new CanceledSchedule(rec.IdSchedule' rec.IdChannel' rec.StartTime);                rec.Persist();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 982: //Delete series recording            goto case 618;            case 618: // delete entire recording            {              if (server.IsRecordingSchedule(rec.IdSchedule' out card))              {                GUIDialogYesNo dlgYesNo = (GUIDialogYesNo)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_YES_NO);                if (null != dlgYesNo)                {                  dlgYesNo.SetHeading(GUILocalizeStrings.Get(653)); //Delete this recording?                  dlgYesNo.SetLine(1' GUILocalizeStrings.Get(730)); //This schedule is recording. If you delete                  dlgYesNo.SetLine(2' GUILocalizeStrings.Get(731)); //the schedule then the recording is stopped.                  dlgYesNo.SetLine(3' GUILocalizeStrings.Get(732)); //are you sure                  dlgYesNo.DoModal(GUIWindowManager.ActiveWindow);                    if (dlgYesNo.IsConfirmed)                  {                    server.StopRecordingSchedule(rec.IdSchedule);                    rec.Delete();                    server.OnNewSchedule();                  }                }              }              else              {                rec.Delete();                server.OnNewSchedule();              }              LoadDirectory();            }            break;            case 979: // Play recording from beginning            if (g_Player.Playing && g_Player.IsTVRecording)            {              g_Player.Stop(true);            }            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            g_Player.SeekAbsolute(0);            if (TVHome.Card.IsTimeShifting)            {              g_Player.ShowFullScreenWindow();              return;            }            break;            case 980: // Play recording from live point            //TVHome.IsTVOn = true;            TVHome.ViewChannel(rec.ReferencedChannel());            if (TVHome.Card.IsTimeShifting)            {              if (g_Player.Playing)              {                g_Player.SeekAsolutePercentage(99);              }              g_Player.ShowFullScreenWindow();              return;            }            break;        }
Missing Default,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,ChangeType,The following switch statement is missing a default case: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              dlg.SelectedLabel = 0;              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              dlg.SelectedLabel = 1;              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              dlg.SelectedLabel = 2;              break;            case ScheduleRecordingType.Weekly:              dlg.SelectedLabel = 3;              break;            case ScheduleRecordingType.Daily:              dlg.SelectedLabel = 4;              break;            case ScheduleRecordingType.WorkingDays:              dlg.SelectedLabel = 5;              break;            case ScheduleRecordingType.Weekends:              dlg.SelectedLabel = 6;              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              dlg.SelectedLabel = 7;              break;          }
Missing Default,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,ChangeType,The following switch statement is missing a default case: switch (dlg.SelectedLabel)          {            case 0: //once              rec.ScheduleType = (int)ScheduleRecordingType.Once;              rec.Canceled = Schedule.MinSchedule;              break;            case 1: //everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              rec.Canceled = Schedule.MinSchedule;              break;            case 2: //everytime' all channels              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              rec.Canceled = Schedule.MinSchedule;              break;            case 3: //weekly              rec.ScheduleType = (int)ScheduleRecordingType.Weekly;              rec.Canceled = Schedule.MinSchedule;              break;            case 4: //daily              rec.ScheduleType = (int)ScheduleRecordingType.Daily;              rec.Canceled = Schedule.MinSchedule;              break;            case 5: //WorkingDays              rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;              rec.Canceled = Schedule.MinSchedule;              break;            case 6: //Weekends              rec.ScheduleType = (int)ScheduleRecordingType.Weekends;              rec.Canceled = Schedule.MinSchedule;              break;            case 7://weekly everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              rec.Canceled = Schedule.MinSchedule;              break;          }
Missing Default,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,GetRecType,The following switch statement is missing a default case: switch (recType)        {          case ScheduleRecordingType.Daily:            strType = GUILocalizeStrings.Get(648); //daily            break;          case ScheduleRecordingType.EveryTimeOnEveryChannel:            strType = GUILocalizeStrings.Get(651); //Everytime on any channel            break;          case ScheduleRecordingType.EveryTimeOnThisChannel:            strType = GUILocalizeStrings.Get(650); //Everytime on this channel            break;          case ScheduleRecordingType.Once:            strType = GUILocalizeStrings.Get(647); //Once            break;          case ScheduleRecordingType.WorkingDays:            strType = GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.WorkingDays)); //Working Days            break;          case ScheduleRecordingType.Weekends:            strType = GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.WeekendDays)); //Weekend Days            break;          case ScheduleRecordingType.Weekly:            strType = GUILocalizeStrings.Get(679); //Weekly            break;          case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:            strType = GUILocalizeStrings.Get(990000);//Weekly Everytime on this channel            break;        }
Missing Default,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetQuality,The following switch statement is missing a default case: switch (_newBitRate)          {            case VIDEOENCODER_BITRATE_MODE.NotSet:              dlg.SelectedLabel = 0;              break;            case VIDEOENCODER_BITRATE_MODE.ConstantBitRate:              dlg.SelectedLabel = 1;              break;            case VIDEOENCODER_BITRATE_MODE.VariableBitRateAverage:              dlg.SelectedLabel = 2;              break;            case VIDEOENCODER_BITRATE_MODE.VariableBitRatePeak:              dlg.SelectedLabel = 3;              break;          }
Missing Default,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetQuality,The following switch statement is missing a default case: switch (dlg.SelectedLabel)          {            case 0: // Not Set              _newBitRate = VIDEOENCODER_BITRATE_MODE.NotSet;              break;              case 1: // CBR              _newBitRate = VIDEOENCODER_BITRATE_MODE.ConstantBitRate;              break;              case 2: // VBR              _newBitRate = VIDEOENCODER_BITRATE_MODE.VariableBitRateAverage;              break;              case 3: // VBR Peak              _newBitRate = VIDEOENCODER_BITRATE_MODE.VariableBitRatePeak;              break;          }
Missing Default,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetQuality,The following switch statement is missing a default case: switch (_newQuality)          {            case QualityType.NotSet:              dlg.SelectedLabel = 0;              break;            case QualityType.Default:              dlg.SelectedLabel = 1;              break;            case QualityType.Custom:              dlg.SelectedLabel = 2;              break;            case QualityType.Portable:              dlg.SelectedLabel = 3;              break;            case QualityType.Low:              dlg.SelectedLabel = 4;              break;            case QualityType.Medium:              dlg.SelectedLabel = 5;              break;            case QualityType.High:              dlg.SelectedLabel = 6;              break;          }
Missing Default,TvPlugin,TvPriorities,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVPriorities.cs,OnSetQuality,The following switch statement is missing a default case: switch (dlg.SelectedLabel)          {            case 0: // Not Set              _newQuality = QualityType.NotSet;              break;              case 1: // Default              _newQuality = QualityType.Default;              break;              case 2: // Custom              _newQuality = QualityType.Custom;              break;              case 3: // Protable              _newQuality = QualityType.Portable;              break;              case 4: // Low              _newQuality = QualityType.Low;              break;              case 5: // Medium              _newQuality = QualityType.Medium;              break;              case 6: // High              _newQuality = QualityType.High;              break;          }
Missing Default,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,PopulateListviewWithUpcomingEpisodes,The following switch statement is missing a default case: switch (scheduletype)          {            case (int)ScheduleRecordingType.Weekly:              actualUpcomingEps = Program.RetrieveWeekly(initialProgram.StartTime' initialProgram.EndTime' initialProgram.IdChannel);              break;              case (int)ScheduleRecordingType.Weekends:              actualUpcomingEps = Program.RetrieveWeekends(initialProgram.StartTime' initialProgram.EndTime' initialProgram.IdChannel);              break;              case (int)ScheduleRecordingType.WorkingDays:              actualUpcomingEps = Program.RetrieveWorkingDays(initialProgram.StartTime' initialProgram.EndTime' initialProgram.IdChannel);              break;              case (int)ScheduleRecordingType.Daily:            actualUpcomingEps = Program.RetrieveDaily(initialProgram.StartTime' initialProgram.EndTime' initialProgram.IdChannel);            break;          }
Missing Default,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnSetQuality,The following switch statement is missing a default case: switch (_newBitRate)          {            case VIDEOENCODER_BITRATE_MODE.NotSet:              dlg.SelectedLabel = 0;              break;            case VIDEOENCODER_BITRATE_MODE.ConstantBitRate:              dlg.SelectedLabel = 1;              break;            case VIDEOENCODER_BITRATE_MODE.VariableBitRateAverage:              dlg.SelectedLabel = 2;              break;            case VIDEOENCODER_BITRATE_MODE.VariableBitRatePeak:              dlg.SelectedLabel = 3;              break;          }
Missing Default,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnSetQuality,The following switch statement is missing a default case: switch (dlg.SelectedLabel)          {            case 0: // Not Set              _newBitRate = VIDEOENCODER_BITRATE_MODE.NotSet;              break;              case 1: // CBR              _newBitRate = VIDEOENCODER_BITRATE_MODE.ConstantBitRate;              break;              case 2: // VBR              _newBitRate = VIDEOENCODER_BITRATE_MODE.VariableBitRateAverage;              break;              case 3: // VBR Peak              _newBitRate = VIDEOENCODER_BITRATE_MODE.VariableBitRatePeak;              break;          }
Missing Default,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnSetQuality,The following switch statement is missing a default case: switch (_newQuality)          {            case QualityType.NotSet:              dlg.SelectedLabel = 0;              break;            case QualityType.Default:              dlg.SelectedLabel = 1;              break;            case QualityType.Custom:              dlg.SelectedLabel = 2;              break;            case QualityType.Portable:              dlg.SelectedLabel = 3;              break;            case QualityType.Low:              dlg.SelectedLabel = 4;              break;            case QualityType.Medium:              dlg.SelectedLabel = 5;              break;            case QualityType.High:              dlg.SelectedLabel = 6;              break;          }
Missing Default,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnSetQuality,The following switch statement is missing a default case: switch (dlg.SelectedLabel)          {            case 0: // Default              _newQuality = QualityType.Default;              break;              case 1: // Custom              _newQuality = QualityType.Custom;              break;              case 2: // Protable              _newQuality = QualityType.Portable;              break;              case 3: // Low              _newQuality = QualityType.Low;              break;              case 4: // Medium              _newQuality = QualityType.Medium;              break;              case 5: // High              _newQuality = QualityType.High;              break;          }
Missing Default,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,CancelProgram,The following switch statement is missing a default case: switch (dlg.SelectedId)          {            case 981: //delete specific series                break;            case 982: //Delete entire recording              deleteEntireSched = true;              break;          }
Missing Default,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnAdvancedRecord,The following switch statement is missing a default case: switch (dlg.SelectedLabel)          {            case 0: //once              scheduleType = (int)ScheduleRecordingType.Once;              break;            case 1: //everytime' this channel              scheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              break;            case 2: //everytime' all channels              scheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              break;            case 3: //weekly              scheduleType = (int)ScheduleRecordingType.Weekly;              break;            case 4: //daily              scheduleType = (int)ScheduleRecordingType.Daily;              break;            case 5: //WorkingDays              scheduleType = (int)ScheduleRecordingType.WorkingDays;              break;            case 6: //Weekends              scheduleType = (int)ScheduleRecordingType.Weekends;              break;            case 7://Weekly everytime' this channel              scheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              break;          }
Missing Default,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnKeep,The following switch statement is missing a default case: switch (rec.KeepMethod)        {          case (int)KeepMethodType.UntilWatched:            dlg.SelectedLabel = 0;            break;          case (int)KeepMethodType.UntilSpaceNeeded:            dlg.SelectedLabel = 1;            break;          case (int)KeepMethodType.TillDate:            dlg.SelectedLabel = 2;            break;          case (int)KeepMethodType.Always:            dlg.SelectedLabel = 3;            break;        }
Missing Default,TvPlugin,TVProgramInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVProgramInfo.cs,OnKeep,The following switch statement is missing a default case: switch (dlg.SelectedId)        {          case 1043:            rec.KeepMethod = (int)KeepMethodType.UntilWatched;            break;          case 1044:            rec.KeepMethod = (int)KeepMethodType.UntilSpaceNeeded;              break;          case 1045:            rec.KeepMethod = (int)KeepMethodType.TillDate;            dlg.Reset();            dlg.ShowQuickNumbers = false;            dlg.SetHeading(1045);            for (int iDay = 1; iDay <= 100; iDay++)            {              DateTime dt = CurrentProgram.StartTime.AddDays(iDay);              dlg.Add(dt.ToLongDateString());            }            TimeSpan ts = (rec.KeepDate - CurrentProgram.StartTime);            int days = (int)ts.TotalDays;            if (days >= 100)            {              days = 30;            }            dlg.SelectedLabel = days - 1;            dlg.DoModal(GetID);            if (dlg.SelectedLabel < 0)            {              return;            }            rec.KeepDate = CurrentProgram.StartTime.AddDays(dlg.SelectedLabel + 1);            break;          case 1046:            rec.KeepMethod = (int)KeepMethodType.Always;            break;        }
Missing Default,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,SaveSettings,The following switch statement is missing a default case: switch (_currentSortMethod)          {            case SortMethod.Channel:              xmlwriter.SetValue("tvrecorded"' "sort"' "channel");              break;            case SortMethod.Date:              xmlwriter.SetValue("tvrecorded"' "sort"' "date");              break;            case SortMethod.Name:              xmlwriter.SetValue("tvrecorded"' "sort"' "name");              break;            case SortMethod.Genre:              xmlwriter.SetValue("tvrecorded"' "sort"' "type");              break;            case SortMethod.Played:              xmlwriter.SetValue("tvrecorded"' "sort"' "played");              break;            case SortMethod.Duration:              xmlwriter.SetValue("tvrecorded"' "sort"' "duration");              break;          }
Missing Default,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)        {          case Action.ActionType.ACTION_DELETE_ITEM:            {              int item = GetSelectedItemNo();              if (item >= 0)              {                OnDeleteRecording(item);              }              UpdateProperties();            }            break;            case Action.ActionType.ACTION_PREVIOUS_MENU:            if (facadeLayout != null)            {              if (facadeLayout.Focus)              {                GUIListItem item = GetItem(0);                if (item != null)                {                  if (item.IsFolder && item.Label == "..")                  {                    _currentLabel = string.Empty;                    LoadDirectory();                    GUIControl.SelectItemControl(GetID' facadeLayout.GetID' _rootItem);                    _rootItem = 0;                    return;                  }                }              }            }            break;        }
Missing Default,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_ITEM_FOCUS_CHANGED:            UpdateProperties();            break;            case GUIMessage.MessageType.GUI_MSG_ITEM_SELECT:          case GUIMessage.MessageType.GUI_MSG_CLICKED:              // Depending on the mode' handle the GUI_MSG_ITEM_SELECT message from the dialog menu and            // the GUI_MSG_CLICKED message from the spin control.            // Respond to the correct control.  The value is retrived directly from the control by the called handler.            if (message.TargetControlId == btnViews.GetID)            {              // Set the new view.              SetView(btnViews.SelectedItemValue);            }            break;        }
Missing Default,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,OnShowContextMenu,The following switch statement is missing a default case: switch (dlg.SelectedId)        {          case 656: // delete            OnDeleteRecording(iItem);            break;            case 655: // play            if (OnSelectedRecording(iItem))            {              return;            }            break;            case 1048: // Settings            TvRecordedInfo.CurrentProgram = rec;            GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_RECORDED_INFO);            break;            case 200072:            ShowUpcomingEpisodes(rec);            break;            case 830: // Reset watched status            _iSelectedItem = GetSelectedItemNo();            ResetWatchedStatus(rec);            LoadDirectory();            GUIControl.SelectItemControl(GetID' facadeLayout.GetID' _iSelectedItem);            break;        }
Missing Default,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,InitViewSelections,The following switch statement is missing a default case: switch (_currentDbView)        {          case DBView.Recordings:            btnViews.SetSelectedItemByValue(0);            break;          case DBView.Genre:            btnViews.SetSelectedItemByValue(1);            break;          case DBView.Channel:            btnViews.SetSelectedItemByValue(2);            break;          case DBView.History:            btnViews.SetSelectedItemByValue(3);            break;        }
Missing Default,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,SetView,The following switch statement is missing a default case: switch (selectedViewId)          {            case 0:              _currentDbView = DBView.Recordings;              break;            case 1:              _currentDbView = DBView.Genre;              break;            case 2:              _currentDbView = DBView.Channel;              break;            case 3:              _currentDbView = DBView.History;              break;          }
Missing Default,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,UpdateButtonStates,The following switch statement is missing a default case: switch (_currentSortMethod)            {              case SortMethod.Channel:                strLine = GUILocalizeStrings.Get(620); //Sort by: Channel                break;              case SortMethod.Date:                strLine = GUILocalizeStrings.Get(621); //Sort by: Date                break;              case SortMethod.Name:                strLine = GUILocalizeStrings.Get(268); //Sort by: Title                break;              case SortMethod.Genre:                strLine = GUILocalizeStrings.Get(678); //Sort by: Genre                break;              case SortMethod.Played:                strLine = GUILocalizeStrings.Get(671); //Sort by: Watched                break;              case SortMethod.Duration:                strLine = GUILocalizeStrings.Get(1017); //Sort by: Duration                break;            }
Missing Default,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,ListFolder,The following switch statement is missing a default case: switch (_currentDbView)            {              case DBView.History:                addToList = GetSpokenViewDate(rec.StartTime).Equals(actualLabel);                break;              case DBView.Recordings:                addToList = rec.Title.Equals(_currentLabel' StringComparison.InvariantCultureIgnoreCase) ||                            TVUtil.GetDisplayTitle(rec).Equals(actualLabel' StringComparison.InvariantCultureIgnoreCase);                break;              case DBView.Channel:                // possible that recording links to a channel that no longer exists                // make sure we pick those up if that value is selected                Channel channel = channels.FirstOrDefault(chan => rec.IdChannel == chan.IdChannel);                addToList = actualLabel.Equals(GUILocalizeStrings.Get(1507)) && channel == null ||                            GetChannelRecordingDisplayName(rec' channel).Equals(actualLabel' StringComparison.InvariantCultureIgnoreCase);                break;              case DBView.Genre:                addToList = rec.Genre.Equals(actualLabel' StringComparison.InvariantCultureIgnoreCase);                break;            }
Missing Default,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,LoadDirectory,The following switch statement is missing a default case: switch (_currentDbView)            {              case DBView.History:                groups = recordings.GroupBy(r => GetSpokenViewDate(r.StartTime)).Select(g => g.OrderByDescending(h => h.StartTime).First());                break;              case DBView.Recordings:                groups = recordings.GroupBy(r => r.Title' StringComparer.InvariantCultureIgnoreCase).Select(g => g.OrderByDescending(h => h.StartTime).First());                break;              case DBView.Channel:                //recording can link to channels that no longer exist. convert these to an unknown channel (string 1507) group                groups = recordings.GroupBy(r =>                {                  Channel channel = channels.FirstOrDefault(chan => r.IdChannel == chan.IdChannel);                  return channel == null ? GUILocalizeStrings.Get(1507) : channel.DisplayName;                }' StringComparer.InvariantCultureIgnoreCase).Select(g => g.OrderByDescending(h => h.StartTime).First());                break;              case DBView.Genre:                groups = recordings.GroupBy(r => r.Genre' StringComparer.InvariantCultureIgnoreCase).Select(g => g.OrderByDescending(h => h.StartTime).First());                break;            }
Missing Default,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,LoadDirectory,The following switch statement is missing a default case: switch (_currentDbView)              {                case DBView.History:                  item.Label = GetSpokenViewDate(folder.StartTime);                  item.Label2 = string.Empty;                  break;                case DBView.Recordings:                  string title = folder.Title;                  singleRecording = true;                  int count = 0;                  foreach (Recording recording in recordings)                  {                    if (!recording.Title.Equals(title' StringComparison.InvariantCultureIgnoreCase)) continue;                    count++;                    if (count <= 1) continue;                    singleRecording = false;                    break;                  }                    if (singleRecording)                  {                    item = BuildItemFromRecording(folder' channels.FirstOrDefault(chan => folder.IdChannel == chan.IdChannel));                    item.Label2 = TVUtil.GetRecordingDateString(folder);                  }                  else                  {                    item.Label = folder.Title;                    item.Label2 = GetSpokenViewDate(folder.StartTime);                  }                    break;                case DBView.Channel:                  // recordings can be linked to channels that no longer exist.                  Channel channel = channels.FirstOrDefault(chan => folder.IdChannel == chan.IdChannel);                  item.Label = channel == null ? GUILocalizeStrings.Get(1507) : channel.DisplayName;                  item.Label2 = GetSpokenViewDate(folder.StartTime);                  break;                case DBView.Genre:                  item.Label = folder.Genre;                  item.Label2 = GetSpokenViewDate(folder.StartTime);                  break;              }
Missing Default,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,LoadDirectory,The following switch statement is missing a default case: switch (_currentDbView)              {                case DBView.History:                  addToList = GetSpokenViewDate(rec.StartTime).Equals(actualLabel);                  break;                case DBView.Recordings:                  addToList = rec.Title.Equals(_currentLabel' StringComparison.InvariantCultureIgnoreCase) ||                              TVUtil.GetDisplayTitle(rec).Equals(actualLabel' StringComparison.InvariantCultureIgnoreCase);                  break;                case DBView.Channel:                  // possible that recording links to a channel that no longer exists                  // make sure we pick those up if that value is selected                  Channel channel = channels.FirstOrDefault(chan => rec.IdChannel == chan.IdChannel);                  addToList = actualLabel.Equals(GUILocalizeStrings.Get(1507)) && channel == null ||                              GetChannelRecordingDisplayName(rec' channel).Equals(actualLabel' StringComparison.InvariantCultureIgnoreCase);                  break;                case DBView.Genre:                  addToList = rec.Genre.Equals(actualLabel' StringComparison.InvariantCultureIgnoreCase);                  break;              }
Missing Default,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,BuildItemFromRecording,The following switch statement is missing a default case: switch (_currentDbView)          {            case DBView.Recordings:              item.Label = TVUtil.GetDisplayTitle(aRecording);              break;            case DBView.Channel:              item.Label = strChannelName;              break;            case DBView.Genre:              item.Label = !String.IsNullOrEmpty(aRecording.Genre) ? aRecording.Genre : GUILocalizeStrings.Get(2014); // unknown              break;            case DBView.History:              item.Label = GetSpokenViewDate(aRecording.StartTime);              break;          }
Missing Default,TvPlugin,TvRecorded,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvRecorded.cs,Compare,The following switch statement is missing a default case: switch (cSortMethod)            {              case SortMethod.Played:                {                  item1.Label2 = string.Format("{0} {1}"' rec1.TimesWatched' GUILocalizeStrings.Get(677)); //times                  item2.Label2 = string.Format("{0} {1}"' rec2.TimesWatched' GUILocalizeStrings.Get(677)); //times                  if (rec1.TimesWatched != rec2.TimesWatched)                  {                    return m_bSortAscending ? rec1.TimesWatched - rec2.TimesWatched : rec2.TimesWatched - rec1.TimesWatched;                  }                    cSortMethod = SortMethod.Name;                  break;                }                case SortMethod.Name:                {                  iComp = string.Compare(TVUtil.GetDisplayTitle(rec1)' TVUtil.GetDisplayTitle(rec2)' true);                  if (iComp != 0)                  {                    return m_bSortAscending ? iComp : -iComp;                  }                    cSortMethod = SortMethod.Channel;                  break;                }                case SortMethod.Channel:                {                  // if there is no referenced channel (eg. recording that links to a channel that is now deleted)                  // set channel name to unknown channel string (1507) to avoid null reference exceptions                  Channel ch1 = rec1.ReferencedChannel();                  Channel ch2 = rec2.ReferencedChannel();                  string ch1Name = ch1 == null ? GUILocalizeStrings.Get(1507) : ch1.DisplayName;                  string ch2Name = ch2 == null ? GUILocalizeStrings.Get(1507) : ch2.DisplayName;                    iComp = string.Compare(ch1Name' ch2Name' true);                  if (iComp != 0)                  {                    return m_bSortAscending ? iComp : -iComp;                  }                    cSortMethod = SortMethod.Date;                  break;                }              case SortMethod.Duration:                {                  TimeSpan duration1 = (rec1.EndTime - rec1.StartTime);                  TimeSpan duration2 = rec2.EndTime - rec2.StartTime;                  if (duration1 != duration2)                  {                    return duration1 > duration2 ? 1 : -1;                  }                    cSortMethod = SortMethod.Date;                  break;                }              case SortMethod.Date:                {                  if (rec1.StartTime != rec2.StartTime)                  {                    return m_bSortAscending ? (rec1.StartTime < rec2.StartTime ? 1 : -1) : (rec1.StartTime > rec2.StartTime ? 1 : -1);                  }                  return 0;                }                case SortMethod.Genre:                {                  item1.Label2 = rec1.Genre;                  item2.Label2 = rec2.Genre;                    if (rec1.Genre != rec2.Genre)                  {                    return m_bSortAscending ? string.Compare(rec1.Genre' rec2.Genre' true) : string.Compare(rec2.Genre' rec1.Genre' true);                  }                    if (rec1.StartTime != rec2.StartTime)                  {                    return m_bSortAscending ? (rec1.StartTime - rec2.StartTime).Minutes : (rec2.StartTime - rec1.StartTime).Minutes;                  }                    if (rec1.IdChannel != rec2.IdChannel)                  {                    // if there is no referenced channel (eg. recording that links to a channel that is now deleted)                    // set channel name to unknown channel string (1507) to avoid null reference exceptions                    Channel ch1 = rec1.ReferencedChannel();                    Channel ch2 = rec2.ReferencedChannel();                    string ch1Name = ch1 == null ? GUILocalizeStrings.Get(1507) : ch1.DisplayName;                    string ch2Name = ch2 == null ? GUILocalizeStrings.Get(1507) : ch2.DisplayName;                    return m_bSortAscending ? string.Compare(ch1Name' ch2Name) : string.Compare(ch2Name' ch1Name);                  }                    if (TVUtil.GetDisplayTitle(rec1) != TVUtil.GetDisplayTitle(rec2))                  {                    return m_bSortAscending ? string.Compare(TVUtil.GetDisplayTitle(rec1)' TVUtil.GetDisplayTitle(rec2)) : string.Compare(TVUtil.GetDisplayTitle(rec2)' TVUtil.GetDisplayTitle(rec1));                  }                    cSortMethod = SortMethod.Date;                  break;                }            }
Missing Default,TvPlugin,TvRecordedInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVRecordedInfo.cs,OnKeep,The following switch statement is missing a default case: switch ((KeepMethodType)currentProgram.KeepUntil)        {          case KeepMethodType.UntilWatched:            dlg.SelectedLabel = 0;            break;          case KeepMethodType.UntilSpaceNeeded:            dlg.SelectedLabel = 1;            break;          case KeepMethodType.TillDate:            dlg.SelectedLabel = 2;            break;          case KeepMethodType.Always:            dlg.SelectedLabel = 3;            break;        }
Missing Default,TvPlugin,TvRecordedInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVRecordedInfo.cs,OnKeep,The following switch statement is missing a default case: switch (dlg.SelectedId)        {          case 1043:            currentProgram.KeepUntil = (int)KeepMethodType.UntilWatched;            break;          case 1044:            currentProgram.KeepUntil = (int)KeepMethodType.UntilSpaceNeeded;              break;          case 1045:            currentProgram.KeepUntil = (int)KeepMethodType.TillDate;            dlg.Reset();            dlg.ShowQuickNumbers = false;            dlg.SetHeading(1045);            for (int iDay = 1; iDay <= 100; iDay++)            {              DateTime dt = currentProgram.StartTime.AddDays(iDay);              if (currentProgram.StartTime < DateTime.Now)              {                dt = DateTime.Now.AddDays(iDay);              }                dlg.Add(dt.ToLongDateString());            }            TimeSpan ts = (currentProgram.KeepUntilDate - currentProgram.StartTime);            if (currentProgram.StartTime < DateTime.Now)            {              ts = (currentProgram.KeepUntilDate - DateTime.Now);            }            int days = (int)ts.TotalDays;            if (days >= 100)            {              days = 30;            }            dlg.SelectedLabel = days - 1;            dlg.DoModal(GetID);            if (dlg.SelectedLabel < 0)            {              return;            }            if (currentProgram.StartTime < DateTime.Now)            {              currentProgram.KeepUntilDate = DateTime.Now.AddDays(dlg.SelectedLabel + 1);            }            else            {              currentProgram.KeepUntilDate = currentProgram.StartTime.AddDays(dlg.SelectedLabel + 1);            }            break;          case 1046:            currentProgram.KeepUntil = (int)KeepMethodType.Always;            break;        }
Missing Default,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,SaveSettings,The following switch statement is missing a default case: switch (currentSortMethod)          {            case SortMethod.Channel:              xmlwriter.SetValue("tvscheduler"' "sort"' "channel");              break;            case SortMethod.Date:              xmlwriter.SetValue("tvscheduler"' "sort"' "date");              break;            case SortMethod.Name:              xmlwriter.SetValue("tvscheduler"' "sort"' "name");              break;          }
Missing Default,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,SaveSettings,The following switch statement is missing a default case: switch (currentSortMethodSeries)         {           case SortMethod.Channel:             xmlwriter.SetValue("tvscheduler"' "sortseries"' "channel");             break;           case SortMethod.Date:             xmlwriter.SetValue("tvscheduler"' "sortseries"' "date");             break;           case SortMethod.Name:             xmlwriter.SetValue("tvscheduler"' "sortseries"' "name");             break;         }
Missing Default,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_ITEM_FOCUS_CHANGED:            UpdateDescription();            break;        }
Missing Default,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,Compare,The following switch statement is missing a default case: switch (sortMethod)       {          case SortMethod.Name:            if (sortAscending)           {              iComp = String.Compare(rec1.ProgramName' rec2.ProgramName' true);              if (iComp == 0)              {                goto case SortMethod.Channel;              }              else              {                return iComp;              }            }            else            {              iComp = String.Compare(rec2.ProgramName' rec1.ProgramName' true);              if (iComp == 0)              {                goto case SortMethod.Channel;              }              else              {                return iComp;              }            }            case SortMethod.Channel:            if (sortAscending)           {              iComp = String.Compare(rec1.ReferencedChannel().DisplayName' rec2.ReferencedChannel().DisplayName' true);              if (iComp == 0)              {                goto case SortMethod.Date;              }              else              {                return iComp;              }            }            else            {              iComp = String.Compare(rec2.ReferencedChannel().DisplayName' rec1.ReferencedChannel().DisplayName' true);              if (iComp == 0)              {                goto case SortMethod.Date;              }              else              {                return iComp;              }            }            case SortMethod.Date:            if (sortAscending)           {              if (rec1.StartTime == rec2.StartTime)              {                return 0;              }              if (rec1.StartTime > rec2.StartTime)              {                return 1;              }              return -1;            }            else            {              if (rec2.StartTime == rec1.StartTime)              {                return 0;              }              if (rec2.StartTime > rec1.StartTime)              {                return 1;              }              return -1;            }        }
Missing Default,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,UpdateButtonStates,The following switch statement is missing a default case: switch (sortMethod)       {          case SortMethod.Channel:            strLine = GUILocalizeStrings.Get(620); // Sort by: Channel            break;          case SortMethod.Date:            strLine = GUILocalizeStrings.Get(621); // Sort by: Date            break;          case SortMethod.Name:            strLine = GUILocalizeStrings.Get(268); // Sort by: Title            break;        }
Missing Default,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,OnShowContextMenu,The following switch statement is missing a default case: switch (dlg.SelectedId)        {          case 888: ////Episodes management            TvPriorities.OnSetEpisodesToKeep(rec);            break;            case 1048: ////settings            Schedule schedule = item.MusicTag as Schedule;            if (schedule == null)            {              schedule = item.TVTag as Schedule;            }            if (schedule != null)            {              TVProgramInfo.CurrentRecording = schedule;                         GUIWindowManager.ActivateWindow((int)Window.WINDOW_TV_PROGRAM_INFO);            }            return;          case 882: ////Quality settings            TvPriorities.OnSetQuality(rec);            break;            case 981: //Cancel this show            {              var layer = new TvBusinessLayer();              // get the program that this episode is for              var progs = layer.GetPrograms(rec.ReferencedChannel()' rec.StartTime' rec.EndTime);              // pick up the schedule that is actually used for recording              // see TVUtil.GetRecordingTimes where schedules are all spawend as one off types              // and this is what rec is (ie. it does not actually exist in the database)              var realSchedule = Schedule.Retrieve(rec.IdParentSchedule) ?? rec;              bool res = TVUtil.DeleteRecAndSchedWithPrompt(realSchedule' progs[0]);              if (res)              {                LoadDirectory();              }            }            break;            case 982: //Delete series recording            goto case 618;            case 618: // delete entire recording            {                                      bool res = TVUtil.DeleteRecAndEntireSchedWithPrompt(rec' rec.StartTime);              if (res)              {                if (showSeries && !item.IsFolder)                {                  OnShowContextMenu(0' true);                  return;                }                else                {                  LoadDirectory();                }              }            }            break;            case 979: // Play recording from beginning            {              Recording recDB = Recording.Retrieve(fileName);              if (recDB != null)              {                TVUtil.PlayRecording(recDB);              }            }            return;            case 980: // Play recording from live point            {              TVHome.ViewChannelAndCheck(rec.ReferencedChannel());              if (g_Player.Playing)              {                g_Player.ShowFullScreenWindow();              }              /*              g_Player.Stop();              if (System.IO.File.Exists(fileName))              {                g_Player.Play(fileName' g_Player.MediaType.Recording);                g_Player.SeekAbsolute(g_Player.Duration);                g_Player.ShowFullScreenWindow();                 return;              }              else              {                string url = server.GetRtspUrlForFile(fileName);                Log.Info("recording url:{0}"' url);                if (url.Length > 0)                {                  g_Player.Play(url' g_Player.MediaType.Recording);                    if (g_Player.Playing)                  {                    g_Player.SeekAbsolute(g_Player.Duration);                    g_Player.SeekAbsolute(g_Player.Duration);                    g_Player.ShowFullScreenWindow();                    return;                  }                }              }*/            }            break;        }
Missing Default,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,ChangeType,The following switch statement is missing a default case: switch ((ScheduleRecordingType)rec.ScheduleType)          {            case ScheduleRecordingType.Once:              dlg.SelectedLabel = 0;              break;            case ScheduleRecordingType.EveryTimeOnThisChannel:              dlg.SelectedLabel = 1;              break;            case ScheduleRecordingType.EveryTimeOnEveryChannel:              dlg.SelectedLabel = 2;              break;            case ScheduleRecordingType.Weekly:              dlg.SelectedLabel = 3;              break;            case ScheduleRecordingType.Daily:              dlg.SelectedLabel = 4;              break;            case ScheduleRecordingType.WorkingDays:              dlg.SelectedLabel = 5;              break;            case ScheduleRecordingType.Weekends:              dlg.SelectedLabel = 6;              break;            case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:              dlg.SelectedLabel = 7;              break;          }
Missing Default,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,ChangeType,The following switch statement is missing a default case: switch (dlg.SelectedLabel)          {            case 0: //once              rec.ScheduleType = (int)ScheduleRecordingType.Once;              rec.Canceled = Schedule.MinSchedule;              break;            case 1: //everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              rec.Canceled = Schedule.MinSchedule;              break;            case 2: //everytime' all channels              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              rec.Canceled = Schedule.MinSchedule;              break;            case 3: //weekly              rec.ScheduleType = (int)ScheduleRecordingType.Weekly;              rec.Canceled = Schedule.MinSchedule;              break;            case 4: //daily              rec.ScheduleType = (int)ScheduleRecordingType.Daily;              rec.Canceled = Schedule.MinSchedule;              break;            case 5: //WorkingDays              rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;              rec.Canceled = Schedule.MinSchedule;              break;            case 6: //Weekends              rec.ScheduleType = (int)ScheduleRecordingType.Weekends;              rec.Canceled = Schedule.MinSchedule;              break;            case 7://Weekly everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              rec.Canceled = Schedule.MinSchedule;              break;          }
Missing Default,TvPlugin,TvScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVScheduler.cs,GetScheduleType,The following switch statement is missing a default case: switch (ScheduleType)        {          case ScheduleRecordingType.Daily:            strType = GUILocalizeStrings.Get(648); //daily            break;          case ScheduleRecordingType.EveryTimeOnEveryChannel:            strType = GUILocalizeStrings.Get(651); //Everytime on any channel            break;          case ScheduleRecordingType.EveryTimeOnThisChannel:            strType = String.Format(GUILocalizeStrings.Get(650)' schedule.ReferencedChannel().DisplayName);            ; //Everytime on this channel            break;          case ScheduleRecordingType.Once:            strType = GUILocalizeStrings.Get(647); //Once            break;          case ScheduleRecordingType.WorkingDays:            strType = GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.WorkingDays)); //Working Days            break;          case ScheduleRecordingType.Weekends:            strType = GUILocalizeStrings.Get(WeekEndTool.GetText(DayType.WeekendDays)); //Weekend Days            break;          case ScheduleRecordingType.Weekly:            strType = GUILocalizeStrings.Get(679); //Weekly            break;          case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:            strType = String.Format(GUILocalizeStrings.Get(990000)' schedule.ReferencedChannel().DisplayName); ;//Weekly Everytime on this channel            break;        }
Missing Default,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_ITEM_FOCUS_CHANGED:            UpdateDescription();            break;        }
Missing Default,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,Update,The following switch statement is missing a default case: switch (currentSearchMode)        {          case SearchMode.Genre:            if (currentLevel == 0)            {              IList<string> genres;              TvBusinessLayer layer = new TvBusinessLayer();              genres = layer.GetProgramGenres();              foreach (string genre in genres)              {                GUIListItem item = new GUIListItem();                item.IsFolder = true;                item.Label = genre;                item.Path = genre;                item.ItemId = currentItemId;                currentItemId++;                Utils.SetDefaultIcons(item);                listView.Add(item);                itemCount++;              }            }            else            {              listView.Clear();              titleView.Clear();              GUIListItem item = new GUIListItem();              item.IsFolder = true;              item.Label = "..";              item.Label2 = String.Empty;              item.Path = String.Empty;              Utils.SetDefaultIcons(item);              //item.IconImage = "defaultFolderBig.png";              //item.IconImageBig = "defaultFolderBig.png";              listView.Add(item);              titleView.Add(item);                IList<Program> titles;              TvBusinessLayer layer = new TvBusinessLayer();              titles = layer.SearchProgramsPerGenre(currentGenre' filterShow'ChannelType.Tv);              foreach (Program program in titles)              {                //dont show programs which have ended                if (program.EndTime < DateTime.Now)                {                  continue;                }                bool add = true;                foreach (Program prog in programs)                {                  if (prog.Title == program.Title)                  {                    add = false;                  }                }                if (!add && filterShow == String.Empty)                {                  continue;                }                if (add)                {                  programs.Add(program);                }                  if (filterShow != String.Empty)                {                  if (program.Title == filterShow)                  {                    episodes.Add(program);                  }                }                  if (filterShow != String.Empty && program.Title != filterShow)                {                  continue;                }                  string strTime = String.Format("{0} {1}"'                                               Utils.GetShortDayString(program.StartTime)'                                               program.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                if (filterEpisode != String.Empty && strTime != filterEpisode)                {                  continue;                }                  item = new GUIListItem();                                //check if we are filtering for specific show or just letter                if (filterShow == String.Empty)                {                    //not searching for episode data so show just title                    item.Label = program.Title;                    item.Label2 = String.Empty;                    item.IsFolder = true;                }                else                {                    //searching for specific show so add episode data to display                    item.Label = TVUtil.GetDisplayTitle(program);                    item.Label2 = TVUtil.GetRecordingDateStringFull(program);                    item.IsFolder = false;                }                item.Path = program.Title;                item.TVTag = program;                item.ItemId = currentItemId;                currentItemId++;                bool isSerie;                if (IsRecording(program' out isSerie))                {                  if (isSerie)                  {                    item.PinImage = Thumbs.TvRecordingSeriesIcon;                  }                  else                  {                    item.PinImage = Thumbs.TvRecordingIcon;                  }                }                Utils.SetDefaultIcons(item);                SetChannelLogo(program' ref item' channelMap);                listView.Add(item);                titleView.Add(item);                itemCount++;              }            }            break;          case SearchMode.Title:            {              if (filterShow != String.Empty)              {                GUIListItem item = new GUIListItem();                item.IsFolder = true;                item.Label = "..";                item.Label2 = String.Empty;                item.Path = String.Empty;                Utils.SetDefaultIcons(item);                //item.IconImage = "defaultFolderBig.png";                //item.IconImageBig = "defaultFolderBig.png";                listView.Add(item);                titleView.Add(item);              }              IList<Program> titles = new List<Program>();              TvBusinessLayer layer = new TvBusinessLayer();              if (filterLetter == "#")              {                if (filterShow == String.Empty)                {                  titles = layer.SearchPrograms("[0-9]"' ChannelType.Tv);                }                else                {                  titles = layer.SearchPrograms("%" + filterShow' ChannelType.Tv);                }              }              else              {                if (filterShow == String.Empty)                {                  titles = layer.SearchPrograms(filterLetter' ChannelType.Tv);                }                else                {                  titles = layer.SearchPrograms("%" + filterShow' ChannelType.Tv);                }              }              foreach (Program program in titles)              {                  bool add = true;                foreach (Program prog in programs)                {                  if (prog.Title == program.Title)                  {                    add = false;                  }                }                if (!add && filterShow == String.Empty)                {                  continue;                }                if (add)                {                  programs.Add(program);                }                  if (filterShow != String.Empty)                {                  if (program.Title == filterShow)                  {                    episodes.Add(program);                  }                }                  if (filterShow != String.Empty && program.Title != filterShow)                {                  continue;                }                  GUIListItem item = new GUIListItem();                                  //check if we are filtering for specific show or just letter                if (filterShow == String.Empty)                {                    //not searching for episode data so show just title                    item.Label = program.Title;                    item.Label2 = String.Empty;                    item.IsFolder = true;                }                else                {                    //searching for specific show so add episode data to display                    item.Label = TVUtil.GetDisplayTitle(program);                    item.IsFolder = false;                    //moved this if statement but can not see it is doing anything?                    //if (program.StartTime > DateTime.MinValue)                    //{                        item.Label2 = TVUtil.GetRecordingDateStringFull(program);                    //}                }                  item.Path = program.Title;                item.TVTag = program;                item.ItemId = currentItemId;                currentItemId++;                bool isSerie;                if (IsRecording(program' out isSerie))                {                  if (isSerie)                  {                    item.PinImage = Thumbs.TvRecordingSeriesIcon;                  }                  else                  {                    item.PinImage = Thumbs.TvRecordingIcon;                  }                }                Utils.SetDefaultIcons(item);                SetChannelLogo(program' ref item' channelMap);                listView.Add(item);                titleView.Add(item);                itemCount++;              }            }            break;          case SearchMode.Description:            {              IList<Program> titles = new List<Program>();              long start = Utils.datetolong(DateTime.Now);              long end = Utils.datetolong(DateTime.Now.AddMonths(1));              TvBusinessLayer layer = new TvBusinessLayer();                if (filterShow == String.Empty)              {                titles = layer.SearchProgramsByDescription(filterLetter' ChannelType.Tv);              }              else              {                titles = layer.SearchProgramsByDescription(filterShow' ChannelType.Tv);              }                 foreach (Program program in titles)              {                if (program.Description.Length == 0)                {                  continue;                }                  programs.Add(program);                                  if (filterShow != String.Empty)                {                  if (program.Title == filterShow)                  {                    episodes.Add(program);                  }                }                  if (filterShow != String.Empty && program.Title != filterShow)                {                  continue;                }                  string strTime = String.Format("{0} {1}"'                                               Utils.GetShortDayString(program.StartTime)'                                               program.StartTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat));                if (filterEpisode != String.Empty && strTime != filterEpisode)                {                  continue;                }                  GUIListItem item = new GUIListItem();                item.IsFolder = false;                item.Label = TVUtil.GetDisplayTitle(program);                item.Label2 = TVUtil.GetRecordingDateStringFull(program);                                  item.Path = program.Title;                item.TVTag = program;                item.ItemId = currentItemId;                currentItemId++;                bool isSerie;                if (IsRecording(program' out isSerie))                {                  if (isSerie)                  {                    item.PinImage = Thumbs.TvRecordingSeriesIcon;                  }                  else                  {                    item.PinImage = Thumbs.TvRecordingIcon;                  }                }                Utils.SetDefaultIcons(item);                SetChannelLogo(program' ref item' channelMap);                listView.Add(item);                titleView.Add(item);                itemCount++;              }            }            break;        }
Missing Default,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,Update,The following switch statement is missing a default case: switch (chosenSortMethod)        {          case SortMethod.Auto:            strLine = GUILocalizeStrings.Get(1202);            break;          case SortMethod.Name:            strLine = GUILocalizeStrings.Get(622);            break;          case SortMethod.Channel:            strLine = GUILocalizeStrings.Get(620);            break;          case SortMethod.Date:            strLine = GUILocalizeStrings.Get(621);            break;        }
Missing Default,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,OnClick,The following switch statement is missing a default case: switch (currentSearchMode)        {          case SearchMode.Genre:            if (currentLevel == 0)            {              filterShow = String.Empty;              filterEpisode = String.Empty;              currentGenre = item.Label;              currentLevel++;              Update();            }            else            {              Program program = item.TVTag as Program;              if (filterShow == String.Empty)              {                if (item.Label == "..")                {                  currentLevel = 0;                  currentGenre = String.Empty;                }                else                {                  filterShow = program.Title;                }                Update();              }              else              {                if (item.Label == "..")                {                  filterShow = String.Empty;                  Update();                }                else                {                  OnRecord(program);                }                              }            }            break;          case SearchMode.Title:            {              if (item.Label == ".." && item.IsFolder)              {                filterShow = String.Empty;                currentLevel = 0;                Update();                return;              }              Program program = item.TVTag as Program;              if (filterShow == String.Empty)              {                filterShow = program.Title;                Update();                return;              }              OnRecord(program);            }            break;          case SearchMode.Description:            {              Program program = item.TVTag as Program;              /*if (filterShow == String.Empty)              {                filterShow = program.Title;                Update();                return;              }*/              OnRecord(program);            }            break;        }
Missing Default,TvPlugin,TvSearch,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVSearch.cs,OnRecord,The following switch statement is missing a default case: switch (dlg.SelectedLabel)          {            case 0: //none              foreach (Schedule rec1 in listRecordings)              {                if (rec1.IsRecordingProgram(program' true))                {                  if (rec1.ScheduleType != (int)ScheduleRecordingType.Once)                  {                    //delete specific series                    Schedule sched = Schedule.Retrieve(rec1.IdSchedule);                    TVUtil.DeleteRecAndSchedWithPrompt(sched' program.IdChannel);                  }                  else                  {                    //cancel recording                                                        server.StopRecordingSchedule(rec1.IdSchedule);                    rec1.Delete();                    server.OnNewSchedule();                  }                }              }              listRecordings = Schedule.ListAll();              Update();              return;            case 1: //once              rec.ScheduleType = (int)ScheduleRecordingType.Once;              break;            case 2: //everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnThisChannel;              break;            case 3: //everytime' all channels              rec.ScheduleType = (int)ScheduleRecordingType.EveryTimeOnEveryChannel;              break;            case 4: //weekly              rec.ScheduleType = (int)ScheduleRecordingType.Weekly;              break;            case 5: //daily              rec.ScheduleType = (int)ScheduleRecordingType.Daily;              break;            case 6: //WorkingDays              rec.ScheduleType = (int)ScheduleRecordingType.WorkingDays;              break;            case 7: //Weekends              rec.ScheduleType = (int)ScheduleRecordingType.Weekends;              break;            case 8://Weekly everytime' this channel              rec.ScheduleType = (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel;              break;          }
Missing Default,TvPlugin,TvSetup,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TvSetup.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            {              SwitchToHomeView();              return;            }        }
Missing Default,TvPlugin,TVTuningDetails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVTuningDetails.cs,OnPageLoad,The following switch statement is missing a default case: switch (detail.ChannelType)              {                case 0:                  GUIPropertyManager.SetProperty("#TV.TuningDetails.ChannelType"' "Analog");                  break;                case 1:                  GUIPropertyManager.SetProperty("#TV.TuningDetails.ChannelType"' "Atsc");                  break;                case 2:                  GUIPropertyManager.SetProperty("#TV.TuningDetails.ChannelType"' "DVB-C");                  break;                case 3:                  GUIPropertyManager.SetProperty("#TV.TuningDetails.ChannelType"' "DVB-S");                  break;                case 4:                  GUIPropertyManager.SetProperty("#TV.TuningDetails.ChannelType"' "DVB-T");                  break;              }
Missing Default,TvPlugin,TvZapOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVZapOSD.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)        {          case Action.ActionType.ACTION_SHOW_OSD:            {              return;            }            case Action.ActionType.ACTION_NEXT_CHANNEL:            {              OnNextChannel();              return;            }            case Action.ActionType.ACTION_PREV_CHANNEL:            {              OnPreviousChannel();              return;            }            case Action.ActionType.ACTION_CONTEXT_MENU:            {              if (action.wID == Action.ActionType.ACTION_CONTEXT_MENU)              {                TvFullScreen tvWindow = (TvFullScreen)GUIWindowManager.GetWindow((int)Window.WINDOW_TVFULLSCREEN);                tvWindow.OnAction(new Action(Action.ActionType.ACTION_SHOW_OSD' 0' 0));                tvWindow.OnAction(action);              }              return;            }        }
Missing Default,TvPlugin,TvZapOsd,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\TVZapOSD.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            break;        }
Missing Default,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,GetColor,The following switch statement is missing a default case: switch (colorNumber)        {          case (int)TextColors.Black:            return Color.Black;          case (int)TextColors.Red:            return Color.Red;          case (int)TextColors.Green:            return Color.FromArgb(0' 255' 0);          case (int)TextColors.Yellow:            return Color.Yellow;          case (int)TextColors.Blue:            return Color.Blue;          case (int)TextColors.Magenta:            return Color.Magenta;          case (int)TextColors.White:            return Color.White;          case (int)TextColors.Cyan:            return Color.Cyan;          case (int)TextColors.Trans1:            return Transparent;          case (int)TextColors.Trans2:            return Transparent;        }
Missing Default,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TeletextPageRenderer.cs,RenderPage,The following switch statement is missing a default case: switch (pageChars[index])                {                  case (int)Attributes.AlphaBlack:                    foreground = (int)TextColors.Black;                    charset = 0;                    break;                    case (int)Attributes.AlphaRed:                    foreground = (int)TextColors.Red;                    charset = 0;                    break;                    case (int)Attributes.AlphaGreen:                    foreground = (int)TextColors.Green;                    charset = 0;                    break;                    case (int)Attributes.AlphaYellow:                    foreground = (int)TextColors.Yellow;                    charset = 0;                    break;                    case (int)Attributes.AlphaBlue:                    foreground = (int)TextColors.Blue;                    charset = 0;                    break;                    case (int)Attributes.AlphaMagenta:                    foreground = (int)TextColors.Magenta;                    charset = 0;                    break;                    case (int)Attributes.AlphaCyan:                    foreground = (int)TextColors.Cyan;                    charset = 0;                    break;                    case (int)Attributes.AlphaWhite:                    foreground = (int)TextColors.White;                    charset = 0;                    break;                    case (int)Attributes.Flash:                    break;                    case (int)Attributes.Steady:                    break;                    case (int)Attributes.EndBox:                    if (isBoxed)                    {                      if (_fullscreenMode)                      {                        foreground = (int)TextColors.Trans1;                        background = (int)TextColors.Trans1;                      }                      else                      {                        foreground = (int)TextColors.Black;                        background = (int)TextColors.Black;                      }                    }                    break;                    case (int)Attributes.StartBox:                    if (isBoxed)                    {                      // Clear everything until this position in the line                      if (col > 0)                      {                        for (int loop1 = 0; loop1 < col; loop1++)                        {                          pageChars[(row * 40) + loop1] = 32;                        }                      }                      // Clear also the page attributes                      for (int clear = 0; clear < col; clear++)                      {                        if (_fullscreenMode)                        {                          pageAttribs[row * 40 + clear] = doubleheight << 10 | charset << 8 | (int)TextColors.Trans1 << 4 |                                                          (int)TextColors.Trans1;                        }                        else                        {                          pageAttribs[row * 40 + clear] = doubleheight << 10 | charset << 8 | (int)TextColors.Black << 4 |                                                          (int)TextColors.Black;                        }                      }                      // Set the standard background color                      if (background == (int)TextColors.Trans1)                      {                        background = (int)TextColors.Black;                      }                    }                    break;                    case (int)Attributes.NormalSize:                    doubleheight = 0;                    pageAttribs[index] = (doubleheight << 10 | charset << 8 | background << 4 | foreground);                    break;                    case (int)Attributes.DoubleHeight:                    if (row < 23)                    {                      doubleheight = 1;                    }                    break;                    case (int)Attributes.MosaicBlack:                    foreground = (int)TextColors.Black;                    charset = 1 + mosaictype;                    break;                    case (int)Attributes.MosaicRed:                    foreground = (int)TextColors.Red;                    charset = 1 + mosaictype;                    break;                    case (int)Attributes.MosaicGreen:                    foreground = (int)TextColors.Green;                    charset = 1 + mosaictype;                    break;                    case (int)Attributes.MosaicYellow:                    foreground = (int)TextColors.Yellow;                    charset = 1 + mosaictype;                    break;                    case (int)Attributes.MosaicBlue:                    foreground = (int)TextColors.Blue;                    charset = 1 + mosaictype;                    break;                    case (int)Attributes.MosaicMagenta:                    foreground = (int)TextColors.Magenta;                    charset = 1 + mosaictype;                    break;                    case (int)Attributes.MosaicCyan:                    foreground = (int)TextColors.Cyan;                    charset = 1 + mosaictype;                    break;                    case (int)Attributes.MosaicWhite:                    foreground = (int)TextColors.White;                    charset = 1 + mosaictype;                    break;                    case (int)Attributes.Conceal:                    if (_hiddenMode == false)                    {                      foreground = background;                      pageAttribs[index] = (doubleheight << 10 | charset << 8 | background << 4 | foreground);                    }                    break;                    case (int)Attributes.ContiguousMosaic:                    mosaictype = 0;                    if (charset > 0)                    {                      charset = 1;                      pageAttribs[index] = (doubleheight << 10 | charset << 8 | background << 4 | foreground);                    }                    break;                    case (int)Attributes.SeparatedMosaic:                    mosaictype = 1;                    if (charset > 0)                    {                      charset = 2;                      pageAttribs[index] = (doubleheight << 10 | charset << 8 | background << 4 | foreground);                    }                    break;                    case (int)Attributes.Esc:                    break;                    case (int)Attributes.BlackBackground:                    background = (int)TextColors.Black;                    pageAttribs[index] = (doubleheight << 10 | charset << 8 | background << 4 | foreground);                    break;                    case (int)Attributes.NewBackground:                    background = foreground;                    pageAttribs[index] = (doubleheight << 10 | charset << 8 | background << 4 | foreground);                    break;                    case (int)Attributes.HoldMosaic:                    hold = 1;                    break;                    case (int)Attributes.ReleaseMosaic:                    hold = 2;                    break;                }
Missing Default,TvPlugin.teletext,TVTeletext,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TvPlugin\TvPlugin\teletext\TvTeletext.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)        {          case Action.ActionType.ACTION_SWITCH_TELETEXT_HIDDEN:            //Change Hidden Mode            if (btnHidden != null)            {              btnHidden.Selected = _hiddenMode;            }            break;          case Action.ActionType.ACTION_REMOTE_SUBPAGE_UP:          case Action.ActionType.ACTION_REMOTE_SUBPAGE_DOWN:            // Subpage up            if (btnSubPage != null)            {              btnSubPage.SelectedItem = Decimal(currentSubPageNumber + 1) - 1;            }            break;        }
