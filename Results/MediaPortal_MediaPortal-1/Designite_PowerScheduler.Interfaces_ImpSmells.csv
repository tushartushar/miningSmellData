Implementation smell,Namespace,Class,File,Method,Description
Long Method,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,GetPowerPolicySetting,The method has 122 lines of code.
Long Method,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,SetPowerPolicySetting,The method has 182 lines of code.
Complex Method,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,GetPowerCfgRequests,Cyclomatic complexity of the method is 12
Complex Method,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,GetPowerPolicySetting,Cyclomatic complexity of the method is 30
Complex Method,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,SetPowerPolicySetting,Cyclomatic complexity of the method is 33
Long Parameter List,TvEngine.PowerScheduler,WaitableTimer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WaitableTimer.cs,SetWaitableTimer,The method has 6 parameters. Parameters: hTimer' pDue' lPeriod' rNotify' pArgs' bResume
Long Parameter List,TvEngine.PowerScheduler.Interfaces,IPowerController,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\Interfaces\IPowerController.cs,GetCurrentState,The method has 6 parameters. Parameters: refresh' unattended' disAllowShutdown' disAllowShutdownHandler' nextWakeupTime' nextWakeupHandler
Long Parameter List,TvEngine.PowerScheduler.Interfaces,IPowerScheduler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\Interfaces\IPowerScheduler.cs,GetCurrentState,The method has 6 parameters. Parameters: refresh' unattended' disAllowShutdown' disAllowShutdownHandler' nextWakeupTime' nextWakeupHandler
Long Parameter List,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,PowerReadACValueIndex,The method has 5 parameters. Parameters: RootPowerKey' SchemeGuid' SubGroupOfPowerSettingsGuid' PowerSettingGuid' AcValueIndex
Long Parameter List,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,PowerWriteACValueIndex,The method has 5 parameters. Parameters: RootPowerKey' SchemeGuid' SubGroupOfPowerSettingsGuid' PowerSettingGuid' AcValueIndex
Long Parameter List,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,PowerReadDCValueIndex,The method has 5 parameters. Parameters: RootPowerKey' SchemeGuid' SubGroupOfPowerSettingsGuid' PowerSettingGuid' DcValueIndex
Long Parameter List,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,PowerWriteDCValueIndex,The method has 5 parameters. Parameters: RootPowerKey' SchemeGuid' SubGroupOfPowerSettingsGuid' PowerSettingGuid' DcValueIndex
Long Identifier,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,,The length of the parameter GUID_SUB_POWER_BUTTONS_AND_LID is 30.
Long Statement,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,SetStandbyMode,The length of the statement  "            SetThreadExecutionState(ExecutionState.ES_SYSTEM_REQUIRED | ExecutionState.ES_AWAYMODE_REQUIRED | ExecutionState.ES_CONTINUOUS); " is 128.
Empty Catch Block,TvEngine.PowerScheduler,EPGWakeupConfig,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\EPGWakeupConfig.cs,EPGWakeupConfig,The method has an empty catch block.
Empty Catch Block,TvEngine.PowerScheduler,WaitableTimer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WaitableTimer.cs,AbortWaiter,The method has an empty catch block.
Empty Catch Block,TvEngine.PowerScheduler,WaitableTimer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WaitableTimer.cs,WaitThread,The method has an empty catch block.
Empty Catch Block,TvEngine.PowerScheduler,WaitableTimer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WaitableTimer.cs,WaitThread,The method has an empty catch block.
Empty Catch Block,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,SetSystemPowerSetting,The method has an empty catch block.
Empty Catch Block,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,SetPowerPolicySetting,The method has an empty catch block.
Magic Number,TvEngine.PowerScheduler,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WakeOnLanManager.cs,SendArpRequest,The following statement contains a magic number: byte[] hwAddr = new byte[6];
Magic Number,TvEngine.PowerScheduler,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WakeOnLanManager.cs,GetWakeOnLanMagicPacket,The following statement contains a magic number: hwAddress.Length != 6
Magic Number,TvEngine.PowerScheduler,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WakeOnLanManager.cs,GetWakeOnLanMagicPacket,The following statement contains a magic number: byte[] packet = new byte[102];
Magic Number,TvEngine.PowerScheduler,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WakeOnLanManager.cs,GetWakeOnLanMagicPacket,The following statement contains a magic number: i < 6
Magic Number,TvEngine.PowerScheduler,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WakeOnLanManager.cs,GetWakeOnLanMagicPacket,The following statement contains a magic number: packet[i * 6 + x] = hwAddress[x];
Magic Number,TvEngine.PowerScheduler,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WakeOnLanManager.cs,GetWakeOnLanMagicPacket,The following statement contains a magic number: x < 6
Magic Number,TvEngine.PowerScheduler,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WakeOnLanManager.cs,GetWakeOnLanMagicPacket,The following statement contains a magic number: i < 17
Magic Number,TvEngine.PowerScheduler,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WakeOnLanManager.cs,SendMagicPacket,The following statement contains a magic number: client.Connect(address' 1234);
Magic Number,TvEngine.PowerScheduler,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WakeOnLanManager.cs,IsValidEthernetAddress,The following statement contains a magic number: hwAddress.Length != 6
Magic Number,TvEngine.PowerScheduler,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WakeOnLanManager.cs,SendWakeOnLanPacket,The following statement contains a magic number: hwAddress.Length != 6
Magic Number,TvEngine.PowerScheduler,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WakeOnLanManager.cs,SendWakeOnLanPacket,The following statement contains a magic number: byte[] ipAddress = new byte[4] {0xFF' 0xFF' 0xFF' 0xFF};
Magic Number,TvEngine.PowerScheduler,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WakeOnLanManager.cs,WakeupSystem,The following statement contains a magic number: Ping(wakeupTarget' 1000)
Magic Number,TvEngine.PowerScheduler,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WakeOnLanManager.cs,WakeupSystem,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,TvEngine.PowerScheduler,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WakeOnLanManager.cs,WakeupSystem,The following statement contains a magic number: waited += 2000;
Magic Number,TvEngine.PowerScheduler,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WakeOnLanManager.cs,WakeupSystem,The following statement contains a magic number: waited < timeout * 1000
Magic Number,TvEngine.PowerScheduler,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WakeOnLanManager.cs,GetIpBytes,The following statement contains a magic number: byte[] ipn = new byte[4];
Magic Number,TvEngine.PowerScheduler,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WakeOnLanManager.cs,GetIpBytes,The following statement contains a magic number: ip.Length != 4
Magic Number,TvEngine.PowerScheduler,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WakeOnLanManager.cs,GetHwAddrBytes,The following statement contains a magic number: byte[] addrn = new byte[6];
Magic Number,TvEngine.PowerScheduler,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WakeOnLanManager.cs,GetHwAddrBytes,The following statement contains a magic number: addr.Length != 6
Magic Number,TvEngine.PowerScheduler,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WakeOnLanManager.cs,Main,The following statement contains a magic number: switch (args[i].ToLowerInvariant())          {            case "-gethwaddr":              if (args.Length != 2)              {                throw new ApplicationException("-gethwaddr needs one argument: <ipaddress>");              }              GetHwAddr(args[++i]);              break;            case "-wakeup":              if (args.Length == 5)              {                Wakeup(args[i + 1]' args[i + 2]' args[i + 3]' args[i + 4]);                i += 4;              }              else if (args.Length == 4)              {                Wakeup(args[i + 1]' args[i + 2]' args[i + 3]);                i += 3;              }              else              {                throw new ApplicationException(                  "-gethwaddr: arguments: <hwaddr> <wakeupIP> [<targetIP>] <timeout in seconds>");              }              break;            default:              Console.WriteLine("Usage: WakeOnLanManager -gethwaddr <ipaddress>");              Console.WriteLine("Usage: WakeOnLanManager -wakeup <hwaddr> <wakeupIP> <targetIP> <timeout in seconds>");              Console.WriteLine("Example: WakeOnLanManager -wakeup 00:81:32:fb:ae:c7 192.168.1.2 192.168.1.255 10");              break;          }
Magic Number,TvEngine.PowerScheduler,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WakeOnLanManager.cs,Main,The following statement contains a magic number: switch (args[i].ToLowerInvariant())          {            case "-gethwaddr":              if (args.Length != 2)              {                throw new ApplicationException("-gethwaddr needs one argument: <ipaddress>");              }              GetHwAddr(args[++i]);              break;            case "-wakeup":              if (args.Length == 5)              {                Wakeup(args[i + 1]' args[i + 2]' args[i + 3]' args[i + 4]);                i += 4;              }              else if (args.Length == 4)              {                Wakeup(args[i + 1]' args[i + 2]' args[i + 3]);                i += 3;              }              else              {                throw new ApplicationException(                  "-gethwaddr: arguments: <hwaddr> <wakeupIP> [<targetIP>] <timeout in seconds>");              }              break;            default:              Console.WriteLine("Usage: WakeOnLanManager -gethwaddr <ipaddress>");              Console.WriteLine("Usage: WakeOnLanManager -wakeup <hwaddr> <wakeupIP> <targetIP> <timeout in seconds>");              Console.WriteLine("Example: WakeOnLanManager -wakeup 00:81:32:fb:ae:c7 192.168.1.2 192.168.1.255 10");              break;          }
Magic Number,TvEngine.PowerScheduler,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WakeOnLanManager.cs,Main,The following statement contains a magic number: switch (args[i].ToLowerInvariant())          {            case "-gethwaddr":              if (args.Length != 2)              {                throw new ApplicationException("-gethwaddr needs one argument: <ipaddress>");              }              GetHwAddr(args[++i]);              break;            case "-wakeup":              if (args.Length == 5)              {                Wakeup(args[i + 1]' args[i + 2]' args[i + 3]' args[i + 4]);                i += 4;              }              else if (args.Length == 4)              {                Wakeup(args[i + 1]' args[i + 2]' args[i + 3]);                i += 3;              }              else              {                throw new ApplicationException(                  "-gethwaddr: arguments: <hwaddr> <wakeupIP> [<targetIP>] <timeout in seconds>");              }              break;            default:              Console.WriteLine("Usage: WakeOnLanManager -gethwaddr <ipaddress>");              Console.WriteLine("Usage: WakeOnLanManager -wakeup <hwaddr> <wakeupIP> <targetIP> <timeout in seconds>");              Console.WriteLine("Example: WakeOnLanManager -wakeup 00:81:32:fb:ae:c7 192.168.1.2 192.168.1.255 10");              break;          }
Magic Number,TvEngine.PowerScheduler,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WakeOnLanManager.cs,Main,The following statement contains a magic number: switch (args[i].ToLowerInvariant())          {            case "-gethwaddr":              if (args.Length != 2)              {                throw new ApplicationException("-gethwaddr needs one argument: <ipaddress>");              }              GetHwAddr(args[++i]);              break;            case "-wakeup":              if (args.Length == 5)              {                Wakeup(args[i + 1]' args[i + 2]' args[i + 3]' args[i + 4]);                i += 4;              }              else if (args.Length == 4)              {                Wakeup(args[i + 1]' args[i + 2]' args[i + 3]);                i += 3;              }              else              {                throw new ApplicationException(                  "-gethwaddr: arguments: <hwaddr> <wakeupIP> [<targetIP>] <timeout in seconds>");              }              break;            default:              Console.WriteLine("Usage: WakeOnLanManager -gethwaddr <ipaddress>");              Console.WriteLine("Usage: WakeOnLanManager -wakeup <hwaddr> <wakeupIP> <targetIP> <timeout in seconds>");              Console.WriteLine("Example: WakeOnLanManager -wakeup 00:81:32:fb:ae:c7 192.168.1.2 192.168.1.255 10");              break;          }
Magic Number,TvEngine.PowerScheduler,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WakeOnLanManager.cs,Main,The following statement contains a magic number: switch (args[i].ToLowerInvariant())          {            case "-gethwaddr":              if (args.Length != 2)              {                throw new ApplicationException("-gethwaddr needs one argument: <ipaddress>");              }              GetHwAddr(args[++i]);              break;            case "-wakeup":              if (args.Length == 5)              {                Wakeup(args[i + 1]' args[i + 2]' args[i + 3]' args[i + 4]);                i += 4;              }              else if (args.Length == 4)              {                Wakeup(args[i + 1]' args[i + 2]' args[i + 3]);                i += 3;              }              else              {                throw new ApplicationException(                  "-gethwaddr: arguments: <hwaddr> <wakeupIP> [<targetIP>] <timeout in seconds>");              }              break;            default:              Console.WriteLine("Usage: WakeOnLanManager -gethwaddr <ipaddress>");              Console.WriteLine("Usage: WakeOnLanManager -wakeup <hwaddr> <wakeupIP> <targetIP> <timeout in seconds>");              Console.WriteLine("Example: WakeOnLanManager -wakeup 00:81:32:fb:ae:c7 192.168.1.2 192.168.1.255 10");              break;          }
Magic Number,TvEngine.PowerScheduler,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WakeOnLanManager.cs,Main,The following statement contains a magic number: switch (args[i].ToLowerInvariant())          {            case "-gethwaddr":              if (args.Length != 2)              {                throw new ApplicationException("-gethwaddr needs one argument: <ipaddress>");              }              GetHwAddr(args[++i]);              break;            case "-wakeup":              if (args.Length == 5)              {                Wakeup(args[i + 1]' args[i + 2]' args[i + 3]' args[i + 4]);                i += 4;              }              else if (args.Length == 4)              {                Wakeup(args[i + 1]' args[i + 2]' args[i + 3]);                i += 3;              }              else              {                throw new ApplicationException(                  "-gethwaddr: arguments: <hwaddr> <wakeupIP> [<targetIP>] <timeout in seconds>");              }              break;            default:              Console.WriteLine("Usage: WakeOnLanManager -gethwaddr <ipaddress>");              Console.WriteLine("Usage: WakeOnLanManager -wakeup <hwaddr> <wakeupIP> <targetIP> <timeout in seconds>");              Console.WriteLine("Example: WakeOnLanManager -wakeup 00:81:32:fb:ae:c7 192.168.1.2 192.168.1.255 10");              break;          }
Magic Number,TvEngine.PowerScheduler,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WakeOnLanManager.cs,Main,The following statement contains a magic number: switch (args[i].ToLowerInvariant())          {            case "-gethwaddr":              if (args.Length != 2)              {                throw new ApplicationException("-gethwaddr needs one argument: <ipaddress>");              }              GetHwAddr(args[++i]);              break;            case "-wakeup":              if (args.Length == 5)              {                Wakeup(args[i + 1]' args[i + 2]' args[i + 3]' args[i + 4]);                i += 4;              }              else if (args.Length == 4)              {                Wakeup(args[i + 1]' args[i + 2]' args[i + 3]);                i += 3;              }              else              {                throw new ApplicationException(                  "-gethwaddr: arguments: <hwaddr> <wakeupIP> [<targetIP>] <timeout in seconds>");              }              break;            default:              Console.WriteLine("Usage: WakeOnLanManager -gethwaddr <ipaddress>");              Console.WriteLine("Usage: WakeOnLanManager -wakeup <hwaddr> <wakeupIP> <targetIP> <timeout in seconds>");              Console.WriteLine("Example: WakeOnLanManager -wakeup 00:81:32:fb:ae:c7 192.168.1.2 192.168.1.255 10");              break;          }
Magic Number,TvEngine.PowerScheduler,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WakeOnLanManager.cs,Main,The following statement contains a magic number: switch (args[i].ToLowerInvariant())          {            case "-gethwaddr":              if (args.Length != 2)              {                throw new ApplicationException("-gethwaddr needs one argument: <ipaddress>");              }              GetHwAddr(args[++i]);              break;            case "-wakeup":              if (args.Length == 5)              {                Wakeup(args[i + 1]' args[i + 2]' args[i + 3]' args[i + 4]);                i += 4;              }              else if (args.Length == 4)              {                Wakeup(args[i + 1]' args[i + 2]' args[i + 3]);                i += 3;              }              else              {                throw new ApplicationException(                  "-gethwaddr: arguments: <hwaddr> <wakeupIP> [<targetIP>] <timeout in seconds>");              }              break;            default:              Console.WriteLine("Usage: WakeOnLanManager -gethwaddr <ipaddress>");              Console.WriteLine("Usage: WakeOnLanManager -wakeup <hwaddr> <wakeupIP> <targetIP> <timeout in seconds>");              Console.WriteLine("Example: WakeOnLanManager -wakeup 00:81:32:fb:ae:c7 192.168.1.2 192.168.1.255 10");              break;          }
Magic Number,TvEngine.PowerScheduler,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WakeOnLanManager.cs,Main,The following statement contains a magic number: switch (args[i].ToLowerInvariant())          {            case "-gethwaddr":              if (args.Length != 2)              {                throw new ApplicationException("-gethwaddr needs one argument: <ipaddress>");              }              GetHwAddr(args[++i]);              break;            case "-wakeup":              if (args.Length == 5)              {                Wakeup(args[i + 1]' args[i + 2]' args[i + 3]' args[i + 4]);                i += 4;              }              else if (args.Length == 4)              {                Wakeup(args[i + 1]' args[i + 2]' args[i + 3]);                i += 3;              }              else              {                throw new ApplicationException(                  "-gethwaddr: arguments: <hwaddr> <wakeupIP> [<targetIP>] <timeout in seconds>");              }              break;            default:              Console.WriteLine("Usage: WakeOnLanManager -gethwaddr <ipaddress>");              Console.WriteLine("Usage: WakeOnLanManager -wakeup <hwaddr> <wakeupIP> <targetIP> <timeout in seconds>");              Console.WriteLine("Example: WakeOnLanManager -wakeup 00:81:32:fb:ae:c7 192.168.1.2 192.168.1.255 10");              break;          }
Magic Number,TvEngine.PowerScheduler,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WakeOnLanManager.cs,Main,The following statement contains a magic number: switch (args[i].ToLowerInvariant())          {            case "-gethwaddr":              if (args.Length != 2)              {                throw new ApplicationException("-gethwaddr needs one argument: <ipaddress>");              }              GetHwAddr(args[++i]);              break;            case "-wakeup":              if (args.Length == 5)              {                Wakeup(args[i + 1]' args[i + 2]' args[i + 3]' args[i + 4]);                i += 4;              }              else if (args.Length == 4)              {                Wakeup(args[i + 1]' args[i + 2]' args[i + 3]);                i += 3;              }              else              {                throw new ApplicationException(                  "-gethwaddr: arguments: <hwaddr> <wakeupIP> [<targetIP>] <timeout in seconds>");              }              break;            default:              Console.WriteLine("Usage: WakeOnLanManager -gethwaddr <ipaddress>");              Console.WriteLine("Usage: WakeOnLanManager -wakeup <hwaddr> <wakeupIP> <targetIP> <timeout in seconds>");              Console.WriteLine("Example: WakeOnLanManager -wakeup 00:81:32:fb:ae:c7 192.168.1.2 192.168.1.255 10");              break;          }
Magic Number,TvEngine.PowerScheduler,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WakeOnLanManager.cs,GetHwAddr,The following statement contains a magic number: Console.WriteLine("Hardware address: {0:x}:{1:x}:{2:x}:{3:x}:{4:x}:{5:x}"' a[0]' a[1]' a[2]' a[3]' a[4]' a[5]);
Magic Number,TvEngine.PowerScheduler,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WakeOnLanManager.cs,GetHwAddr,The following statement contains a magic number: Console.WriteLine("Hardware address: {0:x}:{1:x}:{2:x}:{3:x}:{4:x}:{5:x}"' a[0]' a[1]' a[2]' a[3]' a[4]' a[5]);
Magic Number,TvEngine.PowerScheduler,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WakeOnLanManager.cs,GetHwAddr,The following statement contains a magic number: Console.WriteLine("Hardware address: {0:x}:{1:x}:{2:x}:{3:x}:{4:x}:{5:x}"' a[0]' a[1]' a[2]' a[3]' a[4]' a[5]);
Magic Number,TvEngine.PowerScheduler,WakeOnLanManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\WakeOnLanManager.cs,GetHwAddr,The following statement contains a magic number: Console.WriteLine("Hardware address: {0:x}:{1:x}:{2:x}:{3:x}:{4:x}:{5:x}"' a[0]' a[1]' a[2]' a[3]' a[4]' a[5]);
Magic Number,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,SetStandbyMode,The following statement contains a magic number: switch (standbyMode)        {          case StandbyMode.StandbyAllowed:            SetThreadExecutionState(ExecutionState.ES_CONTINUOUS);            break;          case StandbyMode.StandbyPrevented:            SetThreadExecutionState(ExecutionState.ES_SYSTEM_REQUIRED | ExecutionState.ES_CONTINUOUS);            break;          case StandbyMode.AwayModeRequested:            if (Environment.OSVersion.Version.Major >= 6)              SetThreadExecutionState(ExecutionState.ES_SYSTEM_REQUIRED | ExecutionState.ES_AWAYMODE_REQUIRED | ExecutionState.ES_CONTINUOUS);            else              SetThreadExecutionState(ExecutionState.ES_SYSTEM_REQUIRED | ExecutionState.ES_CONTINUOUS);            break;        }
Magic Number,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,GetActivePowerSetting,The following statement contains a magic number: Environment.OSVersion.Version.Major >= 6
Magic Number,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,GetPowerSetting,The following statement contains a magic number: Environment.OSVersion.Version.Major >= 6
Magic Number,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,SetPowerSetting,The following statement contains a magic number: Environment.OSVersion.Version.Major >= 6
Magic Number,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,GetPowerCfgRequests,The following statement contains a magic number: Environment.OSVersion.Version.Major < 6
Magic Number,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,GetPowerCfgRequests,The following statement contains a magic number: Environment.OSVersion.Version.Major == 6 && Environment.OSVersion.Version.Minor == 0
Magic Number,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,GetPowerPolicySetting,The following statement contains a magic number: switch (settingType)          {            case SystemPowerSettingType.STANDBYIDLE:              if (AC)              {                if (pp.user.IdleAc.Action == POWER_ACTION.PowerActionSleep)                  return (int)pp.user.IdleTimeoutAc;              }              else              {                if (pp.user.IdleDc.Action == POWER_ACTION.PowerActionSleep)                  return (int)pp.user.IdleTimeoutDc;              }              return 0;              case SystemPowerSettingType.HIBERNATE_AFTER:              if (AC)              {                if (pp.user.IdleAc.Action == POWER_ACTION.PowerActionHibernate)                  return (int)pp.user.IdleTimeoutAc;                if (pp.mach.DozeS4TimeoutAc != 0)                  return (int)(pp.mach.DozeS4TimeoutAc + pp.user.IdleTimeoutAc);              }              else              {                if (pp.user.IdleDc.Action == POWER_ACTION.PowerActionHibernate)                  return (int)pp.user.IdleTimeoutDc;                if (pp.mach.DozeS4TimeoutDc != 0)                  return (int)(pp.mach.DozeS4TimeoutDc + pp.user.IdleTimeoutDc);              }              return 0;              case SystemPowerSettingType.LID_CLOSE_ACTION:              if (AC)              {                action = gpp.user.LidCloseAc.Action;                eventCode = gpp.user.LidCloseAc.EventCode;              }              else              {                action = gpp.user.LidCloseDc.Action;                eventCode = gpp.user.LidCloseDc.EventCode;              }              switch (action)              {                case POWER_ACTION.PowerActionSleep:                  return 1; // Sleep                case POWER_ACTION.PowerActionHibernate:                  return 2; // Hibernate                default:                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN) != 0)                    return 3; // Shutdown                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_BUTTON) != 0)                    return 4; // Ask User                  return 0; //Do nothing              }              case SystemPowerSettingType.POWER_BUTTON_ACTION:              if (AC)              {                action = gpp.user.PowerButtonAc.Action;                eventCode = gpp.user.PowerButtonAc.EventCode;              }              else              {                action = gpp.user.PowerButtonDc.Action;                eventCode = gpp.user.PowerButtonDc.EventCode;              }              switch (action)              {                case POWER_ACTION.PowerActionSleep:                  return 1; // Sleep                case POWER_ACTION.PowerActionHibernate:                  return 2; // Hibernate                default:                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN) != 0)                    return 3; // Shutdown                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_BUTTON) != 0)                    return 4; // Ask User                  return 0; //Do nothing              }              case SystemPowerSettingType.SLEEP_BUTTON_ACTION:              if (AC)              {                action = gpp.user.SleepButtonAc.Action;                eventCode = gpp.user.SleepButtonAc.EventCode;              }              else              {                action = gpp.user.SleepButtonDc.Action;                eventCode = gpp.user.SleepButtonDc.EventCode;              }              switch (action)              {                case POWER_ACTION.PowerActionSleep:                  return 1; // Sleep                case POWER_ACTION.PowerActionHibernate:                  return 2; // Hibernate                default:                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN) != 0)                    return 3; // Shutdown                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_BUTTON) != 0)                    return 4; // Ask User                  return 0; //Do nothing              }              default:              return 0;          }
Magic Number,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,GetPowerPolicySetting,The following statement contains a magic number: switch (settingType)          {            case SystemPowerSettingType.STANDBYIDLE:              if (AC)              {                if (pp.user.IdleAc.Action == POWER_ACTION.PowerActionSleep)                  return (int)pp.user.IdleTimeoutAc;              }              else              {                if (pp.user.IdleDc.Action == POWER_ACTION.PowerActionSleep)                  return (int)pp.user.IdleTimeoutDc;              }              return 0;              case SystemPowerSettingType.HIBERNATE_AFTER:              if (AC)              {                if (pp.user.IdleAc.Action == POWER_ACTION.PowerActionHibernate)                  return (int)pp.user.IdleTimeoutAc;                if (pp.mach.DozeS4TimeoutAc != 0)                  return (int)(pp.mach.DozeS4TimeoutAc + pp.user.IdleTimeoutAc);              }              else              {                if (pp.user.IdleDc.Action == POWER_ACTION.PowerActionHibernate)                  return (int)pp.user.IdleTimeoutDc;                if (pp.mach.DozeS4TimeoutDc != 0)                  return (int)(pp.mach.DozeS4TimeoutDc + pp.user.IdleTimeoutDc);              }              return 0;              case SystemPowerSettingType.LID_CLOSE_ACTION:              if (AC)              {                action = gpp.user.LidCloseAc.Action;                eventCode = gpp.user.LidCloseAc.EventCode;              }              else              {                action = gpp.user.LidCloseDc.Action;                eventCode = gpp.user.LidCloseDc.EventCode;              }              switch (action)              {                case POWER_ACTION.PowerActionSleep:                  return 1; // Sleep                case POWER_ACTION.PowerActionHibernate:                  return 2; // Hibernate                default:                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN) != 0)                    return 3; // Shutdown                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_BUTTON) != 0)                    return 4; // Ask User                  return 0; //Do nothing              }              case SystemPowerSettingType.POWER_BUTTON_ACTION:              if (AC)              {                action = gpp.user.PowerButtonAc.Action;                eventCode = gpp.user.PowerButtonAc.EventCode;              }              else              {                action = gpp.user.PowerButtonDc.Action;                eventCode = gpp.user.PowerButtonDc.EventCode;              }              switch (action)              {                case POWER_ACTION.PowerActionSleep:                  return 1; // Sleep                case POWER_ACTION.PowerActionHibernate:                  return 2; // Hibernate                default:                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN) != 0)                    return 3; // Shutdown                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_BUTTON) != 0)                    return 4; // Ask User                  return 0; //Do nothing              }              case SystemPowerSettingType.SLEEP_BUTTON_ACTION:              if (AC)              {                action = gpp.user.SleepButtonAc.Action;                eventCode = gpp.user.SleepButtonAc.EventCode;              }              else              {                action = gpp.user.SleepButtonDc.Action;                eventCode = gpp.user.SleepButtonDc.EventCode;              }              switch (action)              {                case POWER_ACTION.PowerActionSleep:                  return 1; // Sleep                case POWER_ACTION.PowerActionHibernate:                  return 2; // Hibernate                default:                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN) != 0)                    return 3; // Shutdown                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_BUTTON) != 0)                    return 4; // Ask User                  return 0; //Do nothing              }              default:              return 0;          }
Magic Number,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,GetPowerPolicySetting,The following statement contains a magic number: switch (settingType)          {            case SystemPowerSettingType.STANDBYIDLE:              if (AC)              {                if (pp.user.IdleAc.Action == POWER_ACTION.PowerActionSleep)                  return (int)pp.user.IdleTimeoutAc;              }              else              {                if (pp.user.IdleDc.Action == POWER_ACTION.PowerActionSleep)                  return (int)pp.user.IdleTimeoutDc;              }              return 0;              case SystemPowerSettingType.HIBERNATE_AFTER:              if (AC)              {                if (pp.user.IdleAc.Action == POWER_ACTION.PowerActionHibernate)                  return (int)pp.user.IdleTimeoutAc;                if (pp.mach.DozeS4TimeoutAc != 0)                  return (int)(pp.mach.DozeS4TimeoutAc + pp.user.IdleTimeoutAc);              }              else              {                if (pp.user.IdleDc.Action == POWER_ACTION.PowerActionHibernate)                  return (int)pp.user.IdleTimeoutDc;                if (pp.mach.DozeS4TimeoutDc != 0)                  return (int)(pp.mach.DozeS4TimeoutDc + pp.user.IdleTimeoutDc);              }              return 0;              case SystemPowerSettingType.LID_CLOSE_ACTION:              if (AC)              {                action = gpp.user.LidCloseAc.Action;                eventCode = gpp.user.LidCloseAc.EventCode;              }              else              {                action = gpp.user.LidCloseDc.Action;                eventCode = gpp.user.LidCloseDc.EventCode;              }              switch (action)              {                case POWER_ACTION.PowerActionSleep:                  return 1; // Sleep                case POWER_ACTION.PowerActionHibernate:                  return 2; // Hibernate                default:                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN) != 0)                    return 3; // Shutdown                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_BUTTON) != 0)                    return 4; // Ask User                  return 0; //Do nothing              }              case SystemPowerSettingType.POWER_BUTTON_ACTION:              if (AC)              {                action = gpp.user.PowerButtonAc.Action;                eventCode = gpp.user.PowerButtonAc.EventCode;              }              else              {                action = gpp.user.PowerButtonDc.Action;                eventCode = gpp.user.PowerButtonDc.EventCode;              }              switch (action)              {                case POWER_ACTION.PowerActionSleep:                  return 1; // Sleep                case POWER_ACTION.PowerActionHibernate:                  return 2; // Hibernate                default:                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN) != 0)                    return 3; // Shutdown                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_BUTTON) != 0)                    return 4; // Ask User                  return 0; //Do nothing              }              case SystemPowerSettingType.SLEEP_BUTTON_ACTION:              if (AC)              {                action = gpp.user.SleepButtonAc.Action;                eventCode = gpp.user.SleepButtonAc.EventCode;              }              else              {                action = gpp.user.SleepButtonDc.Action;                eventCode = gpp.user.SleepButtonDc.EventCode;              }              switch (action)              {                case POWER_ACTION.PowerActionSleep:                  return 1; // Sleep                case POWER_ACTION.PowerActionHibernate:                  return 2; // Hibernate                default:                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN) != 0)                    return 3; // Shutdown                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_BUTTON) != 0)                    return 4; // Ask User                  return 0; //Do nothing              }              default:              return 0;          }
Magic Number,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,GetPowerPolicySetting,The following statement contains a magic number: switch (settingType)          {            case SystemPowerSettingType.STANDBYIDLE:              if (AC)              {                if (pp.user.IdleAc.Action == POWER_ACTION.PowerActionSleep)                  return (int)pp.user.IdleTimeoutAc;              }              else              {                if (pp.user.IdleDc.Action == POWER_ACTION.PowerActionSleep)                  return (int)pp.user.IdleTimeoutDc;              }              return 0;              case SystemPowerSettingType.HIBERNATE_AFTER:              if (AC)              {                if (pp.user.IdleAc.Action == POWER_ACTION.PowerActionHibernate)                  return (int)pp.user.IdleTimeoutAc;                if (pp.mach.DozeS4TimeoutAc != 0)                  return (int)(pp.mach.DozeS4TimeoutAc + pp.user.IdleTimeoutAc);              }              else              {                if (pp.user.IdleDc.Action == POWER_ACTION.PowerActionHibernate)                  return (int)pp.user.IdleTimeoutDc;                if (pp.mach.DozeS4TimeoutDc != 0)                  return (int)(pp.mach.DozeS4TimeoutDc + pp.user.IdleTimeoutDc);              }              return 0;              case SystemPowerSettingType.LID_CLOSE_ACTION:              if (AC)              {                action = gpp.user.LidCloseAc.Action;                eventCode = gpp.user.LidCloseAc.EventCode;              }              else              {                action = gpp.user.LidCloseDc.Action;                eventCode = gpp.user.LidCloseDc.EventCode;              }              switch (action)              {                case POWER_ACTION.PowerActionSleep:                  return 1; // Sleep                case POWER_ACTION.PowerActionHibernate:                  return 2; // Hibernate                default:                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN) != 0)                    return 3; // Shutdown                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_BUTTON) != 0)                    return 4; // Ask User                  return 0; //Do nothing              }              case SystemPowerSettingType.POWER_BUTTON_ACTION:              if (AC)              {                action = gpp.user.PowerButtonAc.Action;                eventCode = gpp.user.PowerButtonAc.EventCode;              }              else              {                action = gpp.user.PowerButtonDc.Action;                eventCode = gpp.user.PowerButtonDc.EventCode;              }              switch (action)              {                case POWER_ACTION.PowerActionSleep:                  return 1; // Sleep                case POWER_ACTION.PowerActionHibernate:                  return 2; // Hibernate                default:                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN) != 0)                    return 3; // Shutdown                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_BUTTON) != 0)                    return 4; // Ask User                  return 0; //Do nothing              }              case SystemPowerSettingType.SLEEP_BUTTON_ACTION:              if (AC)              {                action = gpp.user.SleepButtonAc.Action;                eventCode = gpp.user.SleepButtonAc.EventCode;              }              else              {                action = gpp.user.SleepButtonDc.Action;                eventCode = gpp.user.SleepButtonDc.EventCode;              }              switch (action)              {                case POWER_ACTION.PowerActionSleep:                  return 1; // Sleep                case POWER_ACTION.PowerActionHibernate:                  return 2; // Hibernate                default:                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN) != 0)                    return 3; // Shutdown                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_BUTTON) != 0)                    return 4; // Ask User                  return 0; //Do nothing              }              default:              return 0;          }
Magic Number,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,GetPowerPolicySetting,The following statement contains a magic number: switch (settingType)          {            case SystemPowerSettingType.STANDBYIDLE:              if (AC)              {                if (pp.user.IdleAc.Action == POWER_ACTION.PowerActionSleep)                  return (int)pp.user.IdleTimeoutAc;              }              else              {                if (pp.user.IdleDc.Action == POWER_ACTION.PowerActionSleep)                  return (int)pp.user.IdleTimeoutDc;              }              return 0;              case SystemPowerSettingType.HIBERNATE_AFTER:              if (AC)              {                if (pp.user.IdleAc.Action == POWER_ACTION.PowerActionHibernate)                  return (int)pp.user.IdleTimeoutAc;                if (pp.mach.DozeS4TimeoutAc != 0)                  return (int)(pp.mach.DozeS4TimeoutAc + pp.user.IdleTimeoutAc);              }              else              {                if (pp.user.IdleDc.Action == POWER_ACTION.PowerActionHibernate)                  return (int)pp.user.IdleTimeoutDc;                if (pp.mach.DozeS4TimeoutDc != 0)                  return (int)(pp.mach.DozeS4TimeoutDc + pp.user.IdleTimeoutDc);              }              return 0;              case SystemPowerSettingType.LID_CLOSE_ACTION:              if (AC)              {                action = gpp.user.LidCloseAc.Action;                eventCode = gpp.user.LidCloseAc.EventCode;              }              else              {                action = gpp.user.LidCloseDc.Action;                eventCode = gpp.user.LidCloseDc.EventCode;              }              switch (action)              {                case POWER_ACTION.PowerActionSleep:                  return 1; // Sleep                case POWER_ACTION.PowerActionHibernate:                  return 2; // Hibernate                default:                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN) != 0)                    return 3; // Shutdown                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_BUTTON) != 0)                    return 4; // Ask User                  return 0; //Do nothing              }              case SystemPowerSettingType.POWER_BUTTON_ACTION:              if (AC)              {                action = gpp.user.PowerButtonAc.Action;                eventCode = gpp.user.PowerButtonAc.EventCode;              }              else              {                action = gpp.user.PowerButtonDc.Action;                eventCode = gpp.user.PowerButtonDc.EventCode;              }              switch (action)              {                case POWER_ACTION.PowerActionSleep:                  return 1; // Sleep                case POWER_ACTION.PowerActionHibernate:                  return 2; // Hibernate                default:                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN) != 0)                    return 3; // Shutdown                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_BUTTON) != 0)                    return 4; // Ask User                  return 0; //Do nothing              }              case SystemPowerSettingType.SLEEP_BUTTON_ACTION:              if (AC)              {                action = gpp.user.SleepButtonAc.Action;                eventCode = gpp.user.SleepButtonAc.EventCode;              }              else              {                action = gpp.user.SleepButtonDc.Action;                eventCode = gpp.user.SleepButtonDc.EventCode;              }              switch (action)              {                case POWER_ACTION.PowerActionSleep:                  return 1; // Sleep                case POWER_ACTION.PowerActionHibernate:                  return 2; // Hibernate                default:                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN) != 0)                    return 3; // Shutdown                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_BUTTON) != 0)                    return 4; // Ask User                  return 0; //Do nothing              }              default:              return 0;          }
Magic Number,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,GetPowerPolicySetting,The following statement contains a magic number: switch (settingType)          {            case SystemPowerSettingType.STANDBYIDLE:              if (AC)              {                if (pp.user.IdleAc.Action == POWER_ACTION.PowerActionSleep)                  return (int)pp.user.IdleTimeoutAc;              }              else              {                if (pp.user.IdleDc.Action == POWER_ACTION.PowerActionSleep)                  return (int)pp.user.IdleTimeoutDc;              }              return 0;              case SystemPowerSettingType.HIBERNATE_AFTER:              if (AC)              {                if (pp.user.IdleAc.Action == POWER_ACTION.PowerActionHibernate)                  return (int)pp.user.IdleTimeoutAc;                if (pp.mach.DozeS4TimeoutAc != 0)                  return (int)(pp.mach.DozeS4TimeoutAc + pp.user.IdleTimeoutAc);              }              else              {                if (pp.user.IdleDc.Action == POWER_ACTION.PowerActionHibernate)                  return (int)pp.user.IdleTimeoutDc;                if (pp.mach.DozeS4TimeoutDc != 0)                  return (int)(pp.mach.DozeS4TimeoutDc + pp.user.IdleTimeoutDc);              }              return 0;              case SystemPowerSettingType.LID_CLOSE_ACTION:              if (AC)              {                action = gpp.user.LidCloseAc.Action;                eventCode = gpp.user.LidCloseAc.EventCode;              }              else              {                action = gpp.user.LidCloseDc.Action;                eventCode = gpp.user.LidCloseDc.EventCode;              }              switch (action)              {                case POWER_ACTION.PowerActionSleep:                  return 1; // Sleep                case POWER_ACTION.PowerActionHibernate:                  return 2; // Hibernate                default:                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN) != 0)                    return 3; // Shutdown                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_BUTTON) != 0)                    return 4; // Ask User                  return 0; //Do nothing              }              case SystemPowerSettingType.POWER_BUTTON_ACTION:              if (AC)              {                action = gpp.user.PowerButtonAc.Action;                eventCode = gpp.user.PowerButtonAc.EventCode;              }              else              {                action = gpp.user.PowerButtonDc.Action;                eventCode = gpp.user.PowerButtonDc.EventCode;              }              switch (action)              {                case POWER_ACTION.PowerActionSleep:                  return 1; // Sleep                case POWER_ACTION.PowerActionHibernate:                  return 2; // Hibernate                default:                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN) != 0)                    return 3; // Shutdown                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_BUTTON) != 0)                    return 4; // Ask User                  return 0; //Do nothing              }              case SystemPowerSettingType.SLEEP_BUTTON_ACTION:              if (AC)              {                action = gpp.user.SleepButtonAc.Action;                eventCode = gpp.user.SleepButtonAc.EventCode;              }              else              {                action = gpp.user.SleepButtonDc.Action;                eventCode = gpp.user.SleepButtonDc.EventCode;              }              switch (action)              {                case POWER_ACTION.PowerActionSleep:                  return 1; // Sleep                case POWER_ACTION.PowerActionHibernate:                  return 2; // Hibernate                default:                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN) != 0)                    return 3; // Shutdown                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_BUTTON) != 0)                    return 4; // Ask User                  return 0; //Do nothing              }              default:              return 0;          }
Magic Number,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,GetPowerPolicySetting,The following statement contains a magic number: switch (settingType)          {            case SystemPowerSettingType.STANDBYIDLE:              if (AC)              {                if (pp.user.IdleAc.Action == POWER_ACTION.PowerActionSleep)                  return (int)pp.user.IdleTimeoutAc;              }              else              {                if (pp.user.IdleDc.Action == POWER_ACTION.PowerActionSleep)                  return (int)pp.user.IdleTimeoutDc;              }              return 0;              case SystemPowerSettingType.HIBERNATE_AFTER:              if (AC)              {                if (pp.user.IdleAc.Action == POWER_ACTION.PowerActionHibernate)                  return (int)pp.user.IdleTimeoutAc;                if (pp.mach.DozeS4TimeoutAc != 0)                  return (int)(pp.mach.DozeS4TimeoutAc + pp.user.IdleTimeoutAc);              }              else              {                if (pp.user.IdleDc.Action == POWER_ACTION.PowerActionHibernate)                  return (int)pp.user.IdleTimeoutDc;                if (pp.mach.DozeS4TimeoutDc != 0)                  return (int)(pp.mach.DozeS4TimeoutDc + pp.user.IdleTimeoutDc);              }              return 0;              case SystemPowerSettingType.LID_CLOSE_ACTION:              if (AC)              {                action = gpp.user.LidCloseAc.Action;                eventCode = gpp.user.LidCloseAc.EventCode;              }              else              {                action = gpp.user.LidCloseDc.Action;                eventCode = gpp.user.LidCloseDc.EventCode;              }              switch (action)              {                case POWER_ACTION.PowerActionSleep:                  return 1; // Sleep                case POWER_ACTION.PowerActionHibernate:                  return 2; // Hibernate                default:                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN) != 0)                    return 3; // Shutdown                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_BUTTON) != 0)                    return 4; // Ask User                  return 0; //Do nothing              }              case SystemPowerSettingType.POWER_BUTTON_ACTION:              if (AC)              {                action = gpp.user.PowerButtonAc.Action;                eventCode = gpp.user.PowerButtonAc.EventCode;              }              else              {                action = gpp.user.PowerButtonDc.Action;                eventCode = gpp.user.PowerButtonDc.EventCode;              }              switch (action)              {                case POWER_ACTION.PowerActionSleep:                  return 1; // Sleep                case POWER_ACTION.PowerActionHibernate:                  return 2; // Hibernate                default:                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN) != 0)                    return 3; // Shutdown                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_BUTTON) != 0)                    return 4; // Ask User                  return 0; //Do nothing              }              case SystemPowerSettingType.SLEEP_BUTTON_ACTION:              if (AC)              {                action = gpp.user.SleepButtonAc.Action;                eventCode = gpp.user.SleepButtonAc.EventCode;              }              else              {                action = gpp.user.SleepButtonDc.Action;                eventCode = gpp.user.SleepButtonDc.EventCode;              }              switch (action)              {                case POWER_ACTION.PowerActionSleep:                  return 1; // Sleep                case POWER_ACTION.PowerActionHibernate:                  return 2; // Hibernate                default:                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN) != 0)                    return 3; // Shutdown                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_BUTTON) != 0)                    return 4; // Ask User                  return 0; //Do nothing              }              default:              return 0;          }
Magic Number,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,GetPowerPolicySetting,The following statement contains a magic number: switch (settingType)          {            case SystemPowerSettingType.STANDBYIDLE:              if (AC)              {                if (pp.user.IdleAc.Action == POWER_ACTION.PowerActionSleep)                  return (int)pp.user.IdleTimeoutAc;              }              else              {                if (pp.user.IdleDc.Action == POWER_ACTION.PowerActionSleep)                  return (int)pp.user.IdleTimeoutDc;              }              return 0;              case SystemPowerSettingType.HIBERNATE_AFTER:              if (AC)              {                if (pp.user.IdleAc.Action == POWER_ACTION.PowerActionHibernate)                  return (int)pp.user.IdleTimeoutAc;                if (pp.mach.DozeS4TimeoutAc != 0)                  return (int)(pp.mach.DozeS4TimeoutAc + pp.user.IdleTimeoutAc);              }              else              {                if (pp.user.IdleDc.Action == POWER_ACTION.PowerActionHibernate)                  return (int)pp.user.IdleTimeoutDc;                if (pp.mach.DozeS4TimeoutDc != 0)                  return (int)(pp.mach.DozeS4TimeoutDc + pp.user.IdleTimeoutDc);              }              return 0;              case SystemPowerSettingType.LID_CLOSE_ACTION:              if (AC)              {                action = gpp.user.LidCloseAc.Action;                eventCode = gpp.user.LidCloseAc.EventCode;              }              else              {                action = gpp.user.LidCloseDc.Action;                eventCode = gpp.user.LidCloseDc.EventCode;              }              switch (action)              {                case POWER_ACTION.PowerActionSleep:                  return 1; // Sleep                case POWER_ACTION.PowerActionHibernate:                  return 2; // Hibernate                default:                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN) != 0)                    return 3; // Shutdown                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_BUTTON) != 0)                    return 4; // Ask User                  return 0; //Do nothing              }              case SystemPowerSettingType.POWER_BUTTON_ACTION:              if (AC)              {                action = gpp.user.PowerButtonAc.Action;                eventCode = gpp.user.PowerButtonAc.EventCode;              }              else              {                action = gpp.user.PowerButtonDc.Action;                eventCode = gpp.user.PowerButtonDc.EventCode;              }              switch (action)              {                case POWER_ACTION.PowerActionSleep:                  return 1; // Sleep                case POWER_ACTION.PowerActionHibernate:                  return 2; // Hibernate                default:                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN) != 0)                    return 3; // Shutdown                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_BUTTON) != 0)                    return 4; // Ask User                  return 0; //Do nothing              }              case SystemPowerSettingType.SLEEP_BUTTON_ACTION:              if (AC)              {                action = gpp.user.SleepButtonAc.Action;                eventCode = gpp.user.SleepButtonAc.EventCode;              }              else              {                action = gpp.user.SleepButtonDc.Action;                eventCode = gpp.user.SleepButtonDc.EventCode;              }              switch (action)              {                case POWER_ACTION.PowerActionSleep:                  return 1; // Sleep                case POWER_ACTION.PowerActionHibernate:                  return 2; // Hibernate                default:                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN) != 0)                    return 3; // Shutdown                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_BUTTON) != 0)                    return 4; // Ask User                  return 0; //Do nothing              }              default:              return 0;          }
Magic Number,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,GetPowerPolicySetting,The following statement contains a magic number: switch (settingType)          {            case SystemPowerSettingType.STANDBYIDLE:              if (AC)              {                if (pp.user.IdleAc.Action == POWER_ACTION.PowerActionSleep)                  return (int)pp.user.IdleTimeoutAc;              }              else              {                if (pp.user.IdleDc.Action == POWER_ACTION.PowerActionSleep)                  return (int)pp.user.IdleTimeoutDc;              }              return 0;              case SystemPowerSettingType.HIBERNATE_AFTER:              if (AC)              {                if (pp.user.IdleAc.Action == POWER_ACTION.PowerActionHibernate)                  return (int)pp.user.IdleTimeoutAc;                if (pp.mach.DozeS4TimeoutAc != 0)                  return (int)(pp.mach.DozeS4TimeoutAc + pp.user.IdleTimeoutAc);              }              else              {                if (pp.user.IdleDc.Action == POWER_ACTION.PowerActionHibernate)                  return (int)pp.user.IdleTimeoutDc;                if (pp.mach.DozeS4TimeoutDc != 0)                  return (int)(pp.mach.DozeS4TimeoutDc + pp.user.IdleTimeoutDc);              }              return 0;              case SystemPowerSettingType.LID_CLOSE_ACTION:              if (AC)              {                action = gpp.user.LidCloseAc.Action;                eventCode = gpp.user.LidCloseAc.EventCode;              }              else              {                action = gpp.user.LidCloseDc.Action;                eventCode = gpp.user.LidCloseDc.EventCode;              }              switch (action)              {                case POWER_ACTION.PowerActionSleep:                  return 1; // Sleep                case POWER_ACTION.PowerActionHibernate:                  return 2; // Hibernate                default:                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN) != 0)                    return 3; // Shutdown                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_BUTTON) != 0)                    return 4; // Ask User                  return 0; //Do nothing              }              case SystemPowerSettingType.POWER_BUTTON_ACTION:              if (AC)              {                action = gpp.user.PowerButtonAc.Action;                eventCode = gpp.user.PowerButtonAc.EventCode;              }              else              {                action = gpp.user.PowerButtonDc.Action;                eventCode = gpp.user.PowerButtonDc.EventCode;              }              switch (action)              {                case POWER_ACTION.PowerActionSleep:                  return 1; // Sleep                case POWER_ACTION.PowerActionHibernate:                  return 2; // Hibernate                default:                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN) != 0)                    return 3; // Shutdown                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_BUTTON) != 0)                    return 4; // Ask User                  return 0; //Do nothing              }              case SystemPowerSettingType.SLEEP_BUTTON_ACTION:              if (AC)              {                action = gpp.user.SleepButtonAc.Action;                eventCode = gpp.user.SleepButtonAc.EventCode;              }              else              {                action = gpp.user.SleepButtonDc.Action;                eventCode = gpp.user.SleepButtonDc.EventCode;              }              switch (action)              {                case POWER_ACTION.PowerActionSleep:                  return 1; // Sleep                case POWER_ACTION.PowerActionHibernate:                  return 2; // Hibernate                default:                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN) != 0)                    return 3; // Shutdown                  if ((eventCode & PowerActionEventCode.POWER_USER_NOTIFY_BUTTON) != 0)                    return 4; // Ask User                  return 0; //Do nothing              }              default:              return 0;          }
Magic Number,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,SetPowerPolicySetting,The following statement contains a magic number: switch (settingType)          {            case SystemPowerSettingType.STANDBYIDLE:              if (AC)              {                pp.user.IdleTimeoutAc = value;                if (value == 0 && pp.mach.DozeS4TimeoutAc != 0)                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionHibernate;                else                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionSleep;              }              else              {                pp.user.IdleTimeoutDc = value;                if (value == 0 && pp.mach.DozeS4TimeoutDc != 0)                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionHibernate;                else                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionSleep;              }              break;              case SystemPowerSettingType.HIBERNATE_AFTER:              if (AC)              {                if (pp.user.IdleTimeoutAc == 0)                {                  pp.user.IdleTimeoutAc = value;                  pp.mach.DozeS4TimeoutAc = 0;                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionHibernate;                }                else                {                  if (value > pp.user.IdleTimeoutAc)                    pp.mach.DozeS4TimeoutAc = value - pp.user.IdleTimeoutAc;                  else                    pp.mach.DozeS4TimeoutAc = value;                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionSleep;                }              }              else              {                if (pp.user.IdleTimeoutDc == 0)                {                  pp.user.IdleTimeoutDc = value;                  pp.mach.DozeS4TimeoutDc = 0;                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionHibernate;                }                else                {                  if (value > pp.user.IdleTimeoutDc)                    pp.mach.DozeS4TimeoutDc = value - pp.user.IdleTimeoutDc;                  else                    pp.mach.DozeS4TimeoutDc = value;                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionSleep;                }              }              break;              case SystemPowerSettingType.LID_CLOSE_ACTION:              eventCode = 0;              switch (value)              {                case 0: // Do nothing                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_FORCE_TRIGGER_RESET;                  break;                case 1: // Sleep                  action = POWER_ACTION.PowerActionSleep;                  break;                case 2: // Hibernate                  action = POWER_ACTION.PowerActionHibernate;                  break;                case 3: // Shutdown                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN;                  break;                case 4: // Ask User                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_BUTTON;                  break;                default:                  return;              }              if (AC)              {                  gpp.user.LidCloseAc.Action = action;                  gpp.user.LidCloseAc.EventCode = eventCode;              }              else              {                gpp.user.LidCloseDc.Action = action;                gpp.user.LidCloseDc.EventCode = eventCode;              }              break;              case SystemPowerSettingType.POWER_BUTTON_ACTION:              eventCode = 0;              switch (value)              {                case 0: // Do nothing                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_FORCE_TRIGGER_RESET;                  break;                case 1: // Sleep                  action = POWER_ACTION.PowerActionSleep;                  break;                case 2: // Hibernate                  action = POWER_ACTION.PowerActionHibernate;                  break;                case 3: // Shutdown                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN;                  break;                case 4: // Ask User                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_BUTTON;                  break;                default:                  return;              }              if (AC)              {                  gpp.user.PowerButtonAc.Action = action;                  gpp.user.PowerButtonAc.EventCode = eventCode;              }              else              {                gpp.user.PowerButtonDc.Action = action;                gpp.user.PowerButtonDc.EventCode = eventCode;              }              break;              case SystemPowerSettingType.SLEEP_BUTTON_ACTION:              eventCode = 0;              switch (value)              {                case 0: // Do nothing                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_FORCE_TRIGGER_RESET;                  break;                case 1: // Sleep                  action = POWER_ACTION.PowerActionSleep;                  break;                case 2: // Hibernate                  action = POWER_ACTION.PowerActionHibernate;                  break;                case 3: // Shutdown                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN;                  break;                case 4: // Ask User                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_BUTTON;                  break;                default:                  return;              }              if (AC)              {                gpp.user.SleepButtonAc.Action = action;                gpp.user.SleepButtonAc.EventCode = eventCode;              }              else              {                gpp.user.SleepButtonDc.Action = action;                gpp.user.SleepButtonDc.EventCode = eventCode;              }              break;              default:              return;          }
Magic Number,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,SetPowerPolicySetting,The following statement contains a magic number: switch (settingType)          {            case SystemPowerSettingType.STANDBYIDLE:              if (AC)              {                pp.user.IdleTimeoutAc = value;                if (value == 0 && pp.mach.DozeS4TimeoutAc != 0)                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionHibernate;                else                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionSleep;              }              else              {                pp.user.IdleTimeoutDc = value;                if (value == 0 && pp.mach.DozeS4TimeoutDc != 0)                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionHibernate;                else                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionSleep;              }              break;              case SystemPowerSettingType.HIBERNATE_AFTER:              if (AC)              {                if (pp.user.IdleTimeoutAc == 0)                {                  pp.user.IdleTimeoutAc = value;                  pp.mach.DozeS4TimeoutAc = 0;                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionHibernate;                }                else                {                  if (value > pp.user.IdleTimeoutAc)                    pp.mach.DozeS4TimeoutAc = value - pp.user.IdleTimeoutAc;                  else                    pp.mach.DozeS4TimeoutAc = value;                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionSleep;                }              }              else              {                if (pp.user.IdleTimeoutDc == 0)                {                  pp.user.IdleTimeoutDc = value;                  pp.mach.DozeS4TimeoutDc = 0;                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionHibernate;                }                else                {                  if (value > pp.user.IdleTimeoutDc)                    pp.mach.DozeS4TimeoutDc = value - pp.user.IdleTimeoutDc;                  else                    pp.mach.DozeS4TimeoutDc = value;                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionSleep;                }              }              break;              case SystemPowerSettingType.LID_CLOSE_ACTION:              eventCode = 0;              switch (value)              {                case 0: // Do nothing                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_FORCE_TRIGGER_RESET;                  break;                case 1: // Sleep                  action = POWER_ACTION.PowerActionSleep;                  break;                case 2: // Hibernate                  action = POWER_ACTION.PowerActionHibernate;                  break;                case 3: // Shutdown                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN;                  break;                case 4: // Ask User                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_BUTTON;                  break;                default:                  return;              }              if (AC)              {                  gpp.user.LidCloseAc.Action = action;                  gpp.user.LidCloseAc.EventCode = eventCode;              }              else              {                gpp.user.LidCloseDc.Action = action;                gpp.user.LidCloseDc.EventCode = eventCode;              }              break;              case SystemPowerSettingType.POWER_BUTTON_ACTION:              eventCode = 0;              switch (value)              {                case 0: // Do nothing                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_FORCE_TRIGGER_RESET;                  break;                case 1: // Sleep                  action = POWER_ACTION.PowerActionSleep;                  break;                case 2: // Hibernate                  action = POWER_ACTION.PowerActionHibernate;                  break;                case 3: // Shutdown                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN;                  break;                case 4: // Ask User                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_BUTTON;                  break;                default:                  return;              }              if (AC)              {                  gpp.user.PowerButtonAc.Action = action;                  gpp.user.PowerButtonAc.EventCode = eventCode;              }              else              {                gpp.user.PowerButtonDc.Action = action;                gpp.user.PowerButtonDc.EventCode = eventCode;              }              break;              case SystemPowerSettingType.SLEEP_BUTTON_ACTION:              eventCode = 0;              switch (value)              {                case 0: // Do nothing                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_FORCE_TRIGGER_RESET;                  break;                case 1: // Sleep                  action = POWER_ACTION.PowerActionSleep;                  break;                case 2: // Hibernate                  action = POWER_ACTION.PowerActionHibernate;                  break;                case 3: // Shutdown                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN;                  break;                case 4: // Ask User                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_BUTTON;                  break;                default:                  return;              }              if (AC)              {                gpp.user.SleepButtonAc.Action = action;                gpp.user.SleepButtonAc.EventCode = eventCode;              }              else              {                gpp.user.SleepButtonDc.Action = action;                gpp.user.SleepButtonDc.EventCode = eventCode;              }              break;              default:              return;          }
Magic Number,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,SetPowerPolicySetting,The following statement contains a magic number: switch (settingType)          {            case SystemPowerSettingType.STANDBYIDLE:              if (AC)              {                pp.user.IdleTimeoutAc = value;                if (value == 0 && pp.mach.DozeS4TimeoutAc != 0)                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionHibernate;                else                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionSleep;              }              else              {                pp.user.IdleTimeoutDc = value;                if (value == 0 && pp.mach.DozeS4TimeoutDc != 0)                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionHibernate;                else                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionSleep;              }              break;              case SystemPowerSettingType.HIBERNATE_AFTER:              if (AC)              {                if (pp.user.IdleTimeoutAc == 0)                {                  pp.user.IdleTimeoutAc = value;                  pp.mach.DozeS4TimeoutAc = 0;                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionHibernate;                }                else                {                  if (value > pp.user.IdleTimeoutAc)                    pp.mach.DozeS4TimeoutAc = value - pp.user.IdleTimeoutAc;                  else                    pp.mach.DozeS4TimeoutAc = value;                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionSleep;                }              }              else              {                if (pp.user.IdleTimeoutDc == 0)                {                  pp.user.IdleTimeoutDc = value;                  pp.mach.DozeS4TimeoutDc = 0;                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionHibernate;                }                else                {                  if (value > pp.user.IdleTimeoutDc)                    pp.mach.DozeS4TimeoutDc = value - pp.user.IdleTimeoutDc;                  else                    pp.mach.DozeS4TimeoutDc = value;                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionSleep;                }              }              break;              case SystemPowerSettingType.LID_CLOSE_ACTION:              eventCode = 0;              switch (value)              {                case 0: // Do nothing                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_FORCE_TRIGGER_RESET;                  break;                case 1: // Sleep                  action = POWER_ACTION.PowerActionSleep;                  break;                case 2: // Hibernate                  action = POWER_ACTION.PowerActionHibernate;                  break;                case 3: // Shutdown                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN;                  break;                case 4: // Ask User                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_BUTTON;                  break;                default:                  return;              }              if (AC)              {                  gpp.user.LidCloseAc.Action = action;                  gpp.user.LidCloseAc.EventCode = eventCode;              }              else              {                gpp.user.LidCloseDc.Action = action;                gpp.user.LidCloseDc.EventCode = eventCode;              }              break;              case SystemPowerSettingType.POWER_BUTTON_ACTION:              eventCode = 0;              switch (value)              {                case 0: // Do nothing                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_FORCE_TRIGGER_RESET;                  break;                case 1: // Sleep                  action = POWER_ACTION.PowerActionSleep;                  break;                case 2: // Hibernate                  action = POWER_ACTION.PowerActionHibernate;                  break;                case 3: // Shutdown                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN;                  break;                case 4: // Ask User                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_BUTTON;                  break;                default:                  return;              }              if (AC)              {                  gpp.user.PowerButtonAc.Action = action;                  gpp.user.PowerButtonAc.EventCode = eventCode;              }              else              {                gpp.user.PowerButtonDc.Action = action;                gpp.user.PowerButtonDc.EventCode = eventCode;              }              break;              case SystemPowerSettingType.SLEEP_BUTTON_ACTION:              eventCode = 0;              switch (value)              {                case 0: // Do nothing                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_FORCE_TRIGGER_RESET;                  break;                case 1: // Sleep                  action = POWER_ACTION.PowerActionSleep;                  break;                case 2: // Hibernate                  action = POWER_ACTION.PowerActionHibernate;                  break;                case 3: // Shutdown                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN;                  break;                case 4: // Ask User                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_BUTTON;                  break;                default:                  return;              }              if (AC)              {                gpp.user.SleepButtonAc.Action = action;                gpp.user.SleepButtonAc.EventCode = eventCode;              }              else              {                gpp.user.SleepButtonDc.Action = action;                gpp.user.SleepButtonDc.EventCode = eventCode;              }              break;              default:              return;          }
Magic Number,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,SetPowerPolicySetting,The following statement contains a magic number: switch (settingType)          {            case SystemPowerSettingType.STANDBYIDLE:              if (AC)              {                pp.user.IdleTimeoutAc = value;                if (value == 0 && pp.mach.DozeS4TimeoutAc != 0)                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionHibernate;                else                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionSleep;              }              else              {                pp.user.IdleTimeoutDc = value;                if (value == 0 && pp.mach.DozeS4TimeoutDc != 0)                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionHibernate;                else                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionSleep;              }              break;              case SystemPowerSettingType.HIBERNATE_AFTER:              if (AC)              {                if (pp.user.IdleTimeoutAc == 0)                {                  pp.user.IdleTimeoutAc = value;                  pp.mach.DozeS4TimeoutAc = 0;                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionHibernate;                }                else                {                  if (value > pp.user.IdleTimeoutAc)                    pp.mach.DozeS4TimeoutAc = value - pp.user.IdleTimeoutAc;                  else                    pp.mach.DozeS4TimeoutAc = value;                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionSleep;                }              }              else              {                if (pp.user.IdleTimeoutDc == 0)                {                  pp.user.IdleTimeoutDc = value;                  pp.mach.DozeS4TimeoutDc = 0;                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionHibernate;                }                else                {                  if (value > pp.user.IdleTimeoutDc)                    pp.mach.DozeS4TimeoutDc = value - pp.user.IdleTimeoutDc;                  else                    pp.mach.DozeS4TimeoutDc = value;                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionSleep;                }              }              break;              case SystemPowerSettingType.LID_CLOSE_ACTION:              eventCode = 0;              switch (value)              {                case 0: // Do nothing                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_FORCE_TRIGGER_RESET;                  break;                case 1: // Sleep                  action = POWER_ACTION.PowerActionSleep;                  break;                case 2: // Hibernate                  action = POWER_ACTION.PowerActionHibernate;                  break;                case 3: // Shutdown                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN;                  break;                case 4: // Ask User                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_BUTTON;                  break;                default:                  return;              }              if (AC)              {                  gpp.user.LidCloseAc.Action = action;                  gpp.user.LidCloseAc.EventCode = eventCode;              }              else              {                gpp.user.LidCloseDc.Action = action;                gpp.user.LidCloseDc.EventCode = eventCode;              }              break;              case SystemPowerSettingType.POWER_BUTTON_ACTION:              eventCode = 0;              switch (value)              {                case 0: // Do nothing                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_FORCE_TRIGGER_RESET;                  break;                case 1: // Sleep                  action = POWER_ACTION.PowerActionSleep;                  break;                case 2: // Hibernate                  action = POWER_ACTION.PowerActionHibernate;                  break;                case 3: // Shutdown                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN;                  break;                case 4: // Ask User                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_BUTTON;                  break;                default:                  return;              }              if (AC)              {                  gpp.user.PowerButtonAc.Action = action;                  gpp.user.PowerButtonAc.EventCode = eventCode;              }              else              {                gpp.user.PowerButtonDc.Action = action;                gpp.user.PowerButtonDc.EventCode = eventCode;              }              break;              case SystemPowerSettingType.SLEEP_BUTTON_ACTION:              eventCode = 0;              switch (value)              {                case 0: // Do nothing                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_FORCE_TRIGGER_RESET;                  break;                case 1: // Sleep                  action = POWER_ACTION.PowerActionSleep;                  break;                case 2: // Hibernate                  action = POWER_ACTION.PowerActionHibernate;                  break;                case 3: // Shutdown                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN;                  break;                case 4: // Ask User                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_BUTTON;                  break;                default:                  return;              }              if (AC)              {                gpp.user.SleepButtonAc.Action = action;                gpp.user.SleepButtonAc.EventCode = eventCode;              }              else              {                gpp.user.SleepButtonDc.Action = action;                gpp.user.SleepButtonDc.EventCode = eventCode;              }              break;              default:              return;          }
Magic Number,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,SetPowerPolicySetting,The following statement contains a magic number: switch (settingType)          {            case SystemPowerSettingType.STANDBYIDLE:              if (AC)              {                pp.user.IdleTimeoutAc = value;                if (value == 0 && pp.mach.DozeS4TimeoutAc != 0)                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionHibernate;                else                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionSleep;              }              else              {                pp.user.IdleTimeoutDc = value;                if (value == 0 && pp.mach.DozeS4TimeoutDc != 0)                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionHibernate;                else                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionSleep;              }              break;              case SystemPowerSettingType.HIBERNATE_AFTER:              if (AC)              {                if (pp.user.IdleTimeoutAc == 0)                {                  pp.user.IdleTimeoutAc = value;                  pp.mach.DozeS4TimeoutAc = 0;                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionHibernate;                }                else                {                  if (value > pp.user.IdleTimeoutAc)                    pp.mach.DozeS4TimeoutAc = value - pp.user.IdleTimeoutAc;                  else                    pp.mach.DozeS4TimeoutAc = value;                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionSleep;                }              }              else              {                if (pp.user.IdleTimeoutDc == 0)                {                  pp.user.IdleTimeoutDc = value;                  pp.mach.DozeS4TimeoutDc = 0;                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionHibernate;                }                else                {                  if (value > pp.user.IdleTimeoutDc)                    pp.mach.DozeS4TimeoutDc = value - pp.user.IdleTimeoutDc;                  else                    pp.mach.DozeS4TimeoutDc = value;                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionSleep;                }              }              break;              case SystemPowerSettingType.LID_CLOSE_ACTION:              eventCode = 0;              switch (value)              {                case 0: // Do nothing                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_FORCE_TRIGGER_RESET;                  break;                case 1: // Sleep                  action = POWER_ACTION.PowerActionSleep;                  break;                case 2: // Hibernate                  action = POWER_ACTION.PowerActionHibernate;                  break;                case 3: // Shutdown                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN;                  break;                case 4: // Ask User                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_BUTTON;                  break;                default:                  return;              }              if (AC)              {                  gpp.user.LidCloseAc.Action = action;                  gpp.user.LidCloseAc.EventCode = eventCode;              }              else              {                gpp.user.LidCloseDc.Action = action;                gpp.user.LidCloseDc.EventCode = eventCode;              }              break;              case SystemPowerSettingType.POWER_BUTTON_ACTION:              eventCode = 0;              switch (value)              {                case 0: // Do nothing                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_FORCE_TRIGGER_RESET;                  break;                case 1: // Sleep                  action = POWER_ACTION.PowerActionSleep;                  break;                case 2: // Hibernate                  action = POWER_ACTION.PowerActionHibernate;                  break;                case 3: // Shutdown                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN;                  break;                case 4: // Ask User                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_BUTTON;                  break;                default:                  return;              }              if (AC)              {                  gpp.user.PowerButtonAc.Action = action;                  gpp.user.PowerButtonAc.EventCode = eventCode;              }              else              {                gpp.user.PowerButtonDc.Action = action;                gpp.user.PowerButtonDc.EventCode = eventCode;              }              break;              case SystemPowerSettingType.SLEEP_BUTTON_ACTION:              eventCode = 0;              switch (value)              {                case 0: // Do nothing                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_FORCE_TRIGGER_RESET;                  break;                case 1: // Sleep                  action = POWER_ACTION.PowerActionSleep;                  break;                case 2: // Hibernate                  action = POWER_ACTION.PowerActionHibernate;                  break;                case 3: // Shutdown                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN;                  break;                case 4: // Ask User                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_BUTTON;                  break;                default:                  return;              }              if (AC)              {                gpp.user.SleepButtonAc.Action = action;                gpp.user.SleepButtonAc.EventCode = eventCode;              }              else              {                gpp.user.SleepButtonDc.Action = action;                gpp.user.SleepButtonDc.EventCode = eventCode;              }              break;              default:              return;          }
Magic Number,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,SetPowerPolicySetting,The following statement contains a magic number: switch (settingType)          {            case SystemPowerSettingType.STANDBYIDLE:              if (AC)              {                pp.user.IdleTimeoutAc = value;                if (value == 0 && pp.mach.DozeS4TimeoutAc != 0)                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionHibernate;                else                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionSleep;              }              else              {                pp.user.IdleTimeoutDc = value;                if (value == 0 && pp.mach.DozeS4TimeoutDc != 0)                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionHibernate;                else                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionSleep;              }              break;              case SystemPowerSettingType.HIBERNATE_AFTER:              if (AC)              {                if (pp.user.IdleTimeoutAc == 0)                {                  pp.user.IdleTimeoutAc = value;                  pp.mach.DozeS4TimeoutAc = 0;                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionHibernate;                }                else                {                  if (value > pp.user.IdleTimeoutAc)                    pp.mach.DozeS4TimeoutAc = value - pp.user.IdleTimeoutAc;                  else                    pp.mach.DozeS4TimeoutAc = value;                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionSleep;                }              }              else              {                if (pp.user.IdleTimeoutDc == 0)                {                  pp.user.IdleTimeoutDc = value;                  pp.mach.DozeS4TimeoutDc = 0;                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionHibernate;                }                else                {                  if (value > pp.user.IdleTimeoutDc)                    pp.mach.DozeS4TimeoutDc = value - pp.user.IdleTimeoutDc;                  else                    pp.mach.DozeS4TimeoutDc = value;                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionSleep;                }              }              break;              case SystemPowerSettingType.LID_CLOSE_ACTION:              eventCode = 0;              switch (value)              {                case 0: // Do nothing                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_FORCE_TRIGGER_RESET;                  break;                case 1: // Sleep                  action = POWER_ACTION.PowerActionSleep;                  break;                case 2: // Hibernate                  action = POWER_ACTION.PowerActionHibernate;                  break;                case 3: // Shutdown                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN;                  break;                case 4: // Ask User                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_BUTTON;                  break;                default:                  return;              }              if (AC)              {                  gpp.user.LidCloseAc.Action = action;                  gpp.user.LidCloseAc.EventCode = eventCode;              }              else              {                gpp.user.LidCloseDc.Action = action;                gpp.user.LidCloseDc.EventCode = eventCode;              }              break;              case SystemPowerSettingType.POWER_BUTTON_ACTION:              eventCode = 0;              switch (value)              {                case 0: // Do nothing                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_FORCE_TRIGGER_RESET;                  break;                case 1: // Sleep                  action = POWER_ACTION.PowerActionSleep;                  break;                case 2: // Hibernate                  action = POWER_ACTION.PowerActionHibernate;                  break;                case 3: // Shutdown                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN;                  break;                case 4: // Ask User                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_BUTTON;                  break;                default:                  return;              }              if (AC)              {                  gpp.user.PowerButtonAc.Action = action;                  gpp.user.PowerButtonAc.EventCode = eventCode;              }              else              {                gpp.user.PowerButtonDc.Action = action;                gpp.user.PowerButtonDc.EventCode = eventCode;              }              break;              case SystemPowerSettingType.SLEEP_BUTTON_ACTION:              eventCode = 0;              switch (value)              {                case 0: // Do nothing                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_FORCE_TRIGGER_RESET;                  break;                case 1: // Sleep                  action = POWER_ACTION.PowerActionSleep;                  break;                case 2: // Hibernate                  action = POWER_ACTION.PowerActionHibernate;                  break;                case 3: // Shutdown                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN;                  break;                case 4: // Ask User                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_BUTTON;                  break;                default:                  return;              }              if (AC)              {                gpp.user.SleepButtonAc.Action = action;                gpp.user.SleepButtonAc.EventCode = eventCode;              }              else              {                gpp.user.SleepButtonDc.Action = action;                gpp.user.SleepButtonDc.EventCode = eventCode;              }              break;              default:              return;          }
Magic Number,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,SetPowerPolicySetting,The following statement contains a magic number: switch (settingType)          {            case SystemPowerSettingType.STANDBYIDLE:              if (AC)              {                pp.user.IdleTimeoutAc = value;                if (value == 0 && pp.mach.DozeS4TimeoutAc != 0)                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionHibernate;                else                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionSleep;              }              else              {                pp.user.IdleTimeoutDc = value;                if (value == 0 && pp.mach.DozeS4TimeoutDc != 0)                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionHibernate;                else                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionSleep;              }              break;              case SystemPowerSettingType.HIBERNATE_AFTER:              if (AC)              {                if (pp.user.IdleTimeoutAc == 0)                {                  pp.user.IdleTimeoutAc = value;                  pp.mach.DozeS4TimeoutAc = 0;                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionHibernate;                }                else                {                  if (value > pp.user.IdleTimeoutAc)                    pp.mach.DozeS4TimeoutAc = value - pp.user.IdleTimeoutAc;                  else                    pp.mach.DozeS4TimeoutAc = value;                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionSleep;                }              }              else              {                if (pp.user.IdleTimeoutDc == 0)                {                  pp.user.IdleTimeoutDc = value;                  pp.mach.DozeS4TimeoutDc = 0;                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionHibernate;                }                else                {                  if (value > pp.user.IdleTimeoutDc)                    pp.mach.DozeS4TimeoutDc = value - pp.user.IdleTimeoutDc;                  else                    pp.mach.DozeS4TimeoutDc = value;                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionSleep;                }              }              break;              case SystemPowerSettingType.LID_CLOSE_ACTION:              eventCode = 0;              switch (value)              {                case 0: // Do nothing                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_FORCE_TRIGGER_RESET;                  break;                case 1: // Sleep                  action = POWER_ACTION.PowerActionSleep;                  break;                case 2: // Hibernate                  action = POWER_ACTION.PowerActionHibernate;                  break;                case 3: // Shutdown                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN;                  break;                case 4: // Ask User                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_BUTTON;                  break;                default:                  return;              }              if (AC)              {                  gpp.user.LidCloseAc.Action = action;                  gpp.user.LidCloseAc.EventCode = eventCode;              }              else              {                gpp.user.LidCloseDc.Action = action;                gpp.user.LidCloseDc.EventCode = eventCode;              }              break;              case SystemPowerSettingType.POWER_BUTTON_ACTION:              eventCode = 0;              switch (value)              {                case 0: // Do nothing                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_FORCE_TRIGGER_RESET;                  break;                case 1: // Sleep                  action = POWER_ACTION.PowerActionSleep;                  break;                case 2: // Hibernate                  action = POWER_ACTION.PowerActionHibernate;                  break;                case 3: // Shutdown                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN;                  break;                case 4: // Ask User                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_BUTTON;                  break;                default:                  return;              }              if (AC)              {                  gpp.user.PowerButtonAc.Action = action;                  gpp.user.PowerButtonAc.EventCode = eventCode;              }              else              {                gpp.user.PowerButtonDc.Action = action;                gpp.user.PowerButtonDc.EventCode = eventCode;              }              break;              case SystemPowerSettingType.SLEEP_BUTTON_ACTION:              eventCode = 0;              switch (value)              {                case 0: // Do nothing                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_FORCE_TRIGGER_RESET;                  break;                case 1: // Sleep                  action = POWER_ACTION.PowerActionSleep;                  break;                case 2: // Hibernate                  action = POWER_ACTION.PowerActionHibernate;                  break;                case 3: // Shutdown                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN;                  break;                case 4: // Ask User                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_BUTTON;                  break;                default:                  return;              }              if (AC)              {                gpp.user.SleepButtonAc.Action = action;                gpp.user.SleepButtonAc.EventCode = eventCode;              }              else              {                gpp.user.SleepButtonDc.Action = action;                gpp.user.SleepButtonDc.EventCode = eventCode;              }              break;              default:              return;          }
Magic Number,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,SetPowerPolicySetting,The following statement contains a magic number: switch (settingType)          {            case SystemPowerSettingType.STANDBYIDLE:              if (AC)              {                pp.user.IdleTimeoutAc = value;                if (value == 0 && pp.mach.DozeS4TimeoutAc != 0)                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionHibernate;                else                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionSleep;              }              else              {                pp.user.IdleTimeoutDc = value;                if (value == 0 && pp.mach.DozeS4TimeoutDc != 0)                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionHibernate;                else                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionSleep;              }              break;              case SystemPowerSettingType.HIBERNATE_AFTER:              if (AC)              {                if (pp.user.IdleTimeoutAc == 0)                {                  pp.user.IdleTimeoutAc = value;                  pp.mach.DozeS4TimeoutAc = 0;                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionHibernate;                }                else                {                  if (value > pp.user.IdleTimeoutAc)                    pp.mach.DozeS4TimeoutAc = value - pp.user.IdleTimeoutAc;                  else                    pp.mach.DozeS4TimeoutAc = value;                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionSleep;                }              }              else              {                if (pp.user.IdleTimeoutDc == 0)                {                  pp.user.IdleTimeoutDc = value;                  pp.mach.DozeS4TimeoutDc = 0;                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionHibernate;                }                else                {                  if (value > pp.user.IdleTimeoutDc)                    pp.mach.DozeS4TimeoutDc = value - pp.user.IdleTimeoutDc;                  else                    pp.mach.DozeS4TimeoutDc = value;                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionSleep;                }              }              break;              case SystemPowerSettingType.LID_CLOSE_ACTION:              eventCode = 0;              switch (value)              {                case 0: // Do nothing                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_FORCE_TRIGGER_RESET;                  break;                case 1: // Sleep                  action = POWER_ACTION.PowerActionSleep;                  break;                case 2: // Hibernate                  action = POWER_ACTION.PowerActionHibernate;                  break;                case 3: // Shutdown                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN;                  break;                case 4: // Ask User                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_BUTTON;                  break;                default:                  return;              }              if (AC)              {                  gpp.user.LidCloseAc.Action = action;                  gpp.user.LidCloseAc.EventCode = eventCode;              }              else              {                gpp.user.LidCloseDc.Action = action;                gpp.user.LidCloseDc.EventCode = eventCode;              }              break;              case SystemPowerSettingType.POWER_BUTTON_ACTION:              eventCode = 0;              switch (value)              {                case 0: // Do nothing                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_FORCE_TRIGGER_RESET;                  break;                case 1: // Sleep                  action = POWER_ACTION.PowerActionSleep;                  break;                case 2: // Hibernate                  action = POWER_ACTION.PowerActionHibernate;                  break;                case 3: // Shutdown                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN;                  break;                case 4: // Ask User                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_BUTTON;                  break;                default:                  return;              }              if (AC)              {                  gpp.user.PowerButtonAc.Action = action;                  gpp.user.PowerButtonAc.EventCode = eventCode;              }              else              {                gpp.user.PowerButtonDc.Action = action;                gpp.user.PowerButtonDc.EventCode = eventCode;              }              break;              case SystemPowerSettingType.SLEEP_BUTTON_ACTION:              eventCode = 0;              switch (value)              {                case 0: // Do nothing                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_FORCE_TRIGGER_RESET;                  break;                case 1: // Sleep                  action = POWER_ACTION.PowerActionSleep;                  break;                case 2: // Hibernate                  action = POWER_ACTION.PowerActionHibernate;                  break;                case 3: // Shutdown                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN;                  break;                case 4: // Ask User                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_BUTTON;                  break;                default:                  return;              }              if (AC)              {                gpp.user.SleepButtonAc.Action = action;                gpp.user.SleepButtonAc.EventCode = eventCode;              }              else              {                gpp.user.SleepButtonDc.Action = action;                gpp.user.SleepButtonDc.EventCode = eventCode;              }              break;              default:              return;          }
Magic Number,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,SetPowerPolicySetting,The following statement contains a magic number: switch (settingType)          {            case SystemPowerSettingType.STANDBYIDLE:              if (AC)              {                pp.user.IdleTimeoutAc = value;                if (value == 0 && pp.mach.DozeS4TimeoutAc != 0)                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionHibernate;                else                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionSleep;              }              else              {                pp.user.IdleTimeoutDc = value;                if (value == 0 && pp.mach.DozeS4TimeoutDc != 0)                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionHibernate;                else                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionSleep;              }              break;              case SystemPowerSettingType.HIBERNATE_AFTER:              if (AC)              {                if (pp.user.IdleTimeoutAc == 0)                {                  pp.user.IdleTimeoutAc = value;                  pp.mach.DozeS4TimeoutAc = 0;                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionHibernate;                }                else                {                  if (value > pp.user.IdleTimeoutAc)                    pp.mach.DozeS4TimeoutAc = value - pp.user.IdleTimeoutAc;                  else                    pp.mach.DozeS4TimeoutAc = value;                  pp.user.IdleAc.Action = POWER_ACTION.PowerActionSleep;                }              }              else              {                if (pp.user.IdleTimeoutDc == 0)                {                  pp.user.IdleTimeoutDc = value;                  pp.mach.DozeS4TimeoutDc = 0;                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionHibernate;                }                else                {                  if (value > pp.user.IdleTimeoutDc)                    pp.mach.DozeS4TimeoutDc = value - pp.user.IdleTimeoutDc;                  else                    pp.mach.DozeS4TimeoutDc = value;                  pp.user.IdleDc.Action = POWER_ACTION.PowerActionSleep;                }              }              break;              case SystemPowerSettingType.LID_CLOSE_ACTION:              eventCode = 0;              switch (value)              {                case 0: // Do nothing                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_FORCE_TRIGGER_RESET;                  break;                case 1: // Sleep                  action = POWER_ACTION.PowerActionSleep;                  break;                case 2: // Hibernate                  action = POWER_ACTION.PowerActionHibernate;                  break;                case 3: // Shutdown                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN;                  break;                case 4: // Ask User                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_BUTTON;                  break;                default:                  return;              }              if (AC)              {                  gpp.user.LidCloseAc.Action = action;                  gpp.user.LidCloseAc.EventCode = eventCode;              }              else              {                gpp.user.LidCloseDc.Action = action;                gpp.user.LidCloseDc.EventCode = eventCode;              }              break;              case SystemPowerSettingType.POWER_BUTTON_ACTION:              eventCode = 0;              switch (value)              {                case 0: // Do nothing                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_FORCE_TRIGGER_RESET;                  break;                case 1: // Sleep                  action = POWER_ACTION.PowerActionSleep;                  break;                case 2: // Hibernate                  action = POWER_ACTION.PowerActionHibernate;                  break;                case 3: // Shutdown                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN;                  break;                case 4: // Ask User                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_BUTTON;                  break;                default:                  return;              }              if (AC)              {                  gpp.user.PowerButtonAc.Action = action;                  gpp.user.PowerButtonAc.EventCode = eventCode;              }              else              {                gpp.user.PowerButtonDc.Action = action;                gpp.user.PowerButtonDc.EventCode = eventCode;              }              break;              case SystemPowerSettingType.SLEEP_BUTTON_ACTION:              eventCode = 0;              switch (value)              {                case 0: // Do nothing                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_FORCE_TRIGGER_RESET;                  break;                case 1: // Sleep                  action = POWER_ACTION.PowerActionSleep;                  break;                case 2: // Hibernate                  action = POWER_ACTION.PowerActionHibernate;                  break;                case 3: // Shutdown                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_SHUTDOWN;                  break;                case 4: // Ask User                  action = POWER_ACTION.PowerActionNone;                  eventCode = PowerActionEventCode.POWER_USER_NOTIFY_BUTTON;                  break;                default:                  return;              }              if (AC)              {                gpp.user.SleepButtonAc.Action = action;                gpp.user.SleepButtonAc.EventCode = eventCode;              }              else              {                gpp.user.SleepButtonDc.Action = action;                gpp.user.SleepButtonDc.EventCode = eventCode;              }              break;              default:              return;          }
Magic Number,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,IsOS64Bit,The following statement contains a magic number: return (IntPtr.Size == 8 || (IntPtr.Size == 4 && Is32BitProcessOn64BitProcessor()));
Magic Number,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,IsOS64Bit,The following statement contains a magic number: return (IntPtr.Size == 8 || (IntPtr.Size == 4 && Is32BitProcessOn64BitProcessor()));
Duplicate Code,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,SetPowerPolicySetting,The method contains a code clone-set at the following line numbers (starting from the method definition): ((74' 99)' (111' 136)' (148' 173))
Missing Default,TvEngine.PowerScheduler.Interfaces,PowerManager,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\PowerScheduler.Interfaces\PowerManager.cs,SetStandbyMode,The following switch statement is missing a default case: switch (standbyMode)        {          case StandbyMode.StandbyAllowed:            SetThreadExecutionState(ExecutionState.ES_CONTINUOUS);            break;          case StandbyMode.StandbyPrevented:            SetThreadExecutionState(ExecutionState.ES_SYSTEM_REQUIRED | ExecutionState.ES_CONTINUOUS);            break;          case StandbyMode.AwayModeRequested:            if (Environment.OSVersion.Version.Major >= 6)              SetThreadExecutionState(ExecutionState.ES_SYSTEM_REQUIRED | ExecutionState.ES_AWAYMODE_REQUIRED | ExecutionState.ES_CONTINUOUS);            else              SetThreadExecutionState(ExecutionState.ES_SYSTEM_REQUIRED | ExecutionState.ES_CONTINUOUS);            break;        }
