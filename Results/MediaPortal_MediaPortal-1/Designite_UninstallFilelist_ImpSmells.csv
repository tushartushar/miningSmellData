Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MediaPortal.Utilities.CommandLine,CommandLine,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Tools\Script & Batch tools\UninstallFilelist\UninstallFilelist\CommandLine.cs,Parse,Cyclomatic complexity of the method is 8
Magic Number,UninstallFilelist,FileLister,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Tools\Script & Batch tools\UninstallFilelist\UninstallFilelist\FileLister.cs,FileLister,The following statement contains a magic number: _ignoredDirectories.Add(str.Substring(2));
Magic Number,MediaPortal.Utilities.CommandLine,CommandLine,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Tools\Script & Batch tools\UninstallFilelist\UninstallFilelist\CommandLine.cs,Parse,The following statement contains a magic number: string[] parts = Spliter.Split(txt' 3);
Magic Number,MediaPortal.Utilities.CommandLine,CommandLine,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Tools\Script & Batch tools\UninstallFilelist\UninstallFilelist\CommandLine.cs,Parse,The following statement contains a magic number: switch (parts.Length)          {              // Found a value (for the last parameter               // found (space separator))            case 1:              if (parameter != null)              {                options.SetOption(parameter' Remover.Replace(parts[0]' "$1"));                parameter = null;              }              else              {                // else Error: no parameter waiting for a value (skipped)                throw (new ArgumentException());              }              break;                // Found just a parameter            case 2:              // The last parameter is still waiting.               // With no value' set it to null.              if (parameter != null)              {                options.SetOption(parameter' null);              }                parameter = parts[1];              break;                // Parameter with enclosed value            case 3:              // The last parameter is still waiting.               // With no value' set it to null              if (parameter != null)              {                options.SetOption(parameter' null);              }                // Set Option              options.SetOption(parts[1]' Remover.Replace(parts[2]' "$1"));                // clear parameter              parameter = null;              break;          }
Magic Number,MediaPortal.Utilities.CommandLine,CommandLine,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Tools\Script & Batch tools\UninstallFilelist\UninstallFilelist\CommandLine.cs,Parse,The following statement contains a magic number: switch (parts.Length)          {              // Found a value (for the last parameter               // found (space separator))            case 1:              if (parameter != null)              {                options.SetOption(parameter' Remover.Replace(parts[0]' "$1"));                parameter = null;              }              else              {                // else Error: no parameter waiting for a value (skipped)                throw (new ArgumentException());              }              break;                // Found just a parameter            case 2:              // The last parameter is still waiting.               // With no value' set it to null.              if (parameter != null)              {                options.SetOption(parameter' null);              }                parameter = parts[1];              break;                // Parameter with enclosed value            case 3:              // The last parameter is still waiting.               // With no value' set it to null              if (parameter != null)              {                options.SetOption(parameter' null);              }                // Set Option              options.SetOption(parts[1]' Remover.Replace(parts[2]' "$1"));                // clear parameter              parameter = null;              break;          }
Magic Number,MediaPortal.Utilities.CommandLine,CommandLine,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Tools\Script & Batch tools\UninstallFilelist\UninstallFilelist\CommandLine.cs,Parse,The following statement contains a magic number: switch (parts.Length)          {              // Found a value (for the last parameter               // found (space separator))            case 1:              if (parameter != null)              {                options.SetOption(parameter' Remover.Replace(parts[0]' "$1"));                parameter = null;              }              else              {                // else Error: no parameter waiting for a value (skipped)                throw (new ArgumentException());              }              break;                // Found just a parameter            case 2:              // The last parameter is still waiting.               // With no value' set it to null.              if (parameter != null)              {                options.SetOption(parameter' null);              }                parameter = parts[1];              break;                // Parameter with enclosed value            case 3:              // The last parameter is still waiting.               // With no value' set it to null              if (parameter != null)              {                options.SetOption(parameter' null);              }                // Set Option              options.SetOption(parts[1]' Remover.Replace(parts[2]' "$1"));                // clear parameter              parameter = null;              break;          }
Missing Default,MediaPortal.Utilities.CommandLine,CommandLine,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Tools\Script & Batch tools\UninstallFilelist\UninstallFilelist\CommandLine.cs,Parse,The following switch statement is missing a default case: switch (parts.Length)          {              // Found a value (for the last parameter               // found (space separator))            case 1:              if (parameter != null)              {                options.SetOption(parameter' Remover.Replace(parts[0]' "$1"));                parameter = null;              }              else              {                // else Error: no parameter waiting for a value (skipped)                throw (new ArgumentException());              }              break;                // Found just a parameter            case 2:              // The last parameter is still waiting.               // With no value' set it to null.              if (parameter != null)              {                options.SetOption(parameter' null);              }                parameter = parts[1];              break;                // Parameter with enclosed value            case 3:              // The last parameter is still waiting.               // With no value' set it to null              if (parameter != null)              {                options.SetOption(parameter' null);              }                // Set Option              options.SetOption(parts[1]' Remover.Replace(parts[2]' "$1"));                // clear parameter              parameter = null;              break;          }
