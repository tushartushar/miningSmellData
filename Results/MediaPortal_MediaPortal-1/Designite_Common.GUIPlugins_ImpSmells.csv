Implementation smell,Namespace,Class,File,Method,Description
Long Method,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The method has 118 lines of code.
Long Method,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,ShowArtistInfo,The method has 141 lines of code.
Long Method,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,ShowAlbumInfo,The method has 150 lines of code.
Long Method,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,item_OnItemSelected,The method has 183 lines of code.
Long Method,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,AddItemsToCurrentPlaylist,The method has 109 lines of code.
Long Method,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnShowContextMenu,The method has 106 lines of code.
Long Method,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnVUMterTimerTickEvent,The method has 137 lines of code.
Long Method,MediaPortal.GUI.Music,MusicSort,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicSort.cs,Compare,The method has 385 lines of code.
Long Method,MediaPortal.GUI.Music,MusicViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicViewHandler.cs,Execute,The method has 352 lines of code.
Long Method,MediaPortal.GUI.Music,MusicViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicViewHandler.cs,BuildSelect,The method has 120 lines of code.
Long Method,MediaPortal.MusicImport,MusicImport,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicImport.cs,ThreadEncodeTrack,The method has 120 lines of code.
Long Method,MediaPortal.MusicImport,MusicImport,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicImport.cs,SaveTrack,The method has 129 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The method has 758 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnMessage,The method has 117 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,The method has 142 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowChapterStreamsMenu,The method has 107 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,OnAction,The method has 121 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,OnMessage,The method has 391 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,ToggleSubMenu,The method has 131 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,Handle_ControlSetting,The method has 257 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOverlay.cs,SetCurrentFile,The method has 279 lines of code.
Complex Method,Common.GUIPlugins,GUIMixerOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\GUIVolumeOverlay.cs,PostRender,Cyclomatic complexity of the method is 12
Complex Method,Common.GUIPlugins,WakeupUtils,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\WakeupUtils.cs,HandleWakeUpServer,Cyclomatic complexity of the method is 8
Complex Method,Common.GUIPlugins,WakeupUtils,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\WakeupUtils.cs,WakeupSystem,Cyclomatic complexity of the method is 8
Complex Method,Common.GUIPlugins,WindowPluginBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\WindowPluginBase.cs,GetLayoutNumber,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Music,GUICoverArtGrabberResults,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUICoverArtGrabberResults.cs,GetAlbumCovers,Cyclomatic complexity of the method is 13
Complex Method,MediaPortal.GUI.Music,GUICoverArtGrabberResults,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUICoverArtGrabberResults.cs,GetIsCompilationAlbum,Cyclomatic complexity of the method is 13
Complex Method,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,GUIMusicBaseWindow,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,GetSortMethod,Cyclomatic complexity of the method is 16
Complex Method,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnPlaybackChangedOrStopped,Cyclomatic complexity of the method is 16
Complex Method,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnAction,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,UpdateButtonStates,Cyclomatic complexity of the method is 18
Complex Method,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnSetRating,Cyclomatic complexity of the method is 10
Complex Method,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,SetView,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,LoadPlayList,Cyclomatic complexity of the method is 18
Complex Method,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,Cyclomatic complexity of the method is 27
Complex Method,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,ShowArtistInfo,Cyclomatic complexity of the method is 18
Complex Method,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,FindCoverArt,Cyclomatic complexity of the method is 12
Complex Method,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnInfo,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,ShowAlbumInfo,Cyclomatic complexity of the method is 20
Complex Method,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,DoPlayNowJumpTo,Cyclomatic complexity of the method is 15
Complex Method,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,item_OnItemSelected,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,AddItemsToCurrentPlaylist,Cyclomatic complexity of the method is 16
Complex Method,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,DoOnStarted,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnAction,Cyclomatic complexity of the method is 14
Complex Method,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnPageLoad,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnShowContextMenu,Cyclomatic complexity of the method is 20
Complex Method,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnVUMterTimerTickEvent,Cyclomatic complexity of the method is 30
Complex Method,MediaPortal.GUI.Music,GUIMusicPlayList,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlaylist.cs,OnAction,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Music,GUIMusicPlayList,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlaylist.cs,LoadFacade,Cyclomatic complexity of the method is 13
Complex Method,MediaPortal.GUI.Music,GUIMusicPlayList,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlaylist.cs,ShufflePlayList,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Music,MusicSort,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicSort.cs,Compare,Cyclomatic complexity of the method is 71
Complex Method,MediaPortal.GUI.Music,MusicViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicViewHandler.cs,Execute,Cyclomatic complexity of the method is 45
Complex Method,MediaPortal.GUI.Music,MusicViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicViewHandler.cs,BuildSelect,Cyclomatic complexity of the method is 16
Complex Method,MediaPortal.GUI.Music,MusicViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicViewHandler.cs,BuildRestriction,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Music,MusicViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicViewHandler.cs,GetTable,Cyclomatic complexity of the method is 16
Complex Method,MediaPortal.GUI.Music,MusicViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicViewHandler.cs,GetField,Cyclomatic complexity of the method is 17
Complex Method,MediaPortal.GUI.Music,MusicViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicViewHandler.cs,GetFieldValue,Cyclomatic complexity of the method is 17
Complex Method,MediaPortal.GUI.Music,MusicViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicViewHandler.cs,GetSortField,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Music,MusicViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicViewHandler.cs,GetLocalizedViewLevel,Cyclomatic complexity of the method is 11
Complex Method,MediaPortal.MusicImport,MusicImport,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicImport.cs,EncodeTrack,Cyclomatic complexity of the method is 10
Complex Method,MediaPortal.MusicImport,MusicImport,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicImport.cs,ThreadEncodeTrack,Cyclomatic complexity of the method is 17
Complex Method,MediaPortal.MusicImport,MusicImport,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicImport.cs,SaveTrack,Cyclomatic complexity of the method is 17
Complex Method,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,LoadSettings,Cyclomatic complexity of the method is 14
Complex Method,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ResetAllControls,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,Cyclomatic complexity of the method is 111
Complex Method,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnMessage,Cyclomatic complexity of the method is 11
Complex Method,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,Cyclomatic complexity of the method is 29
Complex Method,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowChapterStreamsMenu,Cyclomatic complexity of the method is 15
Complex Method,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowSubtitleStreamsMenu,Cyclomatic complexity of the method is 13
Complex Method,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowAspectRatioMenu,Cyclomatic complexity of the method is 11
Complex Method,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowBookmarksMenu,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ScreenStateChanged,Cyclomatic complexity of the method is 16
Complex Method,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,UpdateGUI,Cyclomatic complexity of the method is 15
Complex Method,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,CheckTimeOuts,Cyclomatic complexity of the method is 13
Complex Method,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,OnAction,Cyclomatic complexity of the method is 17
Complex Method,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,OnMessage,Cyclomatic complexity of the method is 48
Complex Method,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,ToggleSubMenu,Cyclomatic complexity of the method is 12
Complex Method,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,Handle_ControlSetting,Cyclomatic complexity of the method is 41
Complex Method,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,PopulateSubTitles,Cyclomatic complexity of the method is 10
Complex Method,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,ResetAllControls,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Video,GUIVideoOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOverlay.cs,DoesPostRender,Cyclomatic complexity of the method is 10
Complex Method,MediaPortal.GUI.Video,GUIVideoOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOverlay.cs,PostRender,Cyclomatic complexity of the method is 14
Complex Method,MediaPortal.GUI.Video,GUIVideoOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOverlay.cs,SetCurrentFile,Cyclomatic complexity of the method is 37
Complex Method,MediaPortal.GUI.Video,SelectBDHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\SelectBDHandler.cs,GetFolderVideoFile,Cyclomatic complexity of the method is 13
Complex Method,MediaPortal.GUI.Video,SelectBDHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\SelectBDHandler.cs,OnPlayBD,Cyclomatic complexity of the method is 11
Complex Method,MediaPortal.GUI.Video,SelectBDHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\SelectBDHandler.cs,GetDiscTitle,Cyclomatic complexity of the method is 14
Long Parameter List,MediaPortal.GUI.Music,GUICoverArtGrabberResults,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUICoverArtGrabberResults.cs,GetAlbumCovers,The method has 5 parameters. Parameters: artist' album' strPath' parentWindowID' checkForCompilationAlbum
Long Parameter List,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,LoadPlayList,The method has 5 parameters. Parameters: strPlayList' startPlayback' isAsynch' defaultLoad' replacePlaylist
Long Parameter List,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,FindCoverArt,The method has 6 parameters. Parameters: isFolder' artistName' albumName' strPath' tag' albumId
Long Identifier,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,,The length of the parameter _createMissingFolderThumbCache is 30.
Long Statement,Common.GUIPlugins,GUIMixerOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\GUIVolumeOverlay.cs,PostRender,The length of the statement  "        pos.control.SetPosition(pos.XPos + +GUIGraphicsContext.VolumeOverlayOffsetX' pos.YPos + GUIGraphicsContext.VolumeOverlayOffsetY);" is 129.
Long Statement,Common.GUIPlugins,RemovableDrivesHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\RemovableDrivesHandler.cs,ListRemovableDrives,The length of the statement  "        if ((Utils.IsUsbHdd(item.Path) || Utils.IsRemovableUsbDisk(item.Path) || Utils.IsRemovable(item.Path)) && item.Path.Length > 3) " is 127.
Long Statement,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,LoadPlayList,The length of the statement  "        if (isAsynch && defaultLoad) // we might not be in GUI yet! we have asynch and default load because we might want to use asynch loading from gui button too' later! " is 163.
Long Statement,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,LoadPlayList,The length of the statement  "          throw new Exception(string.Format("Unable to load Playlist file: {0}"' strPlayList)); // exception is handled in backgroundworker " is 129.
Long Statement,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,GetTrackTags,The length of the statement  "      bool isInternetStream = Util.Utils.IsAVStream(CurrentTrackFileName) && !Util.Utils.IsLastFMStream(CurrentTrackFileName); " is 120.
Long Statement,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnThreadMessage,The length of the statement  "          if (_lookupSimilarTracks && (PlaylistPlayer.CurrentPlaylistType == PlayListType.PLAYLIST_MUSIC || PlaylistPlayer.CurrentPlaylistType == PlayListType.PLAYLIST_MUSIC_TEMP)) " is 170.
Long Statement,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,UpdateSimilarTrackWorker,The length of the statement  "      Log.Debug("GUIMusicPlayingNow: Tracks returned after matching Last.FM results with database tracks: {0}"' lstSimilarTracks.Count); " is 130.
Long Statement,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,GetSimilarTracksInDatabase,The length of the statement  "      //TODO: this code now exists in both last.fm scrobbler and here.   Need to combine the code (without creating a circular  " is 120.
Long Statement,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,GetSimilarTracksInDatabase,The length of the statement  "      foreach (var strSql in tracks.Select(track => String.Format("select * from tracks where strartist like '%| {0} |%' and strTitle like '{1}'"' " is 140.
Long Statement,MediaPortal.GUI.Music,GUIMusicPlayList,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlaylist.cs,LoadSettings,The length of the statement  "        currentSortMethod = (MusicSort.SortMethod)xmlreader.GetValueAsInt(SerializeName' "sortmethod"' (int)MusicSort.SortMethod.Name);" is 127.
Long Statement,MediaPortal.GUI.Music,MusicViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicViewHandler.cs,Execute,The length of the statement  "              defRoot.Where == "timesplayed" || defRoot.Where == "favourites" || defRoot.Where == "date" || defRoot.Where == "filetype")" is 122.
Long Statement,MediaPortal.GUI.Music,MusicViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicViewHandler.cs,Execute,The length of the statement  "          // When searching for an album' we need to retrieve the AlbumArtist as well' because we could have same album names for different artists" is 137.
Long Statement,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,LoadSettings,The length of the statement  "        //Log.Debug("isTV: {0}' isTimeShifting:{1}' isTVRecording:{2}' CurrentFile:<{3}>"' g_Player.IsTV' g_Player.IsTimeShifting' g_Player.IsTVRecording' g_Player.CurrentFile);" is 169.
Long Statement,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The length of the statement  "      if (action.wID == Action.ActionType.ACTION_SHOW_VOLUME && !File.Exists(GUIGraphicsContext.Skin + @"\VolumeOverlay.xml"))" is 120.
Long Statement,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,The length of the statement  "      if ((g_Player.ShowMenuItems & MenuItems.Subtitle) == MenuItems.Subtitle && g_Player.SubtitleStreams > 0 || g_Player.SupportsCC)" is 127.
Long Statement,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,The length of the statement  "      if (g_Player.HasChapters && (g_Player.ShowMenuItems & MenuItems.Chapter) == MenuItems.Chapter) // For video files with chapters" is 127.
Long Statement,MediaPortal.GUI.Video,GUIVideoOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOverlay.cs,PostRender,The length of the statement  "              // madVR force change of overlay to be able to hide or display video if skin tell us to display an overlay but no video should be displayed" is 139.
Long Statement,MediaPortal.GUI.Video,GUIVideoOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOverlay.cs,PostRender,The length of the statement  "              // madVR force change of overlay to be able to hide or display video if skin tell us to display an overlay but no video should be displayed" is 139.
Long Statement,MediaPortal.GUI.Video,GUIVideoOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOverlay.cs,PostRender,The length of the statement  "          // madVR force change of overlay to be able to hide or display video if skin tell us to display an overlay but no video should be displayed" is 139.
Long Statement,MediaPortal.GUI.Video,GUIVideoOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOverlay.cs,SetCurrentFile,The length of the statement  "        GUIPropertyManager.SetProperty("#Play.Current.VideoCodec.Texture"' Util.Utils.MakeFileName(g_Player.MediaInfo.BestVideoStream?.Codec.ToCodecString() ?? string.Empty));" is 167.
Long Statement,MediaPortal.GUI.Video,GUIVideoOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOverlay.cs,SetCurrentFile,The length of the statement  "        GUIPropertyManager.SetProperty("#Play.Current.AudioCodec.Texture"' Util.Utils.MakeFileName(g_Player.MediaInfo.BestAudioStream?.Codec.ToCodecString() ?? string.Empty));" is 167.
Long Statement,MediaPortal.GUI.Video,GUIVideoOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOverlay.cs,SetCurrentFile,The length of the statement  "        string thumb = string.Format("{0}\\{1}{2}"' Thumbs.TVRecorded' Path.ChangeExtension(Util.Utils.SplitFilename(g_Player.currentFileName)' null)' Util.Utils.GetThumbExtension());" is 175.
Long Statement,MediaPortal.GUI.Video,SelectBDHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\SelectBDHandler.cs,OnPlayBD,The length of the statement  "            timeMovieStopped = VideoDatabase.GetMovieStopTimeAndResumeData(idFileImg' out resumeData' g_Player.SetResumeBDTitleState); " is 122.
Long Statement,MediaPortal.GUI.Video,SelectBDHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\SelectBDHandler.cs,GetDiscTitle,The length of the statement  "        string[] xmls = Directory.GetFiles(fileName.Replace("index.bdmv"' @"META\DL")' "bdmt*.xml"' SearchOption.TopDirectoryOnly); " is 123.
Complex Conditional,Common.GUIPlugins,GUIMixerOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\GUIVolumeOverlay.cs,DoesPostRender,The conditional expression  "VolumeHandler.Instance != null && (!VolumeHandler.Instance.IsMuted && (!GUIGraphicsContext.VolumeOverlay ||                                                                                 GUIGraphicsContext.DisableVolumeOverlay ||                                                                                 GUIWindowManager.ActiveWindow == (int)GUIWindow.Window.WINDOW_MOVIE_CALIBRATION ||                                                                                 GUIWindowManager.ActiveWindow == (int)GUIWindow.Window.WINDOW_UI_CALIBRATION))"  is complex.
Complex Conditional,Common.GUIPlugins,RemovableDrivesHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\RemovableDrivesHandler.cs,ListRemovableDrives,The conditional expression  "(Utils.IsUsbHdd(item.Path) || Utils.IsRemovableUsbDisk(item.Path) || Utils.IsRemovable(item.Path)) && item.Path.Length > 3"  is complex.
Complex Conditional,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnPlaybackChangedOrStopped,The conditional expression  "song.Id > -1 && (endTime == stoptime || stoptime < _resumeAfter && song.ResumeAt > 0)"  is complex.
Complex Conditional,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,playlistPlayer_PlaylistChanged,The conditional expression  "null != bw && nPlayList == GetPlayListType() && !ignorePlaylistChange && bw.IsBusy && !bw.CancellationPending"  is complex.
Complex Conditional,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,DoOnStarted,The conditional expression  "g_Player.IsMusic && _lookupSimilarTracks && g_Player.CurrentPosition >= 10.0 && lstSimilarTracks.Count == 0"  is complex.
Complex Conditional,MediaPortal.GUI.Music,GUIMusicPlayList,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlaylist.cs,OnAction,The conditional expression  "action.wID == Action.ActionType.ACTION_MUSIC_PLAY                || action.wID == Action.ActionType.ACTION_NEXT_ITEM                || action.wID == Action.ActionType.ACTION_PAUSE                || action.wID == Action.ActionType.ACTION_PREV_ITEM"  is complex.
Complex Conditional,MediaPortal.GUI.Music,MusicViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicViewHandler.cs,Execute,The conditional expression  "defRoot.Where == "rating" || defRoot.Where == "year" || defRoot.Where == "track" || defRoot.Where == "disc#" ||               defRoot.Where == "timesplayed" || defRoot.Where == "favourites" || defRoot.Where == "date" || defRoot.Where == "filetype""  is complex.
Complex Conditional,MediaPortal.GUI.Music,MusicViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicViewHandler.cs,GetSortField,The conditional expression  "filter.Where == "artist" || filter.Where == "albumartist" || filter.Where == "genre" ||           filter.Where == "composer""  is complex.
Complex Conditional,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnOsdAction,The conditional expression  "((action.wID == Action.ActionType.ACTION_SHOW_OSD) || (action.wID == Action.ActionType.ACTION_SHOW_GUI) ||            (action.wID == Action.ActionType.ACTION_PREVIOUS_MENU)) && !_osdWindow.SubMenuVisible"  is complex.
Complex Conditional,MediaPortal.GUI.Video,GUIVideoOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOverlay.cs,DoesPostRender,The conditional expression  "!g_Player.IsVideo && !g_Player.IsDVD && !g_Player.IsTVRecording && !g_Player.IsTV"  is complex.
Complex Conditional,MediaPortal.GUI.Video,GUIVideoOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOverlay.cs,SetCurrentFile,The conditional expression  "(g_Player.IsVideo || g_Player.IsDVD) && !g_Player.IsTV && g_Player.MediaInfo != null"  is complex.
Empty Catch Block,MediaPortal.GUI.Music,MusicViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicViewHandler.cs,MusicViewHandler,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Music,MusicViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicViewHandler.cs,Execute,The method has an empty catch block.
Empty Catch Block,MediaPortal.MusicImport,MusicImport,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicImport.cs,EncodeTrack,The method has an empty catch block.
Empty Catch Block,MediaPortal.MusicImport,MusicImport,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicImport.cs,EncodeDisc,The method has an empty catch block.
Empty Catch Block,MediaPortal.MusicImport,MusicImport,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicImport.cs,ThreadEncodeTrack,The method has an empty catch block.
Empty Catch Block,MediaPortal.MusicImport,MusicImport,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicImport.cs,SaveTrack,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,SelectBDHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\SelectBDHandler.cs,GetFolderVideoFile,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,SelectBDHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\SelectBDHandler.cs,GetFolderVideoFile,The method has an empty catch block.
Magic Number,Common.GUIPlugins,DelayedFileSystemWatcher,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\DelayedFileSystemWatcher.cs,Initialize,The following statement contains a magic number: this._events = ArrayList.Synchronized(new ArrayList(32));
Magic Number,Common.GUIPlugins,DelayedFileSystemWatcher,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\DelayedFileSystemWatcher.cs,ElapsedEventHandler,The following statement contains a magic number: eventsToBeFired = new Queue(32);
Magic Number,Common.GUIPlugins,GUIMixerOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\GUIVolumeOverlay.cs,PostRender,The following statement contains a magic number: iLayer != 3
Magic Number,Common.GUIPlugins,GUIMixerOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\GUIVolumeOverlay.cs,PostRender,The following statement contains a magic number: (ts.TotalSeconds > 5) && !_imgMute.Visible
Magic Number,Common.GUIPlugins,GUIMixerOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\GUIVolumeOverlay.cs,RenderLayer,The following statement contains a magic number: PostRender(timePassed' 3);
Magic Number,Common.GUIPlugins,RemovableDrivesHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\RemovableDrivesHandler.cs,FilterDrives,The following statement contains a magic number: item.Path.Length <= 3 && subItem.Path.StartsWith(item.Path)
Magic Number,Common.GUIPlugins,RemovableDrivesHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\RemovableDrivesHandler.cs,ListRemovableDrives,The following statement contains a magic number: (Utils.IsUsbHdd(item.Path) || Utils.IsRemovableUsbDisk(item.Path) || Utils.IsRemovable(item.Path)) && item.Path.Length > 3
Magic Number,Common.GUIPlugins,WakeupUtils,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\WakeupUtils.cs,HandleWakeUpServer,The following statement contains a magic number: wakeOnLanManager.Ping(hostName' 100)
Magic Number,Common.GUIPlugins,WakeupUtils,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\WakeupUtils.cs,HandleWakeUpServer,The following statement contains a magic number: Log.Debug("WakeUpServer: WOL - Valid auto MAC address: {0:x}:{1:x}:{2:x}:{3:x}:{4:x}:{5:x}"                           ' hwAddress[0]' hwAddress[1]' hwAddress[2]' hwAddress[3]' hwAddress[4]' hwAddress[5]);
Magic Number,Common.GUIPlugins,WakeupUtils,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\WakeupUtils.cs,HandleWakeUpServer,The following statement contains a magic number: Log.Debug("WakeUpServer: WOL - Valid auto MAC address: {0:x}:{1:x}:{2:x}:{3:x}:{4:x}:{5:x}"                           ' hwAddress[0]' hwAddress[1]' hwAddress[2]' hwAddress[3]' hwAddress[4]' hwAddress[5]);
Magic Number,Common.GUIPlugins,WakeupUtils,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\WakeupUtils.cs,HandleWakeUpServer,The following statement contains a magic number: Log.Debug("WakeUpServer: WOL - Valid auto MAC address: {0:x}:{1:x}:{2:x}:{3:x}:{4:x}:{5:x}"                           ' hwAddress[0]' hwAddress[1]' hwAddress[2]' hwAddress[3]' hwAddress[4]' hwAddress[5]);
Magic Number,Common.GUIPlugins,WakeupUtils,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\WakeupUtils.cs,HandleWakeUpServer,The following statement contains a magic number: Log.Debug("WakeUpServer: WOL - Valid auto MAC address: {0:x}:{1:x}:{2:x}:{3:x}:{4:x}:{5:x}"                           ' hwAddress[0]' hwAddress[1]' hwAddress[2]' hwAddress[3]' hwAddress[4]' hwAddress[5]);
Magic Number,Common.GUIPlugins,WakeupUtils,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\WakeupUtils.cs,WakeupSystem,The following statement contains a magic number: wakeOnLanManager.Ping(wakeupTarget' 200)
Magic Number,Common.GUIPlugins,WakeupUtils,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\WakeupUtils.cs,WakeupSystem,The following statement contains a magic number: GUIDialogProgress progressDialog =        (GUIDialogProgress)GUIWindowManager.GetWindow(101);
Magic Number,Common.GUIPlugins,WakeupUtils,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\WakeupUtils.cs,WakeupSystem,The following statement contains a magic number: progressDialog.SetHeading(GUILocalizeStrings.Get(1990));
Magic Number,Common.GUIPlugins,WakeupUtils,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\WakeupUtils.cs,WakeupSystem,The following statement contains a magic number: progressDialog.SetLine(1' GUILocalizeStrings.Get(1991));
Magic Number,Common.GUIPlugins,WakeupUtils,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\WakeupUtils.cs,WakeupSystem,The following statement contains a magic number: int percentange = (waited * 100) / timeout;
Magic Number,Common.GUIPlugins,WakeupUtils,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\WakeupUtils.cs,WakeupSystem,The following statement contains a magic number: progressDialog.SetPercentage(100);
Magic Number,Common.GUIPlugins,WakeupUtils,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\WakeupUtils.cs,WakeupSystem,The following statement contains a magic number: GUIDialogProgress progressDialog2 =              (GUIDialogProgress)GUIWindowManager.GetWindow(101);
Magic Number,Common.GUIPlugins,WakeupUtils,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\WakeupUtils.cs,WakeupSystem,The following statement contains a magic number: progressDialog2.SetLine(1' GUILocalizeStrings.Get(1994));
Magic Number,Common.GUIPlugins,WakeupUtils,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\WakeupUtils.cs,WakeupSystem,The following statement contains a magic number: percentange = (waited * 100) / waittime;
Magic Number,Common.GUIPlugins,WakeupUtils,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\WakeupUtils.cs,WakeupSystem,The following statement contains a magic number: System.Threading.Thread.Sleep(1000);
Magic Number,Common.GUIPlugins,WakeupUtils,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\WakeupUtils.cs,WakeupSystem,The following statement contains a magic number: wakeOnLanManager.Ping(wakeupTarget' 200)
Magic Number,Common.GUIPlugins,WakeupUtils,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\WakeupUtils.cs,WakeupSystem,The following statement contains a magic number: System.Threading.Thread.Sleep(1000);
Magic Number,Common.GUIPlugins,WakeupUtils,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\WakeupUtils.cs,WakeupSystem,The following statement contains a magic number: progressDialog.SetPercentage(100);
Magic Number,Common.GUIPlugins,WakeupUtils,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\WakeupUtils.cs,WakeupSystem,The following statement contains a magic number: dlgOk.SetHeading(GUILocalizeStrings.Get(1992));
Magic Number,Common.GUIPlugins,WakeupUtils,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\WakeupUtils.cs,WakeupSystem,The following statement contains a magic number: dlgOk.SetLine(1' GUILocalizeStrings.Get(1993));
Magic Number,Common.GUIPlugins,WindowPluginBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\WindowPluginBase.cs,InitViewSelections,The following statement contains a magic number: btnViews.AddItem(GUILocalizeStrings.Get(134)' index++);
Magic Number,Common.GUIPlugins,WindowPluginBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\WindowPluginBase.cs,OnResetFolderSettings,The following statement contains a magic number: dlgYesNo.SetHeading(2149);
Magic Number,Common.GUIPlugins,WindowPluginBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\WindowPluginBase.cs,OnResetFolderSettings,The following statement contains a magic number: dlgYesNo.SetLine(1' 2148);
Magic Number,MediaPortal.GUI.Music,GUICoverArtGrabberResults,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUICoverArtGrabberResults.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"'                                       String.Format("{0}/{1}"' GUILocalizeStrings.Get(100005)'                                                     GUILocalizeStrings.Get(4515)));
Magic Number,MediaPortal.GUI.Music,GUICoverArtGrabberResults,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUICoverArtGrabberResults.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"'                                       String.Format("{0}/{1}"' GUILocalizeStrings.Get(100005)'                                                     GUILocalizeStrings.Get(4515)));
Magic Number,MediaPortal.GUI.Music,GUICoverArtGrabberResults,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUICoverArtGrabberResults.cs,GetAlbumCovers,The following statement contains a magic number: string filteredAlbumFormatString = GUILocalizeStrings.Get(4518);
Magic Number,MediaPortal.GUI.Music,GUICoverArtGrabberResults,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUICoverArtGrabberResults.cs,GetAlbumCovers,The following statement contains a magic number: string filterString = string.Format("{0} = \"{1}\""' GUILocalizeStrings.Get(484)' " ");
Magic Number,MediaPortal.GUI.Music,GUICoverArtGrabberResults,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUICoverArtGrabberResults.cs,GetAlbumCovers,The following statement contains a magic number: AlbumNotFoundRetryingFiltered(amazonWS' origAlbumName' GUILocalizeStrings.Get(4506));
Magic Number,MediaPortal.GUI.Music,GUICoverArtGrabberResults,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUICoverArtGrabberResults.cs,GetAlbumCovers,The following statement contains a magic number: string filterString = string.Format("{0} = \"{1}\""' GUILocalizeStrings.Get(483)' " ");
Magic Number,MediaPortal.GUI.Music,GUICoverArtGrabberResults,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUICoverArtGrabberResults.cs,GetAlbumCovers,The following statement contains a magic number: dlgProgress.SetPercentage(100);
Magic Number,MediaPortal.GUI.Music,GUICoverArtGrabberResults,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUICoverArtGrabberResults.cs,InternalGetAlbumCovers,The following statement contains a magic number: dlgProgress.SetHeading(185);
Magic Number,MediaPortal.GUI.Music,GUICoverArtGrabberResults,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUICoverArtGrabberResults.cs,InternalGetAlbumCovers,The following statement contains a magic number: dlgProgress.SetLine(2' artist);
Magic Number,MediaPortal.GUI.Music,GUICoverArtGrabberResults,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUICoverArtGrabberResults.cs,InternalGetAlbumCovers,The following statement contains a magic number: dlgProgress.SetLine(3' filteredAlbumText);
Magic Number,MediaPortal.GUI.Music,GUICoverArtGrabberResults,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUICoverArtGrabberResults.cs,ResetData,The following statement contains a magic number: string noMatches = GUILocalizeStrings.Get(4516);
Magic Number,MediaPortal.GUI.Music,GUICoverArtGrabberResults,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUICoverArtGrabberResults.cs,ResetData,The following statement contains a magic number: string coverArtText = GUILocalizeStrings.Get(4519);
Magic Number,MediaPortal.GUI.Music,GUICoverArtGrabberResults,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUICoverArtGrabberResults.cs,ResetData,The following statement contains a magic number: lblArtistName.Label = GUILocalizeStrings.Get(340);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,LoadSettings,The following statement contains a magic number: share.FtpPort = xmlreader.GetValueAsInt("music"' sharePort' 21);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnPlaybackChangedOrStopped,The following statement contains a magic number: int endTime = song.Duration - MusicPlayer.BASS.Config.CrossFadeIntervalMs / 1000;
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,UpdateButtonStates,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"'                                         String.Format("{0}/{1}"' GUILocalizeStrings.Get(100005)'                                                       handler.LocalizedCurrentView));
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,UpdateButtonStates,The following statement contains a magic number: switch (CurrentSortMethod)        {          case MusicSort.SortMethod.Name:            strLine = GUILocalizeStrings.Get(103);            break;          case MusicSort.SortMethod.Date:            strLine = GUILocalizeStrings.Get(104);            break;          case MusicSort.SortMethod.Year:            strLine = GUILocalizeStrings.Get(366);            break;          case MusicSort.SortMethod.Size:            strLine = GUILocalizeStrings.Get(105);            break;          case MusicSort.SortMethod.Track:            strLine = GUILocalizeStrings.Get(266);            break;          case MusicSort.SortMethod.Duration:            strLine = GUILocalizeStrings.Get(267);            break;          case MusicSort.SortMethod.Title:            strLine = GUILocalizeStrings.Get(268);            break;          case MusicSort.SortMethod.Artist:            strLine = GUILocalizeStrings.Get(269);            break;          case MusicSort.SortMethod.Album:            strLine = GUILocalizeStrings.Get(270);            break;          case MusicSort.SortMethod.Filename:            strLine = GUILocalizeStrings.Get(363);            break;          case MusicSort.SortMethod.Rating:            strLine = GUILocalizeStrings.Get(367);            break;          case MusicSort.SortMethod.AlbumArtist:            strLine = GUILocalizeStrings.Get(269); // Also display Artist for AlbumArtist            break;          case MusicSort.SortMethod.DiscID:            strLine = GUILocalizeStrings.Get(1205);            break;          case MusicSort.SortMethod.Composer:            strLine = GUILocalizeStrings.Get(1208);            break;          case MusicSort.SortMethod.TimesPlayed:            strLine = GUILocalizeStrings.Get(1209);            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,UpdateButtonStates,The following statement contains a magic number: switch (CurrentSortMethod)        {          case MusicSort.SortMethod.Name:            strLine = GUILocalizeStrings.Get(103);            break;          case MusicSort.SortMethod.Date:            strLine = GUILocalizeStrings.Get(104);            break;          case MusicSort.SortMethod.Year:            strLine = GUILocalizeStrings.Get(366);            break;          case MusicSort.SortMethod.Size:            strLine = GUILocalizeStrings.Get(105);            break;          case MusicSort.SortMethod.Track:            strLine = GUILocalizeStrings.Get(266);            break;          case MusicSort.SortMethod.Duration:            strLine = GUILocalizeStrings.Get(267);            break;          case MusicSort.SortMethod.Title:            strLine = GUILocalizeStrings.Get(268);            break;          case MusicSort.SortMethod.Artist:            strLine = GUILocalizeStrings.Get(269);            break;          case MusicSort.SortMethod.Album:            strLine = GUILocalizeStrings.Get(270);            break;          case MusicSort.SortMethod.Filename:            strLine = GUILocalizeStrings.Get(363);            break;          case MusicSort.SortMethod.Rating:            strLine = GUILocalizeStrings.Get(367);            break;          case MusicSort.SortMethod.AlbumArtist:            strLine = GUILocalizeStrings.Get(269); // Also display Artist for AlbumArtist            break;          case MusicSort.SortMethod.DiscID:            strLine = GUILocalizeStrings.Get(1205);            break;          case MusicSort.SortMethod.Composer:            strLine = GUILocalizeStrings.Get(1208);            break;          case MusicSort.SortMethod.TimesPlayed:            strLine = GUILocalizeStrings.Get(1209);            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,UpdateButtonStates,The following statement contains a magic number: switch (CurrentSortMethod)        {          case MusicSort.SortMethod.Name:            strLine = GUILocalizeStrings.Get(103);            break;          case MusicSort.SortMethod.Date:            strLine = GUILocalizeStrings.Get(104);            break;          case MusicSort.SortMethod.Year:            strLine = GUILocalizeStrings.Get(366);            break;          case MusicSort.SortMethod.Size:            strLine = GUILocalizeStrings.Get(105);            break;          case MusicSort.SortMethod.Track:            strLine = GUILocalizeStrings.Get(266);            break;          case MusicSort.SortMethod.Duration:            strLine = GUILocalizeStrings.Get(267);            break;          case MusicSort.SortMethod.Title:            strLine = GUILocalizeStrings.Get(268);            break;          case MusicSort.SortMethod.Artist:            strLine = GUILocalizeStrings.Get(269);            break;          case MusicSort.SortMethod.Album:            strLine = GUILocalizeStrings.Get(270);            break;          case MusicSort.SortMethod.Filename:            strLine = GUILocalizeStrings.Get(363);            break;          case MusicSort.SortMethod.Rating:            strLine = GUILocalizeStrings.Get(367);            break;          case MusicSort.SortMethod.AlbumArtist:            strLine = GUILocalizeStrings.Get(269); // Also display Artist for AlbumArtist            break;          case MusicSort.SortMethod.DiscID:            strLine = GUILocalizeStrings.Get(1205);            break;          case MusicSort.SortMethod.Composer:            strLine = GUILocalizeStrings.Get(1208);            break;          case MusicSort.SortMethod.TimesPlayed:            strLine = GUILocalizeStrings.Get(1209);            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,UpdateButtonStates,The following statement contains a magic number: switch (CurrentSortMethod)        {          case MusicSort.SortMethod.Name:            strLine = GUILocalizeStrings.Get(103);            break;          case MusicSort.SortMethod.Date:            strLine = GUILocalizeStrings.Get(104);            break;          case MusicSort.SortMethod.Year:            strLine = GUILocalizeStrings.Get(366);            break;          case MusicSort.SortMethod.Size:            strLine = GUILocalizeStrings.Get(105);            break;          case MusicSort.SortMethod.Track:            strLine = GUILocalizeStrings.Get(266);            break;          case MusicSort.SortMethod.Duration:            strLine = GUILocalizeStrings.Get(267);            break;          case MusicSort.SortMethod.Title:            strLine = GUILocalizeStrings.Get(268);            break;          case MusicSort.SortMethod.Artist:            strLine = GUILocalizeStrings.Get(269);            break;          case MusicSort.SortMethod.Album:            strLine = GUILocalizeStrings.Get(270);            break;          case MusicSort.SortMethod.Filename:            strLine = GUILocalizeStrings.Get(363);            break;          case MusicSort.SortMethod.Rating:            strLine = GUILocalizeStrings.Get(367);            break;          case MusicSort.SortMethod.AlbumArtist:            strLine = GUILocalizeStrings.Get(269); // Also display Artist for AlbumArtist            break;          case MusicSort.SortMethod.DiscID:            strLine = GUILocalizeStrings.Get(1205);            break;          case MusicSort.SortMethod.Composer:            strLine = GUILocalizeStrings.Get(1208);            break;          case MusicSort.SortMethod.TimesPlayed:            strLine = GUILocalizeStrings.Get(1209);            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,UpdateButtonStates,The following statement contains a magic number: switch (CurrentSortMethod)        {          case MusicSort.SortMethod.Name:            strLine = GUILocalizeStrings.Get(103);            break;          case MusicSort.SortMethod.Date:            strLine = GUILocalizeStrings.Get(104);            break;          case MusicSort.SortMethod.Year:            strLine = GUILocalizeStrings.Get(366);            break;          case MusicSort.SortMethod.Size:            strLine = GUILocalizeStrings.Get(105);            break;          case MusicSort.SortMethod.Track:            strLine = GUILocalizeStrings.Get(266);            break;          case MusicSort.SortMethod.Duration:            strLine = GUILocalizeStrings.Get(267);            break;          case MusicSort.SortMethod.Title:            strLine = GUILocalizeStrings.Get(268);            break;          case MusicSort.SortMethod.Artist:            strLine = GUILocalizeStrings.Get(269);            break;          case MusicSort.SortMethod.Album:            strLine = GUILocalizeStrings.Get(270);            break;          case MusicSort.SortMethod.Filename:            strLine = GUILocalizeStrings.Get(363);            break;          case MusicSort.SortMethod.Rating:            strLine = GUILocalizeStrings.Get(367);            break;          case MusicSort.SortMethod.AlbumArtist:            strLine = GUILocalizeStrings.Get(269); // Also display Artist for AlbumArtist            break;          case MusicSort.SortMethod.DiscID:            strLine = GUILocalizeStrings.Get(1205);            break;          case MusicSort.SortMethod.Composer:            strLine = GUILocalizeStrings.Get(1208);            break;          case MusicSort.SortMethod.TimesPlayed:            strLine = GUILocalizeStrings.Get(1209);            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,UpdateButtonStates,The following statement contains a magic number: switch (CurrentSortMethod)        {          case MusicSort.SortMethod.Name:            strLine = GUILocalizeStrings.Get(103);            break;          case MusicSort.SortMethod.Date:            strLine = GUILocalizeStrings.Get(104);            break;          case MusicSort.SortMethod.Year:            strLine = GUILocalizeStrings.Get(366);            break;          case MusicSort.SortMethod.Size:            strLine = GUILocalizeStrings.Get(105);            break;          case MusicSort.SortMethod.Track:            strLine = GUILocalizeStrings.Get(266);            break;          case MusicSort.SortMethod.Duration:            strLine = GUILocalizeStrings.Get(267);            break;          case MusicSort.SortMethod.Title:            strLine = GUILocalizeStrings.Get(268);            break;          case MusicSort.SortMethod.Artist:            strLine = GUILocalizeStrings.Get(269);            break;          case MusicSort.SortMethod.Album:            strLine = GUILocalizeStrings.Get(270);            break;          case MusicSort.SortMethod.Filename:            strLine = GUILocalizeStrings.Get(363);            break;          case MusicSort.SortMethod.Rating:            strLine = GUILocalizeStrings.Get(367);            break;          case MusicSort.SortMethod.AlbumArtist:            strLine = GUILocalizeStrings.Get(269); // Also display Artist for AlbumArtist            break;          case MusicSort.SortMethod.DiscID:            strLine = GUILocalizeStrings.Get(1205);            break;          case MusicSort.SortMethod.Composer:            strLine = GUILocalizeStrings.Get(1208);            break;          case MusicSort.SortMethod.TimesPlayed:            strLine = GUILocalizeStrings.Get(1209);            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,UpdateButtonStates,The following statement contains a magic number: switch (CurrentSortMethod)        {          case MusicSort.SortMethod.Name:            strLine = GUILocalizeStrings.Get(103);            break;          case MusicSort.SortMethod.Date:            strLine = GUILocalizeStrings.Get(104);            break;          case MusicSort.SortMethod.Year:            strLine = GUILocalizeStrings.Get(366);            break;          case MusicSort.SortMethod.Size:            strLine = GUILocalizeStrings.Get(105);            break;          case MusicSort.SortMethod.Track:            strLine = GUILocalizeStrings.Get(266);            break;          case MusicSort.SortMethod.Duration:            strLine = GUILocalizeStrings.Get(267);            break;          case MusicSort.SortMethod.Title:            strLine = GUILocalizeStrings.Get(268);            break;          case MusicSort.SortMethod.Artist:            strLine = GUILocalizeStrings.Get(269);            break;          case MusicSort.SortMethod.Album:            strLine = GUILocalizeStrings.Get(270);            break;          case MusicSort.SortMethod.Filename:            strLine = GUILocalizeStrings.Get(363);            break;          case MusicSort.SortMethod.Rating:            strLine = GUILocalizeStrings.Get(367);            break;          case MusicSort.SortMethod.AlbumArtist:            strLine = GUILocalizeStrings.Get(269); // Also display Artist for AlbumArtist            break;          case MusicSort.SortMethod.DiscID:            strLine = GUILocalizeStrings.Get(1205);            break;          case MusicSort.SortMethod.Composer:            strLine = GUILocalizeStrings.Get(1208);            break;          case MusicSort.SortMethod.TimesPlayed:            strLine = GUILocalizeStrings.Get(1209);            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,UpdateButtonStates,The following statement contains a magic number: switch (CurrentSortMethod)        {          case MusicSort.SortMethod.Name:            strLine = GUILocalizeStrings.Get(103);            break;          case MusicSort.SortMethod.Date:            strLine = GUILocalizeStrings.Get(104);            break;          case MusicSort.SortMethod.Year:            strLine = GUILocalizeStrings.Get(366);            break;          case MusicSort.SortMethod.Size:            strLine = GUILocalizeStrings.Get(105);            break;          case MusicSort.SortMethod.Track:            strLine = GUILocalizeStrings.Get(266);            break;          case MusicSort.SortMethod.Duration:            strLine = GUILocalizeStrings.Get(267);            break;          case MusicSort.SortMethod.Title:            strLine = GUILocalizeStrings.Get(268);            break;          case MusicSort.SortMethod.Artist:            strLine = GUILocalizeStrings.Get(269);            break;          case MusicSort.SortMethod.Album:            strLine = GUILocalizeStrings.Get(270);            break;          case MusicSort.SortMethod.Filename:            strLine = GUILocalizeStrings.Get(363);            break;          case MusicSort.SortMethod.Rating:            strLine = GUILocalizeStrings.Get(367);            break;          case MusicSort.SortMethod.AlbumArtist:            strLine = GUILocalizeStrings.Get(269); // Also display Artist for AlbumArtist            break;          case MusicSort.SortMethod.DiscID:            strLine = GUILocalizeStrings.Get(1205);            break;          case MusicSort.SortMethod.Composer:            strLine = GUILocalizeStrings.Get(1208);            break;          case MusicSort.SortMethod.TimesPlayed:            strLine = GUILocalizeStrings.Get(1209);            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,UpdateButtonStates,The following statement contains a magic number: switch (CurrentSortMethod)        {          case MusicSort.SortMethod.Name:            strLine = GUILocalizeStrings.Get(103);            break;          case MusicSort.SortMethod.Date:            strLine = GUILocalizeStrings.Get(104);            break;          case MusicSort.SortMethod.Year:            strLine = GUILocalizeStrings.Get(366);            break;          case MusicSort.SortMethod.Size:            strLine = GUILocalizeStrings.Get(105);            break;          case MusicSort.SortMethod.Track:            strLine = GUILocalizeStrings.Get(266);            break;          case MusicSort.SortMethod.Duration:            strLine = GUILocalizeStrings.Get(267);            break;          case MusicSort.SortMethod.Title:            strLine = GUILocalizeStrings.Get(268);            break;          case MusicSort.SortMethod.Artist:            strLine = GUILocalizeStrings.Get(269);            break;          case MusicSort.SortMethod.Album:            strLine = GUILocalizeStrings.Get(270);            break;          case MusicSort.SortMethod.Filename:            strLine = GUILocalizeStrings.Get(363);            break;          case MusicSort.SortMethod.Rating:            strLine = GUILocalizeStrings.Get(367);            break;          case MusicSort.SortMethod.AlbumArtist:            strLine = GUILocalizeStrings.Get(269); // Also display Artist for AlbumArtist            break;          case MusicSort.SortMethod.DiscID:            strLine = GUILocalizeStrings.Get(1205);            break;          case MusicSort.SortMethod.Composer:            strLine = GUILocalizeStrings.Get(1208);            break;          case MusicSort.SortMethod.TimesPlayed:            strLine = GUILocalizeStrings.Get(1209);            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,UpdateButtonStates,The following statement contains a magic number: switch (CurrentSortMethod)        {          case MusicSort.SortMethod.Name:            strLine = GUILocalizeStrings.Get(103);            break;          case MusicSort.SortMethod.Date:            strLine = GUILocalizeStrings.Get(104);            break;          case MusicSort.SortMethod.Year:            strLine = GUILocalizeStrings.Get(366);            break;          case MusicSort.SortMethod.Size:            strLine = GUILocalizeStrings.Get(105);            break;          case MusicSort.SortMethod.Track:            strLine = GUILocalizeStrings.Get(266);            break;          case MusicSort.SortMethod.Duration:            strLine = GUILocalizeStrings.Get(267);            break;          case MusicSort.SortMethod.Title:            strLine = GUILocalizeStrings.Get(268);            break;          case MusicSort.SortMethod.Artist:            strLine = GUILocalizeStrings.Get(269);            break;          case MusicSort.SortMethod.Album:            strLine = GUILocalizeStrings.Get(270);            break;          case MusicSort.SortMethod.Filename:            strLine = GUILocalizeStrings.Get(363);            break;          case MusicSort.SortMethod.Rating:            strLine = GUILocalizeStrings.Get(367);            break;          case MusicSort.SortMethod.AlbumArtist:            strLine = GUILocalizeStrings.Get(269); // Also display Artist for AlbumArtist            break;          case MusicSort.SortMethod.DiscID:            strLine = GUILocalizeStrings.Get(1205);            break;          case MusicSort.SortMethod.Composer:            strLine = GUILocalizeStrings.Get(1208);            break;          case MusicSort.SortMethod.TimesPlayed:            strLine = GUILocalizeStrings.Get(1209);            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,UpdateButtonStates,The following statement contains a magic number: switch (CurrentSortMethod)        {          case MusicSort.SortMethod.Name:            strLine = GUILocalizeStrings.Get(103);            break;          case MusicSort.SortMethod.Date:            strLine = GUILocalizeStrings.Get(104);            break;          case MusicSort.SortMethod.Year:            strLine = GUILocalizeStrings.Get(366);            break;          case MusicSort.SortMethod.Size:            strLine = GUILocalizeStrings.Get(105);            break;          case MusicSort.SortMethod.Track:            strLine = GUILocalizeStrings.Get(266);            break;          case MusicSort.SortMethod.Duration:            strLine = GUILocalizeStrings.Get(267);            break;          case MusicSort.SortMethod.Title:            strLine = GUILocalizeStrings.Get(268);            break;          case MusicSort.SortMethod.Artist:            strLine = GUILocalizeStrings.Get(269);            break;          case MusicSort.SortMethod.Album:            strLine = GUILocalizeStrings.Get(270);            break;          case MusicSort.SortMethod.Filename:            strLine = GUILocalizeStrings.Get(363);            break;          case MusicSort.SortMethod.Rating:            strLine = GUILocalizeStrings.Get(367);            break;          case MusicSort.SortMethod.AlbumArtist:            strLine = GUILocalizeStrings.Get(269); // Also display Artist for AlbumArtist            break;          case MusicSort.SortMethod.DiscID:            strLine = GUILocalizeStrings.Get(1205);            break;          case MusicSort.SortMethod.Composer:            strLine = GUILocalizeStrings.Get(1208);            break;          case MusicSort.SortMethod.TimesPlayed:            strLine = GUILocalizeStrings.Get(1209);            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,UpdateButtonStates,The following statement contains a magic number: switch (CurrentSortMethod)        {          case MusicSort.SortMethod.Name:            strLine = GUILocalizeStrings.Get(103);            break;          case MusicSort.SortMethod.Date:            strLine = GUILocalizeStrings.Get(104);            break;          case MusicSort.SortMethod.Year:            strLine = GUILocalizeStrings.Get(366);            break;          case MusicSort.SortMethod.Size:            strLine = GUILocalizeStrings.Get(105);            break;          case MusicSort.SortMethod.Track:            strLine = GUILocalizeStrings.Get(266);            break;          case MusicSort.SortMethod.Duration:            strLine = GUILocalizeStrings.Get(267);            break;          case MusicSort.SortMethod.Title:            strLine = GUILocalizeStrings.Get(268);            break;          case MusicSort.SortMethod.Artist:            strLine = GUILocalizeStrings.Get(269);            break;          case MusicSort.SortMethod.Album:            strLine = GUILocalizeStrings.Get(270);            break;          case MusicSort.SortMethod.Filename:            strLine = GUILocalizeStrings.Get(363);            break;          case MusicSort.SortMethod.Rating:            strLine = GUILocalizeStrings.Get(367);            break;          case MusicSort.SortMethod.AlbumArtist:            strLine = GUILocalizeStrings.Get(269); // Also display Artist for AlbumArtist            break;          case MusicSort.SortMethod.DiscID:            strLine = GUILocalizeStrings.Get(1205);            break;          case MusicSort.SortMethod.Composer:            strLine = GUILocalizeStrings.Get(1208);            break;          case MusicSort.SortMethod.TimesPlayed:            strLine = GUILocalizeStrings.Get(1209);            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,UpdateButtonStates,The following statement contains a magic number: switch (CurrentSortMethod)        {          case MusicSort.SortMethod.Name:            strLine = GUILocalizeStrings.Get(103);            break;          case MusicSort.SortMethod.Date:            strLine = GUILocalizeStrings.Get(104);            break;          case MusicSort.SortMethod.Year:            strLine = GUILocalizeStrings.Get(366);            break;          case MusicSort.SortMethod.Size:            strLine = GUILocalizeStrings.Get(105);            break;          case MusicSort.SortMethod.Track:            strLine = GUILocalizeStrings.Get(266);            break;          case MusicSort.SortMethod.Duration:            strLine = GUILocalizeStrings.Get(267);            break;          case MusicSort.SortMethod.Title:            strLine = GUILocalizeStrings.Get(268);            break;          case MusicSort.SortMethod.Artist:            strLine = GUILocalizeStrings.Get(269);            break;          case MusicSort.SortMethod.Album:            strLine = GUILocalizeStrings.Get(270);            break;          case MusicSort.SortMethod.Filename:            strLine = GUILocalizeStrings.Get(363);            break;          case MusicSort.SortMethod.Rating:            strLine = GUILocalizeStrings.Get(367);            break;          case MusicSort.SortMethod.AlbumArtist:            strLine = GUILocalizeStrings.Get(269); // Also display Artist for AlbumArtist            break;          case MusicSort.SortMethod.DiscID:            strLine = GUILocalizeStrings.Get(1205);            break;          case MusicSort.SortMethod.Composer:            strLine = GUILocalizeStrings.Get(1208);            break;          case MusicSort.SortMethod.TimesPlayed:            strLine = GUILocalizeStrings.Get(1209);            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,UpdateButtonStates,The following statement contains a magic number: switch (CurrentSortMethod)        {          case MusicSort.SortMethod.Name:            strLine = GUILocalizeStrings.Get(103);            break;          case MusicSort.SortMethod.Date:            strLine = GUILocalizeStrings.Get(104);            break;          case MusicSort.SortMethod.Year:            strLine = GUILocalizeStrings.Get(366);            break;          case MusicSort.SortMethod.Size:            strLine = GUILocalizeStrings.Get(105);            break;          case MusicSort.SortMethod.Track:            strLine = GUILocalizeStrings.Get(266);            break;          case MusicSort.SortMethod.Duration:            strLine = GUILocalizeStrings.Get(267);            break;          case MusicSort.SortMethod.Title:            strLine = GUILocalizeStrings.Get(268);            break;          case MusicSort.SortMethod.Artist:            strLine = GUILocalizeStrings.Get(269);            break;          case MusicSort.SortMethod.Album:            strLine = GUILocalizeStrings.Get(270);            break;          case MusicSort.SortMethod.Filename:            strLine = GUILocalizeStrings.Get(363);            break;          case MusicSort.SortMethod.Rating:            strLine = GUILocalizeStrings.Get(367);            break;          case MusicSort.SortMethod.AlbumArtist:            strLine = GUILocalizeStrings.Get(269); // Also display Artist for AlbumArtist            break;          case MusicSort.SortMethod.DiscID:            strLine = GUILocalizeStrings.Get(1205);            break;          case MusicSort.SortMethod.Composer:            strLine = GUILocalizeStrings.Get(1208);            break;          case MusicSort.SortMethod.TimesPlayed:            strLine = GUILocalizeStrings.Get(1209);            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,UpdateButtonStates,The following statement contains a magic number: switch (CurrentSortMethod)        {          case MusicSort.SortMethod.Name:            strLine = GUILocalizeStrings.Get(103);            break;          case MusicSort.SortMethod.Date:            strLine = GUILocalizeStrings.Get(104);            break;          case MusicSort.SortMethod.Year:            strLine = GUILocalizeStrings.Get(366);            break;          case MusicSort.SortMethod.Size:            strLine = GUILocalizeStrings.Get(105);            break;          case MusicSort.SortMethod.Track:            strLine = GUILocalizeStrings.Get(266);            break;          case MusicSort.SortMethod.Duration:            strLine = GUILocalizeStrings.Get(267);            break;          case MusicSort.SortMethod.Title:            strLine = GUILocalizeStrings.Get(268);            break;          case MusicSort.SortMethod.Artist:            strLine = GUILocalizeStrings.Get(269);            break;          case MusicSort.SortMethod.Album:            strLine = GUILocalizeStrings.Get(270);            break;          case MusicSort.SortMethod.Filename:            strLine = GUILocalizeStrings.Get(363);            break;          case MusicSort.SortMethod.Rating:            strLine = GUILocalizeStrings.Get(367);            break;          case MusicSort.SortMethod.AlbumArtist:            strLine = GUILocalizeStrings.Get(269); // Also display Artist for AlbumArtist            break;          case MusicSort.SortMethod.DiscID:            strLine = GUILocalizeStrings.Get(1205);            break;          case MusicSort.SortMethod.Composer:            strLine = GUILocalizeStrings.Get(1208);            break;          case MusicSort.SortMethod.TimesPlayed:            strLine = GUILocalizeStrings.Get(1209);            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,UpdateButtonStates,The following statement contains a magic number: btnSortBy.Label = GUILocalizeStrings.Get(96) + strLine;
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,SetView,The following statement contains a magic number: switch (selectedViewId)        {          case 0: // Shares            {              int nNewWindow = (int)Window.WINDOW_MUSIC_FILES;              MusicState.StartWindow = nNewWindow;              if (nNewWindow != GetID)              {                GUIWindowManager.ReplaceWindow(nNewWindow);              }            }            break;            case 4540: // Now playing            {              int nPlayingNowWindow = (int)Window.WINDOW_MUSIC_PLAYING_NOW;                GUIMusicPlayingNow guiPlayingNow =                (GUIMusicPlayingNow)GUIWindowManager.GetWindow(nPlayingNowWindow);                if (guiPlayingNow != null)              {                guiPlayingNow.MusicWindow = this;                GUIWindowManager.ActivateWindow(nPlayingNowWindow);              }            }            break;            default: // a db view            {              ViewDefinition selectedView = (ViewDefinition)handler.Views[selectedViewId - 1];              handler.CurrentView = selectedView.Name;              MusicState.View = selectedView.Name;              int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;              if (GetID != nNewWindow)              {                MusicState.StartWindow = nNewWindow;                if (nNewWindow != GetID)                {                  GUIWindowManager.ReplaceWindow(nNewWindow);                }              }              else              {                LoadDirectory(string.Empty);                if (facadeLayout.Count <= 0)                {                  GUIControl.FocusControl(GetID' btnLayouts.GetID);                }              }            }            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,TellUserSomethingWentWrong,The following statement contains a magic number: dlgOK.SetHeading(6);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,TellUserSomethingWentWrong,The following statement contains a magic number: dlgOK.SetLine(1' 477);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,TellUserSomethingWentWrong,The following statement contains a magic number: dlgOK.SetLine(2' string.Empty);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,SetTrackLabels,The following statement contains a magic number: string year = tag.Year >= 1900 ? tag.Year.ToString() : string.Empty;
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: dlg.SetHeading(495);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(103);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(269);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(270);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(266);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(268);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(363);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(366);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(367);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(267);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(105);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(104);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(1205);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(1208);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(1209);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: switch (CurrentSortMethod)        {          case MusicSort.SortMethod.Name:            dlg.SelectedLabel = 0;  // Value is the order in which the option was added to the menu above.            break;          case MusicSort.SortMethod.Artist:          case MusicSort.SortMethod.AlbumArtist:            dlg.SelectedLabel = 1;            break;          case MusicSort.SortMethod.Album:            dlg.SelectedLabel = 2;            break;          case MusicSort.SortMethod.Track:            dlg.SelectedLabel = 3;            break;          case MusicSort.SortMethod.Title:            dlg.SelectedLabel = 4;            break;          case MusicSort.SortMethod.Filename:            dlg.SelectedLabel = 5;            break;          case MusicSort.SortMethod.Rating:            dlg.SelectedLabel = 6;            break;          case MusicSort.SortMethod.Duration:            dlg.SelectedLabel = 7;            break;          case MusicSort.SortMethod.Size:            dlg.SelectedLabel = 8;            break;          case MusicSort.SortMethod.Date:            dlg.SelectedLabel = 9;            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: switch (CurrentSortMethod)        {          case MusicSort.SortMethod.Name:            dlg.SelectedLabel = 0;  // Value is the order in which the option was added to the menu above.            break;          case MusicSort.SortMethod.Artist:          case MusicSort.SortMethod.AlbumArtist:            dlg.SelectedLabel = 1;            break;          case MusicSort.SortMethod.Album:            dlg.SelectedLabel = 2;            break;          case MusicSort.SortMethod.Track:            dlg.SelectedLabel = 3;            break;          case MusicSort.SortMethod.Title:            dlg.SelectedLabel = 4;            break;          case MusicSort.SortMethod.Filename:            dlg.SelectedLabel = 5;            break;          case MusicSort.SortMethod.Rating:            dlg.SelectedLabel = 6;            break;          case MusicSort.SortMethod.Duration:            dlg.SelectedLabel = 7;            break;          case MusicSort.SortMethod.Size:            dlg.SelectedLabel = 8;            break;          case MusicSort.SortMethod.Date:            dlg.SelectedLabel = 9;            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: switch (CurrentSortMethod)        {          case MusicSort.SortMethod.Name:            dlg.SelectedLabel = 0;  // Value is the order in which the option was added to the menu above.            break;          case MusicSort.SortMethod.Artist:          case MusicSort.SortMethod.AlbumArtist:            dlg.SelectedLabel = 1;            break;          case MusicSort.SortMethod.Album:            dlg.SelectedLabel = 2;            break;          case MusicSort.SortMethod.Track:            dlg.SelectedLabel = 3;            break;          case MusicSort.SortMethod.Title:            dlg.SelectedLabel = 4;            break;          case MusicSort.SortMethod.Filename:            dlg.SelectedLabel = 5;            break;          case MusicSort.SortMethod.Rating:            dlg.SelectedLabel = 6;            break;          case MusicSort.SortMethod.Duration:            dlg.SelectedLabel = 7;            break;          case MusicSort.SortMethod.Size:            dlg.SelectedLabel = 8;            break;          case MusicSort.SortMethod.Date:            dlg.SelectedLabel = 9;            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: switch (CurrentSortMethod)        {          case MusicSort.SortMethod.Name:            dlg.SelectedLabel = 0;  // Value is the order in which the option was added to the menu above.            break;          case MusicSort.SortMethod.Artist:          case MusicSort.SortMethod.AlbumArtist:            dlg.SelectedLabel = 1;            break;          case MusicSort.SortMethod.Album:            dlg.SelectedLabel = 2;            break;          case MusicSort.SortMethod.Track:            dlg.SelectedLabel = 3;            break;          case MusicSort.SortMethod.Title:            dlg.SelectedLabel = 4;            break;          case MusicSort.SortMethod.Filename:            dlg.SelectedLabel = 5;            break;          case MusicSort.SortMethod.Rating:            dlg.SelectedLabel = 6;            break;          case MusicSort.SortMethod.Duration:            dlg.SelectedLabel = 7;            break;          case MusicSort.SortMethod.Size:            dlg.SelectedLabel = 8;            break;          case MusicSort.SortMethod.Date:            dlg.SelectedLabel = 9;            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: switch (CurrentSortMethod)        {          case MusicSort.SortMethod.Name:            dlg.SelectedLabel = 0;  // Value is the order in which the option was added to the menu above.            break;          case MusicSort.SortMethod.Artist:          case MusicSort.SortMethod.AlbumArtist:            dlg.SelectedLabel = 1;            break;          case MusicSort.SortMethod.Album:            dlg.SelectedLabel = 2;            break;          case MusicSort.SortMethod.Track:            dlg.SelectedLabel = 3;            break;          case MusicSort.SortMethod.Title:            dlg.SelectedLabel = 4;            break;          case MusicSort.SortMethod.Filename:            dlg.SelectedLabel = 5;            break;          case MusicSort.SortMethod.Rating:            dlg.SelectedLabel = 6;            break;          case MusicSort.SortMethod.Duration:            dlg.SelectedLabel = 7;            break;          case MusicSort.SortMethod.Size:            dlg.SelectedLabel = 8;            break;          case MusicSort.SortMethod.Date:            dlg.SelectedLabel = 9;            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: switch (CurrentSortMethod)        {          case MusicSort.SortMethod.Name:            dlg.SelectedLabel = 0;  // Value is the order in which the option was added to the menu above.            break;          case MusicSort.SortMethod.Artist:          case MusicSort.SortMethod.AlbumArtist:            dlg.SelectedLabel = 1;            break;          case MusicSort.SortMethod.Album:            dlg.SelectedLabel = 2;            break;          case MusicSort.SortMethod.Track:            dlg.SelectedLabel = 3;            break;          case MusicSort.SortMethod.Title:            dlg.SelectedLabel = 4;            break;          case MusicSort.SortMethod.Filename:            dlg.SelectedLabel = 5;            break;          case MusicSort.SortMethod.Rating:            dlg.SelectedLabel = 6;            break;          case MusicSort.SortMethod.Duration:            dlg.SelectedLabel = 7;            break;          case MusicSort.SortMethod.Size:            dlg.SelectedLabel = 8;            break;          case MusicSort.SortMethod.Date:            dlg.SelectedLabel = 9;            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: switch (CurrentSortMethod)        {          case MusicSort.SortMethod.Name:            dlg.SelectedLabel = 0;  // Value is the order in which the option was added to the menu above.            break;          case MusicSort.SortMethod.Artist:          case MusicSort.SortMethod.AlbumArtist:            dlg.SelectedLabel = 1;            break;          case MusicSort.SortMethod.Album:            dlg.SelectedLabel = 2;            break;          case MusicSort.SortMethod.Track:            dlg.SelectedLabel = 3;            break;          case MusicSort.SortMethod.Title:            dlg.SelectedLabel = 4;            break;          case MusicSort.SortMethod.Filename:            dlg.SelectedLabel = 5;            break;          case MusicSort.SortMethod.Rating:            dlg.SelectedLabel = 6;            break;          case MusicSort.SortMethod.Duration:            dlg.SelectedLabel = 7;            break;          case MusicSort.SortMethod.Size:            dlg.SelectedLabel = 8;            break;          case MusicSort.SortMethod.Date:            dlg.SelectedLabel = 9;            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: switch (CurrentSortMethod)        {          case MusicSort.SortMethod.Name:            dlg.SelectedLabel = 0;  // Value is the order in which the option was added to the menu above.            break;          case MusicSort.SortMethod.Artist:          case MusicSort.SortMethod.AlbumArtist:            dlg.SelectedLabel = 1;            break;          case MusicSort.SortMethod.Album:            dlg.SelectedLabel = 2;            break;          case MusicSort.SortMethod.Track:            dlg.SelectedLabel = 3;            break;          case MusicSort.SortMethod.Title:            dlg.SelectedLabel = 4;            break;          case MusicSort.SortMethod.Filename:            dlg.SelectedLabel = 5;            break;          case MusicSort.SortMethod.Rating:            dlg.SelectedLabel = 6;            break;          case MusicSort.SortMethod.Duration:            dlg.SelectedLabel = 7;            break;          case MusicSort.SortMethod.Size:            dlg.SelectedLabel = 8;            break;          case MusicSort.SortMethod.Date:            dlg.SelectedLabel = 9;            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 103:            CurrentSortMethod = MusicSort.SortMethod.Name;            break;          case 269:            CurrentSortMethod = MusicSort.SortMethod.Artist;            break;          case 270:            CurrentSortMethod = MusicSort.SortMethod.Album;            break;          case 266:            CurrentSortMethod = MusicSort.SortMethod.Track;            break;          case 268:            CurrentSortMethod = MusicSort.SortMethod.Title;            break;          case 363:            CurrentSortMethod = MusicSort.SortMethod.Filename;            break;          case 366:            CurrentSortMethod = MusicSort.SortMethod.Year;            break;          case 367:            CurrentSortMethod = MusicSort.SortMethod.Rating;            break;          case 267:            CurrentSortMethod = MusicSort.SortMethod.Duration;            break;          case 105:            CurrentSortMethod = MusicSort.SortMethod.Size;            break;          case 104:            CurrentSortMethod = MusicSort.SortMethod.Date;            break;          case 1205:            CurrentSortMethod = MusicSort.SortMethod.DiscID;            break;          case 1208:            CurrentSortMethod = MusicSort.SortMethod.Composer;            break;          case 1209:            CurrentSortMethod = MusicSort.SortMethod.TimesPlayed;            break;          default:            CurrentSortMethod = MusicSort.SortMethod.Name;            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 103:            CurrentSortMethod = MusicSort.SortMethod.Name;            break;          case 269:            CurrentSortMethod = MusicSort.SortMethod.Artist;            break;          case 270:            CurrentSortMethod = MusicSort.SortMethod.Album;            break;          case 266:            CurrentSortMethod = MusicSort.SortMethod.Track;            break;          case 268:            CurrentSortMethod = MusicSort.SortMethod.Title;            break;          case 363:            CurrentSortMethod = MusicSort.SortMethod.Filename;            break;          case 366:            CurrentSortMethod = MusicSort.SortMethod.Year;            break;          case 367:            CurrentSortMethod = MusicSort.SortMethod.Rating;            break;          case 267:            CurrentSortMethod = MusicSort.SortMethod.Duration;            break;          case 105:            CurrentSortMethod = MusicSort.SortMethod.Size;            break;          case 104:            CurrentSortMethod = MusicSort.SortMethod.Date;            break;          case 1205:            CurrentSortMethod = MusicSort.SortMethod.DiscID;            break;          case 1208:            CurrentSortMethod = MusicSort.SortMethod.Composer;            break;          case 1209:            CurrentSortMethod = MusicSort.SortMethod.TimesPlayed;            break;          default:            CurrentSortMethod = MusicSort.SortMethod.Name;            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 103:            CurrentSortMethod = MusicSort.SortMethod.Name;            break;          case 269:            CurrentSortMethod = MusicSort.SortMethod.Artist;            break;          case 270:            CurrentSortMethod = MusicSort.SortMethod.Album;            break;          case 266:            CurrentSortMethod = MusicSort.SortMethod.Track;            break;          case 268:            CurrentSortMethod = MusicSort.SortMethod.Title;            break;          case 363:            CurrentSortMethod = MusicSort.SortMethod.Filename;            break;          case 366:            CurrentSortMethod = MusicSort.SortMethod.Year;            break;          case 367:            CurrentSortMethod = MusicSort.SortMethod.Rating;            break;          case 267:            CurrentSortMethod = MusicSort.SortMethod.Duration;            break;          case 105:            CurrentSortMethod = MusicSort.SortMethod.Size;            break;          case 104:            CurrentSortMethod = MusicSort.SortMethod.Date;            break;          case 1205:            CurrentSortMethod = MusicSort.SortMethod.DiscID;            break;          case 1208:            CurrentSortMethod = MusicSort.SortMethod.Composer;            break;          case 1209:            CurrentSortMethod = MusicSort.SortMethod.TimesPlayed;            break;          default:            CurrentSortMethod = MusicSort.SortMethod.Name;            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 103:            CurrentSortMethod = MusicSort.SortMethod.Name;            break;          case 269:            CurrentSortMethod = MusicSort.SortMethod.Artist;            break;          case 270:            CurrentSortMethod = MusicSort.SortMethod.Album;            break;          case 266:            CurrentSortMethod = MusicSort.SortMethod.Track;            break;          case 268:            CurrentSortMethod = MusicSort.SortMethod.Title;            break;          case 363:            CurrentSortMethod = MusicSort.SortMethod.Filename;            break;          case 366:            CurrentSortMethod = MusicSort.SortMethod.Year;            break;          case 367:            CurrentSortMethod = MusicSort.SortMethod.Rating;            break;          case 267:            CurrentSortMethod = MusicSort.SortMethod.Duration;            break;          case 105:            CurrentSortMethod = MusicSort.SortMethod.Size;            break;          case 104:            CurrentSortMethod = MusicSort.SortMethod.Date;            break;          case 1205:            CurrentSortMethod = MusicSort.SortMethod.DiscID;            break;          case 1208:            CurrentSortMethod = MusicSort.SortMethod.Composer;            break;          case 1209:            CurrentSortMethod = MusicSort.SortMethod.TimesPlayed;            break;          default:            CurrentSortMethod = MusicSort.SortMethod.Name;            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 103:            CurrentSortMethod = MusicSort.SortMethod.Name;            break;          case 269:            CurrentSortMethod = MusicSort.SortMethod.Artist;            break;          case 270:            CurrentSortMethod = MusicSort.SortMethod.Album;            break;          case 266:            CurrentSortMethod = MusicSort.SortMethod.Track;            break;          case 268:            CurrentSortMethod = MusicSort.SortMethod.Title;            break;          case 363:            CurrentSortMethod = MusicSort.SortMethod.Filename;            break;          case 366:            CurrentSortMethod = MusicSort.SortMethod.Year;            break;          case 367:            CurrentSortMethod = MusicSort.SortMethod.Rating;            break;          case 267:            CurrentSortMethod = MusicSort.SortMethod.Duration;            break;          case 105:            CurrentSortMethod = MusicSort.SortMethod.Size;            break;          case 104:            CurrentSortMethod = MusicSort.SortMethod.Date;            break;          case 1205:            CurrentSortMethod = MusicSort.SortMethod.DiscID;            break;          case 1208:            CurrentSortMethod = MusicSort.SortMethod.Composer;            break;          case 1209:            CurrentSortMethod = MusicSort.SortMethod.TimesPlayed;            break;          default:            CurrentSortMethod = MusicSort.SortMethod.Name;            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 103:            CurrentSortMethod = MusicSort.SortMethod.Name;            break;          case 269:            CurrentSortMethod = MusicSort.SortMethod.Artist;            break;          case 270:            CurrentSortMethod = MusicSort.SortMethod.Album;            break;          case 266:            CurrentSortMethod = MusicSort.SortMethod.Track;            break;          case 268:            CurrentSortMethod = MusicSort.SortMethod.Title;            break;          case 363:            CurrentSortMethod = MusicSort.SortMethod.Filename;            break;          case 366:            CurrentSortMethod = MusicSort.SortMethod.Year;            break;          case 367:            CurrentSortMethod = MusicSort.SortMethod.Rating;            break;          case 267:            CurrentSortMethod = MusicSort.SortMethod.Duration;            break;          case 105:            CurrentSortMethod = MusicSort.SortMethod.Size;            break;          case 104:            CurrentSortMethod = MusicSort.SortMethod.Date;            break;          case 1205:            CurrentSortMethod = MusicSort.SortMethod.DiscID;            break;          case 1208:            CurrentSortMethod = MusicSort.SortMethod.Composer;            break;          case 1209:            CurrentSortMethod = MusicSort.SortMethod.TimesPlayed;            break;          default:            CurrentSortMethod = MusicSort.SortMethod.Name;            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 103:            CurrentSortMethod = MusicSort.SortMethod.Name;            break;          case 269:            CurrentSortMethod = MusicSort.SortMethod.Artist;            break;          case 270:            CurrentSortMethod = MusicSort.SortMethod.Album;            break;          case 266:            CurrentSortMethod = MusicSort.SortMethod.Track;            break;          case 268:            CurrentSortMethod = MusicSort.SortMethod.Title;            break;          case 363:            CurrentSortMethod = MusicSort.SortMethod.Filename;            break;          case 366:            CurrentSortMethod = MusicSort.SortMethod.Year;            break;          case 367:            CurrentSortMethod = MusicSort.SortMethod.Rating;            break;          case 267:            CurrentSortMethod = MusicSort.SortMethod.Duration;            break;          case 105:            CurrentSortMethod = MusicSort.SortMethod.Size;            break;          case 104:            CurrentSortMethod = MusicSort.SortMethod.Date;            break;          case 1205:            CurrentSortMethod = MusicSort.SortMethod.DiscID;            break;          case 1208:            CurrentSortMethod = MusicSort.SortMethod.Composer;            break;          case 1209:            CurrentSortMethod = MusicSort.SortMethod.TimesPlayed;            break;          default:            CurrentSortMethod = MusicSort.SortMethod.Name;            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 103:            CurrentSortMethod = MusicSort.SortMethod.Name;            break;          case 269:            CurrentSortMethod = MusicSort.SortMethod.Artist;            break;          case 270:            CurrentSortMethod = MusicSort.SortMethod.Album;            break;          case 266:            CurrentSortMethod = MusicSort.SortMethod.Track;            break;          case 268:            CurrentSortMethod = MusicSort.SortMethod.Title;            break;          case 363:            CurrentSortMethod = MusicSort.SortMethod.Filename;            break;          case 366:            CurrentSortMethod = MusicSort.SortMethod.Year;            break;          case 367:            CurrentSortMethod = MusicSort.SortMethod.Rating;            break;          case 267:            CurrentSortMethod = MusicSort.SortMethod.Duration;            break;          case 105:            CurrentSortMethod = MusicSort.SortMethod.Size;            break;          case 104:            CurrentSortMethod = MusicSort.SortMethod.Date;            break;          case 1205:            CurrentSortMethod = MusicSort.SortMethod.DiscID;            break;          case 1208:            CurrentSortMethod = MusicSort.SortMethod.Composer;            break;          case 1209:            CurrentSortMethod = MusicSort.SortMethod.TimesPlayed;            break;          default:            CurrentSortMethod = MusicSort.SortMethod.Name;            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 103:            CurrentSortMethod = MusicSort.SortMethod.Name;            break;          case 269:            CurrentSortMethod = MusicSort.SortMethod.Artist;            break;          case 270:            CurrentSortMethod = MusicSort.SortMethod.Album;            break;          case 266:            CurrentSortMethod = MusicSort.SortMethod.Track;            break;          case 268:            CurrentSortMethod = MusicSort.SortMethod.Title;            break;          case 363:            CurrentSortMethod = MusicSort.SortMethod.Filename;            break;          case 366:            CurrentSortMethod = MusicSort.SortMethod.Year;            break;          case 367:            CurrentSortMethod = MusicSort.SortMethod.Rating;            break;          case 267:            CurrentSortMethod = MusicSort.SortMethod.Duration;            break;          case 105:            CurrentSortMethod = MusicSort.SortMethod.Size;            break;          case 104:            CurrentSortMethod = MusicSort.SortMethod.Date;            break;          case 1205:            CurrentSortMethod = MusicSort.SortMethod.DiscID;            break;          case 1208:            CurrentSortMethod = MusicSort.SortMethod.Composer;            break;          case 1209:            CurrentSortMethod = MusicSort.SortMethod.TimesPlayed;            break;          default:            CurrentSortMethod = MusicSort.SortMethod.Name;            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 103:            CurrentSortMethod = MusicSort.SortMethod.Name;            break;          case 269:            CurrentSortMethod = MusicSort.SortMethod.Artist;            break;          case 270:            CurrentSortMethod = MusicSort.SortMethod.Album;            break;          case 266:            CurrentSortMethod = MusicSort.SortMethod.Track;            break;          case 268:            CurrentSortMethod = MusicSort.SortMethod.Title;            break;          case 363:            CurrentSortMethod = MusicSort.SortMethod.Filename;            break;          case 366:            CurrentSortMethod = MusicSort.SortMethod.Year;            break;          case 367:            CurrentSortMethod = MusicSort.SortMethod.Rating;            break;          case 267:            CurrentSortMethod = MusicSort.SortMethod.Duration;            break;          case 105:            CurrentSortMethod = MusicSort.SortMethod.Size;            break;          case 104:            CurrentSortMethod = MusicSort.SortMethod.Date;            break;          case 1205:            CurrentSortMethod = MusicSort.SortMethod.DiscID;            break;          case 1208:            CurrentSortMethod = MusicSort.SortMethod.Composer;            break;          case 1209:            CurrentSortMethod = MusicSort.SortMethod.TimesPlayed;            break;          default:            CurrentSortMethod = MusicSort.SortMethod.Name;            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 103:            CurrentSortMethod = MusicSort.SortMethod.Name;            break;          case 269:            CurrentSortMethod = MusicSort.SortMethod.Artist;            break;          case 270:            CurrentSortMethod = MusicSort.SortMethod.Album;            break;          case 266:            CurrentSortMethod = MusicSort.SortMethod.Track;            break;          case 268:            CurrentSortMethod = MusicSort.SortMethod.Title;            break;          case 363:            CurrentSortMethod = MusicSort.SortMethod.Filename;            break;          case 366:            CurrentSortMethod = MusicSort.SortMethod.Year;            break;          case 367:            CurrentSortMethod = MusicSort.SortMethod.Rating;            break;          case 267:            CurrentSortMethod = MusicSort.SortMethod.Duration;            break;          case 105:            CurrentSortMethod = MusicSort.SortMethod.Size;            break;          case 104:            CurrentSortMethod = MusicSort.SortMethod.Date;            break;          case 1205:            CurrentSortMethod = MusicSort.SortMethod.DiscID;            break;          case 1208:            CurrentSortMethod = MusicSort.SortMethod.Composer;            break;          case 1209:            CurrentSortMethod = MusicSort.SortMethod.TimesPlayed;            break;          default:            CurrentSortMethod = MusicSort.SortMethod.Name;            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 103:            CurrentSortMethod = MusicSort.SortMethod.Name;            break;          case 269:            CurrentSortMethod = MusicSort.SortMethod.Artist;            break;          case 270:            CurrentSortMethod = MusicSort.SortMethod.Album;            break;          case 266:            CurrentSortMethod = MusicSort.SortMethod.Track;            break;          case 268:            CurrentSortMethod = MusicSort.SortMethod.Title;            break;          case 363:            CurrentSortMethod = MusicSort.SortMethod.Filename;            break;          case 366:            CurrentSortMethod = MusicSort.SortMethod.Year;            break;          case 367:            CurrentSortMethod = MusicSort.SortMethod.Rating;            break;          case 267:            CurrentSortMethod = MusicSort.SortMethod.Duration;            break;          case 105:            CurrentSortMethod = MusicSort.SortMethod.Size;            break;          case 104:            CurrentSortMethod = MusicSort.SortMethod.Date;            break;          case 1205:            CurrentSortMethod = MusicSort.SortMethod.DiscID;            break;          case 1208:            CurrentSortMethod = MusicSort.SortMethod.Composer;            break;          case 1209:            CurrentSortMethod = MusicSort.SortMethod.TimesPlayed;            break;          default:            CurrentSortMethod = MusicSort.SortMethod.Name;            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 103:            CurrentSortMethod = MusicSort.SortMethod.Name;            break;          case 269:            CurrentSortMethod = MusicSort.SortMethod.Artist;            break;          case 270:            CurrentSortMethod = MusicSort.SortMethod.Album;            break;          case 266:            CurrentSortMethod = MusicSort.SortMethod.Track;            break;          case 268:            CurrentSortMethod = MusicSort.SortMethod.Title;            break;          case 363:            CurrentSortMethod = MusicSort.SortMethod.Filename;            break;          case 366:            CurrentSortMethod = MusicSort.SortMethod.Year;            break;          case 367:            CurrentSortMethod = MusicSort.SortMethod.Rating;            break;          case 267:            CurrentSortMethod = MusicSort.SortMethod.Duration;            break;          case 105:            CurrentSortMethod = MusicSort.SortMethod.Size;            break;          case 104:            CurrentSortMethod = MusicSort.SortMethod.Date;            break;          case 1205:            CurrentSortMethod = MusicSort.SortMethod.DiscID;            break;          case 1208:            CurrentSortMethod = MusicSort.SortMethod.Composer;            break;          case 1209:            CurrentSortMethod = MusicSort.SortMethod.TimesPlayed;            break;          default:            CurrentSortMethod = MusicSort.SortMethod.Name;            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 103:            CurrentSortMethod = MusicSort.SortMethod.Name;            break;          case 269:            CurrentSortMethod = MusicSort.SortMethod.Artist;            break;          case 270:            CurrentSortMethod = MusicSort.SortMethod.Album;            break;          case 266:            CurrentSortMethod = MusicSort.SortMethod.Track;            break;          case 268:            CurrentSortMethod = MusicSort.SortMethod.Title;            break;          case 363:            CurrentSortMethod = MusicSort.SortMethod.Filename;            break;          case 366:            CurrentSortMethod = MusicSort.SortMethod.Year;            break;          case 367:            CurrentSortMethod = MusicSort.SortMethod.Rating;            break;          case 267:            CurrentSortMethod = MusicSort.SortMethod.Duration;            break;          case 105:            CurrentSortMethod = MusicSort.SortMethod.Size;            break;          case 104:            CurrentSortMethod = MusicSort.SortMethod.Date;            break;          case 1205:            CurrentSortMethod = MusicSort.SortMethod.DiscID;            break;          case 1208:            CurrentSortMethod = MusicSort.SortMethod.Composer;            break;          case 1209:            CurrentSortMethod = MusicSort.SortMethod.TimesPlayed;            break;          default:            CurrentSortMethod = MusicSort.SortMethod.Name;            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSavedPlaylists,The following statement contains a magic number: dlg.SetHeading(983);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,ShowArtistInfo,The following statement contains a magic number: dlgProgress.SetPercentage(100);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,FindCoverArt,The following statement contains a magic number: pDlgOK.SetHeading(703);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,FindCoverArt,The following statement contains a magic number: pDlgOK.SetLine(1' 703);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,FindCoverArt,The following statement contains a magic number: pDlgOK.SetLine(2' string.Empty);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,FindCoverArt,The following statement contains a magic number: dlgProgress.SetHeading(185);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,FindCoverArt,The following statement contains a magic number: dlgProgress.SetLine(2' artistName);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,FindCoverArt,The following statement contains a magic number: dlgProgress.SetLine(3' string.Empty);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,FindCoverArt,The following statement contains a magic number: string line1Text = GUILocalizeStrings.Get(4507);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,FindCoverArt,The following statement contains a magic number: string caption = GUILocalizeStrings.Get(4511);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,FindCoverArt,The following statement contains a magic number: dlgOk.SetLine(2' string.Empty);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,FindCoverArt,The following statement contains a magic number: dlgOk.SetHeading(187);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,FindCoverArt,The following statement contains a magic number: dlgOk.SetLine(1' 187);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,FindCoverArt,The following statement contains a magic number: dlgOk.SetLine(2' string.Empty);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,ShowAlbumInfo,The following statement contains a magic number: dlgProgress.SetPercentage(100);
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,item_OnItemSelected,The following statement contains a magic number: string strYear = tag.Year <= 1900 ? string.Empty : tag.Year.ToString();
Magic Number,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,item_OnItemSelected,The following statement contains a magic number: string strRating = (Convert.ToDecimal(2 * tag.Rating + 1)).ToString();
Magic Number,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,DoOnStarted,The following statement contains a magic number: g_Player.IsMusic && _lookupSimilarTracks && g_Player.CurrentPosition >= 10.0 && lstSimilarTracks.Count == 0
Magic Number,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {            case Action.ActionType.ACTION_STOP:              if (GUIWindowManager.ActiveWindow == GetID && !_isStopped)            {              _isStopped = true;              Action act = new Action();              act.wID = Action.ActionType.ACTION_PREVIOUS_MENU;              GUIGraphicsContext.OnAction(act);            }            break;            // Since a ACTION_STOP action clears the player and CurrentPlaylistType type            // we need a way to restart playback after an ACTION_STOP has been received          case Action.ActionType.ACTION_MUSIC_PLAY:          case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_PAUSE:          case Action.ActionType.ACTION_PREV_ITEM:            if ((PlaylistPlayer.CurrentPlaylistType != PlayListType.PLAYLIST_MUSIC) &&                (PlaylistPlayer.CurrentPlaylistType != PlayListType.PLAYLIST_MUSIC_TEMP) &&                (PlaylistPlayer.CurrentPlaylistType != PlayListType.PLAYLIST_LAST_FM))            {              LoadAndStartPlayList();            }            break;            case Action.ActionType.ACTION_SHOW_INFO:            FlipPictures();            break;            case Action.ActionType.ACTION_KEY_PRESSED:            switch (action.m_key.KeyChar)            {              case (int)Keys.D0:                UpdateCurrentTrackRating(0);                break;              case (int)Keys.D1:                UpdateCurrentTrackRating(1);                break;              case (int)Keys.D2:                UpdateCurrentTrackRating(2);                break;              case (int)Keys.D3:                UpdateCurrentTrackRating(3);                break;              case (int)Keys.D4:                UpdateCurrentTrackRating(4);                break;              case (int)Keys.D5:                UpdateCurrentTrackRating(5);                break;                // do not act on _every_ key                //default:                //  UpdateCurrentTrackRating(-1);                //  break;            }            break;            case Action.ActionType.ACTION_NEXT_AUDIO:            {              if (g_Player.AudioStreams > 1)              {                //_showStatus = true;                //_timeStatusShowTime = (DateTime.Now.Ticks / 10000);                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                (int)ControlIDs.LABEL_ROW1' 0' 0' null);                g_Player.SwitchToNextAudio();                  String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);                String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);                if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))                {                  msg.Label = string.Format("{0} ({1}/{2})"' language'                                            g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);                }                else                {                  msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                            g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);                }                  OnMessage(msg);                Log.Info("GUIMusicPlayingNow: switched audio to {0}"' msg.Label);              }            }            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {            case Action.ActionType.ACTION_STOP:              if (GUIWindowManager.ActiveWindow == GetID && !_isStopped)            {              _isStopped = true;              Action act = new Action();              act.wID = Action.ActionType.ACTION_PREVIOUS_MENU;              GUIGraphicsContext.OnAction(act);            }            break;            // Since a ACTION_STOP action clears the player and CurrentPlaylistType type            // we need a way to restart playback after an ACTION_STOP has been received          case Action.ActionType.ACTION_MUSIC_PLAY:          case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_PAUSE:          case Action.ActionType.ACTION_PREV_ITEM:            if ((PlaylistPlayer.CurrentPlaylistType != PlayListType.PLAYLIST_MUSIC) &&                (PlaylistPlayer.CurrentPlaylistType != PlayListType.PLAYLIST_MUSIC_TEMP) &&                (PlaylistPlayer.CurrentPlaylistType != PlayListType.PLAYLIST_LAST_FM))            {              LoadAndStartPlayList();            }            break;            case Action.ActionType.ACTION_SHOW_INFO:            FlipPictures();            break;            case Action.ActionType.ACTION_KEY_PRESSED:            switch (action.m_key.KeyChar)            {              case (int)Keys.D0:                UpdateCurrentTrackRating(0);                break;              case (int)Keys.D1:                UpdateCurrentTrackRating(1);                break;              case (int)Keys.D2:                UpdateCurrentTrackRating(2);                break;              case (int)Keys.D3:                UpdateCurrentTrackRating(3);                break;              case (int)Keys.D4:                UpdateCurrentTrackRating(4);                break;              case (int)Keys.D5:                UpdateCurrentTrackRating(5);                break;                // do not act on _every_ key                //default:                //  UpdateCurrentTrackRating(-1);                //  break;            }            break;            case Action.ActionType.ACTION_NEXT_AUDIO:            {              if (g_Player.AudioStreams > 1)              {                //_showStatus = true;                //_timeStatusShowTime = (DateTime.Now.Ticks / 10000);                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                (int)ControlIDs.LABEL_ROW1' 0' 0' null);                g_Player.SwitchToNextAudio();                  String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);                String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);                if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))                {                  msg.Label = string.Format("{0} ({1}/{2})"' language'                                            g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);                }                else                {                  msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                            g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);                }                  OnMessage(msg);                Log.Info("GUIMusicPlayingNow: switched audio to {0}"' msg.Label);              }            }            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {            case Action.ActionType.ACTION_STOP:              if (GUIWindowManager.ActiveWindow == GetID && !_isStopped)            {              _isStopped = true;              Action act = new Action();              act.wID = Action.ActionType.ACTION_PREVIOUS_MENU;              GUIGraphicsContext.OnAction(act);            }            break;            // Since a ACTION_STOP action clears the player and CurrentPlaylistType type            // we need a way to restart playback after an ACTION_STOP has been received          case Action.ActionType.ACTION_MUSIC_PLAY:          case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_PAUSE:          case Action.ActionType.ACTION_PREV_ITEM:            if ((PlaylistPlayer.CurrentPlaylistType != PlayListType.PLAYLIST_MUSIC) &&                (PlaylistPlayer.CurrentPlaylistType != PlayListType.PLAYLIST_MUSIC_TEMP) &&                (PlaylistPlayer.CurrentPlaylistType != PlayListType.PLAYLIST_LAST_FM))            {              LoadAndStartPlayList();            }            break;            case Action.ActionType.ACTION_SHOW_INFO:            FlipPictures();            break;            case Action.ActionType.ACTION_KEY_PRESSED:            switch (action.m_key.KeyChar)            {              case (int)Keys.D0:                UpdateCurrentTrackRating(0);                break;              case (int)Keys.D1:                UpdateCurrentTrackRating(1);                break;              case (int)Keys.D2:                UpdateCurrentTrackRating(2);                break;              case (int)Keys.D3:                UpdateCurrentTrackRating(3);                break;              case (int)Keys.D4:                UpdateCurrentTrackRating(4);                break;              case (int)Keys.D5:                UpdateCurrentTrackRating(5);                break;                // do not act on _every_ key                //default:                //  UpdateCurrentTrackRating(-1);                //  break;            }            break;            case Action.ActionType.ACTION_NEXT_AUDIO:            {              if (g_Player.AudioStreams > 1)              {                //_showStatus = true;                //_timeStatusShowTime = (DateTime.Now.Ticks / 10000);                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                (int)ControlIDs.LABEL_ROW1' 0' 0' null);                g_Player.SwitchToNextAudio();                  String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);                String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);                if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))                {                  msg.Label = string.Format("{0} ({1}/{2})"' language'                                            g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);                }                else                {                  msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                            g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);                }                  OnMessage(msg);                Log.Info("GUIMusicPlayingNow: switched audio to {0}"' msg.Label);              }            }            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {            case Action.ActionType.ACTION_STOP:              if (GUIWindowManager.ActiveWindow == GetID && !_isStopped)            {              _isStopped = true;              Action act = new Action();              act.wID = Action.ActionType.ACTION_PREVIOUS_MENU;              GUIGraphicsContext.OnAction(act);            }            break;            // Since a ACTION_STOP action clears the player and CurrentPlaylistType type            // we need a way to restart playback after an ACTION_STOP has been received          case Action.ActionType.ACTION_MUSIC_PLAY:          case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_PAUSE:          case Action.ActionType.ACTION_PREV_ITEM:            if ((PlaylistPlayer.CurrentPlaylistType != PlayListType.PLAYLIST_MUSIC) &&                (PlaylistPlayer.CurrentPlaylistType != PlayListType.PLAYLIST_MUSIC_TEMP) &&                (PlaylistPlayer.CurrentPlaylistType != PlayListType.PLAYLIST_LAST_FM))            {              LoadAndStartPlayList();            }            break;            case Action.ActionType.ACTION_SHOW_INFO:            FlipPictures();            break;            case Action.ActionType.ACTION_KEY_PRESSED:            switch (action.m_key.KeyChar)            {              case (int)Keys.D0:                UpdateCurrentTrackRating(0);                break;              case (int)Keys.D1:                UpdateCurrentTrackRating(1);                break;              case (int)Keys.D2:                UpdateCurrentTrackRating(2);                break;              case (int)Keys.D3:                UpdateCurrentTrackRating(3);                break;              case (int)Keys.D4:                UpdateCurrentTrackRating(4);                break;              case (int)Keys.D5:                UpdateCurrentTrackRating(5);                break;                // do not act on _every_ key                //default:                //  UpdateCurrentTrackRating(-1);                //  break;            }            break;            case Action.ActionType.ACTION_NEXT_AUDIO:            {              if (g_Player.AudioStreams > 1)              {                //_showStatus = true;                //_timeStatusShowTime = (DateTime.Now.Ticks / 10000);                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                (int)ControlIDs.LABEL_ROW1' 0' 0' null);                g_Player.SwitchToNextAudio();                  String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);                String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);                if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))                {                  msg.Label = string.Format("{0} ({1}/{2})"' language'                                            g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);                }                else                {                  msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                            g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);                }                  OnMessage(msg);                Log.Info("GUIMusicPlayingNow: switched audio to {0}"' msg.Label);              }            }            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"'                                       String.Format("{0}/{1}"' GUILocalizeStrings.Get(100005)'                                                     GUILocalizeStrings.Get(4540)));
Magic Number,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"'                                       String.Format("{0}/{1}"' GUILocalizeStrings.Get(100005)'                                                     GUILocalizeStrings.Get(4540)));
Magic Number,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnPageLoad,The following statement contains a magic number: LblUpNext.Label = GUILocalizeStrings.Get(4541);
Magic Number,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnPageLoad,The following statement contains a magic number: ImageChangeTimer.Interval = 3600 * 1000;
Magic Number,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnPageLoad,The following statement contains a magic number: ImageChangeTimer.Interval = 3600 * 1000;
Magic Number,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnPageLoad,The following statement contains a magic number: ProgramChangeTimer.Interval = 3 * 1000;
Magic Number,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnPageLoad,The following statement contains a magic number: ProgramChangeTimer.Interval = 3 * 1000;
Magic Number,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnPageLoad,The following statement contains a magic number: VUMeterTimer.Interval = 10;
Magic Number,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnShowContextMenu,The following statement contains a magic number: dlg.SetHeading(498);
Magic Number,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(930);
Magic Number,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(33041);
Magic Number,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(34010);
Magic Number,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(34011);
Magic Number,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 928: // Find Coverart            if (_MusicWindow != null)            {              string albumFolderPath = Path.GetDirectoryName(CurrentTrackFileName);                _MusicWindow.FindCoverArt(false' CurrentTrackTag.Artist' CurrentTrackTag.Album' albumFolderPath'                                        CurrentTrackTag' -1);              CurrentThumbFileName = GUIMusicBaseWindow.GetCoverArt(false' CurrentTrackFileName' CurrentTrackTag);                if (CurrentThumbFileName.Length > 0)              {                // let us test if there is a larger cover art image                string strLarge = Util.Utils.ConvertToLargeCoverArt(CurrentThumbFileName);                if (Util.Utils.FileExistsInCache(strLarge))                {                  CurrentThumbFileName = strLarge;                }                AddImageToImagePathContainer(CurrentThumbFileName);                  UpdateImagePathContainer();              }            }            break;            case 4521: // Show Album Info            if (_MusicWindow != null)            {              string albumFolderPath = Path.GetDirectoryName(CurrentTrackFileName);              if (_MusicWindow != null)              {                _MusicWindow.ShowAlbumInfo(GetID' CurrentTrackTag.Artist' CurrentTrackTag.Album);              }            }            break;            case 930: // add to favorites            dbs = MusicDatabase.Instance;            Song currentSong = new Song();            string strFile = g_Player.Player.CurrentFile;              bool songFound = dbs.GetSongByFileName(strFile' ref currentSong);            if (songFound)            {              if (currentSong == null)              {                return;              }              if (currentSong.Id < 0)              {                return;              }              currentSong.Favorite = true;              dbs.SetFavorite(currentSong);            }            break;            case 33041: //Play this album            try            {              if (CurrentTrackTag != null)              {                dbs = MusicDatabase.Instance;                ArrayList albumSongs = new ArrayList();                String strAlbum = CurrentTrackTag.Album;                  bool albumSongsFound = dbs.GetSongsByAlbum(strAlbum' ref albumSongs);                  if (albumSongsFound)                {                  for (int i = albumSongs.Count - 1; i >= 0; i--)                  {                    Song song = (Song)albumSongs[i];                    if (song.Title != CurrentTrackTag.Title && song.Artist == CurrentTrackTag.Artist)                    {                      AddSongToPlaylist(ref song);                    }                  }                  OnSongInserted();                }              }            }            catch (Exception ex)            {              Log.Error("GUIMusicPlayingNow: error while adding album tracks for {0} - {1}"' CurrentTrackTag.Album'                        ex.Message);            }            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 928: // Find Coverart            if (_MusicWindow != null)            {              string albumFolderPath = Path.GetDirectoryName(CurrentTrackFileName);                _MusicWindow.FindCoverArt(false' CurrentTrackTag.Artist' CurrentTrackTag.Album' albumFolderPath'                                        CurrentTrackTag' -1);              CurrentThumbFileName = GUIMusicBaseWindow.GetCoverArt(false' CurrentTrackFileName' CurrentTrackTag);                if (CurrentThumbFileName.Length > 0)              {                // let us test if there is a larger cover art image                string strLarge = Util.Utils.ConvertToLargeCoverArt(CurrentThumbFileName);                if (Util.Utils.FileExistsInCache(strLarge))                {                  CurrentThumbFileName = strLarge;                }                AddImageToImagePathContainer(CurrentThumbFileName);                  UpdateImagePathContainer();              }            }            break;            case 4521: // Show Album Info            if (_MusicWindow != null)            {              string albumFolderPath = Path.GetDirectoryName(CurrentTrackFileName);              if (_MusicWindow != null)              {                _MusicWindow.ShowAlbumInfo(GetID' CurrentTrackTag.Artist' CurrentTrackTag.Album);              }            }            break;            case 930: // add to favorites            dbs = MusicDatabase.Instance;            Song currentSong = new Song();            string strFile = g_Player.Player.CurrentFile;              bool songFound = dbs.GetSongByFileName(strFile' ref currentSong);            if (songFound)            {              if (currentSong == null)              {                return;              }              if (currentSong.Id < 0)              {                return;              }              currentSong.Favorite = true;              dbs.SetFavorite(currentSong);            }            break;            case 33041: //Play this album            try            {              if (CurrentTrackTag != null)              {                dbs = MusicDatabase.Instance;                ArrayList albumSongs = new ArrayList();                String strAlbum = CurrentTrackTag.Album;                  bool albumSongsFound = dbs.GetSongsByAlbum(strAlbum' ref albumSongs);                  if (albumSongsFound)                {                  for (int i = albumSongs.Count - 1; i >= 0; i--)                  {                    Song song = (Song)albumSongs[i];                    if (song.Title != CurrentTrackTag.Title && song.Artist == CurrentTrackTag.Artist)                    {                      AddSongToPlaylist(ref song);                    }                  }                  OnSongInserted();                }              }            }            catch (Exception ex)            {              Log.Error("GUIMusicPlayingNow: error while adding album tracks for {0} - {1}"' CurrentTrackTag.Album'                        ex.Message);            }            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 928: // Find Coverart            if (_MusicWindow != null)            {              string albumFolderPath = Path.GetDirectoryName(CurrentTrackFileName);                _MusicWindow.FindCoverArt(false' CurrentTrackTag.Artist' CurrentTrackTag.Album' albumFolderPath'                                        CurrentTrackTag' -1);              CurrentThumbFileName = GUIMusicBaseWindow.GetCoverArt(false' CurrentTrackFileName' CurrentTrackTag);                if (CurrentThumbFileName.Length > 0)              {                // let us test if there is a larger cover art image                string strLarge = Util.Utils.ConvertToLargeCoverArt(CurrentThumbFileName);                if (Util.Utils.FileExistsInCache(strLarge))                {                  CurrentThumbFileName = strLarge;                }                AddImageToImagePathContainer(CurrentThumbFileName);                  UpdateImagePathContainer();              }            }            break;            case 4521: // Show Album Info            if (_MusicWindow != null)            {              string albumFolderPath = Path.GetDirectoryName(CurrentTrackFileName);              if (_MusicWindow != null)              {                _MusicWindow.ShowAlbumInfo(GetID' CurrentTrackTag.Artist' CurrentTrackTag.Album);              }            }            break;            case 930: // add to favorites            dbs = MusicDatabase.Instance;            Song currentSong = new Song();            string strFile = g_Player.Player.CurrentFile;              bool songFound = dbs.GetSongByFileName(strFile' ref currentSong);            if (songFound)            {              if (currentSong == null)              {                return;              }              if (currentSong.Id < 0)              {                return;              }              currentSong.Favorite = true;              dbs.SetFavorite(currentSong);            }            break;            case 33041: //Play this album            try            {              if (CurrentTrackTag != null)              {                dbs = MusicDatabase.Instance;                ArrayList albumSongs = new ArrayList();                String strAlbum = CurrentTrackTag.Album;                  bool albumSongsFound = dbs.GetSongsByAlbum(strAlbum' ref albumSongs);                  if (albumSongsFound)                {                  for (int i = albumSongs.Count - 1; i >= 0; i--)                  {                    Song song = (Song)albumSongs[i];                    if (song.Title != CurrentTrackTag.Title && song.Artist == CurrentTrackTag.Artist)                    {                      AddSongToPlaylist(ref song);                    }                  }                  OnSongInserted();                }              }            }            catch (Exception ex)            {              Log.Error("GUIMusicPlayingNow: error while adding album tracks for {0} - {1}"' CurrentTrackTag.Album'                        ex.Message);            }            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 928: // Find Coverart            if (_MusicWindow != null)            {              string albumFolderPath = Path.GetDirectoryName(CurrentTrackFileName);                _MusicWindow.FindCoverArt(false' CurrentTrackTag.Artist' CurrentTrackTag.Album' albumFolderPath'                                        CurrentTrackTag' -1);              CurrentThumbFileName = GUIMusicBaseWindow.GetCoverArt(false' CurrentTrackFileName' CurrentTrackTag);                if (CurrentThumbFileName.Length > 0)              {                // let us test if there is a larger cover art image                string strLarge = Util.Utils.ConvertToLargeCoverArt(CurrentThumbFileName);                if (Util.Utils.FileExistsInCache(strLarge))                {                  CurrentThumbFileName = strLarge;                }                AddImageToImagePathContainer(CurrentThumbFileName);                  UpdateImagePathContainer();              }            }            break;            case 4521: // Show Album Info            if (_MusicWindow != null)            {              string albumFolderPath = Path.GetDirectoryName(CurrentTrackFileName);              if (_MusicWindow != null)              {                _MusicWindow.ShowAlbumInfo(GetID' CurrentTrackTag.Artist' CurrentTrackTag.Album);              }            }            break;            case 930: // add to favorites            dbs = MusicDatabase.Instance;            Song currentSong = new Song();            string strFile = g_Player.Player.CurrentFile;              bool songFound = dbs.GetSongByFileName(strFile' ref currentSong);            if (songFound)            {              if (currentSong == null)              {                return;              }              if (currentSong.Id < 0)              {                return;              }              currentSong.Favorite = true;              dbs.SetFavorite(currentSong);            }            break;            case 33041: //Play this album            try            {              if (CurrentTrackTag != null)              {                dbs = MusicDatabase.Instance;                ArrayList albumSongs = new ArrayList();                String strAlbum = CurrentTrackTag.Album;                  bool albumSongsFound = dbs.GetSongsByAlbum(strAlbum' ref albumSongs);                  if (albumSongsFound)                {                  for (int i = albumSongs.Count - 1; i >= 0; i--)                  {                    Song song = (Song)albumSongs[i];                    if (song.Title != CurrentTrackTag.Title && song.Artist == CurrentTrackTag.Artist)                    {                      AddSongToPlaylist(ref song);                    }                  }                  OnSongInserted();                }              }            }            catch (Exception ex)            {              Log.Error("GUIMusicPlayingNow: error while adding album tracks for {0} - {1}"' CurrentTrackTag.Album'                        ex.Message);            }            break;        }
Magic Number,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnVUMterTimerTickEvent,The following statement contains a magic number: dbLevelL += Math.Abs(dbLevelL*0.5);
Magic Number,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnVUMterTimerTickEvent,The following statement contains a magic number: dbLevelR += Math.Abs(dbLevelR*0.5);
Magic Number,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnVUMterTimerTickEvent,The following statement contains a magic number: (int) dbLevelL < -15
Magic Number,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnVUMterTimerTickEvent,The following statement contains a magic number: (int) dbLevelR < -15
Magic Number,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,UpdateImagePathContainer,The following statement contains a magic number: ImageChangeTimer.Interval = 15 * 1000;
Magic Number,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,UpdateImagePathContainer,The following statement contains a magic number: ImageChangeTimer.Interval = 15 * 1000;
Magic Number,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,UpdateCurrentTrackRating,The following statement contains a magic number: RatingValue < 0 || RatingValue > 5
Magic Number,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,UpdateCurrentTrackRating,The following statement contains a magic number: GUIPropertyManager.SetProperty("#Play.Current.Rating"'                                       (Convert.ToDecimal(2 * CurrentTrackTag.Rating + 1)).ToString());
Magic Number,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,UpdateSimilarTrackWorker,The following statement contains a magic number: i < 3
Magic Number,MediaPortal.GUI.Music,MusicViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicViewHandler.cs,Execute,The following statement contains a magic number: switch (table)         {           case "artist":           case "albumartist":           case "genre":           case "composer":             sql = String.Format("select * from {0} "' table);             if (whereClause != string.Empty)             {               sql += "where " + whereClause;             }             if (orderClause != string.Empty)             {               sql += orderClause;             }             break;            case "album":             sql = String.Format("select * from tracks ");             if (whereClause != string.Empty)             {               sql += "where " + whereClause;             }             sql += " group by strAlbum' strAlbumArtist ";             // We need to group on AlbumArtist' to show Albums with same name for different artists             if (orderClause != string.Empty)             {               sql += orderClause;             }             break;            case "tracks":             if (defRoot.Where == "year")             {               songs = new List<Song>();               sql = String.Format("select distinct iYear from tracks ");               SQLiteResultSet results = MusicDatabase.DirectExecute(sql);               for (int i = 0; i < results.Rows.Count; i++)               {                 Song song = new Song();                 try                 {                   song.Year = (int)Math.Floor(0.5d + Double.Parse(DatabaseUtility.Get(results' i' "iYear")));                 }                 catch (Exception)                 {                   song.Year = 0;                 }                 if (song.Year > 1000)                 {                   songs.Add(song);                 }               }                previousLevel = currentLevel;                return true;             }             else if (defRoot.Where == "recently added")             {               try               {                 whereClause = "";                 TimeSpan ts = new TimeSpan(Convert.ToInt32(defRoot.Restriction)' 0' 0' 0);                 DateTime searchDate = DateTime.Today - ts;                  whereClause = String.Format("where {0} > '{1}'"' searchField' searchDate.ToString("yyyy-MM-dd hh:mm:ss"));                 sql = String.Format("select * from tracks {0} {1}"' whereClause' orderClause);               }               catch (Exception) {}             }             else if (defRoot.Where == "conductor")             {               whereClause = "";               BuildRestriction(defRoot' ref whereClause);               if (whereClause != string.Empty)               {                 whereClause = String.Format("where {0}"' whereClause);               }               sql = String.Format("select distinct strConductor from tracks {0} {1}"' whereClause' orderClause);             }             else             {               whereClause = "";               BuildRestriction(defRoot' ref whereClause);               if (whereClause != string.Empty)               {                 whereClause = String.Format("where {0}"' whereClause);               }               sql = String.Format("select * from tracks {0} {1}"' whereClause' orderClause);             }             break;         }
Magic Number,MediaPortal.GUI.Music,MusicViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicViewHandler.cs,Execute,The following statement contains a magic number: switch (table)         {           case "artist":           case "albumartist":           case "genre":           case "composer":             sql = String.Format("select * from {0} "' table);             if (whereClause != string.Empty)             {               sql += "where " + whereClause;             }             if (orderClause != string.Empty)             {               sql += orderClause;             }             break;            case "album":             sql = String.Format("select * from tracks ");             if (whereClause != string.Empty)             {               sql += "where " + whereClause;             }             sql += " group by strAlbum' strAlbumArtist ";             // We need to group on AlbumArtist' to show Albums with same name for different artists             if (orderClause != string.Empty)             {               sql += orderClause;             }             break;            case "tracks":             if (defRoot.Where == "year")             {               songs = new List<Song>();               sql = String.Format("select distinct iYear from tracks ");               SQLiteResultSet results = MusicDatabase.DirectExecute(sql);               for (int i = 0; i < results.Rows.Count; i++)               {                 Song song = new Song();                 try                 {                   song.Year = (int)Math.Floor(0.5d + Double.Parse(DatabaseUtility.Get(results' i' "iYear")));                 }                 catch (Exception)                 {                   song.Year = 0;                 }                 if (song.Year > 1000)                 {                   songs.Add(song);                 }               }                previousLevel = currentLevel;                return true;             }             else if (defRoot.Where == "recently added")             {               try               {                 whereClause = "";                 TimeSpan ts = new TimeSpan(Convert.ToInt32(defRoot.Restriction)' 0' 0' 0);                 DateTime searchDate = DateTime.Today - ts;                  whereClause = String.Format("where {0} > '{1}'"' searchField' searchDate.ToString("yyyy-MM-dd hh:mm:ss"));                 sql = String.Format("select * from tracks {0} {1}"' whereClause' orderClause);               }               catch (Exception) {}             }             else if (defRoot.Where == "conductor")             {               whereClause = "";               BuildRestriction(defRoot' ref whereClause);               if (whereClause != string.Empty)               {                 whereClause = String.Format("where {0}"' whereClause);               }               sql = String.Format("select distinct strConductor from tracks {0} {1}"' whereClause' orderClause);             }             else             {               whereClause = "";               BuildRestriction(defRoot' ref whereClause);               if (whereClause != string.Empty)               {                 whereClause = String.Format("where {0}"' whereClause);               }               sql = String.Format("select * from tracks {0} {1}"' whereClause' orderClause);             }             break;         }
Magic Number,MediaPortal.GUI.Music,MusicViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicViewHandler.cs,GetLocalizedViewLevel,The following statement contains a magic number: switch(lvlName)       {                   case "artist":           localizedLevelName = GUILocalizeStrings.Get(133);           break;         case "albumartist":           localizedLevelName = GUILocalizeStrings.Get(528);           break;         case "album":           localizedLevelName = GUILocalizeStrings.Get(132);           break;         case "genre":           localizedLevelName = GUILocalizeStrings.Get(135);           break;         case "year":           localizedLevelName = GUILocalizeStrings.Get(987);           break;         case "composer":           localizedLevelName = GUILocalizeStrings.Get(1214);           break;                   case "conductor":           localizedLevelName = GUILocalizeStrings.Get(1215);           break;                   case"disc#":           localizedLevelName = GUILocalizeStrings.Get(1216);           break;                   case"filetype":           localizedLevelName = GUILocalizeStrings.Get(467);           break;                   case "title":         case "timesplayed":         case "rating":         case "favorites":         case "recently added":         case "track":           localizedLevelName = GUILocalizeStrings.Get(1052);           break;         default:           localizedLevelName = lvlName;           break;       }
Magic Number,MediaPortal.GUI.Music,MusicViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicViewHandler.cs,GetLocalizedViewLevel,The following statement contains a magic number: switch(lvlName)       {                   case "artist":           localizedLevelName = GUILocalizeStrings.Get(133);           break;         case "albumartist":           localizedLevelName = GUILocalizeStrings.Get(528);           break;         case "album":           localizedLevelName = GUILocalizeStrings.Get(132);           break;         case "genre":           localizedLevelName = GUILocalizeStrings.Get(135);           break;         case "year":           localizedLevelName = GUILocalizeStrings.Get(987);           break;         case "composer":           localizedLevelName = GUILocalizeStrings.Get(1214);           break;                   case "conductor":           localizedLevelName = GUILocalizeStrings.Get(1215);           break;                   case"disc#":           localizedLevelName = GUILocalizeStrings.Get(1216);           break;                   case"filetype":           localizedLevelName = GUILocalizeStrings.Get(467);           break;                   case "title":         case "timesplayed":         case "rating":         case "favorites":         case "recently added":         case "track":           localizedLevelName = GUILocalizeStrings.Get(1052);           break;         default:           localizedLevelName = lvlName;           break;       }
Magic Number,MediaPortal.GUI.Music,MusicViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicViewHandler.cs,GetLocalizedViewLevel,The following statement contains a magic number: switch(lvlName)       {                   case "artist":           localizedLevelName = GUILocalizeStrings.Get(133);           break;         case "albumartist":           localizedLevelName = GUILocalizeStrings.Get(528);           break;         case "album":           localizedLevelName = GUILocalizeStrings.Get(132);           break;         case "genre":           localizedLevelName = GUILocalizeStrings.Get(135);           break;         case "year":           localizedLevelName = GUILocalizeStrings.Get(987);           break;         case "composer":           localizedLevelName = GUILocalizeStrings.Get(1214);           break;                   case "conductor":           localizedLevelName = GUILocalizeStrings.Get(1215);           break;                   case"disc#":           localizedLevelName = GUILocalizeStrings.Get(1216);           break;                   case"filetype":           localizedLevelName = GUILocalizeStrings.Get(467);           break;                   case "title":         case "timesplayed":         case "rating":         case "favorites":         case "recently added":         case "track":           localizedLevelName = GUILocalizeStrings.Get(1052);           break;         default:           localizedLevelName = lvlName;           break;       }
Magic Number,MediaPortal.GUI.Music,MusicViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicViewHandler.cs,GetLocalizedViewLevel,The following statement contains a magic number: switch(lvlName)       {                   case "artist":           localizedLevelName = GUILocalizeStrings.Get(133);           break;         case "albumartist":           localizedLevelName = GUILocalizeStrings.Get(528);           break;         case "album":           localizedLevelName = GUILocalizeStrings.Get(132);           break;         case "genre":           localizedLevelName = GUILocalizeStrings.Get(135);           break;         case "year":           localizedLevelName = GUILocalizeStrings.Get(987);           break;         case "composer":           localizedLevelName = GUILocalizeStrings.Get(1214);           break;                   case "conductor":           localizedLevelName = GUILocalizeStrings.Get(1215);           break;                   case"disc#":           localizedLevelName = GUILocalizeStrings.Get(1216);           break;                   case"filetype":           localizedLevelName = GUILocalizeStrings.Get(467);           break;                   case "title":         case "timesplayed":         case "rating":         case "favorites":         case "recently added":         case "track":           localizedLevelName = GUILocalizeStrings.Get(1052);           break;         default:           localizedLevelName = lvlName;           break;       }
Magic Number,MediaPortal.GUI.Music,MusicViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicViewHandler.cs,GetLocalizedViewLevel,The following statement contains a magic number: switch(lvlName)       {                   case "artist":           localizedLevelName = GUILocalizeStrings.Get(133);           break;         case "albumartist":           localizedLevelName = GUILocalizeStrings.Get(528);           break;         case "album":           localizedLevelName = GUILocalizeStrings.Get(132);           break;         case "genre":           localizedLevelName = GUILocalizeStrings.Get(135);           break;         case "year":           localizedLevelName = GUILocalizeStrings.Get(987);           break;         case "composer":           localizedLevelName = GUILocalizeStrings.Get(1214);           break;                   case "conductor":           localizedLevelName = GUILocalizeStrings.Get(1215);           break;                   case"disc#":           localizedLevelName = GUILocalizeStrings.Get(1216);           break;                   case"filetype":           localizedLevelName = GUILocalizeStrings.Get(467);           break;                   case "title":         case "timesplayed":         case "rating":         case "favorites":         case "recently added":         case "track":           localizedLevelName = GUILocalizeStrings.Get(1052);           break;         default:           localizedLevelName = lvlName;           break;       }
Magic Number,MediaPortal.GUI.Music,MusicViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicViewHandler.cs,GetLocalizedViewLevel,The following statement contains a magic number: switch(lvlName)       {                   case "artist":           localizedLevelName = GUILocalizeStrings.Get(133);           break;         case "albumartist":           localizedLevelName = GUILocalizeStrings.Get(528);           break;         case "album":           localizedLevelName = GUILocalizeStrings.Get(132);           break;         case "genre":           localizedLevelName = GUILocalizeStrings.Get(135);           break;         case "year":           localizedLevelName = GUILocalizeStrings.Get(987);           break;         case "composer":           localizedLevelName = GUILocalizeStrings.Get(1214);           break;                   case "conductor":           localizedLevelName = GUILocalizeStrings.Get(1215);           break;                   case"disc#":           localizedLevelName = GUILocalizeStrings.Get(1216);           break;                   case"filetype":           localizedLevelName = GUILocalizeStrings.Get(467);           break;                   case "title":         case "timesplayed":         case "rating":         case "favorites":         case "recently added":         case "track":           localizedLevelName = GUILocalizeStrings.Get(1052);           break;         default:           localizedLevelName = lvlName;           break;       }
Magic Number,MediaPortal.GUI.Music,MusicViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicViewHandler.cs,GetLocalizedViewLevel,The following statement contains a magic number: switch(lvlName)       {                   case "artist":           localizedLevelName = GUILocalizeStrings.Get(133);           break;         case "albumartist":           localizedLevelName = GUILocalizeStrings.Get(528);           break;         case "album":           localizedLevelName = GUILocalizeStrings.Get(132);           break;         case "genre":           localizedLevelName = GUILocalizeStrings.Get(135);           break;         case "year":           localizedLevelName = GUILocalizeStrings.Get(987);           break;         case "composer":           localizedLevelName = GUILocalizeStrings.Get(1214);           break;                   case "conductor":           localizedLevelName = GUILocalizeStrings.Get(1215);           break;                   case"disc#":           localizedLevelName = GUILocalizeStrings.Get(1216);           break;                   case"filetype":           localizedLevelName = GUILocalizeStrings.Get(467);           break;                   case "title":         case "timesplayed":         case "rating":         case "favorites":         case "recently added":         case "track":           localizedLevelName = GUILocalizeStrings.Get(1052);           break;         default:           localizedLevelName = lvlName;           break;       }
Magic Number,MediaPortal.GUI.Music,MusicViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicViewHandler.cs,GetLocalizedViewLevel,The following statement contains a magic number: switch(lvlName)       {                   case "artist":           localizedLevelName = GUILocalizeStrings.Get(133);           break;         case "albumartist":           localizedLevelName = GUILocalizeStrings.Get(528);           break;         case "album":           localizedLevelName = GUILocalizeStrings.Get(132);           break;         case "genre":           localizedLevelName = GUILocalizeStrings.Get(135);           break;         case "year":           localizedLevelName = GUILocalizeStrings.Get(987);           break;         case "composer":           localizedLevelName = GUILocalizeStrings.Get(1214);           break;                   case "conductor":           localizedLevelName = GUILocalizeStrings.Get(1215);           break;                   case"disc#":           localizedLevelName = GUILocalizeStrings.Get(1216);           break;                   case"filetype":           localizedLevelName = GUILocalizeStrings.Get(467);           break;                   case "title":         case "timesplayed":         case "rating":         case "favorites":         case "recently added":         case "track":           localizedLevelName = GUILocalizeStrings.Get(1052);           break;         default:           localizedLevelName = lvlName;           break;       }
Magic Number,MediaPortal.GUI.Music,MusicViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicViewHandler.cs,GetLocalizedViewLevel,The following statement contains a magic number: switch(lvlName)       {                   case "artist":           localizedLevelName = GUILocalizeStrings.Get(133);           break;         case "albumartist":           localizedLevelName = GUILocalizeStrings.Get(528);           break;         case "album":           localizedLevelName = GUILocalizeStrings.Get(132);           break;         case "genre":           localizedLevelName = GUILocalizeStrings.Get(135);           break;         case "year":           localizedLevelName = GUILocalizeStrings.Get(987);           break;         case "composer":           localizedLevelName = GUILocalizeStrings.Get(1214);           break;                   case "conductor":           localizedLevelName = GUILocalizeStrings.Get(1215);           break;                   case"disc#":           localizedLevelName = GUILocalizeStrings.Get(1216);           break;                   case"filetype":           localizedLevelName = GUILocalizeStrings.Get(467);           break;                   case "title":         case "timesplayed":         case "rating":         case "favorites":         case "recently added":         case "track":           localizedLevelName = GUILocalizeStrings.Get(1052);           break;         default:           localizedLevelName = lvlName;           break;       }
Magic Number,MediaPortal.GUI.Music,MusicViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicViewHandler.cs,GetLocalizedViewLevel,The following statement contains a magic number: switch(lvlName)       {                   case "artist":           localizedLevelName = GUILocalizeStrings.Get(133);           break;         case "albumartist":           localizedLevelName = GUILocalizeStrings.Get(528);           break;         case "album":           localizedLevelName = GUILocalizeStrings.Get(132);           break;         case "genre":           localizedLevelName = GUILocalizeStrings.Get(135);           break;         case "year":           localizedLevelName = GUILocalizeStrings.Get(987);           break;         case "composer":           localizedLevelName = GUILocalizeStrings.Get(1214);           break;                   case "conductor":           localizedLevelName = GUILocalizeStrings.Get(1215);           break;                   case"disc#":           localizedLevelName = GUILocalizeStrings.Get(1216);           break;                   case"filetype":           localizedLevelName = GUILocalizeStrings.Get(467);           break;                   case "title":         case "timesplayed":         case "rating":         case "favorites":         case "recently added":         case "track":           localizedLevelName = GUILocalizeStrings.Get(1052);           break;         default:           localizedLevelName = lvlName;           break;       }
Magic Number,MediaPortal.MusicImport,MusicImport,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicImport.cs,MusicImport,The following statement contains a magic number: mp3BitRate = xmlreader.GetValueAsInt("musicimport"' "mp3bitrate"' 2);
Magic Number,MediaPortal.MusicImport,MusicImport,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicImport.cs,MusicImport,The following statement contains a magic number: mp3Quality = xmlreader.GetValueAsInt("musicimport"' "mp3quality"' 2);
Magic Number,MediaPortal.MusicImport,MusicImport,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicImport.cs,MusicImport,The following statement contains a magic number: dlgProgress.SetHeading(1103);
Magic Number,MediaPortal.MusicImport,MusicImport,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicImport.cs,MusicImport,The following statement contains a magic number: dlgProgress.SetLine(2' "");
Magic Number,MediaPortal.MusicImport,MusicImport,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicImport.cs,CdReadProgress,The following statement contains a magic number: ulong Percent = ((ulong)ea.BytesRead * 100) / ea.Bytes2Read;
Magic Number,MediaPortal.MusicImport,MusicImport,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicImport.cs,EncodeTrack,The following statement contains a magic number: musicTag.Track = Convert.ToInt16(item.Label.Substring(5));
Magic Number,MediaPortal.MusicImport,MusicImport,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicImport.cs,EncodeDisc,The following statement contains a magic number: musicTag.Track = Convert.ToInt16(item.Label.Substring(5));
Magic Number,MediaPortal.MusicImport,MusicImport,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicImport.cs,EncodeTrack,The following statement contains a magic number: dlgProgress.SetHeading(              string.Format(GUILocalizeStrings.Get(1105) + " ({0} " + GUILocalizeStrings.Get(1104) + ")"'                            importQueue.Count));
Magic Number,MediaPortal.MusicImport,MusicImport,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicImport.cs,EncodeTrack,The following statement contains a magic number: dlgProgress.SetHeading(              string.Format(GUILocalizeStrings.Get(1105) + " ({0} " + GUILocalizeStrings.Get(1104) + ")"'                            importQueue.Count));
Magic Number,MediaPortal.MusicImport,MusicImport,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicImport.cs,ThreadEncodeTrack,The following statement contains a magic number: dlgProgress.SetHeading(                  string.Format(GUILocalizeStrings.Get(1105) + " ({0} " + GUILocalizeStrings.Get(1104) + ")"'                                importQueue.Count + 1));
Magic Number,MediaPortal.MusicImport,MusicImport,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicImport.cs,ThreadEncodeTrack,The following statement contains a magic number: dlgProgress.SetHeading(                  string.Format(GUILocalizeStrings.Get(1105) + " ({0} " + GUILocalizeStrings.Get(1104) + ")"'                                importQueue.Count + 1));
Magic Number,MediaPortal.MusicImport,MusicImport,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicImport.cs,ThreadEncodeTrack,The following statement contains a magic number: dlgProgress.SetLine(2'                                  string.Format("{0:00}. {1} - {2}"' trackInfo.MusicTag.Track' trackInfo.MusicTag.Artist'                                                trackInfo.MusicTag.Title));
Magic Number,MediaPortal.MusicImport,MusicImport,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicImport.cs,SaveTrack,The following statement contains a magic number: WaveFormat Format = new WaveFormat(44100' 16' 2);
Magic Number,MediaPortal.MusicImport,MusicImport,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicImport.cs,SaveTrack,The following statement contains a magic number: WaveFormat Format = new WaveFormat(44100' 16' 2);
Magic Number,MediaPortal.MusicImport,MusicImport,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicImport.cs,SaveTrack,The following statement contains a magic number: WaveFormat Format = new WaveFormat(44100' 16' 2);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,Init,The following statement contains a magic number: _immediateSeekValue = xmlreader.GetValueAsInt("movieplayer"' "immediateskipstepsize"' 10);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,LoadSettings,The following statement contains a magic number: m_iMaxTimeOSDOnscreen = 1000 * xmlreader.GetValueAsInt("movieplayer"' "osdtimeout"' 5);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,LoadSettings,The following statement contains a magic number: m_iMaxTimeOSDOnscreen = 1000 * xmlreader.GetValueAsInt("movieplayer"' "osdtimeout"' 5);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ResetAllControls,The following statement contains a magic number: dwPosY < (int)100
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowSubtitleDelayStatus,The following statement contains a magic number: _timeStatusShowTime = (DateTime.Now.Ticks / 10000);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.SetHeading(498);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(941);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(492);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(200090);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(200095);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(200059);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(462);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(200073);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(970);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(974);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1700);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(975);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(976);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(200091);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1064);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {           // Add audio stream selection to be able to switch audio streams in .ts recordings         case 492:           ShowAudioStreamsMenu();           break;         case 200059:           ShowAudioDualMonoModeMenu(dualMonoMode);           break;         case 462:           ShowSubtitleStreamsMenu();           break;         case 200073:           ShowPostProcessingMenu();           break;         case 1064:           ShowBookmarksMenu();           break;         case 974: // DVD root menu           Action actionMenu = new Action(Action.ActionType.ACTION_DVD_MENU' 0' 0);           GUIGraphicsContext.OnAction(actionMenu);           break;         case 1700: // BD popup menu           Action actionPopupMenu = new Action(Action.ActionType.ACTION_BD_POPUP_MENU' 0' 0);           GUIGraphicsContext.OnAction(actionPopupMenu);           break;         case 975: // DVD previous chapter           Action actionPrevChapter = new Action(Action.ActionType.ACTION_PREV_CHAPTER' 0' 0);           GUIGraphicsContext.OnAction(actionPrevChapter);           break;         case 976: // DVD next chapter           Action actionNextChapter = new Action(Action.ActionType.ACTION_NEXT_CHAPTER' 0' 0);           GUIGraphicsContext.OnAction(actionNextChapter);           break;         case 941: // Change aspect ratio           ShowAspectRatioMenu();           break;          case 970:           // switch back to MyMovies window           _isOsdVisible = false;           GUIWindowManager.IsOsdVisible = false;           GUIGraphicsContext.IsFullScreenVideo = false;           GUIWindowManager.ShowPreviousWindow();           break;          case 200090:           ShowEditionStreamsMenu();           break;          case 200095:           ShowVideoStreamsMenu();           break;          case 200091:           ShowChapterStreamsMenu();           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {           // Add audio stream selection to be able to switch audio streams in .ts recordings         case 492:           ShowAudioStreamsMenu();           break;         case 200059:           ShowAudioDualMonoModeMenu(dualMonoMode);           break;         case 462:           ShowSubtitleStreamsMenu();           break;         case 200073:           ShowPostProcessingMenu();           break;         case 1064:           ShowBookmarksMenu();           break;         case 974: // DVD root menu           Action actionMenu = new Action(Action.ActionType.ACTION_DVD_MENU' 0' 0);           GUIGraphicsContext.OnAction(actionMenu);           break;         case 1700: // BD popup menu           Action actionPopupMenu = new Action(Action.ActionType.ACTION_BD_POPUP_MENU' 0' 0);           GUIGraphicsContext.OnAction(actionPopupMenu);           break;         case 975: // DVD previous chapter           Action actionPrevChapter = new Action(Action.ActionType.ACTION_PREV_CHAPTER' 0' 0);           GUIGraphicsContext.OnAction(actionPrevChapter);           break;         case 976: // DVD next chapter           Action actionNextChapter = new Action(Action.ActionType.ACTION_NEXT_CHAPTER' 0' 0);           GUIGraphicsContext.OnAction(actionNextChapter);           break;         case 941: // Change aspect ratio           ShowAspectRatioMenu();           break;          case 970:           // switch back to MyMovies window           _isOsdVisible = false;           GUIWindowManager.IsOsdVisible = false;           GUIGraphicsContext.IsFullScreenVideo = false;           GUIWindowManager.ShowPreviousWindow();           break;          case 200090:           ShowEditionStreamsMenu();           break;          case 200095:           ShowVideoStreamsMenu();           break;          case 200091:           ShowChapterStreamsMenu();           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {           // Add audio stream selection to be able to switch audio streams in .ts recordings         case 492:           ShowAudioStreamsMenu();           break;         case 200059:           ShowAudioDualMonoModeMenu(dualMonoMode);           break;         case 462:           ShowSubtitleStreamsMenu();           break;         case 200073:           ShowPostProcessingMenu();           break;         case 1064:           ShowBookmarksMenu();           break;         case 974: // DVD root menu           Action actionMenu = new Action(Action.ActionType.ACTION_DVD_MENU' 0' 0);           GUIGraphicsContext.OnAction(actionMenu);           break;         case 1700: // BD popup menu           Action actionPopupMenu = new Action(Action.ActionType.ACTION_BD_POPUP_MENU' 0' 0);           GUIGraphicsContext.OnAction(actionPopupMenu);           break;         case 975: // DVD previous chapter           Action actionPrevChapter = new Action(Action.ActionType.ACTION_PREV_CHAPTER' 0' 0);           GUIGraphicsContext.OnAction(actionPrevChapter);           break;         case 976: // DVD next chapter           Action actionNextChapter = new Action(Action.ActionType.ACTION_NEXT_CHAPTER' 0' 0);           GUIGraphicsContext.OnAction(actionNextChapter);           break;         case 941: // Change aspect ratio           ShowAspectRatioMenu();           break;          case 970:           // switch back to MyMovies window           _isOsdVisible = false;           GUIWindowManager.IsOsdVisible = false;           GUIGraphicsContext.IsFullScreenVideo = false;           GUIWindowManager.ShowPreviousWindow();           break;          case 200090:           ShowEditionStreamsMenu();           break;          case 200095:           ShowVideoStreamsMenu();           break;          case 200091:           ShowChapterStreamsMenu();           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {           // Add audio stream selection to be able to switch audio streams in .ts recordings         case 492:           ShowAudioStreamsMenu();           break;         case 200059:           ShowAudioDualMonoModeMenu(dualMonoMode);           break;         case 462:           ShowSubtitleStreamsMenu();           break;         case 200073:           ShowPostProcessingMenu();           break;         case 1064:           ShowBookmarksMenu();           break;         case 974: // DVD root menu           Action actionMenu = new Action(Action.ActionType.ACTION_DVD_MENU' 0' 0);           GUIGraphicsContext.OnAction(actionMenu);           break;         case 1700: // BD popup menu           Action actionPopupMenu = new Action(Action.ActionType.ACTION_BD_POPUP_MENU' 0' 0);           GUIGraphicsContext.OnAction(actionPopupMenu);           break;         case 975: // DVD previous chapter           Action actionPrevChapter = new Action(Action.ActionType.ACTION_PREV_CHAPTER' 0' 0);           GUIGraphicsContext.OnAction(actionPrevChapter);           break;         case 976: // DVD next chapter           Action actionNextChapter = new Action(Action.ActionType.ACTION_NEXT_CHAPTER' 0' 0);           GUIGraphicsContext.OnAction(actionNextChapter);           break;         case 941: // Change aspect ratio           ShowAspectRatioMenu();           break;          case 970:           // switch back to MyMovies window           _isOsdVisible = false;           GUIWindowManager.IsOsdVisible = false;           GUIGraphicsContext.IsFullScreenVideo = false;           GUIWindowManager.ShowPreviousWindow();           break;          case 200090:           ShowEditionStreamsMenu();           break;          case 200095:           ShowVideoStreamsMenu();           break;          case 200091:           ShowChapterStreamsMenu();           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {           // Add audio stream selection to be able to switch audio streams in .ts recordings         case 492:           ShowAudioStreamsMenu();           break;         case 200059:           ShowAudioDualMonoModeMenu(dualMonoMode);           break;         case 462:           ShowSubtitleStreamsMenu();           break;         case 200073:           ShowPostProcessingMenu();           break;         case 1064:           ShowBookmarksMenu();           break;         case 974: // DVD root menu           Action actionMenu = new Action(Action.ActionType.ACTION_DVD_MENU' 0' 0);           GUIGraphicsContext.OnAction(actionMenu);           break;         case 1700: // BD popup menu           Action actionPopupMenu = new Action(Action.ActionType.ACTION_BD_POPUP_MENU' 0' 0);           GUIGraphicsContext.OnAction(actionPopupMenu);           break;         case 975: // DVD previous chapter           Action actionPrevChapter = new Action(Action.ActionType.ACTION_PREV_CHAPTER' 0' 0);           GUIGraphicsContext.OnAction(actionPrevChapter);           break;         case 976: // DVD next chapter           Action actionNextChapter = new Action(Action.ActionType.ACTION_NEXT_CHAPTER' 0' 0);           GUIGraphicsContext.OnAction(actionNextChapter);           break;         case 941: // Change aspect ratio           ShowAspectRatioMenu();           break;          case 970:           // switch back to MyMovies window           _isOsdVisible = false;           GUIWindowManager.IsOsdVisible = false;           GUIGraphicsContext.IsFullScreenVideo = false;           GUIWindowManager.ShowPreviousWindow();           break;          case 200090:           ShowEditionStreamsMenu();           break;          case 200095:           ShowVideoStreamsMenu();           break;          case 200091:           ShowChapterStreamsMenu();           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {           // Add audio stream selection to be able to switch audio streams in .ts recordings         case 492:           ShowAudioStreamsMenu();           break;         case 200059:           ShowAudioDualMonoModeMenu(dualMonoMode);           break;         case 462:           ShowSubtitleStreamsMenu();           break;         case 200073:           ShowPostProcessingMenu();           break;         case 1064:           ShowBookmarksMenu();           break;         case 974: // DVD root menu           Action actionMenu = new Action(Action.ActionType.ACTION_DVD_MENU' 0' 0);           GUIGraphicsContext.OnAction(actionMenu);           break;         case 1700: // BD popup menu           Action actionPopupMenu = new Action(Action.ActionType.ACTION_BD_POPUP_MENU' 0' 0);           GUIGraphicsContext.OnAction(actionPopupMenu);           break;         case 975: // DVD previous chapter           Action actionPrevChapter = new Action(Action.ActionType.ACTION_PREV_CHAPTER' 0' 0);           GUIGraphicsContext.OnAction(actionPrevChapter);           break;         case 976: // DVD next chapter           Action actionNextChapter = new Action(Action.ActionType.ACTION_NEXT_CHAPTER' 0' 0);           GUIGraphicsContext.OnAction(actionNextChapter);           break;         case 941: // Change aspect ratio           ShowAspectRatioMenu();           break;          case 970:           // switch back to MyMovies window           _isOsdVisible = false;           GUIWindowManager.IsOsdVisible = false;           GUIGraphicsContext.IsFullScreenVideo = false;           GUIWindowManager.ShowPreviousWindow();           break;          case 200090:           ShowEditionStreamsMenu();           break;          case 200095:           ShowVideoStreamsMenu();           break;          case 200091:           ShowChapterStreamsMenu();           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {           // Add audio stream selection to be able to switch audio streams in .ts recordings         case 492:           ShowAudioStreamsMenu();           break;         case 200059:           ShowAudioDualMonoModeMenu(dualMonoMode);           break;         case 462:           ShowSubtitleStreamsMenu();           break;         case 200073:           ShowPostProcessingMenu();           break;         case 1064:           ShowBookmarksMenu();           break;         case 974: // DVD root menu           Action actionMenu = new Action(Action.ActionType.ACTION_DVD_MENU' 0' 0);           GUIGraphicsContext.OnAction(actionMenu);           break;         case 1700: // BD popup menu           Action actionPopupMenu = new Action(Action.ActionType.ACTION_BD_POPUP_MENU' 0' 0);           GUIGraphicsContext.OnAction(actionPopupMenu);           break;         case 975: // DVD previous chapter           Action actionPrevChapter = new Action(Action.ActionType.ACTION_PREV_CHAPTER' 0' 0);           GUIGraphicsContext.OnAction(actionPrevChapter);           break;         case 976: // DVD next chapter           Action actionNextChapter = new Action(Action.ActionType.ACTION_NEXT_CHAPTER' 0' 0);           GUIGraphicsContext.OnAction(actionNextChapter);           break;         case 941: // Change aspect ratio           ShowAspectRatioMenu();           break;          case 970:           // switch back to MyMovies window           _isOsdVisible = false;           GUIWindowManager.IsOsdVisible = false;           GUIGraphicsContext.IsFullScreenVideo = false;           GUIWindowManager.ShowPreviousWindow();           break;          case 200090:           ShowEditionStreamsMenu();           break;          case 200095:           ShowVideoStreamsMenu();           break;          case 200091:           ShowChapterStreamsMenu();           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {           // Add audio stream selection to be able to switch audio streams in .ts recordings         case 492:           ShowAudioStreamsMenu();           break;         case 200059:           ShowAudioDualMonoModeMenu(dualMonoMode);           break;         case 462:           ShowSubtitleStreamsMenu();           break;         case 200073:           ShowPostProcessingMenu();           break;         case 1064:           ShowBookmarksMenu();           break;         case 974: // DVD root menu           Action actionMenu = new Action(Action.ActionType.ACTION_DVD_MENU' 0' 0);           GUIGraphicsContext.OnAction(actionMenu);           break;         case 1700: // BD popup menu           Action actionPopupMenu = new Action(Action.ActionType.ACTION_BD_POPUP_MENU' 0' 0);           GUIGraphicsContext.OnAction(actionPopupMenu);           break;         case 975: // DVD previous chapter           Action actionPrevChapter = new Action(Action.ActionType.ACTION_PREV_CHAPTER' 0' 0);           GUIGraphicsContext.OnAction(actionPrevChapter);           break;         case 976: // DVD next chapter           Action actionNextChapter = new Action(Action.ActionType.ACTION_NEXT_CHAPTER' 0' 0);           GUIGraphicsContext.OnAction(actionNextChapter);           break;         case 941: // Change aspect ratio           ShowAspectRatioMenu();           break;          case 970:           // switch back to MyMovies window           _isOsdVisible = false;           GUIWindowManager.IsOsdVisible = false;           GUIGraphicsContext.IsFullScreenVideo = false;           GUIWindowManager.ShowPreviousWindow();           break;          case 200090:           ShowEditionStreamsMenu();           break;          case 200095:           ShowVideoStreamsMenu();           break;          case 200091:           ShowChapterStreamsMenu();           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {           // Add audio stream selection to be able to switch audio streams in .ts recordings         case 492:           ShowAudioStreamsMenu();           break;         case 200059:           ShowAudioDualMonoModeMenu(dualMonoMode);           break;         case 462:           ShowSubtitleStreamsMenu();           break;         case 200073:           ShowPostProcessingMenu();           break;         case 1064:           ShowBookmarksMenu();           break;         case 974: // DVD root menu           Action actionMenu = new Action(Action.ActionType.ACTION_DVD_MENU' 0' 0);           GUIGraphicsContext.OnAction(actionMenu);           break;         case 1700: // BD popup menu           Action actionPopupMenu = new Action(Action.ActionType.ACTION_BD_POPUP_MENU' 0' 0);           GUIGraphicsContext.OnAction(actionPopupMenu);           break;         case 975: // DVD previous chapter           Action actionPrevChapter = new Action(Action.ActionType.ACTION_PREV_CHAPTER' 0' 0);           GUIGraphicsContext.OnAction(actionPrevChapter);           break;         case 976: // DVD next chapter           Action actionNextChapter = new Action(Action.ActionType.ACTION_NEXT_CHAPTER' 0' 0);           GUIGraphicsContext.OnAction(actionNextChapter);           break;         case 941: // Change aspect ratio           ShowAspectRatioMenu();           break;          case 970:           // switch back to MyMovies window           _isOsdVisible = false;           GUIWindowManager.IsOsdVisible = false;           GUIGraphicsContext.IsFullScreenVideo = false;           GUIWindowManager.ShowPreviousWindow();           break;          case 200090:           ShowEditionStreamsMenu();           break;          case 200095:           ShowVideoStreamsMenu();           break;          case 200091:           ShowChapterStreamsMenu();           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {           // Add audio stream selection to be able to switch audio streams in .ts recordings         case 492:           ShowAudioStreamsMenu();           break;         case 200059:           ShowAudioDualMonoModeMenu(dualMonoMode);           break;         case 462:           ShowSubtitleStreamsMenu();           break;         case 200073:           ShowPostProcessingMenu();           break;         case 1064:           ShowBookmarksMenu();           break;         case 974: // DVD root menu           Action actionMenu = new Action(Action.ActionType.ACTION_DVD_MENU' 0' 0);           GUIGraphicsContext.OnAction(actionMenu);           break;         case 1700: // BD popup menu           Action actionPopupMenu = new Action(Action.ActionType.ACTION_BD_POPUP_MENU' 0' 0);           GUIGraphicsContext.OnAction(actionPopupMenu);           break;         case 975: // DVD previous chapter           Action actionPrevChapter = new Action(Action.ActionType.ACTION_PREV_CHAPTER' 0' 0);           GUIGraphicsContext.OnAction(actionPrevChapter);           break;         case 976: // DVD next chapter           Action actionNextChapter = new Action(Action.ActionType.ACTION_NEXT_CHAPTER' 0' 0);           GUIGraphicsContext.OnAction(actionNextChapter);           break;         case 941: // Change aspect ratio           ShowAspectRatioMenu();           break;          case 970:           // switch back to MyMovies window           _isOsdVisible = false;           GUIWindowManager.IsOsdVisible = false;           GUIGraphicsContext.IsFullScreenVideo = false;           GUIWindowManager.ShowPreviousWindow();           break;          case 200090:           ShowEditionStreamsMenu();           break;          case 200095:           ShowVideoStreamsMenu();           break;          case 200091:           ShowChapterStreamsMenu();           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {           // Add audio stream selection to be able to switch audio streams in .ts recordings         case 492:           ShowAudioStreamsMenu();           break;         case 200059:           ShowAudioDualMonoModeMenu(dualMonoMode);           break;         case 462:           ShowSubtitleStreamsMenu();           break;         case 200073:           ShowPostProcessingMenu();           break;         case 1064:           ShowBookmarksMenu();           break;         case 974: // DVD root menu           Action actionMenu = new Action(Action.ActionType.ACTION_DVD_MENU' 0' 0);           GUIGraphicsContext.OnAction(actionMenu);           break;         case 1700: // BD popup menu           Action actionPopupMenu = new Action(Action.ActionType.ACTION_BD_POPUP_MENU' 0' 0);           GUIGraphicsContext.OnAction(actionPopupMenu);           break;         case 975: // DVD previous chapter           Action actionPrevChapter = new Action(Action.ActionType.ACTION_PREV_CHAPTER' 0' 0);           GUIGraphicsContext.OnAction(actionPrevChapter);           break;         case 976: // DVD next chapter           Action actionNextChapter = new Action(Action.ActionType.ACTION_NEXT_CHAPTER' 0' 0);           GUIGraphicsContext.OnAction(actionNextChapter);           break;         case 941: // Change aspect ratio           ShowAspectRatioMenu();           break;          case 970:           // switch back to MyMovies window           _isOsdVisible = false;           GUIWindowManager.IsOsdVisible = false;           GUIGraphicsContext.IsFullScreenVideo = false;           GUIWindowManager.ShowPreviousWindow();           break;          case 200090:           ShowEditionStreamsMenu();           break;          case 200095:           ShowVideoStreamsMenu();           break;          case 200091:           ShowChapterStreamsMenu();           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {           // Add audio stream selection to be able to switch audio streams in .ts recordings         case 492:           ShowAudioStreamsMenu();           break;         case 200059:           ShowAudioDualMonoModeMenu(dualMonoMode);           break;         case 462:           ShowSubtitleStreamsMenu();           break;         case 200073:           ShowPostProcessingMenu();           break;         case 1064:           ShowBookmarksMenu();           break;         case 974: // DVD root menu           Action actionMenu = new Action(Action.ActionType.ACTION_DVD_MENU' 0' 0);           GUIGraphicsContext.OnAction(actionMenu);           break;         case 1700: // BD popup menu           Action actionPopupMenu = new Action(Action.ActionType.ACTION_BD_POPUP_MENU' 0' 0);           GUIGraphicsContext.OnAction(actionPopupMenu);           break;         case 975: // DVD previous chapter           Action actionPrevChapter = new Action(Action.ActionType.ACTION_PREV_CHAPTER' 0' 0);           GUIGraphicsContext.OnAction(actionPrevChapter);           break;         case 976: // DVD next chapter           Action actionNextChapter = new Action(Action.ActionType.ACTION_NEXT_CHAPTER' 0' 0);           GUIGraphicsContext.OnAction(actionNextChapter);           break;         case 941: // Change aspect ratio           ShowAspectRatioMenu();           break;          case 970:           // switch back to MyMovies window           _isOsdVisible = false;           GUIWindowManager.IsOsdVisible = false;           GUIGraphicsContext.IsFullScreenVideo = false;           GUIWindowManager.ShowPreviousWindow();           break;          case 200090:           ShowEditionStreamsMenu();           break;          case 200095:           ShowVideoStreamsMenu();           break;          case 200091:           ShowChapterStreamsMenu();           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {           // Add audio stream selection to be able to switch audio streams in .ts recordings         case 492:           ShowAudioStreamsMenu();           break;         case 200059:           ShowAudioDualMonoModeMenu(dualMonoMode);           break;         case 462:           ShowSubtitleStreamsMenu();           break;         case 200073:           ShowPostProcessingMenu();           break;         case 1064:           ShowBookmarksMenu();           break;         case 974: // DVD root menu           Action actionMenu = new Action(Action.ActionType.ACTION_DVD_MENU' 0' 0);           GUIGraphicsContext.OnAction(actionMenu);           break;         case 1700: // BD popup menu           Action actionPopupMenu = new Action(Action.ActionType.ACTION_BD_POPUP_MENU' 0' 0);           GUIGraphicsContext.OnAction(actionPopupMenu);           break;         case 975: // DVD previous chapter           Action actionPrevChapter = new Action(Action.ActionType.ACTION_PREV_CHAPTER' 0' 0);           GUIGraphicsContext.OnAction(actionPrevChapter);           break;         case 976: // DVD next chapter           Action actionNextChapter = new Action(Action.ActionType.ACTION_NEXT_CHAPTER' 0' 0);           GUIGraphicsContext.OnAction(actionNextChapter);           break;         case 941: // Change aspect ratio           ShowAspectRatioMenu();           break;          case 970:           // switch back to MyMovies window           _isOsdVisible = false;           GUIWindowManager.IsOsdVisible = false;           GUIGraphicsContext.IsFullScreenVideo = false;           GUIWindowManager.ShowPreviousWindow();           break;          case 200090:           ShowEditionStreamsMenu();           break;          case 200095:           ShowVideoStreamsMenu();           break;          case 200091:           ShowChapterStreamsMenu();           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {           // Add audio stream selection to be able to switch audio streams in .ts recordings         case 492:           ShowAudioStreamsMenu();           break;         case 200059:           ShowAudioDualMonoModeMenu(dualMonoMode);           break;         case 462:           ShowSubtitleStreamsMenu();           break;         case 200073:           ShowPostProcessingMenu();           break;         case 1064:           ShowBookmarksMenu();           break;         case 974: // DVD root menu           Action actionMenu = new Action(Action.ActionType.ACTION_DVD_MENU' 0' 0);           GUIGraphicsContext.OnAction(actionMenu);           break;         case 1700: // BD popup menu           Action actionPopupMenu = new Action(Action.ActionType.ACTION_BD_POPUP_MENU' 0' 0);           GUIGraphicsContext.OnAction(actionPopupMenu);           break;         case 975: // DVD previous chapter           Action actionPrevChapter = new Action(Action.ActionType.ACTION_PREV_CHAPTER' 0' 0);           GUIGraphicsContext.OnAction(actionPrevChapter);           break;         case 976: // DVD next chapter           Action actionNextChapter = new Action(Action.ActionType.ACTION_NEXT_CHAPTER' 0' 0);           GUIGraphicsContext.OnAction(actionNextChapter);           break;         case 941: // Change aspect ratio           ShowAspectRatioMenu();           break;          case 970:           // switch back to MyMovies window           _isOsdVisible = false;           GUIWindowManager.IsOsdVisible = false;           GUIGraphicsContext.IsFullScreenVideo = false;           GUIWindowManager.ShowPreviousWindow();           break;          case 200090:           ShowEditionStreamsMenu();           break;          case 200095:           ShowVideoStreamsMenu();           break;          case 200091:           ShowChapterStreamsMenu();           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowChapterStreamsMenu,The following statement contains a magic number: dlg.SetHeading(200091);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowChapterStreamsMenu,The following statement contains a magic number: dlg.Add(String.Format("{0}"' GUILocalizeStrings.Get(975)));
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowChapterStreamsMenu,The following statement contains a magic number: dlg.Add(String.Format("{0}"' GUILocalizeStrings.Get(976)));
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowChapterStreamsMenu,The following statement contains a magic number: item.Label = (String.Format("{0} #{1}"' GUILocalizeStrings.Get(200091)' (i + 1)));
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowEditionStreamsMenu,The following statement contains a magic number: dlg.SetHeading(200090);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowVideoStreamsMenu,The following statement contains a magic number: dlg.SetHeading(200095);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowAudioStreamsMenu,The following statement contains a magic number: dlg.SetHeading(492);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowAudioDualMonoModeMenu,The following statement contains a magic number: dlg.SetHeading(200059);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowAudioDualMonoModeMenu,The following statement contains a magic number: dlg.AddLocalizedString(200060);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowAudioDualMonoModeMenu,The following statement contains a magic number: dlg.AddLocalizedString(200061);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowAudioDualMonoModeMenu,The following statement contains a magic number: dlg.AddLocalizedString(200062);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowAudioDualMonoModeMenu,The following statement contains a magic number: dlg.AddLocalizedString(200063);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowSubtitleStreamsMenu,The following statement contains a magic number: dlg.SetHeading(462);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowSubtitleStreamsMenu,The following statement contains a magic number: dlg.AddLocalizedString(519);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowSubtitleStreamsMenu,The following statement contains a magic number: dlg.SelectedLabel = g_Player.CurrentSubtitleStream + 2;
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowPostProcessingMenu,The following statement contains a magic number: dlg.SetHeading(200073);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowPostProcessingMenu,The following statement contains a magic number: dlg.Add(String.Format("{0} {1}"' GUILocalizeStrings.Get(200074)'                               (engine.EnablePostProcess) ? GUILocalizeStrings.Get(461) : ""));
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowPostProcessingMenu,The following statement contains a magic number: dlg.Add(String.Format("{0} {1}"' GUILocalizeStrings.Get(200074)'                               (engine.EnablePostProcess) ? GUILocalizeStrings.Get(461) : ""));
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowPostProcessingMenu,The following statement contains a magic number: dlg.Add(String.Format("{0} {1}"' GUILocalizeStrings.Get(200075)'                               (engine.EnableResize) ? GUILocalizeStrings.Get(461) : ""));
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowPostProcessingMenu,The following statement contains a magic number: dlg.Add(String.Format("{0} {1}"' GUILocalizeStrings.Get(200075)'                               (engine.EnableResize) ? GUILocalizeStrings.Get(461) : ""));
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowPostProcessingMenu,The following statement contains a magic number: dlg.Add(String.Format("{0} {1}"' GUILocalizeStrings.Get(200078)'                               (engine.EnableCrop) ? GUILocalizeStrings.Get(461) : ""));
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowPostProcessingMenu,The following statement contains a magic number: dlg.Add(String.Format("{0} {1}"' GUILocalizeStrings.Get(200078)'                               (engine.EnableCrop) ? GUILocalizeStrings.Get(461) : ""));
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowPostProcessingMenu,The following statement contains a magic number: dlg.Add(String.Format("{0} {1}"' GUILocalizeStrings.Get(200077)'                               (engine.EnableDeinterlace) ? GUILocalizeStrings.Get(461) : ""));
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowPostProcessingMenu,The following statement contains a magic number: dlg.Add(String.Format("{0} {1}"' GUILocalizeStrings.Get(200077)'                               (engine.EnableDeinterlace) ? GUILocalizeStrings.Get(461) : ""));
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowPostProcessingMenu,The following statement contains a magic number: dlg.AddLocalizedString(970);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowPostProcessingMenu,The following statement contains a magic number: dlg.SelectedId == 970
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowPostProcessingMenu,The following statement contains a magic number: switch (dlg.SelectedLabel)         {           case 0:             engine.EnablePostProcess = !engine.EnablePostProcess;             break;           case 1:             engine.EnableResize = !engine.EnableResize;             break;           case 2:             engine.EnableCrop = !engine.EnableCrop;             break;           case 3:             engine.EnableDeinterlace = !engine.EnableDeinterlace;             break;         }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowPostProcessingMenu,The following statement contains a magic number: switch (dlg.SelectedLabel)         {           case 0:             engine.EnablePostProcess = !engine.EnablePostProcess;             break;           case 1:             engine.EnableResize = !engine.EnableResize;             break;           case 2:             engine.EnableCrop = !engine.EnableCrop;             break;           case 3:             engine.EnableDeinterlace = !engine.EnableDeinterlace;             break;         }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowAspectRatioMenu,The following statement contains a magic number: dlg.SetHeading(941);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowAspectRatioMenu,The following statement contains a magic number: dlg.AddLocalizedString(942);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowAspectRatioMenu,The following statement contains a magic number: dlg.AddLocalizedString(943);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowAspectRatioMenu,The following statement contains a magic number: dlg.AddLocalizedString(944);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowAspectRatioMenu,The following statement contains a magic number: dlg.AddLocalizedString(945);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowAspectRatioMenu,The following statement contains a magic number: dlg.AddLocalizedString(946);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowAspectRatioMenu,The following statement contains a magic number: dlg.AddLocalizedString(947);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowAspectRatioMenu,The following statement contains a magic number: dlg.AddLocalizedString(1190);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowAspectRatioMenu,The following statement contains a magic number: dlg.AddLocalizedString(1339);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowAspectRatioMenu,The following statement contains a magic number: _timeStatusShowTime = (DateTime.Now.Ticks / 10000);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowBookmarksMenu,The following statement contains a magic number: dlg.SetHeading(1064);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowBookmarksMenu,The following statement contains a magic number: dlg.AddLocalizedString(294);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowBookmarksMenu,The following statement contains a magic number: dlg.AddLocalizedString(296);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowBookmarksMenu,The following statement contains a magic number: item.Label = GUILocalizeStrings.Get(1065);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,UpdateGUI,The following statement contains a magic number: switch (iSpeed)         {           case 2:             ShowControl(GetID' (int)Control.IMG_2X);             break;           case 4:             ShowControl(GetID' (int)Control.IMG_4X);             break;           case 8:             ShowControl(GetID' (int)Control.IMG_8X);             break;           case 16:             ShowControl(GetID' (int)Control.IMG_16X);             break;           case 32:             ShowControl(GetID' (int)Control.IMG_32X);             break;           case -2:             ShowControl(GetID' (int)Control.IMG_MIN2X);             break;           case -4:             ShowControl(GetID' (int)Control.IMG_MIN4X);             break;           case -8:             ShowControl(GetID' (int)Control.IMG_MIN8X);             break;           case -16:             ShowControl(GetID' (int)Control.IMG_MIN16X);             break;           case -32:             ShowControl(GetID' (int)Control.IMG_MIN32X);             break;         }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,UpdateGUI,The following statement contains a magic number: switch (iSpeed)         {           case 2:             ShowControl(GetID' (int)Control.IMG_2X);             break;           case 4:             ShowControl(GetID' (int)Control.IMG_4X);             break;           case 8:             ShowControl(GetID' (int)Control.IMG_8X);             break;           case 16:             ShowControl(GetID' (int)Control.IMG_16X);             break;           case 32:             ShowControl(GetID' (int)Control.IMG_32X);             break;           case -2:             ShowControl(GetID' (int)Control.IMG_MIN2X);             break;           case -4:             ShowControl(GetID' (int)Control.IMG_MIN4X);             break;           case -8:             ShowControl(GetID' (int)Control.IMG_MIN8X);             break;           case -16:             ShowControl(GetID' (int)Control.IMG_MIN16X);             break;           case -32:             ShowControl(GetID' (int)Control.IMG_MIN32X);             break;         }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,UpdateGUI,The following statement contains a magic number: switch (iSpeed)         {           case 2:             ShowControl(GetID' (int)Control.IMG_2X);             break;           case 4:             ShowControl(GetID' (int)Control.IMG_4X);             break;           case 8:             ShowControl(GetID' (int)Control.IMG_8X);             break;           case 16:             ShowControl(GetID' (int)Control.IMG_16X);             break;           case 32:             ShowControl(GetID' (int)Control.IMG_32X);             break;           case -2:             ShowControl(GetID' (int)Control.IMG_MIN2X);             break;           case -4:             ShowControl(GetID' (int)Control.IMG_MIN4X);             break;           case -8:             ShowControl(GetID' (int)Control.IMG_MIN8X);             break;           case -16:             ShowControl(GetID' (int)Control.IMG_MIN16X);             break;           case -32:             ShowControl(GetID' (int)Control.IMG_MIN32X);             break;         }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,UpdateGUI,The following statement contains a magic number: switch (iSpeed)         {           case 2:             ShowControl(GetID' (int)Control.IMG_2X);             break;           case 4:             ShowControl(GetID' (int)Control.IMG_4X);             break;           case 8:             ShowControl(GetID' (int)Control.IMG_8X);             break;           case 16:             ShowControl(GetID' (int)Control.IMG_16X);             break;           case 32:             ShowControl(GetID' (int)Control.IMG_32X);             break;           case -2:             ShowControl(GetID' (int)Control.IMG_MIN2X);             break;           case -4:             ShowControl(GetID' (int)Control.IMG_MIN4X);             break;           case -8:             ShowControl(GetID' (int)Control.IMG_MIN8X);             break;           case -16:             ShowControl(GetID' (int)Control.IMG_MIN16X);             break;           case -32:             ShowControl(GetID' (int)Control.IMG_MIN32X);             break;         }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,UpdateGUI,The following statement contains a magic number: switch (iSpeed)         {           case 2:             ShowControl(GetID' (int)Control.IMG_2X);             break;           case 4:             ShowControl(GetID' (int)Control.IMG_4X);             break;           case 8:             ShowControl(GetID' (int)Control.IMG_8X);             break;           case 16:             ShowControl(GetID' (int)Control.IMG_16X);             break;           case 32:             ShowControl(GetID' (int)Control.IMG_32X);             break;           case -2:             ShowControl(GetID' (int)Control.IMG_MIN2X);             break;           case -4:             ShowControl(GetID' (int)Control.IMG_MIN4X);             break;           case -8:             ShowControl(GetID' (int)Control.IMG_MIN8X);             break;           case -16:             ShowControl(GetID' (int)Control.IMG_MIN16X);             break;           case -32:             ShowControl(GetID' (int)Control.IMG_MIN32X);             break;         }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,UpdateGUI,The following statement contains a magic number: switch (iSpeed)         {           case 2:             ShowControl(GetID' (int)Control.IMG_2X);             break;           case 4:             ShowControl(GetID' (int)Control.IMG_4X);             break;           case 8:             ShowControl(GetID' (int)Control.IMG_8X);             break;           case 16:             ShowControl(GetID' (int)Control.IMG_16X);             break;           case 32:             ShowControl(GetID' (int)Control.IMG_32X);             break;           case -2:             ShowControl(GetID' (int)Control.IMG_MIN2X);             break;           case -4:             ShowControl(GetID' (int)Control.IMG_MIN4X);             break;           case -8:             ShowControl(GetID' (int)Control.IMG_MIN8X);             break;           case -16:             ShowControl(GetID' (int)Control.IMG_MIN16X);             break;           case -32:             ShowControl(GetID' (int)Control.IMG_MIN32X);             break;         }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,UpdateGUI,The following statement contains a magic number: switch (iSpeed)         {           case 2:             ShowControl(GetID' (int)Control.IMG_2X);             break;           case 4:             ShowControl(GetID' (int)Control.IMG_4X);             break;           case 8:             ShowControl(GetID' (int)Control.IMG_8X);             break;           case 16:             ShowControl(GetID' (int)Control.IMG_16X);             break;           case 32:             ShowControl(GetID' (int)Control.IMG_32X);             break;           case -2:             ShowControl(GetID' (int)Control.IMG_MIN2X);             break;           case -4:             ShowControl(GetID' (int)Control.IMG_MIN4X);             break;           case -8:             ShowControl(GetID' (int)Control.IMG_MIN8X);             break;           case -16:             ShowControl(GetID' (int)Control.IMG_MIN16X);             break;           case -32:             ShowControl(GetID' (int)Control.IMG_MIN32X);             break;         }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,UpdateGUI,The following statement contains a magic number: switch (iSpeed)         {           case 2:             ShowControl(GetID' (int)Control.IMG_2X);             break;           case 4:             ShowControl(GetID' (int)Control.IMG_4X);             break;           case 8:             ShowControl(GetID' (int)Control.IMG_8X);             break;           case 16:             ShowControl(GetID' (int)Control.IMG_16X);             break;           case 32:             ShowControl(GetID' (int)Control.IMG_32X);             break;           case -2:             ShowControl(GetID' (int)Control.IMG_MIN2X);             break;           case -4:             ShowControl(GetID' (int)Control.IMG_MIN4X);             break;           case -8:             ShowControl(GetID' (int)Control.IMG_MIN8X);             break;           case -16:             ShowControl(GetID' (int)Control.IMG_MIN16X);             break;           case -32:             ShowControl(GetID' (int)Control.IMG_MIN32X);             break;         }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,UpdateGUI,The following statement contains a magic number: switch (iSpeed)         {           case 2:             ShowControl(GetID' (int)Control.IMG_2X);             break;           case 4:             ShowControl(GetID' (int)Control.IMG_4X);             break;           case 8:             ShowControl(GetID' (int)Control.IMG_8X);             break;           case 16:             ShowControl(GetID' (int)Control.IMG_16X);             break;           case 32:             ShowControl(GetID' (int)Control.IMG_32X);             break;           case -2:             ShowControl(GetID' (int)Control.IMG_MIN2X);             break;           case -4:             ShowControl(GetID' (int)Control.IMG_MIN4X);             break;           case -8:             ShowControl(GetID' (int)Control.IMG_MIN8X);             break;           case -16:             ShowControl(GetID' (int)Control.IMG_MIN16X);             break;           case -32:             ShowControl(GetID' (int)Control.IMG_MIN32X);             break;         }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,UpdateGUI,The following statement contains a magic number: switch (iSpeed)         {           case 2:             ShowControl(GetID' (int)Control.IMG_2X);             break;           case 4:             ShowControl(GetID' (int)Control.IMG_4X);             break;           case 8:             ShowControl(GetID' (int)Control.IMG_8X);             break;           case 16:             ShowControl(GetID' (int)Control.IMG_16X);             break;           case 32:             ShowControl(GetID' (int)Control.IMG_32X);             break;           case -2:             ShowControl(GetID' (int)Control.IMG_MIN2X);             break;           case -4:             ShowControl(GetID' (int)Control.IMG_MIN4X);             break;           case -8:             ShowControl(GetID' (int)Control.IMG_MIN8X);             break;           case -16:             ShowControl(GetID' (int)Control.IMG_MIN16X);             break;           case -32:             ShowControl(GetID' (int)Control.IMG_MIN32X);             break;         }
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,CheckTimeOuts,The following statement contains a magic number: ts.TotalSeconds >= 3 && !VolumeHandler.Instance.IsMuted
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,CheckTimeOuts,The following statement contains a magic number: long lTimeSpan = ((DateTime.Now.Ticks / 10000) - _timeStatusShowTime);
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,CheckTimeOuts,The following statement contains a magic number: lTimeSpan >= 3000
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,CheckTimeOuts,The following statement contains a magic number: lTimeSpan.TotalMilliseconds >= 2500
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ChangetheTimeCode,The following statement contains a magic number: _timeCodePosition == 2
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ChangetheTimeCode,The following statement contains a magic number: _timeCodePosition <= 4
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ChangetheTimeCode,The following statement contains a magic number: ih = (_timeStamp[0] - (char)'0') * 10;
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ChangetheTimeCode,The following statement contains a magic number: im = (_timeStamp[3] - (char)'0') * 10;
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ChangetheTimeCode,The following statement contains a magic number: im = (_timeStamp[3] - (char)'0') * 10;
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ChangetheTimeCode,The following statement contains a magic number: im += (_timeStamp[4] - (char)'0');
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ChangetheTimeCode,The following statement contains a magic number: im *= 60;
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ChangetheTimeCode,The following statement contains a magic number: ih *= 3600;
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ChangetheTimeCode,The following statement contains a magic number: _timeCodePosition > 4
Magic Number,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,GetPercentage,The following statement contains a magic number: return (x - cntl.XPosition - SKIPBAR_PADDING) / (cntl.Width - 2 * SKIPBAR_PADDING);
Magic Number,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,OnMessage,The following statement contains a magic number: switch (message.Message)       {         case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT: // fired when OSD is hidden           {             //if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(true);             // following line should stay. Problems with OSD not             // appearing are already fixed elsewhere             //for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)             //{             //  HideControl(GetID' i);             //}             Dispose();             GUIPropertyManager.SetProperty("#currentmodule"' GUIWindowManager.GetWindow(message.Param1).GetModuleName());             return true;           }         case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT: // fired when OSD is shown           {             // following line should stay. Problems with OSD not             // appearing are already fixed elsewhere             GUIPropertyManager.SetProperty("#currentmodule"' GetModuleName());              AllocResources();             // if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(false);             ResetAllControls(); // make sure the controls are positioned relevant to the OSD Y offset             isSubMenuVisible = false;             m_iActiveMenuButtonID = 0;             m_iActiveMenu = 0;             m_bNeedRefresh = false;             Reset();             FocusControl(GetID' (int)Controls.OSD_PLAY' 0); // set focus to play button by default when window is shown             QueueAnimation(AnimationType.WindowOpen);             for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)             {               ShowControl(GetID' i);             }             if (g_Player.Paused)             {               ToggleButton((int)Controls.OSD_PLAY' true);               // make sure play button is down (so it shows the pause symbol)             }             else             {               ToggleButton((int)Controls.OSD_PLAY' false); // make sure play button is up (so it shows the play symbol)             }             m_delayInterval = MediaPortal.Player.Subtitles.SubEngine.GetInstance().DelayInterval;             if (m_delayInterval > 0)               m_subtitleDelay = MediaPortal.Player.Subtitles.SubEngine.GetInstance().Delay / m_delayInterval;             if (g_Player.HasPostprocessing)             {               m_delayIntervalAudio = PostProcessingEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = PostProcessingEngine.GetInstance().AudioDelay/m_delayIntervalAudio;               }             }             else if (g_Player.HasAudioEngine)             {               m_delayIntervalAudio = AudioPostEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = AudioPostEngine.GetInstance().AudioDelay/m_delayIntervalAudio;               }             }              g_Player.UpdateMediaInfoProperties();             GUIPropertyManager.SetProperty("#TV.View.HasTeletext"' "False");             return true;           }          case GUIMessage.MessageType.GUI_MSG_SETFOCUS:           goto case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS;          case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS:           {             if (message.SenderControlId == 13)             {               return true;             }           }           break;          case GUIMessage.MessageType.GUI_MSG_CLICKED:           {             int iControl = message.SenderControlId; // get the ID of the control sending us a message              if (iControl >= (int)Controls.OSD_VOLUMESLIDER)               // one of the settings (sub menu) controls is sending us a message             {               Handle_ControlSetting(iControl' message.Param1);             }              if (iControl == (int)Controls.OSD_PAUSE)             {               if (g_Player.Paused)               {                 ToggleButton((int)Controls.OSD_PLAY' true);                 // make sure play button is down (so it shows the pause symbol)                                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_PLAY' false);                 // make sure play button is up (so it shows the play symbol)                 if (g_Player.Speed < 1) // are we not playing back at normal speed                 {                   ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                   ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 }                 else                 {                   ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                   if (g_Player.Speed == 1)                   {                     ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                   }                 }               }             }              if (iControl == (int)Controls.OSD_PLAY)             {               //TODO               int iSpeed = g_Player.Speed;               if (iSpeed != 1) // we're in ffwd or rewind mode               {                 g_Player.Speed = 1; // drop back to single speed                 ToggleButton((int)Controls.OSD_REWIND' false); // pop all the relevant                 ToggleButton((int)Controls.OSD_FFWD' false); // buttons back to                 ToggleButton((int)Controls.OSD_PLAY' false); // their up state               }               else               {                 g_Player.Pause(); // Pause/Un-Pause playback                 if (g_Player.Paused)                 {                   ToggleButton((int)Controls.OSD_PLAY' true);                   // make sure play button is down (so it shows the pause symbol)                 }                 else                 {                   ToggleButton((int)Controls.OSD_PLAY' false);                   // make sure play button is up (so it shows the play symbol)                 }               }             }              if (iControl == (int)Controls.OSD_STOP)             {               if (isSubMenuVisible) // sub menu currently active ?               {                 FocusControl(GetID' m_iActiveMenuButtonID' 0); // set focus to last menu button                 ToggleSubMenu(0' m_iActiveMenu); // hide the currently active sub-menu               }               //g_application.m_guiWindowFullScreen.m_bOSDVisible = false;	// toggle the OSD off so parent window can de-init               Log.Info("GUIVideoOSD:stop");               g_Player.Stop(); // close our media               //GUIWindowManager.ShowPreviousWindow();							// go back to the previous window             }              if (iControl == (int)Controls.OSD_REWIND)             {               if (g_Player.Paused)               {                 g_Player.Pause(); // Unpause playback               }                if (g_Player.Speed < 1) // are we not playing back at normal speed               {                 ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                 if (g_Player.Speed == 1)                 {                   ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 }               }             }              if (iControl == (int)Controls.OSD_FFWD)             {               if (g_Player.Paused)               {                 g_Player.Pause(); // Unpause playback               }                if (g_Player.Speed > 1) // are we not playing back at normal speed               {                 ToggleButton((int)Controls.OSD_FFWD' true); // make sure out button is in the down position                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 if (g_Player.Speed == 1)                 {                   ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                 }               }             }              if (iControl == (int)Controls.OSD_SKIPBWD)             {               if (g_Player.IsDVD && g_Player.Playing)               {                 Action actionPrevChapter = new Action(Action.ActionType.ACTION_PREV_CHAPTER' 0' 0);                 GUIGraphicsContext.OnAction(actionPrevChapter);               }               else               {                 playlistPlayer.PlayPrevious();               }               ToggleButton((int)Controls.OSD_SKIPBWD' false); // pop the button back to it's up state               return true;             }              if (iControl == (int)Controls.OSD_SKIPFWD)             {               if (g_Player.IsDVD && g_Player.Playing)               {                 Action actionPrevChapter = new Action(Action.ActionType.ACTION_NEXT_CHAPTER' 0' 0);                 GUIGraphicsContext.OnAction(actionPrevChapter);               }               else               {                 playlistPlayer.PlayNext();               }               ToggleButton((int)Controls.OSD_SKIPFWD' false); // pop the button back to it's up state               return true;             }              if (iControl == (int)Controls.OSD_MUTE)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VOL); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 int iValue = g_Player.Volume;                 GUISliderControl pSlider = GetControl((int)Controls.OSD_VOLUMESLIDER) as GUISliderControl;                 if (null != pSlider)                 {                   pSlider.Percentage = iValue; // Update our volume slider accordingly ...                 }                 ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER); // show the volume control                 ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER_LABEL);                 FocusControl(GetID' (int)Controls.OSD_VOLUMESLIDER' 0); // set focus to it               }               else // sub menu is off               {                 FocusControl(GetID' (int)Controls.OSD_MUTE' 0); // set focus to the mute button               }             }              if (iControl == (int)Controls.OSD_SUBTITLES)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_SUBTITLES); // hide or show the sub-menu               if (isSubMenuVisible)               {                 // set the controls values                 GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_SUBTITLE_DELAY);                 pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                 pControl.FloatInterval = 1;                 pControl.SetRange(-50' 50);                 SetSliderValue(-50' 50' m_subtitleDelay' (int)Controls.OSD_SUBTITLE_DELAY);                 SetCheckmarkValue(g_Player.EnableSubtitle' (int)Controls.OSD_SUBTITLE_ONOFF);                 SetCheckmarkValue(!g_Player.EnableForcedSubtitle' (int)Controls.OSD_SUBTITLE_FORCED_ONOFF);                 // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY_LABEL);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_ONOFF);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_FORCED_ONOFF);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_LIST);                  FocusControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY' 0);                 // set focus to the first control in our group                 PopulateSubTitles(); // populate the list control with subtitles for this video               }             }              if (iControl == (int)Controls.OSD_BOOKMARKS)             {               GUIVideoFullscreen videoWindow = (GUIVideoFullscreen)GUIWindowManager.GetWindow((int)Window.WINDOW_FULLSCREEN_VIDEO);               videoWindow.ShowBookmarksMenu();               ToggleButton((int)Controls.OSD_BOOKMARKS' false);             }              if (iControl == (int)Controls.OSD_VIDEO)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VIDEO); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 // set the controls values                 float fPercent = (float)(100 * (g_Player.CurrentPosition / g_Player.Duration));                 SetSliderValue(0.0f' 100.0f' (float)fPercent' (int)Controls.OSD_VIDEOPOS);                  bool hasPostProc = g_Player.HasPostprocessing;                 if (hasPostProc)                 {                   IPostProcessingEngine engine = PostProcessingEngine.GetInstance();                   SetCheckmarkValue(engine.EnablePostProcess' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    SetCheckmarkValue(engine.EnableResize' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    SetCheckmarkValue(engine.EnableCrop' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    SetCheckmarkValue(engine.EnableDeinterlace' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    UpdatePostProcessing();                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL_LABEL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL_LABEL);                 }                  //SetCheckmarkValue(g_stSettings.m_bNonInterleaved' Controls.OSD_NONINTERLEAVED);                 //SetCheckmarkValue(g_stSettings.m_bNoCache' Controls.OSD_NOCACHE);                 //SetCheckmarkValue(g_stSettings.m_bFrameRateConversions' Controls.OSD_ADJFRAMERATE);                  UpdateGammaContrastBrightness();                 // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_VIDEOPOS);                 ShowControl(GetID' (int)Controls.OSD_VIDEOPOS_LABEL);                 ShowControl(GetID' (int)Controls.OSD_NONINTERLEAVED);                 ShowControl(GetID' (int)Controls.OSD_NOCACHE);                 ShowControl(GetID' (int)Controls.OSD_ADJFRAMERATE);                 ShowControl(GetID' (int)Controls.OSD_SATURATIONLABEL);                 ShowControl(GetID' (int)Controls.OSD_SATURATION);                 ShowControl(GetID' (int)Controls.OSD_SHARPNESSLABEL);                 ShowControl(GetID' (int)Controls.OSD_SHARPNESS);                 ShowControl(GetID' (int)Controls.OSD_BRIGHTNESS);                 ShowControl(GetID' (int)Controls.OSD_BRIGHTNESSLABEL);                 ShowControl(GetID' (int)Controls.OSD_CONTRAST);                 ShowControl(GetID' (int)Controls.OSD_CONTRASTLABEL);                 ShowControl(GetID' (int)Controls.OSD_GAMMA);                 ShowControl(GetID' (int)Controls.OSD_GAMMALABEL);                 FocusControl(GetID' (int)Controls.OSD_VIDEOPOS' 0); // set focus to the first control in our group               }             }              if (iControl == (int)Controls.OSD_AUDIO)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_AUDIO); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 int iValue = g_Player.Volume;                 GUISliderControl pSlider = GetControl((int)Controls.OSD_AUDIOVOLUMESLIDER) as GUISliderControl;                 if (null != pSlider)                 {                   pSlider.Percentage = iValue; // Update our volume slider accordingly ...                 }                  // set the controls values                 GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_AVDELAY);                 pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                 pControl.SetRange(-20' 20);                 SetSliderValue(-20' 20' m_audioDelay' (int)Controls.OSD_AVDELAY);                  bool hasPostProc = (g_Player.HasPostprocessing || g_Player.HasAudioEngine);                 if (hasPostProc)                 {                   GUIPropertyManager.SetProperty("#VideoOSD.AudioVideoDelayPossible"' "true");                   pControl.FloatInterval = 1;                 }                 else                 {                    GUIPropertyManager.SetProperty("#VideoOSD.AudioVideoDelayPossible"' "false");                   pControl.FloatValue = 0;                   m_audioDelay = 0;                   pControl.FloatInterval = 0;                 }                  // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_AVDELAY);                 ShowControl(GetID' (int)Controls.OSD_AVDELAY_LABEL);                 ShowControl(GetID' (int)Controls.OSD_AUDIOSTREAM_LIST);                 ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER);                 ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER_LABEL);                  FocusControl(GetID' (int)Controls.OSD_AVDELAY' 0); // set focus to the first control in our group                 PopulateAudioStreams(); // populate the list control with audio streams for this video               }             }              return true;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,OnMessage,The following statement contains a magic number: switch (message.Message)       {         case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT: // fired when OSD is hidden           {             //if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(true);             // following line should stay. Problems with OSD not             // appearing are already fixed elsewhere             //for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)             //{             //  HideControl(GetID' i);             //}             Dispose();             GUIPropertyManager.SetProperty("#currentmodule"' GUIWindowManager.GetWindow(message.Param1).GetModuleName());             return true;           }         case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT: // fired when OSD is shown           {             // following line should stay. Problems with OSD not             // appearing are already fixed elsewhere             GUIPropertyManager.SetProperty("#currentmodule"' GetModuleName());              AllocResources();             // if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(false);             ResetAllControls(); // make sure the controls are positioned relevant to the OSD Y offset             isSubMenuVisible = false;             m_iActiveMenuButtonID = 0;             m_iActiveMenu = 0;             m_bNeedRefresh = false;             Reset();             FocusControl(GetID' (int)Controls.OSD_PLAY' 0); // set focus to play button by default when window is shown             QueueAnimation(AnimationType.WindowOpen);             for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)             {               ShowControl(GetID' i);             }             if (g_Player.Paused)             {               ToggleButton((int)Controls.OSD_PLAY' true);               // make sure play button is down (so it shows the pause symbol)             }             else             {               ToggleButton((int)Controls.OSD_PLAY' false); // make sure play button is up (so it shows the play symbol)             }             m_delayInterval = MediaPortal.Player.Subtitles.SubEngine.GetInstance().DelayInterval;             if (m_delayInterval > 0)               m_subtitleDelay = MediaPortal.Player.Subtitles.SubEngine.GetInstance().Delay / m_delayInterval;             if (g_Player.HasPostprocessing)             {               m_delayIntervalAudio = PostProcessingEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = PostProcessingEngine.GetInstance().AudioDelay/m_delayIntervalAudio;               }             }             else if (g_Player.HasAudioEngine)             {               m_delayIntervalAudio = AudioPostEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = AudioPostEngine.GetInstance().AudioDelay/m_delayIntervalAudio;               }             }              g_Player.UpdateMediaInfoProperties();             GUIPropertyManager.SetProperty("#TV.View.HasTeletext"' "False");             return true;           }          case GUIMessage.MessageType.GUI_MSG_SETFOCUS:           goto case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS;          case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS:           {             if (message.SenderControlId == 13)             {               return true;             }           }           break;          case GUIMessage.MessageType.GUI_MSG_CLICKED:           {             int iControl = message.SenderControlId; // get the ID of the control sending us a message              if (iControl >= (int)Controls.OSD_VOLUMESLIDER)               // one of the settings (sub menu) controls is sending us a message             {               Handle_ControlSetting(iControl' message.Param1);             }              if (iControl == (int)Controls.OSD_PAUSE)             {               if (g_Player.Paused)               {                 ToggleButton((int)Controls.OSD_PLAY' true);                 // make sure play button is down (so it shows the pause symbol)                                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_PLAY' false);                 // make sure play button is up (so it shows the play symbol)                 if (g_Player.Speed < 1) // are we not playing back at normal speed                 {                   ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                   ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 }                 else                 {                   ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                   if (g_Player.Speed == 1)                   {                     ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                   }                 }               }             }              if (iControl == (int)Controls.OSD_PLAY)             {               //TODO               int iSpeed = g_Player.Speed;               if (iSpeed != 1) // we're in ffwd or rewind mode               {                 g_Player.Speed = 1; // drop back to single speed                 ToggleButton((int)Controls.OSD_REWIND' false); // pop all the relevant                 ToggleButton((int)Controls.OSD_FFWD' false); // buttons back to                 ToggleButton((int)Controls.OSD_PLAY' false); // their up state               }               else               {                 g_Player.Pause(); // Pause/Un-Pause playback                 if (g_Player.Paused)                 {                   ToggleButton((int)Controls.OSD_PLAY' true);                   // make sure play button is down (so it shows the pause symbol)                 }                 else                 {                   ToggleButton((int)Controls.OSD_PLAY' false);                   // make sure play button is up (so it shows the play symbol)                 }               }             }              if (iControl == (int)Controls.OSD_STOP)             {               if (isSubMenuVisible) // sub menu currently active ?               {                 FocusControl(GetID' m_iActiveMenuButtonID' 0); // set focus to last menu button                 ToggleSubMenu(0' m_iActiveMenu); // hide the currently active sub-menu               }               //g_application.m_guiWindowFullScreen.m_bOSDVisible = false;	// toggle the OSD off so parent window can de-init               Log.Info("GUIVideoOSD:stop");               g_Player.Stop(); // close our media               //GUIWindowManager.ShowPreviousWindow();							// go back to the previous window             }              if (iControl == (int)Controls.OSD_REWIND)             {               if (g_Player.Paused)               {                 g_Player.Pause(); // Unpause playback               }                if (g_Player.Speed < 1) // are we not playing back at normal speed               {                 ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                 if (g_Player.Speed == 1)                 {                   ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 }               }             }              if (iControl == (int)Controls.OSD_FFWD)             {               if (g_Player.Paused)               {                 g_Player.Pause(); // Unpause playback               }                if (g_Player.Speed > 1) // are we not playing back at normal speed               {                 ToggleButton((int)Controls.OSD_FFWD' true); // make sure out button is in the down position                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 if (g_Player.Speed == 1)                 {                   ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                 }               }             }              if (iControl == (int)Controls.OSD_SKIPBWD)             {               if (g_Player.IsDVD && g_Player.Playing)               {                 Action actionPrevChapter = new Action(Action.ActionType.ACTION_PREV_CHAPTER' 0' 0);                 GUIGraphicsContext.OnAction(actionPrevChapter);               }               else               {                 playlistPlayer.PlayPrevious();               }               ToggleButton((int)Controls.OSD_SKIPBWD' false); // pop the button back to it's up state               return true;             }              if (iControl == (int)Controls.OSD_SKIPFWD)             {               if (g_Player.IsDVD && g_Player.Playing)               {                 Action actionPrevChapter = new Action(Action.ActionType.ACTION_NEXT_CHAPTER' 0' 0);                 GUIGraphicsContext.OnAction(actionPrevChapter);               }               else               {                 playlistPlayer.PlayNext();               }               ToggleButton((int)Controls.OSD_SKIPFWD' false); // pop the button back to it's up state               return true;             }              if (iControl == (int)Controls.OSD_MUTE)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VOL); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 int iValue = g_Player.Volume;                 GUISliderControl pSlider = GetControl((int)Controls.OSD_VOLUMESLIDER) as GUISliderControl;                 if (null != pSlider)                 {                   pSlider.Percentage = iValue; // Update our volume slider accordingly ...                 }                 ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER); // show the volume control                 ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER_LABEL);                 FocusControl(GetID' (int)Controls.OSD_VOLUMESLIDER' 0); // set focus to it               }               else // sub menu is off               {                 FocusControl(GetID' (int)Controls.OSD_MUTE' 0); // set focus to the mute button               }             }              if (iControl == (int)Controls.OSD_SUBTITLES)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_SUBTITLES); // hide or show the sub-menu               if (isSubMenuVisible)               {                 // set the controls values                 GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_SUBTITLE_DELAY);                 pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                 pControl.FloatInterval = 1;                 pControl.SetRange(-50' 50);                 SetSliderValue(-50' 50' m_subtitleDelay' (int)Controls.OSD_SUBTITLE_DELAY);                 SetCheckmarkValue(g_Player.EnableSubtitle' (int)Controls.OSD_SUBTITLE_ONOFF);                 SetCheckmarkValue(!g_Player.EnableForcedSubtitle' (int)Controls.OSD_SUBTITLE_FORCED_ONOFF);                 // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY_LABEL);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_ONOFF);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_FORCED_ONOFF);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_LIST);                  FocusControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY' 0);                 // set focus to the first control in our group                 PopulateSubTitles(); // populate the list control with subtitles for this video               }             }              if (iControl == (int)Controls.OSD_BOOKMARKS)             {               GUIVideoFullscreen videoWindow = (GUIVideoFullscreen)GUIWindowManager.GetWindow((int)Window.WINDOW_FULLSCREEN_VIDEO);               videoWindow.ShowBookmarksMenu();               ToggleButton((int)Controls.OSD_BOOKMARKS' false);             }              if (iControl == (int)Controls.OSD_VIDEO)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VIDEO); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 // set the controls values                 float fPercent = (float)(100 * (g_Player.CurrentPosition / g_Player.Duration));                 SetSliderValue(0.0f' 100.0f' (float)fPercent' (int)Controls.OSD_VIDEOPOS);                  bool hasPostProc = g_Player.HasPostprocessing;                 if (hasPostProc)                 {                   IPostProcessingEngine engine = PostProcessingEngine.GetInstance();                   SetCheckmarkValue(engine.EnablePostProcess' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    SetCheckmarkValue(engine.EnableResize' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    SetCheckmarkValue(engine.EnableCrop' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    SetCheckmarkValue(engine.EnableDeinterlace' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    UpdatePostProcessing();                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL_LABEL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL_LABEL);                 }                  //SetCheckmarkValue(g_stSettings.m_bNonInterleaved' Controls.OSD_NONINTERLEAVED);                 //SetCheckmarkValue(g_stSettings.m_bNoCache' Controls.OSD_NOCACHE);                 //SetCheckmarkValue(g_stSettings.m_bFrameRateConversions' Controls.OSD_ADJFRAMERATE);                  UpdateGammaContrastBrightness();                 // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_VIDEOPOS);                 ShowControl(GetID' (int)Controls.OSD_VIDEOPOS_LABEL);                 ShowControl(GetID' (int)Controls.OSD_NONINTERLEAVED);                 ShowControl(GetID' (int)Controls.OSD_NOCACHE);                 ShowControl(GetID' (int)Controls.OSD_ADJFRAMERATE);                 ShowControl(GetID' (int)Controls.OSD_SATURATIONLABEL);                 ShowControl(GetID' (int)Controls.OSD_SATURATION);                 ShowControl(GetID' (int)Controls.OSD_SHARPNESSLABEL);                 ShowControl(GetID' (int)Controls.OSD_SHARPNESS);                 ShowControl(GetID' (int)Controls.OSD_BRIGHTNESS);                 ShowControl(GetID' (int)Controls.OSD_BRIGHTNESSLABEL);                 ShowControl(GetID' (int)Controls.OSD_CONTRAST);                 ShowControl(GetID' (int)Controls.OSD_CONTRASTLABEL);                 ShowControl(GetID' (int)Controls.OSD_GAMMA);                 ShowControl(GetID' (int)Controls.OSD_GAMMALABEL);                 FocusControl(GetID' (int)Controls.OSD_VIDEOPOS' 0); // set focus to the first control in our group               }             }              if (iControl == (int)Controls.OSD_AUDIO)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_AUDIO); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 int iValue = g_Player.Volume;                 GUISliderControl pSlider = GetControl((int)Controls.OSD_AUDIOVOLUMESLIDER) as GUISliderControl;                 if (null != pSlider)                 {                   pSlider.Percentage = iValue; // Update our volume slider accordingly ...                 }                  // set the controls values                 GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_AVDELAY);                 pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                 pControl.SetRange(-20' 20);                 SetSliderValue(-20' 20' m_audioDelay' (int)Controls.OSD_AVDELAY);                  bool hasPostProc = (g_Player.HasPostprocessing || g_Player.HasAudioEngine);                 if (hasPostProc)                 {                   GUIPropertyManager.SetProperty("#VideoOSD.AudioVideoDelayPossible"' "true");                   pControl.FloatInterval = 1;                 }                 else                 {                    GUIPropertyManager.SetProperty("#VideoOSD.AudioVideoDelayPossible"' "false");                   pControl.FloatValue = 0;                   m_audioDelay = 0;                   pControl.FloatInterval = 0;                 }                  // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_AVDELAY);                 ShowControl(GetID' (int)Controls.OSD_AVDELAY_LABEL);                 ShowControl(GetID' (int)Controls.OSD_AUDIOSTREAM_LIST);                 ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER);                 ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER_LABEL);                  FocusControl(GetID' (int)Controls.OSD_AVDELAY' 0); // set focus to the first control in our group                 PopulateAudioStreams(); // populate the list control with audio streams for this video               }             }              return true;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,OnMessage,The following statement contains a magic number: switch (message.Message)       {         case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT: // fired when OSD is hidden           {             //if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(true);             // following line should stay. Problems with OSD not             // appearing are already fixed elsewhere             //for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)             //{             //  HideControl(GetID' i);             //}             Dispose();             GUIPropertyManager.SetProperty("#currentmodule"' GUIWindowManager.GetWindow(message.Param1).GetModuleName());             return true;           }         case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT: // fired when OSD is shown           {             // following line should stay. Problems with OSD not             // appearing are already fixed elsewhere             GUIPropertyManager.SetProperty("#currentmodule"' GetModuleName());              AllocResources();             // if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(false);             ResetAllControls(); // make sure the controls are positioned relevant to the OSD Y offset             isSubMenuVisible = false;             m_iActiveMenuButtonID = 0;             m_iActiveMenu = 0;             m_bNeedRefresh = false;             Reset();             FocusControl(GetID' (int)Controls.OSD_PLAY' 0); // set focus to play button by default when window is shown             QueueAnimation(AnimationType.WindowOpen);             for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)             {               ShowControl(GetID' i);             }             if (g_Player.Paused)             {               ToggleButton((int)Controls.OSD_PLAY' true);               // make sure play button is down (so it shows the pause symbol)             }             else             {               ToggleButton((int)Controls.OSD_PLAY' false); // make sure play button is up (so it shows the play symbol)             }             m_delayInterval = MediaPortal.Player.Subtitles.SubEngine.GetInstance().DelayInterval;             if (m_delayInterval > 0)               m_subtitleDelay = MediaPortal.Player.Subtitles.SubEngine.GetInstance().Delay / m_delayInterval;             if (g_Player.HasPostprocessing)             {               m_delayIntervalAudio = PostProcessingEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = PostProcessingEngine.GetInstance().AudioDelay/m_delayIntervalAudio;               }             }             else if (g_Player.HasAudioEngine)             {               m_delayIntervalAudio = AudioPostEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = AudioPostEngine.GetInstance().AudioDelay/m_delayIntervalAudio;               }             }              g_Player.UpdateMediaInfoProperties();             GUIPropertyManager.SetProperty("#TV.View.HasTeletext"' "False");             return true;           }          case GUIMessage.MessageType.GUI_MSG_SETFOCUS:           goto case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS;          case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS:           {             if (message.SenderControlId == 13)             {               return true;             }           }           break;          case GUIMessage.MessageType.GUI_MSG_CLICKED:           {             int iControl = message.SenderControlId; // get the ID of the control sending us a message              if (iControl >= (int)Controls.OSD_VOLUMESLIDER)               // one of the settings (sub menu) controls is sending us a message             {               Handle_ControlSetting(iControl' message.Param1);             }              if (iControl == (int)Controls.OSD_PAUSE)             {               if (g_Player.Paused)               {                 ToggleButton((int)Controls.OSD_PLAY' true);                 // make sure play button is down (so it shows the pause symbol)                                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_PLAY' false);                 // make sure play button is up (so it shows the play symbol)                 if (g_Player.Speed < 1) // are we not playing back at normal speed                 {                   ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                   ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 }                 else                 {                   ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                   if (g_Player.Speed == 1)                   {                     ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                   }                 }               }             }              if (iControl == (int)Controls.OSD_PLAY)             {               //TODO               int iSpeed = g_Player.Speed;               if (iSpeed != 1) // we're in ffwd or rewind mode               {                 g_Player.Speed = 1; // drop back to single speed                 ToggleButton((int)Controls.OSD_REWIND' false); // pop all the relevant                 ToggleButton((int)Controls.OSD_FFWD' false); // buttons back to                 ToggleButton((int)Controls.OSD_PLAY' false); // their up state               }               else               {                 g_Player.Pause(); // Pause/Un-Pause playback                 if (g_Player.Paused)                 {                   ToggleButton((int)Controls.OSD_PLAY' true);                   // make sure play button is down (so it shows the pause symbol)                 }                 else                 {                   ToggleButton((int)Controls.OSD_PLAY' false);                   // make sure play button is up (so it shows the play symbol)                 }               }             }              if (iControl == (int)Controls.OSD_STOP)             {               if (isSubMenuVisible) // sub menu currently active ?               {                 FocusControl(GetID' m_iActiveMenuButtonID' 0); // set focus to last menu button                 ToggleSubMenu(0' m_iActiveMenu); // hide the currently active sub-menu               }               //g_application.m_guiWindowFullScreen.m_bOSDVisible = false;	// toggle the OSD off so parent window can de-init               Log.Info("GUIVideoOSD:stop");               g_Player.Stop(); // close our media               //GUIWindowManager.ShowPreviousWindow();							// go back to the previous window             }              if (iControl == (int)Controls.OSD_REWIND)             {               if (g_Player.Paused)               {                 g_Player.Pause(); // Unpause playback               }                if (g_Player.Speed < 1) // are we not playing back at normal speed               {                 ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                 if (g_Player.Speed == 1)                 {                   ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 }               }             }              if (iControl == (int)Controls.OSD_FFWD)             {               if (g_Player.Paused)               {                 g_Player.Pause(); // Unpause playback               }                if (g_Player.Speed > 1) // are we not playing back at normal speed               {                 ToggleButton((int)Controls.OSD_FFWD' true); // make sure out button is in the down position                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 if (g_Player.Speed == 1)                 {                   ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                 }               }             }              if (iControl == (int)Controls.OSD_SKIPBWD)             {               if (g_Player.IsDVD && g_Player.Playing)               {                 Action actionPrevChapter = new Action(Action.ActionType.ACTION_PREV_CHAPTER' 0' 0);                 GUIGraphicsContext.OnAction(actionPrevChapter);               }               else               {                 playlistPlayer.PlayPrevious();               }               ToggleButton((int)Controls.OSD_SKIPBWD' false); // pop the button back to it's up state               return true;             }              if (iControl == (int)Controls.OSD_SKIPFWD)             {               if (g_Player.IsDVD && g_Player.Playing)               {                 Action actionPrevChapter = new Action(Action.ActionType.ACTION_NEXT_CHAPTER' 0' 0);                 GUIGraphicsContext.OnAction(actionPrevChapter);               }               else               {                 playlistPlayer.PlayNext();               }               ToggleButton((int)Controls.OSD_SKIPFWD' false); // pop the button back to it's up state               return true;             }              if (iControl == (int)Controls.OSD_MUTE)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VOL); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 int iValue = g_Player.Volume;                 GUISliderControl pSlider = GetControl((int)Controls.OSD_VOLUMESLIDER) as GUISliderControl;                 if (null != pSlider)                 {                   pSlider.Percentage = iValue; // Update our volume slider accordingly ...                 }                 ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER); // show the volume control                 ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER_LABEL);                 FocusControl(GetID' (int)Controls.OSD_VOLUMESLIDER' 0); // set focus to it               }               else // sub menu is off               {                 FocusControl(GetID' (int)Controls.OSD_MUTE' 0); // set focus to the mute button               }             }              if (iControl == (int)Controls.OSD_SUBTITLES)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_SUBTITLES); // hide or show the sub-menu               if (isSubMenuVisible)               {                 // set the controls values                 GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_SUBTITLE_DELAY);                 pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                 pControl.FloatInterval = 1;                 pControl.SetRange(-50' 50);                 SetSliderValue(-50' 50' m_subtitleDelay' (int)Controls.OSD_SUBTITLE_DELAY);                 SetCheckmarkValue(g_Player.EnableSubtitle' (int)Controls.OSD_SUBTITLE_ONOFF);                 SetCheckmarkValue(!g_Player.EnableForcedSubtitle' (int)Controls.OSD_SUBTITLE_FORCED_ONOFF);                 // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY_LABEL);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_ONOFF);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_FORCED_ONOFF);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_LIST);                  FocusControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY' 0);                 // set focus to the first control in our group                 PopulateSubTitles(); // populate the list control with subtitles for this video               }             }              if (iControl == (int)Controls.OSD_BOOKMARKS)             {               GUIVideoFullscreen videoWindow = (GUIVideoFullscreen)GUIWindowManager.GetWindow((int)Window.WINDOW_FULLSCREEN_VIDEO);               videoWindow.ShowBookmarksMenu();               ToggleButton((int)Controls.OSD_BOOKMARKS' false);             }              if (iControl == (int)Controls.OSD_VIDEO)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VIDEO); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 // set the controls values                 float fPercent = (float)(100 * (g_Player.CurrentPosition / g_Player.Duration));                 SetSliderValue(0.0f' 100.0f' (float)fPercent' (int)Controls.OSD_VIDEOPOS);                  bool hasPostProc = g_Player.HasPostprocessing;                 if (hasPostProc)                 {                   IPostProcessingEngine engine = PostProcessingEngine.GetInstance();                   SetCheckmarkValue(engine.EnablePostProcess' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    SetCheckmarkValue(engine.EnableResize' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    SetCheckmarkValue(engine.EnableCrop' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    SetCheckmarkValue(engine.EnableDeinterlace' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    UpdatePostProcessing();                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL_LABEL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL_LABEL);                 }                  //SetCheckmarkValue(g_stSettings.m_bNonInterleaved' Controls.OSD_NONINTERLEAVED);                 //SetCheckmarkValue(g_stSettings.m_bNoCache' Controls.OSD_NOCACHE);                 //SetCheckmarkValue(g_stSettings.m_bFrameRateConversions' Controls.OSD_ADJFRAMERATE);                  UpdateGammaContrastBrightness();                 // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_VIDEOPOS);                 ShowControl(GetID' (int)Controls.OSD_VIDEOPOS_LABEL);                 ShowControl(GetID' (int)Controls.OSD_NONINTERLEAVED);                 ShowControl(GetID' (int)Controls.OSD_NOCACHE);                 ShowControl(GetID' (int)Controls.OSD_ADJFRAMERATE);                 ShowControl(GetID' (int)Controls.OSD_SATURATIONLABEL);                 ShowControl(GetID' (int)Controls.OSD_SATURATION);                 ShowControl(GetID' (int)Controls.OSD_SHARPNESSLABEL);                 ShowControl(GetID' (int)Controls.OSD_SHARPNESS);                 ShowControl(GetID' (int)Controls.OSD_BRIGHTNESS);                 ShowControl(GetID' (int)Controls.OSD_BRIGHTNESSLABEL);                 ShowControl(GetID' (int)Controls.OSD_CONTRAST);                 ShowControl(GetID' (int)Controls.OSD_CONTRASTLABEL);                 ShowControl(GetID' (int)Controls.OSD_GAMMA);                 ShowControl(GetID' (int)Controls.OSD_GAMMALABEL);                 FocusControl(GetID' (int)Controls.OSD_VIDEOPOS' 0); // set focus to the first control in our group               }             }              if (iControl == (int)Controls.OSD_AUDIO)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_AUDIO); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 int iValue = g_Player.Volume;                 GUISliderControl pSlider = GetControl((int)Controls.OSD_AUDIOVOLUMESLIDER) as GUISliderControl;                 if (null != pSlider)                 {                   pSlider.Percentage = iValue; // Update our volume slider accordingly ...                 }                  // set the controls values                 GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_AVDELAY);                 pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                 pControl.SetRange(-20' 20);                 SetSliderValue(-20' 20' m_audioDelay' (int)Controls.OSD_AVDELAY);                  bool hasPostProc = (g_Player.HasPostprocessing || g_Player.HasAudioEngine);                 if (hasPostProc)                 {                   GUIPropertyManager.SetProperty("#VideoOSD.AudioVideoDelayPossible"' "true");                   pControl.FloatInterval = 1;                 }                 else                 {                    GUIPropertyManager.SetProperty("#VideoOSD.AudioVideoDelayPossible"' "false");                   pControl.FloatValue = 0;                   m_audioDelay = 0;                   pControl.FloatInterval = 0;                 }                  // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_AVDELAY);                 ShowControl(GetID' (int)Controls.OSD_AVDELAY_LABEL);                 ShowControl(GetID' (int)Controls.OSD_AUDIOSTREAM_LIST);                 ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER);                 ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER_LABEL);                  FocusControl(GetID' (int)Controls.OSD_AVDELAY' 0); // set focus to the first control in our group                 PopulateAudioStreams(); // populate the list control with audio streams for this video               }             }              return true;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,OnMessage,The following statement contains a magic number: switch (message.Message)       {         case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT: // fired when OSD is hidden           {             //if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(true);             // following line should stay. Problems with OSD not             // appearing are already fixed elsewhere             //for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)             //{             //  HideControl(GetID' i);             //}             Dispose();             GUIPropertyManager.SetProperty("#currentmodule"' GUIWindowManager.GetWindow(message.Param1).GetModuleName());             return true;           }         case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT: // fired when OSD is shown           {             // following line should stay. Problems with OSD not             // appearing are already fixed elsewhere             GUIPropertyManager.SetProperty("#currentmodule"' GetModuleName());              AllocResources();             // if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(false);             ResetAllControls(); // make sure the controls are positioned relevant to the OSD Y offset             isSubMenuVisible = false;             m_iActiveMenuButtonID = 0;             m_iActiveMenu = 0;             m_bNeedRefresh = false;             Reset();             FocusControl(GetID' (int)Controls.OSD_PLAY' 0); // set focus to play button by default when window is shown             QueueAnimation(AnimationType.WindowOpen);             for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)             {               ShowControl(GetID' i);             }             if (g_Player.Paused)             {               ToggleButton((int)Controls.OSD_PLAY' true);               // make sure play button is down (so it shows the pause symbol)             }             else             {               ToggleButton((int)Controls.OSD_PLAY' false); // make sure play button is up (so it shows the play symbol)             }             m_delayInterval = MediaPortal.Player.Subtitles.SubEngine.GetInstance().DelayInterval;             if (m_delayInterval > 0)               m_subtitleDelay = MediaPortal.Player.Subtitles.SubEngine.GetInstance().Delay / m_delayInterval;             if (g_Player.HasPostprocessing)             {               m_delayIntervalAudio = PostProcessingEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = PostProcessingEngine.GetInstance().AudioDelay/m_delayIntervalAudio;               }             }             else if (g_Player.HasAudioEngine)             {               m_delayIntervalAudio = AudioPostEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = AudioPostEngine.GetInstance().AudioDelay/m_delayIntervalAudio;               }             }              g_Player.UpdateMediaInfoProperties();             GUIPropertyManager.SetProperty("#TV.View.HasTeletext"' "False");             return true;           }          case GUIMessage.MessageType.GUI_MSG_SETFOCUS:           goto case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS;          case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS:           {             if (message.SenderControlId == 13)             {               return true;             }           }           break;          case GUIMessage.MessageType.GUI_MSG_CLICKED:           {             int iControl = message.SenderControlId; // get the ID of the control sending us a message              if (iControl >= (int)Controls.OSD_VOLUMESLIDER)               // one of the settings (sub menu) controls is sending us a message             {               Handle_ControlSetting(iControl' message.Param1);             }              if (iControl == (int)Controls.OSD_PAUSE)             {               if (g_Player.Paused)               {                 ToggleButton((int)Controls.OSD_PLAY' true);                 // make sure play button is down (so it shows the pause symbol)                                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_PLAY' false);                 // make sure play button is up (so it shows the play symbol)                 if (g_Player.Speed < 1) // are we not playing back at normal speed                 {                   ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                   ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 }                 else                 {                   ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                   if (g_Player.Speed == 1)                   {                     ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                   }                 }               }             }              if (iControl == (int)Controls.OSD_PLAY)             {               //TODO               int iSpeed = g_Player.Speed;               if (iSpeed != 1) // we're in ffwd or rewind mode               {                 g_Player.Speed = 1; // drop back to single speed                 ToggleButton((int)Controls.OSD_REWIND' false); // pop all the relevant                 ToggleButton((int)Controls.OSD_FFWD' false); // buttons back to                 ToggleButton((int)Controls.OSD_PLAY' false); // their up state               }               else               {                 g_Player.Pause(); // Pause/Un-Pause playback                 if (g_Player.Paused)                 {                   ToggleButton((int)Controls.OSD_PLAY' true);                   // make sure play button is down (so it shows the pause symbol)                 }                 else                 {                   ToggleButton((int)Controls.OSD_PLAY' false);                   // make sure play button is up (so it shows the play symbol)                 }               }             }              if (iControl == (int)Controls.OSD_STOP)             {               if (isSubMenuVisible) // sub menu currently active ?               {                 FocusControl(GetID' m_iActiveMenuButtonID' 0); // set focus to last menu button                 ToggleSubMenu(0' m_iActiveMenu); // hide the currently active sub-menu               }               //g_application.m_guiWindowFullScreen.m_bOSDVisible = false;	// toggle the OSD off so parent window can de-init               Log.Info("GUIVideoOSD:stop");               g_Player.Stop(); // close our media               //GUIWindowManager.ShowPreviousWindow();							// go back to the previous window             }              if (iControl == (int)Controls.OSD_REWIND)             {               if (g_Player.Paused)               {                 g_Player.Pause(); // Unpause playback               }                if (g_Player.Speed < 1) // are we not playing back at normal speed               {                 ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                 if (g_Player.Speed == 1)                 {                   ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 }               }             }              if (iControl == (int)Controls.OSD_FFWD)             {               if (g_Player.Paused)               {                 g_Player.Pause(); // Unpause playback               }                if (g_Player.Speed > 1) // are we not playing back at normal speed               {                 ToggleButton((int)Controls.OSD_FFWD' true); // make sure out button is in the down position                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 if (g_Player.Speed == 1)                 {                   ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                 }               }             }              if (iControl == (int)Controls.OSD_SKIPBWD)             {               if (g_Player.IsDVD && g_Player.Playing)               {                 Action actionPrevChapter = new Action(Action.ActionType.ACTION_PREV_CHAPTER' 0' 0);                 GUIGraphicsContext.OnAction(actionPrevChapter);               }               else               {                 playlistPlayer.PlayPrevious();               }               ToggleButton((int)Controls.OSD_SKIPBWD' false); // pop the button back to it's up state               return true;             }              if (iControl == (int)Controls.OSD_SKIPFWD)             {               if (g_Player.IsDVD && g_Player.Playing)               {                 Action actionPrevChapter = new Action(Action.ActionType.ACTION_NEXT_CHAPTER' 0' 0);                 GUIGraphicsContext.OnAction(actionPrevChapter);               }               else               {                 playlistPlayer.PlayNext();               }               ToggleButton((int)Controls.OSD_SKIPFWD' false); // pop the button back to it's up state               return true;             }              if (iControl == (int)Controls.OSD_MUTE)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VOL); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 int iValue = g_Player.Volume;                 GUISliderControl pSlider = GetControl((int)Controls.OSD_VOLUMESLIDER) as GUISliderControl;                 if (null != pSlider)                 {                   pSlider.Percentage = iValue; // Update our volume slider accordingly ...                 }                 ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER); // show the volume control                 ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER_LABEL);                 FocusControl(GetID' (int)Controls.OSD_VOLUMESLIDER' 0); // set focus to it               }               else // sub menu is off               {                 FocusControl(GetID' (int)Controls.OSD_MUTE' 0); // set focus to the mute button               }             }              if (iControl == (int)Controls.OSD_SUBTITLES)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_SUBTITLES); // hide or show the sub-menu               if (isSubMenuVisible)               {                 // set the controls values                 GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_SUBTITLE_DELAY);                 pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                 pControl.FloatInterval = 1;                 pControl.SetRange(-50' 50);                 SetSliderValue(-50' 50' m_subtitleDelay' (int)Controls.OSD_SUBTITLE_DELAY);                 SetCheckmarkValue(g_Player.EnableSubtitle' (int)Controls.OSD_SUBTITLE_ONOFF);                 SetCheckmarkValue(!g_Player.EnableForcedSubtitle' (int)Controls.OSD_SUBTITLE_FORCED_ONOFF);                 // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY_LABEL);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_ONOFF);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_FORCED_ONOFF);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_LIST);                  FocusControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY' 0);                 // set focus to the first control in our group                 PopulateSubTitles(); // populate the list control with subtitles for this video               }             }              if (iControl == (int)Controls.OSD_BOOKMARKS)             {               GUIVideoFullscreen videoWindow = (GUIVideoFullscreen)GUIWindowManager.GetWindow((int)Window.WINDOW_FULLSCREEN_VIDEO);               videoWindow.ShowBookmarksMenu();               ToggleButton((int)Controls.OSD_BOOKMARKS' false);             }              if (iControl == (int)Controls.OSD_VIDEO)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VIDEO); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 // set the controls values                 float fPercent = (float)(100 * (g_Player.CurrentPosition / g_Player.Duration));                 SetSliderValue(0.0f' 100.0f' (float)fPercent' (int)Controls.OSD_VIDEOPOS);                  bool hasPostProc = g_Player.HasPostprocessing;                 if (hasPostProc)                 {                   IPostProcessingEngine engine = PostProcessingEngine.GetInstance();                   SetCheckmarkValue(engine.EnablePostProcess' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    SetCheckmarkValue(engine.EnableResize' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    SetCheckmarkValue(engine.EnableCrop' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    SetCheckmarkValue(engine.EnableDeinterlace' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    UpdatePostProcessing();                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL_LABEL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL_LABEL);                 }                  //SetCheckmarkValue(g_stSettings.m_bNonInterleaved' Controls.OSD_NONINTERLEAVED);                 //SetCheckmarkValue(g_stSettings.m_bNoCache' Controls.OSD_NOCACHE);                 //SetCheckmarkValue(g_stSettings.m_bFrameRateConversions' Controls.OSD_ADJFRAMERATE);                  UpdateGammaContrastBrightness();                 // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_VIDEOPOS);                 ShowControl(GetID' (int)Controls.OSD_VIDEOPOS_LABEL);                 ShowControl(GetID' (int)Controls.OSD_NONINTERLEAVED);                 ShowControl(GetID' (int)Controls.OSD_NOCACHE);                 ShowControl(GetID' (int)Controls.OSD_ADJFRAMERATE);                 ShowControl(GetID' (int)Controls.OSD_SATURATIONLABEL);                 ShowControl(GetID' (int)Controls.OSD_SATURATION);                 ShowControl(GetID' (int)Controls.OSD_SHARPNESSLABEL);                 ShowControl(GetID' (int)Controls.OSD_SHARPNESS);                 ShowControl(GetID' (int)Controls.OSD_BRIGHTNESS);                 ShowControl(GetID' (int)Controls.OSD_BRIGHTNESSLABEL);                 ShowControl(GetID' (int)Controls.OSD_CONTRAST);                 ShowControl(GetID' (int)Controls.OSD_CONTRASTLABEL);                 ShowControl(GetID' (int)Controls.OSD_GAMMA);                 ShowControl(GetID' (int)Controls.OSD_GAMMALABEL);                 FocusControl(GetID' (int)Controls.OSD_VIDEOPOS' 0); // set focus to the first control in our group               }             }              if (iControl == (int)Controls.OSD_AUDIO)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_AUDIO); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 int iValue = g_Player.Volume;                 GUISliderControl pSlider = GetControl((int)Controls.OSD_AUDIOVOLUMESLIDER) as GUISliderControl;                 if (null != pSlider)                 {                   pSlider.Percentage = iValue; // Update our volume slider accordingly ...                 }                  // set the controls values                 GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_AVDELAY);                 pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                 pControl.SetRange(-20' 20);                 SetSliderValue(-20' 20' m_audioDelay' (int)Controls.OSD_AVDELAY);                  bool hasPostProc = (g_Player.HasPostprocessing || g_Player.HasAudioEngine);                 if (hasPostProc)                 {                   GUIPropertyManager.SetProperty("#VideoOSD.AudioVideoDelayPossible"' "true");                   pControl.FloatInterval = 1;                 }                 else                 {                    GUIPropertyManager.SetProperty("#VideoOSD.AudioVideoDelayPossible"' "false");                   pControl.FloatValue = 0;                   m_audioDelay = 0;                   pControl.FloatInterval = 0;                 }                  // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_AVDELAY);                 ShowControl(GetID' (int)Controls.OSD_AVDELAY_LABEL);                 ShowControl(GetID' (int)Controls.OSD_AUDIOSTREAM_LIST);                 ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER);                 ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER_LABEL);                  FocusControl(GetID' (int)Controls.OSD_AVDELAY' 0); // set focus to the first control in our group                 PopulateAudioStreams(); // populate the list control with audio streams for this video               }             }              return true;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,OnMessage,The following statement contains a magic number: switch (message.Message)       {         case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT: // fired when OSD is hidden           {             //if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(true);             // following line should stay. Problems with OSD not             // appearing are already fixed elsewhere             //for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)             //{             //  HideControl(GetID' i);             //}             Dispose();             GUIPropertyManager.SetProperty("#currentmodule"' GUIWindowManager.GetWindow(message.Param1).GetModuleName());             return true;           }         case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT: // fired when OSD is shown           {             // following line should stay. Problems with OSD not             // appearing are already fixed elsewhere             GUIPropertyManager.SetProperty("#currentmodule"' GetModuleName());              AllocResources();             // if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(false);             ResetAllControls(); // make sure the controls are positioned relevant to the OSD Y offset             isSubMenuVisible = false;             m_iActiveMenuButtonID = 0;             m_iActiveMenu = 0;             m_bNeedRefresh = false;             Reset();             FocusControl(GetID' (int)Controls.OSD_PLAY' 0); // set focus to play button by default when window is shown             QueueAnimation(AnimationType.WindowOpen);             for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)             {               ShowControl(GetID' i);             }             if (g_Player.Paused)             {               ToggleButton((int)Controls.OSD_PLAY' true);               // make sure play button is down (so it shows the pause symbol)             }             else             {               ToggleButton((int)Controls.OSD_PLAY' false); // make sure play button is up (so it shows the play symbol)             }             m_delayInterval = MediaPortal.Player.Subtitles.SubEngine.GetInstance().DelayInterval;             if (m_delayInterval > 0)               m_subtitleDelay = MediaPortal.Player.Subtitles.SubEngine.GetInstance().Delay / m_delayInterval;             if (g_Player.HasPostprocessing)             {               m_delayIntervalAudio = PostProcessingEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = PostProcessingEngine.GetInstance().AudioDelay/m_delayIntervalAudio;               }             }             else if (g_Player.HasAudioEngine)             {               m_delayIntervalAudio = AudioPostEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = AudioPostEngine.GetInstance().AudioDelay/m_delayIntervalAudio;               }             }              g_Player.UpdateMediaInfoProperties();             GUIPropertyManager.SetProperty("#TV.View.HasTeletext"' "False");             return true;           }          case GUIMessage.MessageType.GUI_MSG_SETFOCUS:           goto case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS;          case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS:           {             if (message.SenderControlId == 13)             {               return true;             }           }           break;          case GUIMessage.MessageType.GUI_MSG_CLICKED:           {             int iControl = message.SenderControlId; // get the ID of the control sending us a message              if (iControl >= (int)Controls.OSD_VOLUMESLIDER)               // one of the settings (sub menu) controls is sending us a message             {               Handle_ControlSetting(iControl' message.Param1);             }              if (iControl == (int)Controls.OSD_PAUSE)             {               if (g_Player.Paused)               {                 ToggleButton((int)Controls.OSD_PLAY' true);                 // make sure play button is down (so it shows the pause symbol)                                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_PLAY' false);                 // make sure play button is up (so it shows the play symbol)                 if (g_Player.Speed < 1) // are we not playing back at normal speed                 {                   ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                   ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 }                 else                 {                   ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                   if (g_Player.Speed == 1)                   {                     ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                   }                 }               }             }              if (iControl == (int)Controls.OSD_PLAY)             {               //TODO               int iSpeed = g_Player.Speed;               if (iSpeed != 1) // we're in ffwd or rewind mode               {                 g_Player.Speed = 1; // drop back to single speed                 ToggleButton((int)Controls.OSD_REWIND' false); // pop all the relevant                 ToggleButton((int)Controls.OSD_FFWD' false); // buttons back to                 ToggleButton((int)Controls.OSD_PLAY' false); // their up state               }               else               {                 g_Player.Pause(); // Pause/Un-Pause playback                 if (g_Player.Paused)                 {                   ToggleButton((int)Controls.OSD_PLAY' true);                   // make sure play button is down (so it shows the pause symbol)                 }                 else                 {                   ToggleButton((int)Controls.OSD_PLAY' false);                   // make sure play button is up (so it shows the play symbol)                 }               }             }              if (iControl == (int)Controls.OSD_STOP)             {               if (isSubMenuVisible) // sub menu currently active ?               {                 FocusControl(GetID' m_iActiveMenuButtonID' 0); // set focus to last menu button                 ToggleSubMenu(0' m_iActiveMenu); // hide the currently active sub-menu               }               //g_application.m_guiWindowFullScreen.m_bOSDVisible = false;	// toggle the OSD off so parent window can de-init               Log.Info("GUIVideoOSD:stop");               g_Player.Stop(); // close our media               //GUIWindowManager.ShowPreviousWindow();							// go back to the previous window             }              if (iControl == (int)Controls.OSD_REWIND)             {               if (g_Player.Paused)               {                 g_Player.Pause(); // Unpause playback               }                if (g_Player.Speed < 1) // are we not playing back at normal speed               {                 ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                 if (g_Player.Speed == 1)                 {                   ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 }               }             }              if (iControl == (int)Controls.OSD_FFWD)             {               if (g_Player.Paused)               {                 g_Player.Pause(); // Unpause playback               }                if (g_Player.Speed > 1) // are we not playing back at normal speed               {                 ToggleButton((int)Controls.OSD_FFWD' true); // make sure out button is in the down position                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 if (g_Player.Speed == 1)                 {                   ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                 }               }             }              if (iControl == (int)Controls.OSD_SKIPBWD)             {               if (g_Player.IsDVD && g_Player.Playing)               {                 Action actionPrevChapter = new Action(Action.ActionType.ACTION_PREV_CHAPTER' 0' 0);                 GUIGraphicsContext.OnAction(actionPrevChapter);               }               else               {                 playlistPlayer.PlayPrevious();               }               ToggleButton((int)Controls.OSD_SKIPBWD' false); // pop the button back to it's up state               return true;             }              if (iControl == (int)Controls.OSD_SKIPFWD)             {               if (g_Player.IsDVD && g_Player.Playing)               {                 Action actionPrevChapter = new Action(Action.ActionType.ACTION_NEXT_CHAPTER' 0' 0);                 GUIGraphicsContext.OnAction(actionPrevChapter);               }               else               {                 playlistPlayer.PlayNext();               }               ToggleButton((int)Controls.OSD_SKIPFWD' false); // pop the button back to it's up state               return true;             }              if (iControl == (int)Controls.OSD_MUTE)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VOL); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 int iValue = g_Player.Volume;                 GUISliderControl pSlider = GetControl((int)Controls.OSD_VOLUMESLIDER) as GUISliderControl;                 if (null != pSlider)                 {                   pSlider.Percentage = iValue; // Update our volume slider accordingly ...                 }                 ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER); // show the volume control                 ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER_LABEL);                 FocusControl(GetID' (int)Controls.OSD_VOLUMESLIDER' 0); // set focus to it               }               else // sub menu is off               {                 FocusControl(GetID' (int)Controls.OSD_MUTE' 0); // set focus to the mute button               }             }              if (iControl == (int)Controls.OSD_SUBTITLES)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_SUBTITLES); // hide or show the sub-menu               if (isSubMenuVisible)               {                 // set the controls values                 GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_SUBTITLE_DELAY);                 pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                 pControl.FloatInterval = 1;                 pControl.SetRange(-50' 50);                 SetSliderValue(-50' 50' m_subtitleDelay' (int)Controls.OSD_SUBTITLE_DELAY);                 SetCheckmarkValue(g_Player.EnableSubtitle' (int)Controls.OSD_SUBTITLE_ONOFF);                 SetCheckmarkValue(!g_Player.EnableForcedSubtitle' (int)Controls.OSD_SUBTITLE_FORCED_ONOFF);                 // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY_LABEL);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_ONOFF);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_FORCED_ONOFF);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_LIST);                  FocusControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY' 0);                 // set focus to the first control in our group                 PopulateSubTitles(); // populate the list control with subtitles for this video               }             }              if (iControl == (int)Controls.OSD_BOOKMARKS)             {               GUIVideoFullscreen videoWindow = (GUIVideoFullscreen)GUIWindowManager.GetWindow((int)Window.WINDOW_FULLSCREEN_VIDEO);               videoWindow.ShowBookmarksMenu();               ToggleButton((int)Controls.OSD_BOOKMARKS' false);             }              if (iControl == (int)Controls.OSD_VIDEO)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VIDEO); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 // set the controls values                 float fPercent = (float)(100 * (g_Player.CurrentPosition / g_Player.Duration));                 SetSliderValue(0.0f' 100.0f' (float)fPercent' (int)Controls.OSD_VIDEOPOS);                  bool hasPostProc = g_Player.HasPostprocessing;                 if (hasPostProc)                 {                   IPostProcessingEngine engine = PostProcessingEngine.GetInstance();                   SetCheckmarkValue(engine.EnablePostProcess' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    SetCheckmarkValue(engine.EnableResize' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    SetCheckmarkValue(engine.EnableCrop' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    SetCheckmarkValue(engine.EnableDeinterlace' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    UpdatePostProcessing();                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL_LABEL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL_LABEL);                 }                  //SetCheckmarkValue(g_stSettings.m_bNonInterleaved' Controls.OSD_NONINTERLEAVED);                 //SetCheckmarkValue(g_stSettings.m_bNoCache' Controls.OSD_NOCACHE);                 //SetCheckmarkValue(g_stSettings.m_bFrameRateConversions' Controls.OSD_ADJFRAMERATE);                  UpdateGammaContrastBrightness();                 // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_VIDEOPOS);                 ShowControl(GetID' (int)Controls.OSD_VIDEOPOS_LABEL);                 ShowControl(GetID' (int)Controls.OSD_NONINTERLEAVED);                 ShowControl(GetID' (int)Controls.OSD_NOCACHE);                 ShowControl(GetID' (int)Controls.OSD_ADJFRAMERATE);                 ShowControl(GetID' (int)Controls.OSD_SATURATIONLABEL);                 ShowControl(GetID' (int)Controls.OSD_SATURATION);                 ShowControl(GetID' (int)Controls.OSD_SHARPNESSLABEL);                 ShowControl(GetID' (int)Controls.OSD_SHARPNESS);                 ShowControl(GetID' (int)Controls.OSD_BRIGHTNESS);                 ShowControl(GetID' (int)Controls.OSD_BRIGHTNESSLABEL);                 ShowControl(GetID' (int)Controls.OSD_CONTRAST);                 ShowControl(GetID' (int)Controls.OSD_CONTRASTLABEL);                 ShowControl(GetID' (int)Controls.OSD_GAMMA);                 ShowControl(GetID' (int)Controls.OSD_GAMMALABEL);                 FocusControl(GetID' (int)Controls.OSD_VIDEOPOS' 0); // set focus to the first control in our group               }             }              if (iControl == (int)Controls.OSD_AUDIO)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_AUDIO); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 int iValue = g_Player.Volume;                 GUISliderControl pSlider = GetControl((int)Controls.OSD_AUDIOVOLUMESLIDER) as GUISliderControl;                 if (null != pSlider)                 {                   pSlider.Percentage = iValue; // Update our volume slider accordingly ...                 }                  // set the controls values                 GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_AVDELAY);                 pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                 pControl.SetRange(-20' 20);                 SetSliderValue(-20' 20' m_audioDelay' (int)Controls.OSD_AVDELAY);                  bool hasPostProc = (g_Player.HasPostprocessing || g_Player.HasAudioEngine);                 if (hasPostProc)                 {                   GUIPropertyManager.SetProperty("#VideoOSD.AudioVideoDelayPossible"' "true");                   pControl.FloatInterval = 1;                 }                 else                 {                    GUIPropertyManager.SetProperty("#VideoOSD.AudioVideoDelayPossible"' "false");                   pControl.FloatValue = 0;                   m_audioDelay = 0;                   pControl.FloatInterval = 0;                 }                  // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_AVDELAY);                 ShowControl(GetID' (int)Controls.OSD_AVDELAY_LABEL);                 ShowControl(GetID' (int)Controls.OSD_AUDIOSTREAM_LIST);                 ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER);                 ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER_LABEL);                  FocusControl(GetID' (int)Controls.OSD_AVDELAY' 0); // set focus to the first control in our group                 PopulateAudioStreams(); // populate the list control with audio streams for this video               }             }              return true;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,OnMessage,The following statement contains a magic number: switch (message.Message)       {         case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT: // fired when OSD is hidden           {             //if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(true);             // following line should stay. Problems with OSD not             // appearing are already fixed elsewhere             //for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)             //{             //  HideControl(GetID' i);             //}             Dispose();             GUIPropertyManager.SetProperty("#currentmodule"' GUIWindowManager.GetWindow(message.Param1).GetModuleName());             return true;           }         case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT: // fired when OSD is shown           {             // following line should stay. Problems with OSD not             // appearing are already fixed elsewhere             GUIPropertyManager.SetProperty("#currentmodule"' GetModuleName());              AllocResources();             // if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(false);             ResetAllControls(); // make sure the controls are positioned relevant to the OSD Y offset             isSubMenuVisible = false;             m_iActiveMenuButtonID = 0;             m_iActiveMenu = 0;             m_bNeedRefresh = false;             Reset();             FocusControl(GetID' (int)Controls.OSD_PLAY' 0); // set focus to play button by default when window is shown             QueueAnimation(AnimationType.WindowOpen);             for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)             {               ShowControl(GetID' i);             }             if (g_Player.Paused)             {               ToggleButton((int)Controls.OSD_PLAY' true);               // make sure play button is down (so it shows the pause symbol)             }             else             {               ToggleButton((int)Controls.OSD_PLAY' false); // make sure play button is up (so it shows the play symbol)             }             m_delayInterval = MediaPortal.Player.Subtitles.SubEngine.GetInstance().DelayInterval;             if (m_delayInterval > 0)               m_subtitleDelay = MediaPortal.Player.Subtitles.SubEngine.GetInstance().Delay / m_delayInterval;             if (g_Player.HasPostprocessing)             {               m_delayIntervalAudio = PostProcessingEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = PostProcessingEngine.GetInstance().AudioDelay/m_delayIntervalAudio;               }             }             else if (g_Player.HasAudioEngine)             {               m_delayIntervalAudio = AudioPostEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = AudioPostEngine.GetInstance().AudioDelay/m_delayIntervalAudio;               }             }              g_Player.UpdateMediaInfoProperties();             GUIPropertyManager.SetProperty("#TV.View.HasTeletext"' "False");             return true;           }          case GUIMessage.MessageType.GUI_MSG_SETFOCUS:           goto case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS;          case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS:           {             if (message.SenderControlId == 13)             {               return true;             }           }           break;          case GUIMessage.MessageType.GUI_MSG_CLICKED:           {             int iControl = message.SenderControlId; // get the ID of the control sending us a message              if (iControl >= (int)Controls.OSD_VOLUMESLIDER)               // one of the settings (sub menu) controls is sending us a message             {               Handle_ControlSetting(iControl' message.Param1);             }              if (iControl == (int)Controls.OSD_PAUSE)             {               if (g_Player.Paused)               {                 ToggleButton((int)Controls.OSD_PLAY' true);                 // make sure play button is down (so it shows the pause symbol)                                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_PLAY' false);                 // make sure play button is up (so it shows the play symbol)                 if (g_Player.Speed < 1) // are we not playing back at normal speed                 {                   ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                   ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 }                 else                 {                   ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                   if (g_Player.Speed == 1)                   {                     ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                   }                 }               }             }              if (iControl == (int)Controls.OSD_PLAY)             {               //TODO               int iSpeed = g_Player.Speed;               if (iSpeed != 1) // we're in ffwd or rewind mode               {                 g_Player.Speed = 1; // drop back to single speed                 ToggleButton((int)Controls.OSD_REWIND' false); // pop all the relevant                 ToggleButton((int)Controls.OSD_FFWD' false); // buttons back to                 ToggleButton((int)Controls.OSD_PLAY' false); // their up state               }               else               {                 g_Player.Pause(); // Pause/Un-Pause playback                 if (g_Player.Paused)                 {                   ToggleButton((int)Controls.OSD_PLAY' true);                   // make sure play button is down (so it shows the pause symbol)                 }                 else                 {                   ToggleButton((int)Controls.OSD_PLAY' false);                   // make sure play button is up (so it shows the play symbol)                 }               }             }              if (iControl == (int)Controls.OSD_STOP)             {               if (isSubMenuVisible) // sub menu currently active ?               {                 FocusControl(GetID' m_iActiveMenuButtonID' 0); // set focus to last menu button                 ToggleSubMenu(0' m_iActiveMenu); // hide the currently active sub-menu               }               //g_application.m_guiWindowFullScreen.m_bOSDVisible = false;	// toggle the OSD off so parent window can de-init               Log.Info("GUIVideoOSD:stop");               g_Player.Stop(); // close our media               //GUIWindowManager.ShowPreviousWindow();							// go back to the previous window             }              if (iControl == (int)Controls.OSD_REWIND)             {               if (g_Player.Paused)               {                 g_Player.Pause(); // Unpause playback               }                if (g_Player.Speed < 1) // are we not playing back at normal speed               {                 ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                 if (g_Player.Speed == 1)                 {                   ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 }               }             }              if (iControl == (int)Controls.OSD_FFWD)             {               if (g_Player.Paused)               {                 g_Player.Pause(); // Unpause playback               }                if (g_Player.Speed > 1) // are we not playing back at normal speed               {                 ToggleButton((int)Controls.OSD_FFWD' true); // make sure out button is in the down position                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 if (g_Player.Speed == 1)                 {                   ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                 }               }             }              if (iControl == (int)Controls.OSD_SKIPBWD)             {               if (g_Player.IsDVD && g_Player.Playing)               {                 Action actionPrevChapter = new Action(Action.ActionType.ACTION_PREV_CHAPTER' 0' 0);                 GUIGraphicsContext.OnAction(actionPrevChapter);               }               else               {                 playlistPlayer.PlayPrevious();               }               ToggleButton((int)Controls.OSD_SKIPBWD' false); // pop the button back to it's up state               return true;             }              if (iControl == (int)Controls.OSD_SKIPFWD)             {               if (g_Player.IsDVD && g_Player.Playing)               {                 Action actionPrevChapter = new Action(Action.ActionType.ACTION_NEXT_CHAPTER' 0' 0);                 GUIGraphicsContext.OnAction(actionPrevChapter);               }               else               {                 playlistPlayer.PlayNext();               }               ToggleButton((int)Controls.OSD_SKIPFWD' false); // pop the button back to it's up state               return true;             }              if (iControl == (int)Controls.OSD_MUTE)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VOL); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 int iValue = g_Player.Volume;                 GUISliderControl pSlider = GetControl((int)Controls.OSD_VOLUMESLIDER) as GUISliderControl;                 if (null != pSlider)                 {                   pSlider.Percentage = iValue; // Update our volume slider accordingly ...                 }                 ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER); // show the volume control                 ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER_LABEL);                 FocusControl(GetID' (int)Controls.OSD_VOLUMESLIDER' 0); // set focus to it               }               else // sub menu is off               {                 FocusControl(GetID' (int)Controls.OSD_MUTE' 0); // set focus to the mute button               }             }              if (iControl == (int)Controls.OSD_SUBTITLES)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_SUBTITLES); // hide or show the sub-menu               if (isSubMenuVisible)               {                 // set the controls values                 GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_SUBTITLE_DELAY);                 pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                 pControl.FloatInterval = 1;                 pControl.SetRange(-50' 50);                 SetSliderValue(-50' 50' m_subtitleDelay' (int)Controls.OSD_SUBTITLE_DELAY);                 SetCheckmarkValue(g_Player.EnableSubtitle' (int)Controls.OSD_SUBTITLE_ONOFF);                 SetCheckmarkValue(!g_Player.EnableForcedSubtitle' (int)Controls.OSD_SUBTITLE_FORCED_ONOFF);                 // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY_LABEL);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_ONOFF);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_FORCED_ONOFF);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_LIST);                  FocusControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY' 0);                 // set focus to the first control in our group                 PopulateSubTitles(); // populate the list control with subtitles for this video               }             }              if (iControl == (int)Controls.OSD_BOOKMARKS)             {               GUIVideoFullscreen videoWindow = (GUIVideoFullscreen)GUIWindowManager.GetWindow((int)Window.WINDOW_FULLSCREEN_VIDEO);               videoWindow.ShowBookmarksMenu();               ToggleButton((int)Controls.OSD_BOOKMARKS' false);             }              if (iControl == (int)Controls.OSD_VIDEO)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VIDEO); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 // set the controls values                 float fPercent = (float)(100 * (g_Player.CurrentPosition / g_Player.Duration));                 SetSliderValue(0.0f' 100.0f' (float)fPercent' (int)Controls.OSD_VIDEOPOS);                  bool hasPostProc = g_Player.HasPostprocessing;                 if (hasPostProc)                 {                   IPostProcessingEngine engine = PostProcessingEngine.GetInstance();                   SetCheckmarkValue(engine.EnablePostProcess' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    SetCheckmarkValue(engine.EnableResize' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    SetCheckmarkValue(engine.EnableCrop' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    SetCheckmarkValue(engine.EnableDeinterlace' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    UpdatePostProcessing();                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL_LABEL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL_LABEL);                 }                  //SetCheckmarkValue(g_stSettings.m_bNonInterleaved' Controls.OSD_NONINTERLEAVED);                 //SetCheckmarkValue(g_stSettings.m_bNoCache' Controls.OSD_NOCACHE);                 //SetCheckmarkValue(g_stSettings.m_bFrameRateConversions' Controls.OSD_ADJFRAMERATE);                  UpdateGammaContrastBrightness();                 // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_VIDEOPOS);                 ShowControl(GetID' (int)Controls.OSD_VIDEOPOS_LABEL);                 ShowControl(GetID' (int)Controls.OSD_NONINTERLEAVED);                 ShowControl(GetID' (int)Controls.OSD_NOCACHE);                 ShowControl(GetID' (int)Controls.OSD_ADJFRAMERATE);                 ShowControl(GetID' (int)Controls.OSD_SATURATIONLABEL);                 ShowControl(GetID' (int)Controls.OSD_SATURATION);                 ShowControl(GetID' (int)Controls.OSD_SHARPNESSLABEL);                 ShowControl(GetID' (int)Controls.OSD_SHARPNESS);                 ShowControl(GetID' (int)Controls.OSD_BRIGHTNESS);                 ShowControl(GetID' (int)Controls.OSD_BRIGHTNESSLABEL);                 ShowControl(GetID' (int)Controls.OSD_CONTRAST);                 ShowControl(GetID' (int)Controls.OSD_CONTRASTLABEL);                 ShowControl(GetID' (int)Controls.OSD_GAMMA);                 ShowControl(GetID' (int)Controls.OSD_GAMMALABEL);                 FocusControl(GetID' (int)Controls.OSD_VIDEOPOS' 0); // set focus to the first control in our group               }             }              if (iControl == (int)Controls.OSD_AUDIO)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_AUDIO); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 int iValue = g_Player.Volume;                 GUISliderControl pSlider = GetControl((int)Controls.OSD_AUDIOVOLUMESLIDER) as GUISliderControl;                 if (null != pSlider)                 {                   pSlider.Percentage = iValue; // Update our volume slider accordingly ...                 }                  // set the controls values                 GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_AVDELAY);                 pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                 pControl.SetRange(-20' 20);                 SetSliderValue(-20' 20' m_audioDelay' (int)Controls.OSD_AVDELAY);                  bool hasPostProc = (g_Player.HasPostprocessing || g_Player.HasAudioEngine);                 if (hasPostProc)                 {                   GUIPropertyManager.SetProperty("#VideoOSD.AudioVideoDelayPossible"' "true");                   pControl.FloatInterval = 1;                 }                 else                 {                    GUIPropertyManager.SetProperty("#VideoOSD.AudioVideoDelayPossible"' "false");                   pControl.FloatValue = 0;                   m_audioDelay = 0;                   pControl.FloatInterval = 0;                 }                  // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_AVDELAY);                 ShowControl(GetID' (int)Controls.OSD_AVDELAY_LABEL);                 ShowControl(GetID' (int)Controls.OSD_AUDIOSTREAM_LIST);                 ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER);                 ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER_LABEL);                  FocusControl(GetID' (int)Controls.OSD_AVDELAY' 0); // set focus to the first control in our group                 PopulateAudioStreams(); // populate the list control with audio streams for this video               }             }              return true;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,OnMessage,The following statement contains a magic number: switch (message.Message)       {         case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT: // fired when OSD is hidden           {             //if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(true);             // following line should stay. Problems with OSD not             // appearing are already fixed elsewhere             //for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)             //{             //  HideControl(GetID' i);             //}             Dispose();             GUIPropertyManager.SetProperty("#currentmodule"' GUIWindowManager.GetWindow(message.Param1).GetModuleName());             return true;           }         case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT: // fired when OSD is shown           {             // following line should stay. Problems with OSD not             // appearing are already fixed elsewhere             GUIPropertyManager.SetProperty("#currentmodule"' GetModuleName());              AllocResources();             // if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(false);             ResetAllControls(); // make sure the controls are positioned relevant to the OSD Y offset             isSubMenuVisible = false;             m_iActiveMenuButtonID = 0;             m_iActiveMenu = 0;             m_bNeedRefresh = false;             Reset();             FocusControl(GetID' (int)Controls.OSD_PLAY' 0); // set focus to play button by default when window is shown             QueueAnimation(AnimationType.WindowOpen);             for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)             {               ShowControl(GetID' i);             }             if (g_Player.Paused)             {               ToggleButton((int)Controls.OSD_PLAY' true);               // make sure play button is down (so it shows the pause symbol)             }             else             {               ToggleButton((int)Controls.OSD_PLAY' false); // make sure play button is up (so it shows the play symbol)             }             m_delayInterval = MediaPortal.Player.Subtitles.SubEngine.GetInstance().DelayInterval;             if (m_delayInterval > 0)               m_subtitleDelay = MediaPortal.Player.Subtitles.SubEngine.GetInstance().Delay / m_delayInterval;             if (g_Player.HasPostprocessing)             {               m_delayIntervalAudio = PostProcessingEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = PostProcessingEngine.GetInstance().AudioDelay/m_delayIntervalAudio;               }             }             else if (g_Player.HasAudioEngine)             {               m_delayIntervalAudio = AudioPostEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = AudioPostEngine.GetInstance().AudioDelay/m_delayIntervalAudio;               }             }              g_Player.UpdateMediaInfoProperties();             GUIPropertyManager.SetProperty("#TV.View.HasTeletext"' "False");             return true;           }          case GUIMessage.MessageType.GUI_MSG_SETFOCUS:           goto case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS;          case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS:           {             if (message.SenderControlId == 13)             {               return true;             }           }           break;          case GUIMessage.MessageType.GUI_MSG_CLICKED:           {             int iControl = message.SenderControlId; // get the ID of the control sending us a message              if (iControl >= (int)Controls.OSD_VOLUMESLIDER)               // one of the settings (sub menu) controls is sending us a message             {               Handle_ControlSetting(iControl' message.Param1);             }              if (iControl == (int)Controls.OSD_PAUSE)             {               if (g_Player.Paused)               {                 ToggleButton((int)Controls.OSD_PLAY' true);                 // make sure play button is down (so it shows the pause symbol)                                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_PLAY' false);                 // make sure play button is up (so it shows the play symbol)                 if (g_Player.Speed < 1) // are we not playing back at normal speed                 {                   ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                   ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 }                 else                 {                   ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                   if (g_Player.Speed == 1)                   {                     ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                   }                 }               }             }              if (iControl == (int)Controls.OSD_PLAY)             {               //TODO               int iSpeed = g_Player.Speed;               if (iSpeed != 1) // we're in ffwd or rewind mode               {                 g_Player.Speed = 1; // drop back to single speed                 ToggleButton((int)Controls.OSD_REWIND' false); // pop all the relevant                 ToggleButton((int)Controls.OSD_FFWD' false); // buttons back to                 ToggleButton((int)Controls.OSD_PLAY' false); // their up state               }               else               {                 g_Player.Pause(); // Pause/Un-Pause playback                 if (g_Player.Paused)                 {                   ToggleButton((int)Controls.OSD_PLAY' true);                   // make sure play button is down (so it shows the pause symbol)                 }                 else                 {                   ToggleButton((int)Controls.OSD_PLAY' false);                   // make sure play button is up (so it shows the play symbol)                 }               }             }              if (iControl == (int)Controls.OSD_STOP)             {               if (isSubMenuVisible) // sub menu currently active ?               {                 FocusControl(GetID' m_iActiveMenuButtonID' 0); // set focus to last menu button                 ToggleSubMenu(0' m_iActiveMenu); // hide the currently active sub-menu               }               //g_application.m_guiWindowFullScreen.m_bOSDVisible = false;	// toggle the OSD off so parent window can de-init               Log.Info("GUIVideoOSD:stop");               g_Player.Stop(); // close our media               //GUIWindowManager.ShowPreviousWindow();							// go back to the previous window             }              if (iControl == (int)Controls.OSD_REWIND)             {               if (g_Player.Paused)               {                 g_Player.Pause(); // Unpause playback               }                if (g_Player.Speed < 1) // are we not playing back at normal speed               {                 ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                 if (g_Player.Speed == 1)                 {                   ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 }               }             }              if (iControl == (int)Controls.OSD_FFWD)             {               if (g_Player.Paused)               {                 g_Player.Pause(); // Unpause playback               }                if (g_Player.Speed > 1) // are we not playing back at normal speed               {                 ToggleButton((int)Controls.OSD_FFWD' true); // make sure out button is in the down position                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 if (g_Player.Speed == 1)                 {                   ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                 }               }             }              if (iControl == (int)Controls.OSD_SKIPBWD)             {               if (g_Player.IsDVD && g_Player.Playing)               {                 Action actionPrevChapter = new Action(Action.ActionType.ACTION_PREV_CHAPTER' 0' 0);                 GUIGraphicsContext.OnAction(actionPrevChapter);               }               else               {                 playlistPlayer.PlayPrevious();               }               ToggleButton((int)Controls.OSD_SKIPBWD' false); // pop the button back to it's up state               return true;             }              if (iControl == (int)Controls.OSD_SKIPFWD)             {               if (g_Player.IsDVD && g_Player.Playing)               {                 Action actionPrevChapter = new Action(Action.ActionType.ACTION_NEXT_CHAPTER' 0' 0);                 GUIGraphicsContext.OnAction(actionPrevChapter);               }               else               {                 playlistPlayer.PlayNext();               }               ToggleButton((int)Controls.OSD_SKIPFWD' false); // pop the button back to it's up state               return true;             }              if (iControl == (int)Controls.OSD_MUTE)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VOL); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 int iValue = g_Player.Volume;                 GUISliderControl pSlider = GetControl((int)Controls.OSD_VOLUMESLIDER) as GUISliderControl;                 if (null != pSlider)                 {                   pSlider.Percentage = iValue; // Update our volume slider accordingly ...                 }                 ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER); // show the volume control                 ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER_LABEL);                 FocusControl(GetID' (int)Controls.OSD_VOLUMESLIDER' 0); // set focus to it               }               else // sub menu is off               {                 FocusControl(GetID' (int)Controls.OSD_MUTE' 0); // set focus to the mute button               }             }              if (iControl == (int)Controls.OSD_SUBTITLES)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_SUBTITLES); // hide or show the sub-menu               if (isSubMenuVisible)               {                 // set the controls values                 GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_SUBTITLE_DELAY);                 pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                 pControl.FloatInterval = 1;                 pControl.SetRange(-50' 50);                 SetSliderValue(-50' 50' m_subtitleDelay' (int)Controls.OSD_SUBTITLE_DELAY);                 SetCheckmarkValue(g_Player.EnableSubtitle' (int)Controls.OSD_SUBTITLE_ONOFF);                 SetCheckmarkValue(!g_Player.EnableForcedSubtitle' (int)Controls.OSD_SUBTITLE_FORCED_ONOFF);                 // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY_LABEL);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_ONOFF);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_FORCED_ONOFF);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_LIST);                  FocusControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY' 0);                 // set focus to the first control in our group                 PopulateSubTitles(); // populate the list control with subtitles for this video               }             }              if (iControl == (int)Controls.OSD_BOOKMARKS)             {               GUIVideoFullscreen videoWindow = (GUIVideoFullscreen)GUIWindowManager.GetWindow((int)Window.WINDOW_FULLSCREEN_VIDEO);               videoWindow.ShowBookmarksMenu();               ToggleButton((int)Controls.OSD_BOOKMARKS' false);             }              if (iControl == (int)Controls.OSD_VIDEO)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VIDEO); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 // set the controls values                 float fPercent = (float)(100 * (g_Player.CurrentPosition / g_Player.Duration));                 SetSliderValue(0.0f' 100.0f' (float)fPercent' (int)Controls.OSD_VIDEOPOS);                  bool hasPostProc = g_Player.HasPostprocessing;                 if (hasPostProc)                 {                   IPostProcessingEngine engine = PostProcessingEngine.GetInstance();                   SetCheckmarkValue(engine.EnablePostProcess' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    SetCheckmarkValue(engine.EnableResize' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    SetCheckmarkValue(engine.EnableCrop' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    SetCheckmarkValue(engine.EnableDeinterlace' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    UpdatePostProcessing();                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL_LABEL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL_LABEL);                 }                  //SetCheckmarkValue(g_stSettings.m_bNonInterleaved' Controls.OSD_NONINTERLEAVED);                 //SetCheckmarkValue(g_stSettings.m_bNoCache' Controls.OSD_NOCACHE);                 //SetCheckmarkValue(g_stSettings.m_bFrameRateConversions' Controls.OSD_ADJFRAMERATE);                  UpdateGammaContrastBrightness();                 // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_VIDEOPOS);                 ShowControl(GetID' (int)Controls.OSD_VIDEOPOS_LABEL);                 ShowControl(GetID' (int)Controls.OSD_NONINTERLEAVED);                 ShowControl(GetID' (int)Controls.OSD_NOCACHE);                 ShowControl(GetID' (int)Controls.OSD_ADJFRAMERATE);                 ShowControl(GetID' (int)Controls.OSD_SATURATIONLABEL);                 ShowControl(GetID' (int)Controls.OSD_SATURATION);                 ShowControl(GetID' (int)Controls.OSD_SHARPNESSLABEL);                 ShowControl(GetID' (int)Controls.OSD_SHARPNESS);                 ShowControl(GetID' (int)Controls.OSD_BRIGHTNESS);                 ShowControl(GetID' (int)Controls.OSD_BRIGHTNESSLABEL);                 ShowControl(GetID' (int)Controls.OSD_CONTRAST);                 ShowControl(GetID' (int)Controls.OSD_CONTRASTLABEL);                 ShowControl(GetID' (int)Controls.OSD_GAMMA);                 ShowControl(GetID' (int)Controls.OSD_GAMMALABEL);                 FocusControl(GetID' (int)Controls.OSD_VIDEOPOS' 0); // set focus to the first control in our group               }             }              if (iControl == (int)Controls.OSD_AUDIO)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_AUDIO); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 int iValue = g_Player.Volume;                 GUISliderControl pSlider = GetControl((int)Controls.OSD_AUDIOVOLUMESLIDER) as GUISliderControl;                 if (null != pSlider)                 {                   pSlider.Percentage = iValue; // Update our volume slider accordingly ...                 }                  // set the controls values                 GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_AVDELAY);                 pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                 pControl.SetRange(-20' 20);                 SetSliderValue(-20' 20' m_audioDelay' (int)Controls.OSD_AVDELAY);                  bool hasPostProc = (g_Player.HasPostprocessing || g_Player.HasAudioEngine);                 if (hasPostProc)                 {                   GUIPropertyManager.SetProperty("#VideoOSD.AudioVideoDelayPossible"' "true");                   pControl.FloatInterval = 1;                 }                 else                 {                    GUIPropertyManager.SetProperty("#VideoOSD.AudioVideoDelayPossible"' "false");                   pControl.FloatValue = 0;                   m_audioDelay = 0;                   pControl.FloatInterval = 0;                 }                  // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_AVDELAY);                 ShowControl(GetID' (int)Controls.OSD_AVDELAY_LABEL);                 ShowControl(GetID' (int)Controls.OSD_AUDIOSTREAM_LIST);                 ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER);                 ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER_LABEL);                  FocusControl(GetID' (int)Controls.OSD_AVDELAY' 0); // set focus to the first control in our group                 PopulateAudioStreams(); // populate the list control with audio streams for this video               }             }              return true;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,OnMessage,The following statement contains a magic number: switch (message.Message)       {         case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT: // fired when OSD is hidden           {             //if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(true);             // following line should stay. Problems with OSD not             // appearing are already fixed elsewhere             //for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)             //{             //  HideControl(GetID' i);             //}             Dispose();             GUIPropertyManager.SetProperty("#currentmodule"' GUIWindowManager.GetWindow(message.Param1).GetModuleName());             return true;           }         case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT: // fired when OSD is shown           {             // following line should stay. Problems with OSD not             // appearing are already fixed elsewhere             GUIPropertyManager.SetProperty("#currentmodule"' GetModuleName());              AllocResources();             // if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(false);             ResetAllControls(); // make sure the controls are positioned relevant to the OSD Y offset             isSubMenuVisible = false;             m_iActiveMenuButtonID = 0;             m_iActiveMenu = 0;             m_bNeedRefresh = false;             Reset();             FocusControl(GetID' (int)Controls.OSD_PLAY' 0); // set focus to play button by default when window is shown             QueueAnimation(AnimationType.WindowOpen);             for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)             {               ShowControl(GetID' i);             }             if (g_Player.Paused)             {               ToggleButton((int)Controls.OSD_PLAY' true);               // make sure play button is down (so it shows the pause symbol)             }             else             {               ToggleButton((int)Controls.OSD_PLAY' false); // make sure play button is up (so it shows the play symbol)             }             m_delayInterval = MediaPortal.Player.Subtitles.SubEngine.GetInstance().DelayInterval;             if (m_delayInterval > 0)               m_subtitleDelay = MediaPortal.Player.Subtitles.SubEngine.GetInstance().Delay / m_delayInterval;             if (g_Player.HasPostprocessing)             {               m_delayIntervalAudio = PostProcessingEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = PostProcessingEngine.GetInstance().AudioDelay/m_delayIntervalAudio;               }             }             else if (g_Player.HasAudioEngine)             {               m_delayIntervalAudio = AudioPostEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = AudioPostEngine.GetInstance().AudioDelay/m_delayIntervalAudio;               }             }              g_Player.UpdateMediaInfoProperties();             GUIPropertyManager.SetProperty("#TV.View.HasTeletext"' "False");             return true;           }          case GUIMessage.MessageType.GUI_MSG_SETFOCUS:           goto case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS;          case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS:           {             if (message.SenderControlId == 13)             {               return true;             }           }           break;          case GUIMessage.MessageType.GUI_MSG_CLICKED:           {             int iControl = message.SenderControlId; // get the ID of the control sending us a message              if (iControl >= (int)Controls.OSD_VOLUMESLIDER)               // one of the settings (sub menu) controls is sending us a message             {               Handle_ControlSetting(iControl' message.Param1);             }              if (iControl == (int)Controls.OSD_PAUSE)             {               if (g_Player.Paused)               {                 ToggleButton((int)Controls.OSD_PLAY' true);                 // make sure play button is down (so it shows the pause symbol)                                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_PLAY' false);                 // make sure play button is up (so it shows the play symbol)                 if (g_Player.Speed < 1) // are we not playing back at normal speed                 {                   ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                   ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 }                 else                 {                   ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                   if (g_Player.Speed == 1)                   {                     ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                   }                 }               }             }              if (iControl == (int)Controls.OSD_PLAY)             {               //TODO               int iSpeed = g_Player.Speed;               if (iSpeed != 1) // we're in ffwd or rewind mode               {                 g_Player.Speed = 1; // drop back to single speed                 ToggleButton((int)Controls.OSD_REWIND' false); // pop all the relevant                 ToggleButton((int)Controls.OSD_FFWD' false); // buttons back to                 ToggleButton((int)Controls.OSD_PLAY' false); // their up state               }               else               {                 g_Player.Pause(); // Pause/Un-Pause playback                 if (g_Player.Paused)                 {                   ToggleButton((int)Controls.OSD_PLAY' true);                   // make sure play button is down (so it shows the pause symbol)                 }                 else                 {                   ToggleButton((int)Controls.OSD_PLAY' false);                   // make sure play button is up (so it shows the play symbol)                 }               }             }              if (iControl == (int)Controls.OSD_STOP)             {               if (isSubMenuVisible) // sub menu currently active ?               {                 FocusControl(GetID' m_iActiveMenuButtonID' 0); // set focus to last menu button                 ToggleSubMenu(0' m_iActiveMenu); // hide the currently active sub-menu               }               //g_application.m_guiWindowFullScreen.m_bOSDVisible = false;	// toggle the OSD off so parent window can de-init               Log.Info("GUIVideoOSD:stop");               g_Player.Stop(); // close our media               //GUIWindowManager.ShowPreviousWindow();							// go back to the previous window             }              if (iControl == (int)Controls.OSD_REWIND)             {               if (g_Player.Paused)               {                 g_Player.Pause(); // Unpause playback               }                if (g_Player.Speed < 1) // are we not playing back at normal speed               {                 ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                 if (g_Player.Speed == 1)                 {                   ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 }               }             }              if (iControl == (int)Controls.OSD_FFWD)             {               if (g_Player.Paused)               {                 g_Player.Pause(); // Unpause playback               }                if (g_Player.Speed > 1) // are we not playing back at normal speed               {                 ToggleButton((int)Controls.OSD_FFWD' true); // make sure out button is in the down position                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 if (g_Player.Speed == 1)                 {                   ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                 }               }             }              if (iControl == (int)Controls.OSD_SKIPBWD)             {               if (g_Player.IsDVD && g_Player.Playing)               {                 Action actionPrevChapter = new Action(Action.ActionType.ACTION_PREV_CHAPTER' 0' 0);                 GUIGraphicsContext.OnAction(actionPrevChapter);               }               else               {                 playlistPlayer.PlayPrevious();               }               ToggleButton((int)Controls.OSD_SKIPBWD' false); // pop the button back to it's up state               return true;             }              if (iControl == (int)Controls.OSD_SKIPFWD)             {               if (g_Player.IsDVD && g_Player.Playing)               {                 Action actionPrevChapter = new Action(Action.ActionType.ACTION_NEXT_CHAPTER' 0' 0);                 GUIGraphicsContext.OnAction(actionPrevChapter);               }               else               {                 playlistPlayer.PlayNext();               }               ToggleButton((int)Controls.OSD_SKIPFWD' false); // pop the button back to it's up state               return true;             }              if (iControl == (int)Controls.OSD_MUTE)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VOL); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 int iValue = g_Player.Volume;                 GUISliderControl pSlider = GetControl((int)Controls.OSD_VOLUMESLIDER) as GUISliderControl;                 if (null != pSlider)                 {                   pSlider.Percentage = iValue; // Update our volume slider accordingly ...                 }                 ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER); // show the volume control                 ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER_LABEL);                 FocusControl(GetID' (int)Controls.OSD_VOLUMESLIDER' 0); // set focus to it               }               else // sub menu is off               {                 FocusControl(GetID' (int)Controls.OSD_MUTE' 0); // set focus to the mute button               }             }              if (iControl == (int)Controls.OSD_SUBTITLES)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_SUBTITLES); // hide or show the sub-menu               if (isSubMenuVisible)               {                 // set the controls values                 GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_SUBTITLE_DELAY);                 pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                 pControl.FloatInterval = 1;                 pControl.SetRange(-50' 50);                 SetSliderValue(-50' 50' m_subtitleDelay' (int)Controls.OSD_SUBTITLE_DELAY);                 SetCheckmarkValue(g_Player.EnableSubtitle' (int)Controls.OSD_SUBTITLE_ONOFF);                 SetCheckmarkValue(!g_Player.EnableForcedSubtitle' (int)Controls.OSD_SUBTITLE_FORCED_ONOFF);                 // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY_LABEL);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_ONOFF);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_FORCED_ONOFF);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_LIST);                  FocusControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY' 0);                 // set focus to the first control in our group                 PopulateSubTitles(); // populate the list control with subtitles for this video               }             }              if (iControl == (int)Controls.OSD_BOOKMARKS)             {               GUIVideoFullscreen videoWindow = (GUIVideoFullscreen)GUIWindowManager.GetWindow((int)Window.WINDOW_FULLSCREEN_VIDEO);               videoWindow.ShowBookmarksMenu();               ToggleButton((int)Controls.OSD_BOOKMARKS' false);             }              if (iControl == (int)Controls.OSD_VIDEO)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VIDEO); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 // set the controls values                 float fPercent = (float)(100 * (g_Player.CurrentPosition / g_Player.Duration));                 SetSliderValue(0.0f' 100.0f' (float)fPercent' (int)Controls.OSD_VIDEOPOS);                  bool hasPostProc = g_Player.HasPostprocessing;                 if (hasPostProc)                 {                   IPostProcessingEngine engine = PostProcessingEngine.GetInstance();                   SetCheckmarkValue(engine.EnablePostProcess' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    SetCheckmarkValue(engine.EnableResize' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    SetCheckmarkValue(engine.EnableCrop' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    SetCheckmarkValue(engine.EnableDeinterlace' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    UpdatePostProcessing();                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL_LABEL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL_LABEL);                 }                  //SetCheckmarkValue(g_stSettings.m_bNonInterleaved' Controls.OSD_NONINTERLEAVED);                 //SetCheckmarkValue(g_stSettings.m_bNoCache' Controls.OSD_NOCACHE);                 //SetCheckmarkValue(g_stSettings.m_bFrameRateConversions' Controls.OSD_ADJFRAMERATE);                  UpdateGammaContrastBrightness();                 // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_VIDEOPOS);                 ShowControl(GetID' (int)Controls.OSD_VIDEOPOS_LABEL);                 ShowControl(GetID' (int)Controls.OSD_NONINTERLEAVED);                 ShowControl(GetID' (int)Controls.OSD_NOCACHE);                 ShowControl(GetID' (int)Controls.OSD_ADJFRAMERATE);                 ShowControl(GetID' (int)Controls.OSD_SATURATIONLABEL);                 ShowControl(GetID' (int)Controls.OSD_SATURATION);                 ShowControl(GetID' (int)Controls.OSD_SHARPNESSLABEL);                 ShowControl(GetID' (int)Controls.OSD_SHARPNESS);                 ShowControl(GetID' (int)Controls.OSD_BRIGHTNESS);                 ShowControl(GetID' (int)Controls.OSD_BRIGHTNESSLABEL);                 ShowControl(GetID' (int)Controls.OSD_CONTRAST);                 ShowControl(GetID' (int)Controls.OSD_CONTRASTLABEL);                 ShowControl(GetID' (int)Controls.OSD_GAMMA);                 ShowControl(GetID' (int)Controls.OSD_GAMMALABEL);                 FocusControl(GetID' (int)Controls.OSD_VIDEOPOS' 0); // set focus to the first control in our group               }             }              if (iControl == (int)Controls.OSD_AUDIO)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_AUDIO); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 int iValue = g_Player.Volume;                 GUISliderControl pSlider = GetControl((int)Controls.OSD_AUDIOVOLUMESLIDER) as GUISliderControl;                 if (null != pSlider)                 {                   pSlider.Percentage = iValue; // Update our volume slider accordingly ...                 }                  // set the controls values                 GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_AVDELAY);                 pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                 pControl.SetRange(-20' 20);                 SetSliderValue(-20' 20' m_audioDelay' (int)Controls.OSD_AVDELAY);                  bool hasPostProc = (g_Player.HasPostprocessing || g_Player.HasAudioEngine);                 if (hasPostProc)                 {                   GUIPropertyManager.SetProperty("#VideoOSD.AudioVideoDelayPossible"' "true");                   pControl.FloatInterval = 1;                 }                 else                 {                    GUIPropertyManager.SetProperty("#VideoOSD.AudioVideoDelayPossible"' "false");                   pControl.FloatValue = 0;                   m_audioDelay = 0;                   pControl.FloatInterval = 0;                 }                  // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_AVDELAY);                 ShowControl(GetID' (int)Controls.OSD_AVDELAY_LABEL);                 ShowControl(GetID' (int)Controls.OSD_AUDIOSTREAM_LIST);                 ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER);                 ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER_LABEL);                  FocusControl(GetID' (int)Controls.OSD_AVDELAY' 0); // set focus to the first control in our group                 PopulateAudioStreams(); // populate the list control with audio streams for this video               }             }              return true;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,OnMessage,The following statement contains a magic number: switch (message.Message)       {         case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT: // fired when OSD is hidden           {             //if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(true);             // following line should stay. Problems with OSD not             // appearing are already fixed elsewhere             //for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)             //{             //  HideControl(GetID' i);             //}             Dispose();             GUIPropertyManager.SetProperty("#currentmodule"' GUIWindowManager.GetWindow(message.Param1).GetModuleName());             return true;           }         case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT: // fired when OSD is shown           {             // following line should stay. Problems with OSD not             // appearing are already fixed elsewhere             GUIPropertyManager.SetProperty("#currentmodule"' GetModuleName());              AllocResources();             // if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(false);             ResetAllControls(); // make sure the controls are positioned relevant to the OSD Y offset             isSubMenuVisible = false;             m_iActiveMenuButtonID = 0;             m_iActiveMenu = 0;             m_bNeedRefresh = false;             Reset();             FocusControl(GetID' (int)Controls.OSD_PLAY' 0); // set focus to play button by default when window is shown             QueueAnimation(AnimationType.WindowOpen);             for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)             {               ShowControl(GetID' i);             }             if (g_Player.Paused)             {               ToggleButton((int)Controls.OSD_PLAY' true);               // make sure play button is down (so it shows the pause symbol)             }             else             {               ToggleButton((int)Controls.OSD_PLAY' false); // make sure play button is up (so it shows the play symbol)             }             m_delayInterval = MediaPortal.Player.Subtitles.SubEngine.GetInstance().DelayInterval;             if (m_delayInterval > 0)               m_subtitleDelay = MediaPortal.Player.Subtitles.SubEngine.GetInstance().Delay / m_delayInterval;             if (g_Player.HasPostprocessing)             {               m_delayIntervalAudio = PostProcessingEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = PostProcessingEngine.GetInstance().AudioDelay/m_delayIntervalAudio;               }             }             else if (g_Player.HasAudioEngine)             {               m_delayIntervalAudio = AudioPostEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = AudioPostEngine.GetInstance().AudioDelay/m_delayIntervalAudio;               }             }              g_Player.UpdateMediaInfoProperties();             GUIPropertyManager.SetProperty("#TV.View.HasTeletext"' "False");             return true;           }          case GUIMessage.MessageType.GUI_MSG_SETFOCUS:           goto case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS;          case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS:           {             if (message.SenderControlId == 13)             {               return true;             }           }           break;          case GUIMessage.MessageType.GUI_MSG_CLICKED:           {             int iControl = message.SenderControlId; // get the ID of the control sending us a message              if (iControl >= (int)Controls.OSD_VOLUMESLIDER)               // one of the settings (sub menu) controls is sending us a message             {               Handle_ControlSetting(iControl' message.Param1);             }              if (iControl == (int)Controls.OSD_PAUSE)             {               if (g_Player.Paused)               {                 ToggleButton((int)Controls.OSD_PLAY' true);                 // make sure play button is down (so it shows the pause symbol)                                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_PLAY' false);                 // make sure play button is up (so it shows the play symbol)                 if (g_Player.Speed < 1) // are we not playing back at normal speed                 {                   ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                   ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 }                 else                 {                   ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                   if (g_Player.Speed == 1)                   {                     ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                   }                 }               }             }              if (iControl == (int)Controls.OSD_PLAY)             {               //TODO               int iSpeed = g_Player.Speed;               if (iSpeed != 1) // we're in ffwd or rewind mode               {                 g_Player.Speed = 1; // drop back to single speed                 ToggleButton((int)Controls.OSD_REWIND' false); // pop all the relevant                 ToggleButton((int)Controls.OSD_FFWD' false); // buttons back to                 ToggleButton((int)Controls.OSD_PLAY' false); // their up state               }               else               {                 g_Player.Pause(); // Pause/Un-Pause playback                 if (g_Player.Paused)                 {                   ToggleButton((int)Controls.OSD_PLAY' true);                   // make sure play button is down (so it shows the pause symbol)                 }                 else                 {                   ToggleButton((int)Controls.OSD_PLAY' false);                   // make sure play button is up (so it shows the play symbol)                 }               }             }              if (iControl == (int)Controls.OSD_STOP)             {               if (isSubMenuVisible) // sub menu currently active ?               {                 FocusControl(GetID' m_iActiveMenuButtonID' 0); // set focus to last menu button                 ToggleSubMenu(0' m_iActiveMenu); // hide the currently active sub-menu               }               //g_application.m_guiWindowFullScreen.m_bOSDVisible = false;	// toggle the OSD off so parent window can de-init               Log.Info("GUIVideoOSD:stop");               g_Player.Stop(); // close our media               //GUIWindowManager.ShowPreviousWindow();							// go back to the previous window             }              if (iControl == (int)Controls.OSD_REWIND)             {               if (g_Player.Paused)               {                 g_Player.Pause(); // Unpause playback               }                if (g_Player.Speed < 1) // are we not playing back at normal speed               {                 ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                 if (g_Player.Speed == 1)                 {                   ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 }               }             }              if (iControl == (int)Controls.OSD_FFWD)             {               if (g_Player.Paused)               {                 g_Player.Pause(); // Unpause playback               }                if (g_Player.Speed > 1) // are we not playing back at normal speed               {                 ToggleButton((int)Controls.OSD_FFWD' true); // make sure out button is in the down position                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 if (g_Player.Speed == 1)                 {                   ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                 }               }             }              if (iControl == (int)Controls.OSD_SKIPBWD)             {               if (g_Player.IsDVD && g_Player.Playing)               {                 Action actionPrevChapter = new Action(Action.ActionType.ACTION_PREV_CHAPTER' 0' 0);                 GUIGraphicsContext.OnAction(actionPrevChapter);               }               else               {                 playlistPlayer.PlayPrevious();               }               ToggleButton((int)Controls.OSD_SKIPBWD' false); // pop the button back to it's up state               return true;             }              if (iControl == (int)Controls.OSD_SKIPFWD)             {               if (g_Player.IsDVD && g_Player.Playing)               {                 Action actionPrevChapter = new Action(Action.ActionType.ACTION_NEXT_CHAPTER' 0' 0);                 GUIGraphicsContext.OnAction(actionPrevChapter);               }               else               {                 playlistPlayer.PlayNext();               }               ToggleButton((int)Controls.OSD_SKIPFWD' false); // pop the button back to it's up state               return true;             }              if (iControl == (int)Controls.OSD_MUTE)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VOL); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 int iValue = g_Player.Volume;                 GUISliderControl pSlider = GetControl((int)Controls.OSD_VOLUMESLIDER) as GUISliderControl;                 if (null != pSlider)                 {                   pSlider.Percentage = iValue; // Update our volume slider accordingly ...                 }                 ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER); // show the volume control                 ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER_LABEL);                 FocusControl(GetID' (int)Controls.OSD_VOLUMESLIDER' 0); // set focus to it               }               else // sub menu is off               {                 FocusControl(GetID' (int)Controls.OSD_MUTE' 0); // set focus to the mute button               }             }              if (iControl == (int)Controls.OSD_SUBTITLES)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_SUBTITLES); // hide or show the sub-menu               if (isSubMenuVisible)               {                 // set the controls values                 GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_SUBTITLE_DELAY);                 pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                 pControl.FloatInterval = 1;                 pControl.SetRange(-50' 50);                 SetSliderValue(-50' 50' m_subtitleDelay' (int)Controls.OSD_SUBTITLE_DELAY);                 SetCheckmarkValue(g_Player.EnableSubtitle' (int)Controls.OSD_SUBTITLE_ONOFF);                 SetCheckmarkValue(!g_Player.EnableForcedSubtitle' (int)Controls.OSD_SUBTITLE_FORCED_ONOFF);                 // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY_LABEL);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_ONOFF);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_FORCED_ONOFF);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_LIST);                  FocusControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY' 0);                 // set focus to the first control in our group                 PopulateSubTitles(); // populate the list control with subtitles for this video               }             }              if (iControl == (int)Controls.OSD_BOOKMARKS)             {               GUIVideoFullscreen videoWindow = (GUIVideoFullscreen)GUIWindowManager.GetWindow((int)Window.WINDOW_FULLSCREEN_VIDEO);               videoWindow.ShowBookmarksMenu();               ToggleButton((int)Controls.OSD_BOOKMARKS' false);             }              if (iControl == (int)Controls.OSD_VIDEO)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VIDEO); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 // set the controls values                 float fPercent = (float)(100 * (g_Player.CurrentPosition / g_Player.Duration));                 SetSliderValue(0.0f' 100.0f' (float)fPercent' (int)Controls.OSD_VIDEOPOS);                  bool hasPostProc = g_Player.HasPostprocessing;                 if (hasPostProc)                 {                   IPostProcessingEngine engine = PostProcessingEngine.GetInstance();                   SetCheckmarkValue(engine.EnablePostProcess' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    SetCheckmarkValue(engine.EnableResize' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    SetCheckmarkValue(engine.EnableCrop' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    SetCheckmarkValue(engine.EnableDeinterlace' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    UpdatePostProcessing();                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL_LABEL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL_LABEL);                 }                  //SetCheckmarkValue(g_stSettings.m_bNonInterleaved' Controls.OSD_NONINTERLEAVED);                 //SetCheckmarkValue(g_stSettings.m_bNoCache' Controls.OSD_NOCACHE);                 //SetCheckmarkValue(g_stSettings.m_bFrameRateConversions' Controls.OSD_ADJFRAMERATE);                  UpdateGammaContrastBrightness();                 // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_VIDEOPOS);                 ShowControl(GetID' (int)Controls.OSD_VIDEOPOS_LABEL);                 ShowControl(GetID' (int)Controls.OSD_NONINTERLEAVED);                 ShowControl(GetID' (int)Controls.OSD_NOCACHE);                 ShowControl(GetID' (int)Controls.OSD_ADJFRAMERATE);                 ShowControl(GetID' (int)Controls.OSD_SATURATIONLABEL);                 ShowControl(GetID' (int)Controls.OSD_SATURATION);                 ShowControl(GetID' (int)Controls.OSD_SHARPNESSLABEL);                 ShowControl(GetID' (int)Controls.OSD_SHARPNESS);                 ShowControl(GetID' (int)Controls.OSD_BRIGHTNESS);                 ShowControl(GetID' (int)Controls.OSD_BRIGHTNESSLABEL);                 ShowControl(GetID' (int)Controls.OSD_CONTRAST);                 ShowControl(GetID' (int)Controls.OSD_CONTRASTLABEL);                 ShowControl(GetID' (int)Controls.OSD_GAMMA);                 ShowControl(GetID' (int)Controls.OSD_GAMMALABEL);                 FocusControl(GetID' (int)Controls.OSD_VIDEOPOS' 0); // set focus to the first control in our group               }             }              if (iControl == (int)Controls.OSD_AUDIO)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_AUDIO); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 int iValue = g_Player.Volume;                 GUISliderControl pSlider = GetControl((int)Controls.OSD_AUDIOVOLUMESLIDER) as GUISliderControl;                 if (null != pSlider)                 {                   pSlider.Percentage = iValue; // Update our volume slider accordingly ...                 }                  // set the controls values                 GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_AVDELAY);                 pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                 pControl.SetRange(-20' 20);                 SetSliderValue(-20' 20' m_audioDelay' (int)Controls.OSD_AVDELAY);                  bool hasPostProc = (g_Player.HasPostprocessing || g_Player.HasAudioEngine);                 if (hasPostProc)                 {                   GUIPropertyManager.SetProperty("#VideoOSD.AudioVideoDelayPossible"' "true");                   pControl.FloatInterval = 1;                 }                 else                 {                    GUIPropertyManager.SetProperty("#VideoOSD.AudioVideoDelayPossible"' "false");                   pControl.FloatValue = 0;                   m_audioDelay = 0;                   pControl.FloatInterval = 0;                 }                  // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_AVDELAY);                 ShowControl(GetID' (int)Controls.OSD_AVDELAY_LABEL);                 ShowControl(GetID' (int)Controls.OSD_AUDIOSTREAM_LIST);                 ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER);                 ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER_LABEL);                  FocusControl(GetID' (int)Controls.OSD_AVDELAY' 0); // set focus to the first control in our group                 PopulateAudioStreams(); // populate the list control with audio streams for this video               }             }              return true;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,OnMessage,The following statement contains a magic number: switch (message.Message)       {         case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT: // fired when OSD is hidden           {             //if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(true);             // following line should stay. Problems with OSD not             // appearing are already fixed elsewhere             //for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)             //{             //  HideControl(GetID' i);             //}             Dispose();             GUIPropertyManager.SetProperty("#currentmodule"' GUIWindowManager.GetWindow(message.Param1).GetModuleName());             return true;           }         case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT: // fired when OSD is shown           {             // following line should stay. Problems with OSD not             // appearing are already fixed elsewhere             GUIPropertyManager.SetProperty("#currentmodule"' GetModuleName());              AllocResources();             // if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(false);             ResetAllControls(); // make sure the controls are positioned relevant to the OSD Y offset             isSubMenuVisible = false;             m_iActiveMenuButtonID = 0;             m_iActiveMenu = 0;             m_bNeedRefresh = false;             Reset();             FocusControl(GetID' (int)Controls.OSD_PLAY' 0); // set focus to play button by default when window is shown             QueueAnimation(AnimationType.WindowOpen);             for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)             {               ShowControl(GetID' i);             }             if (g_Player.Paused)             {               ToggleButton((int)Controls.OSD_PLAY' true);               // make sure play button is down (so it shows the pause symbol)             }             else             {               ToggleButton((int)Controls.OSD_PLAY' false); // make sure play button is up (so it shows the play symbol)             }             m_delayInterval = MediaPortal.Player.Subtitles.SubEngine.GetInstance().DelayInterval;             if (m_delayInterval > 0)               m_subtitleDelay = MediaPortal.Player.Subtitles.SubEngine.GetInstance().Delay / m_delayInterval;             if (g_Player.HasPostprocessing)             {               m_delayIntervalAudio = PostProcessingEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = PostProcessingEngine.GetInstance().AudioDelay/m_delayIntervalAudio;               }             }             else if (g_Player.HasAudioEngine)             {               m_delayIntervalAudio = AudioPostEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = AudioPostEngine.GetInstance().AudioDelay/m_delayIntervalAudio;               }             }              g_Player.UpdateMediaInfoProperties();             GUIPropertyManager.SetProperty("#TV.View.HasTeletext"' "False");             return true;           }          case GUIMessage.MessageType.GUI_MSG_SETFOCUS:           goto case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS;          case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS:           {             if (message.SenderControlId == 13)             {               return true;             }           }           break;          case GUIMessage.MessageType.GUI_MSG_CLICKED:           {             int iControl = message.SenderControlId; // get the ID of the control sending us a message              if (iControl >= (int)Controls.OSD_VOLUMESLIDER)               // one of the settings (sub menu) controls is sending us a message             {               Handle_ControlSetting(iControl' message.Param1);             }              if (iControl == (int)Controls.OSD_PAUSE)             {               if (g_Player.Paused)               {                 ToggleButton((int)Controls.OSD_PLAY' true);                 // make sure play button is down (so it shows the pause symbol)                                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_PLAY' false);                 // make sure play button is up (so it shows the play symbol)                 if (g_Player.Speed < 1) // are we not playing back at normal speed                 {                   ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                   ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 }                 else                 {                   ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                   if (g_Player.Speed == 1)                   {                     ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                   }                 }               }             }              if (iControl == (int)Controls.OSD_PLAY)             {               //TODO               int iSpeed = g_Player.Speed;               if (iSpeed != 1) // we're in ffwd or rewind mode               {                 g_Player.Speed = 1; // drop back to single speed                 ToggleButton((int)Controls.OSD_REWIND' false); // pop all the relevant                 ToggleButton((int)Controls.OSD_FFWD' false); // buttons back to                 ToggleButton((int)Controls.OSD_PLAY' false); // their up state               }               else               {                 g_Player.Pause(); // Pause/Un-Pause playback                 if (g_Player.Paused)                 {                   ToggleButton((int)Controls.OSD_PLAY' true);                   // make sure play button is down (so it shows the pause symbol)                 }                 else                 {                   ToggleButton((int)Controls.OSD_PLAY' false);                   // make sure play button is up (so it shows the play symbol)                 }               }             }              if (iControl == (int)Controls.OSD_STOP)             {               if (isSubMenuVisible) // sub menu currently active ?               {                 FocusControl(GetID' m_iActiveMenuButtonID' 0); // set focus to last menu button                 ToggleSubMenu(0' m_iActiveMenu); // hide the currently active sub-menu               }               //g_application.m_guiWindowFullScreen.m_bOSDVisible = false;	// toggle the OSD off so parent window can de-init               Log.Info("GUIVideoOSD:stop");               g_Player.Stop(); // close our media               //GUIWindowManager.ShowPreviousWindow();							// go back to the previous window             }              if (iControl == (int)Controls.OSD_REWIND)             {               if (g_Player.Paused)               {                 g_Player.Pause(); // Unpause playback               }                if (g_Player.Speed < 1) // are we not playing back at normal speed               {                 ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                 if (g_Player.Speed == 1)                 {                   ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 }               }             }              if (iControl == (int)Controls.OSD_FFWD)             {               if (g_Player.Paused)               {                 g_Player.Pause(); // Unpause playback               }                if (g_Player.Speed > 1) // are we not playing back at normal speed               {                 ToggleButton((int)Controls.OSD_FFWD' true); // make sure out button is in the down position                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 if (g_Player.Speed == 1)                 {                   ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                 }               }             }              if (iControl == (int)Controls.OSD_SKIPBWD)             {               if (g_Player.IsDVD && g_Player.Playing)               {                 Action actionPrevChapter = new Action(Action.ActionType.ACTION_PREV_CHAPTER' 0' 0);                 GUIGraphicsContext.OnAction(actionPrevChapter);               }               else               {                 playlistPlayer.PlayPrevious();               }               ToggleButton((int)Controls.OSD_SKIPBWD' false); // pop the button back to it's up state               return true;             }              if (iControl == (int)Controls.OSD_SKIPFWD)             {               if (g_Player.IsDVD && g_Player.Playing)               {                 Action actionPrevChapter = new Action(Action.ActionType.ACTION_NEXT_CHAPTER' 0' 0);                 GUIGraphicsContext.OnAction(actionPrevChapter);               }               else               {                 playlistPlayer.PlayNext();               }               ToggleButton((int)Controls.OSD_SKIPFWD' false); // pop the button back to it's up state               return true;             }              if (iControl == (int)Controls.OSD_MUTE)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VOL); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 int iValue = g_Player.Volume;                 GUISliderControl pSlider = GetControl((int)Controls.OSD_VOLUMESLIDER) as GUISliderControl;                 if (null != pSlider)                 {                   pSlider.Percentage = iValue; // Update our volume slider accordingly ...                 }                 ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER); // show the volume control                 ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER_LABEL);                 FocusControl(GetID' (int)Controls.OSD_VOLUMESLIDER' 0); // set focus to it               }               else // sub menu is off               {                 FocusControl(GetID' (int)Controls.OSD_MUTE' 0); // set focus to the mute button               }             }              if (iControl == (int)Controls.OSD_SUBTITLES)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_SUBTITLES); // hide or show the sub-menu               if (isSubMenuVisible)               {                 // set the controls values                 GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_SUBTITLE_DELAY);                 pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                 pControl.FloatInterval = 1;                 pControl.SetRange(-50' 50);                 SetSliderValue(-50' 50' m_subtitleDelay' (int)Controls.OSD_SUBTITLE_DELAY);                 SetCheckmarkValue(g_Player.EnableSubtitle' (int)Controls.OSD_SUBTITLE_ONOFF);                 SetCheckmarkValue(!g_Player.EnableForcedSubtitle' (int)Controls.OSD_SUBTITLE_FORCED_ONOFF);                 // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY_LABEL);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_ONOFF);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_FORCED_ONOFF);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_LIST);                  FocusControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY' 0);                 // set focus to the first control in our group                 PopulateSubTitles(); // populate the list control with subtitles for this video               }             }              if (iControl == (int)Controls.OSD_BOOKMARKS)             {               GUIVideoFullscreen videoWindow = (GUIVideoFullscreen)GUIWindowManager.GetWindow((int)Window.WINDOW_FULLSCREEN_VIDEO);               videoWindow.ShowBookmarksMenu();               ToggleButton((int)Controls.OSD_BOOKMARKS' false);             }              if (iControl == (int)Controls.OSD_VIDEO)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VIDEO); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 // set the controls values                 float fPercent = (float)(100 * (g_Player.CurrentPosition / g_Player.Duration));                 SetSliderValue(0.0f' 100.0f' (float)fPercent' (int)Controls.OSD_VIDEOPOS);                  bool hasPostProc = g_Player.HasPostprocessing;                 if (hasPostProc)                 {                   IPostProcessingEngine engine = PostProcessingEngine.GetInstance();                   SetCheckmarkValue(engine.EnablePostProcess' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    SetCheckmarkValue(engine.EnableResize' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    SetCheckmarkValue(engine.EnableCrop' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    SetCheckmarkValue(engine.EnableDeinterlace' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    UpdatePostProcessing();                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL_LABEL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL_LABEL);                 }                  //SetCheckmarkValue(g_stSettings.m_bNonInterleaved' Controls.OSD_NONINTERLEAVED);                 //SetCheckmarkValue(g_stSettings.m_bNoCache' Controls.OSD_NOCACHE);                 //SetCheckmarkValue(g_stSettings.m_bFrameRateConversions' Controls.OSD_ADJFRAMERATE);                  UpdateGammaContrastBrightness();                 // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_VIDEOPOS);                 ShowControl(GetID' (int)Controls.OSD_VIDEOPOS_LABEL);                 ShowControl(GetID' (int)Controls.OSD_NONINTERLEAVED);                 ShowControl(GetID' (int)Controls.OSD_NOCACHE);                 ShowControl(GetID' (int)Controls.OSD_ADJFRAMERATE);                 ShowControl(GetID' (int)Controls.OSD_SATURATIONLABEL);                 ShowControl(GetID' (int)Controls.OSD_SATURATION);                 ShowControl(GetID' (int)Controls.OSD_SHARPNESSLABEL);                 ShowControl(GetID' (int)Controls.OSD_SHARPNESS);                 ShowControl(GetID' (int)Controls.OSD_BRIGHTNESS);                 ShowControl(GetID' (int)Controls.OSD_BRIGHTNESSLABEL);                 ShowControl(GetID' (int)Controls.OSD_CONTRAST);                 ShowControl(GetID' (int)Controls.OSD_CONTRASTLABEL);                 ShowControl(GetID' (int)Controls.OSD_GAMMA);                 ShowControl(GetID' (int)Controls.OSD_GAMMALABEL);                 FocusControl(GetID' (int)Controls.OSD_VIDEOPOS' 0); // set focus to the first control in our group               }             }              if (iControl == (int)Controls.OSD_AUDIO)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_AUDIO); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 int iValue = g_Player.Volume;                 GUISliderControl pSlider = GetControl((int)Controls.OSD_AUDIOVOLUMESLIDER) as GUISliderControl;                 if (null != pSlider)                 {                   pSlider.Percentage = iValue; // Update our volume slider accordingly ...                 }                  // set the controls values                 GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_AVDELAY);                 pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                 pControl.SetRange(-20' 20);                 SetSliderValue(-20' 20' m_audioDelay' (int)Controls.OSD_AVDELAY);                  bool hasPostProc = (g_Player.HasPostprocessing || g_Player.HasAudioEngine);                 if (hasPostProc)                 {                   GUIPropertyManager.SetProperty("#VideoOSD.AudioVideoDelayPossible"' "true");                   pControl.FloatInterval = 1;                 }                 else                 {                    GUIPropertyManager.SetProperty("#VideoOSD.AudioVideoDelayPossible"' "false");                   pControl.FloatValue = 0;                   m_audioDelay = 0;                   pControl.FloatInterval = 0;                 }                  // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_AVDELAY);                 ShowControl(GetID' (int)Controls.OSD_AVDELAY_LABEL);                 ShowControl(GetID' (int)Controls.OSD_AUDIOSTREAM_LIST);                 ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER);                 ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER_LABEL);                  FocusControl(GetID' (int)Controls.OSD_AVDELAY' 0); // set focus to the first control in our group                 PopulateAudioStreams(); // populate the list control with audio streams for this video               }             }              return true;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,OnMessage,The following statement contains a magic number: switch (message.Message)       {         case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT: // fired when OSD is hidden           {             //if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(true);             // following line should stay. Problems with OSD not             // appearing are already fixed elsewhere             //for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)             //{             //  HideControl(GetID' i);             //}             Dispose();             GUIPropertyManager.SetProperty("#currentmodule"' GUIWindowManager.GetWindow(message.Param1).GetModuleName());             return true;           }         case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT: // fired when OSD is shown           {             // following line should stay. Problems with OSD not             // appearing are already fixed elsewhere             GUIPropertyManager.SetProperty("#currentmodule"' GetModuleName());              AllocResources();             // if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(false);             ResetAllControls(); // make sure the controls are positioned relevant to the OSD Y offset             isSubMenuVisible = false;             m_iActiveMenuButtonID = 0;             m_iActiveMenu = 0;             m_bNeedRefresh = false;             Reset();             FocusControl(GetID' (int)Controls.OSD_PLAY' 0); // set focus to play button by default when window is shown             QueueAnimation(AnimationType.WindowOpen);             for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)             {               ShowControl(GetID' i);             }             if (g_Player.Paused)             {               ToggleButton((int)Controls.OSD_PLAY' true);               // make sure play button is down (so it shows the pause symbol)             }             else             {               ToggleButton((int)Controls.OSD_PLAY' false); // make sure play button is up (so it shows the play symbol)             }             m_delayInterval = MediaPortal.Player.Subtitles.SubEngine.GetInstance().DelayInterval;             if (m_delayInterval > 0)               m_subtitleDelay = MediaPortal.Player.Subtitles.SubEngine.GetInstance().Delay / m_delayInterval;             if (g_Player.HasPostprocessing)             {               m_delayIntervalAudio = PostProcessingEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = PostProcessingEngine.GetInstance().AudioDelay/m_delayIntervalAudio;               }             }             else if (g_Player.HasAudioEngine)             {               m_delayIntervalAudio = AudioPostEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = AudioPostEngine.GetInstance().AudioDelay/m_delayIntervalAudio;               }             }              g_Player.UpdateMediaInfoProperties();             GUIPropertyManager.SetProperty("#TV.View.HasTeletext"' "False");             return true;           }          case GUIMessage.MessageType.GUI_MSG_SETFOCUS:           goto case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS;          case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS:           {             if (message.SenderControlId == 13)             {               return true;             }           }           break;          case GUIMessage.MessageType.GUI_MSG_CLICKED:           {             int iControl = message.SenderControlId; // get the ID of the control sending us a message              if (iControl >= (int)Controls.OSD_VOLUMESLIDER)               // one of the settings (sub menu) controls is sending us a message             {               Handle_ControlSetting(iControl' message.Param1);             }              if (iControl == (int)Controls.OSD_PAUSE)             {               if (g_Player.Paused)               {                 ToggleButton((int)Controls.OSD_PLAY' true);                 // make sure play button is down (so it shows the pause symbol)                                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_PLAY' false);                 // make sure play button is up (so it shows the play symbol)                 if (g_Player.Speed < 1) // are we not playing back at normal speed                 {                   ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                   ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 }                 else                 {                   ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                   if (g_Player.Speed == 1)                   {                     ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                   }                 }               }             }              if (iControl == (int)Controls.OSD_PLAY)             {               //TODO               int iSpeed = g_Player.Speed;               if (iSpeed != 1) // we're in ffwd or rewind mode               {                 g_Player.Speed = 1; // drop back to single speed                 ToggleButton((int)Controls.OSD_REWIND' false); // pop all the relevant                 ToggleButton((int)Controls.OSD_FFWD' false); // buttons back to                 ToggleButton((int)Controls.OSD_PLAY' false); // their up state               }               else               {                 g_Player.Pause(); // Pause/Un-Pause playback                 if (g_Player.Paused)                 {                   ToggleButton((int)Controls.OSD_PLAY' true);                   // make sure play button is down (so it shows the pause symbol)                 }                 else                 {                   ToggleButton((int)Controls.OSD_PLAY' false);                   // make sure play button is up (so it shows the play symbol)                 }               }             }              if (iControl == (int)Controls.OSD_STOP)             {               if (isSubMenuVisible) // sub menu currently active ?               {                 FocusControl(GetID' m_iActiveMenuButtonID' 0); // set focus to last menu button                 ToggleSubMenu(0' m_iActiveMenu); // hide the currently active sub-menu               }               //g_application.m_guiWindowFullScreen.m_bOSDVisible = false;	// toggle the OSD off so parent window can de-init               Log.Info("GUIVideoOSD:stop");               g_Player.Stop(); // close our media               //GUIWindowManager.ShowPreviousWindow();							// go back to the previous window             }              if (iControl == (int)Controls.OSD_REWIND)             {               if (g_Player.Paused)               {                 g_Player.Pause(); // Unpause playback               }                if (g_Player.Speed < 1) // are we not playing back at normal speed               {                 ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                 if (g_Player.Speed == 1)                 {                   ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 }               }             }              if (iControl == (int)Controls.OSD_FFWD)             {               if (g_Player.Paused)               {                 g_Player.Pause(); // Unpause playback               }                if (g_Player.Speed > 1) // are we not playing back at normal speed               {                 ToggleButton((int)Controls.OSD_FFWD' true); // make sure out button is in the down position                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 if (g_Player.Speed == 1)                 {                   ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                 }               }             }              if (iControl == (int)Controls.OSD_SKIPBWD)             {               if (g_Player.IsDVD && g_Player.Playing)               {                 Action actionPrevChapter = new Action(Action.ActionType.ACTION_PREV_CHAPTER' 0' 0);                 GUIGraphicsContext.OnAction(actionPrevChapter);               }               else               {                 playlistPlayer.PlayPrevious();               }               ToggleButton((int)Controls.OSD_SKIPBWD' false); // pop the button back to it's up state               return true;             }              if (iControl == (int)Controls.OSD_SKIPFWD)             {               if (g_Player.IsDVD && g_Player.Playing)               {                 Action actionPrevChapter = new Action(Action.ActionType.ACTION_NEXT_CHAPTER' 0' 0);                 GUIGraphicsContext.OnAction(actionPrevChapter);               }               else               {                 playlistPlayer.PlayNext();               }               ToggleButton((int)Controls.OSD_SKIPFWD' false); // pop the button back to it's up state               return true;             }              if (iControl == (int)Controls.OSD_MUTE)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VOL); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 int iValue = g_Player.Volume;                 GUISliderControl pSlider = GetControl((int)Controls.OSD_VOLUMESLIDER) as GUISliderControl;                 if (null != pSlider)                 {                   pSlider.Percentage = iValue; // Update our volume slider accordingly ...                 }                 ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER); // show the volume control                 ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER_LABEL);                 FocusControl(GetID' (int)Controls.OSD_VOLUMESLIDER' 0); // set focus to it               }               else // sub menu is off               {                 FocusControl(GetID' (int)Controls.OSD_MUTE' 0); // set focus to the mute button               }             }              if (iControl == (int)Controls.OSD_SUBTITLES)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_SUBTITLES); // hide or show the sub-menu               if (isSubMenuVisible)               {                 // set the controls values                 GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_SUBTITLE_DELAY);                 pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                 pControl.FloatInterval = 1;                 pControl.SetRange(-50' 50);                 SetSliderValue(-50' 50' m_subtitleDelay' (int)Controls.OSD_SUBTITLE_DELAY);                 SetCheckmarkValue(g_Player.EnableSubtitle' (int)Controls.OSD_SUBTITLE_ONOFF);                 SetCheckmarkValue(!g_Player.EnableForcedSubtitle' (int)Controls.OSD_SUBTITLE_FORCED_ONOFF);                 // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY_LABEL);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_ONOFF);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_FORCED_ONOFF);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_LIST);                  FocusControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY' 0);                 // set focus to the first control in our group                 PopulateSubTitles(); // populate the list control with subtitles for this video               }             }              if (iControl == (int)Controls.OSD_BOOKMARKS)             {               GUIVideoFullscreen videoWindow = (GUIVideoFullscreen)GUIWindowManager.GetWindow((int)Window.WINDOW_FULLSCREEN_VIDEO);               videoWindow.ShowBookmarksMenu();               ToggleButton((int)Controls.OSD_BOOKMARKS' false);             }              if (iControl == (int)Controls.OSD_VIDEO)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VIDEO); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 // set the controls values                 float fPercent = (float)(100 * (g_Player.CurrentPosition / g_Player.Duration));                 SetSliderValue(0.0f' 100.0f' (float)fPercent' (int)Controls.OSD_VIDEOPOS);                  bool hasPostProc = g_Player.HasPostprocessing;                 if (hasPostProc)                 {                   IPostProcessingEngine engine = PostProcessingEngine.GetInstance();                   SetCheckmarkValue(engine.EnablePostProcess' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    SetCheckmarkValue(engine.EnableResize' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    SetCheckmarkValue(engine.EnableCrop' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    SetCheckmarkValue(engine.EnableDeinterlace' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    UpdatePostProcessing();                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL_LABEL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL_LABEL);                 }                  //SetCheckmarkValue(g_stSettings.m_bNonInterleaved' Controls.OSD_NONINTERLEAVED);                 //SetCheckmarkValue(g_stSettings.m_bNoCache' Controls.OSD_NOCACHE);                 //SetCheckmarkValue(g_stSettings.m_bFrameRateConversions' Controls.OSD_ADJFRAMERATE);                  UpdateGammaContrastBrightness();                 // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_VIDEOPOS);                 ShowControl(GetID' (int)Controls.OSD_VIDEOPOS_LABEL);                 ShowControl(GetID' (int)Controls.OSD_NONINTERLEAVED);                 ShowControl(GetID' (int)Controls.OSD_NOCACHE);                 ShowControl(GetID' (int)Controls.OSD_ADJFRAMERATE);                 ShowControl(GetID' (int)Controls.OSD_SATURATIONLABEL);                 ShowControl(GetID' (int)Controls.OSD_SATURATION);                 ShowControl(GetID' (int)Controls.OSD_SHARPNESSLABEL);                 ShowControl(GetID' (int)Controls.OSD_SHARPNESS);                 ShowControl(GetID' (int)Controls.OSD_BRIGHTNESS);                 ShowControl(GetID' (int)Controls.OSD_BRIGHTNESSLABEL);                 ShowControl(GetID' (int)Controls.OSD_CONTRAST);                 ShowControl(GetID' (int)Controls.OSD_CONTRASTLABEL);                 ShowControl(GetID' (int)Controls.OSD_GAMMA);                 ShowControl(GetID' (int)Controls.OSD_GAMMALABEL);                 FocusControl(GetID' (int)Controls.OSD_VIDEOPOS' 0); // set focus to the first control in our group               }             }              if (iControl == (int)Controls.OSD_AUDIO)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_AUDIO); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 int iValue = g_Player.Volume;                 GUISliderControl pSlider = GetControl((int)Controls.OSD_AUDIOVOLUMESLIDER) as GUISliderControl;                 if (null != pSlider)                 {                   pSlider.Percentage = iValue; // Update our volume slider accordingly ...                 }                  // set the controls values                 GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_AVDELAY);                 pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                 pControl.SetRange(-20' 20);                 SetSliderValue(-20' 20' m_audioDelay' (int)Controls.OSD_AVDELAY);                  bool hasPostProc = (g_Player.HasPostprocessing || g_Player.HasAudioEngine);                 if (hasPostProc)                 {                   GUIPropertyManager.SetProperty("#VideoOSD.AudioVideoDelayPossible"' "true");                   pControl.FloatInterval = 1;                 }                 else                 {                    GUIPropertyManager.SetProperty("#VideoOSD.AudioVideoDelayPossible"' "false");                   pControl.FloatValue = 0;                   m_audioDelay = 0;                   pControl.FloatInterval = 0;                 }                  // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_AVDELAY);                 ShowControl(GetID' (int)Controls.OSD_AVDELAY_LABEL);                 ShowControl(GetID' (int)Controls.OSD_AUDIOSTREAM_LIST);                 ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER);                 ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER_LABEL);                  FocusControl(GetID' (int)Controls.OSD_AVDELAY' 0); // set focus to the first control in our group                 PopulateAudioStreams(); // populate the list control with audio streams for this video               }             }              return true;           }       }
Magic Number,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,UpdateGammaContrastBrightness,The following statement contains a magic number: SetSliderValue(0.0f' 100.0f' (float)fBrightNess' (int)Controls.OSD_BRIGHTNESS);
Magic Number,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,UpdateGammaContrastBrightness,The following statement contains a magic number: SetSliderValue(0.0f' 100.0f' (float)fContrast' (int)Controls.OSD_CONTRAST);
Magic Number,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,UpdateGammaContrastBrightness,The following statement contains a magic number: SetSliderValue(0.0f' 100.0f' (float)fGamma' (int)Controls.OSD_GAMMA);
Magic Number,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,UpdateGammaContrastBrightness,The following statement contains a magic number: SetSliderValue(0.0f' 100.0f' (float)fSaturation' (int)Controls.OSD_SATURATION);
Magic Number,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,UpdateGammaContrastBrightness,The following statement contains a magic number: SetSliderValue(0.0f' 100.0f' (float)fSharpness' (int)Controls.OSD_SHARPNESS);
Magic Number,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,UpdatePostProcessing,The following statement contains a magic number: SetSliderValue(0.0f' 100.0f' (float)engine.CropVertical' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL);
Magic Number,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,UpdatePostProcessing,The following statement contains a magic number: SetSliderValue(0.0f' 100.0f' (float)engine.CropHorizontal' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL);
Magic Number,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,ToggleSubMenu,The following statement contains a magic number: iX = (pButton.XPosition + (pButton.Width / 2));
Magic Number,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,ToggleSubMenu,The following statement contains a magic number: pImgNib.SetPosition(iX - (pImgNib.TextureWidth / 2)' iY - pImgNib.TextureHeight);
Magic Number,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,PopulateBookmarks,The following statement contains a magic number: int hh = (int)(lPTS1 / 3600) % 100;
Magic Number,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,PopulateBookmarks,The following statement contains a magic number: int hh = (int)(lPTS1 / 3600) % 100;
Magic Number,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,PopulateBookmarks,The following statement contains a magic number: int mm = (int)((lPTS1 / 60) % 60);
Magic Number,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,PopulateBookmarks,The following statement contains a magic number: int mm = (int)((lPTS1 / 60) % 60);
Magic Number,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,PopulateBookmarks,The following statement contains a magic number: int ss = (int)((lPTS1 / 1) % 60);
Magic Number,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,PopulateAudioStreams,The following statement contains a magic number: string strLabel = GUILocalizeStrings.Get(460);
Magic Number,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,PopulateAudioStreams,The following statement contains a magic number: string strActiveLabel = GUILocalizeStrings.Get(461);
Magic Number,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,PopulateSubTitles,The following statement contains a magic number: string strLabel = GUILocalizeStrings.Get(462);
Magic Number,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,PopulateSubTitles,The following statement contains a magic number: string strActiveLabel = GUILocalizeStrings.Get(461);
Magic Number,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,ResetAllControls,The following statement contains a magic number: dwPosY < (int)100
Magic Number,MediaPortal.GUI.Video,GUIVideoOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOverlay.cs,PostRender,The following statement contains a magic number: iLayer != 2
Magic Number,MediaPortal.GUI.Video,GUIVideoOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOverlay.cs,SetCurrentFile,The following statement contains a magic number: movie.ThumbURL = movie.ThumbURL.Substring(7);
Magic Number,MediaPortal.GUI.Video,GUIVideoOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOverlay.cs,RenderLayer,The following statement contains a magic number: PostRender(timePassed' 2);
Magic Number,MediaPortal.GUI.Video,GUIVideoTopOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoTopOverlay.cs,RenderLayer,The following statement contains a magic number: PostRender(timePassed' 2);
Magic Number,MediaPortal.GUI.Video,SelectBDHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\SelectBDHandler.cs,OnPlayBD,The following statement contains a magic number: Util.Utils.getDriveType(drive) == 5
Magic Number,MediaPortal.GUI.Video,SelectBDHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\SelectBDHandler.cs,OnPlayBD,The following statement contains a magic number: dlgOk.SetHeading(3);
Magic Number,MediaPortal.GUI.Video,SelectBDHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\SelectBDHandler.cs,OnPlayBD,The following statement contains a magic number: dlgOk.SetLine(1' 219);
Duplicate Code,MediaPortal.GUI.Music,MusicViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicViewHandler.cs,Execute,The method contains a code clone-set at the following line numbers (starting from the method definition): ((250' 274)' (298' 322))
Duplicate Code,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The method contains a code clone-set at the following line numbers (starting from the method definition): ((281' 311)' (336' 366))
Duplicate Code,MediaPortal.GUI.Video,GUIVideoOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOverlay.cs,SetCurrentFile,The method contains a code clone-set at the following line numbers (starting from the method definition): ((234' 254)' (258' 278))
Missing Default,Common.GUIPlugins,DelayedFileSystemWatcher,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\DelayedFileSystemWatcher.cs,RaiseEvents,The following switch statement is missing a default case: switch (de.Args.ChangeType)            {              case WatcherChangeTypes.Changed:                this.OnChanged(de.Args);                break;              case WatcherChangeTypes.Created:                this.OnCreated(de.Args);                break;              case WatcherChangeTypes.Deleted:                this.OnDeleted(de.Args);                break;              case WatcherChangeTypes.Renamed:                this.OnRenamed(de.Args as RenamedEventArgs);                break;            }
Missing Default,Common.GUIPlugins,WindowPluginBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\WindowPluginBase.cs,GetLayoutNumber,The following switch statement is missing a default case: switch (s.Trim().ToLowerInvariant())        {          case "list":            return GUIFacadeControl.Layout.List;          case "icons":          case "smallicons":            return GUIFacadeControl.Layout.SmallIcons;          case "big icons":          case "largeicons":            return GUIFacadeControl.Layout.LargeIcons;          case "albums":          case "albumview":            return GUIFacadeControl.Layout.AlbumView;          case "filmstrip":            return GUIFacadeControl.Layout.Filmstrip;          case "playlist":            return GUIFacadeControl.Layout.Playlist;          case "coverflow":          case "cover flow":            return GUIFacadeControl.Layout.CoverFlow;        }
Missing Default,MediaPortal.GUI.Music,GUICoverArtGrabberResults,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUICoverArtGrabberResults.cs,OnClicked,The following switch statement is missing a default case: switch (controlId)        {          case (int)ControlIDs.LIST_ALBUM:            {              int selectedItem = listView.SelectedListItemIndex;                if (selectedItem >= amazonWS.AlbumCount)              {                Log.Info("Cover art grabber:user selected item #{0}"' listView.SelectedListItemIndex);                  _CancelledByUser = false;                _SelectedAlbum = null;                PageDestroy();                return;              }                _SelectedAlbum = (AlbumInfo)amazonWS.AlbumInfoList[selectedItem];              PageDestroy();              break;            }            case (int)ControlIDs.BTN_SKIP:            {              Log.Info("Cover art grabber:[{0}-{1}] skipped by user"' _Artist' _Album);                _CancelledByUser = false;              _SelectedAlbum = null;              PageDestroy();              break;            }            case (int)ControlIDs.BTN_CANCEL:            {              Log.Info("Cover art grabber:user cancelled out of grab results");                _CancelledByUser = true;              PageDestroy();              break;            }        }
Missing Default,MediaPortal.GUI.Music,GUICoverArtGrabberResults,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUICoverArtGrabberResults.cs,SetButtonVisibility,The following switch statement is missing a default case: switch (_SearchMode)        {          case SearchDepthMode.Album:            {              this.btnCancel.Visible = true;              this.btnSkip.Visible = false;              break;            }            case SearchDepthMode.Share:            {              this.btnCancel.Visible = true;              this.btnSkip.Visible = true;              break;            }        }
Missing Default,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,GetSortMethod,The following switch statement is missing a default case: switch (s.Trim().ToLowerInvariant())        {          case "name":            return MusicSort.SortMethod.Name;          case "date":            return MusicSort.SortMethod.Date;          case "size":            return MusicSort.SortMethod.Size;          case "track":            return MusicSort.SortMethod.Track;          case "duration":            return MusicSort.SortMethod.Duration;          case "title":            return MusicSort.SortMethod.Title;          case "artist":            return MusicSort.SortMethod.Artist;          case "album":            return MusicSort.SortMethod.Album;          case "filename":            return MusicSort.SortMethod.Filename;          case "albumartist":            return MusicSort.SortMethod.AlbumArtist;          case "rating":            return MusicSort.SortMethod.Rating;          case "year":            return MusicSort.SortMethod.Year;          case "disc#":            return MusicSort.SortMethod.DiscID;          case "composer":            return MusicSort.SortMethod.Composer;          case "timesplayed":            return MusicSort.SortMethod.TimesPlayed;        }
Missing Default,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnPlaybackChangedOrStopped,The following switch statement is missing a default case: switch (_resumeSelect)              {                case "Genre":                  value = tag.Genre;                  break;                  case "Title":                  value = tag.Title;                  break;                  case "Filename":                  value = tag.FileName;                  break;                  case "Album":                  value = tag.Album;                  break;                  case "Artist":                  value = tag.Artist;                  break;                  case "AlbumArtist":                  value = tag.AlbumArtist;                  break;                  case "Composer":                  value = tag.Composer;                  break;                  case "Conductor":                  value = tag.Conductor;                  break;              }
Missing Default,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,UpdateButtonStates,The following switch statement is missing a default case: switch (CurrentSortMethod)        {          case MusicSort.SortMethod.Name:            strLine = GUILocalizeStrings.Get(103);            break;          case MusicSort.SortMethod.Date:            strLine = GUILocalizeStrings.Get(104);            break;          case MusicSort.SortMethod.Year:            strLine = GUILocalizeStrings.Get(366);            break;          case MusicSort.SortMethod.Size:            strLine = GUILocalizeStrings.Get(105);            break;          case MusicSort.SortMethod.Track:            strLine = GUILocalizeStrings.Get(266);            break;          case MusicSort.SortMethod.Duration:            strLine = GUILocalizeStrings.Get(267);            break;          case MusicSort.SortMethod.Title:            strLine = GUILocalizeStrings.Get(268);            break;          case MusicSort.SortMethod.Artist:            strLine = GUILocalizeStrings.Get(269);            break;          case MusicSort.SortMethod.Album:            strLine = GUILocalizeStrings.Get(270);            break;          case MusicSort.SortMethod.Filename:            strLine = GUILocalizeStrings.Get(363);            break;          case MusicSort.SortMethod.Rating:            strLine = GUILocalizeStrings.Get(367);            break;          case MusicSort.SortMethod.AlbumArtist:            strLine = GUILocalizeStrings.Get(269); // Also display Artist for AlbumArtist            break;          case MusicSort.SortMethod.DiscID:            strLine = GUILocalizeStrings.Get(1205);            break;          case MusicSort.SortMethod.Composer:            strLine = GUILocalizeStrings.Get(1208);            break;          case MusicSort.SortMethod.TimesPlayed:            strLine = GUILocalizeStrings.Get(1209);            break;        }
Missing Default,MediaPortal.GUI.Music,GUIMusicBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicBaseWindow.cs,OnShowSort,The following switch statement is missing a default case: switch (CurrentSortMethod)        {          case MusicSort.SortMethod.Name:            dlg.SelectedLabel = 0;  // Value is the order in which the option was added to the menu above.            break;          case MusicSort.SortMethod.Artist:          case MusicSort.SortMethod.AlbumArtist:            dlg.SelectedLabel = 1;            break;          case MusicSort.SortMethod.Album:            dlg.SelectedLabel = 2;            break;          case MusicSort.SortMethod.Track:            dlg.SelectedLabel = 3;            break;          case MusicSort.SortMethod.Title:            dlg.SelectedLabel = 4;            break;          case MusicSort.SortMethod.Filename:            dlg.SelectedLabel = 5;            break;          case MusicSort.SortMethod.Rating:            dlg.SelectedLabel = 6;            break;          case MusicSort.SortMethod.Duration:            dlg.SelectedLabel = 7;            break;          case MusicSort.SortMethod.Size:            dlg.SelectedLabel = 8;            break;          case MusicSort.SortMethod.Date:            dlg.SelectedLabel = 9;            break;        }
Missing Default,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)        {            case Action.ActionType.ACTION_STOP:              if (GUIWindowManager.ActiveWindow == GetID && !_isStopped)            {              _isStopped = true;              Action act = new Action();              act.wID = Action.ActionType.ACTION_PREVIOUS_MENU;              GUIGraphicsContext.OnAction(act);            }            break;            // Since a ACTION_STOP action clears the player and CurrentPlaylistType type            // we need a way to restart playback after an ACTION_STOP has been received          case Action.ActionType.ACTION_MUSIC_PLAY:          case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_PAUSE:          case Action.ActionType.ACTION_PREV_ITEM:            if ((PlaylistPlayer.CurrentPlaylistType != PlayListType.PLAYLIST_MUSIC) &&                (PlaylistPlayer.CurrentPlaylistType != PlayListType.PLAYLIST_MUSIC_TEMP) &&                (PlaylistPlayer.CurrentPlaylistType != PlayListType.PLAYLIST_LAST_FM))            {              LoadAndStartPlayList();            }            break;            case Action.ActionType.ACTION_SHOW_INFO:            FlipPictures();            break;            case Action.ActionType.ACTION_KEY_PRESSED:            switch (action.m_key.KeyChar)            {              case (int)Keys.D0:                UpdateCurrentTrackRating(0);                break;              case (int)Keys.D1:                UpdateCurrentTrackRating(1);                break;              case (int)Keys.D2:                UpdateCurrentTrackRating(2);                break;              case (int)Keys.D3:                UpdateCurrentTrackRating(3);                break;              case (int)Keys.D4:                UpdateCurrentTrackRating(4);                break;              case (int)Keys.D5:                UpdateCurrentTrackRating(5);                break;                // do not act on _every_ key                //default:                //  UpdateCurrentTrackRating(-1);                //  break;            }            break;            case Action.ActionType.ACTION_NEXT_AUDIO:            {              if (g_Player.AudioStreams > 1)              {                //_showStatus = true;                //_timeStatusShowTime = (DateTime.Now.Ticks / 10000);                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                (int)ControlIDs.LABEL_ROW1' 0' 0' null);                g_Player.SwitchToNextAudio();                  String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);                String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);                if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))                {                  msg.Label = string.Format("{0} ({1}/{2})"' language'                                            g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);                }                else                {                  msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                            g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);                }                  OnMessage(msg);                Log.Info("GUIMusicPlayingNow: switched audio to {0}"' msg.Label);              }            }            break;        }
Missing Default,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnAction,The following switch statement is missing a default case: switch (action.m_key.KeyChar)            {              case (int)Keys.D0:                UpdateCurrentTrackRating(0);                break;              case (int)Keys.D1:                UpdateCurrentTrackRating(1);                break;              case (int)Keys.D2:                UpdateCurrentTrackRating(2);                break;              case (int)Keys.D3:                UpdateCurrentTrackRating(3);                break;              case (int)Keys.D4:                UpdateCurrentTrackRating(4);                break;              case (int)Keys.D5:                UpdateCurrentTrackRating(5);                break;                // do not act on _every_ key                //default:                //  UpdateCurrentTrackRating(-1);                //  break;            }
Missing Default,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              if (message.SenderControlId == (int)ControlIDs.LIST_SIMILAR_TRACKS)              {                if ((int) Action.ActionType.ACTION_SELECT_ITEM == message.Param1)                {                  var song = (Song) lstSimilarTracks.SelectedListItem.AlbumInfoTag;                  AddSongToPlaylist(ref song);                }              }            }            break;          case GUIMessage.MessageType.GUI_MSG_SEND_PROGRAM_INFO:            {              GUIPropertyManager.SetProperty("#Play.Current.Title"' message.Label);              GUIPropertyManager.SetProperty("#Play.Next.Title"' message.Label2);            }            break;        }
Missing Default,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnShowContextMenu,The following switch statement is missing a default case: switch (dlg.SelectedId)        {          case 928: // Find Coverart            if (_MusicWindow != null)            {              string albumFolderPath = Path.GetDirectoryName(CurrentTrackFileName);                _MusicWindow.FindCoverArt(false' CurrentTrackTag.Artist' CurrentTrackTag.Album' albumFolderPath'                                        CurrentTrackTag' -1);              CurrentThumbFileName = GUIMusicBaseWindow.GetCoverArt(false' CurrentTrackFileName' CurrentTrackTag);                if (CurrentThumbFileName.Length > 0)              {                // let us test if there is a larger cover art image                string strLarge = Util.Utils.ConvertToLargeCoverArt(CurrentThumbFileName);                if (Util.Utils.FileExistsInCache(strLarge))                {                  CurrentThumbFileName = strLarge;                }                AddImageToImagePathContainer(CurrentThumbFileName);                  UpdateImagePathContainer();              }            }            break;            case 4521: // Show Album Info            if (_MusicWindow != null)            {              string albumFolderPath = Path.GetDirectoryName(CurrentTrackFileName);              if (_MusicWindow != null)              {                _MusicWindow.ShowAlbumInfo(GetID' CurrentTrackTag.Artist' CurrentTrackTag.Album);              }            }            break;            case 930: // add to favorites            dbs = MusicDatabase.Instance;            Song currentSong = new Song();            string strFile = g_Player.Player.CurrentFile;              bool songFound = dbs.GetSongByFileName(strFile' ref currentSong);            if (songFound)            {              if (currentSong == null)              {                return;              }              if (currentSong.Id < 0)              {                return;              }              currentSong.Favorite = true;              dbs.SetFavorite(currentSong);            }            break;            case 33041: //Play this album            try            {              if (CurrentTrackTag != null)              {                dbs = MusicDatabase.Instance;                ArrayList albumSongs = new ArrayList();                String strAlbum = CurrentTrackTag.Album;                  bool albumSongsFound = dbs.GetSongsByAlbum(strAlbum' ref albumSongs);                  if (albumSongsFound)                {                  for (int i = albumSongs.Count - 1; i >= 0; i--)                  {                    Song song = (Song)albumSongs[i];                    if (song.Title != CurrentTrackTag.Title && song.Artist == CurrentTrackTag.Artist)                    {                      AddSongToPlaylist(ref song);                    }                  }                  OnSongInserted();                }              }            }            catch (Exception ex)            {              Log.Error("GUIMusicPlayingNow: error while adding album tracks for {0} - {1}"' CurrentTrackTag.Album'                        ex.Message);            }            break;        }
Missing Default,MediaPortal.GUI.Music,GUIMusicPlayingNow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlayingNow.cs,OnThreadMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_PLAYING_10SEC:            if (_lookupSimilarTracks && (PlaylistPlayer.CurrentPlaylistType == PlayListType.PLAYLIST_MUSIC || PlaylistPlayer.CurrentPlaylistType == PlayListType.PLAYLIST_MUSIC_TEMP))            {              string strFile = message.Label;              UpdateSimilarTracks(strFile);            }            break;        }
Missing Default,MediaPortal.GUI.Music,GUIMusicPlayList,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlaylist.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)       {         case GUIMessage.MessageType.GUI_MSG_PLAYBACK_STOPPED:           {             for (int i = 0; i < facadeLayout.Count; ++i)             {               GUIListItem item = facadeLayout[i];               if (item != null && item.Selected)               {                 item.Selected = false;                 break;               }             }              UpdateButtonStates();           }           break;          case GUIMessage.MessageType.GUI_MSG_PLAYLIST_CHANGED:           {             if (m_iLastControl == facadeLayout.GetID && facadeLayout.Count <= 0)             {               if (GUIWindowManager.ActiveWindow == (int)Window.WINDOW_MUSIC_PLAYLIST)               {                 m_iLastControl = btnNowPlaying.GetID;                 GUIControl.FocusControl(GetID' m_iLastControl);               }             }              SelectCurrentPlayingSong();           }           break;       }
Missing Default,MediaPortal.GUI.Music,GUIMusicPlayList,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\GUIMusicPlaylist.cs,OnThreadMessage,The following switch statement is missing a default case: switch (message.Message)       {           //special case for when the next button is pressed - stopping the prev song does not cause a Playback_Ended event         case GUIMessage.MessageType.GUI_MSG_PLAYBACK_STARTED:           if (playlistPlayer.CurrentPlaylistType == PlayListType.PLAYLIST_MUSIC && playlistPlayer.CurrentSong != 0)           {             //           }           break;       }
Missing Default,MediaPortal.GUI.Music,MusicSort,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicSort.cs,Compare,The following switch statement is missing a default case: switch (method)        {          case SortMethod.Name:            if (bAscending)            {              return Util.StringLogicalComparer.Compare(item1.Label' item2.Label);            }            else            {              return Util.StringLogicalComparer.Compare(item2.Label' item1.Label);            }              case SortMethod.Date:            if (item1.FileInfo == null || item2.FileInfo == null)            {              // We didn't get a FileInfo. So it's a DB View and we sort on Date Added from DB              DateTime time1 = DateTime.MinValue;              DateTime time2 = DateTime.MinValue;              if (tag1 != null)              {                time1 = tag1.DateTimeModified;              }              if (tag2 != null)              {                time2 = tag2.DateTimeModified;              }                if (bAscending)              {                return DateTime.Compare(time1' time2);              }              else              {                return DateTime.Compare(time2' time1);              }            }            else            {              // Do sorting on File Date. Needed for Shares View              if (bAscending)              {                return DateTime.Compare(item1.FileInfo.CreationTime' item2.FileInfo.CreationTime);              }              else              {                return DateTime.Compare(item2.FileInfo.CreationTime' item1.FileInfo.CreationTime);              }            }            case SortMethod.Year:            // When sorting on Year' we need to take also the Label into account and sort on that as well            string compVal1 = item1.Year.ToString() + item1.Label;            string compVal2 = item2.Year.ToString() + item2.Label;            if (bAscending)            {              if (item1.Year == item2.Year)              {                // When the Year is equal just sort on the Label                return Util.StringLogicalComparer.Compare(item1.Label' item2.Label);              }              return Util.StringLogicalComparer.Compare(compVal1' compVal2);            }            else            {              if (item1.Year == item2.Year)              {                // When the Year is equal' sort on label ASCENDING' altough sorting on year is DESC                return Util.StringLogicalComparer.Compare(item1.Label' item2.Label);              }              return Util.StringLogicalComparer.Compare(compVal2' compVal1);            }            case SortMethod.Rating:            if (tag1 != null)            {              iRating1 = tag1.Rating;            }            if (tag2 != null)            {              iRating2 = tag2.Rating;            }            if (bAscending)            {              return (int)(iRating1 - iRating2);            }            else            {              return (int)(iRating2 - iRating1);            }            case SortMethod.Size:            if (item1.FileInfo == null)            {              return -1;            }            if (item2.FileInfo == null)            {              return -1;            }            if (bAscending)            {              long compare = (item1.FileInfo.Length - item2.FileInfo.Length);              return compare == 0 ? 0 : compare < 0 ? -1 : 1;            }            else            {              long compare = (item2.FileInfo.Length - item1.FileInfo.Length);              return compare == 0 ? 0 : compare < 0 ? -1 : 1;            }            case SortMethod.Track:            if (tag1 != null)            {              iTrack1 = tag1.Track;              iDisc1 = tag1.DiscID;            }            if (tag2 != null)            {              iTrack2 = tag2.Track;              iDisc2 = tag2.DiscID;            }            if (bAscending)            {              if (iDisc1 != iDisc2)              {                return iDisc1.CompareTo(iDisc2);              }              else              {                return iTrack1.CompareTo(iTrack2);              }            }            else            {              if (iDisc1 != iDisc2)              {                return iDisc2.CompareTo(iDisc1);              }              else              {                return iTrack2.CompareTo(iTrack1);              }            }            case SortMethod.Duration:            if (tag1 != null)            {              iDuration1 = tag1.Duration;            }            if (tag2 != null)            {              iDuration2 = tag2.Duration;            }            if (bAscending)            {              return (int)(iDuration1 - iDuration2);            }            else            {              return (int)(iDuration2 - iDuration1);            }            case SortMethod.Title:            string strTitle1 = item1.Label;            string strTitle2 = item2.Label;            if (tag1 != null)            {              strTitle1 = tag1.Title;            }            if (tag2 != null)            {              strTitle2 = tag2.Title;            }            if (bAscending)            {              return Util.StringLogicalComparer.Compare(strTitle1' strTitle2);            }            else            {              return Util.StringLogicalComparer.Compare(strTitle2' strTitle1);            }            case SortMethod.Artist:            if (tag1 != null)            {              strArtist1 = tag1.Artist;            }            if (tag2 != null)            {              strArtist2 = tag2.Artist;            }            if (bAscending)            {              return Util.StringLogicalComparer.Compare(strArtist1' strArtist2);            }            else            {              return Util.StringLogicalComparer.Compare(strArtist2' strArtist1);            }            case SortMethod.AlbumArtist:            if (tag1 != null)            {              strAlbumArtist1 = tag1.AlbumArtist;            }            if (tag2 != null)            {              strAlbumArtist2 = tag2.AlbumArtist;            }            if (bAscending)            {              return Util.StringLogicalComparer.Compare(strAlbumArtist1' strAlbumArtist2);            }            else            {              return Util.StringLogicalComparer.Compare(strAlbumArtist2' strAlbumArtist1);            }            case SortMethod.Album:          case SortMethod.DiscID:            //sort by album => album artist => disc# => track            if (tag1 != null)            {              strAlbum1 = tag1.Album;              strAlbumArtist1 = tag1.AlbumArtist;              iDisc1 = tag1.DiscID;              iTrack1 = tag1.Track;            }            if (tag2 != null)            {              strAlbum2 = tag2.Album;              strAlbumArtist2 = tag2.AlbumArtist;              iDisc2 = tag2.DiscID;              iTrack2 = tag2.Track;            }            if (bAscending)            {              if (strAlbum1 == strAlbum2)              {                if (strAlbumArtist1 == strAlbumArtist2)                {                  if (iDisc1 == iDisc2)                  {                    return (iTrack1 - iTrack2);                  }                  else                  {                    return (iDisc1 - iDisc2);                  }                }                else                {                  return Util.StringLogicalComparer.Compare(strAlbumArtist1' strAlbumArtist2);                }              }              else              {                return Util.StringLogicalComparer.Compare(strAlbum1' strAlbum2);              }            }            else            {              if (strAlbum1 == strAlbum2)              {                if (strAlbumArtist1 == strAlbumArtist2)                {                  if (iDisc1 == iDisc2)                  {                    return (iTrack2 - iTrack1);                  }                  else                  {                    return (iDisc2 - iDisc1);                  }                }                else                {                  return Util.StringLogicalComparer.Compare(strAlbumArtist2' strAlbumArtist1);                }              }              else              {                return Util.StringLogicalComparer.Compare(strAlbum2' strAlbum1);              }            }              case SortMethod.Filename:            string strFile1 = Util.Utils.GetFilename(item1.Path);            string strFile2 = Util.Utils.GetFilename(item2.Path);            if (bAscending)            {              return Util.StringLogicalComparer.Compare(strFile1' strFile2);            }            else            {              return Util.StringLogicalComparer.Compare(strFile2' strFile1);            }            case SortMethod.Composer:            string strComposer1 = "";            string strComposer2 = "";            if (tag1 != null)            {              strComposer1 = tag1.Composer;            }            if (tag2 != null)            {              strComposer2 = tag2.Composer;            }              if (bAscending)            {              return Util.StringLogicalComparer.Compare(strComposer1' strComposer2);            }            else            {              return Util.StringLogicalComparer.Compare(strComposer2' strComposer1);            }            case SortMethod.TimesPlayed:            if (tag1 != null)            {              iTimesPlayed1 = tag1.TimesPlayed;            }            if (tag2 != null)            {              iTimesPlayed2 = tag2.TimesPlayed;            }              if (bAscending)            {              return iTimesPlayed1.CompareTo(iTimesPlayed2);            }            else            {              return iTimesPlayed2.CompareTo(iTimesPlayed1);            }          }
Missing Default,MediaPortal.GUI.Music,MusicViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Music\MusicViewHandler.cs,Execute,The following switch statement is missing a default case: switch (table)         {           case "artist":           case "albumartist":           case "genre":           case "composer":             sql = String.Format("select * from {0} "' table);             if (whereClause != string.Empty)             {               sql += "where " + whereClause;             }             if (orderClause != string.Empty)             {               sql += orderClause;             }             break;            case "album":             sql = String.Format("select * from tracks ");             if (whereClause != string.Empty)             {               sql += "where " + whereClause;             }             sql += " group by strAlbum' strAlbumArtist ";             // We need to group on AlbumArtist' to show Albums with same name for different artists             if (orderClause != string.Empty)             {               sql += orderClause;             }             break;            case "tracks":             if (defRoot.Where == "year")             {               songs = new List<Song>();               sql = String.Format("select distinct iYear from tracks ");               SQLiteResultSet results = MusicDatabase.DirectExecute(sql);               for (int i = 0; i < results.Rows.Count; i++)               {                 Song song = new Song();                 try                 {                   song.Year = (int)Math.Floor(0.5d + Double.Parse(DatabaseUtility.Get(results' i' "iYear")));                 }                 catch (Exception)                 {                   song.Year = 0;                 }                 if (song.Year > 1000)                 {                   songs.Add(song);                 }               }                previousLevel = currentLevel;                return true;             }             else if (defRoot.Where == "recently added")             {               try               {                 whereClause = "";                 TimeSpan ts = new TimeSpan(Convert.ToInt32(defRoot.Restriction)' 0' 0' 0);                 DateTime searchDate = DateTime.Today - ts;                  whereClause = String.Format("where {0} > '{1}'"' searchField' searchDate.ToString("yyyy-MM-dd hh:mm:ss"));                 sql = String.Format("select * from tracks {0} {1}"' whereClause' orderClause);               }               catch (Exception) {}             }             else if (defRoot.Where == "conductor")             {               whereClause = "";               BuildRestriction(defRoot' ref whereClause);               if (whereClause != string.Empty)               {                 whereClause = String.Format("where {0}"' whereClause);               }               sql = String.Format("select distinct strConductor from tracks {0} {1}"' whereClause' orderClause);             }             else             {               whereClause = "";               BuildRestriction(defRoot' ref whereClause);               if (whereClause != string.Empty)               {                 whereClause = String.Format("where {0}"' whereClause);               }               sql = String.Format("select * from tracks {0} {1}"' whereClause' orderClause);             }             break;         }
Missing Default,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)       {           // previous : play previous song from playlist or previous item from MyPictures         case Action.ActionType.ACTION_PREV_CHAPTER:         case Action.ActionType.ACTION_PREV_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = -1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;            // next : play next song from playlist or next item from MyPictures         case Action.ActionType.ACTION_NEXT_CHAPTER:         case Action.ActionType.ACTION_NEXT_ITEM:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 1;               g_Player.Stop();             }             else             {               //g_playlistPlayer.PlayNext();             }           }           break;          case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_GUI:           {             // Stop Video for MyPictures when going to home             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;               g_Player.Stop();             }             // switch back to the menu             if ((g_Player.IsDVD) && (g_Player.IsDVDMenu))             {               Log.Info("GUIVideoFullScreen: Leaving the DVD screen is not permitted while in menu mode.");               return;             }             _isOsdVisible = false;             GUIWindowManager.IsOsdVisible = false;             GUIGraphicsContext.IsFullScreenVideo = false;             GUIWindowManager.ShowPreviousWindow();             return;           }         case Action.ActionType.ACTION_AUTOCROP:           {             Log.Debug("ACTION_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;             if (cropper != null)             {               msg.Label = cropper.Crop();               if (msg.Label == null)               {                 msg.Label = "N/A";               }             }             else             {               msg.Label = "N/A";             }              OnMessage(msg);             break;           }         case Action.ActionType.ACTION_TOGGLE_AUTOCROP:           {             Log.Debug("ACTION_TOGGLE_AUTOCROP");             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             IAutoCrop cropper = GUIGraphicsContext.autoCropper;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = "N/A";              if (cropper != null)             {               msg.Label = cropper.ToggleMode();             }             OnMessage(msg);             break;           }         case Action.ActionType.ACTION_ASPECT_RATIO:           {             _showStatus = true;             _timeStatusShowTime = (DateTime.Now.Ticks / 10000);             string status = "";              Geometry.Type arMode = GUIGraphicsContext.ARType;              bool foundMode = false;              for (int i = 0; i < _allowedArModes.Count; i++)             {               if (_allowedArModes[i] == arMode)               {                 arMode = _allowedArModes[(i + 1) % _allowedArModes.Count]; // select next allowed mode                 foundMode = true;                 break;               }             }             if (!foundMode && _allowedArModes.Count > 0)             {               arMode = _allowedArModes[0];             }              GUIGraphicsContext.ARType = arMode;             status = Util.Utils.GetAspectRatioLocalizedString(arMode);             GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0' (int)Control.LABEL_ROW1'                                             0' 0' null);             msg.Label = status;             OnMessage(msg);           }           break;          case Action.ActionType.ACTION_MOVE_LEFT:         case Action.ActionType.ACTION_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }                _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(false);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_RIGHT:         case Action.ActionType.ACTION_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.Paused)               {                 g_Player.Pause();                 _isPauseOsdVisible = false;                 GUIWindowManager.IsPauseOsdVisible = false;                 ScreenStateChanged();                 UpdateGUI();               }               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               _showStep = true;               g_Player.SeekStep(true);               string statusLine = g_Player.GetStepDescription();               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               msg.Label = statusLine;               OnMessage(msg);             }           }           break;          case Action.ActionType.ACTION_MOVE_DOWN:         case Action.ActionType.ACTION_BIG_STEP_BACK:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent -= _immediateSeekValue;                   if (percent < 0)                   {                     percent = 0;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition - _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_BACK - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_MOVE_UP:         case Action.ActionType.ACTION_BIG_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               if (g_Player.IsDVD && g_Player.Paused)               {                 // Don't skip in paused DVD's                 _forbiddenTimer = DateTime.Now;                 RenderForbidden(true);               }               else               {                 if (g_Player.Paused)                 {                   g_Player.Pause();                   _isPauseOsdVisible = false;                   GUIWindowManager.IsPauseOsdVisible = false;                   ScreenStateChanged();                   UpdateGUI();                 }                  _showStatus = true;                 _timeStatusShowTime = (DateTime.Now.Ticks / 10000);                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                                 (int)Control.LABEL_ROW1' 0' 0' null);                 msg.Label = "";                 OnMessage(msg);                 if (_immediateSeekIsRelative)                 {                   double currentpos = g_Player.CurrentPosition;                   double duration = g_Player.Duration;                   double percent = (currentpos / duration) * 100d;                   percent += _immediateSeekValue;                   if (percent > 99)                   {                     percent = 99;                   }                   g_Player.SeekAsolutePercentage((int)percent);                 }                 else                 {                   double dTime = (int)g_Player.CurrentPosition + _immediateSeekValue;                   if (dTime > g_Player.Duration) dTime = g_Player.Duration - 5;                   if (dTime < 0) dTime = 0d;                   Log.Debug("BIG_STEP_FORWARD - Preparing to seek to {0}:{1}:{2}"' (int)(dTime / 3600d)'                             (int)((dTime % 3600d) / 60d)' (int)(dTime % 60d));                   g_Player.SeekAbsolute(dTime);                 }               }             }             return;           }           //break;          case Action.ActionType.ACTION_SHOW_MPLAYER_OSD:           //g_application.m_pPlayer.ToggleOSD();           break;          case Action.ActionType.ACTION_SHOW_OSD: // Show the OSD           {             m_dwOSDTimeOut = DateTime.Now;              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' _osdWindow.GetID' 0' 0' GetID' 0'                                             null);             _osdWindow.OnMessage(msg); // Send an init msg to the OSD             _isOsdVisible = true;             GUIWindowManager.VisibleOsd = Window.WINDOW_OSD;             GUIWindowManager.IsOsdVisible = true;           }           break;          case Action.ActionType.ACTION_SHOW_SUBTITLES:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case Action.ActionType.ACTION_AUDIO_NEXT_LANGUAGE:         case Action.ActionType.ACTION_NEXT_AUDIO:           {             if (g_Player.AudioStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextAudio();                String language = g_Player.AudioLanguage(g_Player.CurrentAudioStream);               String languageType = g_Player.AudioType(g_Player.CurrentAudioStream);               if (languageType == Strings.Unknown || string.IsNullOrEmpty(languageType))               {                 msg.Label = string.Format("{0} ({1}/{2})"' language'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }               else               {                 msg.Label = string.Format("{0} [{1}] ({2}/{3})"' language' languageType.TrimEnd()'                                           g_Player.CurrentAudioStream + 1' g_Player.AudioStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched audio to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_EDITION:           {             if (g_Player.EditionStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextEdition();                String language = g_Player.EditionLanguage(g_Player.CurrentEditionStream);               if (String.Equals(language' "Edition") || String.Equals(language' ""))               {                 msg.Label = string.Format("{0} ({1}/{2})"' g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }               else               {                 msg.Label = string.Format("{0} {1} ({2}/{3})"' language'                                           g_Player.EditionType(g_Player.CurrentEditionStream)'                                           g_Player.CurrentEditionStream + 1' g_Player.EditionStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched edition to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_VIDEO:           {             if (g_Player.VideoStreams > 1)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextVideo();                String language = g_Player.VideoName(g_Player.CurrentVideoStream);               String languagetype = g_Player.VideoType(g_Player.CurrentVideoStream);               if (String.Equals(language' "Video") || String.Equals(language' "") || String.Equals(language' languagetype))               {                 msg.Label = string.Format("{0} ({1}/{2})"' languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }               else               {                 msg.Label = string.Format("{0} - {1} ({2}/{3})"' language'                                           languagetype'                                           g_Player.CurrentVideoStream + 1' g_Player.VideoStreams);               }                OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched Video to {0}"' msg.Label);             }           }           break;          case Action.ActionType.ACTION_NEXT_SUBTITLE:           {             int subStreamsCount = g_Player.SubtitleStreams;             if (subStreamsCount > 0 || g_Player.SupportsCC)             {               _showStatus = true;               _timeStatusShowTime = (DateTime.Now.Ticks / 10000);               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_LABEL_SET' GetID' 0'                                               (int)Control.LABEL_ROW1' 0' 0' null);               g_Player.SwitchToNextSubtitle();               if (g_Player.EnableSubtitle)               {                 if (g_Player.CurrentSubtitleStream == -1 && g_Player.SupportsCC)                 {                   msg.Label = "CC1 Analog";                 }                 else                 {                   int streamId = g_Player.CurrentSubtitleStream;                   string strName = g_Player.SubtitleName(streamId);                   string langName = g_Player.SubtitleLanguage(streamId);                   if (!string.IsNullOrEmpty(strName))                     msg.Label = string.Format("{0} [{1}] ({2}/{3})"' langName' strName.TrimStart()'                                               streamId + 1' subStreamsCount);                   else                     msg.Label = string.Format("{0} ({1}/{2})"' langName'                                               streamId + 1' subStreamsCount);                 }               }               else               {                 msg.Label = GUILocalizeStrings.Get(519); // Subtitles off               }               OnMessage(msg);               Log.Info("GUIVideoFullscreen: switched subtitle to {0}"' msg.Label);             }             else             {               Log.Info("GUIVideoFullscreen toggle subtitle: no subtitle streams available!");             }           }           break;          case Action.ActionType.ACTION_STOP:           {             if (g_Player.IsPicture)             {               GUIPictureSlideShow._slideDirection = 0;             }             Log.Info("GUIVideoFullscreen:stop");             g_Player.Stop();             GUIWindowManager.ShowPreviousWindow();           }           break;          case Action.ActionType.ACTION_PAUSE:           if (g_Player.Paused)           {             m_dwOSDTimeOut = DateTime.Now;             _isPauseOsdVisible = true;             GUIWindowManager.IsPauseOsdVisible = true;           }           else           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;           }           break;          case Action.ActionType.ACTION_SUBTITLE_DELAY_MIN:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayMinus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_SUBTITLE_DELAY_PLUS:           if (g_Player.EnableSubtitle)           {             SubEngine.GetInstance().DelayPlus(0);             ShowSubtitleDelayStatus();           }           break;         case Action.ActionType.ACTION_AUDIO_DELAY_MIN:           //g_application.m_pPlayer.AudioOffset(false);           break;         case Action.ActionType.ACTION_AUDIO_DELAY_PLUS:           //g_application.m_pPlayer.AudioOffset(true);           break;          case Action.ActionType.ACTION_REWIND:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Rewind - skipping");                 g_Player.SeekAbsolute(dPos - 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_FORWARD:           {             _isPauseOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = false;              if (g_Player.CanSeek && !g_Player.IsDVD)             {               ScreenStateChanged();               UpdateGUI();               double dPos = g_Player.CurrentPosition;               if (g_Player.Duration - dPos > 1)               {                 Log.Debug("GUIVideoFullscreen.Forward - skipping");                 g_Player.SeekAbsolute(dPos + 0.25d);               }             }           }           break;          case Action.ActionType.ACTION_KEY_PRESSED:           if (action.m_key != null)           {             char chKey = (char) action.m_key.KeyChar;             if (chKey >= '0' && chKey <= '9') //Make sure it's only for the remote             {               if (g_Player.CanSeek)               {                 if (g_Player.IsDVD && g_Player.Paused)                 {                   // Don't skip in paused DVD's                   _forbiddenTimer = DateTime.Now;                   RenderForbidden(true);                 }                 else                 {                   ChangetheTimeCode(chKey);                 }               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_BACK:           {             if (g_Player.CanSeek)             {               // seek back 5 sec               double dPos = g_Player.CurrentPosition;               if (dPos > 5)               {                 Log.Debug("GUIVideoFullscreen.SMALL_STEP_BACK - skipping");                 g_Player.SeekAbsolute(dPos - 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_SMALL_STEP_FORWARD:           {             if (g_Player.CanSeek)             {               // seek forward 5 sec               double dPos = g_Player.Duration - g_Player.CurrentPosition;                if (dPos > 5)               {                 g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);               }             }           }           break;          case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             GUIWindowManager.IsPauseOsdVisible = false;             break;           }           case Action.ActionType.ACTION_CONTEXT_MENU:           ShowContextMenu();           break;          case Action.ActionType.ACTION_CREATE_BOOKMARK:           CreateBookmark();           break;          case Action.ActionType.ACTION_PREV_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = bookmarkList.Count - 1;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos + 0.5 < dCurTime)               {                 bookmarkIndex = i;               }               else                 break;             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }         case Action.ActionType.ACTION_NEXT_BOOKMARK:           {             ArrayList bookmarks = new ArrayList();             VideoDatabase.GetBookMarksForMovie(g_Player.CurrentFile' ref bookmarks);             if (bookmarks.Count <= 0)             {               break; // no bookmarks? leave if so ...             }             List<double> bookmarkList = new List<double>();             for (int i = 0; i < bookmarks.Count; i++)             {               bookmarkList.Add((double)bookmarks[i]);             }             bookmarkList.Sort();             double dCurTime = g_Player.CurrentPosition;             int bookmarkIndex = 0;             for (int i = 0; i < bookmarkList.Count; i++)             {               double pos = bookmarkList[i];               if (pos >= dCurTime)               {                 bookmarkIndex = i;                 break;               }             }             g_Player.SeekAbsolute(bookmarkList[bookmarkIndex]);             break;           }       }
Missing Default,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnOsdMessage,The following switch statement is missing a default case: switch (message.Message)       {         case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:         case GUIMessage.MessageType.GUI_MSG_SETFOCUS:         case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS:         case GUIMessage.MessageType.GUI_MSG_CLICKED:           m_dwOSDTimeOut = DateTime.Now;           break;         case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:           GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT' _osdWindow.GetID' 0' 0' GetID' 0'                                           null);           _osdWindow.OnMessage(msg); // Send a de-init msg to the OSD           _isOsdVisible = false;           GUIWindowManager.IsOsdVisible = false;           return true;       }
Missing Default,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)       {         case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:           {             base.OnMessage(message);              _osdWindow = (GUIVideoOSD)GUIWindowManager.GetWindow((int)Window.WINDOW_OSD);              HideControl(GetID' (int)Control.LABEL_ROW1);             HideControl(GetID' (int)Control.LABEL_ROW2);             HideControl(GetID' (int)Control.LABEL_ROW3);             HideControl(GetID' (int)Control.BLUE_BAR);              if (!SettingsLoaded)               LoadSettings();              GUIWindowManager.IsOsdVisible = false;             GUIWindowManager.IsPauseOsdVisible = g_Player.Paused;             _isOsdVisible = false;             _isPauseOsdVisible = g_Player.Paused;             m_dwOSDTimeOut = DateTime.Now;             _showStep = false;             _showStatus = false;             _showTime = false;             _showSkipBar = false;              _timeStamp = "";             _timeCodePosition = 0;             _timeStatusShowTime = 0;             _updateTimer = DateTime.Now;             _vmr7UpdateTimer = DateTime.Now;             _IsDialogVisible = false;             _needToClearScreen = false;             _isVolumeVisible = false;             _isForbiddenVisible = false;             NotifyDialogVisible = false;             _volumeTimer = DateTime.MinValue;             _forbiddenTimer = DateTime.MinValue;              screenState = new FullScreenState();             NotifyDialogVisible = false;              ResetAllControls(); // make sure the controls are positioned relevant to the OSD Y offset             ScreenStateChanged();             _needToClearScreen = true;             UpdateGUI();             if (!screenState.Paused)             {               for (int i = (int)Control.PANEL1; i < (int)Control.PANEL2; ++i)               {                 HideControl(GetID' i);               }             }              GUIGraphicsContext.IsFullScreenVideo = true;             GUILayerManager.RegisterLayer(this' GUILayerManager.LayerType.Osd);              RenderVolume(false);             RenderForbidden(false);              //return base.OnMessage(message);             return true;           }          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:           {             lock (this)             {               if (_isOsdVisible)               {                 GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT' _osdWindow.GetID' 0' 0'                                                 GetID' 0' null);                 _osdWindow.OnMessage(msg); // Send a de-init msg to the OSD               }               _isOsdVisible = false;               _isPauseOsdVisible = false;               GUIWindowManager.IsOsdVisible = false;               GUIWindowManager.IsPauseOsdVisible = false;               GUIGraphicsContext.IsFullScreenVideo = false;                GUILayerManager.UnRegisterLayer(this);                /*imgVolumeMuteIcon.SafeDispose();               imgVolumeBar.SafeDispose();               imgActionForbiddenIcon.SafeDispose();               dlg.SafeDispose();               _osdWindow.SafeDispose();*/                base.OnMessage(message);             }             return true;           }          case GUIMessage.MessageType.GUI_MSG_SETFOCUS:           goto case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS;          case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS:           if (_isOsdVisible)           {             return true;           }           if (message.SenderControlId != (int)Window.WINDOW_FULLSCREEN_VIDEO)           {             return true;           }           break;       }
Missing Default,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowContextMenu,The following switch statement is missing a default case: switch (dlg.SelectedId)       {           // Add audio stream selection to be able to switch audio streams in .ts recordings         case 492:           ShowAudioStreamsMenu();           break;         case 200059:           ShowAudioDualMonoModeMenu(dualMonoMode);           break;         case 462:           ShowSubtitleStreamsMenu();           break;         case 200073:           ShowPostProcessingMenu();           break;         case 1064:           ShowBookmarksMenu();           break;         case 974: // DVD root menu           Action actionMenu = new Action(Action.ActionType.ACTION_DVD_MENU' 0' 0);           GUIGraphicsContext.OnAction(actionMenu);           break;         case 1700: // BD popup menu           Action actionPopupMenu = new Action(Action.ActionType.ACTION_BD_POPUP_MENU' 0' 0);           GUIGraphicsContext.OnAction(actionPopupMenu);           break;         case 975: // DVD previous chapter           Action actionPrevChapter = new Action(Action.ActionType.ACTION_PREV_CHAPTER' 0' 0);           GUIGraphicsContext.OnAction(actionPrevChapter);           break;         case 976: // DVD next chapter           Action actionNextChapter = new Action(Action.ActionType.ACTION_NEXT_CHAPTER' 0' 0);           GUIGraphicsContext.OnAction(actionNextChapter);           break;         case 941: // Change aspect ratio           ShowAspectRatioMenu();           break;          case 970:           // switch back to MyMovies window           _isOsdVisible = false;           GUIWindowManager.IsOsdVisible = false;           GUIGraphicsContext.IsFullScreenVideo = false;           GUIWindowManager.ShowPreviousWindow();           break;          case 200090:           ShowEditionStreamsMenu();           break;          case 200095:           ShowVideoStreamsMenu();           break;          case 200091:           ShowChapterStreamsMenu();           break;       }
Missing Default,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,ShowPostProcessingMenu,The following switch statement is missing a default case: switch (dlg.SelectedLabel)         {           case 0:             engine.EnablePostProcess = !engine.EnablePostProcess;             break;           case 1:             engine.EnableResize = !engine.EnableResize;             break;           case 2:             engine.EnableCrop = !engine.EnableCrop;             break;           case 3:             engine.EnableDeinterlace = !engine.EnableDeinterlace;             break;         }
Missing Default,MediaPortal.GUI.Video,GUIVideoFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoFullscreen.cs,UpdateGUI,The following switch statement is missing a default case: switch (iSpeed)         {           case 2:             ShowControl(GetID' (int)Control.IMG_2X);             break;           case 4:             ShowControl(GetID' (int)Control.IMG_4X);             break;           case 8:             ShowControl(GetID' (int)Control.IMG_8X);             break;           case 16:             ShowControl(GetID' (int)Control.IMG_16X);             break;           case 32:             ShowControl(GetID' (int)Control.IMG_32X);             break;           case -2:             ShowControl(GetID' (int)Control.IMG_MIN2X);             break;           case -4:             ShowControl(GetID' (int)Control.IMG_MIN4X);             break;           case -8:             ShowControl(GetID' (int)Control.IMG_MIN8X);             break;           case -16:             ShowControl(GetID' (int)Control.IMG_MIN16X);             break;           case -32:             ShowControl(GetID' (int)Control.IMG_MIN32X);             break;         }
Missing Default,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)       {         case Action.ActionType.ACTION_OSD_SHOW_LEFT:           break;          case Action.ActionType.ACTION_OSD_SHOW_RIGHT:           break;          case Action.ActionType.ACTION_OSD_SHOW_UP:           break;          case Action.ActionType.ACTION_OSD_SHOW_DOWN:           break;          case Action.ActionType.ACTION_OSD_SHOW_SELECT:           break;          case Action.ActionType.ACTION_OSD_HIDESUBMENU:           break;          case Action.ActionType.ACTION_CONTEXT_MENU:         case Action.ActionType.ACTION_PREVIOUS_MENU:         case Action.ActionType.ACTION_SHOW_OSD:           {             if (isSubMenuVisible) // is sub menu on?             {               FocusControl(GetID' m_iActiveMenuButtonID' 0); // set focus to last menu button               ToggleSubMenu(0' m_iActiveMenu); // hide the currently active sub-menu             }             if (action.wID == Action.ActionType.ACTION_CONTEXT_MENU)             {               GUIVideoFullscreen videoWindow = (GUIVideoFullscreen)GUIWindowManager.GetWindow((int)Window.WINDOW_FULLSCREEN_VIDEO);               videoWindow.OnAction(new Action(Action.ActionType.ACTION_SHOW_OSD' 0' 0));               videoWindow.OnAction(action);             }             return;           }          case Action.ActionType.ACTION_PAUSE:           {             // push a message through to this window to handle the remote control button             GUIMessage msgSet = new GUIMessage(GUIMessage.MessageType.GUI_MSG_CLICKED' GetID' (int)Controls.OSD_PAUSE'                                                (int)Controls.OSD_PAUSE' 0' 0' null);             OnMessage(msgSet);              if (g_Player.Paused)             {               GUIWindowManager.IsPauseOsdVisible = true;             }             else             {               GUIWindowManager.IsPauseOsdVisible = false;             }             return;           }           case Action.ActionType.ACTION_PLAY:         case Action.ActionType.ACTION_MUSIC_PLAY:           {             g_Player.Speed = 1; // Single speed             ToggleButton((int)Controls.OSD_REWIND' false); // pop all the relevant             ToggleButton((int)Controls.OSD_FFWD' false); // buttons back to             ToggleButton((int)Controls.OSD_PLAY' false); // their up state             GUIWindowManager.IsPauseOsdVisible = false;             return;           }          case Action.ActionType.ACTION_STOP:           {             // push a message through to this window to handle the remote control button             GUIMessage msgSet = new GUIMessage(GUIMessage.MessageType.GUI_MSG_CLICKED' GetID' (int)Controls.OSD_STOP'                                                (int)Controls.OSD_STOP' 0' 0' null);             OnMessage(msgSet);              GUIWindowManager.IsPauseOsdVisible = false;             return;           }          case Action.ActionType.ACTION_FORWARD:           {             // push a message through to this window to handle the remote control button             GUIMessage msgSet = new GUIMessage(GUIMessage.MessageType.GUI_MSG_CLICKED' GetID' (int)Controls.OSD_FFWD'                                                (int)Controls.OSD_FFWD' 0' 0' null);             OnMessage(msgSet);              GUIWindowManager.IsPauseOsdVisible = false;             return;           }          case Action.ActionType.ACTION_REWIND:           {             // push a message through to this window to handle the remote control button             GUIMessage msgSet = new GUIMessage(GUIMessage.MessageType.GUI_MSG_CLICKED' GetID' (int)Controls.OSD_REWIND'                                                (int)Controls.OSD_REWIND' 0' 0' null);             OnMessage(msgSet);              GUIWindowManager.IsPauseOsdVisible = false;             return;           }          case Action.ActionType.ACTION_OSD_SHOW_VALUE_PLUS:           {             // push a message through to this window to handle the remote control button             GUIMessage msgSet = new GUIMessage(GUIMessage.MessageType.GUI_MSG_CLICKED' GetID' (int)Controls.OSD_SKIPFWD'                                                (int)Controls.OSD_SKIPFWD' 0' 0' null);             OnMessage(msgSet);             return;           }          case Action.ActionType.ACTION_OSD_SHOW_VALUE_MIN:           {             // push a message through to this window to handle the remote control button             GUIMessage msgSet = new GUIMessage(GUIMessage.MessageType.GUI_MSG_CLICKED' GetID' (int)Controls.OSD_SKIPBWD'                                                (int)Controls.OSD_SKIPBWD' 0' 0' null);             OnMessage(msgSet);             return;           }       }
Missing Default,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)       {         case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT: // fired when OSD is hidden           {             //if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(true);             // following line should stay. Problems with OSD not             // appearing are already fixed elsewhere             //for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)             //{             //  HideControl(GetID' i);             //}             Dispose();             GUIPropertyManager.SetProperty("#currentmodule"' GUIWindowManager.GetWindow(message.Param1).GetModuleName());             return true;           }         case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT: // fired when OSD is shown           {             // following line should stay. Problems with OSD not             // appearing are already fixed elsewhere             GUIPropertyManager.SetProperty("#currentmodule"' GetModuleName());              AllocResources();             // if (g_application.m_pPlayer) g_application.m_pPlayer.ShowOSD(false);             ResetAllControls(); // make sure the controls are positioned relevant to the OSD Y offset             isSubMenuVisible = false;             m_iActiveMenuButtonID = 0;             m_iActiveMenu = 0;             m_bNeedRefresh = false;             Reset();             FocusControl(GetID' (int)Controls.OSD_PLAY' 0); // set focus to play button by default when window is shown             QueueAnimation(AnimationType.WindowOpen);             for (int i = (int)Controls.Panel1; i < (int)Controls.Panel2; i++)             {               ShowControl(GetID' i);             }             if (g_Player.Paused)             {               ToggleButton((int)Controls.OSD_PLAY' true);               // make sure play button is down (so it shows the pause symbol)             }             else             {               ToggleButton((int)Controls.OSD_PLAY' false); // make sure play button is up (so it shows the play symbol)             }             m_delayInterval = MediaPortal.Player.Subtitles.SubEngine.GetInstance().DelayInterval;             if (m_delayInterval > 0)               m_subtitleDelay = MediaPortal.Player.Subtitles.SubEngine.GetInstance().Delay / m_delayInterval;             if (g_Player.HasPostprocessing)             {               m_delayIntervalAudio = PostProcessingEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = PostProcessingEngine.GetInstance().AudioDelay/m_delayIntervalAudio;               }             }             else if (g_Player.HasAudioEngine)             {               m_delayIntervalAudio = AudioPostEngine.GetInstance().AudioDelayInterval;               if (m_delayIntervalAudio > 0)               {                 m_audioDelay = AudioPostEngine.GetInstance().AudioDelay/m_delayIntervalAudio;               }             }              g_Player.UpdateMediaInfoProperties();             GUIPropertyManager.SetProperty("#TV.View.HasTeletext"' "False");             return true;           }          case GUIMessage.MessageType.GUI_MSG_SETFOCUS:           goto case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS;          case GUIMessage.MessageType.GUI_MSG_LOSTFOCUS:           {             if (message.SenderControlId == 13)             {               return true;             }           }           break;          case GUIMessage.MessageType.GUI_MSG_CLICKED:           {             int iControl = message.SenderControlId; // get the ID of the control sending us a message              if (iControl >= (int)Controls.OSD_VOLUMESLIDER)               // one of the settings (sub menu) controls is sending us a message             {               Handle_ControlSetting(iControl' message.Param1);             }              if (iControl == (int)Controls.OSD_PAUSE)             {               if (g_Player.Paused)               {                 ToggleButton((int)Controls.OSD_PLAY' true);                 // make sure play button is down (so it shows the pause symbol)                                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_PLAY' false);                 // make sure play button is up (so it shows the play symbol)                 if (g_Player.Speed < 1) // are we not playing back at normal speed                 {                   ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                   ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 }                 else                 {                   ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                   if (g_Player.Speed == 1)                   {                     ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                   }                 }               }             }              if (iControl == (int)Controls.OSD_PLAY)             {               //TODO               int iSpeed = g_Player.Speed;               if (iSpeed != 1) // we're in ffwd or rewind mode               {                 g_Player.Speed = 1; // drop back to single speed                 ToggleButton((int)Controls.OSD_REWIND' false); // pop all the relevant                 ToggleButton((int)Controls.OSD_FFWD' false); // buttons back to                 ToggleButton((int)Controls.OSD_PLAY' false); // their up state               }               else               {                 g_Player.Pause(); // Pause/Un-Pause playback                 if (g_Player.Paused)                 {                   ToggleButton((int)Controls.OSD_PLAY' true);                   // make sure play button is down (so it shows the pause symbol)                 }                 else                 {                   ToggleButton((int)Controls.OSD_PLAY' false);                   // make sure play button is up (so it shows the play symbol)                 }               }             }              if (iControl == (int)Controls.OSD_STOP)             {               if (isSubMenuVisible) // sub menu currently active ?               {                 FocusControl(GetID' m_iActiveMenuButtonID' 0); // set focus to last menu button                 ToggleSubMenu(0' m_iActiveMenu); // hide the currently active sub-menu               }               //g_application.m_guiWindowFullScreen.m_bOSDVisible = false;	// toggle the OSD off so parent window can de-init               Log.Info("GUIVideoOSD:stop");               g_Player.Stop(); // close our media               //GUIWindowManager.ShowPreviousWindow();							// go back to the previous window             }              if (iControl == (int)Controls.OSD_REWIND)             {               if (g_Player.Paused)               {                 g_Player.Pause(); // Unpause playback               }                if (g_Player.Speed < 1) // are we not playing back at normal speed               {                 ToggleButton((int)Controls.OSD_REWIND' true); // make sure out button is in the down position                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                 if (g_Player.Speed == 1)                 {                   ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 }               }             }              if (iControl == (int)Controls.OSD_FFWD)             {               if (g_Player.Paused)               {                 g_Player.Pause(); // Unpause playback               }                if (g_Player.Speed > 1) // are we not playing back at normal speed               {                 ToggleButton((int)Controls.OSD_FFWD' true); // make sure out button is in the down position                 ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state               }               else               {                 ToggleButton((int)Controls.OSD_FFWD' false); // pop the button back to it's up state                 if (g_Player.Speed == 1)                 {                   ToggleButton((int)Controls.OSD_REWIND' false); // pop the button back to it's up state                 }               }             }              if (iControl == (int)Controls.OSD_SKIPBWD)             {               if (g_Player.IsDVD && g_Player.Playing)               {                 Action actionPrevChapter = new Action(Action.ActionType.ACTION_PREV_CHAPTER' 0' 0);                 GUIGraphicsContext.OnAction(actionPrevChapter);               }               else               {                 playlistPlayer.PlayPrevious();               }               ToggleButton((int)Controls.OSD_SKIPBWD' false); // pop the button back to it's up state               return true;             }              if (iControl == (int)Controls.OSD_SKIPFWD)             {               if (g_Player.IsDVD && g_Player.Playing)               {                 Action actionPrevChapter = new Action(Action.ActionType.ACTION_NEXT_CHAPTER' 0' 0);                 GUIGraphicsContext.OnAction(actionPrevChapter);               }               else               {                 playlistPlayer.PlayNext();               }               ToggleButton((int)Controls.OSD_SKIPFWD' false); // pop the button back to it's up state               return true;             }              if (iControl == (int)Controls.OSD_MUTE)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VOL); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 int iValue = g_Player.Volume;                 GUISliderControl pSlider = GetControl((int)Controls.OSD_VOLUMESLIDER) as GUISliderControl;                 if (null != pSlider)                 {                   pSlider.Percentage = iValue; // Update our volume slider accordingly ...                 }                 ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER); // show the volume control                 ShowControl(GetID' (int)Controls.OSD_VOLUMESLIDER_LABEL);                 FocusControl(GetID' (int)Controls.OSD_VOLUMESLIDER' 0); // set focus to it               }               else // sub menu is off               {                 FocusControl(GetID' (int)Controls.OSD_MUTE' 0); // set focus to the mute button               }             }              if (iControl == (int)Controls.OSD_SUBTITLES)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_SUBTITLES); // hide or show the sub-menu               if (isSubMenuVisible)               {                 // set the controls values                 GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_SUBTITLE_DELAY);                 pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                 pControl.FloatInterval = 1;                 pControl.SetRange(-50' 50);                 SetSliderValue(-50' 50' m_subtitleDelay' (int)Controls.OSD_SUBTITLE_DELAY);                 SetCheckmarkValue(g_Player.EnableSubtitle' (int)Controls.OSD_SUBTITLE_ONOFF);                 SetCheckmarkValue(!g_Player.EnableForcedSubtitle' (int)Controls.OSD_SUBTITLE_FORCED_ONOFF);                 // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY_LABEL);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_ONOFF);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_FORCED_ONOFF);                 ShowControl(GetID' (int)Controls.OSD_SUBTITLE_LIST);                  FocusControl(GetID' (int)Controls.OSD_SUBTITLE_DELAY' 0);                 // set focus to the first control in our group                 PopulateSubTitles(); // populate the list control with subtitles for this video               }             }              if (iControl == (int)Controls.OSD_BOOKMARKS)             {               GUIVideoFullscreen videoWindow = (GUIVideoFullscreen)GUIWindowManager.GetWindow((int)Window.WINDOW_FULLSCREEN_VIDEO);               videoWindow.ShowBookmarksMenu();               ToggleButton((int)Controls.OSD_BOOKMARKS' false);             }              if (iControl == (int)Controls.OSD_VIDEO)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_VIDEO); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 // set the controls values                 float fPercent = (float)(100 * (g_Player.CurrentPosition / g_Player.Duration));                 SetSliderValue(0.0f' 100.0f' (float)fPercent' (int)Controls.OSD_VIDEOPOS);                  bool hasPostProc = g_Player.HasPostprocessing;                 if (hasPostProc)                 {                   IPostProcessingEngine engine = PostProcessingEngine.GetInstance();                   SetCheckmarkValue(engine.EnablePostProcess' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    SetCheckmarkValue(engine.EnableResize' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    SetCheckmarkValue(engine.EnableCrop' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    SetCheckmarkValue(engine.EnableDeinterlace' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    UpdatePostProcessing();                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL_LABEL);                    ShowControl(GetID' (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL_LABEL);                 }                  //SetCheckmarkValue(g_stSettings.m_bNonInterleaved' Controls.OSD_NONINTERLEAVED);                 //SetCheckmarkValue(g_stSettings.m_bNoCache' Controls.OSD_NOCACHE);                 //SetCheckmarkValue(g_stSettings.m_bFrameRateConversions' Controls.OSD_ADJFRAMERATE);                  UpdateGammaContrastBrightness();                 // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_VIDEOPOS);                 ShowControl(GetID' (int)Controls.OSD_VIDEOPOS_LABEL);                 ShowControl(GetID' (int)Controls.OSD_NONINTERLEAVED);                 ShowControl(GetID' (int)Controls.OSD_NOCACHE);                 ShowControl(GetID' (int)Controls.OSD_ADJFRAMERATE);                 ShowControl(GetID' (int)Controls.OSD_SATURATIONLABEL);                 ShowControl(GetID' (int)Controls.OSD_SATURATION);                 ShowControl(GetID' (int)Controls.OSD_SHARPNESSLABEL);                 ShowControl(GetID' (int)Controls.OSD_SHARPNESS);                 ShowControl(GetID' (int)Controls.OSD_BRIGHTNESS);                 ShowControl(GetID' (int)Controls.OSD_BRIGHTNESSLABEL);                 ShowControl(GetID' (int)Controls.OSD_CONTRAST);                 ShowControl(GetID' (int)Controls.OSD_CONTRASTLABEL);                 ShowControl(GetID' (int)Controls.OSD_GAMMA);                 ShowControl(GetID' (int)Controls.OSD_GAMMALABEL);                 FocusControl(GetID' (int)Controls.OSD_VIDEOPOS' 0); // set focus to the first control in our group               }             }              if (iControl == (int)Controls.OSD_AUDIO)             {               ToggleSubMenu(iControl' (int)Controls.OSD_SUBMENU_BG_AUDIO); // hide or show the sub-menu               if (isSubMenuVisible) // is sub menu on?               {                 int iValue = g_Player.Volume;                 GUISliderControl pSlider = GetControl((int)Controls.OSD_AUDIOVOLUMESLIDER) as GUISliderControl;                 if (null != pSlider)                 {                   pSlider.Percentage = iValue; // Update our volume slider accordingly ...                 }                  // set the controls values                 GUISliderControl pControl = (GUISliderControl)GetControl((int)Controls.OSD_AVDELAY);                 pControl.SpinType = GUISpinControl.SpinType.SPIN_CONTROL_TYPE_FLOAT;                 pControl.SetRange(-20' 20);                 SetSliderValue(-20' 20' m_audioDelay' (int)Controls.OSD_AVDELAY);                  bool hasPostProc = (g_Player.HasPostprocessing || g_Player.HasAudioEngine);                 if (hasPostProc)                 {                   GUIPropertyManager.SetProperty("#VideoOSD.AudioVideoDelayPossible"' "true");                   pControl.FloatInterval = 1;                 }                 else                 {                    GUIPropertyManager.SetProperty("#VideoOSD.AudioVideoDelayPossible"' "false");                   pControl.FloatValue = 0;                   m_audioDelay = 0;                   pControl.FloatInterval = 0;                 }                  // show the controls on this sub menu                 ShowControl(GetID' (int)Controls.OSD_AVDELAY);                 ShowControl(GetID' (int)Controls.OSD_AVDELAY_LABEL);                 ShowControl(GetID' (int)Controls.OSD_AUDIOSTREAM_LIST);                 ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER);                 ShowControl(GetID' (int)Controls.OSD_AUDIOVOLUMESLIDER_LABEL);                  FocusControl(GetID' (int)Controls.OSD_AVDELAY' 0); // set focus to the first control in our group                 PopulateAudioStreams(); // populate the list control with audio streams for this video               }             }              return true;           }       }
Missing Default,MediaPortal.GUI.Video,GUIVideoOSD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\Common.GUIPlugins\Video\GUIVideoOSD.cs,Handle_ControlSetting,The following switch statement is missing a default case: switch (iControlID)       {         case (int)Controls.OSD_VOLUMESLIDER:         case (int)Controls.OSD_AUDIOVOLUMESLIDER:           {             GUISliderControl pControl = GetControl(iControlID) as GUISliderControl;             if (null != pControl)             {               // no volume control yet so no code here at the moment               if (g_Player.Playing)               {                 int iPercentage = pControl.Percentage;                 g_Player.Volume = iPercentage;               }             }           }           break;          case (int)Controls.OSD_VIDEOPOS:           {             g_Player.SeekAsolutePercentage((int)GetSliderValue(iControlID));           }           break;          case (int)Controls.OSD_SATURATION:           {             GUIGraphicsContext.Saturation = (int)GetSliderValue(iControlID);             UpdateGammaContrastBrightness();           }           break;          case (int)Controls.OSD_SHARPNESS:           {             GUIGraphicsContext.Sharpness = (int)GetSliderValue(iControlID);             UpdateGammaContrastBrightness();           }           break;          case (int)Controls.OSD_BRIGHTNESS:           {             GUIGraphicsContext.Brightness = (int)GetSliderValue(iControlID);             UpdateGammaContrastBrightness();           }           break;          case (int)Controls.OSD_CONTRAST:           {             GUIGraphicsContext.Contrast = (int)GetSliderValue(iControlID);             UpdateGammaContrastBrightness();           }           break;          case (int)Controls.OSD_GAMMA:           {             GUIGraphicsContext.Gamma = (int)GetSliderValue(iControlID);             UpdateGammaContrastBrightness();           }           break;          case (int)Controls.OSD_AUDIOSTREAM_LIST:           {             if (wID != 0) // check to see if list control has an action ID' remote can cause 0 based events             {               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_ITEM_SELECTED' GetID' 0'                                               (int)Controls.OSD_AUDIOSTREAM_LIST' 0' 0' null);               OnMessage(msg);               // only change the audio stream if a different one has been asked for               if (g_Player.CurrentAudioStream != msg.Param1)               {                 g_Player.CurrentAudioStream = msg.Param1; // Set the audio stream to the one selected                 //ToggleSubMenu(0' m_iActiveMenu);						// hide the currently active sub-menu                 PopulateAudioStreams();               }             }           }           break;          case (int)Controls.OSD_CREATEBOOKMARK:           {             double dCurTime = g_Player.CurrentPosition; // get the current playing time position              VideoDatabase.AddBookMarkToMovie(g_Player.CurrentFile' (float)dCurTime); // add the current timestamp             PopulateBookmarks(); // refresh our list control           }           break;          case (int)Controls.OSD_BOOKMARKS_LIST:           {             if (wID != 0) // check to see if list control has an action ID' remote can cause 0 based events             {               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_ITEM_SELECTED' GetID' 0'                                               (int)Controls.OSD_BOOKMARKS_LIST' 0' 0' null);               OnMessage(msg);               m_iCurrentBookmark = msg.Param1; // index of bookmark user selected                 ArrayList bookmarks = new ArrayList();               VideoDatabase.GetBookMarksForMovie(strMovie' ref bookmarks); // load the stored bookmarks               if (bookmarks.Count <= 0)               {                 return; // no bookmarks? leave if so ...               }               Log.Debug("GUIVideoOSD.BOOKMARKS_LIST - skipping");               g_Player.SeekAbsolute((double)bookmarks[m_iCurrentBookmark]); // set mplayers play position             }           }           break;          case (int)Controls.OSD_CLEARBOOKMARKS:           {             VideoDatabase.ClearBookMarksOfMovie(g_Player.CurrentFile); // empty the bookmarks table for this movie             m_iCurrentBookmark = 0; // reset current bookmark             PopulateBookmarks(); // refresh our list control           }           break;          case (int)Controls.OSD_VIDEO_POSTPROC_DEBLOCK_ONOFF:           {             PostProcessingEngine.GetInstance().EnablePostProcess = !PostProcessingEngine.GetInstance().EnablePostProcess;           }           break;         case (int)Controls.OSD_VIDEO_POSTPROC_RESIZE_ONOFF:           {             PostProcessingEngine.GetInstance().EnableResize = !PostProcessingEngine.GetInstance().EnableResize;           }           break;          case (int)Controls.OSD_VIDEO_POSTPROC_DEINTERLACE_ONOFF:           {             PostProcessingEngine.GetInstance().EnableDeinterlace = !PostProcessingEngine.GetInstance().EnableDeinterlace;           }           break;          case (int)Controls.OSD_SUBTITLE_ONOFF:           {             g_Player.EnableSubtitle = !g_Player.EnableSubtitle;           }           break;          case (int)Controls.OSD_SUBTITLE_FORCED_ONOFF:           {             SubEngine.engine.AutoShow = !SubEngine.engine.AutoShow;           }           break;          case (int)Controls.OSD_SUBTITLE_LIST:           {             if (wID != 0) // check to see if list control has an action ID' remote can cause 0 based events             {               GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_ITEM_SELECTED' GetID' 0'                                               (int)Controls.OSD_SUBTITLE_LIST' 0' 0' null);               OnMessage(msg); // retrieve the selected list item               if (g_Player.SupportsCC) // Subtitle CC               {                 if (g_Player.SupportsCC && msg.Param1 == 0)                 {                   msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_GET_SELECTED_ITEM' GetID' 0'                                        (int)Controls.OSD_SUBTITLE_LIST' msg.Param1' 0' null);                   g_Player.EnableSubtitle = false;                   g_Player.CurrentSubtitleStream = -1;                   Log.Info("Subtitle CC selected ");                 }                 else                 {                   Log.Info("Subtitle stream selected " + msg.Label);                   g_Player.CurrentSubtitleStream = msg.Param1 - 1; // set the current subtitle                   g_Player.EnableSubtitle = true;                 }               }               else               {                 Log.Info("Subtitle stream selected " + msg.Label);                 g_Player.CurrentSubtitleStream = msg.Param1; // set the current subtitle               }               PopulateSubTitles();             }           }           break;          case (int)Controls.OSD_SUBTITLE_DELAY:           {             GUISliderControl pControl = (GUISliderControl)GetControl(iControlID);             if (null != pControl && g_Player.EnableSubtitle)             {               if (pControl.FloatValue < m_subtitleDelay)               {                 MediaPortal.Player.Subtitles.SubEngine.GetInstance().DelayMinus((int)pControl.FloatValue);               }               else if (pControl.FloatValue > m_subtitleDelay)               {                 MediaPortal.Player.Subtitles.SubEngine.GetInstance().DelayPlus((int)pControl.FloatValue);               }               m_subtitleDelay = (int)pControl.FloatValue;             }           }           break;          case (int)Controls.OSD_VIDEO_POSTPROC_CROP_VERTICAL:           {             GUISliderControl pControl = (GUISliderControl)GetControl(iControlID);             if (null != pControl)             {               PostProcessingEngine.GetInstance().CropVertical = pControl.Percentage;               UpdatePostProcessing();             }           }           break;          case (int)Controls.OSD_VIDEO_POSTPROC_CROP_HORIZONTAL:           {             GUISliderControl pControl = (GUISliderControl)GetControl(iControlID);             if (null != pControl)             {               PostProcessingEngine.GetInstance().CropHorizontal = pControl.Percentage;               UpdatePostProcessing();             }           }           break;          case (int)Controls.OSD_AVDELAY:           {              IPostProcessingEngine postEngine = PostProcessingEngine.GetInstance();              IAudioPostEngine audioEngine = AudioPostEngine.GetInstance();              GUISliderControl pControl = (GUISliderControl)GetControl(iControlID);              if (null != pControl && g_Player.HasPostprocessing)             {               if (pControl.FloatValue < m_audioDelay)               {                 PostProcessingEngine.GetInstance().AudioDelayMinus();               }               else if (pControl.FloatValue > m_audioDelay)               {                 PostProcessingEngine.GetInstance().AudioDelayPlus();               }               m_audioDelay = (int)pControl.FloatValue;             }             else if (null != pControl && g_Player.HasAudioEngine)             {               if (pControl.FloatValue < m_audioDelay)               {                  AudioPostEngine.GetInstance().AudioDelayMinus();               }               else if (pControl.FloatValue > m_audioDelay)               {                  AudioPostEngine.GetInstance().AudioDelayPlus();               }               m_audioDelay = (int)pControl.FloatValue;             }           }           break;       }
