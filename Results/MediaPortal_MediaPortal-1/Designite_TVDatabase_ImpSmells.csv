Implementation smell,Namespace,Class,File,Method,Description
Long Method,TvDatabase,Schedule,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\Schedule.cs,IsRecordingProgram,The method has 154 lines of code.
Complex Method,TvDatabase,Schedule,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\Schedule.cs,GetProgramsForSchedule,Cyclomatic complexity of the method is 9
Complex Method,TvDatabase,Schedule,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\Schedule.cs,IsRecordingProgram,Cyclomatic complexity of the method is 24
Complex Method,TvDatabase,WeekEndTool,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\WeekEndTool.cs,GetText,Cyclomatic complexity of the method is 8
Complex Method,TvDatabase,WeekEndTool,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\WeekEndTool.cs,GetText,Cyclomatic complexity of the method is 9
Long Parameter List,TvDatabase,Card,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\Card.cs,Card,The method has 13 parameters. Parameters: devicePath' name' priority' grabEPG' lastEpgGrab' recordingFolder' idServer' enabled' camType' timeshiftingFolder' recordingFormat' decryptLimit' netProvider
Long Parameter List,TvDatabase,Card,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\Card.cs,Card,The method has 16 parameters. Parameters: devicePath' name' priority' grabEPG' lastEpgGrab' recordingFolder' idServer' enabled' camType' timeshiftingFolder' recordingFormat' decryptLimit' preloadCard' stopGraph' caModule' netProvider
Long Parameter List,TvDatabase,Card,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\Card.cs,Card,The method has 17 parameters. Parameters: idCard' devicePath' name' priority' grabEPG' lastEpgGrab' recordingFolder' idServer' enabled' camType' timeshiftingFolder' recordingFormat' decryptLimit' preloadCard' stopGraph' caModule' netProvider
Long Parameter List,TvDatabase,Channel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\Channel.cs,Channel,The method has 11 parameters. Parameters: isRadio' isTv' timesWatched' totalTimeWatched' grabEpg' lastGrabTime' sortOrder' visibleInGuide' externalId' displayName' channelNumber
Long Parameter List,TvDatabase,Channel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\Channel.cs,Channel,The method has 12 parameters. Parameters: idChannel' isRadio' isTv' timesWatched' totalTimeWatched' grabEpg' lastGrabTime' sortOrder' visibleInGuide' externalId' displayName' channelNumber
Long Parameter List,TvDatabase,Channel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\Channel.cs,Channel,The method has 10 parameters. Parameters: isRadio' isTv' timesWatched' totalTimeWatched' grabEpg' lastGrabTime' sortOrder' visibleInGuide' externalId' displayName
Long Parameter List,TvDatabase,Conflict,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\Conflict.cs,Conflict,The method has 5 parameters. Parameters: idSchedule' idConflictingSchedule' idChannel' conflictDate' idCard
Long Parameter List,TvDatabase,Conflict,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\Conflict.cs,Conflict,The method has 6 parameters. Parameters: idConflict' idSchedule' idConflictingSchedule' idChannel' conflictDate' idCard
Long Parameter List,TvDatabase,SoftwareEncoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\SoftwareEncoder.cs,SoftwareEncoder,The method has 5 parameters. Parameters: idEncoder' priority' name' type' reusable
Long Parameter List,TvDatabase,History,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\History.cs,History,The method has 8 parameters. Parameters: idChannel' startTime' endTime' title' description' genre' recorded' watched
Long Parameter List,TvDatabase,History,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\History.cs,History,The method has 9 parameters. Parameters: idHistory' idChannel' startTime' endTime' title' description' genre' recorded' watched
Long Parameter List,TvDatabase,Keyword,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\KeyWord.cs,Keyword,The method has 5 parameters. Parameters: idKeyword' keywordName' rating' autoRecord' searchIn
Long Parameter List,TvDatabase,Program,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\Program.cs,Program,The method has 15 parameters. Parameters: idChannel' startTime' endTime' title' description' genre' state' originalAirDate' seriesNum' episodeNum' episodeName' episodePart' starRating' classification' parentalRating
Long Parameter List,TvDatabase,Program,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\Program.cs,Program,The method has 16 parameters. Parameters: idProgram' idChannel' startTime' endTime' title' description' genre' state' originalAirDate' seriesNum' episodeNum' episodeName' episodePart' starRating' classification' parentalRating
Long Parameter List,TvDatabase,Program,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\Program.cs,AddTimeRangeConstraint,The method has 6 parameters. Parameters: sb' startField' endField' startParam' endParam' crossMidnight
Long Parameter List,TvDatabase,Recording,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\Recording.cs,Recording,The method has 17 parameters. Parameters: idChannel' idSchedule' isRecording' startTime' endTime' title' description' genre' fileName' keepUntil' keepUntilDate' timesWatched' idServer' episodeName' seriesNum' episodeNum' episodePart
Long Parameter List,TvDatabase,Recording,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\Recording.cs,Recording,The method has 19 parameters. Parameters: idRecording' isRecording' idSchedule' idChannel' startTime' endTime' title' description' genre' fileName' keepUntil' keepUntilDate' timesWatched' idServer' stopTime' episodeName' seriesNum' episodeNum' episodePart
Long Parameter List,TvDatabase,Schedule,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\Schedule.cs,Schedule,The method has 15 parameters. Parameters: idChannel' idParentSchedule' scheduleType' programName' startTime' endTime' maxAirings' priority' directory' quality' keepMethod' keepDate' preRecordInterval' postRecordInterval' canceled
Long Parameter List,TvDatabase,Schedule,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\Schedule.cs,Schedule,The method has 16 parameters. Parameters: idSchedule' idParentSchedule' idChannel' scheduleType' programName' startTime' endTime' maxAirings' priority' directory' quality' keepMethod' keepDate' preRecordInterval' postRecordInterval' canceled
Long Parameter List,TvDatabase,TuningDetail,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\TuningDetail.cs,TuningDetail,The method has 33 parameters. Parameters: idChannel' name' provider' channelType' channelNumber' frequency' countryId' isRadio' isTv' networkId' transportId' serviceId' pmtPid' freeToAir' modulation' polarisation' symbolrate' diseqc' switchingFrequency' bandwidth' majorChannel' minorChannel' videoSource' audioSource' isVCRSignal' tuningSource' band' satIndex' innerFecRate' pilot' rollOff' url' bitrate
Long Parameter List,TvDatabase,TuningDetail,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\TuningDetail.cs,TuningDetail,The method has 37 parameters. Parameters: idTuning' idChannel' name' provider' channelType' channelNumber' frequency' countryId' isRadio' isTv' networkId' transportId' serviceId' pmtPid' freeToAir' modulation' polarisation' symbolrate' diseqc' switchingFrequency' bandwidth' majorChannel' minorChannel' pcrPid' videoSource' audioSource' isVCRSignal' tuningSource' videoPid' audioPid' band' satIndex' innerFecRate' pilot' rollOff' url' bitrate
Long Statement,TvDatabase,Conflict,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\Conflict.cs,ComplexRetrieve,The length of the statement  "        "Gentle.NET Business Entity script: Generation of complex retrieve function (multiple primary keys) is not implemented yet."); " is 126.
Long Statement,TvDatabase,Schedule,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\Schedule.cs,GetProgramsForSchedule,The length of the statement  "          progs = Program.RetrieveWeeklyEveryTimeOnThisChannel(schedule.startTime' schedule.endTime' schedule.programName' schedule.ReferencedChannel().IdChannel); " is 153.
Long Statement,TvDatabase,Schedule,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\Schedule.cs,IsPartialRecording,The length of the statement  "          "IsPartialRecording: program ({0} {1} - {2} is not (at least partially) included in the schedule {3:hh:mm} - {4:hh:mm}"' " is 120.
Complex Conditional,TvDatabase,Schedule,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\Schedule.cs,IsOverlapping,The conditional expression  "(Start2 >= Start1 && Start2 < End1) ||            (Start2 <= Start1 && End2 >= End1) ||            (End2 > Start1 && End2 <= End1)"  is complex.
Magic Number,TvDatabase,CanceledSchedule,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\CanceledSchedule.cs,DeleteAllCancelledSeries,The following statement contains a magic number: DateTime date = DateTime.Now.AddDays(-5);
Magic Number,TvDatabase,Channel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\Channel.cs,UpdateNowAndNext,The following statement contains a magic number: sb.SetRowLimit(2);
Magic Number,TvDatabase,Channel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\Channel.cs,IsWebstream,The following statement contains a magic number: detail.ChannelType == 5
Magic Number,TvDatabase,History,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\History.cs,Save,The following statement contains a magic number: watched >= 10
Magic Number,TvDatabase,WeekEndTool,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\WeekEndTool.cs,GetDayIndex,The following statement contains a magic number: return ((int)day + 7 - (int)GetFirstWorkingDay()) % 7;
Magic Number,TvDatabase,WeekEndTool,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\WeekEndTool.cs,GetDayIndex,The following statement contains a magic number: return ((int)day + 7 - (int)GetFirstWorkingDay()) % 7;
Magic Number,TvDatabase,WeekEndTool,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\WeekEndTool.cs,GetDayByIndex,The following statement contains a magic number: return (DayOfWeek)((dayIndex + (int)GetFirstWorkingDay()) % 7);
Magic Number,TvDatabase,WeekEndTool,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\WeekEndTool.cs,IsWeekend,The following statement contains a magic number: return index == 5 || index == 6;
Magic Number,TvDatabase,WeekEndTool,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\WeekEndTool.cs,IsWeekend,The following statement contains a magic number: return index == 5 || index == 6;
Magic Number,TvDatabase,WeekEndTool,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\WeekEndTool.cs,GetText,The following statement contains a magic number: switch (dayOfWeek)        {          case DayOfWeek.Monday:            return 657;          case DayOfWeek.Tuesday:            return 658;          case DayOfWeek.Wednesday:            return 659;          case DayOfWeek.Thursday:            return 660;          case DayOfWeek.Friday:            return 661;          case DayOfWeek.Saturday:            return 662;          case DayOfWeek.Sunday:            return 663;          default:            return -1;        }
Magic Number,TvDatabase,WeekEndTool,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\WeekEndTool.cs,GetText,The following statement contains a magic number: switch (dayOfWeek)        {          case DayOfWeek.Monday:            return 657;          case DayOfWeek.Tuesday:            return 658;          case DayOfWeek.Wednesday:            return 659;          case DayOfWeek.Thursday:            return 660;          case DayOfWeek.Friday:            return 661;          case DayOfWeek.Saturday:            return 662;          case DayOfWeek.Sunday:            return 663;          default:            return -1;        }
Magic Number,TvDatabase,WeekEndTool,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\WeekEndTool.cs,GetText,The following statement contains a magic number: switch (dayOfWeek)        {          case DayOfWeek.Monday:            return 657;          case DayOfWeek.Tuesday:            return 658;          case DayOfWeek.Wednesday:            return 659;          case DayOfWeek.Thursday:            return 660;          case DayOfWeek.Friday:            return 661;          case DayOfWeek.Saturday:            return 662;          case DayOfWeek.Sunday:            return 663;          default:            return -1;        }
Magic Number,TvDatabase,WeekEndTool,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\WeekEndTool.cs,GetText,The following statement contains a magic number: switch (dayOfWeek)        {          case DayOfWeek.Monday:            return 657;          case DayOfWeek.Tuesday:            return 658;          case DayOfWeek.Wednesday:            return 659;          case DayOfWeek.Thursday:            return 660;          case DayOfWeek.Friday:            return 661;          case DayOfWeek.Saturday:            return 662;          case DayOfWeek.Sunday:            return 663;          default:            return -1;        }
Magic Number,TvDatabase,WeekEndTool,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\WeekEndTool.cs,GetText,The following statement contains a magic number: switch (dayOfWeek)        {          case DayOfWeek.Monday:            return 657;          case DayOfWeek.Tuesday:            return 658;          case DayOfWeek.Wednesday:            return 659;          case DayOfWeek.Thursday:            return 660;          case DayOfWeek.Friday:            return 661;          case DayOfWeek.Saturday:            return 662;          case DayOfWeek.Sunday:            return 663;          default:            return -1;        }
Magic Number,TvDatabase,WeekEndTool,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\WeekEndTool.cs,GetText,The following statement contains a magic number: switch (dayOfWeek)        {          case DayOfWeek.Monday:            return 657;          case DayOfWeek.Tuesday:            return 658;          case DayOfWeek.Wednesday:            return 659;          case DayOfWeek.Thursday:            return 660;          case DayOfWeek.Friday:            return 661;          case DayOfWeek.Saturday:            return 662;          case DayOfWeek.Sunday:            return 663;          default:            return -1;        }
Magic Number,TvDatabase,WeekEndTool,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\WeekEndTool.cs,GetText,The following statement contains a magic number: switch (dayOfWeek)        {          case DayOfWeek.Monday:            return 657;          case DayOfWeek.Tuesday:            return 658;          case DayOfWeek.Wednesday:            return 659;          case DayOfWeek.Thursday:            return 660;          case DayOfWeek.Friday:            return 661;          case DayOfWeek.Saturday:            return 662;          case DayOfWeek.Sunday:            return 663;          default:            return -1;        }
Magic Number,TvDatabase,WeekEndTool,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\WeekEndTool.cs,GetText,The following statement contains a magic number: switch (dayType)        {          case DayType.FirstWorkingDay:            return GetText(GetDayByIndex(0));          case DayType.LastWorkingDay:            return GetText(GetDayByIndex(4));          case DayType.FirstWeekendDay:            return GetText(FirstWeekendDay);          case DayType.LastWeekendDay:            return GetText(SecondWeekendDay);          case DayType.WorkingDays:            return 680;          case DayType.Record_WorkingDays:            return 672;          case DayType.WeekendDays:            return 1050;          case DayType.Record_WeekendDays:            return 1051;          default:            return -1;        }
Magic Number,TvDatabase,WeekEndTool,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\WeekEndTool.cs,GetText,The following statement contains a magic number: switch (dayType)        {          case DayType.FirstWorkingDay:            return GetText(GetDayByIndex(0));          case DayType.LastWorkingDay:            return GetText(GetDayByIndex(4));          case DayType.FirstWeekendDay:            return GetText(FirstWeekendDay);          case DayType.LastWeekendDay:            return GetText(SecondWeekendDay);          case DayType.WorkingDays:            return 680;          case DayType.Record_WorkingDays:            return 672;          case DayType.WeekendDays:            return 1050;          case DayType.Record_WeekendDays:            return 1051;          default:            return -1;        }
Magic Number,TvDatabase,WeekEndTool,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\WeekEndTool.cs,GetText,The following statement contains a magic number: switch (dayType)        {          case DayType.FirstWorkingDay:            return GetText(GetDayByIndex(0));          case DayType.LastWorkingDay:            return GetText(GetDayByIndex(4));          case DayType.FirstWeekendDay:            return GetText(FirstWeekendDay);          case DayType.LastWeekendDay:            return GetText(SecondWeekendDay);          case DayType.WorkingDays:            return 680;          case DayType.Record_WorkingDays:            return 672;          case DayType.WeekendDays:            return 1050;          case DayType.Record_WeekendDays:            return 1051;          default:            return -1;        }
Magic Number,TvDatabase,WeekEndTool,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\WeekEndTool.cs,GetText,The following statement contains a magic number: switch (dayType)        {          case DayType.FirstWorkingDay:            return GetText(GetDayByIndex(0));          case DayType.LastWorkingDay:            return GetText(GetDayByIndex(4));          case DayType.FirstWeekendDay:            return GetText(FirstWeekendDay);          case DayType.LastWeekendDay:            return GetText(SecondWeekendDay);          case DayType.WorkingDays:            return 680;          case DayType.Record_WorkingDays:            return 672;          case DayType.WeekendDays:            return 1050;          case DayType.Record_WeekendDays:            return 1051;          default:            return -1;        }
Magic Number,TvDatabase,WeekEndTool,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\WeekEndTool.cs,GetText,The following statement contains a magic number: switch (dayType)        {          case DayType.FirstWorkingDay:            return GetText(GetDayByIndex(0));          case DayType.LastWorkingDay:            return GetText(GetDayByIndex(4));          case DayType.FirstWeekendDay:            return GetText(FirstWeekendDay);          case DayType.LastWeekendDay:            return GetText(SecondWeekendDay);          case DayType.WorkingDays:            return 680;          case DayType.Record_WorkingDays:            return 672;          case DayType.WeekendDays:            return 1050;          case DayType.Record_WeekendDays:            return 1051;          default:            return -1;        }
Duplicate Code,TvDatabase,Schedule,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\Schedule.cs,IsRecordingProgram,The method contains a code clone-set at the following line numbers (starting from the method definition): ((83' 102)' (110' 129))
Missing Default,TvDatabase,Program,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\Program.cs,AddWeekdayConstraint,The following switch statement is missing a default case: switch (provider)        {          case "mysql":            sb.AddConstraint(string.Format("DAYOFWEEK({0}) in ({1})"' timeField' days));            break;          case "sqlserver":            // DATEPART(dw' {0})+@@DATEFIRST-7 makes sure result is the same regardless of regional settings            sb.AddConstraint(string.Format("(DATEPART(dw' {0})+@@DATEFIRST-7) in ({1})"' timeField' days));            break;        }
Missing Default,TvDatabase,Schedule,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\Schedule.cs,GetProgramsForSchedule,The following switch statement is missing a default case: switch (schedule.scheduleType)        {          case (int)ScheduleRecordingType.Once:            var prgOnce = Program.RetrieveOnce(schedule.programName' schedule.startTime' schedule.endTime'                                                   schedule.ReferencedChannel().IdChannel);            progs = new List<Program>();            if (prgOnce != null)            {              progs.Add(prgOnce);            }            break;            case (int)ScheduleRecordingType.Daily:            progs = Program.RetrieveDaily(schedule.startTime' schedule.endTime'schedule.ReferencedChannel().IdChannel);            break;            case (int)ScheduleRecordingType.EveryTimeOnEveryChannel:            progs = Program.RetrieveEveryTimeOnEveryChannel(schedule.programName);            break;            case (int)ScheduleRecordingType.EveryTimeOnThisChannel:            progs = Program.RetrieveEveryTimeOnThisChannel(schedule.programName' schedule.ReferencedChannel().IdChannel);            break;            case (int)ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:            progs = Program.RetrieveWeeklyEveryTimeOnThisChannel(schedule.startTime' schedule.endTime' schedule.programName' schedule.ReferencedChannel().IdChannel);            break;            case (int)ScheduleRecordingType.Weekends:            progs = Program.RetrieveWeekends(schedule.startTime' schedule.endTime' schedule.ReferencedChannel().IdChannel);            break;            case (int)ScheduleRecordingType.Weekly:            progs = Program.RetrieveWeekly(schedule.startTime' schedule.endTime' schedule.ReferencedChannel().IdChannel);            break;            case (int)ScheduleRecordingType.WorkingDays:            progs = Program.RetrieveWorkingDays(schedule.startTime' schedule.endTime' schedule.ReferencedChannel().IdChannel);            break;        }
Missing Default,TvDatabase,Schedule,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVDatabase\Schedule.cs,IsRecordingProgram,The following switch statement is missing a default case: switch (scheduleRecordingType)        {          case ScheduleRecordingType.Once:            {              if (program.StartTime == StartTime && program.EndTime == EndTime && program.IdChannel == IdChannel)              {                if (filterCanceledRecordings)                {                  if (ReferringCanceledSchedule().Count > 0)                  {                    return false;                  }                }                return true;              }            }            break;          case ScheduleRecordingType.EveryTimeOnEveryChannel:            if (program.Title == ProgramName)            {              if (filterCanceledRecordings && IsSerieIsCanceled(GetSchedStartTimeForProg(program)' program.IdChannel))              {                return false;              }              return true;            }            break;          case ScheduleRecordingType.EveryTimeOnThisChannel:            if (program.Title == ProgramName && program.IdChannel == IdChannel)            {              if (filterCanceledRecordings && IsSerieIsCanceled(GetSchedStartTimeForProg(program)' program.IdChannel))              {                return false;              }              return true;            }            break;          case ScheduleRecordingType.WeeklyEveryTimeOnThisChannel:            if (program.Title == ProgramName && program.IdChannel == IdChannel &&                StartTime.DayOfWeek == program.StartTime.DayOfWeek)            {              if (filterCanceledRecordings && IsSerieIsCanceled(GetSchedStartTimeForProg(program)' program.IdChannel))              {                return false;              }              return true;            }            break;          case ScheduleRecordingType.Daily:            if (program.IdChannel == IdChannel)            {              return IsRecordingProgramWithinTimeRange(program' filterCanceledRecordings);                /*int iHourProg = program.StartTime.Hour;              int iMinProg = program.StartTime.Minute;              if (iHourProg == StartTime.Hour && iMinProg == StartTime.Minute)              {                iHourProg = program.EndTime.Hour;                iMinProg = program.EndTime.Minute;                if (iHourProg == EndTime.Hour && iMinProg == EndTime.Minute)                {                  if (filterCanceledRecordings && IsSerieIsCanceled(program.StartTime))                  {                    return false;                  }                  return true;                }              }*/            }            break;          case ScheduleRecordingType.WorkingDays:            if (WeekEndTool.IsWorkingDay(program.StartTime.DayOfWeek))            {              if (program.IdChannel == IdChannel)              {                return IsRecordingProgramWithinTimeRange(program' filterCanceledRecordings);                /*                int iHourProg = program.StartTime.Hour;                int iMinProg = program.StartTime.Minute;                if (iHourProg == StartTime.Hour && iMinProg == StartTime.Minute)                {                  iHourProg = program.EndTime.Hour;                  iMinProg = program.EndTime.Minute;                  if (iHourProg == EndTime.Hour && iMinProg == EndTime.Minute)                  {                    if (filterCanceledRecordings && IsSerieIsCanceled(program.StartTime))                    {                      return false;                    }                    return true;                  }                }*/              }            }            break;            case ScheduleRecordingType.Weekends:            if (WeekEndTool.IsWeekend(program.StartTime.DayOfWeek))            {              if (program.IdChannel == IdChannel)              {                return IsRecordingProgramWithinTimeRange(program' filterCanceledRecordings);                  /*                int iHourProg = program.StartTime.Hour;                int iMinProg = program.StartTime.Minute;                if (iHourProg == StartTime.Hour && iMinProg == StartTime.Minute)                {                  iHourProg = program.EndTime.Hour;                  iMinProg = program.EndTime.Minute;                  if (iHourProg == EndTime.Hour && iMinProg == EndTime.Minute)                  {                    if (filterCanceledRecordings && IsSerieIsCanceled(program.StartTime))                    {                      return false;                    }                    return true;                  }                }*/              }            }            break;            case ScheduleRecordingType.Weekly:            if (program.IdChannel == IdChannel)            {              return (StartTime.DayOfWeek == program.StartTime.DayOfWeek &&                      IsRecordingProgramWithinTimeRange(program' filterCanceledRecordings));              /*              int iHourProg = program.StartTime.Hour;              int iMinProg = program.StartTime.Minute;              if (iHourProg == StartTime.Hour && iMinProg == StartTime.Minute)              {                iHourProg = program.EndTime.Hour;                iMinProg = program.EndTime.Minute;                if (iHourProg == EndTime.Hour && iMinProg == EndTime.Minute)                {                  if ((StartTime.DayOfWeek == program.StartTime.DayOfWeek) && (program.StartTime.Date >= StartTime.Date))                  {                    if (filterCanceledRecordings && IsSerieIsCanceled(program.StartTime))                    {                      return false;                    }                    return true;                  }                }              }*/            }            break;        }
