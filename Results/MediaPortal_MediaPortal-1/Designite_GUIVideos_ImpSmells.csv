Implementation smell,Namespace,Class,File,Method,Description
Long Method,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,SetLabels,The method has 199 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,OnShowSort,The method has 119 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnPageLoad,The method has 104 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnMessage,The method has 107 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnClick,The method has 287 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnInfo,The method has 107 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The method has 487 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,PlayMovieFromPlayList,The method has 147 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,PlayMovie,The method has 162 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The method has 114 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,SetDefaultGrabber,The method has 100 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,LoadDirectory,The method has 455 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,AddItem,The method has 109 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,DoOnPlayBackStoppedOrChanged,The method has 137 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,AddFileToDatabase,The method has 105 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnPageLoad,The method has 124 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnClicked,The method has 237 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,Update,The method has 134 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,Refresh,The method has 108 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,ThreadSearchImages,The method has 111 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoPlayList,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoPlaylist.cs,LoadDirectory,The method has 129 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoPlayList,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoPlaylist.cs,SetIMDBThumbs,The method has 105 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The method has 320 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,LoadDirectory,The method has 264 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,SetLabel,The method has 111 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,DialogProtectedContent,The method has 113 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnItemSelected,The method has 139 lines of code.
Long Method,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,GetItemViewHistory,The method has 112 lines of code.
Long Method,MediaPortal.GUI.Video,SelectDVDHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\SelectDVDHandler.cs,SetIMDBThumbs,The method has 199 lines of code.
Long Method,MediaPortal.GUI.Video,VideoFolderWatcherHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoFolderWatcherHelper.cs,ProcessEvents,The method has 149 lines of code.
Long Method,MediaPortal.GUI.Video,VideoSort,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoSort.cs,Compare,The method has 327 lines of code.
Long Method,MediaPortal.GUI.Video,VideoViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoViewHandler.cs,Execute,The method has 136 lines of code.
Complex Method,MediaPortal.GUI.Video,FolderSetting,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\FolderSetting.cs,UpdateFolders,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,OnShowContextMenu,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,SetNewproperties,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,Update,Cyclomatic complexity of the method is 21
Complex Method,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,GetSortMethod,Cyclomatic complexity of the method is 12
Complex Method,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,UpdateButtonStates,Cyclomatic complexity of the method is 14
Complex Method,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,SetLabels,Cyclomatic complexity of the method is 33
Complex Method,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,OnShowSort,Cyclomatic complexity of the method is 17
Complex Method,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,LoadPlayList,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnSearchNew,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,LoadSettings,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnAction,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnPageLoad,Cyclomatic complexity of the method is 14
Complex Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnMessage,Cyclomatic complexity of the method is 26
Complex Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnClick,Cyclomatic complexity of the method is 39
Complex Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnInfo,Cyclomatic complexity of the method is 14
Complex Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,Cyclomatic complexity of the method is 84
Complex Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,CheckMovie,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,PlayMovieFromPlayList,Cyclomatic complexity of the method is 26
Complex Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,PlayMovieFromBDPlayList,Cyclomatic complexity of the method is 14
Complex Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,IsVideoWindow,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,PlayMovie,Cyclomatic complexity of the method is 27
Complex Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,Cyclomatic complexity of the method is 12
Complex Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,SetDefaultGrabber,Cyclomatic complexity of the method is 10
Complex Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,LoadDirectory,Cyclomatic complexity of the method is 71
Complex Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,AddItem,Cyclomatic complexity of the method is 15
Complex Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,CheckExternalPlayer,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,DoOnPlayBackStoppedOrChanged,Cyclomatic complexity of the method is 21
Complex Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnPlayBackEnded,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnPlayAll,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,AddFileToDatabase,Cyclomatic complexity of the method is 19
Complex Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,SetLabel,Cyclomatic complexity of the method is 10
Complex Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,GUIWindowManager_OnNewMessage,Cyclomatic complexity of the method is 12
Complex Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowFileMenu,Cyclomatic complexity of the method is 10
Complex Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,DownloadSubtitles,Cyclomatic complexity of the method is 10
Complex Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,CreateFolderThumb,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnSelectMovie,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnPageLoad,Cyclomatic complexity of the method is 16
Complex Method,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnClicked,Cyclomatic complexity of the method is 31
Complex Method,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnShowContextMenu,Cyclomatic complexity of the method is 13
Complex Method,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,Update,Cyclomatic complexity of the method is 72
Complex Method,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,Refresh,Cyclomatic complexity of the method is 10
Complex Method,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,RenameTitle,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnVideoArtistInfo,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnSelectMovie,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,ThreadSearchImages,Cyclomatic complexity of the method is 20
Complex Method,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,RefreshImdbData,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Video,GUIVideoPlayList,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoPlaylist.cs,OnAction,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Video,GUIVideoPlayList,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoPlaylist.cs,OnClicked,Cyclomatic complexity of the method is 10
Complex Method,MediaPortal.GUI.Video,GUIVideoPlayList,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoPlaylist.cs,LoadDirectory,Cyclomatic complexity of the method is 19
Complex Method,MediaPortal.GUI.Video,GUIVideoPlayList,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoPlaylist.cs,SetIMDBThumbs,Cyclomatic complexity of the method is 19
Complex Method,MediaPortal.GUI.Video,GUIVideoPlayList,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoPlaylist.cs,OnShufflePlayList,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnAction,Cyclomatic complexity of the method is 12
Complex Method,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnClick,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,Cyclomatic complexity of the method is 49
Complex Method,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnInfo,Cyclomatic complexity of the method is 11
Complex Method,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,LoadDirectory,Cyclomatic complexity of the method is 31
Complex Method,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,SetLabel,Cyclomatic complexity of the method is 20
Complex Method,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,DialogProtectedContent,Cyclomatic complexity of the method is 21
Complex Method,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,SetDefaultIcon,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnDeleteItem,Cyclomatic complexity of the method is 13
Complex Method,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnItemSelected,Cyclomatic complexity of the method is 20
Complex Method,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,SetMovieListGroupedBy,Cyclomatic complexity of the method is 13
Complex Method,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnSearchMovie,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnRenameTitle,Cyclomatic complexity of the method is 10
Complex Method,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnRemoveFromCollection,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnRemoveFromUserGroup,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnChangeSortTitle,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,SetRandomMovieId,Cyclomatic complexity of the method is 12
Complex Method,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,GetItemViewHistory,Cyclomatic complexity of the method is 18
Complex Method,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,GetViewPath,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Video,MatroskaTagHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\MatroskaTagLib.cs,Fetch,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Video,SelectDVDHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\SelectDVDHandler.cs,ShowSelectDriveDialog,Cyclomatic complexity of the method is 10
Complex Method,MediaPortal.GUI.Video,SelectDVDHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\SelectDVDHandler.cs,OnPlayDVD,Cyclomatic complexity of the method is 14
Complex Method,MediaPortal.GUI.Video,SelectDVDHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\SelectDVDHandler.cs,SetIMDBThumbs,Cyclomatic complexity of the method is 28
Complex Method,MediaPortal.GUI.Video,SelectDVDHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\SelectDVDHandler.cs,GetFolderVideoFile,Cyclomatic complexity of the method is 13
Complex Method,MediaPortal.GUI.Video,VideoFolderWatcherHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoFolderWatcherHelper.cs,ProcessEvents,Cyclomatic complexity of the method is 15
Complex Method,MediaPortal.GUI.Video,VideoSort,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoSort.cs,Compare,Cyclomatic complexity of the method is 65
Complex Method,MediaPortal.GUI.Video,VideoViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoViewHandler.cs,Execute,Cyclomatic complexity of the method is 16
Complex Method,MediaPortal.GUI.Video,VideoViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoViewHandler.cs,GetTable,Cyclomatic complexity of the method is 13
Complex Method,MediaPortal.GUI.Video,VideoViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoViewHandler.cs,GetFieldId,Cyclomatic complexity of the method is 13
Complex Method,MediaPortal.GUI.Video,VideoViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoViewHandler.cs,GetFieldName,Cyclomatic complexity of the method is 12
Complex Method,MediaPortal.GUI.Video,VideoViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoViewHandler.cs,GetFieldIdValue,Cyclomatic complexity of the method is 13
Complex Method,MediaPortal.GUI.Video,VideoViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoViewHandler.cs,SetLabel,Cyclomatic complexity of the method is 13
Complex Method,MediaPortal.GUI.Video,VideoViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoViewHandler.cs,GetLocalizedViewLevel,Cyclomatic complexity of the method is 12
Long Parameter List,MediaPortal.GUI.Video,VideoViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoViewHandler.cs,GetTable,The method has 7 parameters. Parameters: where' useMovieInfoTable' useAlbumTable' useActorsTable' useGenreTable' useUserGroupsTable' useMovieCollectionTable
Long Identifier,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The length of the parameter internalMovieImagesGrabberScriptFile is 36.
Long Identifier,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The length of the parameter internalMovieImagesGrabberScriptUrl is 35.
Long Identifier,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,,The length of the parameter _progressDialogForUpdateMediaInfo is 33.
Long Statement,MediaPortal.GUI.Video,FolderSetting,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\FolderSetting.cs,UpdateFolders,The length of the statement  "          FolderSettings.AddFolderSetting(strPathList[iRow] as string' "VideoFiles"' typeof(GUIVideoFiles.MapSettings)' mapSettings); " is 123.
Long Statement,MediaPortal.GUI.Video,FolderSetting,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\FolderSetting.cs,UpdateViews,The length of the statement  "            Log.Debug("UpdateViews: Old SortBy {0}/{2}' new SortBy {1}/{3}"' mapSettings.SortBy' CurrentSortMethod' mapSettings.SortBy' CurrentSortAsc); " is 140.
Long Statement,MediaPortal.GUI.Video,FolderSetting,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\FolderSetting.cs,UpdateViews,The length of the statement  "            FolderSettings.AddFolderSetting(strPathList[iRow] as string' "VideoViews"' typeof(GUIVideoFiles.MapSettings)' mapSettings); " is 123.
Long Statement,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,GetThumbImdb,The length of the statement  "        string thumb =  IMDB.InternalActorsScriptGrabber.InternalActorsGrabber.GetThumbImdb(ListItemMovieInfo(item).MovieImdbID); " is 121.
Long Statement,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,SetLabels,The length of the statement  "        MediaPortal.Database.FolderSettings.GetFolderSetting(_currentFolder' "VideoFiles"' typeof(GUIVideoFiles.MapSettings)' out o); " is 125.
Long Statement,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,SetLabels,The length of the statement  "        // MediaPortal.Database.FolderSettings.GetFolderSetting(_currentFolder' "VideoViews"' typeof(GUIVideoTitle.MapSettings)' out o); " is 128.
Long Statement,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,SetLabels,The length of the statement  "        MediaPortal.Database.FolderSettings.GetViewSetting(_currentFolder' "VideoViews"' typeof(GUIVideoTitle.MapSettings)' out o); " is 123.
Long Statement,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,SetLabels,The length of the statement  "          else if (CurrentSortMethod == VideoSort.SortMethod.Created || CurrentSortMethod == VideoSort.SortMethod.Date || CurrentSortMethod == VideoSort.SortMethod.Modified)" is 163.
Long Statement,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,PlayMovieFromPlayList,The length of the statement  "            if ((BDInternalMenu && g_Player.SetResumeBDTitleState >= g_Player.BdDefaultTitle) || (!BDInternalMenu && g_Player.SetResumeBDTitleState < g_Player.BdRemuxTitle)) " is 161.
Long Statement,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,PlayMovieFromPlayList,The length of the statement  "                  else if (g_Player.SetResumeBDTitleState == g_Player.BdDefaultTitle || g_Player.SetResumeBDTitleState == g_Player.BdRemuxTitle) " is 126.
Long Statement,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The length of the statement  "        string internalGrabberScriptUrl = @"http://install.team-mediaportal.com/MP1/InternalGrabber/InternalActorMoviesGrabber.csscript"; " is 129.
Long Statement,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The length of the statement  "        string internalMovieImagesGrabberScriptFile = Config.GetFile(Config.Dir.Config' "scripts\\InternalMovieImagesGrabber.csscript"); " is 128.
Long Statement,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The length of the statement  "        string internalMovieImagesGrabberScriptUrl = @"http://install.team-mediaportal.com/MP1/InternalGrabber/InternalMovieImagesGrabber.csscript"; " is 140.
Long Statement,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,LoadDirectory,The length of the statement  "      if (!string.IsNullOrEmpty(_currentFolder) && useCache && _cachedDir == _currentFolder && _cachedItems != null && _cachedItems.Count > 0) " is 136.
Long Statement,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,LoadDirectory,The length of the statement  "                if (((!item1.IsFolder || !item2.IsFolder) || (item1.IsFolder && IsMovieFolder(item1.Path) || item2.IsFolder && IsMovieFolder(item2.Path))) " is 138.
Long Statement,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,DoOnPlayBackStoppedOrChanged,The length of the statement  "        else if ((filename.Trim().ToLowerInvariant().Equals(strFilePath.Trim().ToLowerInvariant())) && (timeMovieStopped > 0) && g_Player.SetResumeBDTitleState != -2) " is 158.
Long Statement,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,DoOnPlayBackStoppedOrChanged,The length of the statement  "          Log.Info("GUIVideoFiles: {0} idFile={1} timeMovieStopped={2} resumeData={3} bdtitle={4}"' caller' idFile' timeMovieStopped' " is 123.
Long Statement,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,AddToPlayList,The length of the statement  "          string dvdFolder = file.Substring(0' file.ToUpperInvariant().IndexOf(@"\VIDEO_TS\VIDEO_TS.IFO"' StringComparison.InvariantCultureIgnoreCase)); " is 142.
Long Statement,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,AddToPlayList,The length of the statement  "          string bdFolder = file.Substring(0' file.ToUpperInvariant().IndexOf(@"\BDMV\INDEX.BDMV"' StringComparison.InvariantCultureIgnoreCase)); " is 135.
Long Statement,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,SetLabel,The length of the statement  "      else if (CurrentSortMethod == VideoSort.SortMethod.Created || CurrentSortMethod == VideoSort.SortMethod.Date || CurrentSortMethod == VideoSort.SortMethod.Modified) " is 163.
Long Statement,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,Refresh,The length of the statement  "        if (!string.IsNullOrEmpty(imageUrl) && imageUrl.Length > 10 && !imageUrl.StartsWith(@"file://") && !imageUrl.StartsWith(@"http://") && !imageUrl.StartsWith(@"https://")) " is 169.
Long Statement,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,Refresh,The length of the statement  "        if (!string.IsNullOrEmpty(imageUrl) && imageUrl.Length > 10 && (imageUrl.StartsWith(@"file://") || imageUrl.StartsWith(@"http://") || imageUrl.StartsWith(@"https://"))) " is 168.
Long Statement,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,SetActorGUIListItems,The length of the statement  "          string largeThumb = Util.Utils.GetLargeCoverArtName(Thumbs.MovieActors' item.ItemId.ToString()); // Actor thumb filename " is 120.
Long Statement,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnCoverRefresh,The length of the statement  "         (_currentMovie.ThumbURL.Length > 10 && !_currentMovie.ThumbURL.StartsWith(@"http://") && !_currentMovie.ThumbURL.StartsWith(@"https://"))) " is 138.
Long Statement,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,RefreshImdbData,The length of the statement  "        DateTime.TryParseExact(_currentMovie.LastUpdate' "yyyy-MM-dd HH:mm:ss"' CultureInfo.CurrentCulture' DateTimeStyles.None' out lastUpdate); " is 137.
Long Statement,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,GetPage,The length of the statement  "        //Log.Error("Error retreiving WebPage: {0} Encoding:{1} err:{2} stack:{3}"' strURL' strEncode' ex.Message' ex.StackTrace); " is 122.
Long Statement,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,CheckForNfoFile,The length of the statement  "          path = videoFile.Substring(0' videoFile.ToUpperInvariant().IndexOf(@"\VIDEO_TS\VIDEO_TS.IFO"' StringComparison.InvariantCultureIgnoreCase)); " is 140.
Long Statement,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,CheckForNfoFile,The length of the statement  "          path = videoFile.Substring(0' videoFile.ToUpperInvariant().IndexOf(@"\BDMV\INDEX.BDMV"' StringComparison.InvariantCultureIgnoreCase)); " is 134.
Long Statement,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,SetLabel,The length of the statement  "        if (CurrentSortMethod == VideoSort.SortMethod.Created || CurrentSortMethod == VideoSort.SortMethod.Date || CurrentSortMethod == VideoSort.SortMethod.Modified)" is 158.
Long Statement,MediaPortal.GUI.Video,SelectDVDHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\SelectDVDHandler.cs,OnPlayDVD,The length of the statement  "            //Log.Info("GUIVideoFiles: OnPlayBackStopped for DVD - idFile={0} timeMovieStopped={1} resumeData={2}"' idFile' timeMovieStopped' resumeData);" is 142.
Long Statement,MediaPortal.GUI.Video,SelectDVDHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\SelectDVDHandler.cs,SetIMDBThumbs,The length of the statement  "            // If this is enabled you'll see the thumb of the first movie in that dir - but if you put serveral movies into that dir you'll be irritated...          " is 143.
Long Statement,MediaPortal.GUI.Video,VideoSort,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoSort.cs,TryGetFileInfo,The length of the statement  "          DateTime.TryParseExact(item.Label2' "yyyy-MM-dd HH:mm:ss"' CultureInfo.CurrentCulture' DateTimeStyles.None' out dateAddedWatched); " is 130.
Long Statement,MediaPortal.GUI.Video,VideoViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoViewHandler.cs,Execute,The length of the statement  "        VideoDatabase.GetMoviesByFilter(sql' out movies' useActorsTable' useMovieInfoTable' useGenreTable' useUserGroupsTable' useMovieCollectionTable); " is 144.
Long Statement,MediaPortal.GUI.Video,VideoViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoViewHandler.cs,BuildSelect,The length of the statement  "      if (cleanValue == "#" && (filter.Where == "actorindex" || filter.Where == "directorindex" || filter.Where == "titleindex")) " is 123.
Complex Conditional,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,LoadSettings,The conditional expression  "(handler != null) && (handler.View != null) && (handler.View.Filters != null) &&             (handler.View.Filters.Count > 0)"  is complex.
Complex Conditional,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,SetLabels,The conditional expression  "movie != null && movie.ID > 0 && !isShareView &&              (!item.IsFolder || CurrentSortMethod == VideoSort.SortMethod.NameAll)"  is complex.
Complex Conditional,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnInfo,The conditional expression  "pItem == null || pItem.IsRemote ||            !_virtualDirectory.RequestPin(pItem.Path) ||            pItem.IsFolder && (!pItem.IsBdDvdFolder || pItem.Label == "..")"  is complex.
Complex Conditional,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The conditional expression  "item.IsRemote || (item.IsFolder) && (item.Label == "..") && _virtualDirectory.IsShareOfflineDetected()"  is complex.
Complex Conditional,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,PlayMovieFromPlayList,The conditional expression  "(BDInternalMenu && g_Player.SetResumeBDTitleState >= g_Player.BdDefaultTitle) || (!BDInternalMenu && g_Player.SetResumeBDTitleState < g_Player.BdRemuxTitle)"  is complex.
Complex Conditional,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,LoadDirectory,The conditional expression  "!string.IsNullOrEmpty(_currentFolder) && useCache && _cachedDir == _currentFolder && _cachedItems != null && _cachedItems.Count > 0"  is complex.
Complex Conditional,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,LoadDirectory,The conditional expression  "item.IsFolder || !item.IsFolder && !_hideWatchedFiles && item.IsPlayed || !item.IsFolder && !item.IsPlayed"  is complex.
Complex Conditional,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,LoadDirectory,The conditional expression  "((!item1.IsFolder || !item2.IsFolder) || (item1.IsFolder && IsMovieFolder(item1.Path) || item2.IsFolder && IsMovieFolder(item2.Path)))                      && (!item1.IsRemote && !item2.IsRemote)                      && Util.Utils.ShouldStack(item1.Path' item2.Path)"  is complex.
Complex Conditional,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,LoadDirectory,The conditional expression  "item.IsFolder || !item.IsFolder && !_hideWatchedFiles && item.IsPlayed || !item.IsFolder && !item.IsPlayed"  is complex.
Complex Conditional,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,LoadDirectory,The conditional expression  "item.IsFolder || !item.IsFolder && !_hideWatchedFiles && item.IsPlayed || !item.IsFolder && !item.IsPlayed"  is complex.
Complex Conditional,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnClicked,The conditional expression  "(listActors != null && listActors.IsVisible) ||              (listActors != null && listActors.Count == 0 && tbCastTextArea.IsVisible)"  is complex.
Complex Conditional,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnClicked,The conditional expression  "actor == null ||                (actor.Count == 0 || actor.IMDBActorID == string.Empty || actor.IMDBActorID == Strings.Unknown)"  is complex.
Complex Conditional,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,Update,The conditional expression  "(listActors == null && tbCastTextArea != null) || (listActors != null && listActors.Count == 0)"  is complex.
Complex Conditional,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,Refresh,The conditional expression  "!string.IsNullOrEmpty(imageUrl) && imageUrl.Length > 10 && !imageUrl.StartsWith(@"file://") && !imageUrl.StartsWith(@"http://") && !imageUrl.StartsWith(@"https://")"  is complex.
Complex Conditional,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,Refresh,The conditional expression  "!string.IsNullOrEmpty(imageUrl) && imageUrl.Length > 10 && (imageUrl.StartsWith(@"file://") || imageUrl.StartsWith(@"http://") || imageUrl.StartsWith(@"https://"))"  is complex.
Complex Conditional,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnCoverRefresh,The conditional expression  "string.IsNullOrEmpty(_currentMovie.ThumbURL) || _currentMovie.ThumbURL.Length <= 10 ||            (_currentMovie.ThumbURL.Length > 10 && !_currentMovie.ThumbURL.StartsWith(@"http://") && !_currentMovie.ThumbURL.StartsWith(@"https://"))"  is complex.
Complex Conditional,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,LoadState,The conditional expression  "_viewModeState == "Cast" &&                GUIWindowManager.GetPreviousActiveWindow() != (int)Window.WINDOW_VIDEO_TITLE &&                GUIWindowManager.GetPreviousActiveWindow() != (int)Window.WINDOW_VIDEOS &&                _movieIdState == _currentMovie.ID"  is complex.
Complex Conditional,MediaPortal.GUI.Video,GUIVideoPlayList,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoPlaylist.cs,LoadDirectory,The conditional expression  "(m_nTempPlayListWindow == GetID && m_strTempPlayListDirectory.IndexOf(currentFolder) >= 0 &&                 g_Player.Playing                 && playlistPlayer.CurrentPlaylistType == PlayListType.PLAYLIST_VIDEO_TEMP)                ||                (GetID == (int)Window.WINDOW_VIDEO_PLAYLIST &&                 playlistPlayer.CurrentPlaylistType == PlayListType.PLAYLIST_VIDEO                 && g_Player.Playing)"  is complex.
Complex Conditional,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The conditional expression  "handler.CurrentLevelWhere == "title" ||           handler.CurrentLevelWhere == "recently added" ||           handler.CurrentLevelWhere == "recently watched" ||           handler.CurrentLevelWhere == "user groups" ||           handler.CurrentLevelWhere == "user groups only" ||           handler.CurrentLevelWhere == "movie collections" ||           handler.CurrentLevelWhere == "movie collections only""  is complex.
Complex Conditional,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The conditional expression  "(handler.CurrentLevelWhere == "title" ||            handler.CurrentLevelWhere == "recently added" ||            handler.CurrentLevelWhere == "recently watched") && facadeLayout.Count > 1 ||            handler.CurrentLevelWhere == "user groups" ||            handler.CurrentLevelWhere == "user groups only" ||            handler.CurrentLevelWhere == "movie collections" ||            handler.CurrentLevelWhere == "movie collections only""  is complex.
Complex Conditional,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,LoadDirectory,The conditional expression  "view != "user groups" && view != "user groups only" &&             view != "movie collections" && view != "movie collections only""  is complex.
Complex Conditional,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,SetLabel,The conditional expression  "movie != null && movie.ID > 0 && (!item.IsFolder || CurrentSortMethod == VideoSort.SortMethod.NameAll)"  is complex.
Complex Conditional,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,DialogProtectedContent,The conditional expression  "(handler.CurrentLevelWhere == "title" ||                 handler.CurrentLevelWhere == "recently added" ||                 handler.CurrentLevelWhere == "recently watched") && facadeLayout.Count > 1 ||                 handler.CurrentLevelWhere == "user groups" ||                 handler.CurrentLevelWhere == "user groups only" ||                 handler.CurrentLevelWhere == "movie collections" ||                 handler.CurrentLevelWhere == "movie collections only""  is complex.
Complex Conditional,MediaPortal.GUI.Video,VideoSort,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoSort.cs,Compare,The conditional expression  "movie1 != null && movie2 != null && movie1.ID > 0 && movie2.ID > 0"  is complex.
Complex Conditional,MediaPortal.GUI.Video,VideoSort,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoSort.cs,Compare,The conditional expression  "movie1 != null && movie2 != null && movie1.ID > 0 && movie2.ID > 0"  is complex.
Complex Conditional,MediaPortal.GUI.Video,VideoSort,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoSort.cs,Compare,The conditional expression  "movie1 != null && movie2 != null && movie1.ID > 0 && movie2.ID > 0"  is complex.
Complex Conditional,MediaPortal.GUI.Video,VideoSort,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoSort.cs,Compare,The conditional expression  "movie1 != null && movie2 != null && movie1.ID > 0 && movie2.ID > 0"  is complex.
Complex Conditional,MediaPortal.GUI.Video,VideoViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoViewHandler.cs,BuildSelect,The conditional expression  "cleanValue == "#" && (filter.Where == "actorindex" || filter.Where == "directorindex" || filter.Where == "titleindex")"  is complex.
Empty Catch Block,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,OnClicked,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,OnShowContextMenu,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,ThreadMainGetSingleMovieDetails,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,ThreadMainGetDetails,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,ExecuteSql,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,DownloadFile,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,WakeUpSrv,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,LoadDirectory,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,DownloadSubtitles,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnRequestMovieTitle,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,RenameTitle,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,RenameTitle,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnRequestMovieTitle,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnSelectMovie,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,ThreadFanartRefresh,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,ThreadSearchImages,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,RefreshImdbData,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,GetPage,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,GetPage,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,GetPage,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,GetPage,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,GetPage,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,LoadDirectory,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,SetItemThumb,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnRenameTitle,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnRenameTitle,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,RequestPin,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,MatroskaTagHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\MatroskaTagLib.cs,Fetch,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,MatroskaTagHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\MatroskaTagLib.cs,Persist,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,SelectDVDHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\SelectDVDHandler.cs,SetIMDBThumbs,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,SelectDVDHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\SelectDVDHandler.cs,SetIMDBThumbs,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,SelectDVDHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\SelectDVDHandler.cs,GetFolderVideoFile,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,SelectDVDHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\SelectDVDHandler.cs,GetFolderVideoFile,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,VideoViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoViewHandler.cs,VideoViewHandler,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Video,VideoViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoViewHandler.cs,Execute,The method has an empty catch block.
Magic Number,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,OnShowContextMenu,The following statement contains a magic number: dlg.SetHeading(498);
Magic Number,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1296);
Magic Number,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1290);
Magic Number,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(208);
Magic Number,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(368);
Magic Number,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 1296: // Refresh All actor movies            _forceRefreshAll = true;            OnRefreshMovie();            break;          case 1290: // Refresh selected movie            _forceRefreshAll = true;            OnRefreshSingleMovie();            break;          case 208: // Play            try             {              GUIVideoFiles.PlayMovie(Convert.ToInt32(item.DVDLabel)' true);            }            catch {}            break;          case 368: // IMDB            OnMovieInfo(item);            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 1296: // Refresh All actor movies            _forceRefreshAll = true;            OnRefreshMovie();            break;          case 1290: // Refresh selected movie            _forceRefreshAll = true;            OnRefreshSingleMovie();            break;          case 208: // Play            try             {              GUIVideoFiles.PlayMovie(Convert.ToInt32(item.DVDLabel)' true);            }            catch {}            break;          case 368: // IMDB            OnMovieInfo(item);            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 1296: // Refresh All actor movies            _forceRefreshAll = true;            OnRefreshMovie();            break;          case 1290: // Refresh selected movie            _forceRefreshAll = true;            OnRefreshSingleMovie();            break;          case 208: // Play            try             {              GUIVideoFiles.PlayMovie(Convert.ToInt32(item.DVDLabel)' true);            }            catch {}            break;          case 368: // IMDB            OnMovieInfo(item);            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 1296: // Refresh All actor movies            _forceRefreshAll = true;            OnRefreshMovie();            break;          case 1290: // Refresh selected movie            _forceRefreshAll = true;            OnRefreshSingleMovie();            break;          case 208: // Play            try             {              GUIVideoFiles.PlayMovie(Convert.ToInt32(item.DVDLabel)' true);            }            catch {}            break;          case 368: // IMDB            OnMovieInfo(item);            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,SetNewproperties,The following statement contains a magic number: i_ttFolder = i_ttFolder / 25000;
Magic Number,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,SetNewproperties,The following statement contains a magic number: item.Label = GUILocalizeStrings.Get(284);
Magic Number,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,OnItemSelected,The following statement contains a magic number: GUIPropertyManager.SetProperty("#Actor.MovieExtraDetails"' GUILocalizeStrings.Get(199) + " " +                                                                       ListItemMovieInfo(item).MovieCredits.Replace(" /"'                                                                                                                    "'") +                                                                       "  |  " +                                                                       GUILocalizeStrings.Get(174) + " " +                                                                       ListItemMovieInfo(item).MovieGenre.Replace(" /"'                                                                                                                  "'") +                                                                       "  |  " +                                                                       GUILocalizeStrings.Get(204) + " " +                                                                       ListItemMovieInfo(item).MovieMpaaRating + "  |  " +                                                                       GUILocalizeStrings.Get(344) + ": " +                                                                       ListItemMovieInfo(item).MovieCast.Replace(" /"' "'"));
Magic Number,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,OnItemSelected,The following statement contains a magic number: GUIPropertyManager.SetProperty("#Actor.MovieExtraDetails"' GUILocalizeStrings.Get(199) + " " +                                                                       ListItemMovieInfo(item).MovieCredits.Replace(" /"'                                                                                                                    "'") +                                                                       "  |  " +                                                                       GUILocalizeStrings.Get(174) + " " +                                                                       ListItemMovieInfo(item).MovieGenre.Replace(" /"'                                                                                                                  "'") +                                                                       "  |  " +                                                                       GUILocalizeStrings.Get(204) + " " +                                                                       ListItemMovieInfo(item).MovieMpaaRating + "  |  " +                                                                       GUILocalizeStrings.Get(344) + ": " +                                                                       ListItemMovieInfo(item).MovieCast.Replace(" /"' "'"));
Magic Number,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,OnItemSelected,The following statement contains a magic number: GUIPropertyManager.SetProperty("#Actor.MovieExtraDetails"' GUILocalizeStrings.Get(199) + " " +                                                                       ListItemMovieInfo(item).MovieCredits.Replace(" /"'                                                                                                                    "'") +                                                                       "  |  " +                                                                       GUILocalizeStrings.Get(174) + " " +                                                                       ListItemMovieInfo(item).MovieGenre.Replace(" /"'                                                                                                                  "'") +                                                                       "  |  " +                                                                       GUILocalizeStrings.Get(204) + " " +                                                                       ListItemMovieInfo(item).MovieMpaaRating + "  |  " +                                                                       GUILocalizeStrings.Get(344) + ": " +                                                                       ListItemMovieInfo(item).MovieCast.Replace(" /"' "'"));
Magic Number,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,OnItemSelected,The following statement contains a magic number: GUIPropertyManager.SetProperty("#Actor.MovieExtraDetails"' GUILocalizeStrings.Get(199) + " " +                                                                       ListItemMovieInfo(item).MovieCredits.Replace(" /"'                                                                                                                    "'") +                                                                       "  |  " +                                                                       GUILocalizeStrings.Get(174) + " " +                                                                       ListItemMovieInfo(item).MovieGenre.Replace(" /"'                                                                                                                  "'") +                                                                       "  |  " +                                                                       GUILocalizeStrings.Get(204) + " " +                                                                       ListItemMovieInfo(item).MovieMpaaRating + "  |  " +                                                                       GUILocalizeStrings.Get(344) + ": " +                                                                       ListItemMovieInfo(item).MovieCast.Replace(" /"' "'"));
Magic Number,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,OnRefreshSingleMovie,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(1020));
Magic Number,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,OnRefreshSingleMovie,The following statement contains a magic number: dlg.SetLine(1' GUILocalizeStrings.Get(1291));
Magic Number,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,OnRefreshSingleMovie,The following statement contains a magic number: dlg.SetLine(2' GUILocalizeStrings.Get(1292));
Magic Number,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,OnRefreshSingleMovie,The following statement contains a magic number: dlg.SetLine(2' GUILocalizeStrings.Get(1292));
Magic Number,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,OnRefreshMovie,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(1020));
Magic Number,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,OnRefreshMovie,The following statement contains a magic number: dlg.SetLine(1' GUILocalizeStrings.Get(1311));
Magic Number,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,ThreadMainGetSingleMovieDetails,The following statement contains a magic number: int percCount = (100 * countCurrent) / count;
Magic Number,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,ThreadMainGetDetails,The following statement contains a magic number: int percCount = (100 * countCurrent) / count;
Magic Number,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,GetDetails,The following statement contains a magic number: item.Label = GUILocalizeStrings.Get(198) + "...";
Magic Number,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,SetThumb,The following statement contains a magic number: ittFolder = ittFolder / 25000;
Magic Number,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,GetPlotImdb,The following statement contains a magic number: movie.Year = DateTime.Today.Year + 3;
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,OnClicked,The following statement contains a magic number: dlgOk.SetHeading(257);
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,OnClicked,The following statement contains a magic number: dlgOk.SetLine(1' GUILocalizeStrings.Get(703));
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,OnShowSavedPlaylists,The following statement contains a magic number: dlg.SetHeading(983);
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,UpdateButtonStates,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"'                                        String.Format("{0}/{1}"' GUILocalizeStrings.Get(100006)'                                                      handler.LocalizedCurrentView));
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,UpdateButtonStates,The following statement contains a magic number: switch (CurrentSortMethod)       {         case VideoSort.SortMethod.Name:           strLine = GUILocalizeStrings.Get(365);           break;         case VideoSort.SortMethod.NameAll:           strLine = GUILocalizeStrings.Get(1309);           break;         case VideoSort.SortMethod.Date:           strLine = GUILocalizeStrings.Get(104);           break;         case VideoSort.SortMethod.Size:           strLine = GUILocalizeStrings.Get(105);           break;         case VideoSort.SortMethod.Year:           strLine = GUILocalizeStrings.Get(366);           break;         case VideoSort.SortMethod.Rating:           strLine = GUILocalizeStrings.Get(367);           break;         case VideoSort.SortMethod.Label:           strLine = GUILocalizeStrings.Get(430);           break;         case VideoSort.SortMethod.Watched:           strLine = GUILocalizeStrings.Get(527);           break;         case VideoSort.SortMethod.Created:           strLine = GUILocalizeStrings.Get(1220);           break;         case VideoSort.SortMethod.Modified:           strLine = GUILocalizeStrings.Get(1221);            break;          case VideoSort.SortMethod.Name_With_Duration:            strLine = GUILocalizeStrings.Get(1999);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,UpdateButtonStates,The following statement contains a magic number: switch (CurrentSortMethod)       {         case VideoSort.SortMethod.Name:           strLine = GUILocalizeStrings.Get(365);           break;         case VideoSort.SortMethod.NameAll:           strLine = GUILocalizeStrings.Get(1309);           break;         case VideoSort.SortMethod.Date:           strLine = GUILocalizeStrings.Get(104);           break;         case VideoSort.SortMethod.Size:           strLine = GUILocalizeStrings.Get(105);           break;         case VideoSort.SortMethod.Year:           strLine = GUILocalizeStrings.Get(366);           break;         case VideoSort.SortMethod.Rating:           strLine = GUILocalizeStrings.Get(367);           break;         case VideoSort.SortMethod.Label:           strLine = GUILocalizeStrings.Get(430);           break;         case VideoSort.SortMethod.Watched:           strLine = GUILocalizeStrings.Get(527);           break;         case VideoSort.SortMethod.Created:           strLine = GUILocalizeStrings.Get(1220);           break;         case VideoSort.SortMethod.Modified:           strLine = GUILocalizeStrings.Get(1221);            break;          case VideoSort.SortMethod.Name_With_Duration:            strLine = GUILocalizeStrings.Get(1999);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,UpdateButtonStates,The following statement contains a magic number: switch (CurrentSortMethod)       {         case VideoSort.SortMethod.Name:           strLine = GUILocalizeStrings.Get(365);           break;         case VideoSort.SortMethod.NameAll:           strLine = GUILocalizeStrings.Get(1309);           break;         case VideoSort.SortMethod.Date:           strLine = GUILocalizeStrings.Get(104);           break;         case VideoSort.SortMethod.Size:           strLine = GUILocalizeStrings.Get(105);           break;         case VideoSort.SortMethod.Year:           strLine = GUILocalizeStrings.Get(366);           break;         case VideoSort.SortMethod.Rating:           strLine = GUILocalizeStrings.Get(367);           break;         case VideoSort.SortMethod.Label:           strLine = GUILocalizeStrings.Get(430);           break;         case VideoSort.SortMethod.Watched:           strLine = GUILocalizeStrings.Get(527);           break;         case VideoSort.SortMethod.Created:           strLine = GUILocalizeStrings.Get(1220);           break;         case VideoSort.SortMethod.Modified:           strLine = GUILocalizeStrings.Get(1221);            break;          case VideoSort.SortMethod.Name_With_Duration:            strLine = GUILocalizeStrings.Get(1999);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,UpdateButtonStates,The following statement contains a magic number: switch (CurrentSortMethod)       {         case VideoSort.SortMethod.Name:           strLine = GUILocalizeStrings.Get(365);           break;         case VideoSort.SortMethod.NameAll:           strLine = GUILocalizeStrings.Get(1309);           break;         case VideoSort.SortMethod.Date:           strLine = GUILocalizeStrings.Get(104);           break;         case VideoSort.SortMethod.Size:           strLine = GUILocalizeStrings.Get(105);           break;         case VideoSort.SortMethod.Year:           strLine = GUILocalizeStrings.Get(366);           break;         case VideoSort.SortMethod.Rating:           strLine = GUILocalizeStrings.Get(367);           break;         case VideoSort.SortMethod.Label:           strLine = GUILocalizeStrings.Get(430);           break;         case VideoSort.SortMethod.Watched:           strLine = GUILocalizeStrings.Get(527);           break;         case VideoSort.SortMethod.Created:           strLine = GUILocalizeStrings.Get(1220);           break;         case VideoSort.SortMethod.Modified:           strLine = GUILocalizeStrings.Get(1221);            break;          case VideoSort.SortMethod.Name_With_Duration:            strLine = GUILocalizeStrings.Get(1999);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,UpdateButtonStates,The following statement contains a magic number: switch (CurrentSortMethod)       {         case VideoSort.SortMethod.Name:           strLine = GUILocalizeStrings.Get(365);           break;         case VideoSort.SortMethod.NameAll:           strLine = GUILocalizeStrings.Get(1309);           break;         case VideoSort.SortMethod.Date:           strLine = GUILocalizeStrings.Get(104);           break;         case VideoSort.SortMethod.Size:           strLine = GUILocalizeStrings.Get(105);           break;         case VideoSort.SortMethod.Year:           strLine = GUILocalizeStrings.Get(366);           break;         case VideoSort.SortMethod.Rating:           strLine = GUILocalizeStrings.Get(367);           break;         case VideoSort.SortMethod.Label:           strLine = GUILocalizeStrings.Get(430);           break;         case VideoSort.SortMethod.Watched:           strLine = GUILocalizeStrings.Get(527);           break;         case VideoSort.SortMethod.Created:           strLine = GUILocalizeStrings.Get(1220);           break;         case VideoSort.SortMethod.Modified:           strLine = GUILocalizeStrings.Get(1221);            break;          case VideoSort.SortMethod.Name_With_Duration:            strLine = GUILocalizeStrings.Get(1999);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,UpdateButtonStates,The following statement contains a magic number: switch (CurrentSortMethod)       {         case VideoSort.SortMethod.Name:           strLine = GUILocalizeStrings.Get(365);           break;         case VideoSort.SortMethod.NameAll:           strLine = GUILocalizeStrings.Get(1309);           break;         case VideoSort.SortMethod.Date:           strLine = GUILocalizeStrings.Get(104);           break;         case VideoSort.SortMethod.Size:           strLine = GUILocalizeStrings.Get(105);           break;         case VideoSort.SortMethod.Year:           strLine = GUILocalizeStrings.Get(366);           break;         case VideoSort.SortMethod.Rating:           strLine = GUILocalizeStrings.Get(367);           break;         case VideoSort.SortMethod.Label:           strLine = GUILocalizeStrings.Get(430);           break;         case VideoSort.SortMethod.Watched:           strLine = GUILocalizeStrings.Get(527);           break;         case VideoSort.SortMethod.Created:           strLine = GUILocalizeStrings.Get(1220);           break;         case VideoSort.SortMethod.Modified:           strLine = GUILocalizeStrings.Get(1221);            break;          case VideoSort.SortMethod.Name_With_Duration:            strLine = GUILocalizeStrings.Get(1999);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,UpdateButtonStates,The following statement contains a magic number: switch (CurrentSortMethod)       {         case VideoSort.SortMethod.Name:           strLine = GUILocalizeStrings.Get(365);           break;         case VideoSort.SortMethod.NameAll:           strLine = GUILocalizeStrings.Get(1309);           break;         case VideoSort.SortMethod.Date:           strLine = GUILocalizeStrings.Get(104);           break;         case VideoSort.SortMethod.Size:           strLine = GUILocalizeStrings.Get(105);           break;         case VideoSort.SortMethod.Year:           strLine = GUILocalizeStrings.Get(366);           break;         case VideoSort.SortMethod.Rating:           strLine = GUILocalizeStrings.Get(367);           break;         case VideoSort.SortMethod.Label:           strLine = GUILocalizeStrings.Get(430);           break;         case VideoSort.SortMethod.Watched:           strLine = GUILocalizeStrings.Get(527);           break;         case VideoSort.SortMethod.Created:           strLine = GUILocalizeStrings.Get(1220);           break;         case VideoSort.SortMethod.Modified:           strLine = GUILocalizeStrings.Get(1221);            break;          case VideoSort.SortMethod.Name_With_Duration:            strLine = GUILocalizeStrings.Get(1999);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,UpdateButtonStates,The following statement contains a magic number: switch (CurrentSortMethod)       {         case VideoSort.SortMethod.Name:           strLine = GUILocalizeStrings.Get(365);           break;         case VideoSort.SortMethod.NameAll:           strLine = GUILocalizeStrings.Get(1309);           break;         case VideoSort.SortMethod.Date:           strLine = GUILocalizeStrings.Get(104);           break;         case VideoSort.SortMethod.Size:           strLine = GUILocalizeStrings.Get(105);           break;         case VideoSort.SortMethod.Year:           strLine = GUILocalizeStrings.Get(366);           break;         case VideoSort.SortMethod.Rating:           strLine = GUILocalizeStrings.Get(367);           break;         case VideoSort.SortMethod.Label:           strLine = GUILocalizeStrings.Get(430);           break;         case VideoSort.SortMethod.Watched:           strLine = GUILocalizeStrings.Get(527);           break;         case VideoSort.SortMethod.Created:           strLine = GUILocalizeStrings.Get(1220);           break;         case VideoSort.SortMethod.Modified:           strLine = GUILocalizeStrings.Get(1221);            break;          case VideoSort.SortMethod.Name_With_Duration:            strLine = GUILocalizeStrings.Get(1999);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,UpdateButtonStates,The following statement contains a magic number: switch (CurrentSortMethod)       {         case VideoSort.SortMethod.Name:           strLine = GUILocalizeStrings.Get(365);           break;         case VideoSort.SortMethod.NameAll:           strLine = GUILocalizeStrings.Get(1309);           break;         case VideoSort.SortMethod.Date:           strLine = GUILocalizeStrings.Get(104);           break;         case VideoSort.SortMethod.Size:           strLine = GUILocalizeStrings.Get(105);           break;         case VideoSort.SortMethod.Year:           strLine = GUILocalizeStrings.Get(366);           break;         case VideoSort.SortMethod.Rating:           strLine = GUILocalizeStrings.Get(367);           break;         case VideoSort.SortMethod.Label:           strLine = GUILocalizeStrings.Get(430);           break;         case VideoSort.SortMethod.Watched:           strLine = GUILocalizeStrings.Get(527);           break;         case VideoSort.SortMethod.Created:           strLine = GUILocalizeStrings.Get(1220);           break;         case VideoSort.SortMethod.Modified:           strLine = GUILocalizeStrings.Get(1221);            break;          case VideoSort.SortMethod.Name_With_Duration:            strLine = GUILocalizeStrings.Get(1999);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,UpdateButtonStates,The following statement contains a magic number: switch (CurrentSortMethod)       {         case VideoSort.SortMethod.Name:           strLine = GUILocalizeStrings.Get(365);           break;         case VideoSort.SortMethod.NameAll:           strLine = GUILocalizeStrings.Get(1309);           break;         case VideoSort.SortMethod.Date:           strLine = GUILocalizeStrings.Get(104);           break;         case VideoSort.SortMethod.Size:           strLine = GUILocalizeStrings.Get(105);           break;         case VideoSort.SortMethod.Year:           strLine = GUILocalizeStrings.Get(366);           break;         case VideoSort.SortMethod.Rating:           strLine = GUILocalizeStrings.Get(367);           break;         case VideoSort.SortMethod.Label:           strLine = GUILocalizeStrings.Get(430);           break;         case VideoSort.SortMethod.Watched:           strLine = GUILocalizeStrings.Get(527);           break;         case VideoSort.SortMethod.Created:           strLine = GUILocalizeStrings.Get(1220);           break;         case VideoSort.SortMethod.Modified:           strLine = GUILocalizeStrings.Get(1221);            break;          case VideoSort.SortMethod.Name_With_Duration:            strLine = GUILocalizeStrings.Get(1999);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,UpdateButtonStates,The following statement contains a magic number: switch (CurrentSortMethod)       {         case VideoSort.SortMethod.Name:           strLine = GUILocalizeStrings.Get(365);           break;         case VideoSort.SortMethod.NameAll:           strLine = GUILocalizeStrings.Get(1309);           break;         case VideoSort.SortMethod.Date:           strLine = GUILocalizeStrings.Get(104);           break;         case VideoSort.SortMethod.Size:           strLine = GUILocalizeStrings.Get(105);           break;         case VideoSort.SortMethod.Year:           strLine = GUILocalizeStrings.Get(366);           break;         case VideoSort.SortMethod.Rating:           strLine = GUILocalizeStrings.Get(367);           break;         case VideoSort.SortMethod.Label:           strLine = GUILocalizeStrings.Get(430);           break;         case VideoSort.SortMethod.Watched:           strLine = GUILocalizeStrings.Get(527);           break;         case VideoSort.SortMethod.Created:           strLine = GUILocalizeStrings.Get(1220);           break;         case VideoSort.SortMethod.Modified:           strLine = GUILocalizeStrings.Get(1221);            break;          case VideoSort.SortMethod.Name_With_Duration:            strLine = GUILocalizeStrings.Get(1999);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,UpdateButtonStates,The following statement contains a magic number: btnSortBy.Label = GUILocalizeStrings.Get(96) + strLine;
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,OnShowSort,The following statement contains a magic number: dlg.SetHeading(495);
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(365);
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(1309);
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(1999);
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(104);
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(105);
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(527);
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(366);
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(367);
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(430);
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(1221);
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(1220);
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 365:           CurrentSortMethod = VideoSort.SortMethod.Name;           break;         case 1309:           CurrentSortMethod = VideoSort.SortMethod.NameAll;           break;         case 104:           CurrentSortMethod = VideoSort.SortMethod.Date;           CurrentSortAsc = false;           break;         case 1221:           CurrentSortMethod = VideoSort.SortMethod.Modified;           CurrentSortAsc = false;           break;         case 1220:           CurrentSortMethod = VideoSort.SortMethod.Created;           CurrentSortAsc = false;           break;         case 105:           CurrentSortMethod = VideoSort.SortMethod.Size;           break;         case 366:           CurrentSortMethod = VideoSort.SortMethod.Year;           break;         case 367:           CurrentSortMethod = VideoSort.SortMethod.Rating;           break;         case 430:           CurrentSortMethod = VideoSort.SortMethod.Label;           break;         case 527:           CurrentSortMethod = VideoSort.SortMethod.Watched;           break;          case 1999:            CurrentSortMethod = VideoSort.SortMethod.Name_With_Duration;            break;         default:           CurrentSortMethod = VideoSort.SortMethod.Name;           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 365:           CurrentSortMethod = VideoSort.SortMethod.Name;           break;         case 1309:           CurrentSortMethod = VideoSort.SortMethod.NameAll;           break;         case 104:           CurrentSortMethod = VideoSort.SortMethod.Date;           CurrentSortAsc = false;           break;         case 1221:           CurrentSortMethod = VideoSort.SortMethod.Modified;           CurrentSortAsc = false;           break;         case 1220:           CurrentSortMethod = VideoSort.SortMethod.Created;           CurrentSortAsc = false;           break;         case 105:           CurrentSortMethod = VideoSort.SortMethod.Size;           break;         case 366:           CurrentSortMethod = VideoSort.SortMethod.Year;           break;         case 367:           CurrentSortMethod = VideoSort.SortMethod.Rating;           break;         case 430:           CurrentSortMethod = VideoSort.SortMethod.Label;           break;         case 527:           CurrentSortMethod = VideoSort.SortMethod.Watched;           break;          case 1999:            CurrentSortMethod = VideoSort.SortMethod.Name_With_Duration;            break;         default:           CurrentSortMethod = VideoSort.SortMethod.Name;           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 365:           CurrentSortMethod = VideoSort.SortMethod.Name;           break;         case 1309:           CurrentSortMethod = VideoSort.SortMethod.NameAll;           break;         case 104:           CurrentSortMethod = VideoSort.SortMethod.Date;           CurrentSortAsc = false;           break;         case 1221:           CurrentSortMethod = VideoSort.SortMethod.Modified;           CurrentSortAsc = false;           break;         case 1220:           CurrentSortMethod = VideoSort.SortMethod.Created;           CurrentSortAsc = false;           break;         case 105:           CurrentSortMethod = VideoSort.SortMethod.Size;           break;         case 366:           CurrentSortMethod = VideoSort.SortMethod.Year;           break;         case 367:           CurrentSortMethod = VideoSort.SortMethod.Rating;           break;         case 430:           CurrentSortMethod = VideoSort.SortMethod.Label;           break;         case 527:           CurrentSortMethod = VideoSort.SortMethod.Watched;           break;          case 1999:            CurrentSortMethod = VideoSort.SortMethod.Name_With_Duration;            break;         default:           CurrentSortMethod = VideoSort.SortMethod.Name;           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 365:           CurrentSortMethod = VideoSort.SortMethod.Name;           break;         case 1309:           CurrentSortMethod = VideoSort.SortMethod.NameAll;           break;         case 104:           CurrentSortMethod = VideoSort.SortMethod.Date;           CurrentSortAsc = false;           break;         case 1221:           CurrentSortMethod = VideoSort.SortMethod.Modified;           CurrentSortAsc = false;           break;         case 1220:           CurrentSortMethod = VideoSort.SortMethod.Created;           CurrentSortAsc = false;           break;         case 105:           CurrentSortMethod = VideoSort.SortMethod.Size;           break;         case 366:           CurrentSortMethod = VideoSort.SortMethod.Year;           break;         case 367:           CurrentSortMethod = VideoSort.SortMethod.Rating;           break;         case 430:           CurrentSortMethod = VideoSort.SortMethod.Label;           break;         case 527:           CurrentSortMethod = VideoSort.SortMethod.Watched;           break;          case 1999:            CurrentSortMethod = VideoSort.SortMethod.Name_With_Duration;            break;         default:           CurrentSortMethod = VideoSort.SortMethod.Name;           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 365:           CurrentSortMethod = VideoSort.SortMethod.Name;           break;         case 1309:           CurrentSortMethod = VideoSort.SortMethod.NameAll;           break;         case 104:           CurrentSortMethod = VideoSort.SortMethod.Date;           CurrentSortAsc = false;           break;         case 1221:           CurrentSortMethod = VideoSort.SortMethod.Modified;           CurrentSortAsc = false;           break;         case 1220:           CurrentSortMethod = VideoSort.SortMethod.Created;           CurrentSortAsc = false;           break;         case 105:           CurrentSortMethod = VideoSort.SortMethod.Size;           break;         case 366:           CurrentSortMethod = VideoSort.SortMethod.Year;           break;         case 367:           CurrentSortMethod = VideoSort.SortMethod.Rating;           break;         case 430:           CurrentSortMethod = VideoSort.SortMethod.Label;           break;         case 527:           CurrentSortMethod = VideoSort.SortMethod.Watched;           break;          case 1999:            CurrentSortMethod = VideoSort.SortMethod.Name_With_Duration;            break;         default:           CurrentSortMethod = VideoSort.SortMethod.Name;           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 365:           CurrentSortMethod = VideoSort.SortMethod.Name;           break;         case 1309:           CurrentSortMethod = VideoSort.SortMethod.NameAll;           break;         case 104:           CurrentSortMethod = VideoSort.SortMethod.Date;           CurrentSortAsc = false;           break;         case 1221:           CurrentSortMethod = VideoSort.SortMethod.Modified;           CurrentSortAsc = false;           break;         case 1220:           CurrentSortMethod = VideoSort.SortMethod.Created;           CurrentSortAsc = false;           break;         case 105:           CurrentSortMethod = VideoSort.SortMethod.Size;           break;         case 366:           CurrentSortMethod = VideoSort.SortMethod.Year;           break;         case 367:           CurrentSortMethod = VideoSort.SortMethod.Rating;           break;         case 430:           CurrentSortMethod = VideoSort.SortMethod.Label;           break;         case 527:           CurrentSortMethod = VideoSort.SortMethod.Watched;           break;          case 1999:            CurrentSortMethod = VideoSort.SortMethod.Name_With_Duration;            break;         default:           CurrentSortMethod = VideoSort.SortMethod.Name;           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 365:           CurrentSortMethod = VideoSort.SortMethod.Name;           break;         case 1309:           CurrentSortMethod = VideoSort.SortMethod.NameAll;           break;         case 104:           CurrentSortMethod = VideoSort.SortMethod.Date;           CurrentSortAsc = false;           break;         case 1221:           CurrentSortMethod = VideoSort.SortMethod.Modified;           CurrentSortAsc = false;           break;         case 1220:           CurrentSortMethod = VideoSort.SortMethod.Created;           CurrentSortAsc = false;           break;         case 105:           CurrentSortMethod = VideoSort.SortMethod.Size;           break;         case 366:           CurrentSortMethod = VideoSort.SortMethod.Year;           break;         case 367:           CurrentSortMethod = VideoSort.SortMethod.Rating;           break;         case 430:           CurrentSortMethod = VideoSort.SortMethod.Label;           break;         case 527:           CurrentSortMethod = VideoSort.SortMethod.Watched;           break;          case 1999:            CurrentSortMethod = VideoSort.SortMethod.Name_With_Duration;            break;         default:           CurrentSortMethod = VideoSort.SortMethod.Name;           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 365:           CurrentSortMethod = VideoSort.SortMethod.Name;           break;         case 1309:           CurrentSortMethod = VideoSort.SortMethod.NameAll;           break;         case 104:           CurrentSortMethod = VideoSort.SortMethod.Date;           CurrentSortAsc = false;           break;         case 1221:           CurrentSortMethod = VideoSort.SortMethod.Modified;           CurrentSortAsc = false;           break;         case 1220:           CurrentSortMethod = VideoSort.SortMethod.Created;           CurrentSortAsc = false;           break;         case 105:           CurrentSortMethod = VideoSort.SortMethod.Size;           break;         case 366:           CurrentSortMethod = VideoSort.SortMethod.Year;           break;         case 367:           CurrentSortMethod = VideoSort.SortMethod.Rating;           break;         case 430:           CurrentSortMethod = VideoSort.SortMethod.Label;           break;         case 527:           CurrentSortMethod = VideoSort.SortMethod.Watched;           break;          case 1999:            CurrentSortMethod = VideoSort.SortMethod.Name_With_Duration;            break;         default:           CurrentSortMethod = VideoSort.SortMethod.Name;           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 365:           CurrentSortMethod = VideoSort.SortMethod.Name;           break;         case 1309:           CurrentSortMethod = VideoSort.SortMethod.NameAll;           break;         case 104:           CurrentSortMethod = VideoSort.SortMethod.Date;           CurrentSortAsc = false;           break;         case 1221:           CurrentSortMethod = VideoSort.SortMethod.Modified;           CurrentSortAsc = false;           break;         case 1220:           CurrentSortMethod = VideoSort.SortMethod.Created;           CurrentSortAsc = false;           break;         case 105:           CurrentSortMethod = VideoSort.SortMethod.Size;           break;         case 366:           CurrentSortMethod = VideoSort.SortMethod.Year;           break;         case 367:           CurrentSortMethod = VideoSort.SortMethod.Rating;           break;         case 430:           CurrentSortMethod = VideoSort.SortMethod.Label;           break;         case 527:           CurrentSortMethod = VideoSort.SortMethod.Watched;           break;          case 1999:            CurrentSortMethod = VideoSort.SortMethod.Name_With_Duration;            break;         default:           CurrentSortMethod = VideoSort.SortMethod.Name;           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 365:           CurrentSortMethod = VideoSort.SortMethod.Name;           break;         case 1309:           CurrentSortMethod = VideoSort.SortMethod.NameAll;           break;         case 104:           CurrentSortMethod = VideoSort.SortMethod.Date;           CurrentSortAsc = false;           break;         case 1221:           CurrentSortMethod = VideoSort.SortMethod.Modified;           CurrentSortAsc = false;           break;         case 1220:           CurrentSortMethod = VideoSort.SortMethod.Created;           CurrentSortAsc = false;           break;         case 105:           CurrentSortMethod = VideoSort.SortMethod.Size;           break;         case 366:           CurrentSortMethod = VideoSort.SortMethod.Year;           break;         case 367:           CurrentSortMethod = VideoSort.SortMethod.Rating;           break;         case 430:           CurrentSortMethod = VideoSort.SortMethod.Label;           break;         case 527:           CurrentSortMethod = VideoSort.SortMethod.Watched;           break;          case 1999:            CurrentSortMethod = VideoSort.SortMethod.Name_With_Duration;            break;         default:           CurrentSortMethod = VideoSort.SortMethod.Name;           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 365:           CurrentSortMethod = VideoSort.SortMethod.Name;           break;         case 1309:           CurrentSortMethod = VideoSort.SortMethod.NameAll;           break;         case 104:           CurrentSortMethod = VideoSort.SortMethod.Date;           CurrentSortAsc = false;           break;         case 1221:           CurrentSortMethod = VideoSort.SortMethod.Modified;           CurrentSortAsc = false;           break;         case 1220:           CurrentSortMethod = VideoSort.SortMethod.Created;           CurrentSortAsc = false;           break;         case 105:           CurrentSortMethod = VideoSort.SortMethod.Size;           break;         case 366:           CurrentSortMethod = VideoSort.SortMethod.Year;           break;         case 367:           CurrentSortMethod = VideoSort.SortMethod.Rating;           break;         case 430:           CurrentSortMethod = VideoSort.SortMethod.Label;           break;         case 527:           CurrentSortMethod = VideoSort.SortMethod.Watched;           break;          case 1999:            CurrentSortMethod = VideoSort.SortMethod.Name_With_Duration;            break;         default:           CurrentSortMethod = VideoSort.SortMethod.Name;           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,TellUserSomethingWentWrong,The following statement contains a magic number: dlgOK.SetHeading(6);
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,TellUserSomethingWentWrong,The following statement contains a magic number: dlgOK.SetLine(1' 477);
Magic Number,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,TellUserSomethingWentWrong,The following statement contains a magic number: dlgOK.SetLine(2' string.Empty);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnSearchNew,The following statement contains a magic number: dlgOk.SetLine(1' GUILocalizeStrings.Get(416));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnSearchNew,The following statement contains a magic number: int maximumShares = 128;
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,LoadSettings,The following statement contains a magic number: _howToPlayAll = xmlreader.GetValueAsInt("movies"' "playallinfolder"' 3);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,LoadSettings,The following statement contains a magic number: _watchedPercentage = xmlreader.GetValueAsInt("movies"' "playedpercentagewatched"' 95);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,LoadSettings,The following statement contains a magic number: _wolTimeout = xmlreader.GetValueAsInt("WOL"' "WolTimeout"' 10);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnAction,The following statement contains a magic number: item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnPageLoad,The following statement contains a magic number: pDlgOK.SetHeading(315);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnPageLoad,The following statement contains a magic number: pDlgOK.SetLine(2' GUILocalizeStrings.Get(190010' new object[] { GUILocalizeStrings.Get(3) }));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnPageLoad,The following statement contains a magic number: pDlgOK.SetLine(2' GUILocalizeStrings.Get(190010' new object[] { GUILocalizeStrings.Get(3) }));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnPageLoad,The following statement contains a magic number: pDlgOK.SetLine(2' GUILocalizeStrings.Get(190010' new object[] { GUILocalizeStrings.Get(3) }));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnPageLoad,The following statement contains a magic number: pDlgOK.SetHeading(315);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnPageLoad,The following statement contains a magic number: pDlgOK.SetLine(2' GUILocalizeStrings.Get(190010' new object[] { GUILocalizeStrings.Get(190011) }));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnPageLoad,The following statement contains a magic number: pDlgOK.SetLine(2' GUILocalizeStrings.Get(190010' new object[] { GUILocalizeStrings.Get(190011) }));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnPageLoad,The following statement contains a magic number: pDlgOK.SetLine(2' GUILocalizeStrings.Get(190010' new object[] { GUILocalizeStrings.Get(190011) }));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_CD_REMOVED:            if (g_Player.Playing && g_Player.IsDVD &&                message.Label.Equals(g_Player.CurrentFile.Substring(0' 2)' StringComparison.InvariantCultureIgnoreCase))            // test if it is our drive            {              Log.Info("GUIVideoFiles: Stop dvd since DVD is ejected");              g_Player.Stop();            }              if (GUIWindowManager.ActiveWindow == GetID)            {              if (Util.Utils.IsDVD(_currentFolder))              {                _currentFolder = string.Empty;                LoadDirectory(_currentFolder);              }            }            break;            case GUIMessage.MessageType.GUI_MSG_FILE_DOWNLOADING:            facadeLayout.OnMessage(message);            break;            case GUIMessage.MessageType.GUI_MSG_FILE_DOWNLOADED:              facadeLayout.OnMessage(message);            break;            case GUIMessage.MessageType.GUI_MSG_VIDEOFILE_CREATED:            AddItem(message.Label' -1);            break;            case GUIMessage.MessageType.GUI_MSG_VIDEOFILE_DELETED:            DeleteItem(message.Label);            SelectCurrentItem();            break;            case GUIMessage.MessageType.GUI_MSG_VIDEOFILE_RENAMED:            ReplaceItem(message.Label2' message.Label);            SelectCurrentItem();            break;            case GUIMessage.MessageType.GUI_MSG_VIDEODIRECTORY_CREATED:            AddItem(message.Label' -1);            break;            case GUIMessage.MessageType.GUI_MSG_VIDEODIRECTORY_DELETED:            DeleteItem(message.Label);            SelectCurrentItem();            break;            case GUIMessage.MessageType.GUI_MSG_VIDEODIRECTORY_RENAMED:            ReplaceItem(message.Label2' message.Label);            SelectCurrentItem();            break;            case GUIMessage.MessageType.GUI_MSG_SHOW_DIRECTORY:            // Make sure file view is the current window            if (VideoState.StartWindow != GetID)            {              VideoState.StartWindow = GetID;              Reset();              GUIWindowManager.ReplaceWindow(GetID);            }            _currentFolder = message.Label;            LoadDirectory(_currentFolder);            break;            case GUIMessage.MessageType.GUI_MSG_ADD_REMOVABLE_DRIVE:            if (_switchRemovableDrives)            {              _currentFolder = message.Label;              if (!Util.Utils.IsRemovable(message.Label))              {                _virtualDirectory.AddRemovableDrive(message.Label' message.Label2);              }            }            if (_removableDrivesHandlerThread != null)            {              _removableDrivesHandlerThread.Join();            }              RemovableDrivesHandler.ListRemovableDrives(_virtualDirectory.GetDirectoryExt(string.Empty));            LoadDirectory(_currentFolder);            break;            case GUIMessage.MessageType.GUI_MSG_REMOVE_REMOVABLE_DRIVE:            if (!Util.Utils.IsRemovable(message.Label))            {              _virtualDirectory.Remove(message.Label);            }            if (_currentFolder.Contains(message.Label))            {              _currentFolder = string.Empty;            }            LoadDirectory(_currentFolder);            break;            case GUIMessage.MessageType.GUI_MSG_VOLUME_INSERTED:          case GUIMessage.MessageType.GUI_MSG_VOLUME_REMOVED:            if (_currentFolder == string.Empty || _currentFolder.Substring(0' 2) == message.Label)            {              _currentFolder = string.Empty;              LoadDirectory(_currentFolder);            }            break;            case GUIMessage.MessageType.GUI_MSG_PLAY_DVD:            OnPlayDVD(message.Label' GetID);            break;            case GUIMessage.MessageType.GUI_MSG_LAYOUT_CHANGED:            FolderSetting folderSetting = new FolderSetting();            folderSetting.UpdateFolders(-1' CurrentSortAsc' (int)CurrentLayout);            break;            case GUIMessage.MessageType.GUI_MSG_REFRESH_MEDIAINFO:            SelectCurrentItem();            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_CD_REMOVED:            if (g_Player.Playing && g_Player.IsDVD &&                message.Label.Equals(g_Player.CurrentFile.Substring(0' 2)' StringComparison.InvariantCultureIgnoreCase))            // test if it is our drive            {              Log.Info("GUIVideoFiles: Stop dvd since DVD is ejected");              g_Player.Stop();            }              if (GUIWindowManager.ActiveWindow == GetID)            {              if (Util.Utils.IsDVD(_currentFolder))              {                _currentFolder = string.Empty;                LoadDirectory(_currentFolder);              }            }            break;            case GUIMessage.MessageType.GUI_MSG_FILE_DOWNLOADING:            facadeLayout.OnMessage(message);            break;            case GUIMessage.MessageType.GUI_MSG_FILE_DOWNLOADED:              facadeLayout.OnMessage(message);            break;            case GUIMessage.MessageType.GUI_MSG_VIDEOFILE_CREATED:            AddItem(message.Label' -1);            break;            case GUIMessage.MessageType.GUI_MSG_VIDEOFILE_DELETED:            DeleteItem(message.Label);            SelectCurrentItem();            break;            case GUIMessage.MessageType.GUI_MSG_VIDEOFILE_RENAMED:            ReplaceItem(message.Label2' message.Label);            SelectCurrentItem();            break;            case GUIMessage.MessageType.GUI_MSG_VIDEODIRECTORY_CREATED:            AddItem(message.Label' -1);            break;            case GUIMessage.MessageType.GUI_MSG_VIDEODIRECTORY_DELETED:            DeleteItem(message.Label);            SelectCurrentItem();            break;            case GUIMessage.MessageType.GUI_MSG_VIDEODIRECTORY_RENAMED:            ReplaceItem(message.Label2' message.Label);            SelectCurrentItem();            break;            case GUIMessage.MessageType.GUI_MSG_SHOW_DIRECTORY:            // Make sure file view is the current window            if (VideoState.StartWindow != GetID)            {              VideoState.StartWindow = GetID;              Reset();              GUIWindowManager.ReplaceWindow(GetID);            }            _currentFolder = message.Label;            LoadDirectory(_currentFolder);            break;            case GUIMessage.MessageType.GUI_MSG_ADD_REMOVABLE_DRIVE:            if (_switchRemovableDrives)            {              _currentFolder = message.Label;              if (!Util.Utils.IsRemovable(message.Label))              {                _virtualDirectory.AddRemovableDrive(message.Label' message.Label2);              }            }            if (_removableDrivesHandlerThread != null)            {              _removableDrivesHandlerThread.Join();            }              RemovableDrivesHandler.ListRemovableDrives(_virtualDirectory.GetDirectoryExt(string.Empty));            LoadDirectory(_currentFolder);            break;            case GUIMessage.MessageType.GUI_MSG_REMOVE_REMOVABLE_DRIVE:            if (!Util.Utils.IsRemovable(message.Label))            {              _virtualDirectory.Remove(message.Label);            }            if (_currentFolder.Contains(message.Label))            {              _currentFolder = string.Empty;            }            LoadDirectory(_currentFolder);            break;            case GUIMessage.MessageType.GUI_MSG_VOLUME_INSERTED:          case GUIMessage.MessageType.GUI_MSG_VOLUME_REMOVED:            if (_currentFolder == string.Empty || _currentFolder.Substring(0' 2) == message.Label)            {              _currentFolder = string.Empty;              LoadDirectory(_currentFolder);            }            break;            case GUIMessage.MessageType.GUI_MSG_PLAY_DVD:            OnPlayDVD(message.Label' GetID);            break;            case GUIMessage.MessageType.GUI_MSG_LAYOUT_CHANGED:            FolderSetting folderSetting = new FolderSetting();            folderSetting.UpdateFolders(-1' CurrentSortAsc' (int)CurrentLayout);            break;            case GUIMessage.MessageType.GUI_MSG_REFRESH_MEDIAINFO:            SelectCurrentItem();            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: dlg.SetHeading(498);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(868);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1262);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1307);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1263);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1984);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(2498);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1995);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(2161);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,Process,The following statement contains a magic number: (_resetSMSsearch == true) && (_resetSMSsearchDelay.Subtract(DateTime.Now).Seconds < -2)
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,CheckMovie,The following statement contains a magic number: dlg.SetHeading(428);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,CheckMovie,The following statement contains a magic number: dlg.SetLine(1' 429);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,CheckMovie,The following statement contains a magic number: dlg.SetLine(2' movieDetails.DVDLabel);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,CheckMovie,The following statement contains a magic number: dlg.SetLine(3' movieDetails.Title);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,CheckMovie,The following statement contains a magic number: dlg.SetYesLabel(GUILocalizeStrings.Get(186));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,CheckMovie,The following statement contains a magic number: dlg.SetNoLabel(GUILocalizeStrings.Get(222));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,MountImageFile,The following statement contains a magic number: dlgYesNo.SetHeading(713);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,MountImageFile,The following statement contains a magic number: dlgYesNo.SetLine(1' 531);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,PlayMovie,The following statement contains a magic number: strDir == null || strDir.Length > 254
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The following statement contains a magic number: dlgOk.SetHeading(257);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The following statement contains a magic number: dlgOk.SetLine(1' GUILocalizeStrings.Get(703));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetHeading(GUILocalizeStrings.Get(300030));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetLine(1' GUILocalizeStrings.Get(300031));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetLine(2' GUILocalizeStrings.Get(300032));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetLine(2' GUILocalizeStrings.Get(300032));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetPercentage(25);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetHeading(GUILocalizeStrings.Get(1316));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetLine(1' GUILocalizeStrings.Get(1317));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetLine(2' GUILocalizeStrings.Get(300032));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetLine(2' GUILocalizeStrings.Get(300032));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetPercentage(50);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetHeading(GUILocalizeStrings.Get(1316));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetLine(1' GUILocalizeStrings.Get(1317));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetLine(2' GUILocalizeStrings.Get(300032));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetLine(2' GUILocalizeStrings.Get(300032));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetPercentage(75);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetHeading(GUILocalizeStrings.Get(1316));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetLine(1' GUILocalizeStrings.Get(1317));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetLine(2' GUILocalizeStrings.Get(300032));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetLine(2' GUILocalizeStrings.Get(300032));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetPercentage(100);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The following statement contains a magic number: dlgOk.SetHeading(257);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The following statement contains a magic number: dlgOk.SetLine(1' GUILocalizeStrings.Get(1261));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetLine(1' GUILocalizeStrings.Get(300034) + id);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetLine(2' GUILocalizeStrings.Get(300035));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetLine(2' GUILocalizeStrings.Get(300035));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateGrabberScripts,The following statement contains a magic number: percent += 100 / (sectionNodes.Count - 1);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,SetDefaultGrabber,The following statement contains a magic number: dlg.SetHeading(1263);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,SetDefaultGrabber,The following statement contains a magic number: dlgOk.SetHeading(257);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,SetDefaultGrabber,The following statement contains a magic number: dlgOk.SetLine(1' GUILocalizeStrings.Get(1261));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,SetDefaultGrabber,The following statement contains a magic number: xmlwriter.SetValue("moviedatabase"' "limit" + 0' 25);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,WakeUpSrv,The following statement contains a magic number: serverName == _prevServerName && _wolResendTime*60 > ts.TotalSeconds
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,GetMediaInfoThread,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateMediaInfoInFolder,The following statement contains a magic number: _progressDialogForUpdateMediaInfo =         (GUIDialogProgress)GUIWindowManager.GetWindow(101);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateMediaInfoInFolder,The following statement contains a magic number: _progressDialogForUpdateMediaInfo.SetHeading(GUILocalizeStrings.Get(2160));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateMediaInfoInFolder,The following statement contains a magic number: _progressDialogForUpdateMediaInfo.SetLine(2' string.Empty);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,UpdateMediaInfoInFolder,The following statement contains a magic number: _progressDialogForUpdateMediaInfo.SetLine(3' "Movie count: " + itemlist.Count + "/0");
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,RefreshMediaInfoThread,The following statement contains a magic number: int perc = (i * 100) / itemlist.Count;
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,RefreshMediaInfoThread,The following statement contains a magic number: _progressDialogForUpdateMediaInfo.SetLine(3' "Movie count: " + itemlist.Count + "/" + i);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,RefreshMediaInfoThread,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,RefreshMediaInfoThread,The following statement contains a magic number: Thread.Sleep(5000);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,DoOnPlayBackStoppedOrChanged,The following statement contains a magic number: playTimePercentage = (100 * (duration + timeMovieStopped) / TotalMovieDuration);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,DoOnPlayBackStoppedOrChanged,The following statement contains a magic number: VideoDatabase.SetMovieWatchedStatus(idMovie' true' 100);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,DoOnPlayBackStoppedOrChanged,The following statement contains a magic number: dlgYesNo.SetHeading(GUILocalizeStrings.Get(1318));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,DoOnPlayBackStoppedOrChanged,The following statement contains a magic number: dlgYesNo.SetLine(1' GUILocalizeStrings.Get(1319));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnPlayBackEnded,The following statement contains a magic number: playTimePercentage = (int)(100 * (duration + g_Player.Player.CurrentPosition) / TotalMovieDuration);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnPlayAll,The following statement contains a magic number: dlg.SetHeading(498);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnPlayAll,The following statement contains a magic number: dlg.AddLocalizedString(103);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnPlayAll,The following statement contains a magic number: dlg.AddLocalizedString(104);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnPlayAll,The following statement contains a magic number: dlg.AddLocalizedString(191);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnPlayAll,The following statement contains a magic number: _howToPlayAll == 3
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnPlayAll,The following statement contains a magic number: switch (selectedOption)        {          //          // ****** Watch out for fallthrough of empty cases if reordering CASE *******          //          case 0: // By name == 103          case 103:            AddToPlayList(tmpPlayList' playFiles.ToArray());            List<PlayListItem> sortedPlayListItems = new List<PlayListItem>();            sortedPlayListItems.AddRange(tmpPlayList);            sortedPlayListItems.Sort((item1' item2) => StringLogicalComparer.Compare(item1.Description' item2.Description));            tmpPlayList.Clear();              foreach (PlayListItem playListItem in sortedPlayListItems)            {              tmpPlayList.Add(playListItem);            }              break;            case 1: // By date (date modified) == 104          case 104:            IOrderedEnumerable<object> sortedPlayList = playFiles.ToArray().OrderBy(fn => new FileInfo((string)fn).LastWriteTime);            AddToPlayList(tmpPlayList' sortedPlayList);            break;            case 2: // Shuffle == 191          case 191:            AddToPlayList(tmpPlayList' playFiles.ToArray());            tmpPlayList.Shuffle();            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnPlayAll,The following statement contains a magic number: switch (selectedOption)        {          //          // ****** Watch out for fallthrough of empty cases if reordering CASE *******          //          case 0: // By name == 103          case 103:            AddToPlayList(tmpPlayList' playFiles.ToArray());            List<PlayListItem> sortedPlayListItems = new List<PlayListItem>();            sortedPlayListItems.AddRange(tmpPlayList);            sortedPlayListItems.Sort((item1' item2) => StringLogicalComparer.Compare(item1.Description' item2.Description));            tmpPlayList.Clear();              foreach (PlayListItem playListItem in sortedPlayListItems)            {              tmpPlayList.Add(playListItem);            }              break;            case 1: // By date (date modified) == 104          case 104:            IOrderedEnumerable<object> sortedPlayList = playFiles.ToArray().OrderBy(fn => new FileInfo((string)fn).LastWriteTime);            AddToPlayList(tmpPlayList' sortedPlayList);            break;            case 2: // Shuffle == 191          case 191:            AddToPlayList(tmpPlayList' playFiles.ToArray());            tmpPlayList.Shuffle();            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnPlayAll,The following statement contains a magic number: switch (selectedOption)        {          //          // ****** Watch out for fallthrough of empty cases if reordering CASE *******          //          case 0: // By name == 103          case 103:            AddToPlayList(tmpPlayList' playFiles.ToArray());            List<PlayListItem> sortedPlayListItems = new List<PlayListItem>();            sortedPlayListItems.AddRange(tmpPlayList);            sortedPlayListItems.Sort((item1' item2) => StringLogicalComparer.Compare(item1.Description' item2.Description));            tmpPlayList.Clear();              foreach (PlayListItem playListItem in sortedPlayListItems)            {              tmpPlayList.Add(playListItem);            }              break;            case 1: // By date (date modified) == 104          case 104:            IOrderedEnumerable<object> sortedPlayList = playFiles.ToArray().OrderBy(fn => new FileInfo((string)fn).LastWriteTime);            AddToPlayList(tmpPlayList' sortedPlayList);            break;            case 2: // Shuffle == 191          case 191:            AddToPlayList(tmpPlayList' playFiles.ToArray());            tmpPlayList.Shuffle();            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnPlayAll,The following statement contains a magic number: switch (selectedOption)        {          //          // ****** Watch out for fallthrough of empty cases if reordering CASE *******          //          case 0: // By name == 103          case 103:            AddToPlayList(tmpPlayList' playFiles.ToArray());            List<PlayListItem> sortedPlayListItems = new List<PlayListItem>();            sortedPlayListItems.AddRange(tmpPlayList);            sortedPlayListItems.Sort((item1' item2) => StringLogicalComparer.Compare(item1.Description' item2.Description));            tmpPlayList.Clear();              foreach (PlayListItem playListItem in sortedPlayListItems)            {              tmpPlayList.Add(playListItem);            }              break;            case 1: // By date (date modified) == 104          case 104:            IOrderedEnumerable<object> sortedPlayList = playFiles.ToArray().OrderBy(fn => new FileInfo((string)fn).LastWriteTime);            AddToPlayList(tmpPlayList' sortedPlayList);            break;            case 2: // Shuffle == 191          case 191:            AddToPlayList(tmpPlayList' playFiles.ToArray());            tmpPlayList.Shuffle();            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,GUIWindowManager_OnNewMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_AUTOPLAY_VOLUME:            if (message.Param1 == (int)Ripper.AutoPlay.MediaType.VIDEO)            {              if (message.Param2 == (int)Ripper.AutoPlay.MediaSubType.DVD)                OnPlayDVD(message.Label' GetID);                if (message.Param2 == (int)Ripper.AutoPlay.MediaSubType.BLURAY)              {                OnPlayBD(message.Label' GetID);              }                else if (message.Param2 == (int)Ripper.AutoPlay.MediaSubType.VCD ||                       message.Param2 == (int)Ripper.AutoPlay.MediaSubType.FILES)                OnPlayFiles((System.Collections.ArrayList)message.Object);            }            break;            case GUIMessage.MessageType.GUI_MSG_VOLUME_REMOVED:            if (g_Player.Playing && g_Player.IsVideo &&                message.Label.Equals(g_Player.CurrentFile.Substring(0' 2)' StringComparison.InvariantCultureIgnoreCase))            {              if (!File.Exists(g_Player.CurrentFile))              {                Log.Info("GUIVideoFiles: Stop since media is ejected");                g_Player.Stop();                _playlistPlayer.GetPlaylist(PlayListType.PLAYLIST_VIDEO_TEMP).Clear();                _playlistPlayer.GetPlaylist(PlayListType.PLAYLIST_VIDEO).Clear();              }              else              {                return;              }            }              if (GUIWindowManager.ActiveWindow == GetID)            {              if (Util.Utils.IsDVD(_currentFolder))              {                _currentFolder = string.Empty;                LoadDirectory(_currentFolder);              }            }            break;            case GUIMessage.MessageType.GUI_MSG_ONRESUME:            using (Settings xmlreader = new MPSettings())            {              if (!xmlreader.GetValueAsBool("general"' "showlastactivemodule"' false))              {                _currentFolder = string.Empty;              }            }              Log.Debug("{0}:{1}"' SerializeName' message.Message);            break;        }
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,CreateFolderThumb,The following statement contains a magic number: pictureList.Count >= 4
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnProgress,The following statement contains a magic number: pDlgProgress.SetLine(2' line2);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnSearchStarting,The following statement contains a magic number: heading = String.Format("{0}:{1}/{2}"' GUILocalizeStrings.Get(197)' _scanningFileNumber' _scanningFileTotal);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnSearchStarting,The following statement contains a magic number: pDlgProgress.SetLine(2' string.Empty);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnMovieNotFound,The following statement contains a magic number: pDlgOk.SetHeading(195);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnMovieNotFound,The following statement contains a magic number: pDlgOk.SetLine(2' string.Empty);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnDetailsStarting,The following statement contains a magic number: heading = String.Format("{0}:{1}/{2}"' GUILocalizeStrings.Get(198)' _scanningFileNumber' _scanningFileTotal);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnDetailsStarting,The following statement contains a magic number: pDlgProgress.SetLine(2' string.Empty);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnActorsStarting,The following statement contains a magic number: heading = String.Format("{0}:{1}/{2}"' GUILocalizeStrings.Get(986)' _scanningFileNumber' _scanningFileTotal);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnActorsStarting,The following statement contains a magic number: pDlgProgress.SetLine(2' string.Empty);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnActorInfoStarting,The following statement contains a magic number: heading = String.Format("{0}:{1}/{2}"' GUILocalizeStrings.Get(986)' _scanningFileNumber' _scanningFileTotal);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnActorInfoStarting,The following statement contains a magic number: pDlgProgress.SetLine(2' string.Empty);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnDetailsNotFound,The following statement contains a magic number: pDlgOk.SetHeading(195);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnDetailsNotFound,The following statement contains a magic number: pDlgOk.SetLine(2' string.Empty);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnSelectMovie,The following statement contains a magic number: string strHeading = GUILocalizeStrings.Get(196);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnSelectMovie,The following statement contains a magic number: pDlgSelect.SetButtonLabel(413);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnSelectActor,The following statement contains a magic number: pDlgSelect.SetHeading(GUILocalizeStrings.Get(1310));
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnScanEnd,The following statement contains a magic number: pDlgSelect.SetHeading(892);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnScanEnd,The following statement contains a magic number: pDlgSelect.SetButtonLabel(4517);
Magic Number,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,GetHome,The following statement contains a magic number: strButtonText = GUILocalizeStrings.Get(3);
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnPageLoad,The following statement contains a magic number: i < 1000
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnPageLoad,The following statement contains a magic number: iDVD < 0 && iDVD >= 1000
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnClicked,The following statement contains a magic number: dlgOk.SetHeading(257);
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnClicked,The following statement contains a magic number: dlgOk.SetLine(1' GUILocalizeStrings.Get(703));
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnShowContextMenu,The following statement contains a magic number: dlg.SetHeading(498);
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1297);
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1262);
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1307);
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1263);
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1298);
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1335);
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1304);
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 1297: // Refresh actor info            IMDBActor actor = VideoDatabase.GetActorInfo(listActors.SelectedListItem.ItemId);            OnVideoArtistInfo(actor' true);            break;          case 1298: // Refresh fanart            OnFanartRefresh();            break;          case 1335: // Refresh cover            OnCoverRefresh();            break;          case 1263: // Set deault grabber script            GUIVideoFiles.SetDefaultGrabber();            break;          case 1262: // Update grabber scripts            GUIVideoFiles.UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            GUIVideoFiles.UpdateGrabberScripts(true);            break;          case 1304: // Create nfo file            OnCreateNfoFile();            break;          }
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 1297: // Refresh actor info            IMDBActor actor = VideoDatabase.GetActorInfo(listActors.SelectedListItem.ItemId);            OnVideoArtistInfo(actor' true);            break;          case 1298: // Refresh fanart            OnFanartRefresh();            break;          case 1335: // Refresh cover            OnCoverRefresh();            break;          case 1263: // Set deault grabber script            GUIVideoFiles.SetDefaultGrabber();            break;          case 1262: // Update grabber scripts            GUIVideoFiles.UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            GUIVideoFiles.UpdateGrabberScripts(true);            break;          case 1304: // Create nfo file            OnCreateNfoFile();            break;          }
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 1297: // Refresh actor info            IMDBActor actor = VideoDatabase.GetActorInfo(listActors.SelectedListItem.ItemId);            OnVideoArtistInfo(actor' true);            break;          case 1298: // Refresh fanart            OnFanartRefresh();            break;          case 1335: // Refresh cover            OnCoverRefresh();            break;          case 1263: // Set deault grabber script            GUIVideoFiles.SetDefaultGrabber();            break;          case 1262: // Update grabber scripts            GUIVideoFiles.UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            GUIVideoFiles.UpdateGrabberScripts(true);            break;          case 1304: // Create nfo file            OnCreateNfoFile();            break;          }
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 1297: // Refresh actor info            IMDBActor actor = VideoDatabase.GetActorInfo(listActors.SelectedListItem.ItemId);            OnVideoArtistInfo(actor' true);            break;          case 1298: // Refresh fanart            OnFanartRefresh();            break;          case 1335: // Refresh cover            OnCoverRefresh();            break;          case 1263: // Set deault grabber script            GUIVideoFiles.SetDefaultGrabber();            break;          case 1262: // Update grabber scripts            GUIVideoFiles.UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            GUIVideoFiles.UpdateGrabberScripts(true);            break;          case 1304: // Create nfo file            OnCreateNfoFile();            break;          }
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 1297: // Refresh actor info            IMDBActor actor = VideoDatabase.GetActorInfo(listActors.SelectedListItem.ItemId);            OnVideoArtistInfo(actor' true);            break;          case 1298: // Refresh fanart            OnFanartRefresh();            break;          case 1335: // Refresh cover            OnCoverRefresh();            break;          case 1263: // Set deault grabber script            GUIVideoFiles.SetDefaultGrabber();            break;          case 1262: // Update grabber scripts            GUIVideoFiles.UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            GUIVideoFiles.UpdateGrabberScripts(true);            break;          case 1304: // Create nfo file            OnCreateNfoFile();            break;          }
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 1297: // Refresh actor info            IMDBActor actor = VideoDatabase.GetActorInfo(listActors.SelectedListItem.ItemId);            OnVideoArtistInfo(actor' true);            break;          case 1298: // Refresh fanart            OnFanartRefresh();            break;          case 1335: // Refresh cover            OnCoverRefresh();            break;          case 1263: // Set deault grabber script            GUIVideoFiles.SetDefaultGrabber();            break;          case 1262: // Update grabber scripts            GUIVideoFiles.UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            GUIVideoFiles.UpdateGrabberScripts(true);            break;          case 1304: // Create nfo file            OnCreateNfoFile();            break;          }
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 1297: // Refresh actor info            IMDBActor actor = VideoDatabase.GetActorInfo(listActors.SelectedListItem.ItemId);            OnVideoArtistInfo(actor' true);            break;          case 1298: // Refresh fanart            OnFanartRefresh();            break;          case 1335: // Refresh cover            OnCoverRefresh();            break;          case 1263: // Set deault grabber script            GUIVideoFiles.SetDefaultGrabber();            break;          case 1262: // Update grabber scripts            GUIVideoFiles.UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            GUIVideoFiles.UpdateGrabberScripts(true);            break;          case 1304: // Create nfo file            OnCreateNfoFile();            break;          }
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,Refresh,The following statement contains a magic number: !string.IsNullOrEmpty(imageUrl) && imageUrl.Length > 10 && !imageUrl.StartsWith(@"file://") && !imageUrl.StartsWith(@"http://") && !imageUrl.StartsWith(@"https://")
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,Refresh,The following statement contains a magic number: File.Copy(imageUrl.Substring(7)' temporaryFilename);
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,Refresh,The following statement contains a magic number: imageUrl.Length > 7 && imageUrl.Substring(0' 7).Equals("file://")
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,Refresh,The following statement contains a magic number: imageUrl.Length > 7 && imageUrl.Substring(0' 7).Equals("file://")
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,Refresh,The following statement contains a magic number: !string.IsNullOrEmpty(imageUrl) && imageUrl.Length > 10 && (imageUrl.StartsWith(@"file://") || imageUrl.StartsWith(@"http://") || imageUrl.StartsWith(@"https://"))
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,SetActorGUIListItems,The following statement contains a magic number: item.Label = temp[1] + " - " + temp[3];
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,SetActorGUIListItems,The following statement contains a magic number: item.Label3 = temp[2];
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnProgress,The following statement contains a magic number: pDlgProgress.SetLine(2' line2);
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnSearchStarting,The following statement contains a magic number: pDlgProgress.SetHeading(197);
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnSearchStarting,The following statement contains a magic number: pDlgProgress.SetLine(2' string.Empty);
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnMovieNotFound,The following statement contains a magic number: pDlgOk.SetHeading(195);
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnMovieNotFound,The following statement contains a magic number: pDlgOk.SetLine(2' string.Empty);
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnDetailsStarting,The following statement contains a magic number: pDlgProgress.SetHeading(198);
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnDetailsStarting,The following statement contains a magic number: pDlgProgress.SetLine(2' string.Empty);
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnActorsStarting,The following statement contains a magic number: pDlgProgress.SetHeading(1301);
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnActorsStarting,The following statement contains a magic number: pDlgProgress.SetLine(2' string.Empty);
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnActorInfoStarting,The following statement contains a magic number: pDlgProgress.SetHeading(1302);
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnActorInfoStarting,The following statement contains a magic number: pDlgProgress.SetLine(2' string.Empty);
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnDetailsNotFound,The following statement contains a magic number: pDlgOk.SetHeading(195);
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnDetailsNotFound,The following statement contains a magic number: pDlgOk.SetLine(2' string.Empty);
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnSelectMovie,The following statement contains a magic number: string strHeading = GUILocalizeStrings.Get(196);
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnSelectMovie,The following statement contains a magic number: pDlgSelect.SetButtonLabel(413);
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnSelectActor,The following statement contains a magic number: pDlgSelect.SetHeading(GUILocalizeStrings.Get(1310));
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnCoverRefresh,The following statement contains a magic number: string.IsNullOrEmpty(_currentMovie.ThumbURL) || _currentMovie.ThumbURL.Length <= 10 ||            (_currentMovie.ThumbURL.Length > 10 && !_currentMovie.ThumbURL.StartsWith(@"http://") && !_currentMovie.ThumbURL.StartsWith(@"https://"))
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnCoverRefresh,The following statement contains a magic number: string.IsNullOrEmpty(_currentMovie.ThumbURL) || _currentMovie.ThumbURL.Length <= 10 ||            (_currentMovie.ThumbURL.Length > 10 && !_currentMovie.ThumbURL.StartsWith(@"http://") && !_currentMovie.ThumbURL.StartsWith(@"https://"))
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnCreateNfoFile,The following statement contains a magic number: dlgNotify.SetHeading(GUILocalizeStrings.Get(1304));
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnCreateNfoFile,The following statement contains a magic number: dlgNotify.SetText(GUILocalizeStrings.Get(1305));
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,ThreadFanartRefresh,The following statement contains a magic number: dlgNotify.SetHeading(GUILocalizeStrings.Get(1298));
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,ThreadFanartRefresh,The following statement contains a magic number: dlgNotify.SetText(GUILocalizeStrings.Get(997));
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,ThreadSearchImages,The following statement contains a magic number: movie.Year > 1900
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,RefreshImdbData,The following statement contains a magic number: vdbParserStr == null || vdbParserStr.Length != 3
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,RefreshImdbData,The following statement contains a magic number: GUIPropertyManager.SetProperty("#runtime"' _currentMovie.RunTime +                                                         GUILocalizeStrings.Get(2998) +                                                         " (" + Util.Utils.SecondsToHMString(_currentMovie.RunTime*60) +                                                         ")");
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,RefreshImdbData,The following statement contains a magic number: GUIPropertyManager.SetProperty("#runtime"' _currentMovie.RunTime +                                                         GUILocalizeStrings.Get(2998) +                                                         " (" + Util.Utils.SecondsToHMString(_currentMovie.RunTime*60) +                                                         ")");
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,RefreshImdbData,The following statement contains a magic number: _currentMovie.Rating /= 10.0f;
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,RefreshImdbData,The following statement contains a magic number: _currentMovie.Rating > 10.0f
Magic Number,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,RefreshImdbData,The following statement contains a magic number: regexPattern = vdbParserStr[2];
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: dlg.SetHeading(498);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(368);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(926);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1240);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1268);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1262);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1307);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1263);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)         {           case 368: // IMDB             OnVideoArtistInfo(actor);             break;           case 926: //add to playlist             OnQueueItem(itemNo);             break;           case 1240: // Protected content           case 1241: // Protected content             OnContentLock();             break;           case 1295: // Search actor           case 1268: // Search director             OnSearchActor();             break;           case 1262: // Update grabber scripts             GUIVideoFiles.UpdateGrabberScripts(false);             break;           case 1307: // Update internal grabber scripts             GUIVideoFiles.UpdateGrabberScripts(true);             break;         }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)         {           case 368: // IMDB             OnVideoArtistInfo(actor);             break;           case 926: //add to playlist             OnQueueItem(itemNo);             break;           case 1240: // Protected content           case 1241: // Protected content             OnContentLock();             break;           case 1295: // Search actor           case 1268: // Search director             OnSearchActor();             break;           case 1262: // Update grabber scripts             GUIVideoFiles.UpdateGrabberScripts(false);             break;           case 1307: // Update internal grabber scripts             GUIVideoFiles.UpdateGrabberScripts(true);             break;         }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)         {           case 368: // IMDB             OnVideoArtistInfo(actor);             break;           case 926: //add to playlist             OnQueueItem(itemNo);             break;           case 1240: // Protected content           case 1241: // Protected content             OnContentLock();             break;           case 1295: // Search actor           case 1268: // Search director             OnSearchActor();             break;           case 1262: // Update grabber scripts             GUIVideoFiles.UpdateGrabberScripts(false);             break;           case 1307: // Update internal grabber scripts             GUIVideoFiles.UpdateGrabberScripts(true);             break;         }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)         {           case 368: // IMDB             OnVideoArtistInfo(actor);             break;           case 926: //add to playlist             OnQueueItem(itemNo);             break;           case 1240: // Protected content           case 1241: // Protected content             OnContentLock();             break;           case 1295: // Search actor           case 1268: // Search director             OnSearchActor();             break;           case 1262: // Update grabber scripts             GUIVideoFiles.UpdateGrabberScripts(false);             break;           case 1307: // Update internal grabber scripts             GUIVideoFiles.UpdateGrabberScripts(true);             break;         }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)         {           case 368: // IMDB             OnVideoArtistInfo(actor);             break;           case 926: //add to playlist             OnQueueItem(itemNo);             break;           case 1240: // Protected content           case 1241: // Protected content             OnContentLock();             break;           case 1295: // Search actor           case 1268: // Search director             OnSearchActor();             break;           case 1262: // Update grabber scripts             GUIVideoFiles.UpdateGrabberScripts(false);             break;           case 1307: // Update internal grabber scripts             GUIVideoFiles.UpdateGrabberScripts(true);             break;         }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)         {           case 368: // IMDB             OnVideoArtistInfo(actor);             break;           case 926: //add to playlist             OnQueueItem(itemNo);             break;           case 1240: // Protected content           case 1241: // Protected content             OnContentLock();             break;           case 1295: // Search actor           case 1268: // Search director             OnSearchActor();             break;           case 1262: // Update grabber scripts             GUIVideoFiles.UpdateGrabberScripts(false);             break;           case 1307: // Update internal grabber scripts             GUIVideoFiles.UpdateGrabberScripts(true);             break;         }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)         {           case 368: // IMDB             OnVideoArtistInfo(actor);             break;           case 926: //add to playlist             OnQueueItem(itemNo);             break;           case 1240: // Protected content           case 1241: // Protected content             OnContentLock();             break;           case 1295: // Search actor           case 1268: // Search director             OnSearchActor();             break;           case 1262: // Update grabber scripts             GUIVideoFiles.UpdateGrabberScripts(false);             break;           case 1307: // Update internal grabber scripts             GUIVideoFiles.UpdateGrabberScripts(true);             break;         }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)         {           case 368: // IMDB             OnVideoArtistInfo(actor);             break;           case 926: //add to playlist             OnQueueItem(itemNo);             break;           case 1240: // Protected content           case 1241: // Protected content             OnContentLock();             break;           case 1295: // Search actor           case 1268: // Search director             OnSearchActor();             break;           case 1262: // Update grabber scripts             GUIVideoFiles.UpdateGrabberScripts(false);             break;           case 1307: // Update internal grabber scripts             GUIVideoFiles.UpdateGrabberScripts(true);             break;         }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: dlg.SetHeading(498);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(208);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(368);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1304);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1306);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(926);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(830);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1337);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1333);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1334);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1272);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1270);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1271);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(118);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1308);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(925);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1293);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1240);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1262);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1307);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1263);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 118: // Rename title           OnRenameTitle(itemNo);           break;                  case 925: // Delete           OnDeleteItem(item);           break;                  case 368: // IMDB           OnInfo(itemNo);           break;                  case 208: // play           _playClicked = true; // Override movieinfo before play           OnClick(itemNo);           break;                  case 926: //add to playlist           OnQueueItem(itemNo);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;                  case 1293: //Search movie           OnSearchMovie();           break;                  case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;          case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;                  case 1263: // Set default grabber           GUIVideoFiles.SetDefaultGrabber();           break;                  case 1333: // Add Movie to Collection           OnAddToCollection(movie' itemNo);           break;          case 1334: // Remove from Collection           OnRemoveFromCollection(movie' itemNo);           break;          case 1337: // Add New Collection           OnAddCollection();           break;          case 1270: // Add to user group           OnAddToUserGroup(movie' itemNo);           break;                  case 1271: // Remove from user group           OnRemoveFromUserGroup(movie' itemNo);           break;                  case 1272: // Add user group           OnAddUserGroup();           break;                  case 1308: // Rename sort title           OnChangeSortTitle(movie' itemNo);           break;                  case 1304: // Make nfo file           OnCreateNfoFile(movie.ID);           break;                  case 1306: // Make nfo files           OnCreateNfoFiles();           break;                  case 830: // Reset watched status           movie.Watched = 0;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' false' 0);           VideoDatabase.SetMovieStopTime(movie.ID' 0);           VideoDatabase.SetMovieWatchedCount(movie.ID' 0);           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = false;           LoadDirectory(_currentFolder);           break;          case 1260: // Set watched status           movie.Watched = 1;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' true' 100);           int iPercent = 100;           int iTimesWatched = 0;           VideoDatabase.GetmovieWatchedStatus(movie.ID' out iPercent' out iTimesWatched);           if (iTimesWatched <= 0)           {             VideoDatabase.MovieWatchedCountIncrease(movie.ID);           }           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = true;           LoadDirectory(_currentFolder);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 118: // Rename title           OnRenameTitle(itemNo);           break;                  case 925: // Delete           OnDeleteItem(item);           break;                  case 368: // IMDB           OnInfo(itemNo);           break;                  case 208: // play           _playClicked = true; // Override movieinfo before play           OnClick(itemNo);           break;                  case 926: //add to playlist           OnQueueItem(itemNo);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;                  case 1293: //Search movie           OnSearchMovie();           break;                  case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;          case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;                  case 1263: // Set default grabber           GUIVideoFiles.SetDefaultGrabber();           break;                  case 1333: // Add Movie to Collection           OnAddToCollection(movie' itemNo);           break;          case 1334: // Remove from Collection           OnRemoveFromCollection(movie' itemNo);           break;          case 1337: // Add New Collection           OnAddCollection();           break;          case 1270: // Add to user group           OnAddToUserGroup(movie' itemNo);           break;                  case 1271: // Remove from user group           OnRemoveFromUserGroup(movie' itemNo);           break;                  case 1272: // Add user group           OnAddUserGroup();           break;                  case 1308: // Rename sort title           OnChangeSortTitle(movie' itemNo);           break;                  case 1304: // Make nfo file           OnCreateNfoFile(movie.ID);           break;                  case 1306: // Make nfo files           OnCreateNfoFiles();           break;                  case 830: // Reset watched status           movie.Watched = 0;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' false' 0);           VideoDatabase.SetMovieStopTime(movie.ID' 0);           VideoDatabase.SetMovieWatchedCount(movie.ID' 0);           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = false;           LoadDirectory(_currentFolder);           break;          case 1260: // Set watched status           movie.Watched = 1;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' true' 100);           int iPercent = 100;           int iTimesWatched = 0;           VideoDatabase.GetmovieWatchedStatus(movie.ID' out iPercent' out iTimesWatched);           if (iTimesWatched <= 0)           {             VideoDatabase.MovieWatchedCountIncrease(movie.ID);           }           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = true;           LoadDirectory(_currentFolder);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 118: // Rename title           OnRenameTitle(itemNo);           break;                  case 925: // Delete           OnDeleteItem(item);           break;                  case 368: // IMDB           OnInfo(itemNo);           break;                  case 208: // play           _playClicked = true; // Override movieinfo before play           OnClick(itemNo);           break;                  case 926: //add to playlist           OnQueueItem(itemNo);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;                  case 1293: //Search movie           OnSearchMovie();           break;                  case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;          case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;                  case 1263: // Set default grabber           GUIVideoFiles.SetDefaultGrabber();           break;                  case 1333: // Add Movie to Collection           OnAddToCollection(movie' itemNo);           break;          case 1334: // Remove from Collection           OnRemoveFromCollection(movie' itemNo);           break;          case 1337: // Add New Collection           OnAddCollection();           break;          case 1270: // Add to user group           OnAddToUserGroup(movie' itemNo);           break;                  case 1271: // Remove from user group           OnRemoveFromUserGroup(movie' itemNo);           break;                  case 1272: // Add user group           OnAddUserGroup();           break;                  case 1308: // Rename sort title           OnChangeSortTitle(movie' itemNo);           break;                  case 1304: // Make nfo file           OnCreateNfoFile(movie.ID);           break;                  case 1306: // Make nfo files           OnCreateNfoFiles();           break;                  case 830: // Reset watched status           movie.Watched = 0;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' false' 0);           VideoDatabase.SetMovieStopTime(movie.ID' 0);           VideoDatabase.SetMovieWatchedCount(movie.ID' 0);           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = false;           LoadDirectory(_currentFolder);           break;          case 1260: // Set watched status           movie.Watched = 1;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' true' 100);           int iPercent = 100;           int iTimesWatched = 0;           VideoDatabase.GetmovieWatchedStatus(movie.ID' out iPercent' out iTimesWatched);           if (iTimesWatched <= 0)           {             VideoDatabase.MovieWatchedCountIncrease(movie.ID);           }           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = true;           LoadDirectory(_currentFolder);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 118: // Rename title           OnRenameTitle(itemNo);           break;                  case 925: // Delete           OnDeleteItem(item);           break;                  case 368: // IMDB           OnInfo(itemNo);           break;                  case 208: // play           _playClicked = true; // Override movieinfo before play           OnClick(itemNo);           break;                  case 926: //add to playlist           OnQueueItem(itemNo);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;                  case 1293: //Search movie           OnSearchMovie();           break;                  case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;          case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;                  case 1263: // Set default grabber           GUIVideoFiles.SetDefaultGrabber();           break;                  case 1333: // Add Movie to Collection           OnAddToCollection(movie' itemNo);           break;          case 1334: // Remove from Collection           OnRemoveFromCollection(movie' itemNo);           break;          case 1337: // Add New Collection           OnAddCollection();           break;          case 1270: // Add to user group           OnAddToUserGroup(movie' itemNo);           break;                  case 1271: // Remove from user group           OnRemoveFromUserGroup(movie' itemNo);           break;                  case 1272: // Add user group           OnAddUserGroup();           break;                  case 1308: // Rename sort title           OnChangeSortTitle(movie' itemNo);           break;                  case 1304: // Make nfo file           OnCreateNfoFile(movie.ID);           break;                  case 1306: // Make nfo files           OnCreateNfoFiles();           break;                  case 830: // Reset watched status           movie.Watched = 0;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' false' 0);           VideoDatabase.SetMovieStopTime(movie.ID' 0);           VideoDatabase.SetMovieWatchedCount(movie.ID' 0);           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = false;           LoadDirectory(_currentFolder);           break;          case 1260: // Set watched status           movie.Watched = 1;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' true' 100);           int iPercent = 100;           int iTimesWatched = 0;           VideoDatabase.GetmovieWatchedStatus(movie.ID' out iPercent' out iTimesWatched);           if (iTimesWatched <= 0)           {             VideoDatabase.MovieWatchedCountIncrease(movie.ID);           }           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = true;           LoadDirectory(_currentFolder);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 118: // Rename title           OnRenameTitle(itemNo);           break;                  case 925: // Delete           OnDeleteItem(item);           break;                  case 368: // IMDB           OnInfo(itemNo);           break;                  case 208: // play           _playClicked = true; // Override movieinfo before play           OnClick(itemNo);           break;                  case 926: //add to playlist           OnQueueItem(itemNo);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;                  case 1293: //Search movie           OnSearchMovie();           break;                  case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;          case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;                  case 1263: // Set default grabber           GUIVideoFiles.SetDefaultGrabber();           break;                  case 1333: // Add Movie to Collection           OnAddToCollection(movie' itemNo);           break;          case 1334: // Remove from Collection           OnRemoveFromCollection(movie' itemNo);           break;          case 1337: // Add New Collection           OnAddCollection();           break;          case 1270: // Add to user group           OnAddToUserGroup(movie' itemNo);           break;                  case 1271: // Remove from user group           OnRemoveFromUserGroup(movie' itemNo);           break;                  case 1272: // Add user group           OnAddUserGroup();           break;                  case 1308: // Rename sort title           OnChangeSortTitle(movie' itemNo);           break;                  case 1304: // Make nfo file           OnCreateNfoFile(movie.ID);           break;                  case 1306: // Make nfo files           OnCreateNfoFiles();           break;                  case 830: // Reset watched status           movie.Watched = 0;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' false' 0);           VideoDatabase.SetMovieStopTime(movie.ID' 0);           VideoDatabase.SetMovieWatchedCount(movie.ID' 0);           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = false;           LoadDirectory(_currentFolder);           break;          case 1260: // Set watched status           movie.Watched = 1;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' true' 100);           int iPercent = 100;           int iTimesWatched = 0;           VideoDatabase.GetmovieWatchedStatus(movie.ID' out iPercent' out iTimesWatched);           if (iTimesWatched <= 0)           {             VideoDatabase.MovieWatchedCountIncrease(movie.ID);           }           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = true;           LoadDirectory(_currentFolder);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 118: // Rename title           OnRenameTitle(itemNo);           break;                  case 925: // Delete           OnDeleteItem(item);           break;                  case 368: // IMDB           OnInfo(itemNo);           break;                  case 208: // play           _playClicked = true; // Override movieinfo before play           OnClick(itemNo);           break;                  case 926: //add to playlist           OnQueueItem(itemNo);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;                  case 1293: //Search movie           OnSearchMovie();           break;                  case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;          case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;                  case 1263: // Set default grabber           GUIVideoFiles.SetDefaultGrabber();           break;                  case 1333: // Add Movie to Collection           OnAddToCollection(movie' itemNo);           break;          case 1334: // Remove from Collection           OnRemoveFromCollection(movie' itemNo);           break;          case 1337: // Add New Collection           OnAddCollection();           break;          case 1270: // Add to user group           OnAddToUserGroup(movie' itemNo);           break;                  case 1271: // Remove from user group           OnRemoveFromUserGroup(movie' itemNo);           break;                  case 1272: // Add user group           OnAddUserGroup();           break;                  case 1308: // Rename sort title           OnChangeSortTitle(movie' itemNo);           break;                  case 1304: // Make nfo file           OnCreateNfoFile(movie.ID);           break;                  case 1306: // Make nfo files           OnCreateNfoFiles();           break;                  case 830: // Reset watched status           movie.Watched = 0;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' false' 0);           VideoDatabase.SetMovieStopTime(movie.ID' 0);           VideoDatabase.SetMovieWatchedCount(movie.ID' 0);           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = false;           LoadDirectory(_currentFolder);           break;          case 1260: // Set watched status           movie.Watched = 1;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' true' 100);           int iPercent = 100;           int iTimesWatched = 0;           VideoDatabase.GetmovieWatchedStatus(movie.ID' out iPercent' out iTimesWatched);           if (iTimesWatched <= 0)           {             VideoDatabase.MovieWatchedCountIncrease(movie.ID);           }           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = true;           LoadDirectory(_currentFolder);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 118: // Rename title           OnRenameTitle(itemNo);           break;                  case 925: // Delete           OnDeleteItem(item);           break;                  case 368: // IMDB           OnInfo(itemNo);           break;                  case 208: // play           _playClicked = true; // Override movieinfo before play           OnClick(itemNo);           break;                  case 926: //add to playlist           OnQueueItem(itemNo);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;                  case 1293: //Search movie           OnSearchMovie();           break;                  case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;          case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;                  case 1263: // Set default grabber           GUIVideoFiles.SetDefaultGrabber();           break;                  case 1333: // Add Movie to Collection           OnAddToCollection(movie' itemNo);           break;          case 1334: // Remove from Collection           OnRemoveFromCollection(movie' itemNo);           break;          case 1337: // Add New Collection           OnAddCollection();           break;          case 1270: // Add to user group           OnAddToUserGroup(movie' itemNo);           break;                  case 1271: // Remove from user group           OnRemoveFromUserGroup(movie' itemNo);           break;                  case 1272: // Add user group           OnAddUserGroup();           break;                  case 1308: // Rename sort title           OnChangeSortTitle(movie' itemNo);           break;                  case 1304: // Make nfo file           OnCreateNfoFile(movie.ID);           break;                  case 1306: // Make nfo files           OnCreateNfoFiles();           break;                  case 830: // Reset watched status           movie.Watched = 0;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' false' 0);           VideoDatabase.SetMovieStopTime(movie.ID' 0);           VideoDatabase.SetMovieWatchedCount(movie.ID' 0);           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = false;           LoadDirectory(_currentFolder);           break;          case 1260: // Set watched status           movie.Watched = 1;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' true' 100);           int iPercent = 100;           int iTimesWatched = 0;           VideoDatabase.GetmovieWatchedStatus(movie.ID' out iPercent' out iTimesWatched);           if (iTimesWatched <= 0)           {             VideoDatabase.MovieWatchedCountIncrease(movie.ID);           }           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = true;           LoadDirectory(_currentFolder);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 118: // Rename title           OnRenameTitle(itemNo);           break;                  case 925: // Delete           OnDeleteItem(item);           break;                  case 368: // IMDB           OnInfo(itemNo);           break;                  case 208: // play           _playClicked = true; // Override movieinfo before play           OnClick(itemNo);           break;                  case 926: //add to playlist           OnQueueItem(itemNo);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;                  case 1293: //Search movie           OnSearchMovie();           break;                  case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;          case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;                  case 1263: // Set default grabber           GUIVideoFiles.SetDefaultGrabber();           break;                  case 1333: // Add Movie to Collection           OnAddToCollection(movie' itemNo);           break;          case 1334: // Remove from Collection           OnRemoveFromCollection(movie' itemNo);           break;          case 1337: // Add New Collection           OnAddCollection();           break;          case 1270: // Add to user group           OnAddToUserGroup(movie' itemNo);           break;                  case 1271: // Remove from user group           OnRemoveFromUserGroup(movie' itemNo);           break;                  case 1272: // Add user group           OnAddUserGroup();           break;                  case 1308: // Rename sort title           OnChangeSortTitle(movie' itemNo);           break;                  case 1304: // Make nfo file           OnCreateNfoFile(movie.ID);           break;                  case 1306: // Make nfo files           OnCreateNfoFiles();           break;                  case 830: // Reset watched status           movie.Watched = 0;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' false' 0);           VideoDatabase.SetMovieStopTime(movie.ID' 0);           VideoDatabase.SetMovieWatchedCount(movie.ID' 0);           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = false;           LoadDirectory(_currentFolder);           break;          case 1260: // Set watched status           movie.Watched = 1;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' true' 100);           int iPercent = 100;           int iTimesWatched = 0;           VideoDatabase.GetmovieWatchedStatus(movie.ID' out iPercent' out iTimesWatched);           if (iTimesWatched <= 0)           {             VideoDatabase.MovieWatchedCountIncrease(movie.ID);           }           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = true;           LoadDirectory(_currentFolder);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 118: // Rename title           OnRenameTitle(itemNo);           break;                  case 925: // Delete           OnDeleteItem(item);           break;                  case 368: // IMDB           OnInfo(itemNo);           break;                  case 208: // play           _playClicked = true; // Override movieinfo before play           OnClick(itemNo);           break;                  case 926: //add to playlist           OnQueueItem(itemNo);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;                  case 1293: //Search movie           OnSearchMovie();           break;                  case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;          case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;                  case 1263: // Set default grabber           GUIVideoFiles.SetDefaultGrabber();           break;                  case 1333: // Add Movie to Collection           OnAddToCollection(movie' itemNo);           break;          case 1334: // Remove from Collection           OnRemoveFromCollection(movie' itemNo);           break;          case 1337: // Add New Collection           OnAddCollection();           break;          case 1270: // Add to user group           OnAddToUserGroup(movie' itemNo);           break;                  case 1271: // Remove from user group           OnRemoveFromUserGroup(movie' itemNo);           break;                  case 1272: // Add user group           OnAddUserGroup();           break;                  case 1308: // Rename sort title           OnChangeSortTitle(movie' itemNo);           break;                  case 1304: // Make nfo file           OnCreateNfoFile(movie.ID);           break;                  case 1306: // Make nfo files           OnCreateNfoFiles();           break;                  case 830: // Reset watched status           movie.Watched = 0;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' false' 0);           VideoDatabase.SetMovieStopTime(movie.ID' 0);           VideoDatabase.SetMovieWatchedCount(movie.ID' 0);           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = false;           LoadDirectory(_currentFolder);           break;          case 1260: // Set watched status           movie.Watched = 1;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' true' 100);           int iPercent = 100;           int iTimesWatched = 0;           VideoDatabase.GetmovieWatchedStatus(movie.ID' out iPercent' out iTimesWatched);           if (iTimesWatched <= 0)           {             VideoDatabase.MovieWatchedCountIncrease(movie.ID);           }           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = true;           LoadDirectory(_currentFolder);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 118: // Rename title           OnRenameTitle(itemNo);           break;                  case 925: // Delete           OnDeleteItem(item);           break;                  case 368: // IMDB           OnInfo(itemNo);           break;                  case 208: // play           _playClicked = true; // Override movieinfo before play           OnClick(itemNo);           break;                  case 926: //add to playlist           OnQueueItem(itemNo);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;                  case 1293: //Search movie           OnSearchMovie();           break;                  case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;          case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;                  case 1263: // Set default grabber           GUIVideoFiles.SetDefaultGrabber();           break;                  case 1333: // Add Movie to Collection           OnAddToCollection(movie' itemNo);           break;          case 1334: // Remove from Collection           OnRemoveFromCollection(movie' itemNo);           break;          case 1337: // Add New Collection           OnAddCollection();           break;          case 1270: // Add to user group           OnAddToUserGroup(movie' itemNo);           break;                  case 1271: // Remove from user group           OnRemoveFromUserGroup(movie' itemNo);           break;                  case 1272: // Add user group           OnAddUserGroup();           break;                  case 1308: // Rename sort title           OnChangeSortTitle(movie' itemNo);           break;                  case 1304: // Make nfo file           OnCreateNfoFile(movie.ID);           break;                  case 1306: // Make nfo files           OnCreateNfoFiles();           break;                  case 830: // Reset watched status           movie.Watched = 0;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' false' 0);           VideoDatabase.SetMovieStopTime(movie.ID' 0);           VideoDatabase.SetMovieWatchedCount(movie.ID' 0);           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = false;           LoadDirectory(_currentFolder);           break;          case 1260: // Set watched status           movie.Watched = 1;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' true' 100);           int iPercent = 100;           int iTimesWatched = 0;           VideoDatabase.GetmovieWatchedStatus(movie.ID' out iPercent' out iTimesWatched);           if (iTimesWatched <= 0)           {             VideoDatabase.MovieWatchedCountIncrease(movie.ID);           }           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = true;           LoadDirectory(_currentFolder);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 118: // Rename title           OnRenameTitle(itemNo);           break;                  case 925: // Delete           OnDeleteItem(item);           break;                  case 368: // IMDB           OnInfo(itemNo);           break;                  case 208: // play           _playClicked = true; // Override movieinfo before play           OnClick(itemNo);           break;                  case 926: //add to playlist           OnQueueItem(itemNo);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;                  case 1293: //Search movie           OnSearchMovie();           break;                  case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;          case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;                  case 1263: // Set default grabber           GUIVideoFiles.SetDefaultGrabber();           break;                  case 1333: // Add Movie to Collection           OnAddToCollection(movie' itemNo);           break;          case 1334: // Remove from Collection           OnRemoveFromCollection(movie' itemNo);           break;          case 1337: // Add New Collection           OnAddCollection();           break;          case 1270: // Add to user group           OnAddToUserGroup(movie' itemNo);           break;                  case 1271: // Remove from user group           OnRemoveFromUserGroup(movie' itemNo);           break;                  case 1272: // Add user group           OnAddUserGroup();           break;                  case 1308: // Rename sort title           OnChangeSortTitle(movie' itemNo);           break;                  case 1304: // Make nfo file           OnCreateNfoFile(movie.ID);           break;                  case 1306: // Make nfo files           OnCreateNfoFiles();           break;                  case 830: // Reset watched status           movie.Watched = 0;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' false' 0);           VideoDatabase.SetMovieStopTime(movie.ID' 0);           VideoDatabase.SetMovieWatchedCount(movie.ID' 0);           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = false;           LoadDirectory(_currentFolder);           break;          case 1260: // Set watched status           movie.Watched = 1;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' true' 100);           int iPercent = 100;           int iTimesWatched = 0;           VideoDatabase.GetmovieWatchedStatus(movie.ID' out iPercent' out iTimesWatched);           if (iTimesWatched <= 0)           {             VideoDatabase.MovieWatchedCountIncrease(movie.ID);           }           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = true;           LoadDirectory(_currentFolder);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 118: // Rename title           OnRenameTitle(itemNo);           break;                  case 925: // Delete           OnDeleteItem(item);           break;                  case 368: // IMDB           OnInfo(itemNo);           break;                  case 208: // play           _playClicked = true; // Override movieinfo before play           OnClick(itemNo);           break;                  case 926: //add to playlist           OnQueueItem(itemNo);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;                  case 1293: //Search movie           OnSearchMovie();           break;                  case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;          case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;                  case 1263: // Set default grabber           GUIVideoFiles.SetDefaultGrabber();           break;                  case 1333: // Add Movie to Collection           OnAddToCollection(movie' itemNo);           break;          case 1334: // Remove from Collection           OnRemoveFromCollection(movie' itemNo);           break;          case 1337: // Add New Collection           OnAddCollection();           break;          case 1270: // Add to user group           OnAddToUserGroup(movie' itemNo);           break;                  case 1271: // Remove from user group           OnRemoveFromUserGroup(movie' itemNo);           break;                  case 1272: // Add user group           OnAddUserGroup();           break;                  case 1308: // Rename sort title           OnChangeSortTitle(movie' itemNo);           break;                  case 1304: // Make nfo file           OnCreateNfoFile(movie.ID);           break;                  case 1306: // Make nfo files           OnCreateNfoFiles();           break;                  case 830: // Reset watched status           movie.Watched = 0;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' false' 0);           VideoDatabase.SetMovieStopTime(movie.ID' 0);           VideoDatabase.SetMovieWatchedCount(movie.ID' 0);           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = false;           LoadDirectory(_currentFolder);           break;          case 1260: // Set watched status           movie.Watched = 1;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' true' 100);           int iPercent = 100;           int iTimesWatched = 0;           VideoDatabase.GetmovieWatchedStatus(movie.ID' out iPercent' out iTimesWatched);           if (iTimesWatched <= 0)           {             VideoDatabase.MovieWatchedCountIncrease(movie.ID);           }           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = true;           LoadDirectory(_currentFolder);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 118: // Rename title           OnRenameTitle(itemNo);           break;                  case 925: // Delete           OnDeleteItem(item);           break;                  case 368: // IMDB           OnInfo(itemNo);           break;                  case 208: // play           _playClicked = true; // Override movieinfo before play           OnClick(itemNo);           break;                  case 926: //add to playlist           OnQueueItem(itemNo);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;                  case 1293: //Search movie           OnSearchMovie();           break;                  case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;          case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;                  case 1263: // Set default grabber           GUIVideoFiles.SetDefaultGrabber();           break;                  case 1333: // Add Movie to Collection           OnAddToCollection(movie' itemNo);           break;          case 1334: // Remove from Collection           OnRemoveFromCollection(movie' itemNo);           break;          case 1337: // Add New Collection           OnAddCollection();           break;          case 1270: // Add to user group           OnAddToUserGroup(movie' itemNo);           break;                  case 1271: // Remove from user group           OnRemoveFromUserGroup(movie' itemNo);           break;                  case 1272: // Add user group           OnAddUserGroup();           break;                  case 1308: // Rename sort title           OnChangeSortTitle(movie' itemNo);           break;                  case 1304: // Make nfo file           OnCreateNfoFile(movie.ID);           break;                  case 1306: // Make nfo files           OnCreateNfoFiles();           break;                  case 830: // Reset watched status           movie.Watched = 0;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' false' 0);           VideoDatabase.SetMovieStopTime(movie.ID' 0);           VideoDatabase.SetMovieWatchedCount(movie.ID' 0);           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = false;           LoadDirectory(_currentFolder);           break;          case 1260: // Set watched status           movie.Watched = 1;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' true' 100);           int iPercent = 100;           int iTimesWatched = 0;           VideoDatabase.GetmovieWatchedStatus(movie.ID' out iPercent' out iTimesWatched);           if (iTimesWatched <= 0)           {             VideoDatabase.MovieWatchedCountIncrease(movie.ID);           }           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = true;           LoadDirectory(_currentFolder);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 118: // Rename title           OnRenameTitle(itemNo);           break;                  case 925: // Delete           OnDeleteItem(item);           break;                  case 368: // IMDB           OnInfo(itemNo);           break;                  case 208: // play           _playClicked = true; // Override movieinfo before play           OnClick(itemNo);           break;                  case 926: //add to playlist           OnQueueItem(itemNo);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;                  case 1293: //Search movie           OnSearchMovie();           break;                  case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;          case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;                  case 1263: // Set default grabber           GUIVideoFiles.SetDefaultGrabber();           break;                  case 1333: // Add Movie to Collection           OnAddToCollection(movie' itemNo);           break;          case 1334: // Remove from Collection           OnRemoveFromCollection(movie' itemNo);           break;          case 1337: // Add New Collection           OnAddCollection();           break;          case 1270: // Add to user group           OnAddToUserGroup(movie' itemNo);           break;                  case 1271: // Remove from user group           OnRemoveFromUserGroup(movie' itemNo);           break;                  case 1272: // Add user group           OnAddUserGroup();           break;                  case 1308: // Rename sort title           OnChangeSortTitle(movie' itemNo);           break;                  case 1304: // Make nfo file           OnCreateNfoFile(movie.ID);           break;                  case 1306: // Make nfo files           OnCreateNfoFiles();           break;                  case 830: // Reset watched status           movie.Watched = 0;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' false' 0);           VideoDatabase.SetMovieStopTime(movie.ID' 0);           VideoDatabase.SetMovieWatchedCount(movie.ID' 0);           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = false;           LoadDirectory(_currentFolder);           break;          case 1260: // Set watched status           movie.Watched = 1;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' true' 100);           int iPercent = 100;           int iTimesWatched = 0;           VideoDatabase.GetmovieWatchedStatus(movie.ID' out iPercent' out iTimesWatched);           if (iTimesWatched <= 0)           {             VideoDatabase.MovieWatchedCountIncrease(movie.ID);           }           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = true;           LoadDirectory(_currentFolder);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 118: // Rename title           OnRenameTitle(itemNo);           break;                  case 925: // Delete           OnDeleteItem(item);           break;                  case 368: // IMDB           OnInfo(itemNo);           break;                  case 208: // play           _playClicked = true; // Override movieinfo before play           OnClick(itemNo);           break;                  case 926: //add to playlist           OnQueueItem(itemNo);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;                  case 1293: //Search movie           OnSearchMovie();           break;                  case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;          case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;                  case 1263: // Set default grabber           GUIVideoFiles.SetDefaultGrabber();           break;                  case 1333: // Add Movie to Collection           OnAddToCollection(movie' itemNo);           break;          case 1334: // Remove from Collection           OnRemoveFromCollection(movie' itemNo);           break;          case 1337: // Add New Collection           OnAddCollection();           break;          case 1270: // Add to user group           OnAddToUserGroup(movie' itemNo);           break;                  case 1271: // Remove from user group           OnRemoveFromUserGroup(movie' itemNo);           break;                  case 1272: // Add user group           OnAddUserGroup();           break;                  case 1308: // Rename sort title           OnChangeSortTitle(movie' itemNo);           break;                  case 1304: // Make nfo file           OnCreateNfoFile(movie.ID);           break;                  case 1306: // Make nfo files           OnCreateNfoFiles();           break;                  case 830: // Reset watched status           movie.Watched = 0;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' false' 0);           VideoDatabase.SetMovieStopTime(movie.ID' 0);           VideoDatabase.SetMovieWatchedCount(movie.ID' 0);           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = false;           LoadDirectory(_currentFolder);           break;          case 1260: // Set watched status           movie.Watched = 1;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' true' 100);           int iPercent = 100;           int iTimesWatched = 0;           VideoDatabase.GetmovieWatchedStatus(movie.ID' out iPercent' out iTimesWatched);           if (iTimesWatched <= 0)           {             VideoDatabase.MovieWatchedCountIncrease(movie.ID);           }           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = true;           LoadDirectory(_currentFolder);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 118: // Rename title           OnRenameTitle(itemNo);           break;                  case 925: // Delete           OnDeleteItem(item);           break;                  case 368: // IMDB           OnInfo(itemNo);           break;                  case 208: // play           _playClicked = true; // Override movieinfo before play           OnClick(itemNo);           break;                  case 926: //add to playlist           OnQueueItem(itemNo);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;                  case 1293: //Search movie           OnSearchMovie();           break;                  case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;          case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;                  case 1263: // Set default grabber           GUIVideoFiles.SetDefaultGrabber();           break;                  case 1333: // Add Movie to Collection           OnAddToCollection(movie' itemNo);           break;          case 1334: // Remove from Collection           OnRemoveFromCollection(movie' itemNo);           break;          case 1337: // Add New Collection           OnAddCollection();           break;          case 1270: // Add to user group           OnAddToUserGroup(movie' itemNo);           break;                  case 1271: // Remove from user group           OnRemoveFromUserGroup(movie' itemNo);           break;                  case 1272: // Add user group           OnAddUserGroup();           break;                  case 1308: // Rename sort title           OnChangeSortTitle(movie' itemNo);           break;                  case 1304: // Make nfo file           OnCreateNfoFile(movie.ID);           break;                  case 1306: // Make nfo files           OnCreateNfoFiles();           break;                  case 830: // Reset watched status           movie.Watched = 0;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' false' 0);           VideoDatabase.SetMovieStopTime(movie.ID' 0);           VideoDatabase.SetMovieWatchedCount(movie.ID' 0);           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = false;           LoadDirectory(_currentFolder);           break;          case 1260: // Set watched status           movie.Watched = 1;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' true' 100);           int iPercent = 100;           int iTimesWatched = 0;           VideoDatabase.GetmovieWatchedStatus(movie.ID' out iPercent' out iTimesWatched);           if (iTimesWatched <= 0)           {             VideoDatabase.MovieWatchedCountIncrease(movie.ID);           }           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = true;           LoadDirectory(_currentFolder);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 118: // Rename title           OnRenameTitle(itemNo);           break;                  case 925: // Delete           OnDeleteItem(item);           break;                  case 368: // IMDB           OnInfo(itemNo);           break;                  case 208: // play           _playClicked = true; // Override movieinfo before play           OnClick(itemNo);           break;                  case 926: //add to playlist           OnQueueItem(itemNo);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;                  case 1293: //Search movie           OnSearchMovie();           break;                  case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;          case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;                  case 1263: // Set default grabber           GUIVideoFiles.SetDefaultGrabber();           break;                  case 1333: // Add Movie to Collection           OnAddToCollection(movie' itemNo);           break;          case 1334: // Remove from Collection           OnRemoveFromCollection(movie' itemNo);           break;          case 1337: // Add New Collection           OnAddCollection();           break;          case 1270: // Add to user group           OnAddToUserGroup(movie' itemNo);           break;                  case 1271: // Remove from user group           OnRemoveFromUserGroup(movie' itemNo);           break;                  case 1272: // Add user group           OnAddUserGroup();           break;                  case 1308: // Rename sort title           OnChangeSortTitle(movie' itemNo);           break;                  case 1304: // Make nfo file           OnCreateNfoFile(movie.ID);           break;                  case 1306: // Make nfo files           OnCreateNfoFiles();           break;                  case 830: // Reset watched status           movie.Watched = 0;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' false' 0);           VideoDatabase.SetMovieStopTime(movie.ID' 0);           VideoDatabase.SetMovieWatchedCount(movie.ID' 0);           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = false;           LoadDirectory(_currentFolder);           break;          case 1260: // Set watched status           movie.Watched = 1;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' true' 100);           int iPercent = 100;           int iTimesWatched = 0;           VideoDatabase.GetmovieWatchedStatus(movie.ID' out iPercent' out iTimesWatched);           if (iTimesWatched <= 0)           {             VideoDatabase.MovieWatchedCountIncrease(movie.ID);           }           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = true;           LoadDirectory(_currentFolder);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 118: // Rename title           OnRenameTitle(itemNo);           break;                  case 925: // Delete           OnDeleteItem(item);           break;                  case 368: // IMDB           OnInfo(itemNo);           break;                  case 208: // play           _playClicked = true; // Override movieinfo before play           OnClick(itemNo);           break;                  case 926: //add to playlist           OnQueueItem(itemNo);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;                  case 1293: //Search movie           OnSearchMovie();           break;                  case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;          case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;                  case 1263: // Set default grabber           GUIVideoFiles.SetDefaultGrabber();           break;                  case 1333: // Add Movie to Collection           OnAddToCollection(movie' itemNo);           break;          case 1334: // Remove from Collection           OnRemoveFromCollection(movie' itemNo);           break;          case 1337: // Add New Collection           OnAddCollection();           break;          case 1270: // Add to user group           OnAddToUserGroup(movie' itemNo);           break;                  case 1271: // Remove from user group           OnRemoveFromUserGroup(movie' itemNo);           break;                  case 1272: // Add user group           OnAddUserGroup();           break;                  case 1308: // Rename sort title           OnChangeSortTitle(movie' itemNo);           break;                  case 1304: // Make nfo file           OnCreateNfoFile(movie.ID);           break;                  case 1306: // Make nfo files           OnCreateNfoFiles();           break;                  case 830: // Reset watched status           movie.Watched = 0;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' false' 0);           VideoDatabase.SetMovieStopTime(movie.ID' 0);           VideoDatabase.SetMovieWatchedCount(movie.ID' 0);           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = false;           LoadDirectory(_currentFolder);           break;          case 1260: // Set watched status           movie.Watched = 1;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' true' 100);           int iPercent = 100;           int iTimesWatched = 0;           VideoDatabase.GetmovieWatchedStatus(movie.ID' out iPercent' out iTimesWatched);           if (iTimesWatched <= 0)           {             VideoDatabase.MovieWatchedCountIncrease(movie.ID);           }           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = true;           LoadDirectory(_currentFolder);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 118: // Rename title           OnRenameTitle(itemNo);           break;                  case 925: // Delete           OnDeleteItem(item);           break;                  case 368: // IMDB           OnInfo(itemNo);           break;                  case 208: // play           _playClicked = true; // Override movieinfo before play           OnClick(itemNo);           break;                  case 926: //add to playlist           OnQueueItem(itemNo);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;                  case 1293: //Search movie           OnSearchMovie();           break;                  case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;          case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;                  case 1263: // Set default grabber           GUIVideoFiles.SetDefaultGrabber();           break;                  case 1333: // Add Movie to Collection           OnAddToCollection(movie' itemNo);           break;          case 1334: // Remove from Collection           OnRemoveFromCollection(movie' itemNo);           break;          case 1337: // Add New Collection           OnAddCollection();           break;          case 1270: // Add to user group           OnAddToUserGroup(movie' itemNo);           break;                  case 1271: // Remove from user group           OnRemoveFromUserGroup(movie' itemNo);           break;                  case 1272: // Add user group           OnAddUserGroup();           break;                  case 1308: // Rename sort title           OnChangeSortTitle(movie' itemNo);           break;                  case 1304: // Make nfo file           OnCreateNfoFile(movie.ID);           break;                  case 1306: // Make nfo files           OnCreateNfoFiles();           break;                  case 830: // Reset watched status           movie.Watched = 0;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' false' 0);           VideoDatabase.SetMovieStopTime(movie.ID' 0);           VideoDatabase.SetMovieWatchedCount(movie.ID' 0);           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = false;           LoadDirectory(_currentFolder);           break;          case 1260: // Set watched status           movie.Watched = 1;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' true' 100);           int iPercent = 100;           int iTimesWatched = 0;           VideoDatabase.GetmovieWatchedStatus(movie.ID' out iPercent' out iTimesWatched);           if (iTimesWatched <= 0)           {             VideoDatabase.MovieWatchedCountIncrease(movie.ID);           }           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = true;           LoadDirectory(_currentFolder);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 118: // Rename title           OnRenameTitle(itemNo);           break;                  case 925: // Delete           OnDeleteItem(item);           break;                  case 368: // IMDB           OnInfo(itemNo);           break;                  case 208: // play           _playClicked = true; // Override movieinfo before play           OnClick(itemNo);           break;                  case 926: //add to playlist           OnQueueItem(itemNo);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;                  case 1293: //Search movie           OnSearchMovie();           break;                  case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;          case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;                  case 1263: // Set default grabber           GUIVideoFiles.SetDefaultGrabber();           break;                  case 1333: // Add Movie to Collection           OnAddToCollection(movie' itemNo);           break;          case 1334: // Remove from Collection           OnRemoveFromCollection(movie' itemNo);           break;          case 1337: // Add New Collection           OnAddCollection();           break;          case 1270: // Add to user group           OnAddToUserGroup(movie' itemNo);           break;                  case 1271: // Remove from user group           OnRemoveFromUserGroup(movie' itemNo);           break;                  case 1272: // Add user group           OnAddUserGroup();           break;                  case 1308: // Rename sort title           OnChangeSortTitle(movie' itemNo);           break;                  case 1304: // Make nfo file           OnCreateNfoFile(movie.ID);           break;                  case 1306: // Make nfo files           OnCreateNfoFiles();           break;                  case 830: // Reset watched status           movie.Watched = 0;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' false' 0);           VideoDatabase.SetMovieStopTime(movie.ID' 0);           VideoDatabase.SetMovieWatchedCount(movie.ID' 0);           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = false;           LoadDirectory(_currentFolder);           break;          case 1260: // Set watched status           movie.Watched = 1;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' true' 100);           int iPercent = 100;           int iTimesWatched = 0;           VideoDatabase.GetmovieWatchedStatus(movie.ID' out iPercent' out iTimesWatched);           if (iTimesWatched <= 0)           {             VideoDatabase.MovieWatchedCountIncrease(movie.ID);           }           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = true;           LoadDirectory(_currentFolder);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 118: // Rename title           OnRenameTitle(itemNo);           break;                  case 925: // Delete           OnDeleteItem(item);           break;                  case 368: // IMDB           OnInfo(itemNo);           break;                  case 208: // play           _playClicked = true; // Override movieinfo before play           OnClick(itemNo);           break;                  case 926: //add to playlist           OnQueueItem(itemNo);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;                  case 1293: //Search movie           OnSearchMovie();           break;                  case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;          case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;                  case 1263: // Set default grabber           GUIVideoFiles.SetDefaultGrabber();           break;                  case 1333: // Add Movie to Collection           OnAddToCollection(movie' itemNo);           break;          case 1334: // Remove from Collection           OnRemoveFromCollection(movie' itemNo);           break;          case 1337: // Add New Collection           OnAddCollection();           break;          case 1270: // Add to user group           OnAddToUserGroup(movie' itemNo);           break;                  case 1271: // Remove from user group           OnRemoveFromUserGroup(movie' itemNo);           break;                  case 1272: // Add user group           OnAddUserGroup();           break;                  case 1308: // Rename sort title           OnChangeSortTitle(movie' itemNo);           break;                  case 1304: // Make nfo file           OnCreateNfoFile(movie.ID);           break;                  case 1306: // Make nfo files           OnCreateNfoFiles();           break;                  case 830: // Reset watched status           movie.Watched = 0;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' false' 0);           VideoDatabase.SetMovieStopTime(movie.ID' 0);           VideoDatabase.SetMovieWatchedCount(movie.ID' 0);           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = false;           LoadDirectory(_currentFolder);           break;          case 1260: // Set watched status           movie.Watched = 1;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' true' 100);           int iPercent = 100;           int iTimesWatched = 0;           VideoDatabase.GetmovieWatchedStatus(movie.ID' out iPercent' out iTimesWatched);           if (iTimesWatched <= 0)           {             VideoDatabase.MovieWatchedCountIncrease(movie.ID);           }           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = true;           LoadDirectory(_currentFolder);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 118: // Rename title           OnRenameTitle(itemNo);           break;                  case 925: // Delete           OnDeleteItem(item);           break;                  case 368: // IMDB           OnInfo(itemNo);           break;                  case 208: // play           _playClicked = true; // Override movieinfo before play           OnClick(itemNo);           break;                  case 926: //add to playlist           OnQueueItem(itemNo);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;                  case 1293: //Search movie           OnSearchMovie();           break;                  case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;          case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;                  case 1263: // Set default grabber           GUIVideoFiles.SetDefaultGrabber();           break;                  case 1333: // Add Movie to Collection           OnAddToCollection(movie' itemNo);           break;          case 1334: // Remove from Collection           OnRemoveFromCollection(movie' itemNo);           break;          case 1337: // Add New Collection           OnAddCollection();           break;          case 1270: // Add to user group           OnAddToUserGroup(movie' itemNo);           break;                  case 1271: // Remove from user group           OnRemoveFromUserGroup(movie' itemNo);           break;                  case 1272: // Add user group           OnAddUserGroup();           break;                  case 1308: // Rename sort title           OnChangeSortTitle(movie' itemNo);           break;                  case 1304: // Make nfo file           OnCreateNfoFile(movie.ID);           break;                  case 1306: // Make nfo files           OnCreateNfoFiles();           break;                  case 830: // Reset watched status           movie.Watched = 0;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' false' 0);           VideoDatabase.SetMovieStopTime(movie.ID' 0);           VideoDatabase.SetMovieWatchedCount(movie.ID' 0);           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = false;           LoadDirectory(_currentFolder);           break;          case 1260: // Set watched status           movie.Watched = 1;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' true' 100);           int iPercent = 100;           int iTimesWatched = 0;           VideoDatabase.GetmovieWatchedStatus(movie.ID' out iPercent' out iTimesWatched);           if (iTimesWatched <= 0)           {             VideoDatabase.MovieWatchedCountIncrease(movie.ID);           }           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = true;           LoadDirectory(_currentFolder);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 118: // Rename title           OnRenameTitle(itemNo);           break;                  case 925: // Delete           OnDeleteItem(item);           break;                  case 368: // IMDB           OnInfo(itemNo);           break;                  case 208: // play           _playClicked = true; // Override movieinfo before play           OnClick(itemNo);           break;                  case 926: //add to playlist           OnQueueItem(itemNo);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;                  case 1293: //Search movie           OnSearchMovie();           break;                  case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;          case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;                  case 1263: // Set default grabber           GUIVideoFiles.SetDefaultGrabber();           break;                  case 1333: // Add Movie to Collection           OnAddToCollection(movie' itemNo);           break;          case 1334: // Remove from Collection           OnRemoveFromCollection(movie' itemNo);           break;          case 1337: // Add New Collection           OnAddCollection();           break;          case 1270: // Add to user group           OnAddToUserGroup(movie' itemNo);           break;                  case 1271: // Remove from user group           OnRemoveFromUserGroup(movie' itemNo);           break;                  case 1272: // Add user group           OnAddUserGroup();           break;                  case 1308: // Rename sort title           OnChangeSortTitle(movie' itemNo);           break;                  case 1304: // Make nfo file           OnCreateNfoFile(movie.ID);           break;                  case 1306: // Make nfo files           OnCreateNfoFiles();           break;                  case 830: // Reset watched status           movie.Watched = 0;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' false' 0);           VideoDatabase.SetMovieStopTime(movie.ID' 0);           VideoDatabase.SetMovieWatchedCount(movie.ID' 0);           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = false;           LoadDirectory(_currentFolder);           break;          case 1260: // Set watched status           movie.Watched = 1;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' true' 100);           int iPercent = 100;           int iTimesWatched = 0;           VideoDatabase.GetmovieWatchedStatus(movie.ID' out iPercent' out iTimesWatched);           if (iTimesWatched <= 0)           {             VideoDatabase.MovieWatchedCountIncrease(movie.ID);           }           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = true;           LoadDirectory(_currentFolder);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 118: // Rename title           OnRenameTitle(itemNo);           break;                  case 925: // Delete           OnDeleteItem(item);           break;                  case 368: // IMDB           OnInfo(itemNo);           break;                  case 208: // play           _playClicked = true; // Override movieinfo before play           OnClick(itemNo);           break;                  case 926: //add to playlist           OnQueueItem(itemNo);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;                  case 1293: //Search movie           OnSearchMovie();           break;                  case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;          case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;                  case 1263: // Set default grabber           GUIVideoFiles.SetDefaultGrabber();           break;                  case 1333: // Add Movie to Collection           OnAddToCollection(movie' itemNo);           break;          case 1334: // Remove from Collection           OnRemoveFromCollection(movie' itemNo);           break;          case 1337: // Add New Collection           OnAddCollection();           break;          case 1270: // Add to user group           OnAddToUserGroup(movie' itemNo);           break;                  case 1271: // Remove from user group           OnRemoveFromUserGroup(movie' itemNo);           break;                  case 1272: // Add user group           OnAddUserGroup();           break;                  case 1308: // Rename sort title           OnChangeSortTitle(movie' itemNo);           break;                  case 1304: // Make nfo file           OnCreateNfoFile(movie.ID);           break;                  case 1306: // Make nfo files           OnCreateNfoFiles();           break;                  case 830: // Reset watched status           movie.Watched = 0;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' false' 0);           VideoDatabase.SetMovieStopTime(movie.ID' 0);           VideoDatabase.SetMovieWatchedCount(movie.ID' 0);           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = false;           LoadDirectory(_currentFolder);           break;          case 1260: // Set watched status           movie.Watched = 1;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' true' 100);           int iPercent = 100;           int iTimesWatched = 0;           VideoDatabase.GetmovieWatchedStatus(movie.ID' out iPercent' out iTimesWatched);           if (iTimesWatched <= 0)           {             VideoDatabase.MovieWatchedCountIncrease(movie.ID);           }           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = true;           LoadDirectory(_currentFolder);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnQueueItem,The following statement contains a magic number: item.Duration = movie.RunTime * 60;
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,LoadDirectory,The following statement contains a magic number: item.Duration = movie.RunTime * 60;
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,LoadDirectory,The following statement contains a magic number: item.Label = GUILocalizeStrings.Get(284);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnSearchNew,The following statement contains a magic number: int maximumShares = 128;
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,DialogProtectedContent,The following statement contains a magic number: dlg.SetHeading(498);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,DialogProtectedContent,The following statement contains a magic number: dlg.AddLocalizedString(1240);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,DialogProtectedContent,The following statement contains a magic number: dlg.AddLocalizedString(926);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,DialogProtectedContent,The following statement contains a magic number: dlg.AddLocalizedString(1295);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,DialogProtectedContent,The following statement contains a magic number: dlg.AddLocalizedString(1268);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,DialogProtectedContent,The following statement contains a magic number: dlg.AddLocalizedString(1262);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,DialogProtectedContent,The following statement contains a magic number: dlg.AddLocalizedString(1307);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,DialogProtectedContent,The following statement contains a magic number: dlg.AddLocalizedString(1263);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,DialogProtectedContent,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 926: //add to playlist           OnQueueItem(facadeLayout.SelectedListItemIndex);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;         case 1293: //Search movie           OnSearchMovie();           break;         case 1295: //Search actor         case 1268: // Search director           OnSearchActor();           break;         case 1263: // Set deault grabber script           GUIVideoFiles.SetDefaultGrabber();           break;         case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;         case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;         case 1272: // Add user group           OnAddUserGroup();           break;         case 1273: // Remove user group           GUIListItem item = facadeLayout.SelectedListItem;            if (item == null)           {             return;           }            OnRemoveUserGroup(item.Label);           break;         case 1337: // Add New Collection           OnAddCollection();           break;         case 1338: // Remove Collection           GUIListItem selitem = facadeLayout.SelectedListItem;            if (selitem == null)           {             return;           }            OnRemoveCollection(selitem.Label);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,DialogProtectedContent,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 926: //add to playlist           OnQueueItem(facadeLayout.SelectedListItemIndex);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;         case 1293: //Search movie           OnSearchMovie();           break;         case 1295: //Search actor         case 1268: // Search director           OnSearchActor();           break;         case 1263: // Set deault grabber script           GUIVideoFiles.SetDefaultGrabber();           break;         case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;         case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;         case 1272: // Add user group           OnAddUserGroup();           break;         case 1273: // Remove user group           GUIListItem item = facadeLayout.SelectedListItem;            if (item == null)           {             return;           }            OnRemoveUserGroup(item.Label);           break;         case 1337: // Add New Collection           OnAddCollection();           break;         case 1338: // Remove Collection           GUIListItem selitem = facadeLayout.SelectedListItem;            if (selitem == null)           {             return;           }            OnRemoveCollection(selitem.Label);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,DialogProtectedContent,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 926: //add to playlist           OnQueueItem(facadeLayout.SelectedListItemIndex);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;         case 1293: //Search movie           OnSearchMovie();           break;         case 1295: //Search actor         case 1268: // Search director           OnSearchActor();           break;         case 1263: // Set deault grabber script           GUIVideoFiles.SetDefaultGrabber();           break;         case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;         case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;         case 1272: // Add user group           OnAddUserGroup();           break;         case 1273: // Remove user group           GUIListItem item = facadeLayout.SelectedListItem;            if (item == null)           {             return;           }            OnRemoveUserGroup(item.Label);           break;         case 1337: // Add New Collection           OnAddCollection();           break;         case 1338: // Remove Collection           GUIListItem selitem = facadeLayout.SelectedListItem;            if (selitem == null)           {             return;           }            OnRemoveCollection(selitem.Label);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,DialogProtectedContent,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 926: //add to playlist           OnQueueItem(facadeLayout.SelectedListItemIndex);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;         case 1293: //Search movie           OnSearchMovie();           break;         case 1295: //Search actor         case 1268: // Search director           OnSearchActor();           break;         case 1263: // Set deault grabber script           GUIVideoFiles.SetDefaultGrabber();           break;         case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;         case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;         case 1272: // Add user group           OnAddUserGroup();           break;         case 1273: // Remove user group           GUIListItem item = facadeLayout.SelectedListItem;            if (item == null)           {             return;           }            OnRemoveUserGroup(item.Label);           break;         case 1337: // Add New Collection           OnAddCollection();           break;         case 1338: // Remove Collection           GUIListItem selitem = facadeLayout.SelectedListItem;            if (selitem == null)           {             return;           }            OnRemoveCollection(selitem.Label);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,DialogProtectedContent,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 926: //add to playlist           OnQueueItem(facadeLayout.SelectedListItemIndex);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;         case 1293: //Search movie           OnSearchMovie();           break;         case 1295: //Search actor         case 1268: // Search director           OnSearchActor();           break;         case 1263: // Set deault grabber script           GUIVideoFiles.SetDefaultGrabber();           break;         case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;         case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;         case 1272: // Add user group           OnAddUserGroup();           break;         case 1273: // Remove user group           GUIListItem item = facadeLayout.SelectedListItem;            if (item == null)           {             return;           }            OnRemoveUserGroup(item.Label);           break;         case 1337: // Add New Collection           OnAddCollection();           break;         case 1338: // Remove Collection           GUIListItem selitem = facadeLayout.SelectedListItem;            if (selitem == null)           {             return;           }            OnRemoveCollection(selitem.Label);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,DialogProtectedContent,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 926: //add to playlist           OnQueueItem(facadeLayout.SelectedListItemIndex);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;         case 1293: //Search movie           OnSearchMovie();           break;         case 1295: //Search actor         case 1268: // Search director           OnSearchActor();           break;         case 1263: // Set deault grabber script           GUIVideoFiles.SetDefaultGrabber();           break;         case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;         case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;         case 1272: // Add user group           OnAddUserGroup();           break;         case 1273: // Remove user group           GUIListItem item = facadeLayout.SelectedListItem;            if (item == null)           {             return;           }            OnRemoveUserGroup(item.Label);           break;         case 1337: // Add New Collection           OnAddCollection();           break;         case 1338: // Remove Collection           GUIListItem selitem = facadeLayout.SelectedListItem;            if (selitem == null)           {             return;           }            OnRemoveCollection(selitem.Label);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,DialogProtectedContent,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 926: //add to playlist           OnQueueItem(facadeLayout.SelectedListItemIndex);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;         case 1293: //Search movie           OnSearchMovie();           break;         case 1295: //Search actor         case 1268: // Search director           OnSearchActor();           break;         case 1263: // Set deault grabber script           GUIVideoFiles.SetDefaultGrabber();           break;         case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;         case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;         case 1272: // Add user group           OnAddUserGroup();           break;         case 1273: // Remove user group           GUIListItem item = facadeLayout.SelectedListItem;            if (item == null)           {             return;           }            OnRemoveUserGroup(item.Label);           break;         case 1337: // Add New Collection           OnAddCollection();           break;         case 1338: // Remove Collection           GUIListItem selitem = facadeLayout.SelectedListItem;            if (selitem == null)           {             return;           }            OnRemoveCollection(selitem.Label);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,DialogProtectedContent,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 926: //add to playlist           OnQueueItem(facadeLayout.SelectedListItemIndex);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;         case 1293: //Search movie           OnSearchMovie();           break;         case 1295: //Search actor         case 1268: // Search director           OnSearchActor();           break;         case 1263: // Set deault grabber script           GUIVideoFiles.SetDefaultGrabber();           break;         case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;         case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;         case 1272: // Add user group           OnAddUserGroup();           break;         case 1273: // Remove user group           GUIListItem item = facadeLayout.SelectedListItem;            if (item == null)           {             return;           }            OnRemoveUserGroup(item.Label);           break;         case 1337: // Add New Collection           OnAddCollection();           break;         case 1338: // Remove Collection           GUIListItem selitem = facadeLayout.SelectedListItem;            if (selitem == null)           {             return;           }            OnRemoveCollection(selitem.Label);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,DialogProtectedContent,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 926: //add to playlist           OnQueueItem(facadeLayout.SelectedListItemIndex);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;         case 1293: //Search movie           OnSearchMovie();           break;         case 1295: //Search actor         case 1268: // Search director           OnSearchActor();           break;         case 1263: // Set deault grabber script           GUIVideoFiles.SetDefaultGrabber();           break;         case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;         case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;         case 1272: // Add user group           OnAddUserGroup();           break;         case 1273: // Remove user group           GUIListItem item = facadeLayout.SelectedListItem;            if (item == null)           {             return;           }            OnRemoveUserGroup(item.Label);           break;         case 1337: // Add New Collection           OnAddCollection();           break;         case 1338: // Remove Collection           GUIListItem selitem = facadeLayout.SelectedListItem;            if (selitem == null)           {             return;           }            OnRemoveCollection(selitem.Label);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,DialogProtectedContent,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 926: //add to playlist           OnQueueItem(facadeLayout.SelectedListItemIndex);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;         case 1293: //Search movie           OnSearchMovie();           break;         case 1295: //Search actor         case 1268: // Search director           OnSearchActor();           break;         case 1263: // Set deault grabber script           GUIVideoFiles.SetDefaultGrabber();           break;         case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;         case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;         case 1272: // Add user group           OnAddUserGroup();           break;         case 1273: // Remove user group           GUIListItem item = facadeLayout.SelectedListItem;            if (item == null)           {             return;           }            OnRemoveUserGroup(item.Label);           break;         case 1337: // Add New Collection           OnAddCollection();           break;         case 1338: // Remove Collection           GUIListItem selitem = facadeLayout.SelectedListItem;            if (selitem == null)           {             return;           }            OnRemoveCollection(selitem.Label);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,DialogProtectedContent,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 926: //add to playlist           OnQueueItem(facadeLayout.SelectedListItemIndex);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;         case 1293: //Search movie           OnSearchMovie();           break;         case 1295: //Search actor         case 1268: // Search director           OnSearchActor();           break;         case 1263: // Set deault grabber script           GUIVideoFiles.SetDefaultGrabber();           break;         case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;         case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;         case 1272: // Add user group           OnAddUserGroup();           break;         case 1273: // Remove user group           GUIListItem item = facadeLayout.SelectedListItem;            if (item == null)           {             return;           }            OnRemoveUserGroup(item.Label);           break;         case 1337: // Add New Collection           OnAddCollection();           break;         case 1338: // Remove Collection           GUIListItem selitem = facadeLayout.SelectedListItem;            if (selitem == null)           {             return;           }            OnRemoveCollection(selitem.Label);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,DialogProtectedContent,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 926: //add to playlist           OnQueueItem(facadeLayout.SelectedListItemIndex);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;         case 1293: //Search movie           OnSearchMovie();           break;         case 1295: //Search actor         case 1268: // Search director           OnSearchActor();           break;         case 1263: // Set deault grabber script           GUIVideoFiles.SetDefaultGrabber();           break;         case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;         case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;         case 1272: // Add user group           OnAddUserGroup();           break;         case 1273: // Remove user group           GUIListItem item = facadeLayout.SelectedListItem;            if (item == null)           {             return;           }            OnRemoveUserGroup(item.Label);           break;         case 1337: // Add New Collection           OnAddCollection();           break;         case 1338: // Remove Collection           GUIListItem selitem = facadeLayout.SelectedListItem;            if (selitem == null)           {             return;           }            OnRemoveCollection(selitem.Label);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,DialogProtectedContent,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 926: //add to playlist           OnQueueItem(facadeLayout.SelectedListItemIndex);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;         case 1293: //Search movie           OnSearchMovie();           break;         case 1295: //Search actor         case 1268: // Search director           OnSearchActor();           break;         case 1263: // Set deault grabber script           GUIVideoFiles.SetDefaultGrabber();           break;         case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;         case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;         case 1272: // Add user group           OnAddUserGroup();           break;         case 1273: // Remove user group           GUIListItem item = facadeLayout.SelectedListItem;            if (item == null)           {             return;           }            OnRemoveUserGroup(item.Label);           break;         case 1337: // Add New Collection           OnAddCollection();           break;         case 1338: // Remove Collection           GUIListItem selitem = facadeLayout.SelectedListItem;            if (selitem == null)           {             return;           }            OnRemoveCollection(selitem.Label);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnDeleteItem,The following statement contains a magic number: dlg.SetHeading(498);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnDeleteItem,The following statement contains a magic number: dlg.AddLocalizedString(432);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnDeleteItem,The following statement contains a magic number: dlg.AddLocalizedString(992);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnDeleteItem,The following statement contains a magic number: switch (dlg.SelectedId)         {           case 432:             deleteFile = false;             break;           case 992:             deleteFile = true;             break;         }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnDeleteItem,The following statement contains a magic number: switch (dlg.SelectedId)         {           case 432:             deleteFile = false;             break;           case 992:             deleteFile = true;             break;         }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnDeleteItem,The following statement contains a magic number: dlgYesNo.SetHeading(GUILocalizeStrings.Get(925));
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnDeleteItem,The following statement contains a magic number: dlgYesNo.SetLine(2' string.Empty);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnDeleteItem,The following statement contains a magic number: dlgYesNo.SetLine(3' string.Empty);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnItemSelected,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"'                                          String.Format("{0}/{1} - {2}"' GUILocalizeStrings.Get(100006)'                                                        handler.LocalizedCurrentView' selectedValue));
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,SetMovieListGroupedBy,The following statement contains a magic number: switch (view)       {         case "genre":           strMovies = VideoDatabase.GetMovieTitlesByGenre(item.Label' whereClause);           break;                case "user groups":         case "user groups only":           int grpId = VideoDatabase.GetUserGroupId(item.Label);           groupDescription = VideoDatabase.GetUserGroupDescriptionById(grpId);           strMovies = VideoDatabase.GetMovieTitlesByUserGroup(grpId' whereClause);           if (!string.IsNullOrEmpty(groupDescription))           {             groupDescription += ("\n\n" + GUILocalizeStrings.Get(342) + ":\n"); // groupDescription + Movies           }           else           {             groupDescription = (GUILocalizeStrings.Get(342) + ":\n"); // Movies           }           strMovies = groupDescription + strMovies;           break;                case "movie collections":         case "movie collections only":           int mcolId = VideoDatabase.GetCollectionId(item.Label);           collectionDescription = VideoDatabase.GetCollectionDescriptionById(mcolId);            if (!string.IsNullOrEmpty(collectionDescription))           {             strMovies = collectionDescription;           }           else           {             collectionDescription = (GUILocalizeStrings.Get(342) + ":\n"); // Movies             strMovies = VideoDatabase.GetMovieTitlesByCollection(mcolId' whereClause);             strMovies = collectionDescription + strMovies;           }           break;          case "actor":           if (movie != null)           {             strMovies = VideoDatabase.GetMovieTitlesByActor(movie.ActorID' whereClause);           }           break;          case "director":           if (movie != null)           {             strMovies = VideoDatabase.GetMovieTitlesByDirector(movie.ActorID' whereClause);           }           break;                  case "year":           strMovies = VideoDatabase.GetMovieTitlesByYear(item.Label' whereClause);           break;                  case "actorindex":           strMovies = VideoDatabase.GetFieldDataByIndex("strActor"' item.Label' whereClause);           break;                case "directorindex":           strMovies = VideoDatabase.GetFieldDataByIndex("strActorDirector"' item.Label' whereClause);           break;                  case "titleindex":           strMovies = VideoDatabase.GetFieldDataByIndex("strTitle"' item.Label' whereClause);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,SetMovieListGroupedBy,The following statement contains a magic number: switch (view)       {         case "genre":           strMovies = VideoDatabase.GetMovieTitlesByGenre(item.Label' whereClause);           break;                case "user groups":         case "user groups only":           int grpId = VideoDatabase.GetUserGroupId(item.Label);           groupDescription = VideoDatabase.GetUserGroupDescriptionById(grpId);           strMovies = VideoDatabase.GetMovieTitlesByUserGroup(grpId' whereClause);           if (!string.IsNullOrEmpty(groupDescription))           {             groupDescription += ("\n\n" + GUILocalizeStrings.Get(342) + ":\n"); // groupDescription + Movies           }           else           {             groupDescription = (GUILocalizeStrings.Get(342) + ":\n"); // Movies           }           strMovies = groupDescription + strMovies;           break;                case "movie collections":         case "movie collections only":           int mcolId = VideoDatabase.GetCollectionId(item.Label);           collectionDescription = VideoDatabase.GetCollectionDescriptionById(mcolId);            if (!string.IsNullOrEmpty(collectionDescription))           {             strMovies = collectionDescription;           }           else           {             collectionDescription = (GUILocalizeStrings.Get(342) + ":\n"); // Movies             strMovies = VideoDatabase.GetMovieTitlesByCollection(mcolId' whereClause);             strMovies = collectionDescription + strMovies;           }           break;          case "actor":           if (movie != null)           {             strMovies = VideoDatabase.GetMovieTitlesByActor(movie.ActorID' whereClause);           }           break;          case "director":           if (movie != null)           {             strMovies = VideoDatabase.GetMovieTitlesByDirector(movie.ActorID' whereClause);           }           break;                  case "year":           strMovies = VideoDatabase.GetMovieTitlesByYear(item.Label' whereClause);           break;                  case "actorindex":           strMovies = VideoDatabase.GetFieldDataByIndex("strActor"' item.Label' whereClause);           break;                case "directorindex":           strMovies = VideoDatabase.GetFieldDataByIndex("strActorDirector"' item.Label' whereClause);           break;                  case "titleindex":           strMovies = VideoDatabase.GetFieldDataByIndex("strTitle"' item.Label' whereClause);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,SetMovieListGroupedBy,The following statement contains a magic number: switch (view)       {         case "genre":           strMovies = VideoDatabase.GetMovieTitlesByGenre(item.Label' whereClause);           break;                case "user groups":         case "user groups only":           int grpId = VideoDatabase.GetUserGroupId(item.Label);           groupDescription = VideoDatabase.GetUserGroupDescriptionById(grpId);           strMovies = VideoDatabase.GetMovieTitlesByUserGroup(grpId' whereClause);           if (!string.IsNullOrEmpty(groupDescription))           {             groupDescription += ("\n\n" + GUILocalizeStrings.Get(342) + ":\n"); // groupDescription + Movies           }           else           {             groupDescription = (GUILocalizeStrings.Get(342) + ":\n"); // Movies           }           strMovies = groupDescription + strMovies;           break;                case "movie collections":         case "movie collections only":           int mcolId = VideoDatabase.GetCollectionId(item.Label);           collectionDescription = VideoDatabase.GetCollectionDescriptionById(mcolId);            if (!string.IsNullOrEmpty(collectionDescription))           {             strMovies = collectionDescription;           }           else           {             collectionDescription = (GUILocalizeStrings.Get(342) + ":\n"); // Movies             strMovies = VideoDatabase.GetMovieTitlesByCollection(mcolId' whereClause);             strMovies = collectionDescription + strMovies;           }           break;          case "actor":           if (movie != null)           {             strMovies = VideoDatabase.GetMovieTitlesByActor(movie.ActorID' whereClause);           }           break;          case "director":           if (movie != null)           {             strMovies = VideoDatabase.GetMovieTitlesByDirector(movie.ActorID' whereClause);           }           break;                  case "year":           strMovies = VideoDatabase.GetMovieTitlesByYear(item.Label' whereClause);           break;                  case "actorindex":           strMovies = VideoDatabase.GetFieldDataByIndex("strActor"' item.Label' whereClause);           break;                case "directorindex":           strMovies = VideoDatabase.GetFieldDataByIndex("strActorDirector"' item.Label' whereClause);           break;                  case "titleindex":           strMovies = VideoDatabase.GetFieldDataByIndex("strTitle"' item.Label' whereClause);           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnSearchMovie,The following statement contains a magic number: dlg.SetHeading(498);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnSearchMovie,The following statement contains a magic number: dlg.AddLocalizedString(1281);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnSearchMovie,The following statement contains a magic number: dlg.AddLocalizedString(1282);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnSearchMovie,The following statement contains a magic number: dlg.AddLocalizedString(1283);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnSearchMovie,The following statement contains a magic number: dlg.AddLocalizedString(1284);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnSearchMovie,The following statement contains a magic number: dlg.AddLocalizedString(1285);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnSearchMovie,The following statement contains a magic number: dlg.AddLocalizedString(1286);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnSearchMovie,The following statement contains a magic number: switch (dlg.SelectedLabel)       {         case 0:           _searchMovieDbField = "strTitle";           break;         case 1:           _searchMovieDbField = "strActorDirector";           break;         case 2:           _searchMovieDbField = "strActor";           break;         case 3:           _searchMovieDbField = "strRole";           break;         case 4:           _searchMovieDbField = "iYear";           break;         case 5:           _searchMovieDbField = "mpaa";           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnSearchMovie,The following statement contains a magic number: switch (dlg.SelectedLabel)       {         case 0:           _searchMovieDbField = "strTitle";           break;         case 1:           _searchMovieDbField = "strActorDirector";           break;         case 2:           _searchMovieDbField = "strActor";           break;         case 3:           _searchMovieDbField = "strRole";           break;         case 4:           _searchMovieDbField = "iYear";           break;         case 5:           _searchMovieDbField = "mpaa";           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnSearchMovie,The following statement contains a magic number: switch (dlg.SelectedLabel)       {         case 0:           _searchMovieDbField = "strTitle";           break;         case 1:           _searchMovieDbField = "strActorDirector";           break;         case 2:           _searchMovieDbField = "strActor";           break;         case 3:           _searchMovieDbField = "strRole";           break;         case 4:           _searchMovieDbField = "iYear";           break;         case 5:           _searchMovieDbField = "mpaa";           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnSearchMovie,The following statement contains a magic number: switch (dlg.SelectedLabel)       {         case 0:           _searchMovieDbField = "strTitle";           break;         case 1:           _searchMovieDbField = "strActorDirector";           break;         case 2:           _searchMovieDbField = "strActor";           break;         case 3:           _searchMovieDbField = "strRole";           break;         case 4:           _searchMovieDbField = "iYear";           break;         case 5:           _searchMovieDbField = "mpaa";           break;       }
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnAddToCollection,The following statement contains a magic number: dlg.SetHeading(498);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnRemoveFromCollection,The following statement contains a magic number: dlg.SetHeading(1334);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnAddToUserGroup,The following statement contains a magic number: dlg.SetHeading(498);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnRemoveFromUserGroup,The following statement contains a magic number: dlg.SetHeading(1271);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnCreateNfoFile,The following statement contains a magic number: dlgNotify.SetHeading(GUILocalizeStrings.Get(1304));
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnCreateNfoFile,The following statement contains a magic number: dlgNotify.SetText(GUILocalizeStrings.Get(1305));
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnCreateNfoFiles,The following statement contains a magic number: progressDialog.SetHeading(GUILocalizeStrings.Get(1312));
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnCreateNfoFiles,The following statement contains a magic number: progressDialog.SetLine(1' GUILocalizeStrings.Get(1313));
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnCreateNfoFiles,The following statement contains a magic number: progressDialog.SetLine(2' GUILocalizeStrings.Get(1314));
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnCreateNfoFiles,The following statement contains a magic number: progressDialog.SetLine(2' GUILocalizeStrings.Get(1314));
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnCreateNfoFiles,The following statement contains a magic number: progressDialog.SetLine(1' GUILocalizeStrings.Get(1315) + movie.Title);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnCreateNfoFiles,The following statement contains a magic number: progressDialog.SetLine(2' GUILocalizeStrings.Get(1314));
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnCreateNfoFiles,The following statement contains a magic number: progressDialog.SetLine(2' GUILocalizeStrings.Get(1314));
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnCreateNfoFiles,The following statement contains a magic number: percent += 100 / (moviesCount - 1);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,GetProtectedShares,The following statement contains a magic number: index < 128
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnProgress,The following statement contains a magic number: pDlgProgress.SetLine(2' line2);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnSearchStarting,The following statement contains a magic number: heading = String.Format("{0}:{1}/{2}"' GUILocalizeStrings.Get(197)' _scanningFileNumber' _scanningFileTotal);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnSearchStarting,The following statement contains a magic number: pDlgProgress.SetLine(2' string.Empty);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnMovieNotFound,The following statement contains a magic number: pDlgOk.SetHeading(195);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnMovieNotFound,The following statement contains a magic number: pDlgOk.SetLine(2' string.Empty);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnDetailsStarting,The following statement contains a magic number: heading = String.Format("{0}:{1}/{2}"' GUILocalizeStrings.Get(198)' _scanningFileNumber' _scanningFileTotal);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnDetailsStarting,The following statement contains a magic number: pDlgProgress.SetLine(2' string.Empty);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnActorsStarting,The following statement contains a magic number: heading = String.Format("{0}:{1}/{2}"' GUILocalizeStrings.Get(986)' _scanningFileNumber' _scanningFileTotal);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnActorsStarting,The following statement contains a magic number: pDlgProgress.SetLine(2' string.Empty);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnActorInfoStarting,The following statement contains a magic number: heading = String.Format("{0}:{1}/{2}"' GUILocalizeStrings.Get(986)' _scanningFileNumber' _scanningFileTotal);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnActorInfoStarting,The following statement contains a magic number: pDlgProgress.SetLine(2' string.Empty);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnDetailsNotFound,The following statement contains a magic number: pDlgOk.SetHeading(195);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnDetailsNotFound,The following statement contains a magic number: pDlgOk.SetLine(2' string.Empty);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnSelectMovie,The following statement contains a magic number: pDlgSelect.SetHeading(196);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnSelectMovie,The following statement contains a magic number: pDlgSelect.SetButtonLabel(413);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnSelectActor,The following statement contains a magic number: pDlgSelect.SetHeading(GUILocalizeStrings.Get(1310));
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnScanEnd,The following statement contains a magic number: pDlgSelect.SetHeading(892);
Magic Number,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnScanEnd,The following statement contains a magic number: pDlgSelect.SetButtonLabel(4517);
Magic Number,MediaPortal.GUI.Video,SelectDVDHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\SelectDVDHandler.cs,ShowSelectDriveDialog,The following statement contains a magic number: Util.Utils.getDriveType(item.Path) == 5
Magic Number,MediaPortal.GUI.Video,SelectDVDHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\SelectDVDHandler.cs,ShowSelectDriveDialog,The following statement contains a magic number: dlgSel.SetHeading(DVDonly ? 196 : 2201);
Magic Number,MediaPortal.GUI.Video,SelectDVDHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\SelectDVDHandler.cs,ShowSelectDriveDialog,The following statement contains a magic number: dlgSel.SetHeading(DVDonly ? 196 : 2201);
Magic Number,MediaPortal.GUI.Video,SelectDVDHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\SelectDVDHandler.cs,ShowSelectDriveDialog,The following statement contains a magic number: return dlgSel.SelectedLabelText.Substring(1' 2);
Magic Number,MediaPortal.GUI.Video,SelectDVDHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\SelectDVDHandler.cs,ShowSelectDriveDialog,The following statement contains a magic number: dlgOk.SetHeading(1020);
Magic Number,MediaPortal.GUI.Video,SelectDVDHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\SelectDVDHandler.cs,ShowSelectDriveDialog,The following statement contains a magic number: dlgOk.SetLine(1' 219);
Magic Number,MediaPortal.GUI.Video,SelectDVDHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\SelectDVDHandler.cs,OnPlayDVD,The following statement contains a magic number: Util.Utils.getDriveType(drive) == 5
Magic Number,MediaPortal.GUI.Video,SelectDVDHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\SelectDVDHandler.cs,OnPlayDVD,The following statement contains a magic number: dlgOk.SetHeading(3);
Magic Number,MediaPortal.GUI.Video,SelectDVDHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\SelectDVDHandler.cs,OnPlayDVD,The following statement contains a magic number: dlgOk.SetLine(1' 219);
Magic Number,MediaPortal.GUI.Video,VideoFolderWatcherHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoFolderWatcherHelper.cs,WatchFolders,The following statement contains a magic number: _Events = ArrayList.Synchronized(new ArrayList(64));
Magic Number,MediaPortal.GUI.Video,VideoViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoViewHandler.cs,Execute,The following statement contains a magic number: movie.Year = (int)Math.Floor(0.5d + Double.Parse(DatabaseUtility.Get(results' i' "iYear")));
Magic Number,MediaPortal.GUI.Video,VideoViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoViewHandler.cs,GetLocalizedViewLevel,The following statement contains a magic number: switch(lvlName)        {                    case "actor":            localizedLevelName = GUILocalizeStrings.Get(344);            break;          case "genre":            localizedLevelName = GUILocalizeStrings.Get(135);            break;          case "year":            localizedLevelName = GUILocalizeStrings.Get(987);            break;                case "watched":          case "unwatched":          case "title":          case "rating":          case "recently added":          case "recently watched":            localizedLevelName = GUILocalizeStrings.Get(342);            break;          case "actorindex":            localizedLevelName = GUILocalizeStrings.Get(1288);            break;          case "directorindex":            localizedLevelName = GUILocalizeStrings.Get(1289);            break;          case "titleindex":            localizedLevelName = GUILocalizeStrings.Get(1287);            break;          case "user groups":            localizedLevelName = GUILocalizeStrings.Get(1265);            break;          case "user groups only":            localizedLevelName = GUILocalizeStrings.Get(1330);            break;          case "movie collections":            localizedLevelName = GUILocalizeStrings.Get(1331);            break;          case "movie collections only":            localizedLevelName = GUILocalizeStrings.Get(1332);            break;          default:            localizedLevelName = lvlName;            break;        }
Magic Number,MediaPortal.GUI.Video,VideoViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoViewHandler.cs,GetLocalizedViewLevel,The following statement contains a magic number: switch(lvlName)        {                    case "actor":            localizedLevelName = GUILocalizeStrings.Get(344);            break;          case "genre":            localizedLevelName = GUILocalizeStrings.Get(135);            break;          case "year":            localizedLevelName = GUILocalizeStrings.Get(987);            break;                case "watched":          case "unwatched":          case "title":          case "rating":          case "recently added":          case "recently watched":            localizedLevelName = GUILocalizeStrings.Get(342);            break;          case "actorindex":            localizedLevelName = GUILocalizeStrings.Get(1288);            break;          case "directorindex":            localizedLevelName = GUILocalizeStrings.Get(1289);            break;          case "titleindex":            localizedLevelName = GUILocalizeStrings.Get(1287);            break;          case "user groups":            localizedLevelName = GUILocalizeStrings.Get(1265);            break;          case "user groups only":            localizedLevelName = GUILocalizeStrings.Get(1330);            break;          case "movie collections":            localizedLevelName = GUILocalizeStrings.Get(1331);            break;          case "movie collections only":            localizedLevelName = GUILocalizeStrings.Get(1332);            break;          default:            localizedLevelName = lvlName;            break;        }
Magic Number,MediaPortal.GUI.Video,VideoViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoViewHandler.cs,GetLocalizedViewLevel,The following statement contains a magic number: switch(lvlName)        {                    case "actor":            localizedLevelName = GUILocalizeStrings.Get(344);            break;          case "genre":            localizedLevelName = GUILocalizeStrings.Get(135);            break;          case "year":            localizedLevelName = GUILocalizeStrings.Get(987);            break;                case "watched":          case "unwatched":          case "title":          case "rating":          case "recently added":          case "recently watched":            localizedLevelName = GUILocalizeStrings.Get(342);            break;          case "actorindex":            localizedLevelName = GUILocalizeStrings.Get(1288);            break;          case "directorindex":            localizedLevelName = GUILocalizeStrings.Get(1289);            break;          case "titleindex":            localizedLevelName = GUILocalizeStrings.Get(1287);            break;          case "user groups":            localizedLevelName = GUILocalizeStrings.Get(1265);            break;          case "user groups only":            localizedLevelName = GUILocalizeStrings.Get(1330);            break;          case "movie collections":            localizedLevelName = GUILocalizeStrings.Get(1331);            break;          case "movie collections only":            localizedLevelName = GUILocalizeStrings.Get(1332);            break;          default:            localizedLevelName = lvlName;            break;        }
Magic Number,MediaPortal.GUI.Video,VideoViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoViewHandler.cs,GetLocalizedViewLevel,The following statement contains a magic number: switch(lvlName)        {                    case "actor":            localizedLevelName = GUILocalizeStrings.Get(344);            break;          case "genre":            localizedLevelName = GUILocalizeStrings.Get(135);            break;          case "year":            localizedLevelName = GUILocalizeStrings.Get(987);            break;                case "watched":          case "unwatched":          case "title":          case "rating":          case "recently added":          case "recently watched":            localizedLevelName = GUILocalizeStrings.Get(342);            break;          case "actorindex":            localizedLevelName = GUILocalizeStrings.Get(1288);            break;          case "directorindex":            localizedLevelName = GUILocalizeStrings.Get(1289);            break;          case "titleindex":            localizedLevelName = GUILocalizeStrings.Get(1287);            break;          case "user groups":            localizedLevelName = GUILocalizeStrings.Get(1265);            break;          case "user groups only":            localizedLevelName = GUILocalizeStrings.Get(1330);            break;          case "movie collections":            localizedLevelName = GUILocalizeStrings.Get(1331);            break;          case "movie collections only":            localizedLevelName = GUILocalizeStrings.Get(1332);            break;          default:            localizedLevelName = lvlName;            break;        }
Magic Number,MediaPortal.GUI.Video,VideoViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoViewHandler.cs,GetLocalizedViewLevel,The following statement contains a magic number: switch(lvlName)        {                    case "actor":            localizedLevelName = GUILocalizeStrings.Get(344);            break;          case "genre":            localizedLevelName = GUILocalizeStrings.Get(135);            break;          case "year":            localizedLevelName = GUILocalizeStrings.Get(987);            break;                case "watched":          case "unwatched":          case "title":          case "rating":          case "recently added":          case "recently watched":            localizedLevelName = GUILocalizeStrings.Get(342);            break;          case "actorindex":            localizedLevelName = GUILocalizeStrings.Get(1288);            break;          case "directorindex":            localizedLevelName = GUILocalizeStrings.Get(1289);            break;          case "titleindex":            localizedLevelName = GUILocalizeStrings.Get(1287);            break;          case "user groups":            localizedLevelName = GUILocalizeStrings.Get(1265);            break;          case "user groups only":            localizedLevelName = GUILocalizeStrings.Get(1330);            break;          case "movie collections":            localizedLevelName = GUILocalizeStrings.Get(1331);            break;          case "movie collections only":            localizedLevelName = GUILocalizeStrings.Get(1332);            break;          default:            localizedLevelName = lvlName;            break;        }
Magic Number,MediaPortal.GUI.Video,VideoViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoViewHandler.cs,GetLocalizedViewLevel,The following statement contains a magic number: switch(lvlName)        {                    case "actor":            localizedLevelName = GUILocalizeStrings.Get(344);            break;          case "genre":            localizedLevelName = GUILocalizeStrings.Get(135);            break;          case "year":            localizedLevelName = GUILocalizeStrings.Get(987);            break;                case "watched":          case "unwatched":          case "title":          case "rating":          case "recently added":          case "recently watched":            localizedLevelName = GUILocalizeStrings.Get(342);            break;          case "actorindex":            localizedLevelName = GUILocalizeStrings.Get(1288);            break;          case "directorindex":            localizedLevelName = GUILocalizeStrings.Get(1289);            break;          case "titleindex":            localizedLevelName = GUILocalizeStrings.Get(1287);            break;          case "user groups":            localizedLevelName = GUILocalizeStrings.Get(1265);            break;          case "user groups only":            localizedLevelName = GUILocalizeStrings.Get(1330);            break;          case "movie collections":            localizedLevelName = GUILocalizeStrings.Get(1331);            break;          case "movie collections only":            localizedLevelName = GUILocalizeStrings.Get(1332);            break;          default:            localizedLevelName = lvlName;            break;        }
Magic Number,MediaPortal.GUI.Video,VideoViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoViewHandler.cs,GetLocalizedViewLevel,The following statement contains a magic number: switch(lvlName)        {                    case "actor":            localizedLevelName = GUILocalizeStrings.Get(344);            break;          case "genre":            localizedLevelName = GUILocalizeStrings.Get(135);            break;          case "year":            localizedLevelName = GUILocalizeStrings.Get(987);            break;                case "watched":          case "unwatched":          case "title":          case "rating":          case "recently added":          case "recently watched":            localizedLevelName = GUILocalizeStrings.Get(342);            break;          case "actorindex":            localizedLevelName = GUILocalizeStrings.Get(1288);            break;          case "directorindex":            localizedLevelName = GUILocalizeStrings.Get(1289);            break;          case "titleindex":            localizedLevelName = GUILocalizeStrings.Get(1287);            break;          case "user groups":            localizedLevelName = GUILocalizeStrings.Get(1265);            break;          case "user groups only":            localizedLevelName = GUILocalizeStrings.Get(1330);            break;          case "movie collections":            localizedLevelName = GUILocalizeStrings.Get(1331);            break;          case "movie collections only":            localizedLevelName = GUILocalizeStrings.Get(1332);            break;          default:            localizedLevelName = lvlName;            break;        }
Magic Number,MediaPortal.GUI.Video,VideoViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoViewHandler.cs,GetLocalizedViewLevel,The following statement contains a magic number: switch(lvlName)        {                    case "actor":            localizedLevelName = GUILocalizeStrings.Get(344);            break;          case "genre":            localizedLevelName = GUILocalizeStrings.Get(135);            break;          case "year":            localizedLevelName = GUILocalizeStrings.Get(987);            break;                case "watched":          case "unwatched":          case "title":          case "rating":          case "recently added":          case "recently watched":            localizedLevelName = GUILocalizeStrings.Get(342);            break;          case "actorindex":            localizedLevelName = GUILocalizeStrings.Get(1288);            break;          case "directorindex":            localizedLevelName = GUILocalizeStrings.Get(1289);            break;          case "titleindex":            localizedLevelName = GUILocalizeStrings.Get(1287);            break;          case "user groups":            localizedLevelName = GUILocalizeStrings.Get(1265);            break;          case "user groups only":            localizedLevelName = GUILocalizeStrings.Get(1330);            break;          case "movie collections":            localizedLevelName = GUILocalizeStrings.Get(1331);            break;          case "movie collections only":            localizedLevelName = GUILocalizeStrings.Get(1332);            break;          default:            localizedLevelName = lvlName;            break;        }
Magic Number,MediaPortal.GUI.Video,VideoViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoViewHandler.cs,GetLocalizedViewLevel,The following statement contains a magic number: switch(lvlName)        {                    case "actor":            localizedLevelName = GUILocalizeStrings.Get(344);            break;          case "genre":            localizedLevelName = GUILocalizeStrings.Get(135);            break;          case "year":            localizedLevelName = GUILocalizeStrings.Get(987);            break;                case "watched":          case "unwatched":          case "title":          case "rating":          case "recently added":          case "recently watched":            localizedLevelName = GUILocalizeStrings.Get(342);            break;          case "actorindex":            localizedLevelName = GUILocalizeStrings.Get(1288);            break;          case "directorindex":            localizedLevelName = GUILocalizeStrings.Get(1289);            break;          case "titleindex":            localizedLevelName = GUILocalizeStrings.Get(1287);            break;          case "user groups":            localizedLevelName = GUILocalizeStrings.Get(1265);            break;          case "user groups only":            localizedLevelName = GUILocalizeStrings.Get(1330);            break;          case "movie collections":            localizedLevelName = GUILocalizeStrings.Get(1331);            break;          case "movie collections only":            localizedLevelName = GUILocalizeStrings.Get(1332);            break;          default:            localizedLevelName = lvlName;            break;        }
Magic Number,MediaPortal.GUI.Video,VideoViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoViewHandler.cs,GetLocalizedViewLevel,The following statement contains a magic number: switch(lvlName)        {                    case "actor":            localizedLevelName = GUILocalizeStrings.Get(344);            break;          case "genre":            localizedLevelName = GUILocalizeStrings.Get(135);            break;          case "year":            localizedLevelName = GUILocalizeStrings.Get(987);            break;                case "watched":          case "unwatched":          case "title":          case "rating":          case "recently added":          case "recently watched":            localizedLevelName = GUILocalizeStrings.Get(342);            break;          case "actorindex":            localizedLevelName = GUILocalizeStrings.Get(1288);            break;          case "directorindex":            localizedLevelName = GUILocalizeStrings.Get(1289);            break;          case "titleindex":            localizedLevelName = GUILocalizeStrings.Get(1287);            break;          case "user groups":            localizedLevelName = GUILocalizeStrings.Get(1265);            break;          case "user groups only":            localizedLevelName = GUILocalizeStrings.Get(1330);            break;          case "movie collections":            localizedLevelName = GUILocalizeStrings.Get(1331);            break;          case "movie collections only":            localizedLevelName = GUILocalizeStrings.Get(1332);            break;          default:            localizedLevelName = lvlName;            break;        }
Magic Number,MediaPortal.GUI.Video,VideoViewHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoViewHandler.cs,GetLocalizedViewLevel,The following statement contains a magic number: switch(lvlName)        {                    case "actor":            localizedLevelName = GUILocalizeStrings.Get(344);            break;          case "genre":            localizedLevelName = GUILocalizeStrings.Get(135);            break;          case "year":            localizedLevelName = GUILocalizeStrings.Get(987);            break;                case "watched":          case "unwatched":          case "title":          case "rating":          case "recently added":          case "recently watched":            localizedLevelName = GUILocalizeStrings.Get(342);            break;          case "actorindex":            localizedLevelName = GUILocalizeStrings.Get(1288);            break;          case "directorindex":            localizedLevelName = GUILocalizeStrings.Get(1289);            break;          case "titleindex":            localizedLevelName = GUILocalizeStrings.Get(1287);            break;          case "user groups":            localizedLevelName = GUILocalizeStrings.Get(1265);            break;          case "user groups only":            localizedLevelName = GUILocalizeStrings.Get(1330);            break;          case "movie collections":            localizedLevelName = GUILocalizeStrings.Get(1331);            break;          case "movie collections only":            localizedLevelName = GUILocalizeStrings.Get(1332);            break;          default:            localizedLevelName = lvlName;            break;        }
Duplicate Code,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The method contains a code clone-set at the following line numbers (starting from the method definition): ((279' 307)' (340' 368))
Duplicate Code,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,LoadDirectory,The method contains a code clone-set at the following line numbers (starting from the method definition): ((137' 169)' (293' 325))
Duplicate Code,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,LoadDirectory,The method contains a code clone-set at the following line numbers (starting from the method definition): ((310' 340)' (397' 427))
Duplicate Code,MediaPortal.GUI.Video,VideoSort,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoSort.cs,Compare,The method contains a code clone-set at the following line numbers (starting from the method definition): ((111' 147)' (303' 339))
Duplicate Code,MediaPortal.GUI.Video,VideoSort,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoSort.cs,Compare,The method contains a code clone-set at the following line numbers (starting from the method definition): ((150' 171)' (222' 243))
Missing Default,MediaPortal.GUI.Video,GUIVideoArtistInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoArtistInfo.cs,OnShowContextMenu,The following switch statement is missing a default case: switch (dlg.SelectedId)        {          case 1296: // Refresh All actor movies            _forceRefreshAll = true;            OnRefreshMovie();            break;          case 1290: // Refresh selected movie            _forceRefreshAll = true;            OnRefreshSingleMovie();            break;          case 208: // Play            try             {              GUIVideoFiles.PlayMovie(Convert.ToInt32(item.DVDLabel)' true);            }            catch {}            break;          case 368: // IMDB            OnMovieInfo(item);            break;        }
Missing Default,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,GetSortMethod,The following switch statement is missing a default case: switch (s.Trim().ToLowerInvariant())       {         case "name":           return VideoSort.SortMethod.Name;         case "nameall":           return VideoSort.SortMethod.NameAll;         case "date":           return VideoSort.SortMethod.Date;         case "size":           return VideoSort.SortMethod.Size;         case "modified":           return VideoSort.SortMethod.Modified;         case "created":           return VideoSort.SortMethod.Created;         case "label":           return VideoSort.SortMethod.Label;         case "rating":           return VideoSort.SortMethod.Rating;         case "year":           return VideoSort.SortMethod.Year;         case "watched":           return VideoSort.SortMethod.Watched;          case "name_with_duration":            return VideoSort.SortMethod.Name_With_Duration;       }
Missing Default,MediaPortal.GUI.Video,GUIVideoBaseWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoBaseWindow.cs,UpdateButtonStates,The following switch statement is missing a default case: switch (CurrentSortMethod)       {         case VideoSort.SortMethod.Name:           strLine = GUILocalizeStrings.Get(365);           break;         case VideoSort.SortMethod.NameAll:           strLine = GUILocalizeStrings.Get(1309);           break;         case VideoSort.SortMethod.Date:           strLine = GUILocalizeStrings.Get(104);           break;         case VideoSort.SortMethod.Size:           strLine = GUILocalizeStrings.Get(105);           break;         case VideoSort.SortMethod.Year:           strLine = GUILocalizeStrings.Get(366);           break;         case VideoSort.SortMethod.Rating:           strLine = GUILocalizeStrings.Get(367);           break;         case VideoSort.SortMethod.Label:           strLine = GUILocalizeStrings.Get(430);           break;         case VideoSort.SortMethod.Watched:           strLine = GUILocalizeStrings.Get(527);           break;         case VideoSort.SortMethod.Created:           strLine = GUILocalizeStrings.Get(1220);           break;         case VideoSort.SortMethod.Modified:           strLine = GUILocalizeStrings.Get(1221);            break;          case VideoSort.SortMethod.Name_With_Duration:            strLine = GUILocalizeStrings.Get(1999);           break;       }
Missing Default,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_CD_REMOVED:            if (g_Player.Playing && g_Player.IsDVD &&                message.Label.Equals(g_Player.CurrentFile.Substring(0' 2)' StringComparison.InvariantCultureIgnoreCase))            // test if it is our drive            {              Log.Info("GUIVideoFiles: Stop dvd since DVD is ejected");              g_Player.Stop();            }              if (GUIWindowManager.ActiveWindow == GetID)            {              if (Util.Utils.IsDVD(_currentFolder))              {                _currentFolder = string.Empty;                LoadDirectory(_currentFolder);              }            }            break;            case GUIMessage.MessageType.GUI_MSG_FILE_DOWNLOADING:            facadeLayout.OnMessage(message);            break;            case GUIMessage.MessageType.GUI_MSG_FILE_DOWNLOADED:              facadeLayout.OnMessage(message);            break;            case GUIMessage.MessageType.GUI_MSG_VIDEOFILE_CREATED:            AddItem(message.Label' -1);            break;            case GUIMessage.MessageType.GUI_MSG_VIDEOFILE_DELETED:            DeleteItem(message.Label);            SelectCurrentItem();            break;            case GUIMessage.MessageType.GUI_MSG_VIDEOFILE_RENAMED:            ReplaceItem(message.Label2' message.Label);            SelectCurrentItem();            break;            case GUIMessage.MessageType.GUI_MSG_VIDEODIRECTORY_CREATED:            AddItem(message.Label' -1);            break;            case GUIMessage.MessageType.GUI_MSG_VIDEODIRECTORY_DELETED:            DeleteItem(message.Label);            SelectCurrentItem();            break;            case GUIMessage.MessageType.GUI_MSG_VIDEODIRECTORY_RENAMED:            ReplaceItem(message.Label2' message.Label);            SelectCurrentItem();            break;            case GUIMessage.MessageType.GUI_MSG_SHOW_DIRECTORY:            // Make sure file view is the current window            if (VideoState.StartWindow != GetID)            {              VideoState.StartWindow = GetID;              Reset();              GUIWindowManager.ReplaceWindow(GetID);            }            _currentFolder = message.Label;            LoadDirectory(_currentFolder);            break;            case GUIMessage.MessageType.GUI_MSG_ADD_REMOVABLE_DRIVE:            if (_switchRemovableDrives)            {              _currentFolder = message.Label;              if (!Util.Utils.IsRemovable(message.Label))              {                _virtualDirectory.AddRemovableDrive(message.Label' message.Label2);              }            }            if (_removableDrivesHandlerThread != null)            {              _removableDrivesHandlerThread.Join();            }              RemovableDrivesHandler.ListRemovableDrives(_virtualDirectory.GetDirectoryExt(string.Empty));            LoadDirectory(_currentFolder);            break;            case GUIMessage.MessageType.GUI_MSG_REMOVE_REMOVABLE_DRIVE:            if (!Util.Utils.IsRemovable(message.Label))            {              _virtualDirectory.Remove(message.Label);            }            if (_currentFolder.Contains(message.Label))            {              _currentFolder = string.Empty;            }            LoadDirectory(_currentFolder);            break;            case GUIMessage.MessageType.GUI_MSG_VOLUME_INSERTED:          case GUIMessage.MessageType.GUI_MSG_VOLUME_REMOVED:            if (_currentFolder == string.Empty || _currentFolder.Substring(0' 2) == message.Label)            {              _currentFolder = string.Empty;              LoadDirectory(_currentFolder);            }            break;            case GUIMessage.MessageType.GUI_MSG_PLAY_DVD:            OnPlayDVD(message.Label' GetID);            break;            case GUIMessage.MessageType.GUI_MSG_LAYOUT_CHANGED:            FolderSetting folderSetting = new FolderSetting();            folderSetting.UpdateFolders(-1' CurrentSortAsc' (int)CurrentLayout);            break;            case GUIMessage.MessageType.GUI_MSG_REFRESH_MEDIAINFO:            SelectCurrentItem();            break;        }
Missing Default,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnShowContextMenu,The following switch statement is missing a default case: switch (dlg.SelectedId)        {          case 368: // IMDB            OnInfo(itemNo);            break;            case 208: // play            _playClicked = true;            OnClick(itemNo);            break;            case 926: // add to playlist            OnQueueItem(itemNo);            break;            case 136: // show playlist            GUIWindowManager.ActivateWindow((int)Window.WINDOW_VIDEO_PLAYLIST);            break;            case 607: // Load (only CDROM)            Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            break;            case 654: // Eject            if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)            {              Util.Utils.EjectCDROM();            }            else            {              Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));            }              LoadDirectory(string.Empty);            break;            case 341: //Play dvd            OnPlayDVD(item.Path' GetID);            break;            case 346: //Stack            _mapSettings.Stack = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 347: //Unstack            _mapSettings.Stack = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            SaveFolderSettings(_currentFolder);            break;            case 102: //Scan            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        int currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList scanNfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref scanNfoFiles);              if (_useOnlyNfoScraper)            {              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanNfoMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanNfoMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            else            {              // Try nfo files first              IMDBFetcher scanFetcher = new IMDBFetcher(this);              scanFetcher.FetchNfo(scanNfoFiles' true' false);              // Then the rest              ArrayList availablePaths = new ArrayList();              availablePaths.Add(item.Path);              IMDBFetcher.ScanIMDB(this' availablePaths' _isFuzzyMatching' true' _getActors' false);              // Send global message that movie is refreshed/scanned              GUIMessage scanMsg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);              GUIWindowManager.SendMessage(scanMsg);              LoadDirectory(_currentFolder);              facadeLayout.SelectedListItemIndex = currentIndex;            }            break;            case 1280: //Scan using nfo files            if (_doNotUseDatabase)            {              GUIDialogOK dlgOk = (GUIDialogOK)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_OK);              dlgOk.SetHeading(string.Empty);              dlgOk.SetLine(1' GUILocalizeStrings.Get(416)); // Not available              dlgOk.DoModal(GUIWindowManager.ActiveWindow);              return;            }              if (facadeLayout.Focus)            {              if (item.IsFolder)              {                if (item.Label == "..")                {                  return;                }                if (item.IsRemote)                {                  return;                }              }            }              if (!_virtualDirectory.RequestPin(item.Path))            {              return;            }                        currentIndex = facadeLayout.SelectedListItemIndex;            ArrayList nfoFiles = new ArrayList();            GetNfoFiles(item.Path' ref nfoFiles);            IMDBFetcher fetcher = new IMDBFetcher(this);            fetcher.FetchNfo(nfoFiles' true' false);            // Send global message that movie is refreshed/scanned            GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_VIDEOINFO_REFRESH' 0' 0' 0' 0' 0' null);            GUIWindowManager.SendMessage(msg);            LoadDirectory(_currentFolder);            facadeLayout.SelectedListItemIndex = currentIndex;            break;            case 830: // Reset watched status            SetMovieWatchStatus(item.Path' item.IsFolder' false);            int selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 1260: // Set watched status            SetMovieWatchStatus(item.Path' item.IsFolder' true);            selectedIndex = facadeLayout.SelectedListItemIndex;            LoadDirectory(_currentFolder' false);            UpdateButtonStates();            facadeLayout.SelectedListItemIndex = selectedIndex;            break;            case 500: // File menu            {              ShowFileMenu(false);            }            break;            case 831:            string message = string.Empty;                        if (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path))            {              if (!RemovableDriveHelper.EjectDrive(item.Path' out message))              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));                pDlgOK.SetLine(2' string.Empty);                pDlgOK.SetLine(3' message);                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }              else              {                GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);                pDlgOK.SetHeading(831);                pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));                pDlgOK.DoModal(GUIWindowManager.ActiveWindow);              }            }            else if (!RemovableDriveHelper.EjectMedia(item.Path' out message))            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));              pDlgOK.SetLine(2' string.Empty);              pDlgOK.SetLine(3' message);              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            else            {              GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);              pDlgOK.SetHeading(831);              pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));              pDlgOK.DoModal(GUIWindowManager.ActiveWindow);            }            break;            case 1204: // Play all            {              if (!_virtualDirectory.RequestPin(item.Path))              {                return;              }              OnPlayAll(item.Path);            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(_currentFolder' false);              }            }            break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path' false);              }              else              {                LoadDirectory(string.Empty' false);              }            }            break;            case 1262: // Update grabber scripts            UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            UpdateGrabberScripts(true);            break;          case 1263: // Set deault grabber script            SetDefaultGrabber();            break;          case 1984: // Refresh video thumb            Log.Debug("Thumb refresh from context menu: {0}"' item.Path);            if (Util.Utils.FileExistsInCache(item.Path))            {              string strThumbPath = Util.Utils.GetVideosThumbPathname(item.Path);                bool success = Util.VideoThumbCreator.CreateVideoThumb(item.Path' strThumbPath' true' true);              if (success)              {                Log.Debug("Refresh success!");                if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(_currentFolder))                {                  selectedIndex = facadeLayout.SelectedListItemIndex;                  LoadDirectory(_currentFolder' false);                  facadeLayout.SelectedListItemIndex = selectedIndex;                }              }            }              break;          case 2498: // Hide watched movies            Log.Debug("GUIVideoFiles: Hide watched movies");            _hideWatchedFiles = true;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 2499: // Unhide watched movies            Log.Debug("GUIVideoFiles: Unhide watched movies");            _hideWatchedFiles = false;            LoadDirectory(_currentFolder);            UpdateButtonStates();            break;          case 1995: // Create 4x4 folder.jpg            Log.Debug("Create folder.jpg from context menu: {0}"' item.Path);            CreateFolderThumb(item' true);            break;          case 1264: // Get media info (refresh mediainfo and duration)            RefreshMediaInfo(item);            break;            case 2160: // Update mediainfo in all files in the folder            UpdateMediaInfoInFolder(item);            break;            case 2161: // Abort update mediainfo thread in all files in the folder            if (_refreshMediaInfoThread.IsAlive)            {              _refreshMediaInfoThreadAbort = true;            }            break;        }
Missing Default,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,OnPlayAll,The following switch statement is missing a default case: switch (selectedOption)        {          //          // ****** Watch out for fallthrough of empty cases if reordering CASE *******          //          case 0: // By name == 103          case 103:            AddToPlayList(tmpPlayList' playFiles.ToArray());            List<PlayListItem> sortedPlayListItems = new List<PlayListItem>();            sortedPlayListItems.AddRange(tmpPlayList);            sortedPlayListItems.Sort((item1' item2) => StringLogicalComparer.Compare(item1.Description' item2.Description));            tmpPlayList.Clear();              foreach (PlayListItem playListItem in sortedPlayListItems)            {              tmpPlayList.Add(playListItem);            }              break;            case 1: // By date (date modified) == 104          case 104:            IOrderedEnumerable<object> sortedPlayList = playFiles.ToArray().OrderBy(fn => new FileInfo((string)fn).LastWriteTime);            AddToPlayList(tmpPlayList' sortedPlayList);            break;            case 2: // Shuffle == 191          case 191:            AddToPlayList(tmpPlayList' playFiles.ToArray());            tmpPlayList.Shuffle();            break;        }
Missing Default,MediaPortal.GUI.Video,GUIVideoFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoFiles.cs,GUIWindowManager_OnNewMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_AUTOPLAY_VOLUME:            if (message.Param1 == (int)Ripper.AutoPlay.MediaType.VIDEO)            {              if (message.Param2 == (int)Ripper.AutoPlay.MediaSubType.DVD)                OnPlayDVD(message.Label' GetID);                if (message.Param2 == (int)Ripper.AutoPlay.MediaSubType.BLURAY)              {                OnPlayBD(message.Label' GetID);              }                else if (message.Param2 == (int)Ripper.AutoPlay.MediaSubType.VCD ||                       message.Param2 == (int)Ripper.AutoPlay.MediaSubType.FILES)                OnPlayFiles((System.Collections.ArrayList)message.Object);            }            break;            case GUIMessage.MessageType.GUI_MSG_VOLUME_REMOVED:            if (g_Player.Playing && g_Player.IsVideo &&                message.Label.Equals(g_Player.CurrentFile.Substring(0' 2)' StringComparison.InvariantCultureIgnoreCase))            {              if (!File.Exists(g_Player.CurrentFile))              {                Log.Info("GUIVideoFiles: Stop since media is ejected");                g_Player.Stop();                _playlistPlayer.GetPlaylist(PlayListType.PLAYLIST_VIDEO_TEMP).Clear();                _playlistPlayer.GetPlaylist(PlayListType.PLAYLIST_VIDEO).Clear();              }              else              {                return;              }            }              if (GUIWindowManager.ActiveWindow == GetID)            {              if (Util.Utils.IsDVD(_currentFolder))              {                _currentFolder = string.Empty;                LoadDirectory(_currentFolder);              }            }            break;            case GUIMessage.MessageType.GUI_MSG_ONRESUME:            using (Settings xmlreader = new MPSettings())            {              if (!xmlreader.GetValueAsBool("general"' "showlastactivemodule"' false))              {                _currentFolder = string.Empty;              }            }              Log.Debug("{0}:{1}"' SerializeName' message.Message);            break;        }
Missing Default,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)        {          case Action.ActionType.ACTION_PLAY:          case Action.ActionType.ACTION_MUSIC_PLAY:            {              PlayMovie();              return;            }        }
Missing Default,MediaPortal.GUI.Video,GUIVideoInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoInfo.cs,OnShowContextMenu,The following switch statement is missing a default case: switch (dlg.SelectedId)        {          case 1297: // Refresh actor info            IMDBActor actor = VideoDatabase.GetActorInfo(listActors.SelectedListItem.ItemId);            OnVideoArtistInfo(actor' true);            break;          case 1298: // Refresh fanart            OnFanartRefresh();            break;          case 1335: // Refresh cover            OnCoverRefresh();            break;          case 1263: // Set deault grabber script            GUIVideoFiles.SetDefaultGrabber();            break;          case 1262: // Update grabber scripts            GUIVideoFiles.UpdateGrabberScripts(false);            break;          case 1307: // Update internal grabber scripts            GUIVideoFiles.UpdateGrabberScripts(true);            break;          case 1304: // Create nfo file            OnCreateNfoFile();            break;          }
Missing Default,MediaPortal.GUI.Video,GUIVideoPlayList,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoPlaylist.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)        {          case Action.ActionType.ACTION_SHOW_PLAYLIST:            GUIWindowManager.ShowPreviousWindow();            return;          case Action.ActionType.ACTION_MOVE_SELECTED_ITEM_UP:            MovePlayListItemUp();            break;          case Action.ActionType.ACTION_MOVE_SELECTED_ITEM_DOWN:            MovePlayListItemDown();            break;          case Action.ActionType.ACTION_DELETE_SELECTED_ITEM:            DeletePlayListItem();            break;            // Handle case where playlist has been stopped and we receive a player action.            // This allows us to restart the playback proccess...          case Action.ActionType.ACTION_MUSIC_PLAY:          case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_PAUSE:          case Action.ActionType.ACTION_PREV_ITEM:            if (playlistPlayer.CurrentPlaylistType != PlayListType.PLAYLIST_VIDEO)            {              playlistPlayer.CurrentPlaylistType = PlayListType.PLAYLIST_VIDEO;              if (g_Player.CurrentFile == "")              {                PlayList playList = playlistPlayer.GetPlaylist(PlayListType.PLAYLIST_VIDEO);                if (playList != null && playList.Count > 0)                {                  playlistPlayer.Play(0);                  UpdateButtonStates();                }              }            }            break;        }
Missing Default,MediaPortal.GUI.Video,GUIVideoPlayList,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoPlaylist.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_PLAYBACK_STOPPED:            {              for (int i = 0; i < facadeLayout.Count; ++i)              {                GUIListItem item = facadeLayout[i];                if (item != null && item.Selected)                {                  item.Selected = false;                  break;                }              }                UpdateButtonStates();            }            break;            case GUIMessage.MessageType.GUI_MSG_PLAYLIST_CHANGED:            {              //	global playlist changed outside playlist window              LoadDirectory(string.Empty);                if (previousControlId == facadeLayout.GetID && facadeLayout.Count <= 0)              {                previousControlId = btnLayouts.GetID;                GUIControl.FocusControl(GetID' previousControlId);              }              SelectCurrentVideo();            }            break;        }
Missing Default,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following switch statement is missing a default case: switch (dlg.SelectedId)         {           case 368: // IMDB             OnVideoArtistInfo(actor);             break;           case 926: //add to playlist             OnQueueItem(itemNo);             break;           case 1240: // Protected content           case 1241: // Protected content             OnContentLock();             break;           case 1295: // Search actor           case 1268: // Search director             OnSearchActor();             break;           case 1262: // Update grabber scripts             GUIVideoFiles.UpdateGrabberScripts(false);             break;           case 1307: // Update internal grabber scripts             GUIVideoFiles.UpdateGrabberScripts(true);             break;         }
Missing Default,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnShowContextMenu,The following switch statement is missing a default case: switch (dlg.SelectedId)       {         case 118: // Rename title           OnRenameTitle(itemNo);           break;                  case 925: // Delete           OnDeleteItem(item);           break;                  case 368: // IMDB           OnInfo(itemNo);           break;                  case 208: // play           _playClicked = true; // Override movieinfo before play           OnClick(itemNo);           break;                  case 926: //add to playlist           OnQueueItem(itemNo);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;                  case 1293: //Search movie           OnSearchMovie();           break;                  case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;          case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;                  case 1263: // Set default grabber           GUIVideoFiles.SetDefaultGrabber();           break;                  case 1333: // Add Movie to Collection           OnAddToCollection(movie' itemNo);           break;          case 1334: // Remove from Collection           OnRemoveFromCollection(movie' itemNo);           break;          case 1337: // Add New Collection           OnAddCollection();           break;          case 1270: // Add to user group           OnAddToUserGroup(movie' itemNo);           break;                  case 1271: // Remove from user group           OnRemoveFromUserGroup(movie' itemNo);           break;                  case 1272: // Add user group           OnAddUserGroup();           break;                  case 1308: // Rename sort title           OnChangeSortTitle(movie' itemNo);           break;                  case 1304: // Make nfo file           OnCreateNfoFile(movie.ID);           break;                  case 1306: // Make nfo files           OnCreateNfoFiles();           break;                  case 830: // Reset watched status           movie.Watched = 0;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' false' 0);           VideoDatabase.SetMovieStopTime(movie.ID' 0);           VideoDatabase.SetMovieWatchedCount(movie.ID' 0);           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = false;           LoadDirectory(_currentFolder);           break;          case 1260: // Set watched status           movie.Watched = 1;           VideoDatabase.SetWatched(movie);           VideoDatabase.SetMovieWatchedStatus(movie.ID' true' 100);           int iPercent = 100;           int iTimesWatched = 0;           VideoDatabase.GetmovieWatchedStatus(movie.ID' out iPercent' out iTimesWatched);           if (iTimesWatched <= 0)           {             VideoDatabase.MovieWatchedCountIncrease(movie.ID);           }           // Update groups with rules           VideoDatabase.UpdateUserGroupWithRule(movie.ID);           item.IsPlayed = true;           LoadDirectory(_currentFolder);           break;       }
Missing Default,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,DialogProtectedContent,The following switch statement is missing a default case: switch (dlg.SelectedId)       {         case 926: //add to playlist           OnQueueItem(facadeLayout.SelectedListItemIndex);           break;         case 1240: //Lock content         case 1241: //Unlock content           OnContentLock();           break;         case 1293: //Search movie           OnSearchMovie();           break;         case 1295: //Search actor         case 1268: // Search director           OnSearchActor();           break;         case 1263: // Set deault grabber script           GUIVideoFiles.SetDefaultGrabber();           break;         case 1262: // Update grabber scripts           GUIVideoFiles.UpdateGrabberScripts(false);           break;         case 1307: // Update internal grabber scripts           GUIVideoFiles.UpdateGrabberScripts(true);           break;         case 1272: // Add user group           OnAddUserGroup();           break;         case 1273: // Remove user group           GUIListItem item = facadeLayout.SelectedListItem;            if (item == null)           {             return;           }            OnRemoveUserGroup(item.Label);           break;         case 1337: // Add New Collection           OnAddCollection();           break;         case 1338: // Remove Collection           GUIListItem selitem = facadeLayout.SelectedListItem;            if (selitem == null)           {             return;           }            OnRemoveCollection(selitem.Label);           break;       }
Missing Default,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnDeleteItem,The following switch statement is missing a default case: switch (dlg.SelectedId)         {           case 432:             deleteFile = false;             break;           case 992:             deleteFile = true;             break;         }
Missing Default,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,SetMovieListGroupedBy,The following switch statement is missing a default case: switch (view)       {         case "genre":           strMovies = VideoDatabase.GetMovieTitlesByGenre(item.Label' whereClause);           break;                case "user groups":         case "user groups only":           int grpId = VideoDatabase.GetUserGroupId(item.Label);           groupDescription = VideoDatabase.GetUserGroupDescriptionById(grpId);           strMovies = VideoDatabase.GetMovieTitlesByUserGroup(grpId' whereClause);           if (!string.IsNullOrEmpty(groupDescription))           {             groupDescription += ("\n\n" + GUILocalizeStrings.Get(342) + ":\n"); // groupDescription + Movies           }           else           {             groupDescription = (GUILocalizeStrings.Get(342) + ":\n"); // Movies           }           strMovies = groupDescription + strMovies;           break;                case "movie collections":         case "movie collections only":           int mcolId = VideoDatabase.GetCollectionId(item.Label);           collectionDescription = VideoDatabase.GetCollectionDescriptionById(mcolId);            if (!string.IsNullOrEmpty(collectionDescription))           {             strMovies = collectionDescription;           }           else           {             collectionDescription = (GUILocalizeStrings.Get(342) + ":\n"); // Movies             strMovies = VideoDatabase.GetMovieTitlesByCollection(mcolId' whereClause);             strMovies = collectionDescription + strMovies;           }           break;          case "actor":           if (movie != null)           {             strMovies = VideoDatabase.GetMovieTitlesByActor(movie.ActorID' whereClause);           }           break;          case "director":           if (movie != null)           {             strMovies = VideoDatabase.GetMovieTitlesByDirector(movie.ActorID' whereClause);           }           break;                  case "year":           strMovies = VideoDatabase.GetMovieTitlesByYear(item.Label' whereClause);           break;                  case "actorindex":           strMovies = VideoDatabase.GetFieldDataByIndex("strActor"' item.Label' whereClause);           break;                case "directorindex":           strMovies = VideoDatabase.GetFieldDataByIndex("strActorDirector"' item.Label' whereClause);           break;                  case "titleindex":           strMovies = VideoDatabase.GetFieldDataByIndex("strTitle"' item.Label' whereClause);           break;       }
Missing Default,MediaPortal.GUI.Video,GUIVideoTitle,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\GUIVideoTitle.cs,OnSearchMovie,The following switch statement is missing a default case: switch (dlg.SelectedLabel)       {         case 0:           _searchMovieDbField = "strTitle";           break;         case 1:           _searchMovieDbField = "strActorDirector";           break;         case 2:           _searchMovieDbField = "strActor";           break;         case 3:           _searchMovieDbField = "strRole";           break;         case 4:           _searchMovieDbField = "iYear";           break;         case 5:           _searchMovieDbField = "mpaa";           break;       }
Missing Default,MediaPortal.GUI.Video,MatroskaTagHandler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\MatroskaTagLib.cs,Fetch,The following switch statement is missing a default case: switch (tagName)            {              case "TITLE":                info.title = simpleTag.ChildNodes[1].InnerText;                break;              case "COMMENT":                info.description = simpleTag.ChildNodes[1].InnerText;                break;              case "GENRE":                info.genre = simpleTag.ChildNodes[1].InnerText;                break;              case "CHANNEL_NAME":                info.channelName = simpleTag.ChildNodes[1].InnerText;                break;              case "EPISODE_NAME":                info.episodeName = simpleTag.ChildNodes[1].InnerText;                break;              case "START_TIME":                info.startTime = new DateTime(long.Parse(simpleTag.ChildNodes[1].InnerText));                break;              case "END_TIME":                info.endTime = new DateTime(long.Parse(simpleTag.ChildNodes[1].InnerText));                break;            }
Missing Default,MediaPortal.GUI.Video,VideoFolderWatcherHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoFolderWatcherHelper.cs,ProcessEvents,The following switch statement is missing a default case: switch (currentEvent.Type)                  {                      #region file events handlers                      // Create video                    case FolderWatcherEvent.EventType.Create:                    case FolderWatcherEvent.EventType.Change:                    {                      AddVideo(currentEvent.FileName);                        /*if (!_useOnlyNfoScraper)                      {                        foreach (string mScanShare in m_ScanShares)                        {                          if (currentEvent.FileName.Contains(mScanShare))                          {                            VideoDatabase.AddMovieQueueFile(currentEvent.FileName);                          }                        }                      }*/                      break;                    }                      // Delete video                    case FolderWatcherEvent.EventType.Delete:                      {                        /*if (!movieEventFired)                        {                          foreach (string mScanShare in m_ScanShares)                          {                            if (currentEvent.FileName.Contains(mScanShare))                            {                              movieEventFired = true;                            }                          }                        }*/                        DeleteVideo(currentEvent.FileName);                        break;                      }                      // Rename video                    case FolderWatcherEvent.EventType.Rename:                      {                        RenameVideo(currentEvent.OldFileName' currentEvent.FileName);                        break;                      }                        #endregion                      #region directory events handlers                      // Create directory                    case FolderWatcherEvent.EventType.CreateDirectory:                      {                        AddVideoDirectory(currentEvent.FileName);                        break;                      }                      // Delete directory                    case FolderWatcherEvent.EventType.DeleteDirectory:                      {                        /*foreach (string mScanShare in m_ScanShares)                        {                          if (!movieEventFired && currentEvent.FileName.Contains(mScanShare))                          {                            movieEventFired = true;                          }                        }*/                          DeleteVideoDirectory(currentEvent.FileName);                        break;                      }                      // Rename directory                    case FolderWatcherEvent.EventType.RenameDirectory:                      {                        /*foreach (string mScanShare in m_ScanShares)                        {                          if (!movieEventFired && currentEvent.FileName.Contains(mScanShare))                          {                            movieEventFired = true;                          }                        }*/                          RenameVideoDirectory(currentEvent.OldFileName' currentEvent.FileName);                        break;                      }                        #endregion                    }
Missing Default,MediaPortal.GUI.Video,VideoSort,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIVideos\VideoSort.cs,Compare,The following switch statement is missing a default case: switch (CurrentSortMethod)        {          case SortMethod.Year:            {              if (SortAscending)              {                if (item1.IsFolder && item2.IsFolder)                {                  return String.Compare(item1.Label' item2.Label' true);                }                if (item1.Year > item2.Year)                {                  return 1;                }                if (item1.Year < item2.Year)                {                  return -1;                }              }              else              {                if (item1.IsFolder && item2.IsFolder)                {                  return String.Compare(item2.Label' item1.Label' true);                }                if (item1.Year > item2.Year)                {                  return -1;                }                if (item1.Year < item2.Year)                {                  return 1;                }              }              return 0;            }          case SortMethod.Rating:            {              if (SortAscending)              {                if (item1.Rating > item2.Rating)                {                  return 1;                }                if (item1.Rating < item2.Rating)                {                  return -1;                }              }              else              {                if (item1.Rating > item2.Rating)                {                  return -1;                }                if (item1.Rating < item2.Rating)                {                  return 1;                }              }              return 0;            }            case SortMethod.Name:          case SortMethod.NameAll:          case SortMethod.Name_With_Duration:              IMDBMovie movie1 = item1.AlbumInfoTag as IMDBMovie;            IMDBMovie movie2 = item2.AlbumInfoTag as IMDBMovie;              if (SortAscending)            {              if (!UseSortTitle)              {                return Util.StringLogicalComparer.Compare(item1.Label' item2.Label);              }              else              {                if (movie1 != null && movie2 != null && movie1.ID > 0 && movie2.ID > 0)                {                  return Util.StringLogicalComparer.Compare(movie1.SortTitle' movie2.SortTitle);                }                else                {                  return Util.StringLogicalComparer.Compare(item1.Label' item2.Label);                }              }            }            else            {              if (!UseSortTitle)              {                return Util.StringLogicalComparer.Compare(item2.Label' item1.Label);              }              else              {                if (movie1 != null && movie2 != null && movie1.ID > 0 && movie2.ID > 0)                {                  return Util.StringLogicalComparer.Compare(movie2.SortTitle' movie1.SortTitle);                }                else                {                  return Util.StringLogicalComparer.Compare(item2.Label' item1.Label);                }              }            }            case SortMethod.Date: // Only recently added/watched->database view + date used for sort for title              if (item1.FileInfo == null)            {              if (!this.TryGetFileInfo(ref item1))              {                return -1;              }            }              if (item2.FileInfo == null)            {              if (!this.TryGetFileInfo(ref item2))              {                return -1;              }            }              item1.Label2 = item1.FileInfo.CreationTime.ToShortDateString() + " " +                            item1.FileInfo.CreationTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat);            item2.Label2 = item2.FileInfo.CreationTime.ToShortDateString() + " " +                            item2.FileInfo.CreationTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat);              if (item1.Label2 == string.Empty || item2.Label2 == string.Empty)            {              return -1;            }              if (SortAscending)            {              return DateTime.Compare(Convert.ToDateTime(item1.Label2)' Convert.ToDateTime(item2.Label2));            }            else            {              return DateTime.Compare(Convert.ToDateTime(item2.Label2)' Convert.ToDateTime(item1.Label2));            }                      case SortMethod.Label:            if (SortAscending)            {              return Util.StringLogicalComparer.Compare(item1.DVDLabel' item2.DVDLabel);            }            else            {              return Util.StringLogicalComparer.Compare(item2.DVDLabel' item1.DVDLabel);            }          case SortMethod.Size:            if (item1.FileInfo == null || item2.FileInfo == null)            {              if (SortAscending)              {                return (int)(item1.Duration - item2.Duration);              }              else              {                return (int)(item2.Duration - item1.Duration);              }            }            else            {              if (SortAscending)              {                 long compare = (item1.FileInfo.Length - item2.FileInfo.Length);                 return compare == 0 ? 0 : compare < 0 ? -1 : 1;              }              else              {                long compare = (item2.FileInfo.Length - item1.FileInfo.Length);                return compare == 0 ? 0 : compare < 0 ? -1 : 1;              }            }            case SortMethod.Created:              if (item1.FileInfo == null)            {              if (!this.TryGetFileInfo(ref item1))              {                return -1;              }            }              if (item2.FileInfo == null)            {              if (!this.TryGetFileInfo(ref item2))              {                return -1;              }            }              item1.Label2 = item1.FileInfo.CreationTime.ToShortDateString() + " " +                           item1.FileInfo.CreationTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat);            item2.Label2 = item2.FileInfo.CreationTime.ToShortDateString() + " " +                           item2.FileInfo.CreationTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat);              if (SortAscending)            {              return DateTime.Compare(item1.FileInfo.CreationTime' item2.FileInfo.CreationTime);            }            else            {              return DateTime.Compare(item2.FileInfo.CreationTime' item1.FileInfo.CreationTime);            }                    case SortMethod.Modified:                      if (item1.FileInfo == null)            {              if (!this.TryGetFileInfo(ref item1))              {                return -1;              }            }              if (item2.FileInfo == null)            {              if (!this.TryGetFileInfo(ref item2))              {                return -1;              }            }              item1.Label2 = item1.FileInfo.ModificationTime.ToShortDateString() + " " +                             item1.FileInfo.ModificationTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat);            item2.Label2 = item2.FileInfo.ModificationTime.ToShortDateString() + " " +                             item2.FileInfo.ModificationTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat);                        if (SortAscending)            {              return DateTime.Compare(item1.FileInfo.ModificationTime' item2.FileInfo.ModificationTime);            }            else            {              return DateTime.Compare(item2.FileInfo.ModificationTime' item1.FileInfo.ModificationTime);            }                    case SortMethod.Watched:            {              int ret = 0;                            if (item1.IsPlayed && !item2.IsPlayed)              {                ret = -1;                if (!SortAscending) ret = 1;              }              else if (!item1.IsPlayed && item2.IsPlayed)              {                ret = 1;                if (!SortAscending) ret = -1;              }              else              {                movie1 = item1.AlbumInfoTag as IMDBMovie;                movie2 = item2.AlbumInfoTag as IMDBMovie;                  if (SortAscending)                {                  if (!UseSortTitle)                  {                    return Util.StringLogicalComparer.Compare(item1.Label' item2.Label);                  }                  else                  {                    if (movie1 != null && movie2 != null && movie1.ID > 0 && movie2.ID > 0)                    {                      return Util.StringLogicalComparer.Compare(movie1.SortTitle' movie2.SortTitle);                    }                    else                    {                      return Util.StringLogicalComparer.Compare(item1.Label' item2.Label);                    }                  }                }                else                {                  if (!UseSortTitle)                  {                    return Util.StringLogicalComparer.Compare(item2.Label' item1.Label);                  }                  else                  {                    if (movie1 != null && movie2 != null && movie1.ID > 0 && movie2.ID > 0)                    {                      return Util.StringLogicalComparer.Compare(movie2.SortTitle' movie1.SortTitle);                    }                    else                    {                      return Util.StringLogicalComparer.Compare(item2.Label' item1.Label);                    }                  }                }              }              return ret;            }        }
