Implementation smell,Namespace,Class,File,Method,Description
Long Method,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,FileItemMC,The method has 142 lines of code.
Long Method,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,ShowFileMenu,The method has 183 lines of code.
Long Method,MediaPortal.Dialogs,GUIDialogSelect,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogSelect.cs,OnMessage,The method has 114 lines of code.
Complex Method,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,OnMessage,Cyclomatic complexity of the method is 12
Complex Method,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,FileItemMC,Cyclomatic complexity of the method is 17
Complex Method,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,MoveMovieChildFiles,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,CopyMovieChildFiles,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,ShowFileMenu,Cyclomatic complexity of the method is 29
Complex Method,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,RenameRecording,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,OnDeleteItem,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,OnDeleteReadOnlyItem,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.Dialogs,GUIDialogSelect,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogSelect.cs,OnMessage,Cyclomatic complexity of the method is 22
Complex Method,MediaPortal.Dialogs,GUIDialogSelect,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogSelect.cs,Compare,Cyclomatic complexity of the method is 11
Complex Method,MediaPortal.Dialogs,GUIDialogSetRating,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogSetRating.cs,OnClicked,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.Dialogs,GUIResumeDialog,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\Helper\GUIResumeDialog.cs,ShowResumeDialog,Cyclomatic complexity of the method is 8
Long Identifier,MediaPortal.Dialogs,GUIDialogSelect,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogSelect.cs,,The length of the parameter m_strItemSelectedLabelTextNoFocus is 33.
Long Statement,MediaPortal.Dialogs,VirtualKeyboard,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogVirtualKeyboard.cs,Reset,The length of the statement  "      // Allocate keyboard resources during a Reset().  Withou this' the caller may override skin properties following the Reset() " is 124.
Long Statement,MediaPortal.Dialogs,VirtualKeyboard,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogVirtualKeyboard.cs,Reset,The length of the statement  "      // and the subsequent call to DoModal() will AllocResources() and clobber the callers overrides (AllocResources() is reentrant). " is 128.
Complex Conditional,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,FileItemMC,The conditional expression  "!m_bButtonYes && !m_bButtonNo && !m_bAlways && !m_bNever && !m_bCanceled"  is complex.
Empty Catch Block,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,MoveMovieChildFiles,The method has an empty catch block.
Empty Catch Block,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,MoveMovieChildFiles,The method has an empty catch block.
Empty Catch Block,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,CopyMovieChildFiles,The method has an empty catch block.
Empty Catch Block,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,CopyMovieChildFiles,The method has an empty catch block.
Empty Catch Block,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,RenameRecording,The method has an empty catch block.
Empty Catch Block,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,RenameRecording,The method has an empty catch block.
Magic Number,MediaPortal.Dialogs,GUIDialogMenu,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogMenu.cs,Process,The following statement contains a magic number: ts.TotalMilliseconds >= 1000
Magic Number,MediaPortal.Dialogs,GUIDialogMenu,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogMenu.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:            {              lblHeading.Label = string.Empty;              if (lblHeading2 != null)              {                lblHeading2.Label = string.Empty;              }                base.OnMessage(message);              return true;            }            case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);                listView.Clear();              for (int i = 0; i < listItems.Count; i++)              {                GUIListItem pItem = (GUIListItem)listItems[i];                listView.Add(pItem);              }                if (selectedItemIndex >= 0)              {                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_ITEM_SELECT' GetID' 0' listView.GetID'                                                selectedItemIndex' 0' null);                OnMessage(msg);              }              selectedItemIndex = -1;              selectedId = -1;              string wszText = String.Format("{0} {1}"' listItems.Count' GUILocalizeStrings.Get(127));            }            return true;        }
Magic Number,MediaPortal.Dialogs,GUIDialogOldSkin,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogOldSkin.cs,DoModal,The following statement contains a magic number: chkIgnore.Visible = nagCount > 4;
Magic Number,MediaPortal.Dialogs,GUIDialogPlayStop,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogPlayStop.cs,SetHeading,The following statement contains a magic number: SetLine(2' string.Empty);
Magic Number,MediaPortal.Dialogs,GUIDialogPlayStop,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogPlayStop.cs,SetHeading,The following statement contains a magic number: SetLine(3' string.Empty);
Magic Number,MediaPortal.Dialogs,GUIDialogPlayStop,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogPlayStop.cs,SetHeading,The following statement contains a magic number: SetLine(4' string.Empty);
Magic Number,MediaPortal.Dialogs,GUIDialogDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogDateTime.cs,OnClicked,The following statement contains a magic number: spinStartDay.SetRange(1' 29);
Magic Number,MediaPortal.Dialogs,GUIDialogDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogDateTime.cs,OnClicked,The following statement contains a magic number: iMonth == 2 && DateTime.IsLeapYear(iYear)
Magic Number,MediaPortal.Dialogs,GUIDialogDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogDateTime.cs,OnClicked,The following statement contains a magic number: spinEndDay.SetRange(1' 29);
Magic Number,MediaPortal.Dialogs,GUIDialogDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogDateTime.cs,OnClicked,The following statement contains a magic number: iMonth == 2 && DateTime.IsLeapYear(iYear)
Magic Number,MediaPortal.Dialogs,GUIDialogDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogDateTime.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              _confirmed = false;              spinStartHour.SetRange(0' 23);              spinStartHour.Value = startDateTime.Hour;                spinStartMinute.SetRange(0' 59);              spinStartMinute.Value = startDateTime.Minute;                if (DateTime.IsLeapYear(startDateTime.Year) && startDateTime.Month == 2)              {                spinStartDay.SetRange(1' 29);              }              else              {                spinStartDay.SetRange(1' months[startDateTime.Month]);              }              spinStartDay.Value = startDateTime.Day;                spinStartMonth.SetRange(1' 12);              spinStartMonth.Value = startDateTime.Month;                spinStartYear.Value = startDateTime.Year;              spinStartYear.SetRange(2004' 2010);                  spinChannel.Reset();              int i = 0' iSel = 0;              foreach (string strLabel in itemList)              {                spinChannel.AddLabel(strLabel' 0);                if (channel == strLabel)                {                  iSel = i;                }                i++;              }              if (iSel >= 0)              {                SelectItemControl(GetID' spinChannel.GetID' iSel);              }                spinEndHour.SetRange(0' 23);              spinEndHour.Value = endDateTime.Hour;                spinEndMinute.SetRange(0' 59);              spinEndMinute.Value = endDateTime.Minute;                if (DateTime.IsLeapYear(endDateTime.Year) && endDateTime.Month == 2)              {                spinEndDay.SetRange(1' 29);              }              else              {                spinEndDay.SetRange(1' months[endDateTime.Month]);              }              spinEndDay.Value = endDateTime.Day;                  spinEndMonth.SetRange(1' 12);              spinEndMonth.Value = endDateTime.Month;                  spinEndYear.Value = endDateTime.Year;              spinEndYear.SetRange(2004' 2010);                spinStartHour.Disabled = !enableEditStartTime;              spinStartMinute.Disabled = !enableEditStartTime;              spinStartDay.Disabled = !enableEditStartTime;              spinStartMonth.Disabled = !enableEditStartTime;              spinStartYear.Disabled = !enableEditStartTime;                spinChannel.Disabled = !enableEditChannel;            }            return true;        }
Magic Number,MediaPortal.Dialogs,GUIDialogDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogDateTime.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              _confirmed = false;              spinStartHour.SetRange(0' 23);              spinStartHour.Value = startDateTime.Hour;                spinStartMinute.SetRange(0' 59);              spinStartMinute.Value = startDateTime.Minute;                if (DateTime.IsLeapYear(startDateTime.Year) && startDateTime.Month == 2)              {                spinStartDay.SetRange(1' 29);              }              else              {                spinStartDay.SetRange(1' months[startDateTime.Month]);              }              spinStartDay.Value = startDateTime.Day;                spinStartMonth.SetRange(1' 12);              spinStartMonth.Value = startDateTime.Month;                spinStartYear.Value = startDateTime.Year;              spinStartYear.SetRange(2004' 2010);                  spinChannel.Reset();              int i = 0' iSel = 0;              foreach (string strLabel in itemList)              {                spinChannel.AddLabel(strLabel' 0);                if (channel == strLabel)                {                  iSel = i;                }                i++;              }              if (iSel >= 0)              {                SelectItemControl(GetID' spinChannel.GetID' iSel);              }                spinEndHour.SetRange(0' 23);              spinEndHour.Value = endDateTime.Hour;                spinEndMinute.SetRange(0' 59);              spinEndMinute.Value = endDateTime.Minute;                if (DateTime.IsLeapYear(endDateTime.Year) && endDateTime.Month == 2)              {                spinEndDay.SetRange(1' 29);              }              else              {                spinEndDay.SetRange(1' months[endDateTime.Month]);              }              spinEndDay.Value = endDateTime.Day;                  spinEndMonth.SetRange(1' 12);              spinEndMonth.Value = endDateTime.Month;                  spinEndYear.Value = endDateTime.Year;              spinEndYear.SetRange(2004' 2010);                spinStartHour.Disabled = !enableEditStartTime;              spinStartMinute.Disabled = !enableEditStartTime;              spinStartDay.Disabled = !enableEditStartTime;              spinStartMonth.Disabled = !enableEditStartTime;              spinStartYear.Disabled = !enableEditStartTime;                spinChannel.Disabled = !enableEditChannel;            }            return true;        }
Magic Number,MediaPortal.Dialogs,GUIDialogDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogDateTime.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              _confirmed = false;              spinStartHour.SetRange(0' 23);              spinStartHour.Value = startDateTime.Hour;                spinStartMinute.SetRange(0' 59);              spinStartMinute.Value = startDateTime.Minute;                if (DateTime.IsLeapYear(startDateTime.Year) && startDateTime.Month == 2)              {                spinStartDay.SetRange(1' 29);              }              else              {                spinStartDay.SetRange(1' months[startDateTime.Month]);              }              spinStartDay.Value = startDateTime.Day;                spinStartMonth.SetRange(1' 12);              spinStartMonth.Value = startDateTime.Month;                spinStartYear.Value = startDateTime.Year;              spinStartYear.SetRange(2004' 2010);                  spinChannel.Reset();              int i = 0' iSel = 0;              foreach (string strLabel in itemList)              {                spinChannel.AddLabel(strLabel' 0);                if (channel == strLabel)                {                  iSel = i;                }                i++;              }              if (iSel >= 0)              {                SelectItemControl(GetID' spinChannel.GetID' iSel);              }                spinEndHour.SetRange(0' 23);              spinEndHour.Value = endDateTime.Hour;                spinEndMinute.SetRange(0' 59);              spinEndMinute.Value = endDateTime.Minute;                if (DateTime.IsLeapYear(endDateTime.Year) && endDateTime.Month == 2)              {                spinEndDay.SetRange(1' 29);              }              else              {                spinEndDay.SetRange(1' months[endDateTime.Month]);              }              spinEndDay.Value = endDateTime.Day;                  spinEndMonth.SetRange(1' 12);              spinEndMonth.Value = endDateTime.Month;                  spinEndYear.Value = endDateTime.Year;              spinEndYear.SetRange(2004' 2010);                spinStartHour.Disabled = !enableEditStartTime;              spinStartMinute.Disabled = !enableEditStartTime;              spinStartDay.Disabled = !enableEditStartTime;              spinStartMonth.Disabled = !enableEditStartTime;              spinStartYear.Disabled = !enableEditStartTime;                spinChannel.Disabled = !enableEditChannel;            }            return true;        }
Magic Number,MediaPortal.Dialogs,GUIDialogDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogDateTime.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              _confirmed = false;              spinStartHour.SetRange(0' 23);              spinStartHour.Value = startDateTime.Hour;                spinStartMinute.SetRange(0' 59);              spinStartMinute.Value = startDateTime.Minute;                if (DateTime.IsLeapYear(startDateTime.Year) && startDateTime.Month == 2)              {                spinStartDay.SetRange(1' 29);              }              else              {                spinStartDay.SetRange(1' months[startDateTime.Month]);              }              spinStartDay.Value = startDateTime.Day;                spinStartMonth.SetRange(1' 12);              spinStartMonth.Value = startDateTime.Month;                spinStartYear.Value = startDateTime.Year;              spinStartYear.SetRange(2004' 2010);                  spinChannel.Reset();              int i = 0' iSel = 0;              foreach (string strLabel in itemList)              {                spinChannel.AddLabel(strLabel' 0);                if (channel == strLabel)                {                  iSel = i;                }                i++;              }              if (iSel >= 0)              {                SelectItemControl(GetID' spinChannel.GetID' iSel);              }                spinEndHour.SetRange(0' 23);              spinEndHour.Value = endDateTime.Hour;                spinEndMinute.SetRange(0' 59);              spinEndMinute.Value = endDateTime.Minute;                if (DateTime.IsLeapYear(endDateTime.Year) && endDateTime.Month == 2)              {                spinEndDay.SetRange(1' 29);              }              else              {                spinEndDay.SetRange(1' months[endDateTime.Month]);              }              spinEndDay.Value = endDateTime.Day;                  spinEndMonth.SetRange(1' 12);              spinEndMonth.Value = endDateTime.Month;                  spinEndYear.Value = endDateTime.Year;              spinEndYear.SetRange(2004' 2010);                spinStartHour.Disabled = !enableEditStartTime;              spinStartMinute.Disabled = !enableEditStartTime;              spinStartDay.Disabled = !enableEditStartTime;              spinStartMonth.Disabled = !enableEditStartTime;              spinStartYear.Disabled = !enableEditStartTime;                spinChannel.Disabled = !enableEditChannel;            }            return true;        }
Magic Number,MediaPortal.Dialogs,GUIDialogDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogDateTime.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              _confirmed = false;              spinStartHour.SetRange(0' 23);              spinStartHour.Value = startDateTime.Hour;                spinStartMinute.SetRange(0' 59);              spinStartMinute.Value = startDateTime.Minute;                if (DateTime.IsLeapYear(startDateTime.Year) && startDateTime.Month == 2)              {                spinStartDay.SetRange(1' 29);              }              else              {                spinStartDay.SetRange(1' months[startDateTime.Month]);              }              spinStartDay.Value = startDateTime.Day;                spinStartMonth.SetRange(1' 12);              spinStartMonth.Value = startDateTime.Month;                spinStartYear.Value = startDateTime.Year;              spinStartYear.SetRange(2004' 2010);                  spinChannel.Reset();              int i = 0' iSel = 0;              foreach (string strLabel in itemList)              {                spinChannel.AddLabel(strLabel' 0);                if (channel == strLabel)                {                  iSel = i;                }                i++;              }              if (iSel >= 0)              {                SelectItemControl(GetID' spinChannel.GetID' iSel);              }                spinEndHour.SetRange(0' 23);              spinEndHour.Value = endDateTime.Hour;                spinEndMinute.SetRange(0' 59);              spinEndMinute.Value = endDateTime.Minute;                if (DateTime.IsLeapYear(endDateTime.Year) && endDateTime.Month == 2)              {                spinEndDay.SetRange(1' 29);              }              else              {                spinEndDay.SetRange(1' months[endDateTime.Month]);              }              spinEndDay.Value = endDateTime.Day;                  spinEndMonth.SetRange(1' 12);              spinEndMonth.Value = endDateTime.Month;                  spinEndYear.Value = endDateTime.Year;              spinEndYear.SetRange(2004' 2010);                spinStartHour.Disabled = !enableEditStartTime;              spinStartMinute.Disabled = !enableEditStartTime;              spinStartDay.Disabled = !enableEditStartTime;              spinStartMonth.Disabled = !enableEditStartTime;              spinStartYear.Disabled = !enableEditStartTime;                spinChannel.Disabled = !enableEditChannel;            }            return true;        }
Magic Number,MediaPortal.Dialogs,GUIDialogDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogDateTime.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              _confirmed = false;              spinStartHour.SetRange(0' 23);              spinStartHour.Value = startDateTime.Hour;                spinStartMinute.SetRange(0' 59);              spinStartMinute.Value = startDateTime.Minute;                if (DateTime.IsLeapYear(startDateTime.Year) && startDateTime.Month == 2)              {                spinStartDay.SetRange(1' 29);              }              else              {                spinStartDay.SetRange(1' months[startDateTime.Month]);              }              spinStartDay.Value = startDateTime.Day;                spinStartMonth.SetRange(1' 12);              spinStartMonth.Value = startDateTime.Month;                spinStartYear.Value = startDateTime.Year;              spinStartYear.SetRange(2004' 2010);                  spinChannel.Reset();              int i = 0' iSel = 0;              foreach (string strLabel in itemList)              {                spinChannel.AddLabel(strLabel' 0);                if (channel == strLabel)                {                  iSel = i;                }                i++;              }              if (iSel >= 0)              {                SelectItemControl(GetID' spinChannel.GetID' iSel);              }                spinEndHour.SetRange(0' 23);              spinEndHour.Value = endDateTime.Hour;                spinEndMinute.SetRange(0' 59);              spinEndMinute.Value = endDateTime.Minute;                if (DateTime.IsLeapYear(endDateTime.Year) && endDateTime.Month == 2)              {                spinEndDay.SetRange(1' 29);              }              else              {                spinEndDay.SetRange(1' months[endDateTime.Month]);              }              spinEndDay.Value = endDateTime.Day;                  spinEndMonth.SetRange(1' 12);              spinEndMonth.Value = endDateTime.Month;                  spinEndYear.Value = endDateTime.Year;              spinEndYear.SetRange(2004' 2010);                spinStartHour.Disabled = !enableEditStartTime;              spinStartMinute.Disabled = !enableEditStartTime;              spinStartDay.Disabled = !enableEditStartTime;              spinStartMonth.Disabled = !enableEditStartTime;              spinStartYear.Disabled = !enableEditStartTime;                spinChannel.Disabled = !enableEditChannel;            }            return true;        }
Magic Number,MediaPortal.Dialogs,GUIDialogDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogDateTime.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              _confirmed = false;              spinStartHour.SetRange(0' 23);              spinStartHour.Value = startDateTime.Hour;                spinStartMinute.SetRange(0' 59);              spinStartMinute.Value = startDateTime.Minute;                if (DateTime.IsLeapYear(startDateTime.Year) && startDateTime.Month == 2)              {                spinStartDay.SetRange(1' 29);              }              else              {                spinStartDay.SetRange(1' months[startDateTime.Month]);              }              spinStartDay.Value = startDateTime.Day;                spinStartMonth.SetRange(1' 12);              spinStartMonth.Value = startDateTime.Month;                spinStartYear.Value = startDateTime.Year;              spinStartYear.SetRange(2004' 2010);                  spinChannel.Reset();              int i = 0' iSel = 0;              foreach (string strLabel in itemList)              {                spinChannel.AddLabel(strLabel' 0);                if (channel == strLabel)                {                  iSel = i;                }                i++;              }              if (iSel >= 0)              {                SelectItemControl(GetID' spinChannel.GetID' iSel);              }                spinEndHour.SetRange(0' 23);              spinEndHour.Value = endDateTime.Hour;                spinEndMinute.SetRange(0' 59);              spinEndMinute.Value = endDateTime.Minute;                if (DateTime.IsLeapYear(endDateTime.Year) && endDateTime.Month == 2)              {                spinEndDay.SetRange(1' 29);              }              else              {                spinEndDay.SetRange(1' months[endDateTime.Month]);              }              spinEndDay.Value = endDateTime.Day;                  spinEndMonth.SetRange(1' 12);              spinEndMonth.Value = endDateTime.Month;                  spinEndYear.Value = endDateTime.Year;              spinEndYear.SetRange(2004' 2010);                spinStartHour.Disabled = !enableEditStartTime;              spinStartMinute.Disabled = !enableEditStartTime;              spinStartDay.Disabled = !enableEditStartTime;              spinStartMonth.Disabled = !enableEditStartTime;              spinStartYear.Disabled = !enableEditStartTime;                spinChannel.Disabled = !enableEditChannel;            }            return true;        }
Magic Number,MediaPortal.Dialogs,GUIDialogDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogDateTime.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              _confirmed = false;              spinStartHour.SetRange(0' 23);              spinStartHour.Value = startDateTime.Hour;                spinStartMinute.SetRange(0' 59);              spinStartMinute.Value = startDateTime.Minute;                if (DateTime.IsLeapYear(startDateTime.Year) && startDateTime.Month == 2)              {                spinStartDay.SetRange(1' 29);              }              else              {                spinStartDay.SetRange(1' months[startDateTime.Month]);              }              spinStartDay.Value = startDateTime.Day;                spinStartMonth.SetRange(1' 12);              spinStartMonth.Value = startDateTime.Month;                spinStartYear.Value = startDateTime.Year;              spinStartYear.SetRange(2004' 2010);                  spinChannel.Reset();              int i = 0' iSel = 0;              foreach (string strLabel in itemList)              {                spinChannel.AddLabel(strLabel' 0);                if (channel == strLabel)                {                  iSel = i;                }                i++;              }              if (iSel >= 0)              {                SelectItemControl(GetID' spinChannel.GetID' iSel);              }                spinEndHour.SetRange(0' 23);              spinEndHour.Value = endDateTime.Hour;                spinEndMinute.SetRange(0' 59);              spinEndMinute.Value = endDateTime.Minute;                if (DateTime.IsLeapYear(endDateTime.Year) && endDateTime.Month == 2)              {                spinEndDay.SetRange(1' 29);              }              else              {                spinEndDay.SetRange(1' months[endDateTime.Month]);              }              spinEndDay.Value = endDateTime.Day;                  spinEndMonth.SetRange(1' 12);              spinEndMonth.Value = endDateTime.Month;                  spinEndYear.Value = endDateTime.Year;              spinEndYear.SetRange(2004' 2010);                spinStartHour.Disabled = !enableEditStartTime;              spinStartMinute.Disabled = !enableEditStartTime;              spinStartDay.Disabled = !enableEditStartTime;              spinStartMonth.Disabled = !enableEditStartTime;              spinStartYear.Disabled = !enableEditStartTime;                spinChannel.Disabled = !enableEditChannel;            }            return true;        }
Magic Number,MediaPortal.Dialogs,GUIDialogDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogDateTime.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              _confirmed = false;              spinStartHour.SetRange(0' 23);              spinStartHour.Value = startDateTime.Hour;                spinStartMinute.SetRange(0' 59);              spinStartMinute.Value = startDateTime.Minute;                if (DateTime.IsLeapYear(startDateTime.Year) && startDateTime.Month == 2)              {                spinStartDay.SetRange(1' 29);              }              else              {                spinStartDay.SetRange(1' months[startDateTime.Month]);              }              spinStartDay.Value = startDateTime.Day;                spinStartMonth.SetRange(1' 12);              spinStartMonth.Value = startDateTime.Month;                spinStartYear.Value = startDateTime.Year;              spinStartYear.SetRange(2004' 2010);                  spinChannel.Reset();              int i = 0' iSel = 0;              foreach (string strLabel in itemList)              {                spinChannel.AddLabel(strLabel' 0);                if (channel == strLabel)                {                  iSel = i;                }                i++;              }              if (iSel >= 0)              {                SelectItemControl(GetID' spinChannel.GetID' iSel);              }                spinEndHour.SetRange(0' 23);              spinEndHour.Value = endDateTime.Hour;                spinEndMinute.SetRange(0' 59);              spinEndMinute.Value = endDateTime.Minute;                if (DateTime.IsLeapYear(endDateTime.Year) && endDateTime.Month == 2)              {                spinEndDay.SetRange(1' 29);              }              else              {                spinEndDay.SetRange(1' months[endDateTime.Month]);              }              spinEndDay.Value = endDateTime.Day;                  spinEndMonth.SetRange(1' 12);              spinEndMonth.Value = endDateTime.Month;                  spinEndYear.Value = endDateTime.Year;              spinEndYear.SetRange(2004' 2010);                spinStartHour.Disabled = !enableEditStartTime;              spinStartMinute.Disabled = !enableEditStartTime;              spinStartDay.Disabled = !enableEditStartTime;              spinStartMonth.Disabled = !enableEditStartTime;              spinStartYear.Disabled = !enableEditStartTime;                spinChannel.Disabled = !enableEditChannel;            }            return true;        }
Magic Number,MediaPortal.Dialogs,GUIDialogDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogDateTime.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              _confirmed = false;              spinStartHour.SetRange(0' 23);              spinStartHour.Value = startDateTime.Hour;                spinStartMinute.SetRange(0' 59);              spinStartMinute.Value = startDateTime.Minute;                if (DateTime.IsLeapYear(startDateTime.Year) && startDateTime.Month == 2)              {                spinStartDay.SetRange(1' 29);              }              else              {                spinStartDay.SetRange(1' months[startDateTime.Month]);              }              spinStartDay.Value = startDateTime.Day;                spinStartMonth.SetRange(1' 12);              spinStartMonth.Value = startDateTime.Month;                spinStartYear.Value = startDateTime.Year;              spinStartYear.SetRange(2004' 2010);                  spinChannel.Reset();              int i = 0' iSel = 0;              foreach (string strLabel in itemList)              {                spinChannel.AddLabel(strLabel' 0);                if (channel == strLabel)                {                  iSel = i;                }                i++;              }              if (iSel >= 0)              {                SelectItemControl(GetID' spinChannel.GetID' iSel);              }                spinEndHour.SetRange(0' 23);              spinEndHour.Value = endDateTime.Hour;                spinEndMinute.SetRange(0' 59);              spinEndMinute.Value = endDateTime.Minute;                if (DateTime.IsLeapYear(endDateTime.Year) && endDateTime.Month == 2)              {                spinEndDay.SetRange(1' 29);              }              else              {                spinEndDay.SetRange(1' months[endDateTime.Month]);              }              spinEndDay.Value = endDateTime.Day;                  spinEndMonth.SetRange(1' 12);              spinEndMonth.Value = endDateTime.Month;                  spinEndYear.Value = endDateTime.Year;              spinEndYear.SetRange(2004' 2010);                spinStartHour.Disabled = !enableEditStartTime;              spinStartMinute.Disabled = !enableEditStartTime;              spinStartDay.Disabled = !enableEditStartTime;              spinStartMonth.Disabled = !enableEditStartTime;              spinStartYear.Disabled = !enableEditStartTime;                spinChannel.Disabled = !enableEditChannel;            }            return true;        }
Magic Number,MediaPortal.Dialogs,GUIDialogDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogDateTime.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              _confirmed = false;              spinStartHour.SetRange(0' 23);              spinStartHour.Value = startDateTime.Hour;                spinStartMinute.SetRange(0' 59);              spinStartMinute.Value = startDateTime.Minute;                if (DateTime.IsLeapYear(startDateTime.Year) && startDateTime.Month == 2)              {                spinStartDay.SetRange(1' 29);              }              else              {                spinStartDay.SetRange(1' months[startDateTime.Month]);              }              spinStartDay.Value = startDateTime.Day;                spinStartMonth.SetRange(1' 12);              spinStartMonth.Value = startDateTime.Month;                spinStartYear.Value = startDateTime.Year;              spinStartYear.SetRange(2004' 2010);                  spinChannel.Reset();              int i = 0' iSel = 0;              foreach (string strLabel in itemList)              {                spinChannel.AddLabel(strLabel' 0);                if (channel == strLabel)                {                  iSel = i;                }                i++;              }              if (iSel >= 0)              {                SelectItemControl(GetID' spinChannel.GetID' iSel);              }                spinEndHour.SetRange(0' 23);              spinEndHour.Value = endDateTime.Hour;                spinEndMinute.SetRange(0' 59);              spinEndMinute.Value = endDateTime.Minute;                if (DateTime.IsLeapYear(endDateTime.Year) && endDateTime.Month == 2)              {                spinEndDay.SetRange(1' 29);              }              else              {                spinEndDay.SetRange(1' months[endDateTime.Month]);              }              spinEndDay.Value = endDateTime.Day;                  spinEndMonth.SetRange(1' 12);              spinEndMonth.Value = endDateTime.Month;                  spinEndYear.Value = endDateTime.Year;              spinEndYear.SetRange(2004' 2010);                spinStartHour.Disabled = !enableEditStartTime;              spinStartMinute.Disabled = !enableEditStartTime;              spinStartDay.Disabled = !enableEditStartTime;              spinStartMonth.Disabled = !enableEditStartTime;              spinStartYear.Disabled = !enableEditStartTime;                spinChannel.Disabled = !enableEditChannel;            }            return true;        }
Magic Number,MediaPortal.Dialogs,GUIDialogDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogDateTime.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              _confirmed = false;              spinStartHour.SetRange(0' 23);              spinStartHour.Value = startDateTime.Hour;                spinStartMinute.SetRange(0' 59);              spinStartMinute.Value = startDateTime.Minute;                if (DateTime.IsLeapYear(startDateTime.Year) && startDateTime.Month == 2)              {                spinStartDay.SetRange(1' 29);              }              else              {                spinStartDay.SetRange(1' months[startDateTime.Month]);              }              spinStartDay.Value = startDateTime.Day;                spinStartMonth.SetRange(1' 12);              spinStartMonth.Value = startDateTime.Month;                spinStartYear.Value = startDateTime.Year;              spinStartYear.SetRange(2004' 2010);                  spinChannel.Reset();              int i = 0' iSel = 0;              foreach (string strLabel in itemList)              {                spinChannel.AddLabel(strLabel' 0);                if (channel == strLabel)                {                  iSel = i;                }                i++;              }              if (iSel >= 0)              {                SelectItemControl(GetID' spinChannel.GetID' iSel);              }                spinEndHour.SetRange(0' 23);              spinEndHour.Value = endDateTime.Hour;                spinEndMinute.SetRange(0' 59);              spinEndMinute.Value = endDateTime.Minute;                if (DateTime.IsLeapYear(endDateTime.Year) && endDateTime.Month == 2)              {                spinEndDay.SetRange(1' 29);              }              else              {                spinEndDay.SetRange(1' months[endDateTime.Month]);              }              spinEndDay.Value = endDateTime.Day;                  spinEndMonth.SetRange(1' 12);              spinEndMonth.Value = endDateTime.Month;                  spinEndYear.Value = endDateTime.Year;              spinEndYear.SetRange(2004' 2010);                spinStartHour.Disabled = !enableEditStartTime;              spinStartMinute.Disabled = !enableEditStartTime;              spinStartDay.Disabled = !enableEditStartTime;              spinStartMonth.Disabled = !enableEditStartTime;              spinStartYear.Disabled = !enableEditStartTime;                spinChannel.Disabled = !enableEditChannel;            }            return true;        }
Magic Number,MediaPortal.Dialogs,GUIDialogDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogDateTime.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              _confirmed = false;              spinStartHour.SetRange(0' 23);              spinStartHour.Value = startDateTime.Hour;                spinStartMinute.SetRange(0' 59);              spinStartMinute.Value = startDateTime.Minute;                if (DateTime.IsLeapYear(startDateTime.Year) && startDateTime.Month == 2)              {                spinStartDay.SetRange(1' 29);              }              else              {                spinStartDay.SetRange(1' months[startDateTime.Month]);              }              spinStartDay.Value = startDateTime.Day;                spinStartMonth.SetRange(1' 12);              spinStartMonth.Value = startDateTime.Month;                spinStartYear.Value = startDateTime.Year;              spinStartYear.SetRange(2004' 2010);                  spinChannel.Reset();              int i = 0' iSel = 0;              foreach (string strLabel in itemList)              {                spinChannel.AddLabel(strLabel' 0);                if (channel == strLabel)                {                  iSel = i;                }                i++;              }              if (iSel >= 0)              {                SelectItemControl(GetID' spinChannel.GetID' iSel);              }                spinEndHour.SetRange(0' 23);              spinEndHour.Value = endDateTime.Hour;                spinEndMinute.SetRange(0' 59);              spinEndMinute.Value = endDateTime.Minute;                if (DateTime.IsLeapYear(endDateTime.Year) && endDateTime.Month == 2)              {                spinEndDay.SetRange(1' 29);              }              else              {                spinEndDay.SetRange(1' months[endDateTime.Month]);              }              spinEndDay.Value = endDateTime.Day;                  spinEndMonth.SetRange(1' 12);              spinEndMonth.Value = endDateTime.Month;                  spinEndYear.Value = endDateTime.Year;              spinEndYear.SetRange(2004' 2010);                spinStartHour.Disabled = !enableEditStartTime;              spinStartMinute.Disabled = !enableEditStartTime;              spinStartDay.Disabled = !enableEditStartTime;              spinStartMonth.Disabled = !enableEditStartTime;              spinStartYear.Disabled = !enableEditStartTime;                spinChannel.Disabled = !enableEditChannel;            }            return true;        }
Magic Number,MediaPortal.Dialogs,GUIDialogDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogDateTime.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              _confirmed = false;              spinStartHour.SetRange(0' 23);              spinStartHour.Value = startDateTime.Hour;                spinStartMinute.SetRange(0' 59);              spinStartMinute.Value = startDateTime.Minute;                if (DateTime.IsLeapYear(startDateTime.Year) && startDateTime.Month == 2)              {                spinStartDay.SetRange(1' 29);              }              else              {                spinStartDay.SetRange(1' months[startDateTime.Month]);              }              spinStartDay.Value = startDateTime.Day;                spinStartMonth.SetRange(1' 12);              spinStartMonth.Value = startDateTime.Month;                spinStartYear.Value = startDateTime.Year;              spinStartYear.SetRange(2004' 2010);                  spinChannel.Reset();              int i = 0' iSel = 0;              foreach (string strLabel in itemList)              {                spinChannel.AddLabel(strLabel' 0);                if (channel == strLabel)                {                  iSel = i;                }                i++;              }              if (iSel >= 0)              {                SelectItemControl(GetID' spinChannel.GetID' iSel);              }                spinEndHour.SetRange(0' 23);              spinEndHour.Value = endDateTime.Hour;                spinEndMinute.SetRange(0' 59);              spinEndMinute.Value = endDateTime.Minute;                if (DateTime.IsLeapYear(endDateTime.Year) && endDateTime.Month == 2)              {                spinEndDay.SetRange(1' 29);              }              else              {                spinEndDay.SetRange(1' months[endDateTime.Month]);              }              spinEndDay.Value = endDateTime.Day;                  spinEndMonth.SetRange(1' 12);              spinEndMonth.Value = endDateTime.Month;                  spinEndYear.Value = endDateTime.Year;              spinEndYear.SetRange(2004' 2010);                spinStartHour.Disabled = !enableEditStartTime;              spinStartMinute.Disabled = !enableEditStartTime;              spinStartDay.Disabled = !enableEditStartTime;              spinStartMonth.Disabled = !enableEditStartTime;              spinStartYear.Disabled = !enableEditStartTime;                spinChannel.Disabled = !enableEditChannel;            }            return true;        }
Magic Number,MediaPortal.Dialogs,GUIDialogExif,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogExif.cs,Update,The following statement contains a magic number: m_pTexture = Util.Picture.Load(FileName' iRotate' 1024' 1024' true' false' out m_iTextureWidth'                                      out m_iTextureHeight);
Magic Number,MediaPortal.Dialogs,GUIDialogExif,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogExif.cs,Update,The following statement contains a magic number: m_pTexture = Util.Picture.Load(FileName' iRotate' 1024' 1024' true' false' out m_iTextureWidth'                                      out m_iTextureHeight);
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,SetHeading,The following statement contains a magic number: SetLine(2' string.Empty);
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,SetHeading,The following statement contains a magic number: SetLine(3' string.Empty);
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,SetHeading,The following statement contains a magic number: SetLine(4' string.Empty);
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,FileItemMC,The following statement contains a magic number: ShowError(513' item.Path);
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,FileItemMC,The following statement contains a magic number: SetPercentage((m_iFileNr * 100) / m_iNrOfItems);
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,FileItemMC,The following statement contains a magic number: strFileOperation = GUILocalizeStrings.Get(116);
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,FileItemMC,The following statement contains a magic number: strFileOperation += " " + m_iFileNr.ToString() + "/" + m_iNrOfItems.ToString() + " " + GUILocalizeStrings.Get(507);
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,ShowError,The following statement contains a magic number: SetLine(2' iError);
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,ShowError,The following statement contains a magic number: SetLine(2' "");
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,ShowErrorDialog,The following statement contains a magic number: dlgOK.SetLine(2' 502);
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,ShowErrorDialog,The following statement contains a magic number: dlgOK.SetLine(2' 502);
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,ShowFileMenu,The following statement contains a magic number: ShowErrorDialog(513' item.Path);
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,ShowFileMenu,The following statement contains a magic number: dlg.SetHeading(500);
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,ShowFileMenu,The following statement contains a magic number: dlg.AddLocalizedString(115);
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,ShowFileMenu,The following statement contains a magic number: dlg.AddLocalizedString(116);
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,ShowFileMenu,The following statement contains a magic number: dlg.AddLocalizedString(118);
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,ShowFileMenu,The following statement contains a magic number: dlg.AddLocalizedString(117);
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,ShowFileMenu,The following statement contains a magic number: dlg.AddLocalizedString(119);
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,ShowFileMenu,The following statement contains a magic number: dlg.AddLocalizedString(501);
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,ShowFileMenu,The following statement contains a magic number: dlg.AddLocalizedString(504);
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,ShowFileMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 117: // delete            bool readOnly;            if (Directory.Exists(item.Path))            {              readOnly = CheckDirectoryReadOnlyAttributes(item.Path);            }            else            {              FileAttributes attributes = File.GetAttributes(item.Path);              readOnly = ((attributes & FileAttributes.ReadOnly) == FileAttributes.ReadOnly);            }            if (readOnly)            {              OnDeleteReadOnlyItem(item);            }            else            {              OnDeleteItem(item);            }            break;            case 118: // rename            {              string strSourceName = "";              string strExtension = Path.GetExtension(item.Path);                if (item.IsFolder && !VirtualDirectory.IsImageFile(strExtension))              {                strSourceName = Path.GetFileName(item.Path);              }              else              {                strSourceName = Path.GetFileNameWithoutExtension(item.Path);              }                string strDestinationName = strSourceName;                if (GetUserInputString(ref strDestinationName) == true)              {                if (item.IsFolder && !VirtualDirectory.IsImageFile(strExtension))                {                  // directory rename                  if (Directory.Exists(sourceFolder + "\\" + strSourceName))                  {                    try                    {                      Directory.Move(sourceFolder + "\\" + strSourceName' sourceFolder + "\\" + strDestinationName);                    }                    catch (Exception)                    {                      ShowErrorDialog(dlg.SelectedId' sourceFolder + "\\" + strSourceName);                    }                    m_bReload = true;                  }                }                else                {                  // file rename                  if (File.Exists(item.Path))                  {                    string strDestinationFile = sourceFolder + "\\" + strDestinationName + strExtension;                    try                    {                      RenameRecording(item.Path' strDestinationFile);                    }                    catch (Exception)                    {                      ShowErrorDialog(dlg.SelectedId' sourceFolder + "\\" + strSourceName);                    }                    m_bReload = true;                  }                }              }            }            break;            case 115: // copy				            {              SetMode(0); // copy              FileItemDialog();            }            break;            case 116: // move            {              SetMode(1); // move              FileItemDialog();              m_bReload = true;            }            break;            case 119: // make dir            {              MakeDir();              m_bReload = true;            }            break;            case 501: // set as destiantion            destinationFolder = Path.GetFullPath(item.Path) + "\\";            break;            case 504: // goto destination            {              sourceFolder = destinationFolder;              m_bReload = true;            }            break;        }
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,ShowFileMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 117: // delete            bool readOnly;            if (Directory.Exists(item.Path))            {              readOnly = CheckDirectoryReadOnlyAttributes(item.Path);            }            else            {              FileAttributes attributes = File.GetAttributes(item.Path);              readOnly = ((attributes & FileAttributes.ReadOnly) == FileAttributes.ReadOnly);            }            if (readOnly)            {              OnDeleteReadOnlyItem(item);            }            else            {              OnDeleteItem(item);            }            break;            case 118: // rename            {              string strSourceName = "";              string strExtension = Path.GetExtension(item.Path);                if (item.IsFolder && !VirtualDirectory.IsImageFile(strExtension))              {                strSourceName = Path.GetFileName(item.Path);              }              else              {                strSourceName = Path.GetFileNameWithoutExtension(item.Path);              }                string strDestinationName = strSourceName;                if (GetUserInputString(ref strDestinationName) == true)              {                if (item.IsFolder && !VirtualDirectory.IsImageFile(strExtension))                {                  // directory rename                  if (Directory.Exists(sourceFolder + "\\" + strSourceName))                  {                    try                    {                      Directory.Move(sourceFolder + "\\" + strSourceName' sourceFolder + "\\" + strDestinationName);                    }                    catch (Exception)                    {                      ShowErrorDialog(dlg.SelectedId' sourceFolder + "\\" + strSourceName);                    }                    m_bReload = true;                  }                }                else                {                  // file rename                  if (File.Exists(item.Path))                  {                    string strDestinationFile = sourceFolder + "\\" + strDestinationName + strExtension;                    try                    {                      RenameRecording(item.Path' strDestinationFile);                    }                    catch (Exception)                    {                      ShowErrorDialog(dlg.SelectedId' sourceFolder + "\\" + strSourceName);                    }                    m_bReload = true;                  }                }              }            }            break;            case 115: // copy				            {              SetMode(0); // copy              FileItemDialog();            }            break;            case 116: // move            {              SetMode(1); // move              FileItemDialog();              m_bReload = true;            }            break;            case 119: // make dir            {              MakeDir();              m_bReload = true;            }            break;            case 501: // set as destiantion            destinationFolder = Path.GetFullPath(item.Path) + "\\";            break;            case 504: // goto destination            {              sourceFolder = destinationFolder;              m_bReload = true;            }            break;        }
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,ShowFileMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 117: // delete            bool readOnly;            if (Directory.Exists(item.Path))            {              readOnly = CheckDirectoryReadOnlyAttributes(item.Path);            }            else            {              FileAttributes attributes = File.GetAttributes(item.Path);              readOnly = ((attributes & FileAttributes.ReadOnly) == FileAttributes.ReadOnly);            }            if (readOnly)            {              OnDeleteReadOnlyItem(item);            }            else            {              OnDeleteItem(item);            }            break;            case 118: // rename            {              string strSourceName = "";              string strExtension = Path.GetExtension(item.Path);                if (item.IsFolder && !VirtualDirectory.IsImageFile(strExtension))              {                strSourceName = Path.GetFileName(item.Path);              }              else              {                strSourceName = Path.GetFileNameWithoutExtension(item.Path);              }                string strDestinationName = strSourceName;                if (GetUserInputString(ref strDestinationName) == true)              {                if (item.IsFolder && !VirtualDirectory.IsImageFile(strExtension))                {                  // directory rename                  if (Directory.Exists(sourceFolder + "\\" + strSourceName))                  {                    try                    {                      Directory.Move(sourceFolder + "\\" + strSourceName' sourceFolder + "\\" + strDestinationName);                    }                    catch (Exception)                    {                      ShowErrorDialog(dlg.SelectedId' sourceFolder + "\\" + strSourceName);                    }                    m_bReload = true;                  }                }                else                {                  // file rename                  if (File.Exists(item.Path))                  {                    string strDestinationFile = sourceFolder + "\\" + strDestinationName + strExtension;                    try                    {                      RenameRecording(item.Path' strDestinationFile);                    }                    catch (Exception)                    {                      ShowErrorDialog(dlg.SelectedId' sourceFolder + "\\" + strSourceName);                    }                    m_bReload = true;                  }                }              }            }            break;            case 115: // copy				            {              SetMode(0); // copy              FileItemDialog();            }            break;            case 116: // move            {              SetMode(1); // move              FileItemDialog();              m_bReload = true;            }            break;            case 119: // make dir            {              MakeDir();              m_bReload = true;            }            break;            case 501: // set as destiantion            destinationFolder = Path.GetFullPath(item.Path) + "\\";            break;            case 504: // goto destination            {              sourceFolder = destinationFolder;              m_bReload = true;            }            break;        }
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,ShowFileMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 117: // delete            bool readOnly;            if (Directory.Exists(item.Path))            {              readOnly = CheckDirectoryReadOnlyAttributes(item.Path);            }            else            {              FileAttributes attributes = File.GetAttributes(item.Path);              readOnly = ((attributes & FileAttributes.ReadOnly) == FileAttributes.ReadOnly);            }            if (readOnly)            {              OnDeleteReadOnlyItem(item);            }            else            {              OnDeleteItem(item);            }            break;            case 118: // rename            {              string strSourceName = "";              string strExtension = Path.GetExtension(item.Path);                if (item.IsFolder && !VirtualDirectory.IsImageFile(strExtension))              {                strSourceName = Path.GetFileName(item.Path);              }              else              {                strSourceName = Path.GetFileNameWithoutExtension(item.Path);              }                string strDestinationName = strSourceName;                if (GetUserInputString(ref strDestinationName) == true)              {                if (item.IsFolder && !VirtualDirectory.IsImageFile(strExtension))                {                  // directory rename                  if (Directory.Exists(sourceFolder + "\\" + strSourceName))                  {                    try                    {                      Directory.Move(sourceFolder + "\\" + strSourceName' sourceFolder + "\\" + strDestinationName);                    }                    catch (Exception)                    {                      ShowErrorDialog(dlg.SelectedId' sourceFolder + "\\" + strSourceName);                    }                    m_bReload = true;                  }                }                else                {                  // file rename                  if (File.Exists(item.Path))                  {                    string strDestinationFile = sourceFolder + "\\" + strDestinationName + strExtension;                    try                    {                      RenameRecording(item.Path' strDestinationFile);                    }                    catch (Exception)                    {                      ShowErrorDialog(dlg.SelectedId' sourceFolder + "\\" + strSourceName);                    }                    m_bReload = true;                  }                }              }            }            break;            case 115: // copy				            {              SetMode(0); // copy              FileItemDialog();            }            break;            case 116: // move            {              SetMode(1); // move              FileItemDialog();              m_bReload = true;            }            break;            case 119: // make dir            {              MakeDir();              m_bReload = true;            }            break;            case 501: // set as destiantion            destinationFolder = Path.GetFullPath(item.Path) + "\\";            break;            case 504: // goto destination            {              sourceFolder = destinationFolder;              m_bReload = true;            }            break;        }
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,ShowFileMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 117: // delete            bool readOnly;            if (Directory.Exists(item.Path))            {              readOnly = CheckDirectoryReadOnlyAttributes(item.Path);            }            else            {              FileAttributes attributes = File.GetAttributes(item.Path);              readOnly = ((attributes & FileAttributes.ReadOnly) == FileAttributes.ReadOnly);            }            if (readOnly)            {              OnDeleteReadOnlyItem(item);            }            else            {              OnDeleteItem(item);            }            break;            case 118: // rename            {              string strSourceName = "";              string strExtension = Path.GetExtension(item.Path);                if (item.IsFolder && !VirtualDirectory.IsImageFile(strExtension))              {                strSourceName = Path.GetFileName(item.Path);              }              else              {                strSourceName = Path.GetFileNameWithoutExtension(item.Path);              }                string strDestinationName = strSourceName;                if (GetUserInputString(ref strDestinationName) == true)              {                if (item.IsFolder && !VirtualDirectory.IsImageFile(strExtension))                {                  // directory rename                  if (Directory.Exists(sourceFolder + "\\" + strSourceName))                  {                    try                    {                      Directory.Move(sourceFolder + "\\" + strSourceName' sourceFolder + "\\" + strDestinationName);                    }                    catch (Exception)                    {                      ShowErrorDialog(dlg.SelectedId' sourceFolder + "\\" + strSourceName);                    }                    m_bReload = true;                  }                }                else                {                  // file rename                  if (File.Exists(item.Path))                  {                    string strDestinationFile = sourceFolder + "\\" + strDestinationName + strExtension;                    try                    {                      RenameRecording(item.Path' strDestinationFile);                    }                    catch (Exception)                    {                      ShowErrorDialog(dlg.SelectedId' sourceFolder + "\\" + strSourceName);                    }                    m_bReload = true;                  }                }              }            }            break;            case 115: // copy				            {              SetMode(0); // copy              FileItemDialog();            }            break;            case 116: // move            {              SetMode(1); // move              FileItemDialog();              m_bReload = true;            }            break;            case 119: // make dir            {              MakeDir();              m_bReload = true;            }            break;            case 501: // set as destiantion            destinationFolder = Path.GetFullPath(item.Path) + "\\";            break;            case 504: // goto destination            {              sourceFolder = destinationFolder;              m_bReload = true;            }            break;        }
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,ShowFileMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 117: // delete            bool readOnly;            if (Directory.Exists(item.Path))            {              readOnly = CheckDirectoryReadOnlyAttributes(item.Path);            }            else            {              FileAttributes attributes = File.GetAttributes(item.Path);              readOnly = ((attributes & FileAttributes.ReadOnly) == FileAttributes.ReadOnly);            }            if (readOnly)            {              OnDeleteReadOnlyItem(item);            }            else            {              OnDeleteItem(item);            }            break;            case 118: // rename            {              string strSourceName = "";              string strExtension = Path.GetExtension(item.Path);                if (item.IsFolder && !VirtualDirectory.IsImageFile(strExtension))              {                strSourceName = Path.GetFileName(item.Path);              }              else              {                strSourceName = Path.GetFileNameWithoutExtension(item.Path);              }                string strDestinationName = strSourceName;                if (GetUserInputString(ref strDestinationName) == true)              {                if (item.IsFolder && !VirtualDirectory.IsImageFile(strExtension))                {                  // directory rename                  if (Directory.Exists(sourceFolder + "\\" + strSourceName))                  {                    try                    {                      Directory.Move(sourceFolder + "\\" + strSourceName' sourceFolder + "\\" + strDestinationName);                    }                    catch (Exception)                    {                      ShowErrorDialog(dlg.SelectedId' sourceFolder + "\\" + strSourceName);                    }                    m_bReload = true;                  }                }                else                {                  // file rename                  if (File.Exists(item.Path))                  {                    string strDestinationFile = sourceFolder + "\\" + strDestinationName + strExtension;                    try                    {                      RenameRecording(item.Path' strDestinationFile);                    }                    catch (Exception)                    {                      ShowErrorDialog(dlg.SelectedId' sourceFolder + "\\" + strSourceName);                    }                    m_bReload = true;                  }                }              }            }            break;            case 115: // copy				            {              SetMode(0); // copy              FileItemDialog();            }            break;            case 116: // move            {              SetMode(1); // move              FileItemDialog();              m_bReload = true;            }            break;            case 119: // make dir            {              MakeDir();              m_bReload = true;            }            break;            case 501: // set as destiantion            destinationFolder = Path.GetFullPath(item.Path) + "\\";            break;            case 504: // goto destination            {              sourceFolder = destinationFolder;              m_bReload = true;            }            break;        }
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,ShowFileMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 117: // delete            bool readOnly;            if (Directory.Exists(item.Path))            {              readOnly = CheckDirectoryReadOnlyAttributes(item.Path);            }            else            {              FileAttributes attributes = File.GetAttributes(item.Path);              readOnly = ((attributes & FileAttributes.ReadOnly) == FileAttributes.ReadOnly);            }            if (readOnly)            {              OnDeleteReadOnlyItem(item);            }            else            {              OnDeleteItem(item);            }            break;            case 118: // rename            {              string strSourceName = "";              string strExtension = Path.GetExtension(item.Path);                if (item.IsFolder && !VirtualDirectory.IsImageFile(strExtension))              {                strSourceName = Path.GetFileName(item.Path);              }              else              {                strSourceName = Path.GetFileNameWithoutExtension(item.Path);              }                string strDestinationName = strSourceName;                if (GetUserInputString(ref strDestinationName) == true)              {                if (item.IsFolder && !VirtualDirectory.IsImageFile(strExtension))                {                  // directory rename                  if (Directory.Exists(sourceFolder + "\\" + strSourceName))                  {                    try                    {                      Directory.Move(sourceFolder + "\\" + strSourceName' sourceFolder + "\\" + strDestinationName);                    }                    catch (Exception)                    {                      ShowErrorDialog(dlg.SelectedId' sourceFolder + "\\" + strSourceName);                    }                    m_bReload = true;                  }                }                else                {                  // file rename                  if (File.Exists(item.Path))                  {                    string strDestinationFile = sourceFolder + "\\" + strDestinationName + strExtension;                    try                    {                      RenameRecording(item.Path' strDestinationFile);                    }                    catch (Exception)                    {                      ShowErrorDialog(dlg.SelectedId' sourceFolder + "\\" + strSourceName);                    }                    m_bReload = true;                  }                }              }            }            break;            case 115: // copy				            {              SetMode(0); // copy              FileItemDialog();            }            break;            case 116: // move            {              SetMode(1); // move              FileItemDialog();              m_bReload = true;            }            break;            case 119: // make dir            {              MakeDir();              m_bReload = true;            }            break;            case 501: // set as destiantion            destinationFolder = Path.GetFullPath(item.Path) + "\\";            break;            case 504: // goto destination            {              sourceFolder = destinationFolder;              m_bReload = true;            }            break;        }
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,FileItemDialog,The following statement contains a magic number: strFileOperation = GUILocalizeStrings.Get(116);
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,FileItemDialog,The following statement contains a magic number: SetLine(1' 505);
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,FileItemDialog,The following statement contains a magic number: strFileOperation += " " + m_iNrOfItems.ToString() + " " + GUILocalizeStrings.Get(507) + " (";
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,FileItemDialog,The following statement contains a magic number: strFileOperation += (m_dwTotalSize / (1024 * 1024)).ToString() + " MB)";
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,FileItemDialog,The following statement contains a magic number: strFileOperation += (m_dwTotalSize / (1024 * 1024)).ToString() + " MB)";
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,FileItemDialog,The following statement contains a magic number: m_dwTotalSize > 1024 * 1024
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,FileItemDialog,The following statement contains a magic number: m_dwTotalSize > 1024 * 1024
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,FileItemDialog,The following statement contains a magic number: SetLine(1' GUILocalizeStrings.Get(508) + " \"" + destinationFolder + "\" ?");
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,OnDeleteItem,The following statement contains a magic number: dlgYesNo.SetHeading(518);
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,OnDeleteItem,The following statement contains a magic number: dlgYesNo.SetLine(2' "");
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,OnDeleteItem,The following statement contains a magic number: dlgYesNo.SetLine(3' "");
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,OnDeleteReadOnlyItem,The following statement contains a magic number: dlgYesNo.SetHeading(2000);
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,OnDeleteReadOnlyItem,The following statement contains a magic number: dlgYesNo.SetLine(1' 2004);
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,OnDeleteReadOnlyItem,The following statement contains a magic number: dlgYesNo.SetLine(2' strFileName);
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,OnDeleteReadOnlyItem,The following statement contains a magic number: dlgYesNo.SetLine(3' "");
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,MakeDir,The following statement contains a magic number: dlgOk.SetHeading(119);
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,MakeDir,The following statement contains a magic number: dlgOk.SetLine(1' 2224);
Magic Number,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,MakeDir,The following statement contains a magic number: dlgOk.SetLine(2' "");
Magic Number,MediaPortal.Dialogs,GUIDialogFileStacking,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFileStacking.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              m_iSelectedFile = -1;              m_iFrames = 0;                // enable the CD's              for (int i = 1; i <= m_iNumberOfFiles; ++i)              {                GUIControl pControl = GetControl(i + m_indexStackItemOffset);                if (pControl != null)                {                  m_MaxNumberOfFiles = i;                  EnableControl(GetID' i + m_indexStackItemOffset);                  ShowControl(GetID' i + m_indexStackItemOffset);                  if (i < m_iNumberOfFiles)                  {                    pControl.NavigateRight = i + 1 + m_indexStackItemOffset;                  }                  else                  {                    pControl.NavigateRight = 101;                  }                }                else                {                  Log.Error("Missing control ID ({0}) in dialogFileStacking.xml"' i + m_indexStackItemOffset);                }              }                // disable CD's we dont use              for (int i = m_iNumberOfFiles + 1; i <= 40; ++i)              {                HideControl(GetID' i + m_indexStackItemOffset);                DisableControl(GetID' i + m_indexStackItemOffset);              }              SetSkinProperties(0);            }            return true;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              m_iSelectedFile = message.SenderControlId - m_indexStackItemOffset;              PageDestroy();            }            break;            case GUIMessage.MessageType.GUI_MSG_SETFOCUS:            {              m_iSelectedFile = message.TargetControlId - 100;              SetSkinProperties(m_iSelectedFile - 1);            }            break;        }
Magic Number,MediaPortal.Dialogs,GUIDialogFileStacking,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFileStacking.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              m_iSelectedFile = -1;              m_iFrames = 0;                // enable the CD's              for (int i = 1; i <= m_iNumberOfFiles; ++i)              {                GUIControl pControl = GetControl(i + m_indexStackItemOffset);                if (pControl != null)                {                  m_MaxNumberOfFiles = i;                  EnableControl(GetID' i + m_indexStackItemOffset);                  ShowControl(GetID' i + m_indexStackItemOffset);                  if (i < m_iNumberOfFiles)                  {                    pControl.NavigateRight = i + 1 + m_indexStackItemOffset;                  }                  else                  {                    pControl.NavigateRight = 101;                  }                }                else                {                  Log.Error("Missing control ID ({0}) in dialogFileStacking.xml"' i + m_indexStackItemOffset);                }              }                // disable CD's we dont use              for (int i = m_iNumberOfFiles + 1; i <= 40; ++i)              {                HideControl(GetID' i + m_indexStackItemOffset);                DisableControl(GetID' i + m_indexStackItemOffset);              }              SetSkinProperties(0);            }            return true;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              m_iSelectedFile = message.SenderControlId - m_indexStackItemOffset;              PageDestroy();            }            break;            case GUIMessage.MessageType.GUI_MSG_SETFOCUS:            {              m_iSelectedFile = message.TargetControlId - 100;              SetSkinProperties(m_iSelectedFile - 1);            }            break;        }
Magic Number,MediaPortal.Dialogs,GUIDialogFileStacking,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFileStacking.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              m_iSelectedFile = -1;              m_iFrames = 0;                // enable the CD's              for (int i = 1; i <= m_iNumberOfFiles; ++i)              {                GUIControl pControl = GetControl(i + m_indexStackItemOffset);                if (pControl != null)                {                  m_MaxNumberOfFiles = i;                  EnableControl(GetID' i + m_indexStackItemOffset);                  ShowControl(GetID' i + m_indexStackItemOffset);                  if (i < m_iNumberOfFiles)                  {                    pControl.NavigateRight = i + 1 + m_indexStackItemOffset;                  }                  else                  {                    pControl.NavigateRight = 101;                  }                }                else                {                  Log.Error("Missing control ID ({0}) in dialogFileStacking.xml"' i + m_indexStackItemOffset);                }              }                // disable CD's we dont use              for (int i = m_iNumberOfFiles + 1; i <= 40; ++i)              {                HideControl(GetID' i + m_indexStackItemOffset);                DisableControl(GetID' i + m_indexStackItemOffset);              }              SetSkinProperties(0);            }            return true;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              m_iSelectedFile = message.SenderControlId - m_indexStackItemOffset;              PageDestroy();            }            break;            case GUIMessage.MessageType.GUI_MSG_SETFOCUS:            {              m_iSelectedFile = message.TargetControlId - 100;              SetSkinProperties(m_iSelectedFile - 1);            }            break;        }
Magic Number,MediaPortal.Dialogs,GUIDialogFileStacking,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFileStacking.cs,Render,The following statement contains a magic number: GUIControl pDialogLine3 = GetControl(3);
Magic Number,MediaPortal.Dialogs,GUIDialogFileStacking,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFileStacking.cs,Render,The following statement contains a magic number: int distance = 32;
Magic Number,MediaPortal.Dialogs,GUIDialogFileStacking,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFileStacking.cs,Render,The following statement contains a magic number: distance = pControl.Width / 2;
Magic Number,MediaPortal.Dialogs,GUIDialogFileStacking,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFileStacking.cs,Render,The following statement contains a magic number: distance > pControl.Width / 2
Magic Number,MediaPortal.Dialogs,GUIDialogFileStacking,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFileStacking.cs,Render,The following statement contains a magic number: fStep /= 25.0f;
Magic Number,MediaPortal.Dialogs,GUIDialogFileStacking,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFileStacking.cs,Render,The following statement contains a magic number: GUIControl pControl = GetControl(101);
Magic Number,MediaPortal.Dialogs,GUIDialogFileStacking,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFileStacking.cs,Render,The following statement contains a magic number: m_iFrames == 25
Magic Number,MediaPortal.Dialogs,GUIDialogFileStacking,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFileStacking.cs,Render,The following statement contains a magic number: m_iFrames <= 25
Magic Number,MediaPortal.Dialogs,GUIDialogFileStacking,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFileStacking.cs,SetNumberOfFiles,The following statement contains a magic number: SetControlLabel(GetID' 1' GUILocalizeStrings.Get(6037));
Magic Number,MediaPortal.Dialogs,GUIDialogFileStacking,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFileStacking.cs,SetNumberOfFiles,The following statement contains a magic number: SetControlLabel(GetID' 2' GUILocalizeStrings.Get(6038));
Magic Number,MediaPortal.Dialogs,GUIDialogFileStacking,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFileStacking.cs,SetNumberOfFiles,The following statement contains a magic number: SetControlLabel(GetID' 2' GUILocalizeStrings.Get(6038));
Magic Number,MediaPortal.Dialogs,GUIDialogFileStacking,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFileStacking.cs,SetNumberOfFiles,The following statement contains a magic number: SetControlLabel(GetID' 3' string.Empty);
Magic Number,MediaPortal.Dialogs,GUIDialogFileStacking,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFileStacking.cs,SetNumberOfFiles,The following statement contains a magic number: SetControlLabel(GetID' 4' string.Empty);
Magic Number,MediaPortal.Dialogs,GUIDialogFileStacking,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFileStacking.cs,SetNumberOfFiles,The following statement contains a magic number: SetControlLabel(GetID' 5' string.Empty);
Magic Number,MediaPortal.Dialogs,GUIDialogNotify,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogNotify.cs,Reset,The following statement contains a magic number: timeOutInSeconds = 5;
Magic Number,MediaPortal.Dialogs,GUIDialogOK,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogOK.cs,SetHeading,The following statement contains a magic number: SetLine(2' string.Empty);
Magic Number,MediaPortal.Dialogs,GUIDialogOK,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogOK.cs,SetHeading,The following statement contains a magic number: SetLine(3' string.Empty);
Magic Number,MediaPortal.Dialogs,GUIDialogOK,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogOK.cs,SetHeading,The following statement contains a magic number: SetLine(4' string.Empty);
Magic Number,MediaPortal.Dialogs,GUIDialogProgress,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogProgress.cs,Reset,The following statement contains a magic number: SetLine(2' string.Empty);
Magic Number,MediaPortal.Dialogs,GUIDialogProgress,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogProgress.cs,Reset,The following statement contains a magic number: SetLine(3' string.Empty);
Magic Number,MediaPortal.Dialogs,GUIDialogProgress,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogProgress.cs,Reset,The following statement contains a magic number: SetLine(4' string.Empty);
Magic Number,MediaPortal.Dialogs,GUIDialogSelect,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogSelect.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:            {              SetControlLabel(GetID' (int)Controls.CONTROL_HEADING' string.Empty);              base.OnMessage(message);              DeInitControls();              Dispose();              return true;            }            case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              m_bButtonPressed = false;              base.OnMessage(message);              _selectedLabel = -1;              ClearControl(GetID' (int)Controls.CONTROL_LIST);                for (int i = 0; i < m_vecList.Count; i++)              {                GUIListItem pItem = (GUIListItem)m_vecList[i];                AddListItemControl(GetID' (int)Controls.CONTROL_LIST' pItem);              }                string wszText = String.Format("{0} {1}"' m_vecList.Count' GUILocalizeStrings.Get(127));                SetControlLabel(GetID' (int)Controls.CONTROL_NUMBEROFFILES' wszText);                if (m_bButtonEnabled)              {                EnableControl(GetID' (int)Controls.CONTROL_BUTTON);              }              else              {                DisableControl(GetID' (int)Controls.CONTROL_BUTTON);              }            }            return true;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;              if ((int)Controls.CONTROL_LIST == iControl)              {                int iAction = message.Param1;                if ((int)Action.ActionType.ACTION_SELECT_ITEM == iAction)                {                  _selectedLabel = GetSelectedItemNo();                  m_strSelected = GetSelectedItem().Label;                  PageDestroy();                }              }              if ((int)Controls.CONTROL_BUTTON == iControl)              {                _selectedLabel = -1;                m_bButtonPressed = true;                PageDestroy();              }            }            break;                 case GUIMessage.MessageType.GUI_MSG_ITEM_SELECTED:            {              if (m_bNewBehaviour)              {                if (GetSelectedItem() != null)                {                  GUIPropertyManager.SetProperty("#selecteditem"' GetSelectedItem().Label);                }              }            }            break;            case GUIMessage.MessageType.GUI_MSG_ITEM_FOCUS_CHANGED:            {              if (m_bNewBehaviour)              {                int iControl = message.SenderControlId;                if ((int)Controls.CONTROL_LIST == iControl)                {                  if (GetSelectedItem() != null)                  {                    m_strItemSelectedLabelTextNoFocus = GetSelectedItem().Label;                    m_iItemSelectedIndexNoFocus = GetSelectedItemNo();                  }                }              }            }            break;            case GUIMessage.MessageType.GUI_MSG_SETFOCUS:            {              if (m_bNewBehaviour)              {                int iControl = message.TargetControlId;                                if ((int)Controls.CONTROL_LIST == iControl)                {                  if (GetSelectedItem() != null)                  {                    //GetSelectedItem().Selected = false;                    int itemCount = GUIControl.GetItemCount(GetID' (int)Controls.CONTROL_LIST);                      for (int i = 0; i < itemCount; i++)                    {                      GUIControl.GetListItem(GetID' (int)Controls.CONTROL_LIST' i).Selected = false;                    }                  }                }                if ((int)Controls.CONTROL_BUTTON == iControl)                {                  if (GetSelectedItem() != null)                  {                    GetSelectedItem().Selected = true;                  }                }              }            }            break;          }
Magic Number,MediaPortal.Dialogs,GUIDialogSetRating,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogSetRating.cs,OnClicked,The following statement contains a magic number: rating < 5
Magic Number,MediaPortal.Dialogs,GUIDialogSetRating,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogSetRating.cs,UpdateRating,The following statement contains a magic number: GUIImage[] imgStars = new GUIImage[5] {imgStar1' imgStar2' imgStar3' imgStar4' imgStar5};
Magic Number,MediaPortal.Dialogs,GUIDialogSetRating,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogSetRating.cs,UpdateRating,The following statement contains a magic number: i < 5
Magic Number,MediaPortal.Dialogs,GUIDialogYesNo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogYesNo.cs,SetHeading,The following statement contains a magic number: SetLine(2' string.Empty);
Magic Number,MediaPortal.Dialogs,GUIDialogYesNo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogYesNo.cs,SetHeading,The following statement contains a magic number: SetLine(3' string.Empty);
Magic Number,MediaPortal.Dialogs,GUIDialogYesNo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogYesNo.cs,SetHeading,The following statement contains a magic number: SetLine(4' string.Empty);
Magic Number,MediaPortal.Dialogs,VirtualKeyboard,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogVirtualKeyboard.cs,InitializeBackground,The following statement contains a magic number: _background.XPosition = (GUIGraphicsContext.Width - _background.Width) / 2;
Magic Number,MediaPortal.Dialogs,VirtualKeyboard,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogVirtualKeyboard.cs,InitializeBackground,The following statement contains a magic number: _background.YPosition = (GUIGraphicsContext.Height - _background.Height) / 2;
Magic Number,MediaPortal.Dialogs,VirtualKeyboard,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogVirtualKeyboard.cs,PageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(100000 + GetID));
Magic Number,MediaPortal.Dialogs,GUIResumeDialog,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\Helper\GUIResumeDialog.cs,GetBeginningText,The following statement contains a magic number: switch (mediaType)        {          case MediaType.LiveRecording:          case MediaType.Recording:            return GUILocalizeStrings.Get(979);            case MediaType.DVD:          case MediaType.Video:          default:            return GUILocalizeStrings.Get(1201);        }
Magic Number,MediaPortal.Dialogs,GUIResumeDialog,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\Helper\GUIResumeDialog.cs,GetBeginningText,The following statement contains a magic number: switch (mediaType)        {          case MediaType.LiveRecording:          case MediaType.Recording:            return GUILocalizeStrings.Get(979);            case MediaType.DVD:          case MediaType.Video:          default:            return GUILocalizeStrings.Get(1201);        }
Magic Number,MediaPortal.Dialogs,GUIResumeDialog,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\Helper\GUIResumeDialog.cs,GetLastStopTimeText,The following statement contains a magic number: switch (mediaType)        {          case MediaType.DVD:          case MediaType.LiveRecording:          case MediaType.Recording:          case MediaType.Video:          default:            text = GUILocalizeStrings.Get(1211);            break;        }
Magic Number,MediaPortal.Dialogs,GUIResumeDialog,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\Helper\GUIResumeDialog.cs,ShowResumeDialog,The following statement contains a magic number: GUIListItem itemLivePoint = new GUIListItem(GUILocalizeStrings.Get(980));
Missing Default,MediaPortal.Dialogs,GUIDialogIncompatiblePlugins,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogIncompatiblePlugins.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              FillList();              // Set focus to "continue" button              GUIControl.FocusControl(GetID' btnContinue.GetID);            }            return true;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;                if (btnContinue == null || iControl == btnContinue.GetID)              {                PageDestroy();                return true;              }            }            break;          case GUIMessage.MessageType.GUI_MSG_SETFOCUS:            {              if (message.TargetControlId == listView.GetID)              {                _timeOutInSeconds = 0;                GUIPropertyManager.SetProperty("#countdownseconds"' "");              }            }            break;        }
Missing Default,MediaPortal.Dialogs,GUIDialogMenu,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogMenu.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:            {              lblHeading.Label = string.Empty;              if (lblHeading2 != null)              {                lblHeading2.Label = string.Empty;              }                base.OnMessage(message);              return true;            }            case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);                listView.Clear();              for (int i = 0; i < listItems.Count; i++)              {                GUIListItem pItem = (GUIListItem)listItems[i];                listView.Add(pItem);              }                if (selectedItemIndex >= 0)              {                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_ITEM_SELECT' GetID' 0' listView.GetID'                                                selectedItemIndex' 0' null);                OnMessage(msg);              }              selectedItemIndex = -1;              selectedId = -1;              string wszText = String.Format("{0} {1}"' listItems.Count' GUILocalizeStrings.Get(127));            }            return true;        }
Missing Default,MediaPortal.Dialogs,GUIDialogOldSkin,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogOldSkin.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              _revertToOldSkin = false;              base.OnMessage(message);              GUIControl.FocusControl(GetID' btnContinue.GetID);            }            return true;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;                if (btnContinue == null)              {                _revertToOldSkin = false;                PageDestroy();                return true;              }              if (iControl == btnContinue.GetID)              {                _revertToOldSkin = true;                RevertSkin();                PageDestroy();                return true;              }            }            break;        }
Missing Default,MediaPortal.Dialogs,GUIDialogPlayStop,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogPlayStop.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:            {              SetControlLabel(GetID' 1' string.Empty);              base.OnMessage(message);              return true;            }            case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              m_bConfirmed = false;              base.OnMessage(message);              if (m_DefaultStop)              {                GUIControl.FocusControl(GetID' btnStop.GetID);              }            }            return true;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;                if (btnStop == null)              {                m_bConfirmed = true;                PageDestroy();                m_DefaultStop = false;                return true;              }              if (iControl == btnPlay.GetID)              {                m_bConfirmed = false;                PageDestroy();                m_DefaultStop = false;                return true;              }              if (iControl == btnStop.GetID)              {                m_bConfirmed = true;                PageDestroy();                m_DefaultStop = false;                return true;              }            }            break;        }
Missing Default,MediaPortal.Dialogs,GUIDialogDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogDateTime.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              _confirmed = false;              spinStartHour.SetRange(0' 23);              spinStartHour.Value = startDateTime.Hour;                spinStartMinute.SetRange(0' 59);              spinStartMinute.Value = startDateTime.Minute;                if (DateTime.IsLeapYear(startDateTime.Year) && startDateTime.Month == 2)              {                spinStartDay.SetRange(1' 29);              }              else              {                spinStartDay.SetRange(1' months[startDateTime.Month]);              }              spinStartDay.Value = startDateTime.Day;                spinStartMonth.SetRange(1' 12);              spinStartMonth.Value = startDateTime.Month;                spinStartYear.Value = startDateTime.Year;              spinStartYear.SetRange(2004' 2010);                  spinChannel.Reset();              int i = 0' iSel = 0;              foreach (string strLabel in itemList)              {                spinChannel.AddLabel(strLabel' 0);                if (channel == strLabel)                {                  iSel = i;                }                i++;              }              if (iSel >= 0)              {                SelectItemControl(GetID' spinChannel.GetID' iSel);              }                spinEndHour.SetRange(0' 23);              spinEndHour.Value = endDateTime.Hour;                spinEndMinute.SetRange(0' 59);              spinEndMinute.Value = endDateTime.Minute;                if (DateTime.IsLeapYear(endDateTime.Year) && endDateTime.Month == 2)              {                spinEndDay.SetRange(1' 29);              }              else              {                spinEndDay.SetRange(1' months[endDateTime.Month]);              }              spinEndDay.Value = endDateTime.Day;                  spinEndMonth.SetRange(1' 12);              spinEndMonth.Value = endDateTime.Month;                  spinEndYear.Value = endDateTime.Year;              spinEndYear.SetRange(2004' 2010);                spinStartHour.Disabled = !enableEditStartTime;              spinStartMinute.Disabled = !enableEditStartTime;              spinStartDay.Disabled = !enableEditStartTime;              spinStartMonth.Disabled = !enableEditStartTime;              spinStartYear.Disabled = !enableEditStartTime;                spinChannel.Disabled = !enableEditChannel;            }            return true;        }
Missing Default,MediaPortal.Dialogs,GUIDialogExif,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogExif.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)       {         case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:           {             base.OnMessage(message);             Update();             return true;           }         case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:           {             if (m_pTexture != null)             {               m_pTexture.Dispose();             }             m_pTexture = null;             base.OnMessage(message);             // Fix for Mantis issue: 0001709: Background not correct after viewing pictures properties twice             Restore();             return true;           }       }
Missing Default,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:            {              base.OnMessage(message);              m_pParentWindow = null;              m_bRunning = false;              GUIGraphicsContext.Overlay = m_bOverlay;              //base.OnMessage(message);              Dispose();              DeInitControls();              GUILayerManager.UnRegisterLayer(this);              return true;            }          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              m_bDialogActive = true;              base.OnMessage(message);              GUIGraphicsContext.Overlay = base.IsOverlayAllowed;              m_pParentWindow = GUIWindowManager.GetWindow(m_dwParentWindowID);              GUILayerManager.RegisterLayer(this' GUILayerManager.LayerType.Dialog);            }            return true;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iAction = message.Param1;              int iControl = message.SenderControlId;              if (btnCancel != null && iControl == (int)btnCancel.GetID)              {                m_bCanceled = true;                if (!m_bBusy)                {                  Close();                }              }                if (btnYes != null && iControl == (int)btnYes.GetID)              {                if (!m_bBusy)                {                  m_bBusy = true;                  FileItemMC(m_itemSourceItem);                  m_bBusy = false;                  Close();                }                else                {                  m_bButtonYes = true;                }              }                if (btnNo != null && iControl == (int)btnNo.GetID)              {                m_bButtonNo = true;              }                if (btnAlways != null && iControl == (int)btnAlways.GetID)              {                m_bAlways = true;              }                if (btnNever != null && iControl == (int)btnNever.GetID)              {                m_bNever = true;              }            }            break;        }
Missing Default,MediaPortal.Dialogs,GUIDialogFile,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFile.cs,ShowFileMenu,The following switch statement is missing a default case: switch (dlg.SelectedId)        {          case 117: // delete            bool readOnly;            if (Directory.Exists(item.Path))            {              readOnly = CheckDirectoryReadOnlyAttributes(item.Path);            }            else            {              FileAttributes attributes = File.GetAttributes(item.Path);              readOnly = ((attributes & FileAttributes.ReadOnly) == FileAttributes.ReadOnly);            }            if (readOnly)            {              OnDeleteReadOnlyItem(item);            }            else            {              OnDeleteItem(item);            }            break;            case 118: // rename            {              string strSourceName = "";              string strExtension = Path.GetExtension(item.Path);                if (item.IsFolder && !VirtualDirectory.IsImageFile(strExtension))              {                strSourceName = Path.GetFileName(item.Path);              }              else              {                strSourceName = Path.GetFileNameWithoutExtension(item.Path);              }                string strDestinationName = strSourceName;                if (GetUserInputString(ref strDestinationName) == true)              {                if (item.IsFolder && !VirtualDirectory.IsImageFile(strExtension))                {                  // directory rename                  if (Directory.Exists(sourceFolder + "\\" + strSourceName))                  {                    try                    {                      Directory.Move(sourceFolder + "\\" + strSourceName' sourceFolder + "\\" + strDestinationName);                    }                    catch (Exception)                    {                      ShowErrorDialog(dlg.SelectedId' sourceFolder + "\\" + strSourceName);                    }                    m_bReload = true;                  }                }                else                {                  // file rename                  if (File.Exists(item.Path))                  {                    string strDestinationFile = sourceFolder + "\\" + strDestinationName + strExtension;                    try                    {                      RenameRecording(item.Path' strDestinationFile);                    }                    catch (Exception)                    {                      ShowErrorDialog(dlg.SelectedId' sourceFolder + "\\" + strSourceName);                    }                    m_bReload = true;                  }                }              }            }            break;            case 115: // copy				            {              SetMode(0); // copy              FileItemDialog();            }            break;            case 116: // move            {              SetMode(1); // move              FileItemDialog();              m_bReload = true;            }            break;            case 119: // make dir            {              MakeDir();              m_bReload = true;            }            break;            case 501: // set as destiantion            destinationFolder = Path.GetFullPath(item.Path) + "\\";            break;            case 504: // goto destination            {              sourceFolder = destinationFolder;              m_bReload = true;            }            break;        }
Missing Default,MediaPortal.Dialogs,GUIDialogFileStacking,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogFileStacking.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              m_iSelectedFile = -1;              m_iFrames = 0;                // enable the CD's              for (int i = 1; i <= m_iNumberOfFiles; ++i)              {                GUIControl pControl = GetControl(i + m_indexStackItemOffset);                if (pControl != null)                {                  m_MaxNumberOfFiles = i;                  EnableControl(GetID' i + m_indexStackItemOffset);                  ShowControl(GetID' i + m_indexStackItemOffset);                  if (i < m_iNumberOfFiles)                  {                    pControl.NavigateRight = i + 1 + m_indexStackItemOffset;                  }                  else                  {                    pControl.NavigateRight = 101;                  }                }                else                {                  Log.Error("Missing control ID ({0}) in dialogFileStacking.xml"' i + m_indexStackItemOffset);                }              }                // disable CD's we dont use              for (int i = m_iNumberOfFiles + 1; i <= 40; ++i)              {                HideControl(GetID' i + m_indexStackItemOffset);                DisableControl(GetID' i + m_indexStackItemOffset);              }              SetSkinProperties(0);            }            return true;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              m_iSelectedFile = message.SenderControlId - m_indexStackItemOffset;              PageDestroy();            }            break;            case GUIMessage.MessageType.GUI_MSG_SETFOCUS:            {              m_iSelectedFile = message.TargetControlId - 100;              SetSkinProperties(m_iSelectedFile - 1);            }            break;        }
Missing Default,MediaPortal.Dialogs,GUIDialogNotify,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogNotify.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:            {              if (lblHeading != null) lblHeading.Label = string.Empty;              base.OnMessage(message);              return true;            }            case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              if (imgLogo != null)              {                SetImage(logoUrl);              }            }              return true;        }
Missing Default,MediaPortal.Dialogs,GUIDialogOK,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogOK.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:            {              SetControlLabel(GetID' 1' string.Empty);              base.OnMessage(message);              return true;            }            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;                if (btnYes == null)              {                m_bConfirmed = true;                PageDestroy();                return true;              }              if (iControl == btnNo.GetID)              {                m_bConfirmed = false;                PageDestroy();                return true;              }              if (iControl == btnYes.GetID)              {                m_bConfirmed = true;                PageDestroy();                return true;              }            }            break;        }
Missing Default,MediaPortal.Dialogs,GUIDialogProgress,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogProgress.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              _canceled = false;              return base.OnMessage(message);            }              case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              if (message.SenderControlId == (int)Controls.CancelButton)              {                _canceled = true;                PageDestroy();                return true;              }            }            break;        }
Missing Default,MediaPortal.Dialogs,GUIDialogSelect,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogSelect.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:            {              SetControlLabel(GetID' (int)Controls.CONTROL_HEADING' string.Empty);              base.OnMessage(message);              DeInitControls();              Dispose();              return true;            }            case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              m_bButtonPressed = false;              base.OnMessage(message);              _selectedLabel = -1;              ClearControl(GetID' (int)Controls.CONTROL_LIST);                for (int i = 0; i < m_vecList.Count; i++)              {                GUIListItem pItem = (GUIListItem)m_vecList[i];                AddListItemControl(GetID' (int)Controls.CONTROL_LIST' pItem);              }                string wszText = String.Format("{0} {1}"' m_vecList.Count' GUILocalizeStrings.Get(127));                SetControlLabel(GetID' (int)Controls.CONTROL_NUMBEROFFILES' wszText);                if (m_bButtonEnabled)              {                EnableControl(GetID' (int)Controls.CONTROL_BUTTON);              }              else              {                DisableControl(GetID' (int)Controls.CONTROL_BUTTON);              }            }            return true;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;              if ((int)Controls.CONTROL_LIST == iControl)              {                int iAction = message.Param1;                if ((int)Action.ActionType.ACTION_SELECT_ITEM == iAction)                {                  _selectedLabel = GetSelectedItemNo();                  m_strSelected = GetSelectedItem().Label;                  PageDestroy();                }              }              if ((int)Controls.CONTROL_BUTTON == iControl)              {                _selectedLabel = -1;                m_bButtonPressed = true;                PageDestroy();              }            }            break;                 case GUIMessage.MessageType.GUI_MSG_ITEM_SELECTED:            {              if (m_bNewBehaviour)              {                if (GetSelectedItem() != null)                {                  GUIPropertyManager.SetProperty("#selecteditem"' GetSelectedItem().Label);                }              }            }            break;            case GUIMessage.MessageType.GUI_MSG_ITEM_FOCUS_CHANGED:            {              if (m_bNewBehaviour)              {                int iControl = message.SenderControlId;                if ((int)Controls.CONTROL_LIST == iControl)                {                  if (GetSelectedItem() != null)                  {                    m_strItemSelectedLabelTextNoFocus = GetSelectedItem().Label;                    m_iItemSelectedIndexNoFocus = GetSelectedItemNo();                  }                }              }            }            break;            case GUIMessage.MessageType.GUI_MSG_SETFOCUS:            {              if (m_bNewBehaviour)              {                int iControl = message.TargetControlId;                                if ((int)Controls.CONTROL_LIST == iControl)                {                  if (GetSelectedItem() != null)                  {                    //GetSelectedItem().Selected = false;                    int itemCount = GUIControl.GetItemCount(GetID' (int)Controls.CONTROL_LIST);                      for (int i = 0; i < itemCount; i++)                    {                      GUIControl.GetListItem(GetID' (int)Controls.CONTROL_LIST' i).Selected = false;                    }                  }                }                if ((int)Controls.CONTROL_BUTTON == iControl)                {                  if (GetSelectedItem() != null)                  {                    GetSelectedItem().Selected = true;                  }                }              }            }            break;          }
Missing Default,MediaPortal.Dialogs,GUIDialogSelect2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogSelect2.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:            {              SetControlLabel(GetID' (int)Controls.CONTROL_HEADING' string.Empty);              base.OnMessage(message);              return true;            }            case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              ClearControl(GetID' (int)Controls.CONTROL_LIST);                for (int i = 0; i < m_vecList.Count; i++)              {                GUIListItem pItem = (GUIListItem)m_vecList[i];                AddListItemControl(GetID' (int)Controls.CONTROL_LIST' pItem);              }                if (_selectedLabel >= 0)              {                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_ITEM_SELECT' GetID' 0'                                                (int)Controls.CONTROL_LIST' _selectedLabel' 0' null);                OnMessage(msg);              }              _selectedLabel = -1;            }            return true;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;              if ((int)Controls.CONTROL_LIST == iControl)              {                _selectedLabel = GetSelectedItemNo();                m_strSelected = GetSelectedItem().Label;                PageDestroy();              }            }            break;        }
Missing Default,MediaPortal.Dialogs,GUIDialogSetRating,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogSetRating.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              resultCode = ResultCode.Close;              base.OnMessage(message);              UpdateRating();            }            return true;        }
Missing Default,MediaPortal.Dialogs,GUIDialogWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogWindow.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              _prevLayer = GUILayerManager.GetLayer(GUILayerManager.LayerType.Dialog);              _prevOverlay = GUIGraphicsContext.Overlay;                GUIGraphicsContext.Overlay = base.IsOverlayAllowed;                GUILayerManager.RegisterLayer(this' GUILayerManager.LayerType.Dialog);                GUIPropertyManager.SetProperty("#currentmoduleid"' Convert.ToString(GUIWindowManager.ActiveWindow));              GUIPropertyManager.SetProperty("#currentmodule"' GetModuleName());              Log.Debug("DialogWindow: {0} init"' this.ToString());                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_SETFOCUS' GetID' 0' _defaultControlId' 0' 0'                                              null);              OnMessage(msg);                OnPageLoad();                return true;            }            case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:            {              //base.OnMessage(message);              // TODO: Establishes a circular loop              // OnPageDestroy(_parentWindowID);              OnPageDestroy(GetID); // mantis 2996: Dialog windows do not animate when closed                _running = false;              _parentWindowID = 0;              _parentWindow = null;              GUIGraphicsContext.Overlay = _prevOverlay;              Dispose();              DeInitControls();              GUILayerManager.UnRegisterLayer(this);              GUILayerManager.RegisterLayer(_prevLayer' GUILayerManager.LayerType.Dialog);                _prevLayer = null;                return true;            }        }
Missing Default,MediaPortal.Dialogs,GUIDialogYesNo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Dialogs\Dialogs\GUIDialogYesNo.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:            {              SetControlLabel(GetID' 1' string.Empty);              base.OnMessage(message);              return true;            }            case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              m_bConfirmed = false;              base.OnMessage(message);              if (m_DefaultYes)              {                GUIControl.FocusControl(GetID' btnYes.GetID);              }              iYesKey = (int)btnYes.Label.ToLowerInvariant()[0];              iNoKey = (int)btnNo.Label.ToLowerInvariant()[0];            }            return true;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;                if (btnYes == null)              {                m_bConfirmed = true;                PageDestroy();                m_DefaultYes = false;                return true;              }              if (iControl == btnNo.GetID)              {                m_bConfirmed = false;                PageDestroy();                m_DefaultYes = false;                return true;              }              if (iControl == btnYes.GetID)              {                m_bConfirmed = true;                PageDestroy();                m_DefaultYes = false;                return true;              }            }            break;        }
