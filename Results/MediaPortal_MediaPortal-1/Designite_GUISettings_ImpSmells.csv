Implementation smell,Namespace,Class,File,Method,Description
Long Method,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,OnClicked,The method has 110 lines of code.
Long Method,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The method has 137 lines of code.
Long Method,WindowPlugins.GUISettings,GUISettingsGeneralVolume,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Volume.cs,OnClicked,The method has 102 lines of code.
Long Method,WindowPlugins.GUISettings,GUISettingsGUIMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI.cs,OnClicked,The method has 107 lines of code.
Long Method,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,OnClicked,The method has 181 lines of code.
Long Method,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnAction,The method has 289 lines of code.
Long Method,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,The method has 252 lines of code.
Long Method,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,Render,The method has 159 lines of code.
Long Method,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnClicked,The method has 115 lines of code.
Long Method,MediaPortal.GUI.Settings,SettingsSharesHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettings_SharesHelper.cs,SaveSettings,The method has 124 lines of code.
Long Method,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnUpdateGrabberScripts,The method has 112 lines of code.
Complex Method,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,OnVideoCodec,Cyclomatic complexity of the method is 9
Complex Method,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,OnAudioCodec,Cyclomatic complexity of the method is 9
Complex Method,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnVideoCodec,Cyclomatic complexity of the method is 9
Complex Method,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnAudioCodec,Cyclomatic complexity of the method is 9
Complex Method,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnClicked,Cyclomatic complexity of the method is 13
Complex Method,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnVideo,Cyclomatic complexity of the method is 16
Complex Method,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnVideoCodec,Cyclomatic complexity of the method is 9
Complex Method,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnAudioCodec,Cyclomatic complexity of the method is 9
Complex Method,WindowPlugins.GUISettings.TV,GUISettingsTv,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\TV\GUISettingsTv.cs,OnClicked,Cyclomatic complexity of the method is 9
Complex Method,WindowPlugins.GUISettings.TV,GUISettingsTv,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\TV\GUISettingsTv.cs,OnVideoCodec,Cyclomatic complexity of the method is 9
Complex Method,WindowPlugins.GUISettings.TV,GUISettingsTv,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\TV\GUISettingsTv.cs,OnAudioCodec,Cyclomatic complexity of the method is 9
Complex Method,WindowPlugins.GUISettings,GUISettingsGeneralMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral.cs,OnPlay,Cyclomatic complexity of the method is 11
Complex Method,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,LoadSettings,Cyclomatic complexity of the method is 9
Complex Method,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,OnClicked,Cyclomatic complexity of the method is 18
Complex Method,WindowPlugins.GUISettings,GUISettingsGeneralVolume,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Volume.cs,SaveSettings,Cyclomatic complexity of the method is 8
Complex Method,WindowPlugins.GUISettings,GUISettingsGeneralVolume,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Volume.cs,OnClicked,Cyclomatic complexity of the method is 16
Complex Method,WindowPlugins.GUISettings,GUISettingsGUIMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI.cs,OnClicked,Cyclomatic complexity of the method is 22
Complex Method,WindowPlugins.GUISettings,GUISettingsGUIGeneral,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_General.cs,OnClicked,Cyclomatic complexity of the method is 8
Complex Method,WindowPlugins.GUISettings,GUISettingsGUIOnScreenDisplay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_OnScreenDisplay.cs,OnClicked,Cyclomatic complexity of the method is 9
Complex Method,WindowPlugins.GUISettings,GUISettingsGUISkin,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Skin.cs,OnClicked,Cyclomatic complexity of the method is 14
Complex Method,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,SetCheckMarksBasedOnString,Cyclomatic complexity of the method is 19
Complex Method,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,OnClicked,Cyclomatic complexity of the method is 35
Complex Method,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,AddStep,Cyclomatic complexity of the method is 22
Complex Method,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,RemoveStep,Cyclomatic complexity of the method is 20
Complex Method,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,ConvertToNewStyle,Cyclomatic complexity of the method is 20
Complex Method,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,OnMessage,Cyclomatic complexity of the method is 8
Complex Method,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,OnClicked,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Settings,GUISettingsGeneralResume,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Resume.cs,OnClicked,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Settings,GUISettingsGeneralResume,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Resume.cs,GetScreens,Cyclomatic complexity of the method is 10
Complex Method,MediaPortal.GUI.Settings,DisplayDetails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Resume.cs,GetMonitorDetails,Cyclomatic complexity of the method is 12
Complex Method,MediaPortal.GUI.Settings,GUISettingsGeneralStartup,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Startup.cs,OnClicked,Cyclomatic complexity of the method is 10
Complex Method,MediaPortal.GUI.Settings,GUISettingsGUI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_ScrollSpeed.cs,OnMessage,Cyclomatic complexity of the method is 11
Complex Method,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnAction,Cyclomatic complexity of the method is 44
Complex Method,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,Cyclomatic complexity of the method is 43
Complex Method,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,Render,Cyclomatic complexity of the method is 16
Complex Method,MediaPortal.GUI.Settings,GUISettingsExtensions,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_Extensions.cs,OnClicked,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Settings,GUISettingsPlaylist,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_Playlist.cs,GetNetworkFolders,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Settings,GUISettingsPlaylist,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_Playlist.cs,OnAddPath,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnClicked,Cyclomatic complexity of the method is 10
Complex Method,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,GetNetworkFolders,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnAddEditFolder,Cyclomatic complexity of the method is 10
Complex Method,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnAddPath,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Settings,SettingsSharesHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettings_SharesHelper.cs,AddStaticShares,Cyclomatic complexity of the method is 12
Complex Method,MediaPortal.GUI.Settings,SettingsSharesHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettings_SharesHelper.cs,LoadSettings,Cyclomatic complexity of the method is 11
Complex Method,MediaPortal.GUI.Settings,SettingsSharesHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettings_SharesHelper.cs,SaveSettings,Cyclomatic complexity of the method is 12
Complex Method,MediaPortal.GUI.Settings,GUISettingsMusic,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\GUISettingsMusic.cs,OnClicked,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Settings,GUISettingsMusicDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\GUISettingsMusic_Database.cs,OnClicked,Cyclomatic complexity of the method is 10
Complex Method,MediaPortal.GUI.Settings,GUISettingsMusicDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\GUISettingsMusic_Database.cs,FolderScanThread,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Settings,GUISettingsPicturesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures_Database.cs,OnScanDatabaseThread,Cyclomatic complexity of the method is 10
Complex Method,MediaPortal.GUI.Settings,CreateThumbsAndAddPictureToDBFolderThread,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures_Database.cs,PerformRequest,Cyclomatic complexity of the method is 12
Complex Method,MediaPortal.GUI.Settings,GUISettingsPicturesSlideshow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures_Slideshow.cs,OnMessage,Cyclomatic complexity of the method is 15
Complex Method,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,LoadSettings,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnClicked,Cyclomatic complexity of the method is 17
Complex Method,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnUpdateGrabberScripts,Cyclomatic complexity of the method is 11
Complex Method,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnSetDefaultGrabber,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnScanDatabase,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,EqualizerWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_EqualizerWindow.cs,OnClicked,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,DisplayOptionsWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_OptionsWindow.cs,OnClicked,Cyclomatic complexity of the method is 12
Long Parameter List,MediaPortal.GUI.Settings,DisplayDetails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Resume.cs,DisplayDetails,The method has 5 parameters. Parameters: sPnPID' sSerialNumber' sModel' sMonitorID' sDriverID
Long Identifier,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,OnVC1,The length of the parameter availableVC1CyberlinkVideoFilters is 33.
Long Identifier,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnVC1,The length of the parameter availableVC1CyberlinkVideoFilters is 33.
Long Identifier,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnVC1i,The length of the parameter availableVC1ICyberlinkVideoFilters is 34.
Long Identifier,WindowPlugins.GUISettings,GUISettingsGUIGeneral,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_General.cs,,The length of the parameter cmAllowRememberLastFocusedItem is 30.
Long Identifier,MediaPortal.GUI.Settings,GUISettingsGeneralStartup,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Startup.cs,,The length of the parameter _cmIgnorefullscreenresolutionchanges is 36.
Long Identifier,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnUpdateGrabberScripts,The length of the parameter internalActorsGrabberScriptUrl is 30.
Long Identifier,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnUpdateGrabberScripts,The length of the parameter internalMovieImagesGrabberScriptFile is 36.
Long Identifier,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnUpdateGrabberScripts,The length of the parameter internalMovieImagesGrabberScriptUrl is 35.
Long Statement,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,LoadSettings,The length of the statement  "        if (btnForceSourceSplitter.Selected && (_strSplitterFilter == "LAV Splitter Source" || _strSplitterFilter == "LAV Splitter"))" is 125.
Long Statement,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnVideo,The length of the statement  "        if (btnForceSourceSplitter.Selected && (_strSplitterFilter == "LAV Splitter Source" || _strSplitterFilter == "LAV Splitter"))" is 125.
Long Statement,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnDatabase,The length of the statement  "      GUISettingsMoviesDatabase dlg = (GUISettingsMoviesDatabase)GUIWindowManager.GetWindow((int)Window.WINDOW_SETTINGS_VIDEODATABASE);" is 129.
Long Statement,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnOtherSettings,The length of the statement  "      GUISettingsMoviesOther dlg = (GUISettingsMoviesOther)GUIWindowManager.GetWindow((int)Window.WINDOW_SETTINGS_VIDEOOTHERSETTINGS);" is 128.
Long Statement,WindowPlugins.GUISettings,GUISettingsGeneralMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral.cs,OnStartup,The length of the statement  "      GUISettingsGeneralStartup dlg = (GUISettingsGeneralStartup)GUIWindowManager.GetWindow((int)Window.WINDOW_SETTINGS_GENERALSTARTUP); " is 130.
Long Statement,WindowPlugins.GUISettings,GUISettingsGeneralMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral.cs,OnResume,The length of the statement  "      GUISettingsGeneralResume dlg = (GUISettingsGeneralResume)GUIWindowManager.GetWindow((int)Window.WINDOW_SETTINGS_GENERALRESUME); " is 127.
Long Statement,WindowPlugins.GUISettings,GUISettingsGeneralMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral.cs,OnVolume,The length of the statement  "      GUISettingsGeneralVolume dlg = (GUISettingsGeneralVolume)GUIWindowManager.GetWindow((int)Window.WINDOW_SETTINGS_GENERALVOLUME); " is 127.
Long Statement,WindowPlugins.GUISettings,GUISettingsGeneralMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral.cs,OnRefreshRate,The length of the statement  "      GUISettingsGeneralRefreshRate dlg = (GUISettingsGeneralRefreshRate)GUIWindowManager.GetWindow((int)Window.WINDOW_SETTINGS_GENERALREFRESHRATE); " is 142.
Long Statement,WindowPlugins.GUISettings,GUISettingsGUIMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI.cs,OnClicked,The length of the statement  "        GUISettingsGUIGeneral guiSettingsGUIGeneral = (GUISettingsGUIGeneral)GUIWindowManager.GetWindow((int)Window.WINDOW_SETTINGS_GUIGENERAL); " is 136.
Long Statement,WindowPlugins.GUISettings,GUISettingsGUIMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI.cs,OnClicked,The length of the statement  "        GUISettingsGUISkin guiSettingsGUISkin= (GUISettingsGUISkin)GUIWindowManager.GetWindow((int)Window.WINDOW_SETTINGS_GUISKIN); " is 123.
Long Statement,WindowPlugins.GUISettings,GUISettingsGUIMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI.cs,OnClicked,The length of the statement  "        GUISettingsGUIScreenSetup guiSettingsGUIScreenSetup = (GUISettingsGUIScreenSetup)GUIWindowManager.GetWindow((int)Window.WINDOW_SETTINGS_GUISCREENSETUP); " is 152.
Long Statement,WindowPlugins.GUISettings,GUISettingsGUIMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI.cs,OnClicked,The length of the statement  "        GUISettingsGUIScreenSaver guiSettingsGUIScreenSaver = (GUISettingsGUIScreenSaver)GUIWindowManager.GetWindow((int)Window.WINDOW_SETTINGS_GUISCREENSAVER); " is 152.
Long Statement,WindowPlugins.GUISettings,GUISettingsGUIMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI.cs,OnClicked,The length of the statement  "        GUISettingsGUIThumbnails guiSettingsThumbnails = (GUISettingsGUIThumbnails)GUIWindowManager.GetWindow((int)Window.WINDOW_SETTINGS_GUITHUMBNAILS); " is 145.
Long Statement,WindowPlugins.GUISettings,GUISettingsGUIMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI.cs,OnClicked,The length of the statement  "        GUISettingsGUISkipSteps guiSettingsSkipsteps = (GUISettingsGUISkipSteps)GUIWindowManager.GetWindow((int)Window.WINDOW_SETTINGS_GUISKIPSTEPS); " is 141.
Long Statement,WindowPlugins.GUISettings,GUISettingsGUIMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI.cs,OnClicked,The length of the statement  "        GUISettingsGUIOnScreenDisplay guiOnScreenDisplay = (GUISettingsGUIOnScreenDisplay)GUIWindowManager.GetWindow((int)Window.WINDOW_SETTINGS_GUIONSCREEN_DISPLAY); " is 158.
Long Statement,WindowPlugins.GUISettings,GUISettingsGUISkin,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Skin.cs,GetInstalledSkins,The length of the statement  "          installedSkins.AddRange(from skinDir in skinDirList let refFile = new FileInfo(Config.GetFile(Config.Dir.Skin' skinDir.Name' "references.xml")) where refFile.Exists select skinDir.Name); " is 186.
Long Statement,WindowPlugins.GUISettings,GUISettingsGUISkin,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Skin.cs,OnSkinChanged,The length of the statement  "              double ratio = Math.Min((double)(GUIGraphicsContext.currentScreen.WorkingArea.Width - border.Width) / GUIGraphicsContext.SkinSize.Width' " is 136.
Long Statement,WindowPlugins.GUISettings,GUISettingsGUISkin,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Skin.cs,OnSkinChanged,The length of the statement  "              GUIGraphicsContext.form.ClientSize = new Size((int)(GUIGraphicsContext.SkinSize.Width * ratio)' (int)(GUIGraphicsContext.SkinSize.Height * ratio)); " is 147.
Long Statement,MediaPortal.GUI.Settings,GUISettingsGeneralResume,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Resume.cs,GetScreens,The length of the statement  "                      adapter.CurrentDisplayMode.Height' adapter.Information.Description))' deviceId' adapter.Information.DeviceName.Trim()));" is 120.
Long Statement,MediaPortal.GUI.Settings,GUISettingsGeneralResume,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Resume.cs,GetScreens,The length of the statement  "                    adapter.CurrentDisplayMode.Height' adapter.Information.Description))' deviceId' adapter.Information.DeviceName.Trim()));" is 120.
Long Statement,MediaPortal.GUI.Settings,GUISettingsGeneralStartup,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Startup.cs,LoadSettings,The length of the statement  "        _cmIgnorefullscreenresolutionchanges.Selected = xmlreader.GetValueAsBool("general"' "ignorefullscreenresolutionchanges"' false);" is 128.
Long Statement,MediaPortal.GUI.Settings,GUISettingsGeneralStartup,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Startup.cs,SaveSettings,The length of the statement  "        xmlwriter.SetValueAsBool("general"' "ignorefullscreenresolutionchanges"' _cmIgnorefullscreenresolutionchanges.Selected);" is 120.
Long Statement,MediaPortal.GUI.Settings,GUISettingsGUI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_ScrollSpeed.cs,ResetExampleLabels,The length of the statement  "        "Lorem ipsum dolor sit amet' consectetur adipisicing elit' sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam' quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident' sunt in culpa qui officia deserunt mollit anim id est laborum.";" is 449.
Long Statement,MediaPortal.GUI.Settings,GUISettingsGUI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_ScrollSpeed.cs,ResetExampleLabels,The length of the statement  "        "Lorem ipsum dolor sit amet' consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet. Duis sagittis ipsum. Praesent mauris. Fusce nec tellus sed augue semper porta. Mauris massa. Vestibulum lacinia arcu eget nulla. Class aptent taciti sociosqu ad litora torquent per conubia nostra' per inceptos himenaeos. Curabitur sodales ligula in libero. Sed dignissim lacinia nunc.\n\n" + " is 468.
Long Statement,MediaPortal.GUI.Settings,GUISettingsGUI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_ScrollSpeed.cs,ResetExampleLabels,The length of the statement  "        "Curabitur tortor. Pellentesque nibh. Aenean quam. In scelerisque sem at dolor. Maecenas mattis. Sed convallis tristique sem. Proin ut ligula vel nunc egestas porttitor. Morbi lectus risus' iaculis vel' suscipit quis' luctus non' massa. Fusce ac turpis quis ligula lacinia aliquet. Mauris ipsum. Nulla metus metus' ullamcorper vel' tincidunt sed' euismod in' nibh. Quisque volutpat condimentum velit. Class aptent taciti sociosqu ad litora torquent per conubia nostra' per inceptos himenaeos. Nam nec ante.\n\n" + " is 513.
Long Statement,MediaPortal.GUI.Settings,GUISettingsGUI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_ScrollSpeed.cs,ResetExampleLabels,The length of the statement  "        "Sed lacinia' urna non tincidunt mattis' tortor neque adipiscing diam' a cursus ipsum ante quis turpis. Nulla facilisi. Ut fringilla. Suspendisse potenti. Nunc feugiat mi a tellus consequat imperdiet. Vestibulum sapien. Proin quam. Etiam ultrices. Suspendisse in justo eu magna luctus suscipit. Sed lectus. Integer euismod lacus luctus magna.\n\n" + " is 349.
Long Statement,MediaPortal.GUI.Settings,GUISettingsGUI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_ScrollSpeed.cs,ResetExampleLabels,The length of the statement  "        "Quisque cursus' metus vitae pharetra auctor' sem massa mattis sem' at interdum magna augue eget diam. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Morbi lacinia molestie dui. Praesent blandit dolor. Sed non quam. In vel mi sit amet augue congue elementum. Morbi in ipsum sit amet pede facilisis laoreet. Donec lacus nunc' viverra nec' blandit vel' egestas et' augue. Vestibulum tincidunt malesuada tellus. Ut ultrices ultrices enim. Curabitur sit amet mauris. Morbi in dui quis est pulvinar ullamcorper. Nulla facilisi. Integer lacinia sollicitudin massa.\n\n" + " is 606.
Long Statement,MediaPortal.GUI.Settings,GUISettingsGUI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_ScrollSpeed.cs,ResetExampleLabels,The length of the statement  "        "Cras metus. Sed aliquet risus a tortor. Integer id quam. Morbi mi. Quisque nisl felis' venenatis tristique' dignissim in' ultrices sit amet' augue. Proin sodales libero eget ante. Nulla quam. Aenean laoreet. Vestibulum nisi lectus' commodo ac' facilisis ac' ultricies eu' pede. Ut orci risus' accumsan porttitor' cursus quis' aliquet eget' justo. Sed pretium blandit orci.\n";" is 377.
Long Statement,MediaPortal.GUI.Settings,GUISettingsPlaylist,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_Playlist.cs,GetNetworkFolders,The length of the statement  "      if (string.IsNullOrEmpty(netShare) || !netShare.StartsWith(@"\\") || (netShare.StartsWith(@"\\") && netShare.Length <= 2)) " is 122.
Long Statement,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,LoadSettings,The length of the statement  "        _folderDefaultLayoutIndex = SettingsSharesHelper.ProperDefaultFromLayout(FolderInfo(_shareFolderListItem).DefaultLayout); " is 121.
Long Statement,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnClicked,The length of the statement  "        FolderInfo(_shareFolderListItem).DefaultLayout = SettingsSharesHelper.ProperLayoutFromDefault(_folderDefaultLayoutIndex); " is 121.
Long Statement,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnClicked,The length of the statement  "        FolderInfo(_shareFolderListItem).DefaultLayout = SettingsSharesHelper.ProperLayoutFromDefault(_folderDefaultLayoutIndex); " is 121.
Long Statement,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,Update,The length of the statement  "      _folderDefaultLayoutIndex = SettingsSharesHelper.ProperDefaultFromLayout(FolderInfo(_shareFolderListItem).DefaultLayout); " is 121.
Long Statement,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,GetNetworkFolders,The length of the statement  "      if (string.IsNullOrEmpty(netShare) || !netShare.StartsWith(@"\\") || (netShare.StartsWith(@"\\") && netShare.Length <= 2)) " is 122.
Long Statement,MediaPortal.GUI.Settings,GUISettingsMusic,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\GUISettingsMusic.cs,OnNowPlaying,The length of the statement  "      GUISettingsMusicNowPlaying dlg = (GUISettingsMusicNowPlaying)GUIWindowManager.GetWindow((int)Window.WINDOW_SETTINGS_MUSICNOWPLAYING); " is 133.
Long Statement,MediaPortal.GUI.Settings,GUISettingsMusic,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\GUISettingsMusic.cs,OnDatabase,The length of the statement  "      GUISettingsMusicDatabase dlg = (GUISettingsMusicDatabase)GUIWindowManager.GetWindow((int)Window.WINDOW_SETTINGS_MUSICDATABASE); " is 127.
Long Statement,MediaPortal.GUI.Settings,GUISettingsMusicDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\GUISettingsMusic_Database.cs,SetProperties,The length of the statement  "      GUIPropertyManager.SetProperty("#dateadded"' GUILocalizeStrings.Get(300025) + " " + (string)_dateAdded[_dateAddedSelectedIndex]);" is 129.
Long Statement,MediaPortal.GUI.Settings,MusicDatabaseReorg,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\MusicDatabaseReorg.cs,DeleteSingleAlbum,The length of the statement  "        strSQL = String.Format("delete from albuminfo where strAlbum='{0}' and strAlbumArtist = '{1} '"' strAlbum' strAlbumArtist); " is 123.
Long Statement,MediaPortal.GUI.Settings,GUISettingsPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures.cs,OnSlideShow,The length of the statement  "      GUISettingsPicturesSlideshow dlg = (GUISettingsPicturesSlideshow)GUIWindowManager.GetWindow((int)Window.WINDOW_SETTINGS_PICTURES_SLIDESHOW); " is 140.
Long Statement,MediaPortal.GUI.Settings,GUISettingsPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures.cs,OnDatabase,The length of the statement  "      GUISettingsPicturesDatabase dlg = (GUISettingsPicturesDatabase)GUIWindowManager.GetWindow((int)Window.WINDOW_SETTINGS_PICTURESDATABASE); " is 136.
Long Statement,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnUpdateGrabberScripts,The length of the statement  "      string internalActorsGrabberScriptUrl = @"http://install.team-mediaportal.com/MP1/InternalGrabber/InternalActorMoviesGrabber.csscript"; " is 135.
Long Statement,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnUpdateGrabberScripts,The length of the statement  "      string internalMovieImagesGrabberScriptFile = Config.GetFile(Config.Dir.Config' "scripts\\InternalMovieImagesGrabber.csscript"); " is 128.
Long Statement,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnUpdateGrabberScripts,The length of the statement  "      string internalMovieImagesGrabberScriptUrl = @"http://install.team-mediaportal.com/MP1/InternalGrabber/InternalMovieImagesGrabber.csscript"; " is 140.
Long Statement,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnScanDatabase,The length of the statement  "        else // User wants to scan no matter if movies are already in the database (do not use nfo here' user must set that option) " is 123.
Complex Conditional,MediaPortal.GUI.Settings,GUISettingsPlaylist,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_Playlist.cs,OnClicked,The conditional expression  "control == btnMusicautoshuffle || control == btnMusicloaddefault || control == btnMusicplaylistscreen ||            control == btnMusicrepeatplaylist || control == btnMusicsavecurrentasdefault ||             control == btnVideosrepeatplaylist"  is complex.
Complex Conditional,MediaPortal.GUI.Settings,GUISettingsPlaylist,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_Playlist.cs,GetNetworkFolders,The conditional expression  "string.IsNullOrEmpty(netShare) || !netShare.StartsWith(@"\\") || (netShare.StartsWith(@"\\") && netShare.Length <= 2)"  is complex.
Complex Conditional,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,GetNetworkFolders,The conditional expression  "string.IsNullOrEmpty(netShare) || !netShare.StartsWith(@"\\") || (netShare.StartsWith(@"\\") && netShare.Length <= 2)"  is complex.
Complex Conditional,MediaPortal.GUI.Settings,GUISettingsPicturesSlideshow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures_Slideshow.cs,OnClicked,The conditional expression  "control == cmLoopSlideShows ||             control == cmShuffleSlideShows ||             control == cmExifSlideShows ||            control == cmPicasaSlideShows ||             control == cmGroupByDaySlideShows ||             control == cmEnablePlaySlideShows ||            control == cmPlayInSlideShows ||             control == cmXfade ||             control == cmKenburns ||             control == cmRandom"  is complex.
Empty Catch Block,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,OnClicked,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Settings,GUISettingsGeneralStartup,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Startup.cs,SaveSettings,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Settings,GUISettingsGeneralStartup,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Startup.cs,SaveSettings,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Settings,GUISettingsPlaylist,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_Playlist.cs,LoadSettings,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Settings,GUISettingsPlaylist,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_Playlist.cs,GetFolders,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,GetFolders,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Settings,GUISettingsMusicDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\GUISettingsMusic_Database.cs,FolderScanThread,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Settings,GUISettingsPicturesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures_Database.cs,OnScanDatabaseThread,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Settings,GUISettingsPicturesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures_Database.cs,OnResetDatabase,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,DownloadFile,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,DeleteVideoThumbs,The method has an empty catch block.
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,LoadSettings,The following statement contains a magic number: i_ageLimit = xmlreader.GetValueAsInt("bdplayer"' "parentalcontrol"' 99);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              LoadSettings();              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_PARENTALAGELIMIT);              for (int i = 1; i <= 99; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_PARENTALAGELIMIT' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_PARENTALAGELIMIT' i_ageLimit - 1);                            return true;            }            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;              if (iControl == (int)Controls.CONTROL_PARENTALAGELIMIT)              {                string strLabel = message.Label;                i_ageLimit = Int32.Parse(strLabel);                GUIGraphicsContext.ScrollSpeedHorizontal = i_ageLimit;              }            }            break;        }
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(101024));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,OnVideo,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,OnVideo,The following statement contains a magic number: dlg.AddLocalizedString(6000);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,OnVideo,The following statement contains a magic number: dlg.AddLocalizedString(6036);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,OnVideo,The following statement contains a magic number: dlg.AddLocalizedString(300212);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,OnVideo,The following statement contains a magic number: dlg.AddLocalizedString(1029);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,OnVideo,The following statement contains a magic number: switch (dlg.SelectedId)          {            case 6000:              OnVideoCodec();              break;            case 6036:              OnH264VideoCodec();              break;            case 1029:              OnSubtitle();              break;            case 300212:              OnVC1();              break;          }
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,OnVideo,The following statement contains a magic number: switch (dlg.SelectedId)          {            case 6000:              OnVideoCodec();              break;            case 6036:              OnH264VideoCodec();              break;            case 1029:              OnSubtitle();              break;            case 300212:              OnVC1();              break;          }
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,OnVideo,The following statement contains a magic number: switch (dlg.SelectedId)          {            case 6000:              OnVideoCodec();              break;            case 6036:              OnH264VideoCodec();              break;            case 1029:              OnSubtitle();              break;            case 300212:              OnVC1();              break;          }
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,OnVideo,The following statement contains a magic number: switch (dlg.SelectedId)          {            case 6000:              OnVideoCodec();              break;            case 6036:              OnH264VideoCodec();              break;            case 1029:              OnSubtitle();              break;            case 300212:              OnVC1();              break;          }
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,OnAudio,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,OnAudio,The following statement contains a magic number: dlg.AddLocalizedString(6001);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,OnAudio,The following statement contains a magic number: dlg.AddLocalizedString(6002);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,OnAudio,The following statement contains a magic number: dlg.AddLocalizedString(492);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,OnAudio,The following statement contains a magic number: switch (dlg.SelectedId)          {            case 6001:              OnAudioCodec();              break;            case 6002:              OnAudioRenderer();              break;            case 492:              OnAudioLanguage();              break;          }
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,OnAudio,The following statement contains a magic number: switch (dlg.SelectedId)          {            case 6001:              OnAudioCodec();              break;            case 6002:              OnAudioRenderer();              break;            case 492:              OnAudioLanguage();              break;          }
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,OnAudio,The following statement contains a magic number: switch (dlg.SelectedId)          {            case 6001:              OnAudioCodec();              break;            case 6002:              OnAudioRenderer();              break;            case 492:              OnAudioLanguage();              break;          }
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,OnVideoCodec,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,OnH264VideoCodec,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,OnVC1,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,OnAudioCodec,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,OnAudioRenderer,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,OnSubtitle,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,OnAudioLanguage,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,OnRegion,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,OnAudioType,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(100704));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnVideo,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnVideo,The following statement contains a magic number: dlg.AddLocalizedString(1198);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnVideo,The following statement contains a magic number: dlg.AddLocalizedString(6000);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnVideo,The following statement contains a magic number: dlg.AddLocalizedString(6004);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnVideo,The following statement contains a magic number: dlg.AddLocalizedString(1029);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnVideo,The following statement contains a magic number: switch (dlg.SelectedId)          {            case 1198:              OnDVDNavigator();              break;            case 6000:              OnVideoCodec();              break;            case 6004:              OnAspectRatio();              break;            case 1029:              OnSubtitle();              break;          }
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnVideo,The following statement contains a magic number: switch (dlg.SelectedId)          {            case 1198:              OnDVDNavigator();              break;            case 6000:              OnVideoCodec();              break;            case 6004:              OnAspectRatio();              break;            case 1029:              OnSubtitle();              break;          }
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnVideo,The following statement contains a magic number: switch (dlg.SelectedId)          {            case 1198:              OnDVDNavigator();              break;            case 6000:              OnVideoCodec();              break;            case 6004:              OnAspectRatio();              break;            case 1029:              OnSubtitle();              break;          }
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnVideo,The following statement contains a magic number: switch (dlg.SelectedId)          {            case 1198:              OnDVDNavigator();              break;            case 6000:              OnVideoCodec();              break;            case 6004:              OnAspectRatio();              break;            case 1029:              OnSubtitle();              break;          }
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnAudio,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnAudio,The following statement contains a magic number: dlg.AddLocalizedString(6001);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnAudio,The following statement contains a magic number: dlg.AddLocalizedString(6002);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnAudio,The following statement contains a magic number: dlg.AddLocalizedString(492);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnAudio,The following statement contains a magic number: switch (dlg.SelectedId)          {            case 6001:              OnAudioCodec();              break;            case 6002:              OnAudioRenderer();              break;            case 492:              OnAudioLanguage();              break;          }
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnAudio,The following statement contains a magic number: switch (dlg.SelectedId)          {            case 6001:              OnAudioCodec();              break;            case 6002:              OnAudioRenderer();              break;            case 492:              OnAudioLanguage();              break;          }
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnAudio,The following statement contains a magic number: switch (dlg.SelectedId)          {            case 6001:              OnAudioCodec();              break;            case 6002:              OnAudioRenderer();              break;            case 492:              OnAudioLanguage();              break;          }
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnDVDNavigator,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnVideoCodec,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnAudioCodec,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnAspectRatio,The following statement contains a magic number: dlg.SetHeading(941);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnAspectRatio,The following statement contains a magic number: dlg.AddLocalizedString(300000);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnAspectRatio,The following statement contains a magic number: dlg.AddLocalizedString(300001);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnAspectRatio,The following statement contains a magic number: dlg.AddLocalizedString(300002);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnAspectRatio,The following statement contains a magic number: dlg.AddLocalizedString(300003);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnAspectRatio,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 300000:            OnPixelRatioCorrection();            break;          case 300001:            OnAspectRatioCorrectionMode();            break;          case 300002:            OnAspectRatioDisplayMode();            break;          case 300003:            OnAspectRatioZoomMode();            break;        }
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnAspectRatio,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 300000:            OnPixelRatioCorrection();            break;          case 300001:            OnAspectRatioCorrectionMode();            break;          case 300002:            OnAspectRatioDisplayMode();            break;          case 300003:            OnAspectRatioZoomMode();            break;        }
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnAspectRatio,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 300000:            OnPixelRatioCorrection();            break;          case 300001:            OnAspectRatioCorrectionMode();            break;          case 300002:            OnAspectRatioDisplayMode();            break;          case 300003:            OnAspectRatioZoomMode();            break;        }
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnAspectRatio,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 300000:            OnPixelRatioCorrection();            break;          case 300001:            OnAspectRatioCorrectionMode();            break;          case 300002:            OnAspectRatioDisplayMode();            break;          case 300003:            OnAspectRatioZoomMode();            break;        }
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnPixelRatioCorrection,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnPixelRatioCorrection,The following statement contains a magic number: dlg.AddLocalizedString(107);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnPixelRatioCorrection,The following statement contains a magic number: dlg.AddLocalizedString(106);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnAspectRatioCorrectionMode,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnAspectRatioDisplayMode,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnAspectRatioZoomMode,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnAspectRatioZoomMode,The following statement contains a magic number: dlg.AddLocalizedString(943);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnAspectRatioZoomMode,The following statement contains a magic number: dlg.AddLocalizedString(944);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnAspectRatioZoomMode,The following statement contains a magic number: dlg.AddLocalizedString(947);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnAspectRatioZoomMode,The following statement contains a magic number: dlg.AddLocalizedString(1190);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnAspectRatioZoomMode,The following statement contains a magic number: dlg.AddLocalizedString(942);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnAspectRatioZoomMode,The following statement contains a magic number: dlg.AddLocalizedString(945);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnAspectRatioZoomMode,The following statement contains a magic number: dlg.AddLocalizedString(946);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnAudioRenderer,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnSubtitle,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnAudioLanguage,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,LoadSettings,The following statement contains a magic number: _playAll = xmlreader.GetValueAsInt("movies"' "playallinfolder"' 3);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(100703));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnVideo,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnVideo,The following statement contains a magic number: dlg.AddLocalizedString(6000);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnVideo,The following statement contains a magic number: dlg.AddLocalizedString(6036);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnVideo,The following statement contains a magic number: dlg.AddLocalizedString(300212);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnVideo,The following statement contains a magic number: dlg.AddLocalizedString(300213);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnVideo,The following statement contains a magic number: dlg.AddLocalizedString(300214);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnVideo,The following statement contains a magic number: dlg.AddLocalizedString(300215);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnVideo,The following statement contains a magic number: dlg.AddLocalizedString(300216);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnVideo,The following statement contains a magic number: dlg.AddLocalizedString(6004);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnVideo,The following statement contains a magic number: dlg.AddLocalizedString(1029);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnVideo,The following statement contains a magic number: switch (dlg.SelectedId)         {           case 6000:             OnVideoCodec();             break;           case 6036:             OnH264VideoCodec();             break;           case 6004:             OnAspectRatio();             break;           case 1029:             OnSubtitle();             break;           case 300212:             OnVC1();             break;           case 300213:             OnVC1i();             break;           case 300214:             OnDivX();             break;           case 300215:             OnSplitter();             break;           case 300216:             OnSplitterFilesync();             break;         }
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnVideo,The following statement contains a magic number: switch (dlg.SelectedId)         {           case 6000:             OnVideoCodec();             break;           case 6036:             OnH264VideoCodec();             break;           case 6004:             OnAspectRatio();             break;           case 1029:             OnSubtitle();             break;           case 300212:             OnVC1();             break;           case 300213:             OnVC1i();             break;           case 300214:             OnDivX();             break;           case 300215:             OnSplitter();             break;           case 300216:             OnSplitterFilesync();             break;         }
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnVideo,The following statement contains a magic number: switch (dlg.SelectedId)         {           case 6000:             OnVideoCodec();             break;           case 6036:             OnH264VideoCodec();             break;           case 6004:             OnAspectRatio();             break;           case 1029:             OnSubtitle();             break;           case 300212:             OnVC1();             break;           case 300213:             OnVC1i();             break;           case 300214:             OnDivX();             break;           case 300215:             OnSplitter();             break;           case 300216:             OnSplitterFilesync();             break;         }
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnVideo,The following statement contains a magic number: switch (dlg.SelectedId)         {           case 6000:             OnVideoCodec();             break;           case 6036:             OnH264VideoCodec();             break;           case 6004:             OnAspectRatio();             break;           case 1029:             OnSubtitle();             break;           case 300212:             OnVC1();             break;           case 300213:             OnVC1i();             break;           case 300214:             OnDivX();             break;           case 300215:             OnSplitter();             break;           case 300216:             OnSplitterFilesync();             break;         }
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnVideo,The following statement contains a magic number: switch (dlg.SelectedId)         {           case 6000:             OnVideoCodec();             break;           case 6036:             OnH264VideoCodec();             break;           case 6004:             OnAspectRatio();             break;           case 1029:             OnSubtitle();             break;           case 300212:             OnVC1();             break;           case 300213:             OnVC1i();             break;           case 300214:             OnDivX();             break;           case 300215:             OnSplitter();             break;           case 300216:             OnSplitterFilesync();             break;         }
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnVideo,The following statement contains a magic number: switch (dlg.SelectedId)         {           case 6000:             OnVideoCodec();             break;           case 6036:             OnH264VideoCodec();             break;           case 6004:             OnAspectRatio();             break;           case 1029:             OnSubtitle();             break;           case 300212:             OnVC1();             break;           case 300213:             OnVC1i();             break;           case 300214:             OnDivX();             break;           case 300215:             OnSplitter();             break;           case 300216:             OnSplitterFilesync();             break;         }
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnVideo,The following statement contains a magic number: switch (dlg.SelectedId)         {           case 6000:             OnVideoCodec();             break;           case 6036:             OnH264VideoCodec();             break;           case 6004:             OnAspectRatio();             break;           case 1029:             OnSubtitle();             break;           case 300212:             OnVC1();             break;           case 300213:             OnVC1i();             break;           case 300214:             OnDivX();             break;           case 300215:             OnSplitter();             break;           case 300216:             OnSplitterFilesync();             break;         }
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnVideo,The following statement contains a magic number: switch (dlg.SelectedId)         {           case 6000:             OnVideoCodec();             break;           case 6036:             OnH264VideoCodec();             break;           case 6004:             OnAspectRatio();             break;           case 1029:             OnSubtitle();             break;           case 300212:             OnVC1();             break;           case 300213:             OnVC1i();             break;           case 300214:             OnDivX();             break;           case 300215:             OnSplitter();             break;           case 300216:             OnSplitterFilesync();             break;         }
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnVideo,The following statement contains a magic number: switch (dlg.SelectedId)         {           case 6000:             OnVideoCodec();             break;           case 6036:             OnH264VideoCodec();             break;           case 6004:             OnAspectRatio();             break;           case 1029:             OnSubtitle();             break;           case 300212:             OnVC1();             break;           case 300213:             OnVC1i();             break;           case 300214:             OnDivX();             break;           case 300215:             OnSplitter();             break;           case 300216:             OnSplitterFilesync();             break;         }
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnAudio,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnAudio,The following statement contains a magic number: dlg.AddLocalizedString(6001);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnAudio,The following statement contains a magic number: dlg.AddLocalizedString(6039);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnAudio,The following statement contains a magic number: dlg.AddLocalizedString(6002);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnAudio,The following statement contains a magic number: dlg.AddLocalizedString(492);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnAudio,The following statement contains a magic number: switch (dlg.SelectedId)         {           case 6001:             OnAudioCodec();             break;           case 6039:             OnAACAudioCodec();             break;           case 6002:             OnAudioRenderer();             break;           case 492:             OnAudioLanguage();             break;         }
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnAudio,The following statement contains a magic number: switch (dlg.SelectedId)         {           case 6001:             OnAudioCodec();             break;           case 6039:             OnAACAudioCodec();             break;           case 6002:             OnAudioRenderer();             break;           case 492:             OnAudioLanguage();             break;         }
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnAudio,The following statement contains a magic number: switch (dlg.SelectedId)         {           case 6001:             OnAudioCodec();             break;           case 6039:             OnAACAudioCodec();             break;           case 6002:             OnAudioRenderer();             break;           case 492:             OnAudioLanguage();             break;         }
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnAudio,The following statement contains a magic number: switch (dlg.SelectedId)         {           case 6001:             OnAudioCodec();             break;           case 6039:             OnAACAudioCodec();             break;           case 6002:             OnAudioRenderer();             break;           case 492:             OnAudioLanguage();             break;         }
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnVideoCodec,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnH264VideoCodec,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnVC1,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnVC1i,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnDivX,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnAudioCodec,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnAspectRatio,The following statement contains a magic number: dlg.SetHeading(941);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnAspectRatio,The following statement contains a magic number: dlg.AddLocalizedString(943);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnAspectRatio,The following statement contains a magic number: dlg.AddLocalizedString(944);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnAspectRatio,The following statement contains a magic number: dlg.AddLocalizedString(947);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnAspectRatio,The following statement contains a magic number: dlg.AddLocalizedString(1190);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnAspectRatio,The following statement contains a magic number: dlg.AddLocalizedString(942);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnAspectRatio,The following statement contains a magic number: dlg.AddLocalizedString(945);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnAspectRatio,The following statement contains a magic number: dlg.AddLocalizedString(946);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnAudioRenderer,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnAACAudioCodec,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnSubtitle,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnAudioLanguage,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnSplitter,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnSplitterFilesync,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnPlayAllVideos,The following statement contains a magic number: dlg.SetHeading(300060);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnPlayAllVideos,The following statement contains a magic number: dlg.AddLocalizedString(300027);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnPlayAllVideos,The following statement contains a magic number: dlg.AddLocalizedString(300028);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnPlayAllVideos,The following statement contains a magic number: dlg.AddLocalizedString(191);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnPlayAllVideos,The following statement contains a magic number: dlg.AddLocalizedString(300029);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsTv,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\TV\GUISettingsTv.cs,OnVideoCodec,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsTv,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\TV\GUISettingsTv.cs,OnH264VideoCodec,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsTv,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\TV\GUISettingsTv.cs,OnAudioCodec,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsTv,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\TV\GUISettingsTv.cs,OnAACAudioCodec,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsTv,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\TV\GUISettingsTv.cs,OnAspectRatio,The following statement contains a magic number: dlg.SetHeading(941);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsTv,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\TV\GUISettingsTv.cs,OnAspectRatio,The following statement contains a magic number: dlg.AddLocalizedString(942);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsTv,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\TV\GUISettingsTv.cs,OnAspectRatio,The following statement contains a magic number: dlg.AddLocalizedString(943);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsTv,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\TV\GUISettingsTv.cs,OnAspectRatio,The following statement contains a magic number: dlg.AddLocalizedString(944);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsTv,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\TV\GUISettingsTv.cs,OnAspectRatio,The following statement contains a magic number: dlg.AddLocalizedString(945);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsTv,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\TV\GUISettingsTv.cs,OnAspectRatio,The following statement contains a magic number: dlg.AddLocalizedString(946);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsTv,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\TV\GUISettingsTv.cs,OnAspectRatio,The following statement contains a magic number: dlg.AddLocalizedString(947);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsTv,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\TV\GUISettingsTv.cs,OnAspectRatio,The following statement contains a magic number: dlg.AddLocalizedString(1190);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsTv,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\TV\GUISettingsTv.cs,OnDeinterlace,The following statement contains a magic number: deInterlaceMode = xmlreader.GetValueAsInt("mytv"' "deinterlace"' 3);
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsTv,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\TV\GUISettingsTv.cs,OnDeinterlace,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsTv,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\TV\GUISettingsTv.cs,OnAutoTurnOnTv,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsTv,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\TV\GUISettingsTv.cs,OnAutoTurnOnTv,The following statement contains a magic number: dlg.Add(GUILocalizeStrings.Get(775));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsTv,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\TV\GUISettingsTv.cs,OnAutoTurnOnTv,The following statement contains a magic number: dlg.Add(GUILocalizeStrings.Get(776));
Magic Number,WindowPlugins.GUISettings.TV,GUISettingsTv,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\TV\GUISettingsTv.cs,OnAudioRenderer,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(101016));
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral.cs,OnAutoPlay,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(713));
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral.cs,OnAutoPlay,The following statement contains a magic number: dlg.AddLocalizedString(2135);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral.cs,OnAutoPlay,The following statement contains a magic number: dlg.AddLocalizedString(2134);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral.cs,OnAutoPlay,The following statement contains a magic number: dlg.AddLocalizedString(300006);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral.cs,OnAutoPlay,The following statement contains a magic number: switch (dlg.SelectedId)          {            case 2135: // Audio            case 2134: // Video            case 300006: // Photo              OnPlay(dlg.SelectedId);              break;          }
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral.cs,OnAutoPlay,The following statement contains a magic number: switch (dlg.SelectedId)          {            case 2135: // Audio            case 2134: // Video            case 300006: // Photo              OnPlay(dlg.SelectedId);              break;          }
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral.cs,OnAutoPlay,The following statement contains a magic number: switch (dlg.SelectedId)          {            case 2135: // Audio            case 2134: // Video            case 300006: // Photo              OnPlay(dlg.SelectedId);              break;          }
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral.cs,OnPlay,The following statement contains a magic number: type == 2135
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral.cs,OnPlay,The following statement contains a magic number: type == 2134
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral.cs,OnPlay,The following statement contains a magic number: type == 300006
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral.cs,OnPlay,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral.cs,OnPlay,The following statement contains a magic number: dlg.AddLocalizedString(208);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral.cs,OnPlay,The following statement contains a magic number: dlg.AddLocalizedString(300007);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral.cs,OnPlay,The following statement contains a magic number: dlg.AddLocalizedString(300008);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral.cs,OnPlay,The following statement contains a magic number: switch (strHowToPlay)        {          case "Yes":            dlg.SelectedLabel = 0;            break;          case "No":            dlg.SelectedLabel = 1;            break;          case "Ask":            dlg.SelectedLabel = 2;            break;          default:            dlg.SelectedLabel = 2;            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral.cs,OnPlay,The following statement contains a magic number: switch (strHowToPlay)        {          case "Yes":            dlg.SelectedLabel = 0;            break;          case "No":            dlg.SelectedLabel = 1;            break;          case "Ask":            dlg.SelectedLabel = 2;            break;          default:            dlg.SelectedLabel = 2;            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral.cs,OnPlay,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 208: // Play            strHowToPlay = "Yes";            break;          case 300007: // Do not play            strHowToPlay = "No";            break;          case 300008: // Ask what to do            strHowToPlay = "Ask";            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral.cs,OnPlay,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 208: // Play            strHowToPlay = "Yes";            break;          case 300007: // Do not play            strHowToPlay = "No";            break;          case 300008: // Ask what to do            strHowToPlay = "Ask";            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral.cs,OnPlay,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 208: // Play            strHowToPlay = "Yes";            break;          case 300007: // Do not play            strHowToPlay = "No";            break;          case 300008: // Ask what to do            strHowToPlay = "Ask";            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralMP,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_GeneralMP.cs,LoadSettings,The following statement contains a magic number: _iDelay = xmlreader.GetValueAsInt("general"' "restart delay"' 10);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralMP,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_GeneralMP.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              LoadSettings();                GUIControl.ClearControl(GetID' (int)Controls.CONTROL_DELAYINSEC);                            for (int i = 1; i <= 100; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_DELAYINSEC' i.ToString());              }                GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_DELAYINSEC' _iDelay - 1);                return true;            }            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;              if (iControl == (int)Controls.CONTROL_DELAYINSEC)              {                string strLabel = message.Label;                _iDelay = Int32.Parse(strLabel);                SettingsChanged(true);              }            }            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralMP,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_GeneralMP.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(101018));
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralMP,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_GeneralMP.cs,OnLog,The following statement contains a magic number: dlg.SetHeading(496);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralMP,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_GeneralMP.cs,OnProcess,The following statement contains a magic number: dlg.SetHeading(496);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,LoadSettings,The following statement contains a magic number: p = new String[4];
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,LoadSettings,The following statement contains a magic number: p[2] = hz;
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,LoadSettings,The following statement contains a magic number: p[3] = extCmd;
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,LoadSettings,The following statement contains a magic number: i < 100
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,LoadSettings,The following statement contains a magic number: i < 100
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,SaveSettings,The following statement contains a magic number: i < 100
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(101008));
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: string[] p = new String[4];
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: p[2] = "23";
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: p[3] = "";
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: RefreshRateData refreshRateData = new RefreshRateData(p[0]' p[1]' p[2]' p[3]);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: RefreshRateData refreshRateData = new RefreshRateData(p[0]' p[1]' p[2]' p[3]);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: p = new String[4];
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: p[2] = "24";
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: p[3] = "";
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: refreshRateData = new RefreshRateData(p[0]' p[1]' p[2]' p[3]);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: refreshRateData = new RefreshRateData(p[0]' p[1]' p[2]' p[3]);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: p = new String[4];
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: p[2] = "50";
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: p[3] = "";
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: refreshRateData = new RefreshRateData(p[0]' p[1]' p[2]' p[3]);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: refreshRateData = new RefreshRateData(p[0]' p[1]' p[2]' p[3]);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: p = new String[4];
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: p[2] = "50";
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: p[3] = "";
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: refreshRateData = new RefreshRateData(p[0]' p[1]' p[2]' p[3]);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: refreshRateData = new RefreshRateData(p[0]' p[1]' p[2]' p[3]);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: p = new String[4];
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: p[2] = "59";
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: p[3] = "";
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: refreshRateData = new RefreshRateData(p[0]' p[1]' p[2]' p[3]);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: refreshRateData = new RefreshRateData(p[0]' p[1]' p[2]' p[3]);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: p = new String[4];
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: p[2] = "59";
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: p[3] = "";
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: refreshRateData = new RefreshRateData(p[0]' p[1]' p[2]' p[3]);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: refreshRateData = new RefreshRateData(p[0]' p[1]' p[2]' p[3]);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: p = new String[4];
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: p[2] = "60";
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: p[3] = "";
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: refreshRateData = new RefreshRateData(p[0]' p[1]' p[2]' p[3]);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: refreshRateData = new RefreshRateData(p[0]' p[1]' p[2]' p[3]);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: p = new String[4];
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: p[2] = "60";
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: p[3] = "";
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: refreshRateData = new RefreshRateData(p[0]' p[1]' p[2]' p[3]);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: refreshRateData = new RefreshRateData(p[0]' p[1]' p[2]' p[3]);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: String[] parameters = new String[4];
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: parameters = new String[4];
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: parameters[2] = tvHz;
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: parameters[3] = tvExtCmd;
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: refreshRateData = new RefreshRateData(parameters[0]' parameters[1]' parameters[2]' parameters[3]);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: refreshRateData = new RefreshRateData(parameters[0]' parameters[1]' parameters[2]' parameters[3]);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,InsertDefaultValues,The following statement contains a magic number: i < 100
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,OnAddItem,The following statement contains a magic number: dlg.SetHeading(496);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,OnAddItem,The following statement contains a magic number: dlg.AddLocalizedString(300009);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,OnAddItem,The following statement contains a magic number: dlg.AddLocalizedString(300010);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,OnAddItem,The following statement contains a magic number: dlg.AddLocalizedString(300011);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,OnAddItem,The following statement contains a magic number: dlg.AddLocalizedString(300012);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,OnAddItem,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 300009:           OnAddName();           break;         case 300010:           OnAddFPS();           break;         case 300011:           OnAddRefreshRate();           break;         case 300012:           OnAddAction();           break;       }
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,OnAddItem,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 300009:           OnAddName();           break;         case 300010:           OnAddFPS();           break;         case 300011:           OnAddRefreshRate();           break;         case 300012:           OnAddAction();           break;       }
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,OnAddItem,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 300009:           OnAddName();           break;         case 300010:           OnAddFPS();           break;         case 300011:           OnAddRefreshRate();           break;         case 300012:           OnAddAction();           break;       }
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,OnAddItem,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 300009:           OnAddName();           break;         case 300010:           OnAddFPS();           break;         case 300011:           OnAddRefreshRate();           break;         case 300012:           OnAddAction();           break;       }
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,OnAddName,The following statement contains a magic number: dlgNotify.SetHeading(GUILocalizeStrings.Get(257));
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,OnAddName,The following statement contains a magic number: dlgNotify.SetText(GUILocalizeStrings.Get(300013));
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,OnEditItem,The following statement contains a magic number: dlg.SetHeading(496);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,OnEditItem,The following statement contains a magic number: dlg.AddLocalizedString(300009);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,OnEditItem,The following statement contains a magic number: dlg.AddLocalizedString(300010);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,OnEditItem,The following statement contains a magic number: dlg.AddLocalizedString(300011);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,OnEditItem,The following statement contains a magic number: dlg.AddLocalizedString(300012);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,OnEditItem,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 300009:           OnEditName();           break;         case 300010:           OnEditFPS();           break;         case 300011:           OnEditRefreshRate();           break;         case 300012:           OnEditAction();           break;       }
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,OnEditItem,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 300009:           OnEditName();           break;         case 300010:           OnEditFPS();           break;         case 300011:           OnEditRefreshRate();           break;         case 300012:           OnEditAction();           break;       }
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,OnEditItem,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 300009:           OnEditName();           break;         case 300010:           OnEditFPS();           break;         case 300011:           OnEditRefreshRate();           break;         case 300012:           OnEditAction();           break;       }
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,OnEditItem,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 300009:           OnEditName();           break;         case 300010:           OnEditFPS();           break;         case 300011:           OnEditRefreshRate();           break;         case 300012:           OnEditAction();           break;       }
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,OnEditName,The following statement contains a magic number: dlgNotify.SetHeading(GUILocalizeStrings.Get(257));
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,OnEditName,The following statement contains a magic number: dlgNotify.SetText(GUILocalizeStrings.Get(300013));
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,OnSelectDefaultRefreshRate,The following statement contains a magic number: dlg.SetHeading(496);
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralVolume,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Volume.cs,LoadSettings,The following statement contains a magic number: btnLogarithmic.Selected= volumeStyle == 2;
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralVolume,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Volume.cs,LoadSettings,The following statement contains a magic number: btnCustom.Selected = volumeStyle == 3;
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralVolume,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Volume.cs,LoadSettings,The following statement contains a magic number: btnVistaWin7.Selected = volumeStyle == 4;
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralVolume,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Volume.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(101007));
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralVolume,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Volume.cs,ValidateCustomTable,The following statement contains a magic number: valueArray.Add(Math.Max(0' Math.Min(65535' Convert.ToInt32(token))));
Magic Number,WindowPlugins.GUISettings,GUISettingsGeneralVolume,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Volume.cs,ValidateCustomTable,The following statement contains a magic number: valueArray.Count < 2
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI.cs,OnClicked,The following statement contains a magic number: dlgOK.SetLine(1' 100513);
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI.cs,OnClicked,The following statement contains a magic number: dlgOK2.SetLine(1' 100514);
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(101021));
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIGeneral,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_General.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(101022));
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIGeneral,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_General.cs,OnHomeUsage,The following statement contains a magic number: dlg.SetHeading(496);
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIOnScreenDisplay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_OnScreenDisplay.cs,LoadSettings,The following statement contains a magic number: _zapDelay = xmlreader.GetValueAsInt("movieplayer"' "zapdelay"' 2);
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIOnScreenDisplay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_OnScreenDisplay.cs,LoadSettings,The following statement contains a magic number: _zapTimeout = xmlreader.GetValueAsInt("movieplayer"' "zaptimeout"' 5);
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIOnScreenDisplay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_OnScreenDisplay.cs,OnClicked,The following statement contains a magic number: GetStringFromKeyboard(ref getNumber' 2);
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIOnScreenDisplay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_OnScreenDisplay.cs,OnClicked,The following statement contains a magic number: GetStringFromKeyboard(ref getNumber' 2);
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIOnScreenDisplay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_OnScreenDisplay.cs,OnClicked,The following statement contains a magic number: GetStringFromKeyboard(ref getNumber' 2);
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIOnScreenDisplay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_OnScreenDisplay.cs,OnClicked,The following statement contains a magic number: GetStringFromKeyboard(ref getNumber' 2);
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIOnScreenDisplay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_OnScreenDisplay.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(101006));
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIOnScreenDisplay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_OnScreenDisplay.cs,SetProperties,The following statement contains a magic number: GUIPropertyManager.SetProperty("#displayTimeout"' _displayTimeout + " " + GUILocalizeStrings.Get(2999));
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIOnScreenDisplay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_OnScreenDisplay.cs,SetProperties,The following statement contains a magic number: GUIPropertyManager.SetProperty("#zapDelay"' _zapDelay + " " + GUILocalizeStrings.Get(2999));
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIOnScreenDisplay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_OnScreenDisplay.cs,SetProperties,The following statement contains a magic number: GUIPropertyManager.SetProperty("#zapTimeout"' _zapTimeout + " " + GUILocalizeStrings.Get(2999));
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIOnScreenDisplay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_OnScreenDisplay.cs,SetProperties,The following statement contains a magic number: GUIPropertyManager.SetProperty("#zapKeyTimeout"' _zapKeyTimeout + " " + GUILocalizeStrings.Get(2999));
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIScreenSaver,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_ScreenSaver.cs,LoadSettings,The following statement contains a magic number: _screenSaverDelay = xmlreader.GetValueAsInt("general"' "IdleTimeValue"' 300);
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIScreenSaver,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_ScreenSaver.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);                for (int i = 1; i <= 10000; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_SCREENSAVER_DELAY' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_SCREENSAVER_DELAY' _screenSaverDelay - 1);            }            return true;              case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;              if (iControl == (int)Controls.CONTROL_SCREENSAVER_DELAY)              {                string strLabel = message.Label;                _screenSaverDelay = Int32.Parse(strLabel);                GUIGraphicsContext.ScrollSpeedHorizontal = _screenSaverDelay;                SettingsChanged(true);              }              break;            }        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIScreenSaver,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_ScreenSaver.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(101020));
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkin,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Skin.cs,OnClicked,The following statement contains a magic number: dlg.SetHeading(166);
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkin,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Skin.cs,OnClicked,The following statement contains a magic number: dlg.SetHeading(248);
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkin,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Skin.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(100705));
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,LoadSettings,The following statement contains a magic number: _timeOutValue = xmlreader.GetValueAsInt("movieplayer"' "skipsteptimeout"' 1500);
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,LoadSettings,The following statement contains a magic number: _skipValue = xmlreader.GetValueAsInt("movieplayer"' "immediateskipstepsize"' 10);
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(100708));
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,SetCheckMarksBasedOnString,The following statement contains a magic number: switch (step)            {              case 5:                check1 = true;                break;              case 15:                check2 = true;                break;              case 30:                check3 = true;                break;              case 45:                check4 = true;                break;              case 60:                check5 = true;                break;              case 180:                check6 = true;                break;              case 300:                check7 = true;                break;              case 420:                check8 = true;                break;              case 600:                check9 = true;                break;              case 900:                check10 = true;                break;              case 1800:                check11 = true;                break;              case 2700:                check12 = true;                break;              case 3600:                check13 = true;                break;              case 5400:                check14 = true;                break;              case 7200:                check15 = true;                break;              case 10800:                check16 = true;                break;              default:                break; // Do nothing            }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,SetCheckMarksBasedOnString,The following statement contains a magic number: switch (step)            {              case 5:                check1 = true;                break;              case 15:                check2 = true;                break;              case 30:                check3 = true;                break;              case 45:                check4 = true;                break;              case 60:                check5 = true;                break;              case 180:                check6 = true;                break;              case 300:                check7 = true;                break;              case 420:                check8 = true;                break;              case 600:                check9 = true;                break;              case 900:                check10 = true;                break;              case 1800:                check11 = true;                break;              case 2700:                check12 = true;                break;              case 3600:                check13 = true;                break;              case 5400:                check14 = true;                break;              case 7200:                check15 = true;                break;              case 10800:                check16 = true;                break;              default:                break; // Do nothing            }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,SetCheckMarksBasedOnString,The following statement contains a magic number: switch (step)            {              case 5:                check1 = true;                break;              case 15:                check2 = true;                break;              case 30:                check3 = true;                break;              case 45:                check4 = true;                break;              case 60:                check5 = true;                break;              case 180:                check6 = true;                break;              case 300:                check7 = true;                break;              case 420:                check8 = true;                break;              case 600:                check9 = true;                break;              case 900:                check10 = true;                break;              case 1800:                check11 = true;                break;              case 2700:                check12 = true;                break;              case 3600:                check13 = true;                break;              case 5400:                check14 = true;                break;              case 7200:                check15 = true;                break;              case 10800:                check16 = true;                break;              default:                break; // Do nothing            }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,SetCheckMarksBasedOnString,The following statement contains a magic number: switch (step)            {              case 5:                check1 = true;                break;              case 15:                check2 = true;                break;              case 30:                check3 = true;                break;              case 45:                check4 = true;                break;              case 60:                check5 = true;                break;              case 180:                check6 = true;                break;              case 300:                check7 = true;                break;              case 420:                check8 = true;                break;              case 600:                check9 = true;                break;              case 900:                check10 = true;                break;              case 1800:                check11 = true;                break;              case 2700:                check12 = true;                break;              case 3600:                check13 = true;                break;              case 5400:                check14 = true;                break;              case 7200:                check15 = true;                break;              case 10800:                check16 = true;                break;              default:                break; // Do nothing            }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,SetCheckMarksBasedOnString,The following statement contains a magic number: switch (step)            {              case 5:                check1 = true;                break;              case 15:                check2 = true;                break;              case 30:                check3 = true;                break;              case 45:                check4 = true;                break;              case 60:                check5 = true;                break;              case 180:                check6 = true;                break;              case 300:                check7 = true;                break;              case 420:                check8 = true;                break;              case 600:                check9 = true;                break;              case 900:                check10 = true;                break;              case 1800:                check11 = true;                break;              case 2700:                check12 = true;                break;              case 3600:                check13 = true;                break;              case 5400:                check14 = true;                break;              case 7200:                check15 = true;                break;              case 10800:                check16 = true;                break;              default:                break; // Do nothing            }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,SetCheckMarksBasedOnString,The following statement contains a magic number: switch (step)            {              case 5:                check1 = true;                break;              case 15:                check2 = true;                break;              case 30:                check3 = true;                break;              case 45:                check4 = true;                break;              case 60:                check5 = true;                break;              case 180:                check6 = true;                break;              case 300:                check7 = true;                break;              case 420:                check8 = true;                break;              case 600:                check9 = true;                break;              case 900:                check10 = true;                break;              case 1800:                check11 = true;                break;              case 2700:                check12 = true;                break;              case 3600:                check13 = true;                break;              case 5400:                check14 = true;                break;              case 7200:                check15 = true;                break;              case 10800:                check16 = true;                break;              default:                break; // Do nothing            }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,SetCheckMarksBasedOnString,The following statement contains a magic number: switch (step)            {              case 5:                check1 = true;                break;              case 15:                check2 = true;                break;              case 30:                check3 = true;                break;              case 45:                check4 = true;                break;              case 60:                check5 = true;                break;              case 180:                check6 = true;                break;              case 300:                check7 = true;                break;              case 420:                check8 = true;                break;              case 600:                check9 = true;                break;              case 900:                check10 = true;                break;              case 1800:                check11 = true;                break;              case 2700:                check12 = true;                break;              case 3600:                check13 = true;                break;              case 5400:                check14 = true;                break;              case 7200:                check15 = true;                break;              case 10800:                check16 = true;                break;              default:                break; // Do nothing            }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,SetCheckMarksBasedOnString,The following statement contains a magic number: switch (step)            {              case 5:                check1 = true;                break;              case 15:                check2 = true;                break;              case 30:                check3 = true;                break;              case 45:                check4 = true;                break;              case 60:                check5 = true;                break;              case 180:                check6 = true;                break;              case 300:                check7 = true;                break;              case 420:                check8 = true;                break;              case 600:                check9 = true;                break;              case 900:                check10 = true;                break;              case 1800:                check11 = true;                break;              case 2700:                check12 = true;                break;              case 3600:                check13 = true;                break;              case 5400:                check14 = true;                break;              case 7200:                check15 = true;                break;              case 10800:                check16 = true;                break;              default:                break; // Do nothing            }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,SetCheckMarksBasedOnString,The following statement contains a magic number: switch (step)            {              case 5:                check1 = true;                break;              case 15:                check2 = true;                break;              case 30:                check3 = true;                break;              case 45:                check4 = true;                break;              case 60:                check5 = true;                break;              case 180:                check6 = true;                break;              case 300:                check7 = true;                break;              case 420:                check8 = true;                break;              case 600:                check9 = true;                break;              case 900:                check10 = true;                break;              case 1800:                check11 = true;                break;              case 2700:                check12 = true;                break;              case 3600:                check13 = true;                break;              case 5400:                check14 = true;                break;              case 7200:                check15 = true;                break;              case 10800:                check16 = true;                break;              default:                break; // Do nothing            }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,SetCheckMarksBasedOnString,The following statement contains a magic number: switch (step)            {              case 5:                check1 = true;                break;              case 15:                check2 = true;                break;              case 30:                check3 = true;                break;              case 45:                check4 = true;                break;              case 60:                check5 = true;                break;              case 180:                check6 = true;                break;              case 300:                check7 = true;                break;              case 420:                check8 = true;                break;              case 600:                check9 = true;                break;              case 900:                check10 = true;                break;              case 1800:                check11 = true;                break;              case 2700:                check12 = true;                break;              case 3600:                check13 = true;                break;              case 5400:                check14 = true;                break;              case 7200:                check15 = true;                break;              case 10800:                check16 = true;                break;              default:                break; // Do nothing            }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,SetCheckMarksBasedOnString,The following statement contains a magic number: switch (step)            {              case 5:                check1 = true;                break;              case 15:                check2 = true;                break;              case 30:                check3 = true;                break;              case 45:                check4 = true;                break;              case 60:                check5 = true;                break;              case 180:                check6 = true;                break;              case 300:                check7 = true;                break;              case 420:                check8 = true;                break;              case 600:                check9 = true;                break;              case 900:                check10 = true;                break;              case 1800:                check11 = true;                break;              case 2700:                check12 = true;                break;              case 3600:                check13 = true;                break;              case 5400:                check14 = true;                break;              case 7200:                check15 = true;                break;              case 10800:                check16 = true;                break;              default:                break; // Do nothing            }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,SetCheckMarksBasedOnString,The following statement contains a magic number: switch (step)            {              case 5:                check1 = true;                break;              case 15:                check2 = true;                break;              case 30:                check3 = true;                break;              case 45:                check4 = true;                break;              case 60:                check5 = true;                break;              case 180:                check6 = true;                break;              case 300:                check7 = true;                break;              case 420:                check8 = true;                break;              case 600:                check9 = true;                break;              case 900:                check10 = true;                break;              case 1800:                check11 = true;                break;              case 2700:                check12 = true;                break;              case 3600:                check13 = true;                break;              case 5400:                check14 = true;                break;              case 7200:                check15 = true;                break;              case 10800:                check16 = true;                break;              default:                break; // Do nothing            }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,SetCheckMarksBasedOnString,The following statement contains a magic number: switch (step)            {              case 5:                check1 = true;                break;              case 15:                check2 = true;                break;              case 30:                check3 = true;                break;              case 45:                check4 = true;                break;              case 60:                check5 = true;                break;              case 180:                check6 = true;                break;              case 300:                check7 = true;                break;              case 420:                check8 = true;                break;              case 600:                check9 = true;                break;              case 900:                check10 = true;                break;              case 1800:                check11 = true;                break;              case 2700:                check12 = true;                break;              case 3600:                check13 = true;                break;              case 5400:                check14 = true;                break;              case 7200:                check15 = true;                break;              case 10800:                check16 = true;                break;              default:                break; // Do nothing            }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,SetCheckMarksBasedOnString,The following statement contains a magic number: switch (step)            {              case 5:                check1 = true;                break;              case 15:                check2 = true;                break;              case 30:                check3 = true;                break;              case 45:                check4 = true;                break;              case 60:                check5 = true;                break;              case 180:                check6 = true;                break;              case 300:                check7 = true;                break;              case 420:                check8 = true;                break;              case 600:                check9 = true;                break;              case 900:                check10 = true;                break;              case 1800:                check11 = true;                break;              case 2700:                check12 = true;                break;              case 3600:                check13 = true;                break;              case 5400:                check14 = true;                break;              case 7200:                check15 = true;                break;              case 10800:                check16 = true;                break;              default:                break; // Do nothing            }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,SetCheckMarksBasedOnString,The following statement contains a magic number: switch (step)            {              case 5:                check1 = true;                break;              case 15:                check2 = true;                break;              case 30:                check3 = true;                break;              case 45:                check4 = true;                break;              case 60:                check5 = true;                break;              case 180:                check6 = true;                break;              case 300:                check7 = true;                break;              case 420:                check8 = true;                break;              case 600:                check9 = true;                break;              case 900:                check10 = true;                break;              case 1800:                check11 = true;                break;              case 2700:                check12 = true;                break;              case 3600:                check13 = true;                break;              case 5400:                check14 = true;                break;              case 7200:                check15 = true;                break;              case 10800:                check16 = true;                break;              default:                break; // Do nothing            }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,SetCheckMarksBasedOnString,The following statement contains a magic number: switch (step)            {              case 5:                check1 = true;                break;              case 15:                check2 = true;                break;              case 30:                check3 = true;                break;              case 45:                check4 = true;                break;              case 60:                check5 = true;                break;              case 180:                check6 = true;                break;              case 300:                check7 = true;                break;              case 420:                check8 = true;                break;              case 600:                check9 = true;                break;              case 900:                check10 = true;                break;              case 1800:                check11 = true;                break;              case 2700:                check12 = true;                break;              case 3600:                check13 = true;                break;              case 5400:                check14 = true;                break;              case 7200:                check15 = true;                break;              case 10800:                check16 = true;                break;              default:                break; // Do nothing            }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,AddStep,The following statement contains a magic number: switch (stepsize)        {          case 5:            checkMarkButtonStep1.Selected = true;            break;          case 15:            checkMarkButtonStep2.Selected = true;            break;          case 30:            checkMarkButtonStep3.Selected = true;            break;          case 45:            checkMarkButtonStep4.Selected = true;            break;          case 60:            checkMarkButtonStep5.Selected = true;            break;          case 180:            checkMarkButtonStep6.Selected = true;            break;          case 300:            checkMarkButtonStep7.Selected = true;            break;          case 420:            checkMarkButtonStep8.Selected = true;            break;          case 600:            checkMarkButtonStep9.Selected = true;            break;          case 900:            checkMarkButtonStep10.Selected = true;            break;          case 1800:            checkMarkButtonStep11.Selected = true;            break;          case 2700:            checkMarkButtonStep12.Selected = true;            break;          case 3600:            checkMarkButtonStep13.Selected = true;            break;          case 5400:            checkMarkButtonStep14.Selected = true;            break;          case 7200:            checkMarkButtonStep15.Selected = true;            break;          case 10800:            checkMarkButtonStep16.Selected = true;            break;          default:            break; // Do nothing        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,AddStep,The following statement contains a magic number: switch (stepsize)        {          case 5:            checkMarkButtonStep1.Selected = true;            break;          case 15:            checkMarkButtonStep2.Selected = true;            break;          case 30:            checkMarkButtonStep3.Selected = true;            break;          case 45:            checkMarkButtonStep4.Selected = true;            break;          case 60:            checkMarkButtonStep5.Selected = true;            break;          case 180:            checkMarkButtonStep6.Selected = true;            break;          case 300:            checkMarkButtonStep7.Selected = true;            break;          case 420:            checkMarkButtonStep8.Selected = true;            break;          case 600:            checkMarkButtonStep9.Selected = true;            break;          case 900:            checkMarkButtonStep10.Selected = true;            break;          case 1800:            checkMarkButtonStep11.Selected = true;            break;          case 2700:            checkMarkButtonStep12.Selected = true;            break;          case 3600:            checkMarkButtonStep13.Selected = true;            break;          case 5400:            checkMarkButtonStep14.Selected = true;            break;          case 7200:            checkMarkButtonStep15.Selected = true;            break;          case 10800:            checkMarkButtonStep16.Selected = true;            break;          default:            break; // Do nothing        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,AddStep,The following statement contains a magic number: switch (stepsize)        {          case 5:            checkMarkButtonStep1.Selected = true;            break;          case 15:            checkMarkButtonStep2.Selected = true;            break;          case 30:            checkMarkButtonStep3.Selected = true;            break;          case 45:            checkMarkButtonStep4.Selected = true;            break;          case 60:            checkMarkButtonStep5.Selected = true;            break;          case 180:            checkMarkButtonStep6.Selected = true;            break;          case 300:            checkMarkButtonStep7.Selected = true;            break;          case 420:            checkMarkButtonStep8.Selected = true;            break;          case 600:            checkMarkButtonStep9.Selected = true;            break;          case 900:            checkMarkButtonStep10.Selected = true;            break;          case 1800:            checkMarkButtonStep11.Selected = true;            break;          case 2700:            checkMarkButtonStep12.Selected = true;            break;          case 3600:            checkMarkButtonStep13.Selected = true;            break;          case 5400:            checkMarkButtonStep14.Selected = true;            break;          case 7200:            checkMarkButtonStep15.Selected = true;            break;          case 10800:            checkMarkButtonStep16.Selected = true;            break;          default:            break; // Do nothing        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,AddStep,The following statement contains a magic number: switch (stepsize)        {          case 5:            checkMarkButtonStep1.Selected = true;            break;          case 15:            checkMarkButtonStep2.Selected = true;            break;          case 30:            checkMarkButtonStep3.Selected = true;            break;          case 45:            checkMarkButtonStep4.Selected = true;            break;          case 60:            checkMarkButtonStep5.Selected = true;            break;          case 180:            checkMarkButtonStep6.Selected = true;            break;          case 300:            checkMarkButtonStep7.Selected = true;            break;          case 420:            checkMarkButtonStep8.Selected = true;            break;          case 600:            checkMarkButtonStep9.Selected = true;            break;          case 900:            checkMarkButtonStep10.Selected = true;            break;          case 1800:            checkMarkButtonStep11.Selected = true;            break;          case 2700:            checkMarkButtonStep12.Selected = true;            break;          case 3600:            checkMarkButtonStep13.Selected = true;            break;          case 5400:            checkMarkButtonStep14.Selected = true;            break;          case 7200:            checkMarkButtonStep15.Selected = true;            break;          case 10800:            checkMarkButtonStep16.Selected = true;            break;          default:            break; // Do nothing        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,AddStep,The following statement contains a magic number: switch (stepsize)        {          case 5:            checkMarkButtonStep1.Selected = true;            break;          case 15:            checkMarkButtonStep2.Selected = true;            break;          case 30:            checkMarkButtonStep3.Selected = true;            break;          case 45:            checkMarkButtonStep4.Selected = true;            break;          case 60:            checkMarkButtonStep5.Selected = true;            break;          case 180:            checkMarkButtonStep6.Selected = true;            break;          case 300:            checkMarkButtonStep7.Selected = true;            break;          case 420:            checkMarkButtonStep8.Selected = true;            break;          case 600:            checkMarkButtonStep9.Selected = true;            break;          case 900:            checkMarkButtonStep10.Selected = true;            break;          case 1800:            checkMarkButtonStep11.Selected = true;            break;          case 2700:            checkMarkButtonStep12.Selected = true;            break;          case 3600:            checkMarkButtonStep13.Selected = true;            break;          case 5400:            checkMarkButtonStep14.Selected = true;            break;          case 7200:            checkMarkButtonStep15.Selected = true;            break;          case 10800:            checkMarkButtonStep16.Selected = true;            break;          default:            break; // Do nothing        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,AddStep,The following statement contains a magic number: switch (stepsize)        {          case 5:            checkMarkButtonStep1.Selected = true;            break;          case 15:            checkMarkButtonStep2.Selected = true;            break;          case 30:            checkMarkButtonStep3.Selected = true;            break;          case 45:            checkMarkButtonStep4.Selected = true;            break;          case 60:            checkMarkButtonStep5.Selected = true;            break;          case 180:            checkMarkButtonStep6.Selected = true;            break;          case 300:            checkMarkButtonStep7.Selected = true;            break;          case 420:            checkMarkButtonStep8.Selected = true;            break;          case 600:            checkMarkButtonStep9.Selected = true;            break;          case 900:            checkMarkButtonStep10.Selected = true;            break;          case 1800:            checkMarkButtonStep11.Selected = true;            break;          case 2700:            checkMarkButtonStep12.Selected = true;            break;          case 3600:            checkMarkButtonStep13.Selected = true;            break;          case 5400:            checkMarkButtonStep14.Selected = true;            break;          case 7200:            checkMarkButtonStep15.Selected = true;            break;          case 10800:            checkMarkButtonStep16.Selected = true;            break;          default:            break; // Do nothing        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,AddStep,The following statement contains a magic number: switch (stepsize)        {          case 5:            checkMarkButtonStep1.Selected = true;            break;          case 15:            checkMarkButtonStep2.Selected = true;            break;          case 30:            checkMarkButtonStep3.Selected = true;            break;          case 45:            checkMarkButtonStep4.Selected = true;            break;          case 60:            checkMarkButtonStep5.Selected = true;            break;          case 180:            checkMarkButtonStep6.Selected = true;            break;          case 300:            checkMarkButtonStep7.Selected = true;            break;          case 420:            checkMarkButtonStep8.Selected = true;            break;          case 600:            checkMarkButtonStep9.Selected = true;            break;          case 900:            checkMarkButtonStep10.Selected = true;            break;          case 1800:            checkMarkButtonStep11.Selected = true;            break;          case 2700:            checkMarkButtonStep12.Selected = true;            break;          case 3600:            checkMarkButtonStep13.Selected = true;            break;          case 5400:            checkMarkButtonStep14.Selected = true;            break;          case 7200:            checkMarkButtonStep15.Selected = true;            break;          case 10800:            checkMarkButtonStep16.Selected = true;            break;          default:            break; // Do nothing        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,AddStep,The following statement contains a magic number: switch (stepsize)        {          case 5:            checkMarkButtonStep1.Selected = true;            break;          case 15:            checkMarkButtonStep2.Selected = true;            break;          case 30:            checkMarkButtonStep3.Selected = true;            break;          case 45:            checkMarkButtonStep4.Selected = true;            break;          case 60:            checkMarkButtonStep5.Selected = true;            break;          case 180:            checkMarkButtonStep6.Selected = true;            break;          case 300:            checkMarkButtonStep7.Selected = true;            break;          case 420:            checkMarkButtonStep8.Selected = true;            break;          case 600:            checkMarkButtonStep9.Selected = true;            break;          case 900:            checkMarkButtonStep10.Selected = true;            break;          case 1800:            checkMarkButtonStep11.Selected = true;            break;          case 2700:            checkMarkButtonStep12.Selected = true;            break;          case 3600:            checkMarkButtonStep13.Selected = true;            break;          case 5400:            checkMarkButtonStep14.Selected = true;            break;          case 7200:            checkMarkButtonStep15.Selected = true;            break;          case 10800:            checkMarkButtonStep16.Selected = true;            break;          default:            break; // Do nothing        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,AddStep,The following statement contains a magic number: switch (stepsize)        {          case 5:            checkMarkButtonStep1.Selected = true;            break;          case 15:            checkMarkButtonStep2.Selected = true;            break;          case 30:            checkMarkButtonStep3.Selected = true;            break;          case 45:            checkMarkButtonStep4.Selected = true;            break;          case 60:            checkMarkButtonStep5.Selected = true;            break;          case 180:            checkMarkButtonStep6.Selected = true;            break;          case 300:            checkMarkButtonStep7.Selected = true;            break;          case 420:            checkMarkButtonStep8.Selected = true;            break;          case 600:            checkMarkButtonStep9.Selected = true;            break;          case 900:            checkMarkButtonStep10.Selected = true;            break;          case 1800:            checkMarkButtonStep11.Selected = true;            break;          case 2700:            checkMarkButtonStep12.Selected = true;            break;          case 3600:            checkMarkButtonStep13.Selected = true;            break;          case 5400:            checkMarkButtonStep14.Selected = true;            break;          case 7200:            checkMarkButtonStep15.Selected = true;            break;          case 10800:            checkMarkButtonStep16.Selected = true;            break;          default:            break; // Do nothing        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,AddStep,The following statement contains a magic number: switch (stepsize)        {          case 5:            checkMarkButtonStep1.Selected = true;            break;          case 15:            checkMarkButtonStep2.Selected = true;            break;          case 30:            checkMarkButtonStep3.Selected = true;            break;          case 45:            checkMarkButtonStep4.Selected = true;            break;          case 60:            checkMarkButtonStep5.Selected = true;            break;          case 180:            checkMarkButtonStep6.Selected = true;            break;          case 300:            checkMarkButtonStep7.Selected = true;            break;          case 420:            checkMarkButtonStep8.Selected = true;            break;          case 600:            checkMarkButtonStep9.Selected = true;            break;          case 900:            checkMarkButtonStep10.Selected = true;            break;          case 1800:            checkMarkButtonStep11.Selected = true;            break;          case 2700:            checkMarkButtonStep12.Selected = true;            break;          case 3600:            checkMarkButtonStep13.Selected = true;            break;          case 5400:            checkMarkButtonStep14.Selected = true;            break;          case 7200:            checkMarkButtonStep15.Selected = true;            break;          case 10800:            checkMarkButtonStep16.Selected = true;            break;          default:            break; // Do nothing        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,AddStep,The following statement contains a magic number: switch (stepsize)        {          case 5:            checkMarkButtonStep1.Selected = true;            break;          case 15:            checkMarkButtonStep2.Selected = true;            break;          case 30:            checkMarkButtonStep3.Selected = true;            break;          case 45:            checkMarkButtonStep4.Selected = true;            break;          case 60:            checkMarkButtonStep5.Selected = true;            break;          case 180:            checkMarkButtonStep6.Selected = true;            break;          case 300:            checkMarkButtonStep7.Selected = true;            break;          case 420:            checkMarkButtonStep8.Selected = true;            break;          case 600:            checkMarkButtonStep9.Selected = true;            break;          case 900:            checkMarkButtonStep10.Selected = true;            break;          case 1800:            checkMarkButtonStep11.Selected = true;            break;          case 2700:            checkMarkButtonStep12.Selected = true;            break;          case 3600:            checkMarkButtonStep13.Selected = true;            break;          case 5400:            checkMarkButtonStep14.Selected = true;            break;          case 7200:            checkMarkButtonStep15.Selected = true;            break;          case 10800:            checkMarkButtonStep16.Selected = true;            break;          default:            break; // Do nothing        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,AddStep,The following statement contains a magic number: switch (stepsize)        {          case 5:            checkMarkButtonStep1.Selected = true;            break;          case 15:            checkMarkButtonStep2.Selected = true;            break;          case 30:            checkMarkButtonStep3.Selected = true;            break;          case 45:            checkMarkButtonStep4.Selected = true;            break;          case 60:            checkMarkButtonStep5.Selected = true;            break;          case 180:            checkMarkButtonStep6.Selected = true;            break;          case 300:            checkMarkButtonStep7.Selected = true;            break;          case 420:            checkMarkButtonStep8.Selected = true;            break;          case 600:            checkMarkButtonStep9.Selected = true;            break;          case 900:            checkMarkButtonStep10.Selected = true;            break;          case 1800:            checkMarkButtonStep11.Selected = true;            break;          case 2700:            checkMarkButtonStep12.Selected = true;            break;          case 3600:            checkMarkButtonStep13.Selected = true;            break;          case 5400:            checkMarkButtonStep14.Selected = true;            break;          case 7200:            checkMarkButtonStep15.Selected = true;            break;          case 10800:            checkMarkButtonStep16.Selected = true;            break;          default:            break; // Do nothing        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,AddStep,The following statement contains a magic number: switch (stepsize)        {          case 5:            checkMarkButtonStep1.Selected = true;            break;          case 15:            checkMarkButtonStep2.Selected = true;            break;          case 30:            checkMarkButtonStep3.Selected = true;            break;          case 45:            checkMarkButtonStep4.Selected = true;            break;          case 60:            checkMarkButtonStep5.Selected = true;            break;          case 180:            checkMarkButtonStep6.Selected = true;            break;          case 300:            checkMarkButtonStep7.Selected = true;            break;          case 420:            checkMarkButtonStep8.Selected = true;            break;          case 600:            checkMarkButtonStep9.Selected = true;            break;          case 900:            checkMarkButtonStep10.Selected = true;            break;          case 1800:            checkMarkButtonStep11.Selected = true;            break;          case 2700:            checkMarkButtonStep12.Selected = true;            break;          case 3600:            checkMarkButtonStep13.Selected = true;            break;          case 5400:            checkMarkButtonStep14.Selected = true;            break;          case 7200:            checkMarkButtonStep15.Selected = true;            break;          case 10800:            checkMarkButtonStep16.Selected = true;            break;          default:            break; // Do nothing        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,AddStep,The following statement contains a magic number: switch (stepsize)        {          case 5:            checkMarkButtonStep1.Selected = true;            break;          case 15:            checkMarkButtonStep2.Selected = true;            break;          case 30:            checkMarkButtonStep3.Selected = true;            break;          case 45:            checkMarkButtonStep4.Selected = true;            break;          case 60:            checkMarkButtonStep5.Selected = true;            break;          case 180:            checkMarkButtonStep6.Selected = true;            break;          case 300:            checkMarkButtonStep7.Selected = true;            break;          case 420:            checkMarkButtonStep8.Selected = true;            break;          case 600:            checkMarkButtonStep9.Selected = true;            break;          case 900:            checkMarkButtonStep10.Selected = true;            break;          case 1800:            checkMarkButtonStep11.Selected = true;            break;          case 2700:            checkMarkButtonStep12.Selected = true;            break;          case 3600:            checkMarkButtonStep13.Selected = true;            break;          case 5400:            checkMarkButtonStep14.Selected = true;            break;          case 7200:            checkMarkButtonStep15.Selected = true;            break;          case 10800:            checkMarkButtonStep16.Selected = true;            break;          default:            break; // Do nothing        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,AddStep,The following statement contains a magic number: switch (stepsize)        {          case 5:            checkMarkButtonStep1.Selected = true;            break;          case 15:            checkMarkButtonStep2.Selected = true;            break;          case 30:            checkMarkButtonStep3.Selected = true;            break;          case 45:            checkMarkButtonStep4.Selected = true;            break;          case 60:            checkMarkButtonStep5.Selected = true;            break;          case 180:            checkMarkButtonStep6.Selected = true;            break;          case 300:            checkMarkButtonStep7.Selected = true;            break;          case 420:            checkMarkButtonStep8.Selected = true;            break;          case 600:            checkMarkButtonStep9.Selected = true;            break;          case 900:            checkMarkButtonStep10.Selected = true;            break;          case 1800:            checkMarkButtonStep11.Selected = true;            break;          case 2700:            checkMarkButtonStep12.Selected = true;            break;          case 3600:            checkMarkButtonStep13.Selected = true;            break;          case 5400:            checkMarkButtonStep14.Selected = true;            break;          case 7200:            checkMarkButtonStep15.Selected = true;            break;          case 10800:            checkMarkButtonStep16.Selected = true;            break;          default:            break; // Do nothing        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,AddStep,The following statement contains a magic number: switch (stepsize)        {          case 5:            checkMarkButtonStep1.Selected = true;            break;          case 15:            checkMarkButtonStep2.Selected = true;            break;          case 30:            checkMarkButtonStep3.Selected = true;            break;          case 45:            checkMarkButtonStep4.Selected = true;            break;          case 60:            checkMarkButtonStep5.Selected = true;            break;          case 180:            checkMarkButtonStep6.Selected = true;            break;          case 300:            checkMarkButtonStep7.Selected = true;            break;          case 420:            checkMarkButtonStep8.Selected = true;            break;          case 600:            checkMarkButtonStep9.Selected = true;            break;          case 900:            checkMarkButtonStep10.Selected = true;            break;          case 1800:            checkMarkButtonStep11.Selected = true;            break;          case 2700:            checkMarkButtonStep12.Selected = true;            break;          case 3600:            checkMarkButtonStep13.Selected = true;            break;          case 5400:            checkMarkButtonStep14.Selected = true;            break;          case 7200:            checkMarkButtonStep15.Selected = true;            break;          case 10800:            checkMarkButtonStep16.Selected = true;            break;          default:            break; // Do nothing        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,RemoveStep,The following statement contains a magic number: switch (stepsize)        {          case 5:            checkMarkButtonStep1.Selected = false;            break;          case 15:            checkMarkButtonStep2.Selected = false;            break;          case 30:            checkMarkButtonStep3.Selected = false;            break;          case 45:            checkMarkButtonStep4.Selected = false;            break;          case 60:            checkMarkButtonStep5.Selected = false;            break;          case 180:            checkMarkButtonStep6.Selected = false;            break;          case 300:            checkMarkButtonStep7.Selected = false;            break;          case 420:            checkMarkButtonStep8.Selected = false;            break;          case 600:            checkMarkButtonStep9.Selected = false;            break;          case 900:            checkMarkButtonStep10.Selected = false;            break;          case 1800:            checkMarkButtonStep11.Selected = false;            break;          case 2700:            checkMarkButtonStep12.Selected = false;            break;          case 3600:            checkMarkButtonStep13.Selected = false;            break;          case 5400:            checkMarkButtonStep14.Selected = false;            break;          case 7200:            checkMarkButtonStep15.Selected = false;            break;          case 10800:            checkMarkButtonStep16.Selected = false;            break;          default:            break; // Do nothing        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,RemoveStep,The following statement contains a magic number: switch (stepsize)        {          case 5:            checkMarkButtonStep1.Selected = false;            break;          case 15:            checkMarkButtonStep2.Selected = false;            break;          case 30:            checkMarkButtonStep3.Selected = false;            break;          case 45:            checkMarkButtonStep4.Selected = false;            break;          case 60:            checkMarkButtonStep5.Selected = false;            break;          case 180:            checkMarkButtonStep6.Selected = false;            break;          case 300:            checkMarkButtonStep7.Selected = false;            break;          case 420:            checkMarkButtonStep8.Selected = false;            break;          case 600:            checkMarkButtonStep9.Selected = false;            break;          case 900:            checkMarkButtonStep10.Selected = false;            break;          case 1800:            checkMarkButtonStep11.Selected = false;            break;          case 2700:            checkMarkButtonStep12.Selected = false;            break;          case 3600:            checkMarkButtonStep13.Selected = false;            break;          case 5400:            checkMarkButtonStep14.Selected = false;            break;          case 7200:            checkMarkButtonStep15.Selected = false;            break;          case 10800:            checkMarkButtonStep16.Selected = false;            break;          default:            break; // Do nothing        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,RemoveStep,The following statement contains a magic number: switch (stepsize)        {          case 5:            checkMarkButtonStep1.Selected = false;            break;          case 15:            checkMarkButtonStep2.Selected = false;            break;          case 30:            checkMarkButtonStep3.Selected = false;            break;          case 45:            checkMarkButtonStep4.Selected = false;            break;          case 60:            checkMarkButtonStep5.Selected = false;            break;          case 180:            checkMarkButtonStep6.Selected = false;            break;          case 300:            checkMarkButtonStep7.Selected = false;            break;          case 420:            checkMarkButtonStep8.Selected = false;            break;          case 600:            checkMarkButtonStep9.Selected = false;            break;          case 900:            checkMarkButtonStep10.Selected = false;            break;          case 1800:            checkMarkButtonStep11.Selected = false;            break;          case 2700:            checkMarkButtonStep12.Selected = false;            break;          case 3600:            checkMarkButtonStep13.Selected = false;            break;          case 5400:            checkMarkButtonStep14.Selected = false;            break;          case 7200:            checkMarkButtonStep15.Selected = false;            break;          case 10800:            checkMarkButtonStep16.Selected = false;            break;          default:            break; // Do nothing        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,RemoveStep,The following statement contains a magic number: switch (stepsize)        {          case 5:            checkMarkButtonStep1.Selected = false;            break;          case 15:            checkMarkButtonStep2.Selected = false;            break;          case 30:            checkMarkButtonStep3.Selected = false;            break;          case 45:            checkMarkButtonStep4.Selected = false;            break;          case 60:            checkMarkButtonStep5.Selected = false;            break;          case 180:            checkMarkButtonStep6.Selected = false;            break;          case 300:            checkMarkButtonStep7.Selected = false;            break;          case 420:            checkMarkButtonStep8.Selected = false;            break;          case 600:            checkMarkButtonStep9.Selected = false;            break;          case 900:            checkMarkButtonStep10.Selected = false;            break;          case 1800:            checkMarkButtonStep11.Selected = false;            break;          case 2700:            checkMarkButtonStep12.Selected = false;            break;          case 3600:            checkMarkButtonStep13.Selected = false;            break;          case 5400:            checkMarkButtonStep14.Selected = false;            break;          case 7200:            checkMarkButtonStep15.Selected = false;            break;          case 10800:            checkMarkButtonStep16.Selected = false;            break;          default:            break; // Do nothing        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,RemoveStep,The following statement contains a magic number: switch (stepsize)        {          case 5:            checkMarkButtonStep1.Selected = false;            break;          case 15:            checkMarkButtonStep2.Selected = false;            break;          case 30:            checkMarkButtonStep3.Selected = false;            break;          case 45:            checkMarkButtonStep4.Selected = false;            break;          case 60:            checkMarkButtonStep5.Selected = false;            break;          case 180:            checkMarkButtonStep6.Selected = false;            break;          case 300:            checkMarkButtonStep7.Selected = false;            break;          case 420:            checkMarkButtonStep8.Selected = false;            break;          case 600:            checkMarkButtonStep9.Selected = false;            break;          case 900:            checkMarkButtonStep10.Selected = false;            break;          case 1800:            checkMarkButtonStep11.Selected = false;            break;          case 2700:            checkMarkButtonStep12.Selected = false;            break;          case 3600:            checkMarkButtonStep13.Selected = false;            break;          case 5400:            checkMarkButtonStep14.Selected = false;            break;          case 7200:            checkMarkButtonStep15.Selected = false;            break;          case 10800:            checkMarkButtonStep16.Selected = false;            break;          default:            break; // Do nothing        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,RemoveStep,The following statement contains a magic number: switch (stepsize)        {          case 5:            checkMarkButtonStep1.Selected = false;            break;          case 15:            checkMarkButtonStep2.Selected = false;            break;          case 30:            checkMarkButtonStep3.Selected = false;            break;          case 45:            checkMarkButtonStep4.Selected = false;            break;          case 60:            checkMarkButtonStep5.Selected = false;            break;          case 180:            checkMarkButtonStep6.Selected = false;            break;          case 300:            checkMarkButtonStep7.Selected = false;            break;          case 420:            checkMarkButtonStep8.Selected = false;            break;          case 600:            checkMarkButtonStep9.Selected = false;            break;          case 900:            checkMarkButtonStep10.Selected = false;            break;          case 1800:            checkMarkButtonStep11.Selected = false;            break;          case 2700:            checkMarkButtonStep12.Selected = false;            break;          case 3600:            checkMarkButtonStep13.Selected = false;            break;          case 5400:            checkMarkButtonStep14.Selected = false;            break;          case 7200:            checkMarkButtonStep15.Selected = false;            break;          case 10800:            checkMarkButtonStep16.Selected = false;            break;          default:            break; // Do nothing        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,RemoveStep,The following statement contains a magic number: switch (stepsize)        {          case 5:            checkMarkButtonStep1.Selected = false;            break;          case 15:            checkMarkButtonStep2.Selected = false;            break;          case 30:            checkMarkButtonStep3.Selected = false;            break;          case 45:            checkMarkButtonStep4.Selected = false;            break;          case 60:            checkMarkButtonStep5.Selected = false;            break;          case 180:            checkMarkButtonStep6.Selected = false;            break;          case 300:            checkMarkButtonStep7.Selected = false;            break;          case 420:            checkMarkButtonStep8.Selected = false;            break;          case 600:            checkMarkButtonStep9.Selected = false;            break;          case 900:            checkMarkButtonStep10.Selected = false;            break;          case 1800:            checkMarkButtonStep11.Selected = false;            break;          case 2700:            checkMarkButtonStep12.Selected = false;            break;          case 3600:            checkMarkButtonStep13.Selected = false;            break;          case 5400:            checkMarkButtonStep14.Selected = false;            break;          case 7200:            checkMarkButtonStep15.Selected = false;            break;          case 10800:            checkMarkButtonStep16.Selected = false;            break;          default:            break; // Do nothing        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,RemoveStep,The following statement contains a magic number: switch (stepsize)        {          case 5:            checkMarkButtonStep1.Selected = false;            break;          case 15:            checkMarkButtonStep2.Selected = false;            break;          case 30:            checkMarkButtonStep3.Selected = false;            break;          case 45:            checkMarkButtonStep4.Selected = false;            break;          case 60:            checkMarkButtonStep5.Selected = false;            break;          case 180:            checkMarkButtonStep6.Selected = false;            break;          case 300:            checkMarkButtonStep7.Selected = false;            break;          case 420:            checkMarkButtonStep8.Selected = false;            break;          case 600:            checkMarkButtonStep9.Selected = false;            break;          case 900:            checkMarkButtonStep10.Selected = false;            break;          case 1800:            checkMarkButtonStep11.Selected = false;            break;          case 2700:            checkMarkButtonStep12.Selected = false;            break;          case 3600:            checkMarkButtonStep13.Selected = false;            break;          case 5400:            checkMarkButtonStep14.Selected = false;            break;          case 7200:            checkMarkButtonStep15.Selected = false;            break;          case 10800:            checkMarkButtonStep16.Selected = false;            break;          default:            break; // Do nothing        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,RemoveStep,The following statement contains a magic number: switch (stepsize)        {          case 5:            checkMarkButtonStep1.Selected = false;            break;          case 15:            checkMarkButtonStep2.Selected = false;            break;          case 30:            checkMarkButtonStep3.Selected = false;            break;          case 45:            checkMarkButtonStep4.Selected = false;            break;          case 60:            checkMarkButtonStep5.Selected = false;            break;          case 180:            checkMarkButtonStep6.Selected = false;            break;          case 300:            checkMarkButtonStep7.Selected = false;            break;          case 420:            checkMarkButtonStep8.Selected = false;            break;          case 600:            checkMarkButtonStep9.Selected = false;            break;          case 900:            checkMarkButtonStep10.Selected = false;            break;          case 1800:            checkMarkButtonStep11.Selected = false;            break;          case 2700:            checkMarkButtonStep12.Selected = false;            break;          case 3600:            checkMarkButtonStep13.Selected = false;            break;          case 5400:            checkMarkButtonStep14.Selected = false;            break;          case 7200:            checkMarkButtonStep15.Selected = false;            break;          case 10800:            checkMarkButtonStep16.Selected = false;            break;          default:            break; // Do nothing        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,RemoveStep,The following statement contains a magic number: switch (stepsize)        {          case 5:            checkMarkButtonStep1.Selected = false;            break;          case 15:            checkMarkButtonStep2.Selected = false;            break;          case 30:            checkMarkButtonStep3.Selected = false;            break;          case 45:            checkMarkButtonStep4.Selected = false;            break;          case 60:            checkMarkButtonStep5.Selected = false;            break;          case 180:            checkMarkButtonStep6.Selected = false;            break;          case 300:            checkMarkButtonStep7.Selected = false;            break;          case 420:            checkMarkButtonStep8.Selected = false;            break;          case 600:            checkMarkButtonStep9.Selected = false;            break;          case 900:            checkMarkButtonStep10.Selected = false;            break;          case 1800:            checkMarkButtonStep11.Selected = false;            break;          case 2700:            checkMarkButtonStep12.Selected = false;            break;          case 3600:            checkMarkButtonStep13.Selected = false;            break;          case 5400:            checkMarkButtonStep14.Selected = false;            break;          case 7200:            checkMarkButtonStep15.Selected = false;            break;          case 10800:            checkMarkButtonStep16.Selected = false;            break;          default:            break; // Do nothing        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,RemoveStep,The following statement contains a magic number: switch (stepsize)        {          case 5:            checkMarkButtonStep1.Selected = false;            break;          case 15:            checkMarkButtonStep2.Selected = false;            break;          case 30:            checkMarkButtonStep3.Selected = false;            break;          case 45:            checkMarkButtonStep4.Selected = false;            break;          case 60:            checkMarkButtonStep5.Selected = false;            break;          case 180:            checkMarkButtonStep6.Selected = false;            break;          case 300:            checkMarkButtonStep7.Selected = false;            break;          case 420:            checkMarkButtonStep8.Selected = false;            break;          case 600:            checkMarkButtonStep9.Selected = false;            break;          case 900:            checkMarkButtonStep10.Selected = false;            break;          case 1800:            checkMarkButtonStep11.Selected = false;            break;          case 2700:            checkMarkButtonStep12.Selected = false;            break;          case 3600:            checkMarkButtonStep13.Selected = false;            break;          case 5400:            checkMarkButtonStep14.Selected = false;            break;          case 7200:            checkMarkButtonStep15.Selected = false;            break;          case 10800:            checkMarkButtonStep16.Selected = false;            break;          default:            break; // Do nothing        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,RemoveStep,The following statement contains a magic number: switch (stepsize)        {          case 5:            checkMarkButtonStep1.Selected = false;            break;          case 15:            checkMarkButtonStep2.Selected = false;            break;          case 30:            checkMarkButtonStep3.Selected = false;            break;          case 45:            checkMarkButtonStep4.Selected = false;            break;          case 60:            checkMarkButtonStep5.Selected = false;            break;          case 180:            checkMarkButtonStep6.Selected = false;            break;          case 300:            checkMarkButtonStep7.Selected = false;            break;          case 420:            checkMarkButtonStep8.Selected = false;            break;          case 600:            checkMarkButtonStep9.Selected = false;            break;          case 900:            checkMarkButtonStep10.Selected = false;            break;          case 1800:            checkMarkButtonStep11.Selected = false;            break;          case 2700:            checkMarkButtonStep12.Selected = false;            break;          case 3600:            checkMarkButtonStep13.Selected = false;            break;          case 5400:            checkMarkButtonStep14.Selected = false;            break;          case 7200:            checkMarkButtonStep15.Selected = false;            break;          case 10800:            checkMarkButtonStep16.Selected = false;            break;          default:            break; // Do nothing        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,RemoveStep,The following statement contains a magic number: switch (stepsize)        {          case 5:            checkMarkButtonStep1.Selected = false;            break;          case 15:            checkMarkButtonStep2.Selected = false;            break;          case 30:            checkMarkButtonStep3.Selected = false;            break;          case 45:            checkMarkButtonStep4.Selected = false;            break;          case 60:            checkMarkButtonStep5.Selected = false;            break;          case 180:            checkMarkButtonStep6.Selected = false;            break;          case 300:            checkMarkButtonStep7.Selected = false;            break;          case 420:            checkMarkButtonStep8.Selected = false;            break;          case 600:            checkMarkButtonStep9.Selected = false;            break;          case 900:            checkMarkButtonStep10.Selected = false;            break;          case 1800:            checkMarkButtonStep11.Selected = false;            break;          case 2700:            checkMarkButtonStep12.Selected = false;            break;          case 3600:            checkMarkButtonStep13.Selected = false;            break;          case 5400:            checkMarkButtonStep14.Selected = false;            break;          case 7200:            checkMarkButtonStep15.Selected = false;            break;          case 10800:            checkMarkButtonStep16.Selected = false;            break;          default:            break; // Do nothing        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,RemoveStep,The following statement contains a magic number: switch (stepsize)        {          case 5:            checkMarkButtonStep1.Selected = false;            break;          case 15:            checkMarkButtonStep2.Selected = false;            break;          case 30:            checkMarkButtonStep3.Selected = false;            break;          case 45:            checkMarkButtonStep4.Selected = false;            break;          case 60:            checkMarkButtonStep5.Selected = false;            break;          case 180:            checkMarkButtonStep6.Selected = false;            break;          case 300:            checkMarkButtonStep7.Selected = false;            break;          case 420:            checkMarkButtonStep8.Selected = false;            break;          case 600:            checkMarkButtonStep9.Selected = false;            break;          case 900:            checkMarkButtonStep10.Selected = false;            break;          case 1800:            checkMarkButtonStep11.Selected = false;            break;          case 2700:            checkMarkButtonStep12.Selected = false;            break;          case 3600:            checkMarkButtonStep13.Selected = false;            break;          case 5400:            checkMarkButtonStep14.Selected = false;            break;          case 7200:            checkMarkButtonStep15.Selected = false;            break;          case 10800:            checkMarkButtonStep16.Selected = false;            break;          default:            break; // Do nothing        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,RemoveStep,The following statement contains a magic number: switch (stepsize)        {          case 5:            checkMarkButtonStep1.Selected = false;            break;          case 15:            checkMarkButtonStep2.Selected = false;            break;          case 30:            checkMarkButtonStep3.Selected = false;            break;          case 45:            checkMarkButtonStep4.Selected = false;            break;          case 60:            checkMarkButtonStep5.Selected = false;            break;          case 180:            checkMarkButtonStep6.Selected = false;            break;          case 300:            checkMarkButtonStep7.Selected = false;            break;          case 420:            checkMarkButtonStep8.Selected = false;            break;          case 600:            checkMarkButtonStep9.Selected = false;            break;          case 900:            checkMarkButtonStep10.Selected = false;            break;          case 1800:            checkMarkButtonStep11.Selected = false;            break;          case 2700:            checkMarkButtonStep12.Selected = false;            break;          case 3600:            checkMarkButtonStep13.Selected = false;            break;          case 5400:            checkMarkButtonStep14.Selected = false;            break;          case 7200:            checkMarkButtonStep15.Selected = false;            break;          case 10800:            checkMarkButtonStep16.Selected = false;            break;          default:            break; // Do nothing        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,RemoveStep,The following statement contains a magic number: switch (stepsize)        {          case 5:            checkMarkButtonStep1.Selected = false;            break;          case 15:            checkMarkButtonStep2.Selected = false;            break;          case 30:            checkMarkButtonStep3.Selected = false;            break;          case 45:            checkMarkButtonStep4.Selected = false;            break;          case 60:            checkMarkButtonStep5.Selected = false;            break;          case 180:            checkMarkButtonStep6.Selected = false;            break;          case 300:            checkMarkButtonStep7.Selected = false;            break;          case 420:            checkMarkButtonStep8.Selected = false;            break;          case 600:            checkMarkButtonStep9.Selected = false;            break;          case 900:            checkMarkButtonStep10.Selected = false;            break;          case 1800:            checkMarkButtonStep11.Selected = false;            break;          case 2700:            checkMarkButtonStep12.Selected = false;            break;          case 3600:            checkMarkButtonStep13.Selected = false;            break;          case 5400:            checkMarkButtonStep14.Selected = false;            break;          case 7200:            checkMarkButtonStep15.Selected = false;            break;          case 10800:            checkMarkButtonStep16.Selected = false;            break;          default:            break; // Do nothing        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,OldStyle,The following statement contains a magic number: return (count == 16 && !foundOtherThanZeroOrOne);
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,ConvertToNewStyle,The following statement contains a magic number: switch (count)              {                case 1:                  newStyle += "5'";                  break;                case 2:                  newStyle += "15'";                  break;                case 3:                  newStyle += "30'";                  break;                case 4:                  newStyle += "45'";                  break;                case 5:                  newStyle += "60'";                  break;                case 6:                  newStyle += "180'";                  break;                case 7:                  newStyle += "300'";                  break;                case 8:                  newStyle += "420'";                  break;                case 9:                  newStyle += "600'";                  break;                case 10:                  newStyle += "900'";                  break;                case 11:                  newStyle += "1800'";                  break;                case 12:                  newStyle += "2700'";                  break;                case 13:                  newStyle += "3600'";                  break;                case 14:                  newStyle += "5400'";                  break;                case 15:                  newStyle += "7200'";                  break;                case 16:                  newStyle += "10800'";                  break;                default:                  break; // Do nothing              }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,ConvertToNewStyle,The following statement contains a magic number: switch (count)              {                case 1:                  newStyle += "5'";                  break;                case 2:                  newStyle += "15'";                  break;                case 3:                  newStyle += "30'";                  break;                case 4:                  newStyle += "45'";                  break;                case 5:                  newStyle += "60'";                  break;                case 6:                  newStyle += "180'";                  break;                case 7:                  newStyle += "300'";                  break;                case 8:                  newStyle += "420'";                  break;                case 9:                  newStyle += "600'";                  break;                case 10:                  newStyle += "900'";                  break;                case 11:                  newStyle += "1800'";                  break;                case 12:                  newStyle += "2700'";                  break;                case 13:                  newStyle += "3600'";                  break;                case 14:                  newStyle += "5400'";                  break;                case 15:                  newStyle += "7200'";                  break;                case 16:                  newStyle += "10800'";                  break;                default:                  break; // Do nothing              }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,ConvertToNewStyle,The following statement contains a magic number: switch (count)              {                case 1:                  newStyle += "5'";                  break;                case 2:                  newStyle += "15'";                  break;                case 3:                  newStyle += "30'";                  break;                case 4:                  newStyle += "45'";                  break;                case 5:                  newStyle += "60'";                  break;                case 6:                  newStyle += "180'";                  break;                case 7:                  newStyle += "300'";                  break;                case 8:                  newStyle += "420'";                  break;                case 9:                  newStyle += "600'";                  break;                case 10:                  newStyle += "900'";                  break;                case 11:                  newStyle += "1800'";                  break;                case 12:                  newStyle += "2700'";                  break;                case 13:                  newStyle += "3600'";                  break;                case 14:                  newStyle += "5400'";                  break;                case 15:                  newStyle += "7200'";                  break;                case 16:                  newStyle += "10800'";                  break;                default:                  break; // Do nothing              }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,ConvertToNewStyle,The following statement contains a magic number: switch (count)              {                case 1:                  newStyle += "5'";                  break;                case 2:                  newStyle += "15'";                  break;                case 3:                  newStyle += "30'";                  break;                case 4:                  newStyle += "45'";                  break;                case 5:                  newStyle += "60'";                  break;                case 6:                  newStyle += "180'";                  break;                case 7:                  newStyle += "300'";                  break;                case 8:                  newStyle += "420'";                  break;                case 9:                  newStyle += "600'";                  break;                case 10:                  newStyle += "900'";                  break;                case 11:                  newStyle += "1800'";                  break;                case 12:                  newStyle += "2700'";                  break;                case 13:                  newStyle += "3600'";                  break;                case 14:                  newStyle += "5400'";                  break;                case 15:                  newStyle += "7200'";                  break;                case 16:                  newStyle += "10800'";                  break;                default:                  break; // Do nothing              }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,ConvertToNewStyle,The following statement contains a magic number: switch (count)              {                case 1:                  newStyle += "5'";                  break;                case 2:                  newStyle += "15'";                  break;                case 3:                  newStyle += "30'";                  break;                case 4:                  newStyle += "45'";                  break;                case 5:                  newStyle += "60'";                  break;                case 6:                  newStyle += "180'";                  break;                case 7:                  newStyle += "300'";                  break;                case 8:                  newStyle += "420'";                  break;                case 9:                  newStyle += "600'";                  break;                case 10:                  newStyle += "900'";                  break;                case 11:                  newStyle += "1800'";                  break;                case 12:                  newStyle += "2700'";                  break;                case 13:                  newStyle += "3600'";                  break;                case 14:                  newStyle += "5400'";                  break;                case 15:                  newStyle += "7200'";                  break;                case 16:                  newStyle += "10800'";                  break;                default:                  break; // Do nothing              }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,ConvertToNewStyle,The following statement contains a magic number: switch (count)              {                case 1:                  newStyle += "5'";                  break;                case 2:                  newStyle += "15'";                  break;                case 3:                  newStyle += "30'";                  break;                case 4:                  newStyle += "45'";                  break;                case 5:                  newStyle += "60'";                  break;                case 6:                  newStyle += "180'";                  break;                case 7:                  newStyle += "300'";                  break;                case 8:                  newStyle += "420'";                  break;                case 9:                  newStyle += "600'";                  break;                case 10:                  newStyle += "900'";                  break;                case 11:                  newStyle += "1800'";                  break;                case 12:                  newStyle += "2700'";                  break;                case 13:                  newStyle += "3600'";                  break;                case 14:                  newStyle += "5400'";                  break;                case 15:                  newStyle += "7200'";                  break;                case 16:                  newStyle += "10800'";                  break;                default:                  break; // Do nothing              }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,ConvertToNewStyle,The following statement contains a magic number: switch (count)              {                case 1:                  newStyle += "5'";                  break;                case 2:                  newStyle += "15'";                  break;                case 3:                  newStyle += "30'";                  break;                case 4:                  newStyle += "45'";                  break;                case 5:                  newStyle += "60'";                  break;                case 6:                  newStyle += "180'";                  break;                case 7:                  newStyle += "300'";                  break;                case 8:                  newStyle += "420'";                  break;                case 9:                  newStyle += "600'";                  break;                case 10:                  newStyle += "900'";                  break;                case 11:                  newStyle += "1800'";                  break;                case 12:                  newStyle += "2700'";                  break;                case 13:                  newStyle += "3600'";                  break;                case 14:                  newStyle += "5400'";                  break;                case 15:                  newStyle += "7200'";                  break;                case 16:                  newStyle += "10800'";                  break;                default:                  break; // Do nothing              }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,ConvertToNewStyle,The following statement contains a magic number: switch (count)              {                case 1:                  newStyle += "5'";                  break;                case 2:                  newStyle += "15'";                  break;                case 3:                  newStyle += "30'";                  break;                case 4:                  newStyle += "45'";                  break;                case 5:                  newStyle += "60'";                  break;                case 6:                  newStyle += "180'";                  break;                case 7:                  newStyle += "300'";                  break;                case 8:                  newStyle += "420'";                  break;                case 9:                  newStyle += "600'";                  break;                case 10:                  newStyle += "900'";                  break;                case 11:                  newStyle += "1800'";                  break;                case 12:                  newStyle += "2700'";                  break;                case 13:                  newStyle += "3600'";                  break;                case 14:                  newStyle += "5400'";                  break;                case 15:                  newStyle += "7200'";                  break;                case 16:                  newStyle += "10800'";                  break;                default:                  break; // Do nothing              }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,ConvertToNewStyle,The following statement contains a magic number: switch (count)              {                case 1:                  newStyle += "5'";                  break;                case 2:                  newStyle += "15'";                  break;                case 3:                  newStyle += "30'";                  break;                case 4:                  newStyle += "45'";                  break;                case 5:                  newStyle += "60'";                  break;                case 6:                  newStyle += "180'";                  break;                case 7:                  newStyle += "300'";                  break;                case 8:                  newStyle += "420'";                  break;                case 9:                  newStyle += "600'";                  break;                case 10:                  newStyle += "900'";                  break;                case 11:                  newStyle += "1800'";                  break;                case 12:                  newStyle += "2700'";                  break;                case 13:                  newStyle += "3600'";                  break;                case 14:                  newStyle += "5400'";                  break;                case 15:                  newStyle += "7200'";                  break;                case 16:                  newStyle += "10800'";                  break;                default:                  break; // Do nothing              }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,ConvertToNewStyle,The following statement contains a magic number: switch (count)              {                case 1:                  newStyle += "5'";                  break;                case 2:                  newStyle += "15'";                  break;                case 3:                  newStyle += "30'";                  break;                case 4:                  newStyle += "45'";                  break;                case 5:                  newStyle += "60'";                  break;                case 6:                  newStyle += "180'";                  break;                case 7:                  newStyle += "300'";                  break;                case 8:                  newStyle += "420'";                  break;                case 9:                  newStyle += "600'";                  break;                case 10:                  newStyle += "900'";                  break;                case 11:                  newStyle += "1800'";                  break;                case 12:                  newStyle += "2700'";                  break;                case 13:                  newStyle += "3600'";                  break;                case 14:                  newStyle += "5400'";                  break;                case 15:                  newStyle += "7200'";                  break;                case 16:                  newStyle += "10800'";                  break;                default:                  break; // Do nothing              }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,ConvertToNewStyle,The following statement contains a magic number: switch (count)              {                case 1:                  newStyle += "5'";                  break;                case 2:                  newStyle += "15'";                  break;                case 3:                  newStyle += "30'";                  break;                case 4:                  newStyle += "45'";                  break;                case 5:                  newStyle += "60'";                  break;                case 6:                  newStyle += "180'";                  break;                case 7:                  newStyle += "300'";                  break;                case 8:                  newStyle += "420'";                  break;                case 9:                  newStyle += "600'";                  break;                case 10:                  newStyle += "900'";                  break;                case 11:                  newStyle += "1800'";                  break;                case 12:                  newStyle += "2700'";                  break;                case 13:                  newStyle += "3600'";                  break;                case 14:                  newStyle += "5400'";                  break;                case 15:                  newStyle += "7200'";                  break;                case 16:                  newStyle += "10800'";                  break;                default:                  break; // Do nothing              }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,ConvertToNewStyle,The following statement contains a magic number: switch (count)              {                case 1:                  newStyle += "5'";                  break;                case 2:                  newStyle += "15'";                  break;                case 3:                  newStyle += "30'";                  break;                case 4:                  newStyle += "45'";                  break;                case 5:                  newStyle += "60'";                  break;                case 6:                  newStyle += "180'";                  break;                case 7:                  newStyle += "300'";                  break;                case 8:                  newStyle += "420'";                  break;                case 9:                  newStyle += "600'";                  break;                case 10:                  newStyle += "900'";                  break;                case 11:                  newStyle += "1800'";                  break;                case 12:                  newStyle += "2700'";                  break;                case 13:                  newStyle += "3600'";                  break;                case 14:                  newStyle += "5400'";                  break;                case 15:                  newStyle += "7200'";                  break;                case 16:                  newStyle += "10800'";                  break;                default:                  break; // Do nothing              }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,ConvertToNewStyle,The following statement contains a magic number: switch (count)              {                case 1:                  newStyle += "5'";                  break;                case 2:                  newStyle += "15'";                  break;                case 3:                  newStyle += "30'";                  break;                case 4:                  newStyle += "45'";                  break;                case 5:                  newStyle += "60'";                  break;                case 6:                  newStyle += "180'";                  break;                case 7:                  newStyle += "300'";                  break;                case 8:                  newStyle += "420'";                  break;                case 9:                  newStyle += "600'";                  break;                case 10:                  newStyle += "900'";                  break;                case 11:                  newStyle += "1800'";                  break;                case 12:                  newStyle += "2700'";                  break;                case 13:                  newStyle += "3600'";                  break;                case 14:                  newStyle += "5400'";                  break;                case 15:                  newStyle += "7200'";                  break;                case 16:                  newStyle += "10800'";                  break;                default:                  break; // Do nothing              }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,ConvertToNewStyle,The following statement contains a magic number: switch (count)              {                case 1:                  newStyle += "5'";                  break;                case 2:                  newStyle += "15'";                  break;                case 3:                  newStyle += "30'";                  break;                case 4:                  newStyle += "45'";                  break;                case 5:                  newStyle += "60'";                  break;                case 6:                  newStyle += "180'";                  break;                case 7:                  newStyle += "300'";                  break;                case 8:                  newStyle += "420'";                  break;                case 9:                  newStyle += "600'";                  break;                case 10:                  newStyle += "900'";                  break;                case 11:                  newStyle += "1800'";                  break;                case 12:                  newStyle += "2700'";                  break;                case 13:                  newStyle += "3600'";                  break;                case 14:                  newStyle += "5400'";                  break;                case 15:                  newStyle += "7200'";                  break;                case 16:                  newStyle += "10800'";                  break;                default:                  break; // Do nothing              }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUISkipSteps,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_SkipSteps.cs,ConvertToNewStyle,The following statement contains a magic number: switch (count)              {                case 1:                  newStyle += "5'";                  break;                case 2:                  newStyle += "15'";                  break;                case 3:                  newStyle += "30'";                  break;                case 4:                  newStyle += "45'";                  break;                case 5:                  newStyle += "60'";                  break;                case 6:                  newStyle += "180'";                  break;                case 7:                  newStyle += "300'";                  break;                case 8:                  newStyle += "420'";                  break;                case 9:                  newStyle += "600'";                  break;                case 10:                  newStyle += "900'";                  break;                case 11:                  newStyle += "1800'";                  break;                case 12:                  newStyle += "2700'";                  break;                case 13:                  newStyle += "3600'";                  break;                case 14:                  newStyle += "5400'";                  break;                case 15:                  newStyle += "7200'";                  break;                case 16:                  newStyle += "10800'";                  break;                default:                  break; // Do nothing              }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,LoadSettings,The following statement contains a magic number: _iQuality = xmlreader.GetValueAsInt("thumbnails"' "quality"' 3);
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);                for (int i = 1; i <= 6; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_THUMBNAILS_QUALITY' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_THUMBNAILS_QUALITY' _iQuality - 1);                for (int i = 1; i <= 3; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_THUMBNAILS_COLUMNS' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_THUMBNAILS_COLUMNS' _iColumns - 1);                for (int i = 1; i <= 3; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_THUMBNAILS_ROWS' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_THUMBNAILS_ROWS' _iRows - 1);            }            return true;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;                            if (iControl == (int)Controls.CONTROL_THUMBNAILS_QUALITY)              {                string strLabel = message.Label;                _iQuality = Int32.Parse(strLabel);                GUIGraphicsContext.ScrollSpeedHorizontal = _iQuality;                //settingsChanged = true;                ThumbQualityValueChanged();                SetProperties();              }                if (iControl == (int)Controls.CONTROL_THUMBNAILS_COLUMNS)              {                string strLabel = message.Label;                _iColumns = Int32.Parse(strLabel);                GUIGraphicsContext.ScrollSpeedHorizontal = _iColumns;                //settingsChanged = true;              }                if (iControl == (int)Controls.CONTROL_THUMBNAILS_ROWS)              {                string strLabel = message.Label;                _iRows = Int32.Parse(strLabel);                GUIGraphicsContext.ScrollSpeedHorizontal = _iRows;                //settingsChanged = true;              }                break;            }        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);                for (int i = 1; i <= 6; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_THUMBNAILS_QUALITY' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_THUMBNAILS_QUALITY' _iQuality - 1);                for (int i = 1; i <= 3; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_THUMBNAILS_COLUMNS' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_THUMBNAILS_COLUMNS' _iColumns - 1);                for (int i = 1; i <= 3; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_THUMBNAILS_ROWS' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_THUMBNAILS_ROWS' _iRows - 1);            }            return true;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;                            if (iControl == (int)Controls.CONTROL_THUMBNAILS_QUALITY)              {                string strLabel = message.Label;                _iQuality = Int32.Parse(strLabel);                GUIGraphicsContext.ScrollSpeedHorizontal = _iQuality;                //settingsChanged = true;                ThumbQualityValueChanged();                SetProperties();              }                if (iControl == (int)Controls.CONTROL_THUMBNAILS_COLUMNS)              {                string strLabel = message.Label;                _iColumns = Int32.Parse(strLabel);                GUIGraphicsContext.ScrollSpeedHorizontal = _iColumns;                //settingsChanged = true;              }                if (iControl == (int)Controls.CONTROL_THUMBNAILS_ROWS)              {                string strLabel = message.Label;                _iRows = Int32.Parse(strLabel);                GUIGraphicsContext.ScrollSpeedHorizontal = _iRows;                //settingsChanged = true;              }                break;            }        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);                for (int i = 1; i <= 6; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_THUMBNAILS_QUALITY' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_THUMBNAILS_QUALITY' _iQuality - 1);                for (int i = 1; i <= 3; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_THUMBNAILS_COLUMNS' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_THUMBNAILS_COLUMNS' _iColumns - 1);                for (int i = 1; i <= 3; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_THUMBNAILS_ROWS' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_THUMBNAILS_ROWS' _iRows - 1);            }            return true;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;                            if (iControl == (int)Controls.CONTROL_THUMBNAILS_QUALITY)              {                string strLabel = message.Label;                _iQuality = Int32.Parse(strLabel);                GUIGraphicsContext.ScrollSpeedHorizontal = _iQuality;                //settingsChanged = true;                ThumbQualityValueChanged();                SetProperties();              }                if (iControl == (int)Controls.CONTROL_THUMBNAILS_COLUMNS)              {                string strLabel = message.Label;                _iColumns = Int32.Parse(strLabel);                GUIGraphicsContext.ScrollSpeedHorizontal = _iColumns;                //settingsChanged = true;              }                if (iControl == (int)Controls.CONTROL_THUMBNAILS_ROWS)              {                string strLabel = message.Label;                _iRows = Int32.Parse(strLabel);                GUIGraphicsContext.ScrollSpeedHorizontal = _iRows;                //settingsChanged = true;              }                break;            }        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(101005));
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,ThumbQualityValueChanged,The following statement contains a magic number: switch (_iQuality)        {          case 1:            Thumbs.Quality = Thumbs.ThumbQuality.fastest;            break;          case 2:            Thumbs.Quality = Thumbs.ThumbQuality.fast;            break;          case 3:            Thumbs.Quality = Thumbs.ThumbQuality.average;            break;          case 4:            Thumbs.Quality = Thumbs.ThumbQuality.higher;            break;          case 5:            Thumbs.Quality = Thumbs.ThumbQuality.highest;            break;          case 6:            Thumbs.Quality = Thumbs.ThumbQuality.uhd;            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,ThumbQualityValueChanged,The following statement contains a magic number: switch (_iQuality)        {          case 1:            Thumbs.Quality = Thumbs.ThumbQuality.fastest;            break;          case 2:            Thumbs.Quality = Thumbs.ThumbQuality.fast;            break;          case 3:            Thumbs.Quality = Thumbs.ThumbQuality.average;            break;          case 4:            Thumbs.Quality = Thumbs.ThumbQuality.higher;            break;          case 5:            Thumbs.Quality = Thumbs.ThumbQuality.highest;            break;          case 6:            Thumbs.Quality = Thumbs.ThumbQuality.uhd;            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,ThumbQualityValueChanged,The following statement contains a magic number: switch (_iQuality)        {          case 1:            Thumbs.Quality = Thumbs.ThumbQuality.fastest;            break;          case 2:            Thumbs.Quality = Thumbs.ThumbQuality.fast;            break;          case 3:            Thumbs.Quality = Thumbs.ThumbQuality.average;            break;          case 4:            Thumbs.Quality = Thumbs.ThumbQuality.higher;            break;          case 5:            Thumbs.Quality = Thumbs.ThumbQuality.highest;            break;          case 6:            Thumbs.Quality = Thumbs.ThumbQuality.uhd;            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,ThumbQualityValueChanged,The following statement contains a magic number: switch (_iQuality)        {          case 1:            Thumbs.Quality = Thumbs.ThumbQuality.fastest;            break;          case 2:            Thumbs.Quality = Thumbs.ThumbQuality.fast;            break;          case 3:            Thumbs.Quality = Thumbs.ThumbQuality.average;            break;          case 4:            Thumbs.Quality = Thumbs.ThumbQuality.higher;            break;          case 5:            Thumbs.Quality = Thumbs.ThumbQuality.highest;            break;          case 6:            Thumbs.Quality = Thumbs.ThumbQuality.uhd;            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,ThumbQualityValueChanged,The following statement contains a magic number: switch (_iQuality)        {          case 1:            Thumbs.Quality = Thumbs.ThumbQuality.fastest;            break;          case 2:            Thumbs.Quality = Thumbs.ThumbQuality.fast;            break;          case 3:            Thumbs.Quality = Thumbs.ThumbQuality.average;            break;          case 4:            Thumbs.Quality = Thumbs.ThumbQuality.higher;            break;          case 5:            Thumbs.Quality = Thumbs.ThumbQuality.highest;            break;          case 6:            Thumbs.Quality = Thumbs.ThumbQuality.uhd;            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,SetProperties,The following statement contains a magic number: switch (_iQuality)        {          case 1:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300015)); // Nearest neighbor            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(231)); //None            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300016)); //Small CRTs            break;          case 2:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(883)); // Low            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300017)); //Small wide CRTs' medium CRTs            break;          case 3:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300018)); //Large wide CRTs' small LCDs            break;          case 4:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300019)); //Assume Linear            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300021)); //LCDs' Plasmas            break;          case 5:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300023)); //Large LCDs' Plasmas            break;          case 6:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300096)); //UHD TVs' Projectors            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,SetProperties,The following statement contains a magic number: switch (_iQuality)        {          case 1:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300015)); // Nearest neighbor            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(231)); //None            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300016)); //Small CRTs            break;          case 2:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(883)); // Low            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300017)); //Small wide CRTs' medium CRTs            break;          case 3:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300018)); //Large wide CRTs' small LCDs            break;          case 4:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300019)); //Assume Linear            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300021)); //LCDs' Plasmas            break;          case 5:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300023)); //Large LCDs' Plasmas            break;          case 6:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300096)); //UHD TVs' Projectors            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,SetProperties,The following statement contains a magic number: switch (_iQuality)        {          case 1:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300015)); // Nearest neighbor            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(231)); //None            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300016)); //Small CRTs            break;          case 2:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(883)); // Low            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300017)); //Small wide CRTs' medium CRTs            break;          case 3:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300018)); //Large wide CRTs' small LCDs            break;          case 4:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300019)); //Assume Linear            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300021)); //LCDs' Plasmas            break;          case 5:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300023)); //Large LCDs' Plasmas            break;          case 6:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300096)); //UHD TVs' Projectors            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,SetProperties,The following statement contains a magic number: switch (_iQuality)        {          case 1:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300015)); // Nearest neighbor            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(231)); //None            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300016)); //Small CRTs            break;          case 2:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(883)); // Low            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300017)); //Small wide CRTs' medium CRTs            break;          case 3:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300018)); //Large wide CRTs' small LCDs            break;          case 4:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300019)); //Assume Linear            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300021)); //LCDs' Plasmas            break;          case 5:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300023)); //Large LCDs' Plasmas            break;          case 6:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300096)); //UHD TVs' Projectors            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,SetProperties,The following statement contains a magic number: switch (_iQuality)        {          case 1:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300015)); // Nearest neighbor            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(231)); //None            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300016)); //Small CRTs            break;          case 2:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(883)); // Low            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300017)); //Small wide CRTs' medium CRTs            break;          case 3:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300018)); //Large wide CRTs' small LCDs            break;          case 4:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300019)); //Assume Linear            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300021)); //LCDs' Plasmas            break;          case 5:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300023)); //Large LCDs' Plasmas            break;          case 6:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300096)); //UHD TVs' Projectors            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,SetProperties,The following statement contains a magic number: switch (_iQuality)        {          case 1:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300015)); // Nearest neighbor            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(231)); //None            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300016)); //Small CRTs            break;          case 2:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(883)); // Low            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300017)); //Small wide CRTs' medium CRTs            break;          case 3:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300018)); //Large wide CRTs' small LCDs            break;          case 4:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300019)); //Assume Linear            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300021)); //LCDs' Plasmas            break;          case 5:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300023)); //Large LCDs' Plasmas            break;          case 6:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300096)); //UHD TVs' Projectors            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,SetProperties,The following statement contains a magic number: switch (_iQuality)        {          case 1:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300015)); // Nearest neighbor            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(231)); //None            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300016)); //Small CRTs            break;          case 2:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(883)); // Low            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300017)); //Small wide CRTs' medium CRTs            break;          case 3:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300018)); //Large wide CRTs' small LCDs            break;          case 4:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300019)); //Assume Linear            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300021)); //LCDs' Plasmas            break;          case 5:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300023)); //Large LCDs' Plasmas            break;          case 6:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300096)); //UHD TVs' Projectors            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,SetProperties,The following statement contains a magic number: switch (_iQuality)        {          case 1:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300015)); // Nearest neighbor            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(231)); //None            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300016)); //Small CRTs            break;          case 2:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(883)); // Low            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300017)); //Small wide CRTs' medium CRTs            break;          case 3:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300018)); //Large wide CRTs' small LCDs            break;          case 4:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300019)); //Assume Linear            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300021)); //LCDs' Plasmas            break;          case 5:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300023)); //Large LCDs' Plasmas            break;          case 6:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300096)); //UHD TVs' Projectors            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,SetProperties,The following statement contains a magic number: switch (_iQuality)        {          case 1:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300015)); // Nearest neighbor            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(231)); //None            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300016)); //Small CRTs            break;          case 2:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(883)); // Low            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300017)); //Small wide CRTs' medium CRTs            break;          case 3:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300018)); //Large wide CRTs' small LCDs            break;          case 4:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300019)); //Assume Linear            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300021)); //LCDs' Plasmas            break;          case 5:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300023)); //Large LCDs' Plasmas            break;          case 6:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300096)); //UHD TVs' Projectors            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,SetProperties,The following statement contains a magic number: switch (_iQuality)        {          case 1:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300015)); // Nearest neighbor            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(231)); //None            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300016)); //Small CRTs            break;          case 2:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(883)); // Low            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300017)); //Small wide CRTs' medium CRTs            break;          case 3:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300018)); //Large wide CRTs' small LCDs            break;          case 4:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300019)); //Assume Linear            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300021)); //LCDs' Plasmas            break;          case 5:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300023)); //Large LCDs' Plasmas            break;          case 6:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300096)); //UHD TVs' Projectors            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,SetProperties,The following statement contains a magic number: switch (_iQuality)        {          case 1:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300015)); // Nearest neighbor            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(231)); //None            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300016)); //Small CRTs            break;          case 2:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(883)); // Low            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300017)); //Small wide CRTs' medium CRTs            break;          case 3:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300018)); //Large wide CRTs' small LCDs            break;          case 4:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300019)); //Assume Linear            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300021)); //LCDs' Plasmas            break;          case 5:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300023)); //Large LCDs' Plasmas            break;          case 6:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300096)); //UHD TVs' Projectors            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,SetProperties,The following statement contains a magic number: switch (_iQuality)        {          case 1:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300015)); // Nearest neighbor            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(231)); //None            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300016)); //Small CRTs            break;          case 2:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(883)); // Low            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300017)); //Small wide CRTs' medium CRTs            break;          case 3:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300018)); //Large wide CRTs' small LCDs            break;          case 4:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300019)); //Assume Linear            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300021)); //LCDs' Plasmas            break;          case 5:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300023)); //Large LCDs' Plasmas            break;          case 6:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300096)); //UHD TVs' Projectors            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,SetProperties,The following statement contains a magic number: switch (_iQuality)        {          case 1:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300015)); // Nearest neighbor            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(231)); //None            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300016)); //Small CRTs            break;          case 2:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(883)); // Low            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300017)); //Small wide CRTs' medium CRTs            break;          case 3:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300018)); //Large wide CRTs' small LCDs            break;          case 4:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300019)); //Assume Linear            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300021)); //LCDs' Plasmas            break;          case 5:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300023)); //Large LCDs' Plasmas            break;          case 6:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300096)); //UHD TVs' Projectors            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,SetProperties,The following statement contains a magic number: switch (_iQuality)        {          case 1:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300015)); // Nearest neighbor            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(231)); //None            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300016)); //Small CRTs            break;          case 2:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(883)); // Low            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300017)); //Small wide CRTs' medium CRTs            break;          case 3:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300018)); //Large wide CRTs' small LCDs            break;          case 4:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300019)); //Assume Linear            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300021)); //LCDs' Plasmas            break;          case 5:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300023)); //Large LCDs' Plasmas            break;          case 6:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300096)); //UHD TVs' Projectors            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,SetProperties,The following statement contains a magic number: switch (_iQuality)        {          case 1:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300015)); // Nearest neighbor            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(231)); //None            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300016)); //Small CRTs            break;          case 2:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(883)); // Low            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300017)); //Small wide CRTs' medium CRTs            break;          case 3:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300018)); //Large wide CRTs' small LCDs            break;          case 4:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300019)); //Assume Linear            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300021)); //LCDs' Plasmas            break;          case 5:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300023)); //Large LCDs' Plasmas            break;          case 6:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300096)); //UHD TVs' Projectors            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,SetProperties,The following statement contains a magic number: switch (_iQuality)        {          case 1:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300015)); // Nearest neighbor            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(231)); //None            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300016)); //Small CRTs            break;          case 2:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(883)); // Low            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300017)); //Small wide CRTs' medium CRTs            break;          case 3:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300018)); //Large wide CRTs' small LCDs            break;          case 4:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300019)); //Assume Linear            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300021)); //LCDs' Plasmas            break;          case 5:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300023)); //Large LCDs' Plasmas            break;          case 6:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300096)); //UHD TVs' Projectors            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,SetProperties,The following statement contains a magic number: switch (_iQuality)        {          case 1:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300015)); // Nearest neighbor            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(231)); //None            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300016)); //Small CRTs            break;          case 2:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(883)); // Low            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300017)); //Small wide CRTs' medium CRTs            break;          case 3:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300018)); //Large wide CRTs' small LCDs            break;          case 4:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300019)); //Assume Linear            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300021)); //LCDs' Plasmas            break;          case 5:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300023)); //Large LCDs' Plasmas            break;          case 6:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300096)); //UHD TVs' Projectors            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,SetProperties,The following statement contains a magic number: switch (_iQuality)        {          case 1:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300015)); // Nearest neighbor            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(231)); //None            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300016)); //Small CRTs            break;          case 2:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(883)); // Low            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300017)); //Small wide CRTs' medium CRTs            break;          case 3:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300018)); //Large wide CRTs' small LCDs            break;          case 4:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300019)); //Assume Linear            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300021)); //LCDs' Plasmas            break;          case 5:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300023)); //Large LCDs' Plasmas            break;          case 6:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300096)); //UHD TVs' Projectors            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,SetProperties,The following statement contains a magic number: switch (_iQuality)        {          case 1:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300015)); // Nearest neighbor            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(231)); //None            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300016)); //Small CRTs            break;          case 2:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(883)); // Low            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300017)); //Small wide CRTs' medium CRTs            break;          case 3:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300018)); //Large wide CRTs' small LCDs            break;          case 4:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300019)); //Assume Linear            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300021)); //LCDs' Plasmas            break;          case 5:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300023)); //Large LCDs' Plasmas            break;          case 6:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300096)); //UHD TVs' Projectors            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,SetProperties,The following statement contains a magic number: switch (_iQuality)        {          case 1:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300015)); // Nearest neighbor            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(231)); //None            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300016)); //Small CRTs            break;          case 2:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(883)); // Low            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300017)); //Small wide CRTs' medium CRTs            break;          case 3:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300018)); //Large wide CRTs' small LCDs            break;          case 4:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300019)); //Assume Linear            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300021)); //LCDs' Plasmas            break;          case 5:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300023)); //Large LCDs' Plasmas            break;          case 6:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300096)); //UHD TVs' Projectors            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,SetProperties,The following statement contains a magic number: switch (_iQuality)        {          case 1:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300015)); // Nearest neighbor            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(231)); //None            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300016)); //Small CRTs            break;          case 2:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(883)); // Low            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300017)); //Small wide CRTs' medium CRTs            break;          case 3:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300018)); //Large wide CRTs' small LCDs            break;          case 4:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300019)); //Assume Linear            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300021)); //LCDs' Plasmas            break;          case 5:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300023)); //Large LCDs' Plasmas            break;          case 6:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300096)); //UHD TVs' Projectors            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,SetProperties,The following statement contains a magic number: switch (_iQuality)        {          case 1:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300015)); // Nearest neighbor            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(231)); //None            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300016)); //Small CRTs            break;          case 2:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(883)); // Low            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300017)); //Small wide CRTs' medium CRTs            break;          case 3:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300018)); //Large wide CRTs' small LCDs            break;          case 4:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300019)); //Assume Linear            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300021)); //LCDs' Plasmas            break;          case 5:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300023)); //Large LCDs' Plasmas            break;          case 6:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300096)); //UHD TVs' Projectors            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,SetProperties,The following statement contains a magic number: switch (_iQuality)        {          case 1:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300015)); // Nearest neighbor            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(231)); //None            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300016)); //Small CRTs            break;          case 2:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(883)); // Low            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300017)); //Small wide CRTs' medium CRTs            break;          case 3:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300018)); //Large wide CRTs' small LCDs            break;          case 4:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300019)); //Assume Linear            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300021)); //LCDs' Plasmas            break;          case 5:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300023)); //Large LCDs' Plasmas            break;          case 6:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300096)); //UHD TVs' Projectors            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,SetProperties,The following statement contains a magic number: switch (_iQuality)        {          case 1:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300015)); // Nearest neighbor            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(231)); //None            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300016)); //Small CRTs            break;          case 2:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(883)); // Low            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300017)); //Small wide CRTs' medium CRTs            break;          case 3:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300018)); //Large wide CRTs' small LCDs            break;          case 4:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300019)); //Assume Linear            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300021)); //LCDs' Plasmas            break;          case 5:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300023)); //Large LCDs' Plasmas            break;          case 6:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300096)); //UHD TVs' Projectors            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,SetProperties,The following statement contains a magic number: switch (_iQuality)        {          case 1:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300015)); // Nearest neighbor            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(231)); //None            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300016)); //Small CRTs            break;          case 2:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(883)); // Low            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300017)); //Small wide CRTs' medium CRTs            break;          case 3:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300018)); //Large wide CRTs' small LCDs            break;          case 4:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300019)); //Assume Linear            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300021)); //LCDs' Plasmas            break;          case 5:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300023)); //Large LCDs' Plasmas            break;          case 6:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300096)); //UHD TVs' Projectors            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,SetProperties,The following statement contains a magic number: switch (_iQuality)        {          case 1:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300015)); // Nearest neighbor            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(231)); //None            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300016)); //Small CRTs            break;          case 2:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(883)); // Low            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300017)); //Small wide CRTs' medium CRTs            break;          case 3:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300018)); //Large wide CRTs' small LCDs            break;          case 4:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300019)); //Assume Linear            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300021)); //LCDs' Plasmas            break;          case 5:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300023)); //Large LCDs' Plasmas            break;          case 6:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300096)); //UHD TVs' Projectors            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,SetProperties,The following statement contains a magic number: switch (_iQuality)        {          case 1:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300015)); // Nearest neighbor            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(231)); //None            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300016)); //Small CRTs            break;          case 2:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(883)); // Low            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300017)); //Small wide CRTs' medium CRTs            break;          case 3:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300018)); //Large wide CRTs' small LCDs            break;          case 4:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300019)); //Assume Linear            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300021)); //LCDs' Plasmas            break;          case 5:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300023)); //Large LCDs' Plasmas            break;          case 6:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300096)); //UHD TVs' Projectors            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,SetProperties,The following statement contains a magic number: switch (_iQuality)        {          case 1:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300015)); // Nearest neighbor            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(231)); //None            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300016)); //Small CRTs            break;          case 2:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(883)); // Low            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300017)); //Small wide CRTs' medium CRTs            break;          case 3:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300018)); //Large wide CRTs' small LCDs            break;          case 4:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300019)); //Assume Linear            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300021)); //LCDs' Plasmas            break;          case 5:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300023)); //Large LCDs' Plasmas            break;          case 6:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300096)); //UHD TVs' Projectors            break;        }
Magic Number,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,SetProperties,The following statement contains a magic number: switch (_iQuality)        {          case 1:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300015)); // Nearest neighbor            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(231)); //None            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300016)); //Small CRTs            break;          case 2:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(883)); // Low            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300017)); //Small wide CRTs' medium CRTs            break;          case 3:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300018)); //Large wide CRTs' small LCDs            break;          case 4:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300019)); //Assume Linear            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300021)); //LCDs' Plasmas            break;          case 5:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300023)); //Large LCDs' Plasmas            break;          case 6:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300096)); //UHD TVs' Projectors            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsGeneralResume,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Resume.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(101017));
Magic Number,MediaPortal.GUI.Settings,GUISettingsGeneralResume,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Resume.cs,OnStartUpDelay,The following statement contains a magic number: string property = _iStartUpDelay + " " + GUILocalizeStrings.Get(2999);
Magic Number,MediaPortal.GUI.Settings,GUISettingsGeneralResume,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Resume.cs,OnShowScreens,The following statement contains a magic number: dlg.SetHeading(496);
Magic Number,MediaPortal.GUI.Settings,DisplayDetails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Resume.cs,GetMonitorDetails,The following statement contains a magic number: string[] sDescriptor = new string[4];
Magic Number,MediaPortal.GUI.Settings,DisplayDetails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Resume.cs,GetMonitorDetails,The following statement contains a magic number: sDescriptor[0] = Encoding.Default.GetString(bObj' 0x36' 18);
Magic Number,MediaPortal.GUI.Settings,DisplayDetails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Resume.cs,GetMonitorDetails,The following statement contains a magic number: sDescriptor[1] = Encoding.Default.GetString(bObj' 0x48' 18);
Magic Number,MediaPortal.GUI.Settings,DisplayDetails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Resume.cs,GetMonitorDetails,The following statement contains a magic number: sDescriptor[2] = Encoding.Default.GetString(bObj' 0x5A' 18);
Magic Number,MediaPortal.GUI.Settings,DisplayDetails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Resume.cs,GetMonitorDetails,The following statement contains a magic number: sDescriptor[2] = Encoding.Default.GetString(bObj' 0x5A' 18);
Magic Number,MediaPortal.GUI.Settings,DisplayDetails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Resume.cs,GetMonitorDetails,The following statement contains a magic number: sDescriptor[3] = Encoding.Default.GetString(bObj' 0x6C' 18);
Magic Number,MediaPortal.GUI.Settings,DisplayDetails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Resume.cs,GetMonitorDetails,The following statement contains a magic number: sDescriptor[3] = Encoding.Default.GetString(bObj' 0x6C' 18);
Magic Number,MediaPortal.GUI.Settings,DisplayDetails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Resume.cs,GetMonitorDetails,The following statement contains a magic number: sSerial = sDesc.Substring(4).Replace("\0"' "").Trim();
Magic Number,MediaPortal.GUI.Settings,DisplayDetails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Resume.cs,GetMonitorDetails,The following statement contains a magic number: sModel = sDesc.Substring(4).Replace("\0"' "").Trim();
Magic Number,MediaPortal.GUI.Settings,GUISettingsGeneralStartup,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_Startup.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(101019));
Magic Number,MediaPortal.GUI.Settings,GUISettingsGUIScreenSetup,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_ScreenSetup.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(100009));
Magic Number,MediaPortal.GUI.Settings,GUISettingsGUI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_ScrollSpeed.cs,LoadSettings,The following statement contains a magic number: m_iSpeedVertical = xmlreader.GetValueAsInt("gui"' "ScrollSpeedDown"' 4);
Magic Number,MediaPortal.GUI.Settings,GUISettingsGUI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_ScrollSpeed.cs,LoadSettings,The following statement contains a magic number: m_iListLoopDelay = xmlreader.GetValueAsInt("gui"' "listLoopDelay"' 100);
Magic Number,MediaPortal.GUI.Settings,GUISettingsGUI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_ScrollSpeed.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(100031));
Magic Number,MediaPortal.GUI.Settings,GUISettingsGUI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_ScrollSpeed.cs,OnMessage,The following statement contains a magic number: switch (message.Message)       {         case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:           {             base.OnMessage(message);             LoadSettings();             GUISpinControl cntl = (GUISpinControl)GetControl((int)Controls.CONTROL_FPS);             cntl.ShowRange = false;             GUIControl.ClearControl(GetID' (int)Controls.CONTROL_SPEED_HORIZONTAL);             for (int i = 1; i <= 5; ++i)             {               GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_SPEED_HORIZONTAL' i.ToString());             }             GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_SPEED_HORIZONTAL' m_iSpeedHorizontal - 1);              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_SPEED_VERTICAL);             for (int i = 1; i <= 5; ++i)             {               GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_SPEED_VERTICAL' i.ToString());             }             GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_SPEED_VERTICAL' m_iSpeedVertical - 1);              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_FPS);             for (int i = 10; i <= 100; ++i)             {               GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_FPS' i.ToString());             }             GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_FPS' GUIGraphicsContext.MaxFPS - 10);               GUIControl.ClearControl(GetID' (int)Controls.CONTROL_LISTLOOP_DELAY);             for (int i = 1; i <= 10000; ++i)             {               GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_LISTLOOP_DELAY' i.ToString());             }             GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_LISTLOOP_DELAY' m_iListLoopDelay - 1);               ResetExampleLabels();              return true;           }          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:           {             SaveSettings();           }           break;          case GUIMessage.MessageType.GUI_MSG_CLICKED:           {             int iControl = message.SenderControlId;             if (iControl == (int)Controls.CONTROL_SPEED_HORIZONTAL)             {               string strLabel = message.Label;               m_iSpeedHorizontal = Int32.Parse(strLabel);               GUIGraphicsContext.ScrollSpeedHorizontal = m_iSpeedHorizontal;               ResetExampleLabels();             }             if (iControl == (int)Controls.CONTROL_SPEED_VERTICAL)             {               string strLabel = message.Label;               m_iSpeedVertical = Int32.Parse(strLabel);               GUIGraphicsContext.ScrollSpeedVertical = m_iSpeedVertical;               ResetExampleLabels();             }             if (iControl == (int)Controls.CONTROL_FPS)             {               string strLabel = message.Label;               int fps = Int32.Parse(strLabel);               GUIGraphicsContext.MaxFPS = fps;             }             if (iControl == (int)Controls.CONTROL_LISTLOOP_DELAY)             {               string strLabel = message.Label;               m_iListLoopDelay = Int32.Parse(strLabel);               GUIGraphicsContext.ScrollSpeedVertical = m_iListLoopDelay;               ResetExampleLabels();             }           }           break;       }
Magic Number,MediaPortal.GUI.Settings,GUISettingsGUI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_ScrollSpeed.cs,OnMessage,The following statement contains a magic number: switch (message.Message)       {         case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:           {             base.OnMessage(message);             LoadSettings();             GUISpinControl cntl = (GUISpinControl)GetControl((int)Controls.CONTROL_FPS);             cntl.ShowRange = false;             GUIControl.ClearControl(GetID' (int)Controls.CONTROL_SPEED_HORIZONTAL);             for (int i = 1; i <= 5; ++i)             {               GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_SPEED_HORIZONTAL' i.ToString());             }             GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_SPEED_HORIZONTAL' m_iSpeedHorizontal - 1);              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_SPEED_VERTICAL);             for (int i = 1; i <= 5; ++i)             {               GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_SPEED_VERTICAL' i.ToString());             }             GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_SPEED_VERTICAL' m_iSpeedVertical - 1);              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_FPS);             for (int i = 10; i <= 100; ++i)             {               GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_FPS' i.ToString());             }             GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_FPS' GUIGraphicsContext.MaxFPS - 10);               GUIControl.ClearControl(GetID' (int)Controls.CONTROL_LISTLOOP_DELAY);             for (int i = 1; i <= 10000; ++i)             {               GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_LISTLOOP_DELAY' i.ToString());             }             GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_LISTLOOP_DELAY' m_iListLoopDelay - 1);               ResetExampleLabels();              return true;           }          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:           {             SaveSettings();           }           break;          case GUIMessage.MessageType.GUI_MSG_CLICKED:           {             int iControl = message.SenderControlId;             if (iControl == (int)Controls.CONTROL_SPEED_HORIZONTAL)             {               string strLabel = message.Label;               m_iSpeedHorizontal = Int32.Parse(strLabel);               GUIGraphicsContext.ScrollSpeedHorizontal = m_iSpeedHorizontal;               ResetExampleLabels();             }             if (iControl == (int)Controls.CONTROL_SPEED_VERTICAL)             {               string strLabel = message.Label;               m_iSpeedVertical = Int32.Parse(strLabel);               GUIGraphicsContext.ScrollSpeedVertical = m_iSpeedVertical;               ResetExampleLabels();             }             if (iControl == (int)Controls.CONTROL_FPS)             {               string strLabel = message.Label;               int fps = Int32.Parse(strLabel);               GUIGraphicsContext.MaxFPS = fps;             }             if (iControl == (int)Controls.CONTROL_LISTLOOP_DELAY)             {               string strLabel = message.Label;               m_iListLoopDelay = Int32.Parse(strLabel);               GUIGraphicsContext.ScrollSpeedVertical = m_iListLoopDelay;               ResetExampleLabels();             }           }           break;       }
Magic Number,MediaPortal.GUI.Settings,GUISettingsGUI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_ScrollSpeed.cs,OnMessage,The following statement contains a magic number: switch (message.Message)       {         case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:           {             base.OnMessage(message);             LoadSettings();             GUISpinControl cntl = (GUISpinControl)GetControl((int)Controls.CONTROL_FPS);             cntl.ShowRange = false;             GUIControl.ClearControl(GetID' (int)Controls.CONTROL_SPEED_HORIZONTAL);             for (int i = 1; i <= 5; ++i)             {               GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_SPEED_HORIZONTAL' i.ToString());             }             GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_SPEED_HORIZONTAL' m_iSpeedHorizontal - 1);              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_SPEED_VERTICAL);             for (int i = 1; i <= 5; ++i)             {               GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_SPEED_VERTICAL' i.ToString());             }             GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_SPEED_VERTICAL' m_iSpeedVertical - 1);              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_FPS);             for (int i = 10; i <= 100; ++i)             {               GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_FPS' i.ToString());             }             GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_FPS' GUIGraphicsContext.MaxFPS - 10);               GUIControl.ClearControl(GetID' (int)Controls.CONTROL_LISTLOOP_DELAY);             for (int i = 1; i <= 10000; ++i)             {               GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_LISTLOOP_DELAY' i.ToString());             }             GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_LISTLOOP_DELAY' m_iListLoopDelay - 1);               ResetExampleLabels();              return true;           }          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:           {             SaveSettings();           }           break;          case GUIMessage.MessageType.GUI_MSG_CLICKED:           {             int iControl = message.SenderControlId;             if (iControl == (int)Controls.CONTROL_SPEED_HORIZONTAL)             {               string strLabel = message.Label;               m_iSpeedHorizontal = Int32.Parse(strLabel);               GUIGraphicsContext.ScrollSpeedHorizontal = m_iSpeedHorizontal;               ResetExampleLabels();             }             if (iControl == (int)Controls.CONTROL_SPEED_VERTICAL)             {               string strLabel = message.Label;               m_iSpeedVertical = Int32.Parse(strLabel);               GUIGraphicsContext.ScrollSpeedVertical = m_iSpeedVertical;               ResetExampleLabels();             }             if (iControl == (int)Controls.CONTROL_FPS)             {               string strLabel = message.Label;               int fps = Int32.Parse(strLabel);               GUIGraphicsContext.MaxFPS = fps;             }             if (iControl == (int)Controls.CONTROL_LISTLOOP_DELAY)             {               string strLabel = message.Label;               m_iListLoopDelay = Int32.Parse(strLabel);               GUIGraphicsContext.ScrollSpeedVertical = m_iListLoopDelay;               ResetExampleLabels();             }           }           break;       }
Magic Number,MediaPortal.GUI.Settings,GUISettingsGUI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_ScrollSpeed.cs,OnMessage,The following statement contains a magic number: switch (message.Message)       {         case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:           {             base.OnMessage(message);             LoadSettings();             GUISpinControl cntl = (GUISpinControl)GetControl((int)Controls.CONTROL_FPS);             cntl.ShowRange = false;             GUIControl.ClearControl(GetID' (int)Controls.CONTROL_SPEED_HORIZONTAL);             for (int i = 1; i <= 5; ++i)             {               GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_SPEED_HORIZONTAL' i.ToString());             }             GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_SPEED_HORIZONTAL' m_iSpeedHorizontal - 1);              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_SPEED_VERTICAL);             for (int i = 1; i <= 5; ++i)             {               GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_SPEED_VERTICAL' i.ToString());             }             GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_SPEED_VERTICAL' m_iSpeedVertical - 1);              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_FPS);             for (int i = 10; i <= 100; ++i)             {               GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_FPS' i.ToString());             }             GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_FPS' GUIGraphicsContext.MaxFPS - 10);               GUIControl.ClearControl(GetID' (int)Controls.CONTROL_LISTLOOP_DELAY);             for (int i = 1; i <= 10000; ++i)             {               GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_LISTLOOP_DELAY' i.ToString());             }             GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_LISTLOOP_DELAY' m_iListLoopDelay - 1);               ResetExampleLabels();              return true;           }          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:           {             SaveSettings();           }           break;          case GUIMessage.MessageType.GUI_MSG_CLICKED:           {             int iControl = message.SenderControlId;             if (iControl == (int)Controls.CONTROL_SPEED_HORIZONTAL)             {               string strLabel = message.Label;               m_iSpeedHorizontal = Int32.Parse(strLabel);               GUIGraphicsContext.ScrollSpeedHorizontal = m_iSpeedHorizontal;               ResetExampleLabels();             }             if (iControl == (int)Controls.CONTROL_SPEED_VERTICAL)             {               string strLabel = message.Label;               m_iSpeedVertical = Int32.Parse(strLabel);               GUIGraphicsContext.ScrollSpeedVertical = m_iSpeedVertical;               ResetExampleLabels();             }             if (iControl == (int)Controls.CONTROL_FPS)             {               string strLabel = message.Label;               int fps = Int32.Parse(strLabel);               GUIGraphicsContext.MaxFPS = fps;             }             if (iControl == (int)Controls.CONTROL_LISTLOOP_DELAY)             {               string strLabel = message.Label;               m_iListLoopDelay = Int32.Parse(strLabel);               GUIGraphicsContext.ScrollSpeedVertical = m_iListLoopDelay;               ResetExampleLabels();             }           }           break;       }
Magic Number,MediaPortal.GUI.Settings,GUISettingsGUI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_ScrollSpeed.cs,OnMessage,The following statement contains a magic number: switch (message.Message)       {         case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:           {             base.OnMessage(message);             LoadSettings();             GUISpinControl cntl = (GUISpinControl)GetControl((int)Controls.CONTROL_FPS);             cntl.ShowRange = false;             GUIControl.ClearControl(GetID' (int)Controls.CONTROL_SPEED_HORIZONTAL);             for (int i = 1; i <= 5; ++i)             {               GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_SPEED_HORIZONTAL' i.ToString());             }             GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_SPEED_HORIZONTAL' m_iSpeedHorizontal - 1);              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_SPEED_VERTICAL);             for (int i = 1; i <= 5; ++i)             {               GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_SPEED_VERTICAL' i.ToString());             }             GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_SPEED_VERTICAL' m_iSpeedVertical - 1);              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_FPS);             for (int i = 10; i <= 100; ++i)             {               GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_FPS' i.ToString());             }             GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_FPS' GUIGraphicsContext.MaxFPS - 10);               GUIControl.ClearControl(GetID' (int)Controls.CONTROL_LISTLOOP_DELAY);             for (int i = 1; i <= 10000; ++i)             {               GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_LISTLOOP_DELAY' i.ToString());             }             GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_LISTLOOP_DELAY' m_iListLoopDelay - 1);               ResetExampleLabels();              return true;           }          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:           {             SaveSettings();           }           break;          case GUIMessage.MessageType.GUI_MSG_CLICKED:           {             int iControl = message.SenderControlId;             if (iControl == (int)Controls.CONTROL_SPEED_HORIZONTAL)             {               string strLabel = message.Label;               m_iSpeedHorizontal = Int32.Parse(strLabel);               GUIGraphicsContext.ScrollSpeedHorizontal = m_iSpeedHorizontal;               ResetExampleLabels();             }             if (iControl == (int)Controls.CONTROL_SPEED_VERTICAL)             {               string strLabel = message.Label;               m_iSpeedVertical = Int32.Parse(strLabel);               GUIGraphicsContext.ScrollSpeedVertical = m_iSpeedVertical;               ResetExampleLabels();             }             if (iControl == (int)Controls.CONTROL_FPS)             {               string strLabel = message.Label;               int fps = Int32.Parse(strLabel);               GUIGraphicsContext.MaxFPS = fps;             }             if (iControl == (int)Controls.CONTROL_LISTLOOP_DELAY)             {               string strLabel = message.Label;               m_iListLoopDelay = Int32.Parse(strLabel);               GUIGraphicsContext.ScrollSpeedVertical = m_iListLoopDelay;               ResetExampleLabels();             }           }           break;       }
Magic Number,MediaPortal.GUI.Settings,GUISettingsGUI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_ScrollSpeed.cs,OnMessage,The following statement contains a magic number: switch (message.Message)       {         case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:           {             base.OnMessage(message);             LoadSettings();             GUISpinControl cntl = (GUISpinControl)GetControl((int)Controls.CONTROL_FPS);             cntl.ShowRange = false;             GUIControl.ClearControl(GetID' (int)Controls.CONTROL_SPEED_HORIZONTAL);             for (int i = 1; i <= 5; ++i)             {               GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_SPEED_HORIZONTAL' i.ToString());             }             GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_SPEED_HORIZONTAL' m_iSpeedHorizontal - 1);              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_SPEED_VERTICAL);             for (int i = 1; i <= 5; ++i)             {               GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_SPEED_VERTICAL' i.ToString());             }             GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_SPEED_VERTICAL' m_iSpeedVertical - 1);              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_FPS);             for (int i = 10; i <= 100; ++i)             {               GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_FPS' i.ToString());             }             GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_FPS' GUIGraphicsContext.MaxFPS - 10);               GUIControl.ClearControl(GetID' (int)Controls.CONTROL_LISTLOOP_DELAY);             for (int i = 1; i <= 10000; ++i)             {               GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_LISTLOOP_DELAY' i.ToString());             }             GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_LISTLOOP_DELAY' m_iListLoopDelay - 1);               ResetExampleLabels();              return true;           }          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:           {             SaveSettings();           }           break;          case GUIMessage.MessageType.GUI_MSG_CLICKED:           {             int iControl = message.SenderControlId;             if (iControl == (int)Controls.CONTROL_SPEED_HORIZONTAL)             {               string strLabel = message.Label;               m_iSpeedHorizontal = Int32.Parse(strLabel);               GUIGraphicsContext.ScrollSpeedHorizontal = m_iSpeedHorizontal;               ResetExampleLabels();             }             if (iControl == (int)Controls.CONTROL_SPEED_VERTICAL)             {               string strLabel = message.Label;               m_iSpeedVertical = Int32.Parse(strLabel);               GUIGraphicsContext.ScrollSpeedVertical = m_iSpeedVertical;               ResetExampleLabels();             }             if (iControl == (int)Controls.CONTROL_FPS)             {               string strLabel = message.Label;               int fps = Int32.Parse(strLabel);               GUIGraphicsContext.MaxFPS = fps;             }             if (iControl == (int)Controls.CONTROL_LISTLOOP_DELAY)             {               string strLabel = message.Label;               m_iListLoopDelay = Int32.Parse(strLabel);               GUIGraphicsContext.ScrollSpeedVertical = m_iListLoopDelay;               ResetExampleLabels();             }           }           break;       }
Magic Number,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(100010));
Magic Number,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnAction,The following statement contains a magic number: (DateTime.Now.Ticks / 10000) - m_dwLastTime > 500
Magic Number,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnAction,The following statement contains a magic number: (DateTime.Now.Ticks / 10000) - m_dwLastTime > 500
Magic Number,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnAction,The following statement contains a magic number: m_dwLastTime = (DateTime.Now.Ticks / 10000);
Magic Number,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnAction,The following statement contains a magic number: m_iSpeed = 10;
Magic Number,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnAction,The following statement contains a magic number: m_iSpeed > 10
Magic Number,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_SELECT_ITEM:            {              // Cycle modes              // Only 0'1 currently.              if (!m_bModeLocked)              {                m_iMode = 1 - m_iMode;                m_bModeLocked = true;                bChanged = true;              }            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth > iLogWidthMin)                {                  m_iLogWidth -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              else              {                // Offset                if (iXOff > -128)                {                  iXOff -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth < iLogWidthMax)                {                  m_iLogWidth += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }              else              {                // Offset                if (iXOff < 128)                {                  iXOff += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }                m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight > iLogHeightMin)                {                  m_iLogHeight -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              else              {                // Offset                if (iYOff > -128)                {                  iYOff -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight < iLogHeightMax)                {                  m_iLogHeight += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              else              {                if (iYOff < 128)                {                  iYOff += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_CALIBRATE_RESET:            //if (m_iMode == 1)            //{            m_iLogWidth = GUIGraphicsContext.Width;            m_iLogHeight = GUIGraphicsContext.Height;            //}            //else            //{            iXOff = 0;            iYOff = 0;            //}            bChanged = true;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            break;            case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0 || fY != 0.0)            {              bChanged = true;              if (m_iMode == 1)              {                m_iLogWidth += (int)fX;                m_iLogHeight -= (int)fY;              }              else              {                iXOff += (int)fX;                if (iXOff < -128)                {                  iXOff = -128;                }                if (iXOff > 128)                {                  iXOff = 128;                }                  iYOff -= (int)fY;                if (iYOff < -128)                {                  iYOff = -128;                }                if (iYOff > 128)                {                  iYOff = 128;                }              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_SELECT_ITEM:            {              // Cycle modes              // Only 0'1 currently.              if (!m_bModeLocked)              {                m_iMode = 1 - m_iMode;                m_bModeLocked = true;                bChanged = true;              }            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth > iLogWidthMin)                {                  m_iLogWidth -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              else              {                // Offset                if (iXOff > -128)                {                  iXOff -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth < iLogWidthMax)                {                  m_iLogWidth += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }              else              {                // Offset                if (iXOff < 128)                {                  iXOff += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }                m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight > iLogHeightMin)                {                  m_iLogHeight -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              else              {                // Offset                if (iYOff > -128)                {                  iYOff -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight < iLogHeightMax)                {                  m_iLogHeight += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              else              {                if (iYOff < 128)                {                  iYOff += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_CALIBRATE_RESET:            //if (m_iMode == 1)            //{            m_iLogWidth = GUIGraphicsContext.Width;            m_iLogHeight = GUIGraphicsContext.Height;            //}            //else            //{            iXOff = 0;            iYOff = 0;            //}            bChanged = true;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            break;            case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0 || fY != 0.0)            {              bChanged = true;              if (m_iMode == 1)              {                m_iLogWidth += (int)fX;                m_iLogHeight -= (int)fY;              }              else              {                iXOff += (int)fX;                if (iXOff < -128)                {                  iXOff = -128;                }                if (iXOff > 128)                {                  iXOff = 128;                }                  iYOff -= (int)fY;                if (iYOff < -128)                {                  iYOff = -128;                }                if (iYOff > 128)                {                  iYOff = 128;                }              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_SELECT_ITEM:            {              // Cycle modes              // Only 0'1 currently.              if (!m_bModeLocked)              {                m_iMode = 1 - m_iMode;                m_bModeLocked = true;                bChanged = true;              }            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth > iLogWidthMin)                {                  m_iLogWidth -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              else              {                // Offset                if (iXOff > -128)                {                  iXOff -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth < iLogWidthMax)                {                  m_iLogWidth += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }              else              {                // Offset                if (iXOff < 128)                {                  iXOff += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }                m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight > iLogHeightMin)                {                  m_iLogHeight -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              else              {                // Offset                if (iYOff > -128)                {                  iYOff -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight < iLogHeightMax)                {                  m_iLogHeight += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              else              {                if (iYOff < 128)                {                  iYOff += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_CALIBRATE_RESET:            //if (m_iMode == 1)            //{            m_iLogWidth = GUIGraphicsContext.Width;            m_iLogHeight = GUIGraphicsContext.Height;            //}            //else            //{            iXOff = 0;            iYOff = 0;            //}            bChanged = true;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            break;            case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0 || fY != 0.0)            {              bChanged = true;              if (m_iMode == 1)              {                m_iLogWidth += (int)fX;                m_iLogHeight -= (int)fY;              }              else              {                iXOff += (int)fX;                if (iXOff < -128)                {                  iXOff = -128;                }                if (iXOff > 128)                {                  iXOff = 128;                }                  iYOff -= (int)fY;                if (iYOff < -128)                {                  iYOff = -128;                }                if (iYOff > 128)                {                  iYOff = 128;                }              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_SELECT_ITEM:            {              // Cycle modes              // Only 0'1 currently.              if (!m_bModeLocked)              {                m_iMode = 1 - m_iMode;                m_bModeLocked = true;                bChanged = true;              }            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth > iLogWidthMin)                {                  m_iLogWidth -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              else              {                // Offset                if (iXOff > -128)                {                  iXOff -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth < iLogWidthMax)                {                  m_iLogWidth += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }              else              {                // Offset                if (iXOff < 128)                {                  iXOff += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }                m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight > iLogHeightMin)                {                  m_iLogHeight -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              else              {                // Offset                if (iYOff > -128)                {                  iYOff -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight < iLogHeightMax)                {                  m_iLogHeight += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              else              {                if (iYOff < 128)                {                  iYOff += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_CALIBRATE_RESET:            //if (m_iMode == 1)            //{            m_iLogWidth = GUIGraphicsContext.Width;            m_iLogHeight = GUIGraphicsContext.Height;            //}            //else            //{            iXOff = 0;            iYOff = 0;            //}            bChanged = true;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            break;            case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0 || fY != 0.0)            {              bChanged = true;              if (m_iMode == 1)              {                m_iLogWidth += (int)fX;                m_iLogHeight -= (int)fY;              }              else              {                iXOff += (int)fX;                if (iXOff < -128)                {                  iXOff = -128;                }                if (iXOff > 128)                {                  iXOff = 128;                }                  iYOff -= (int)fY;                if (iYOff < -128)                {                  iYOff = -128;                }                if (iYOff > 128)                {                  iYOff = 128;                }              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_SELECT_ITEM:            {              // Cycle modes              // Only 0'1 currently.              if (!m_bModeLocked)              {                m_iMode = 1 - m_iMode;                m_bModeLocked = true;                bChanged = true;              }            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth > iLogWidthMin)                {                  m_iLogWidth -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              else              {                // Offset                if (iXOff > -128)                {                  iXOff -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth < iLogWidthMax)                {                  m_iLogWidth += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }              else              {                // Offset                if (iXOff < 128)                {                  iXOff += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }                m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight > iLogHeightMin)                {                  m_iLogHeight -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              else              {                // Offset                if (iYOff > -128)                {                  iYOff -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight < iLogHeightMax)                {                  m_iLogHeight += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              else              {                if (iYOff < 128)                {                  iYOff += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_CALIBRATE_RESET:            //if (m_iMode == 1)            //{            m_iLogWidth = GUIGraphicsContext.Width;            m_iLogHeight = GUIGraphicsContext.Height;            //}            //else            //{            iXOff = 0;            iYOff = 0;            //}            bChanged = true;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            break;            case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0 || fY != 0.0)            {              bChanged = true;              if (m_iMode == 1)              {                m_iLogWidth += (int)fX;                m_iLogHeight -= (int)fY;              }              else              {                iXOff += (int)fX;                if (iXOff < -128)                {                  iXOff = -128;                }                if (iXOff > 128)                {                  iXOff = 128;                }                  iYOff -= (int)fY;                if (iYOff < -128)                {                  iYOff = -128;                }                if (iYOff > 128)                {                  iYOff = 128;                }              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_SELECT_ITEM:            {              // Cycle modes              // Only 0'1 currently.              if (!m_bModeLocked)              {                m_iMode = 1 - m_iMode;                m_bModeLocked = true;                bChanged = true;              }            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth > iLogWidthMin)                {                  m_iLogWidth -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              else              {                // Offset                if (iXOff > -128)                {                  iXOff -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth < iLogWidthMax)                {                  m_iLogWidth += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }              else              {                // Offset                if (iXOff < 128)                {                  iXOff += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }                m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight > iLogHeightMin)                {                  m_iLogHeight -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              else              {                // Offset                if (iYOff > -128)                {                  iYOff -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight < iLogHeightMax)                {                  m_iLogHeight += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              else              {                if (iYOff < 128)                {                  iYOff += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_CALIBRATE_RESET:            //if (m_iMode == 1)            //{            m_iLogWidth = GUIGraphicsContext.Width;            m_iLogHeight = GUIGraphicsContext.Height;            //}            //else            //{            iXOff = 0;            iYOff = 0;            //}            bChanged = true;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            break;            case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0 || fY != 0.0)            {              bChanged = true;              if (m_iMode == 1)              {                m_iLogWidth += (int)fX;                m_iLogHeight -= (int)fY;              }              else              {                iXOff += (int)fX;                if (iXOff < -128)                {                  iXOff = -128;                }                if (iXOff > 128)                {                  iXOff = 128;                }                  iYOff -= (int)fY;                if (iYOff < -128)                {                  iYOff = -128;                }                if (iYOff > 128)                {                  iYOff = 128;                }              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_SELECT_ITEM:            {              // Cycle modes              // Only 0'1 currently.              if (!m_bModeLocked)              {                m_iMode = 1 - m_iMode;                m_bModeLocked = true;                bChanged = true;              }            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth > iLogWidthMin)                {                  m_iLogWidth -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              else              {                // Offset                if (iXOff > -128)                {                  iXOff -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth < iLogWidthMax)                {                  m_iLogWidth += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }              else              {                // Offset                if (iXOff < 128)                {                  iXOff += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }                m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight > iLogHeightMin)                {                  m_iLogHeight -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              else              {                // Offset                if (iYOff > -128)                {                  iYOff -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight < iLogHeightMax)                {                  m_iLogHeight += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              else              {                if (iYOff < 128)                {                  iYOff += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_CALIBRATE_RESET:            //if (m_iMode == 1)            //{            m_iLogWidth = GUIGraphicsContext.Width;            m_iLogHeight = GUIGraphicsContext.Height;            //}            //else            //{            iXOff = 0;            iYOff = 0;            //}            bChanged = true;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            break;            case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0 || fY != 0.0)            {              bChanged = true;              if (m_iMode == 1)              {                m_iLogWidth += (int)fX;                m_iLogHeight -= (int)fY;              }              else              {                iXOff += (int)fX;                if (iXOff < -128)                {                  iXOff = -128;                }                if (iXOff > 128)                {                  iXOff = 128;                }                  iYOff -= (int)fY;                if (iYOff < -128)                {                  iYOff = -128;                }                if (iYOff > 128)                {                  iYOff = 128;                }              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_SELECT_ITEM:            {              // Cycle modes              // Only 0'1 currently.              if (!m_bModeLocked)              {                m_iMode = 1 - m_iMode;                m_bModeLocked = true;                bChanged = true;              }            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth > iLogWidthMin)                {                  m_iLogWidth -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              else              {                // Offset                if (iXOff > -128)                {                  iXOff -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth < iLogWidthMax)                {                  m_iLogWidth += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }              else              {                // Offset                if (iXOff < 128)                {                  iXOff += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }                m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight > iLogHeightMin)                {                  m_iLogHeight -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              else              {                // Offset                if (iYOff > -128)                {                  iYOff -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight < iLogHeightMax)                {                  m_iLogHeight += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              else              {                if (iYOff < 128)                {                  iYOff += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_CALIBRATE_RESET:            //if (m_iMode == 1)            //{            m_iLogWidth = GUIGraphicsContext.Width;            m_iLogHeight = GUIGraphicsContext.Height;            //}            //else            //{            iXOff = 0;            iYOff = 0;            //}            bChanged = true;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            break;            case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0 || fY != 0.0)            {              bChanged = true;              if (m_iMode == 1)              {                m_iLogWidth += (int)fX;                m_iLogHeight -= (int)fY;              }              else              {                iXOff += (int)fX;                if (iXOff < -128)                {                  iXOff = -128;                }                if (iXOff > 128)                {                  iXOff = 128;                }                  iYOff -= (int)fY;                if (iYOff < -128)                {                  iYOff = -128;                }                if (iYOff > 128)                {                  iYOff = 128;                }              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_SELECT_ITEM:            {              // Cycle modes              // Only 0'1 currently.              if (!m_bModeLocked)              {                m_iMode = 1 - m_iMode;                m_bModeLocked = true;                bChanged = true;              }            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth > iLogWidthMin)                {                  m_iLogWidth -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              else              {                // Offset                if (iXOff > -128)                {                  iXOff -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth < iLogWidthMax)                {                  m_iLogWidth += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }              else              {                // Offset                if (iXOff < 128)                {                  iXOff += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }                m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight > iLogHeightMin)                {                  m_iLogHeight -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              else              {                // Offset                if (iYOff > -128)                {                  iYOff -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight < iLogHeightMax)                {                  m_iLogHeight += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              else              {                if (iYOff < 128)                {                  iYOff += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_CALIBRATE_RESET:            //if (m_iMode == 1)            //{            m_iLogWidth = GUIGraphicsContext.Width;            m_iLogHeight = GUIGraphicsContext.Height;            //}            //else            //{            iXOff = 0;            iYOff = 0;            //}            bChanged = true;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            break;            case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0 || fY != 0.0)            {              bChanged = true;              if (m_iMode == 1)              {                m_iLogWidth += (int)fX;                m_iLogHeight -= (int)fY;              }              else              {                iXOff += (int)fX;                if (iXOff < -128)                {                  iXOff = -128;                }                if (iXOff > 128)                {                  iXOff = 128;                }                  iYOff -= (int)fY;                if (iYOff < -128)                {                  iYOff = -128;                }                if (iYOff > 128)                {                  iYOff = 128;                }              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_SELECT_ITEM:            {              // Cycle modes              // Only 0'1 currently.              if (!m_bModeLocked)              {                m_iMode = 1 - m_iMode;                m_bModeLocked = true;                bChanged = true;              }            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth > iLogWidthMin)                {                  m_iLogWidth -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              else              {                // Offset                if (iXOff > -128)                {                  iXOff -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth < iLogWidthMax)                {                  m_iLogWidth += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }              else              {                // Offset                if (iXOff < 128)                {                  iXOff += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }                m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight > iLogHeightMin)                {                  m_iLogHeight -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              else              {                // Offset                if (iYOff > -128)                {                  iYOff -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight < iLogHeightMax)                {                  m_iLogHeight += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              else              {                if (iYOff < 128)                {                  iYOff += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_CALIBRATE_RESET:            //if (m_iMode == 1)            //{            m_iLogWidth = GUIGraphicsContext.Width;            m_iLogHeight = GUIGraphicsContext.Height;            //}            //else            //{            iXOff = 0;            iYOff = 0;            //}            bChanged = true;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            break;            case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0 || fY != 0.0)            {              bChanged = true;              if (m_iMode == 1)              {                m_iLogWidth += (int)fX;                m_iLogHeight -= (int)fY;              }              else              {                iXOff += (int)fX;                if (iXOff < -128)                {                  iXOff = -128;                }                if (iXOff > 128)                {                  iXOff = 128;                }                  iYOff -= (int)fY;                if (iYOff < -128)                {                  iYOff = -128;                }                if (iYOff > 128)                {                  iYOff = 128;                }              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_SELECT_ITEM:            {              // Cycle modes              // Only 0'1 currently.              if (!m_bModeLocked)              {                m_iMode = 1 - m_iMode;                m_bModeLocked = true;                bChanged = true;              }            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth > iLogWidthMin)                {                  m_iLogWidth -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              else              {                // Offset                if (iXOff > -128)                {                  iXOff -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth < iLogWidthMax)                {                  m_iLogWidth += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }              else              {                // Offset                if (iXOff < 128)                {                  iXOff += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }                m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight > iLogHeightMin)                {                  m_iLogHeight -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              else              {                // Offset                if (iYOff > -128)                {                  iYOff -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight < iLogHeightMax)                {                  m_iLogHeight += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              else              {                if (iYOff < 128)                {                  iYOff += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_CALIBRATE_RESET:            //if (m_iMode == 1)            //{            m_iLogWidth = GUIGraphicsContext.Width;            m_iLogHeight = GUIGraphicsContext.Height;            //}            //else            //{            iXOff = 0;            iYOff = 0;            //}            bChanged = true;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            break;            case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0 || fY != 0.0)            {              bChanged = true;              if (m_iMode == 1)              {                m_iLogWidth += (int)fX;                m_iLogHeight -= (int)fY;              }              else              {                iXOff += (int)fX;                if (iXOff < -128)                {                  iXOff = -128;                }                if (iXOff > 128)                {                  iXOff = 128;                }                  iYOff -= (int)fY;                if (iYOff < -128)                {                  iYOff = -128;                }                if (iYOff > 128)                {                  iYOff = 128;                }              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_SELECT_ITEM:            {              // Cycle modes              // Only 0'1 currently.              if (!m_bModeLocked)              {                m_iMode = 1 - m_iMode;                m_bModeLocked = true;                bChanged = true;              }            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth > iLogWidthMin)                {                  m_iLogWidth -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              else              {                // Offset                if (iXOff > -128)                {                  iXOff -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth < iLogWidthMax)                {                  m_iLogWidth += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }              else              {                // Offset                if (iXOff < 128)                {                  iXOff += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }                m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight > iLogHeightMin)                {                  m_iLogHeight -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              else              {                // Offset                if (iYOff > -128)                {                  iYOff -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight < iLogHeightMax)                {                  m_iLogHeight += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              else              {                if (iYOff < 128)                {                  iYOff += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_CALIBRATE_RESET:            //if (m_iMode == 1)            //{            m_iLogWidth = GUIGraphicsContext.Width;            m_iLogHeight = GUIGraphicsContext.Height;            //}            //else            //{            iXOff = 0;            iYOff = 0;            //}            bChanged = true;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            break;            case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0 || fY != 0.0)            {              bChanged = true;              if (m_iMode == 1)              {                m_iLogWidth += (int)fX;                m_iLogHeight -= (int)fY;              }              else              {                iXOff += (int)fX;                if (iXOff < -128)                {                  iXOff = -128;                }                if (iXOff > 128)                {                  iXOff = 128;                }                  iYOff -= (int)fY;                if (iYOff < -128)                {                  iYOff = -128;                }                if (iYOff > 128)                {                  iYOff = 128;                }              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_SELECT_ITEM:            {              // Cycle modes              // Only 0'1 currently.              if (!m_bModeLocked)              {                m_iMode = 1 - m_iMode;                m_bModeLocked = true;                bChanged = true;              }            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth > iLogWidthMin)                {                  m_iLogWidth -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              else              {                // Offset                if (iXOff > -128)                {                  iXOff -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth < iLogWidthMax)                {                  m_iLogWidth += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }              else              {                // Offset                if (iXOff < 128)                {                  iXOff += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }                m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight > iLogHeightMin)                {                  m_iLogHeight -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              else              {                // Offset                if (iYOff > -128)                {                  iYOff -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight < iLogHeightMax)                {                  m_iLogHeight += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              else              {                if (iYOff < 128)                {                  iYOff += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_CALIBRATE_RESET:            //if (m_iMode == 1)            //{            m_iLogWidth = GUIGraphicsContext.Width;            m_iLogHeight = GUIGraphicsContext.Height;            //}            //else            //{            iXOff = 0;            iYOff = 0;            //}            bChanged = true;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            break;            case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0 || fY != 0.0)            {              bChanged = true;              if (m_iMode == 1)              {                m_iLogWidth += (int)fX;                m_iLogHeight -= (int)fY;              }              else              {                iXOff += (int)fX;                if (iXOff < -128)                {                  iXOff = -128;                }                if (iXOff > 128)                {                  iXOff = 128;                }                  iYOff -= (int)fY;                if (iYOff < -128)                {                  iYOff = -128;                }                if (iYOff > 128)                {                  iYOff = 128;                }              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_SELECT_ITEM:            {              // Cycle modes              // Only 0'1 currently.              if (!m_bModeLocked)              {                m_iMode = 1 - m_iMode;                m_bModeLocked = true;                bChanged = true;              }            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth > iLogWidthMin)                {                  m_iLogWidth -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              else              {                // Offset                if (iXOff > -128)                {                  iXOff -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth < iLogWidthMax)                {                  m_iLogWidth += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }              else              {                // Offset                if (iXOff < 128)                {                  iXOff += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }                m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight > iLogHeightMin)                {                  m_iLogHeight -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              else              {                // Offset                if (iYOff > -128)                {                  iYOff -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight < iLogHeightMax)                {                  m_iLogHeight += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              else              {                if (iYOff < 128)                {                  iYOff += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_CALIBRATE_RESET:            //if (m_iMode == 1)            //{            m_iLogWidth = GUIGraphicsContext.Width;            m_iLogHeight = GUIGraphicsContext.Height;            //}            //else            //{            iXOff = 0;            iYOff = 0;            //}            bChanged = true;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            break;            case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0 || fY != 0.0)            {              bChanged = true;              if (m_iMode == 1)              {                m_iLogWidth += (int)fX;                m_iLogHeight -= (int)fY;              }              else              {                iXOff += (int)fX;                if (iXOff < -128)                {                  iXOff = -128;                }                if (iXOff > 128)                {                  iXOff = 128;                }                  iYOff -= (int)fY;                if (iYOff < -128)                {                  iYOff = -128;                }                if (iYOff > 128)                {                  iYOff = 128;                }              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_SELECT_ITEM:            {              // Cycle modes              // Only 0'1 currently.              if (!m_bModeLocked)              {                m_iMode = 1 - m_iMode;                m_bModeLocked = true;                bChanged = true;              }            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth > iLogWidthMin)                {                  m_iLogWidth -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              else              {                // Offset                if (iXOff > -128)                {                  iXOff -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth < iLogWidthMax)                {                  m_iLogWidth += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }              else              {                // Offset                if (iXOff < 128)                {                  iXOff += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }                m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight > iLogHeightMin)                {                  m_iLogHeight -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              else              {                // Offset                if (iYOff > -128)                {                  iYOff -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight < iLogHeightMax)                {                  m_iLogHeight += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              else              {                if (iYOff < 128)                {                  iYOff += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_CALIBRATE_RESET:            //if (m_iMode == 1)            //{            m_iLogWidth = GUIGraphicsContext.Width;            m_iLogHeight = GUIGraphicsContext.Height;            //}            //else            //{            iXOff = 0;            iYOff = 0;            //}            bChanged = true;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            break;            case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0 || fY != 0.0)            {              bChanged = true;              if (m_iMode == 1)              {                m_iLogWidth += (int)fX;                m_iLogHeight -= (int)fY;              }              else              {                iXOff += (int)fX;                if (iXOff < -128)                {                  iXOff = -128;                }                if (iXOff > 128)                {                  iXOff = 128;                }                  iYOff -= (int)fY;                if (iYOff < -128)                {                  iYOff = -128;                }                if (iYOff > 128)                {                  iYOff = 128;                }              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_SELECT_ITEM:            {              // Cycle modes              // Only 0'1 currently.              if (!m_bModeLocked)              {                m_iMode = 1 - m_iMode;                m_bModeLocked = true;                bChanged = true;              }            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth > iLogWidthMin)                {                  m_iLogWidth -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              else              {                // Offset                if (iXOff > -128)                {                  iXOff -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth < iLogWidthMax)                {                  m_iLogWidth += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }              else              {                // Offset                if (iXOff < 128)                {                  iXOff += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }                m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight > iLogHeightMin)                {                  m_iLogHeight -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              else              {                // Offset                if (iYOff > -128)                {                  iYOff -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight < iLogHeightMax)                {                  m_iLogHeight += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              else              {                if (iYOff < 128)                {                  iYOff += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_CALIBRATE_RESET:            //if (m_iMode == 1)            //{            m_iLogWidth = GUIGraphicsContext.Width;            m_iLogHeight = GUIGraphicsContext.Height;            //}            //else            //{            iXOff = 0;            iYOff = 0;            //}            bChanged = true;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            break;            case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0 || fY != 0.0)            {              bChanged = true;              if (m_iMode == 1)              {                m_iLogWidth += (int)fX;                m_iLogHeight -= (int)fY;              }              else              {                iXOff += (int)fX;                if (iXOff < -128)                {                  iXOff = -128;                }                if (iXOff > 128)                {                  iXOff = 128;                }                  iYOff -= (int)fY;                if (iYOff < -128)                {                  iYOff = -128;                }                if (iYOff > 128)                {                  iYOff = 128;                }              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_SELECT_ITEM:            {              // Cycle modes              // Only 0'1 currently.              if (!m_bModeLocked)              {                m_iMode = 1 - m_iMode;                m_bModeLocked = true;                bChanged = true;              }            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth > iLogWidthMin)                {                  m_iLogWidth -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              else              {                // Offset                if (iXOff > -128)                {                  iXOff -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth < iLogWidthMax)                {                  m_iLogWidth += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }              else              {                // Offset                if (iXOff < 128)                {                  iXOff += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }                m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight > iLogHeightMin)                {                  m_iLogHeight -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              else              {                // Offset                if (iYOff > -128)                {                  iYOff -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight < iLogHeightMax)                {                  m_iLogHeight += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              else              {                if (iYOff < 128)                {                  iYOff += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_CALIBRATE_RESET:            //if (m_iMode == 1)            //{            m_iLogWidth = GUIGraphicsContext.Width;            m_iLogHeight = GUIGraphicsContext.Height;            //}            //else            //{            iXOff = 0;            iYOff = 0;            //}            bChanged = true;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            break;            case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0 || fY != 0.0)            {              bChanged = true;              if (m_iMode == 1)              {                m_iLogWidth += (int)fX;                m_iLogHeight -= (int)fY;              }              else              {                iXOff += (int)fX;                if (iXOff < -128)                {                  iXOff = -128;                }                if (iXOff > 128)                {                  iXOff = 128;                }                  iYOff -= (int)fY;                if (iYOff < -128)                {                  iYOff = -128;                }                if (iYOff > 128)                {                  iYOff = 128;                }              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_SELECT_ITEM:            {              // Cycle modes              // Only 0'1 currently.              if (!m_bModeLocked)              {                m_iMode = 1 - m_iMode;                m_bModeLocked = true;                bChanged = true;              }            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth > iLogWidthMin)                {                  m_iLogWidth -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              else              {                // Offset                if (iXOff > -128)                {                  iXOff -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth < iLogWidthMax)                {                  m_iLogWidth += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }              else              {                // Offset                if (iXOff < 128)                {                  iXOff += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }                m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight > iLogHeightMin)                {                  m_iLogHeight -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              else              {                // Offset                if (iYOff > -128)                {                  iYOff -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight < iLogHeightMax)                {                  m_iLogHeight += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              else              {                if (iYOff < 128)                {                  iYOff += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_CALIBRATE_RESET:            //if (m_iMode == 1)            //{            m_iLogWidth = GUIGraphicsContext.Width;            m_iLogHeight = GUIGraphicsContext.Height;            //}            //else            //{            iXOff = 0;            iYOff = 0;            //}            bChanged = true;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            break;            case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0 || fY != 0.0)            {              bChanged = true;              if (m_iMode == 1)              {                m_iLogWidth += (int)fX;                m_iLogHeight -= (int)fY;              }              else              {                iXOff += (int)fX;                if (iXOff < -128)                {                  iXOff = -128;                }                if (iXOff > 128)                {                  iXOff = 128;                }                  iYOff -= (int)fY;                if (iYOff < -128)                {                  iYOff = -128;                }                if (iYOff > 128)                {                  iYOff = 128;                }              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_SELECT_ITEM:            {              // Cycle modes              // Only 0'1 currently.              if (!m_bModeLocked)              {                m_iMode = 1 - m_iMode;                m_bModeLocked = true;                bChanged = true;              }            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth > iLogWidthMin)                {                  m_iLogWidth -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              else              {                // Offset                if (iXOff > -128)                {                  iXOff -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth < iLogWidthMax)                {                  m_iLogWidth += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }              else              {                // Offset                if (iXOff < 128)                {                  iXOff += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }                m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight > iLogHeightMin)                {                  m_iLogHeight -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              else              {                // Offset                if (iYOff > -128)                {                  iYOff -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight < iLogHeightMax)                {                  m_iLogHeight += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              else              {                if (iYOff < 128)                {                  iYOff += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_CALIBRATE_RESET:            //if (m_iMode == 1)            //{            m_iLogWidth = GUIGraphicsContext.Width;            m_iLogHeight = GUIGraphicsContext.Height;            //}            //else            //{            iXOff = 0;            iYOff = 0;            //}            bChanged = true;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            break;            case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0 || fY != 0.0)            {              bChanged = true;              if (m_iMode == 1)              {                m_iLogWidth += (int)fX;                m_iLogHeight -= (int)fY;              }              else              {                iXOff += (int)fX;                if (iXOff < -128)                {                  iXOff = -128;                }                if (iXOff > 128)                {                  iXOff = 128;                }                  iYOff -= (int)fY;                if (iYOff < -128)                {                  iYOff = -128;                }                if (iYOff > 128)                {                  iYOff = 128;                }              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_SELECT_ITEM:            {              // Cycle modes              // Only 0'1 currently.              if (!m_bModeLocked)              {                m_iMode = 1 - m_iMode;                m_bModeLocked = true;                bChanged = true;              }            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth > iLogWidthMin)                {                  m_iLogWidth -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              else              {                // Offset                if (iXOff > -128)                {                  iXOff -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth < iLogWidthMax)                {                  m_iLogWidth += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }              else              {                // Offset                if (iXOff < 128)                {                  iXOff += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }                m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight > iLogHeightMin)                {                  m_iLogHeight -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              else              {                // Offset                if (iYOff > -128)                {                  iYOff -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight < iLogHeightMax)                {                  m_iLogHeight += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              else              {                if (iYOff < 128)                {                  iYOff += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_CALIBRATE_RESET:            //if (m_iMode == 1)            //{            m_iLogWidth = GUIGraphicsContext.Width;            m_iLogHeight = GUIGraphicsContext.Height;            //}            //else            //{            iXOff = 0;            iYOff = 0;            //}            bChanged = true;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            break;            case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0 || fY != 0.0)            {              bChanged = true;              if (m_iMode == 1)              {                m_iLogWidth += (int)fX;                m_iLogHeight -= (int)fY;              }              else              {                iXOff += (int)fX;                if (iXOff < -128)                {                  iXOff = -128;                }                if (iXOff > 128)                {                  iXOff = 128;                }                  iYOff -= (int)fY;                if (iYOff < -128)                {                  iYOff = -128;                }                if (iYOff > 128)                {                  iYOff = 128;                }              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_SELECT_ITEM:            {              // Cycle modes              // Only 0'1 currently.              if (!m_bModeLocked)              {                m_iMode = 1 - m_iMode;                m_bModeLocked = true;                bChanged = true;              }            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth > iLogWidthMin)                {                  m_iLogWidth -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              else              {                // Offset                if (iXOff > -128)                {                  iXOff -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth < iLogWidthMax)                {                  m_iLogWidth += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }              else              {                // Offset                if (iXOff < 128)                {                  iXOff += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }                m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight > iLogHeightMin)                {                  m_iLogHeight -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              else              {                // Offset                if (iYOff > -128)                {                  iYOff -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight < iLogHeightMax)                {                  m_iLogHeight += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              else              {                if (iYOff < 128)                {                  iYOff += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_CALIBRATE_RESET:            //if (m_iMode == 1)            //{            m_iLogWidth = GUIGraphicsContext.Width;            m_iLogHeight = GUIGraphicsContext.Height;            //}            //else            //{            iXOff = 0;            iYOff = 0;            //}            bChanged = true;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            break;            case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0 || fY != 0.0)            {              bChanged = true;              if (m_iMode == 1)              {                m_iLogWidth += (int)fX;                m_iLogHeight -= (int)fY;              }              else              {                iXOff += (int)fX;                if (iXOff < -128)                {                  iXOff = -128;                }                if (iXOff > 128)                {                  iXOff = 128;                }                  iYOff -= (int)fY;                if (iYOff < -128)                {                  iYOff = -128;                }                if (iYOff > 128)                {                  iYOff = 128;                }              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_SELECT_ITEM:            {              // Cycle modes              // Only 0'1 currently.              if (!m_bModeLocked)              {                m_iMode = 1 - m_iMode;                m_bModeLocked = true;                bChanged = true;              }            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth > iLogWidthMin)                {                  m_iLogWidth -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              else              {                // Offset                if (iXOff > -128)                {                  iXOff -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth < iLogWidthMax)                {                  m_iLogWidth += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }              else              {                // Offset                if (iXOff < 128)                {                  iXOff += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }                m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight > iLogHeightMin)                {                  m_iLogHeight -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              else              {                // Offset                if (iYOff > -128)                {                  iYOff -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight < iLogHeightMax)                {                  m_iLogHeight += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              else              {                if (iYOff < 128)                {                  iYOff += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_CALIBRATE_RESET:            //if (m_iMode == 1)            //{            m_iLogWidth = GUIGraphicsContext.Width;            m_iLogHeight = GUIGraphicsContext.Height;            //}            //else            //{            iXOff = 0;            iYOff = 0;            //}            bChanged = true;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            break;            case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0 || fY != 0.0)            {              bChanged = true;              if (m_iMode == 1)              {                m_iLogWidth += (int)fX;                m_iLogHeight -= (int)fY;              }              else              {                iXOff += (int)fX;                if (iXOff < -128)                {                  iXOff = -128;                }                if (iXOff > 128)                {                  iXOff = 128;                }                  iYOff -= (int)fY;                if (iYOff < -128)                {                  iYOff = -128;                }                if (iYOff > 128)                {                  iYOff = 128;                }              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:            {              GUIWindowManager.OnResize();              GUIWindowManager.PreInit();              GUIGraphicsContext.Save();              if (m_orgZoomVertical != GUIGraphicsContext.ZoomVertical) // only vertical zoom affects font sizes              {                GUIDialogNotify dlgNotify =                  (GUIDialogNotify)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_NOTIFY);                if (dlgNotify != null)                {                  dlgNotify.Reset();                  dlgNotify.ClearAll();                  dlgNotify.SetHeading(213); // UI Calibration                  dlgNotify.SetText(GUILocalizeStrings.Get(2650)); // Reloading fonts' please wait...                  dlgNotify.TimeOut = 1;                  dlgNotify.DoModal(GUIWindowManager.ActiveWindow);                }                GUIFontManager.LoadFonts(Config.GetFile(Config.Dir.Skin' GUIGraphicsContext.Skin' "fonts.xml"));                GUIFontManager.InitializeDeviceObjects();              }            }            break;            case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              m_iSpeed = 1;              m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;              m_iMode = 0;              m_bModeLocked = true;              m_orgZoomVertical = GUIGraphicsContext.ZoomVertical;              m_iLogWidth = (int)Math.Round((float)GUIGraphicsContext.Width * (float)GUIGraphicsContext.ZoomHorizontal);              m_iLogHeight = (int)Math.Round((float)GUIGraphicsContext.Height * (float)GUIGraphicsContext.ZoomVertical);              ClampLogicalScreenSize();              UpdateControlLabel();              return true;            }        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:            {              GUIWindowManager.OnResize();              GUIWindowManager.PreInit();              GUIGraphicsContext.Save();              if (m_orgZoomVertical != GUIGraphicsContext.ZoomVertical) // only vertical zoom affects font sizes              {                GUIDialogNotify dlgNotify =                  (GUIDialogNotify)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_NOTIFY);                if (dlgNotify != null)                {                  dlgNotify.Reset();                  dlgNotify.ClearAll();                  dlgNotify.SetHeading(213); // UI Calibration                  dlgNotify.SetText(GUILocalizeStrings.Get(2650)); // Reloading fonts' please wait...                  dlgNotify.TimeOut = 1;                  dlgNotify.DoModal(GUIWindowManager.ActiveWindow);                }                GUIFontManager.LoadFonts(Config.GetFile(Config.Dir.Skin' GUIGraphicsContext.Skin' "fonts.xml"));                GUIFontManager.InitializeDeviceObjects();              }            }            break;            case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              m_iSpeed = 1;              m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;              m_iMode = 0;              m_bModeLocked = true;              m_orgZoomVertical = GUIGraphicsContext.ZoomVertical;              m_iLogWidth = (int)Math.Round((float)GUIGraphicsContext.Width * (float)GUIGraphicsContext.ZoomHorizontal);              m_iLogHeight = (int)Math.Round((float)GUIGraphicsContext.Height * (float)GUIGraphicsContext.ZoomVertical);              ClampLogicalScreenSize();              UpdateControlLabel();              return true;            }        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(100011));
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,The following statement contains a magic number: (DateTime.Now.Ticks / 10000) - m_dwLastTime > 500
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,The following statement contains a magic number: (DateTime.Now.Ticks / 10000) - m_dwLastTime > 500
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,The following statement contains a magic number: m_dwLastTime = (DateTime.Now.Ticks / 10000);
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,The following statement contains a magic number: m_iSpeed = 10;
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,The following statement contains a magic number: m_iSpeed > 10
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            {              GUIWindowManager.ShowPreviousWindow();              return;            }            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }              x -= m_iSpeed;              m_iCountL++;              if (m_iCountL > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountL = 1;              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio -= 0.01f;              }            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }              x += m_iSpeed;              m_iCountR++;              if (m_iCountR > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountR = 1;              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio += 0.01f;              }            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }              y -= m_iSpeed;              m_iCountU++;              if (m_iCountU > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountU = 1;              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio -= 0.05f;              }            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }              y += m_iSpeed;              m_iCountD++;              if (m_iCountD > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountD = 1;              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio += 0.05f;              }            }            break;            case Action.ActionType.ACTION_CALIBRATE_SWAP_ARROWS:            m_iControl++;            if (m_iControl > (int)Controls.CONTROL_OSD)            {              m_iControl = (int)Controls.CONTROL_TOP_LEFT;            }            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            return;              case Action.ActionType.ACTION_CALIBRATE_RESET:            //GUIGraphicsContext.ResetScreenParameters(m_Res[m_iCurRes]);            GUIGraphicsContext.OverScanLeft = 0;            GUIGraphicsContext.OverScanTop = 0;            GUIGraphicsContext.PixelRatio = 1.0f;            GUIGraphicsContext.OSDOffset = 0;            GUIGraphicsContext.Subtitles = 530;              GUIGraphicsContext.OverScanWidth = GUIGraphicsContext.Width;            GUIGraphicsContext.OverScanHeight = GUIGraphicsContext.Height;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            GUIWindowManager.ResetAllControls();              return;              case Action.ActionType.ACTION_CHANGE_RESOLUTION:            // choose the next resolution in our list            //m_iCurRes++;            //if (m_iCurRes == m_Res.size())            //  m_iCurRes = 0;            //Sleep(1000);            //GUIGraphicsContext.SetGUIResolution(m_Res[m_iCurRes]);            GUIWindowManager.ResetAllControls();            return;              case Action.ActionType.ACTION_ANALOG_MOVE:            x += (int)(2 * action.fAmount1);            y -= (int)(2 * action.fAmount2);            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            {              GUIWindowManager.ShowPreviousWindow();              return;            }            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }              x -= m_iSpeed;              m_iCountL++;              if (m_iCountL > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountL = 1;              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio -= 0.01f;              }            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }              x += m_iSpeed;              m_iCountR++;              if (m_iCountR > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountR = 1;              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio += 0.01f;              }            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }              y -= m_iSpeed;              m_iCountU++;              if (m_iCountU > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountU = 1;              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio -= 0.05f;              }            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }              y += m_iSpeed;              m_iCountD++;              if (m_iCountD > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountD = 1;              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio += 0.05f;              }            }            break;            case Action.ActionType.ACTION_CALIBRATE_SWAP_ARROWS:            m_iControl++;            if (m_iControl > (int)Controls.CONTROL_OSD)            {              m_iControl = (int)Controls.CONTROL_TOP_LEFT;            }            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            return;              case Action.ActionType.ACTION_CALIBRATE_RESET:            //GUIGraphicsContext.ResetScreenParameters(m_Res[m_iCurRes]);            GUIGraphicsContext.OverScanLeft = 0;            GUIGraphicsContext.OverScanTop = 0;            GUIGraphicsContext.PixelRatio = 1.0f;            GUIGraphicsContext.OSDOffset = 0;            GUIGraphicsContext.Subtitles = 530;              GUIGraphicsContext.OverScanWidth = GUIGraphicsContext.Width;            GUIGraphicsContext.OverScanHeight = GUIGraphicsContext.Height;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            GUIWindowManager.ResetAllControls();              return;              case Action.ActionType.ACTION_CHANGE_RESOLUTION:            // choose the next resolution in our list            //m_iCurRes++;            //if (m_iCurRes == m_Res.size())            //  m_iCurRes = 0;            //Sleep(1000);            //GUIGraphicsContext.SetGUIResolution(m_Res[m_iCurRes]);            GUIWindowManager.ResetAllControls();            return;              case Action.ActionType.ACTION_ANALOG_MOVE:            x += (int)(2 * action.fAmount1);            y -= (int)(2 * action.fAmount2);            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            {              GUIWindowManager.ShowPreviousWindow();              return;            }            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }              x -= m_iSpeed;              m_iCountL++;              if (m_iCountL > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountL = 1;              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio -= 0.01f;              }            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }              x += m_iSpeed;              m_iCountR++;              if (m_iCountR > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountR = 1;              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio += 0.01f;              }            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }              y -= m_iSpeed;              m_iCountU++;              if (m_iCountU > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountU = 1;              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio -= 0.05f;              }            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }              y += m_iSpeed;              m_iCountD++;              if (m_iCountD > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountD = 1;              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio += 0.05f;              }            }            break;            case Action.ActionType.ACTION_CALIBRATE_SWAP_ARROWS:            m_iControl++;            if (m_iControl > (int)Controls.CONTROL_OSD)            {              m_iControl = (int)Controls.CONTROL_TOP_LEFT;            }            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            return;              case Action.ActionType.ACTION_CALIBRATE_RESET:            //GUIGraphicsContext.ResetScreenParameters(m_Res[m_iCurRes]);            GUIGraphicsContext.OverScanLeft = 0;            GUIGraphicsContext.OverScanTop = 0;            GUIGraphicsContext.PixelRatio = 1.0f;            GUIGraphicsContext.OSDOffset = 0;            GUIGraphicsContext.Subtitles = 530;              GUIGraphicsContext.OverScanWidth = GUIGraphicsContext.Width;            GUIGraphicsContext.OverScanHeight = GUIGraphicsContext.Height;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            GUIWindowManager.ResetAllControls();              return;              case Action.ActionType.ACTION_CHANGE_RESOLUTION:            // choose the next resolution in our list            //m_iCurRes++;            //if (m_iCurRes == m_Res.size())            //  m_iCurRes = 0;            //Sleep(1000);            //GUIGraphicsContext.SetGUIResolution(m_Res[m_iCurRes]);            GUIWindowManager.ResetAllControls();            return;              case Action.ActionType.ACTION_ANALOG_MOVE:            x += (int)(2 * action.fAmount1);            y -= (int)(2 * action.fAmount2);            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            {              GUIWindowManager.ShowPreviousWindow();              return;            }            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }              x -= m_iSpeed;              m_iCountL++;              if (m_iCountL > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountL = 1;              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio -= 0.01f;              }            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }              x += m_iSpeed;              m_iCountR++;              if (m_iCountR > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountR = 1;              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio += 0.01f;              }            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }              y -= m_iSpeed;              m_iCountU++;              if (m_iCountU > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountU = 1;              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio -= 0.05f;              }            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }              y += m_iSpeed;              m_iCountD++;              if (m_iCountD > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountD = 1;              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio += 0.05f;              }            }            break;            case Action.ActionType.ACTION_CALIBRATE_SWAP_ARROWS:            m_iControl++;            if (m_iControl > (int)Controls.CONTROL_OSD)            {              m_iControl = (int)Controls.CONTROL_TOP_LEFT;            }            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            return;              case Action.ActionType.ACTION_CALIBRATE_RESET:            //GUIGraphicsContext.ResetScreenParameters(m_Res[m_iCurRes]);            GUIGraphicsContext.OverScanLeft = 0;            GUIGraphicsContext.OverScanTop = 0;            GUIGraphicsContext.PixelRatio = 1.0f;            GUIGraphicsContext.OSDOffset = 0;            GUIGraphicsContext.Subtitles = 530;              GUIGraphicsContext.OverScanWidth = GUIGraphicsContext.Width;            GUIGraphicsContext.OverScanHeight = GUIGraphicsContext.Height;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            GUIWindowManager.ResetAllControls();              return;              case Action.ActionType.ACTION_CHANGE_RESOLUTION:            // choose the next resolution in our list            //m_iCurRes++;            //if (m_iCurRes == m_Res.size())            //  m_iCurRes = 0;            //Sleep(1000);            //GUIGraphicsContext.SetGUIResolution(m_Res[m_iCurRes]);            GUIWindowManager.ResetAllControls();            return;              case Action.ActionType.ACTION_ANALOG_MOVE:            x += (int)(2 * action.fAmount1);            y -= (int)(2 * action.fAmount2);            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            {              GUIWindowManager.ShowPreviousWindow();              return;            }            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }              x -= m_iSpeed;              m_iCountL++;              if (m_iCountL > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountL = 1;              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio -= 0.01f;              }            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }              x += m_iSpeed;              m_iCountR++;              if (m_iCountR > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountR = 1;              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio += 0.01f;              }            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }              y -= m_iSpeed;              m_iCountU++;              if (m_iCountU > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountU = 1;              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio -= 0.05f;              }            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }              y += m_iSpeed;              m_iCountD++;              if (m_iCountD > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountD = 1;              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio += 0.05f;              }            }            break;            case Action.ActionType.ACTION_CALIBRATE_SWAP_ARROWS:            m_iControl++;            if (m_iControl > (int)Controls.CONTROL_OSD)            {              m_iControl = (int)Controls.CONTROL_TOP_LEFT;            }            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            return;              case Action.ActionType.ACTION_CALIBRATE_RESET:            //GUIGraphicsContext.ResetScreenParameters(m_Res[m_iCurRes]);            GUIGraphicsContext.OverScanLeft = 0;            GUIGraphicsContext.OverScanTop = 0;            GUIGraphicsContext.PixelRatio = 1.0f;            GUIGraphicsContext.OSDOffset = 0;            GUIGraphicsContext.Subtitles = 530;              GUIGraphicsContext.OverScanWidth = GUIGraphicsContext.Width;            GUIGraphicsContext.OverScanHeight = GUIGraphicsContext.Height;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            GUIWindowManager.ResetAllControls();              return;              case Action.ActionType.ACTION_CHANGE_RESOLUTION:            // choose the next resolution in our list            //m_iCurRes++;            //if (m_iCurRes == m_Res.size())            //  m_iCurRes = 0;            //Sleep(1000);            //GUIGraphicsContext.SetGUIResolution(m_Res[m_iCurRes]);            GUIWindowManager.ResetAllControls();            return;              case Action.ActionType.ACTION_ANALOG_MOVE:            x += (int)(2 * action.fAmount1);            y -= (int)(2 * action.fAmount2);            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            {              GUIWindowManager.ShowPreviousWindow();              return;            }            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }              x -= m_iSpeed;              m_iCountL++;              if (m_iCountL > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountL = 1;              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio -= 0.01f;              }            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }              x += m_iSpeed;              m_iCountR++;              if (m_iCountR > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountR = 1;              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio += 0.01f;              }            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }              y -= m_iSpeed;              m_iCountU++;              if (m_iCountU > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountU = 1;              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio -= 0.05f;              }            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }              y += m_iSpeed;              m_iCountD++;              if (m_iCountD > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountD = 1;              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio += 0.05f;              }            }            break;            case Action.ActionType.ACTION_CALIBRATE_SWAP_ARROWS:            m_iControl++;            if (m_iControl > (int)Controls.CONTROL_OSD)            {              m_iControl = (int)Controls.CONTROL_TOP_LEFT;            }            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            return;              case Action.ActionType.ACTION_CALIBRATE_RESET:            //GUIGraphicsContext.ResetScreenParameters(m_Res[m_iCurRes]);            GUIGraphicsContext.OverScanLeft = 0;            GUIGraphicsContext.OverScanTop = 0;            GUIGraphicsContext.PixelRatio = 1.0f;            GUIGraphicsContext.OSDOffset = 0;            GUIGraphicsContext.Subtitles = 530;              GUIGraphicsContext.OverScanWidth = GUIGraphicsContext.Width;            GUIGraphicsContext.OverScanHeight = GUIGraphicsContext.Height;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            GUIWindowManager.ResetAllControls();              return;              case Action.ActionType.ACTION_CHANGE_RESOLUTION:            // choose the next resolution in our list            //m_iCurRes++;            //if (m_iCurRes == m_Res.size())            //  m_iCurRes = 0;            //Sleep(1000);            //GUIGraphicsContext.SetGUIResolution(m_Res[m_iCurRes]);            GUIWindowManager.ResetAllControls();            return;              case Action.ActionType.ACTION_ANALOG_MOVE:            x += (int)(2 * action.fAmount1);            y -= (int)(2 * action.fAmount2);            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            {              GUIWindowManager.ShowPreviousWindow();              return;            }            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }              x -= m_iSpeed;              m_iCountL++;              if (m_iCountL > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountL = 1;              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio -= 0.01f;              }            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }              x += m_iSpeed;              m_iCountR++;              if (m_iCountR > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountR = 1;              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio += 0.01f;              }            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }              y -= m_iSpeed;              m_iCountU++;              if (m_iCountU > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountU = 1;              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio -= 0.05f;              }            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }              y += m_iSpeed;              m_iCountD++;              if (m_iCountD > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountD = 1;              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio += 0.05f;              }            }            break;            case Action.ActionType.ACTION_CALIBRATE_SWAP_ARROWS:            m_iControl++;            if (m_iControl > (int)Controls.CONTROL_OSD)            {              m_iControl = (int)Controls.CONTROL_TOP_LEFT;            }            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            return;              case Action.ActionType.ACTION_CALIBRATE_RESET:            //GUIGraphicsContext.ResetScreenParameters(m_Res[m_iCurRes]);            GUIGraphicsContext.OverScanLeft = 0;            GUIGraphicsContext.OverScanTop = 0;            GUIGraphicsContext.PixelRatio = 1.0f;            GUIGraphicsContext.OSDOffset = 0;            GUIGraphicsContext.Subtitles = 530;              GUIGraphicsContext.OverScanWidth = GUIGraphicsContext.Width;            GUIGraphicsContext.OverScanHeight = GUIGraphicsContext.Height;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            GUIWindowManager.ResetAllControls();              return;              case Action.ActionType.ACTION_CHANGE_RESOLUTION:            // choose the next resolution in our list            //m_iCurRes++;            //if (m_iCurRes == m_Res.size())            //  m_iCurRes = 0;            //Sleep(1000);            //GUIGraphicsContext.SetGUIResolution(m_Res[m_iCurRes]);            GUIWindowManager.ResetAllControls();            return;              case Action.ActionType.ACTION_ANALOG_MOVE:            x += (int)(2 * action.fAmount1);            y -= (int)(2 * action.fAmount2);            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            {              GUIWindowManager.ShowPreviousWindow();              return;            }            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }              x -= m_iSpeed;              m_iCountL++;              if (m_iCountL > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountL = 1;              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio -= 0.01f;              }            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }              x += m_iSpeed;              m_iCountR++;              if (m_iCountR > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountR = 1;              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio += 0.01f;              }            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }              y -= m_iSpeed;              m_iCountU++;              if (m_iCountU > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountU = 1;              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio -= 0.05f;              }            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }              y += m_iSpeed;              m_iCountD++;              if (m_iCountD > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountD = 1;              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio += 0.05f;              }            }            break;            case Action.ActionType.ACTION_CALIBRATE_SWAP_ARROWS:            m_iControl++;            if (m_iControl > (int)Controls.CONTROL_OSD)            {              m_iControl = (int)Controls.CONTROL_TOP_LEFT;            }            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            return;              case Action.ActionType.ACTION_CALIBRATE_RESET:            //GUIGraphicsContext.ResetScreenParameters(m_Res[m_iCurRes]);            GUIGraphicsContext.OverScanLeft = 0;            GUIGraphicsContext.OverScanTop = 0;            GUIGraphicsContext.PixelRatio = 1.0f;            GUIGraphicsContext.OSDOffset = 0;            GUIGraphicsContext.Subtitles = 530;              GUIGraphicsContext.OverScanWidth = GUIGraphicsContext.Width;            GUIGraphicsContext.OverScanHeight = GUIGraphicsContext.Height;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            GUIWindowManager.ResetAllControls();              return;              case Action.ActionType.ACTION_CHANGE_RESOLUTION:            // choose the next resolution in our list            //m_iCurRes++;            //if (m_iCurRes == m_Res.size())            //  m_iCurRes = 0;            //Sleep(1000);            //GUIGraphicsContext.SetGUIResolution(m_Res[m_iCurRes]);            GUIWindowManager.ResetAllControls();            return;              case Action.ActionType.ACTION_ANALOG_MOVE:            x += (int)(2 * action.fAmount1);            y -= (int)(2 * action.fAmount2);            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            {              GUIWindowManager.ShowPreviousWindow();              return;            }            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }              x -= m_iSpeed;              m_iCountL++;              if (m_iCountL > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountL = 1;              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio -= 0.01f;              }            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }              x += m_iSpeed;              m_iCountR++;              if (m_iCountR > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountR = 1;              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio += 0.01f;              }            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }              y -= m_iSpeed;              m_iCountU++;              if (m_iCountU > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountU = 1;              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio -= 0.05f;              }            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }              y += m_iSpeed;              m_iCountD++;              if (m_iCountD > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountD = 1;              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio += 0.05f;              }            }            break;            case Action.ActionType.ACTION_CALIBRATE_SWAP_ARROWS:            m_iControl++;            if (m_iControl > (int)Controls.CONTROL_OSD)            {              m_iControl = (int)Controls.CONTROL_TOP_LEFT;            }            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            return;              case Action.ActionType.ACTION_CALIBRATE_RESET:            //GUIGraphicsContext.ResetScreenParameters(m_Res[m_iCurRes]);            GUIGraphicsContext.OverScanLeft = 0;            GUIGraphicsContext.OverScanTop = 0;            GUIGraphicsContext.PixelRatio = 1.0f;            GUIGraphicsContext.OSDOffset = 0;            GUIGraphicsContext.Subtitles = 530;              GUIGraphicsContext.OverScanWidth = GUIGraphicsContext.Width;            GUIGraphicsContext.OverScanHeight = GUIGraphicsContext.Height;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            GUIWindowManager.ResetAllControls();              return;              case Action.ActionType.ACTION_CHANGE_RESOLUTION:            // choose the next resolution in our list            //m_iCurRes++;            //if (m_iCurRes == m_Res.size())            //  m_iCurRes = 0;            //Sleep(1000);            //GUIGraphicsContext.SetGUIResolution(m_Res[m_iCurRes]);            GUIWindowManager.ResetAllControls();            return;              case Action.ActionType.ACTION_ANALOG_MOVE:            x += (int)(2 * action.fAmount1);            y -= (int)(2 * action.fAmount2);            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            {              GUIWindowManager.ShowPreviousWindow();              return;            }            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }              x -= m_iSpeed;              m_iCountL++;              if (m_iCountL > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountL = 1;              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio -= 0.01f;              }            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }              x += m_iSpeed;              m_iCountR++;              if (m_iCountR > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountR = 1;              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio += 0.01f;              }            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }              y -= m_iSpeed;              m_iCountU++;              if (m_iCountU > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountU = 1;              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio -= 0.05f;              }            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }              y += m_iSpeed;              m_iCountD++;              if (m_iCountD > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountD = 1;              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio += 0.05f;              }            }            break;            case Action.ActionType.ACTION_CALIBRATE_SWAP_ARROWS:            m_iControl++;            if (m_iControl > (int)Controls.CONTROL_OSD)            {              m_iControl = (int)Controls.CONTROL_TOP_LEFT;            }            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            return;              case Action.ActionType.ACTION_CALIBRATE_RESET:            //GUIGraphicsContext.ResetScreenParameters(m_Res[m_iCurRes]);            GUIGraphicsContext.OverScanLeft = 0;            GUIGraphicsContext.OverScanTop = 0;            GUIGraphicsContext.PixelRatio = 1.0f;            GUIGraphicsContext.OSDOffset = 0;            GUIGraphicsContext.Subtitles = 530;              GUIGraphicsContext.OverScanWidth = GUIGraphicsContext.Width;            GUIGraphicsContext.OverScanHeight = GUIGraphicsContext.Height;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            GUIWindowManager.ResetAllControls();              return;              case Action.ActionType.ACTION_CHANGE_RESOLUTION:            // choose the next resolution in our list            //m_iCurRes++;            //if (m_iCurRes == m_Res.size())            //  m_iCurRes = 0;            //Sleep(1000);            //GUIGraphicsContext.SetGUIResolution(m_Res[m_iCurRes]);            GUIWindowManager.ResetAllControls();            return;              case Action.ActionType.ACTION_ANALOG_MOVE:            x += (int)(2 * action.fAmount1);            y -= (int)(2 * action.fAmount2);            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            {              GUIWindowManager.ShowPreviousWindow();              return;            }            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }              x -= m_iSpeed;              m_iCountL++;              if (m_iCountL > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountL = 1;              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio -= 0.01f;              }            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }              x += m_iSpeed;              m_iCountR++;              if (m_iCountR > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountR = 1;              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio += 0.01f;              }            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }              y -= m_iSpeed;              m_iCountU++;              if (m_iCountU > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountU = 1;              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio -= 0.05f;              }            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }              y += m_iSpeed;              m_iCountD++;              if (m_iCountD > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountD = 1;              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio += 0.05f;              }            }            break;            case Action.ActionType.ACTION_CALIBRATE_SWAP_ARROWS:            m_iControl++;            if (m_iControl > (int)Controls.CONTROL_OSD)            {              m_iControl = (int)Controls.CONTROL_TOP_LEFT;            }            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            return;              case Action.ActionType.ACTION_CALIBRATE_RESET:            //GUIGraphicsContext.ResetScreenParameters(m_Res[m_iCurRes]);            GUIGraphicsContext.OverScanLeft = 0;            GUIGraphicsContext.OverScanTop = 0;            GUIGraphicsContext.PixelRatio = 1.0f;            GUIGraphicsContext.OSDOffset = 0;            GUIGraphicsContext.Subtitles = 530;              GUIGraphicsContext.OverScanWidth = GUIGraphicsContext.Width;            GUIGraphicsContext.OverScanHeight = GUIGraphicsContext.Height;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            GUIWindowManager.ResetAllControls();              return;              case Action.ActionType.ACTION_CHANGE_RESOLUTION:            // choose the next resolution in our list            //m_iCurRes++;            //if (m_iCurRes == m_Res.size())            //  m_iCurRes = 0;            //Sleep(1000);            //GUIGraphicsContext.SetGUIResolution(m_Res[m_iCurRes]);            GUIWindowManager.ResetAllControls();            return;              case Action.ActionType.ACTION_ANALOG_MOVE:            x += (int)(2 * action.fAmount1);            y -= (int)(2 * action.fAmount2);            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            {              GUIWindowManager.ShowPreviousWindow();              return;            }            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }              x -= m_iSpeed;              m_iCountL++;              if (m_iCountL > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountL = 1;              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio -= 0.01f;              }            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }              x += m_iSpeed;              m_iCountR++;              if (m_iCountR > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountR = 1;              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio += 0.01f;              }            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }              y -= m_iSpeed;              m_iCountU++;              if (m_iCountU > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountU = 1;              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio -= 0.05f;              }            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }              y += m_iSpeed;              m_iCountD++;              if (m_iCountD > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountD = 1;              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio += 0.05f;              }            }            break;            case Action.ActionType.ACTION_CALIBRATE_SWAP_ARROWS:            m_iControl++;            if (m_iControl > (int)Controls.CONTROL_OSD)            {              m_iControl = (int)Controls.CONTROL_TOP_LEFT;            }            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            return;              case Action.ActionType.ACTION_CALIBRATE_RESET:            //GUIGraphicsContext.ResetScreenParameters(m_Res[m_iCurRes]);            GUIGraphicsContext.OverScanLeft = 0;            GUIGraphicsContext.OverScanTop = 0;            GUIGraphicsContext.PixelRatio = 1.0f;            GUIGraphicsContext.OSDOffset = 0;            GUIGraphicsContext.Subtitles = 530;              GUIGraphicsContext.OverScanWidth = GUIGraphicsContext.Width;            GUIGraphicsContext.OverScanHeight = GUIGraphicsContext.Height;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            GUIWindowManager.ResetAllControls();              return;              case Action.ActionType.ACTION_CHANGE_RESOLUTION:            // choose the next resolution in our list            //m_iCurRes++;            //if (m_iCurRes == m_Res.size())            //  m_iCurRes = 0;            //Sleep(1000);            //GUIGraphicsContext.SetGUIResolution(m_Res[m_iCurRes]);            GUIWindowManager.ResetAllControls();            return;              case Action.ActionType.ACTION_ANALOG_MOVE:            x += (int)(2 * action.fAmount1);            y -= (int)(2 * action.fAmount2);            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            {              GUIWindowManager.ShowPreviousWindow();              return;            }            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }              x -= m_iSpeed;              m_iCountL++;              if (m_iCountL > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountL = 1;              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio -= 0.01f;              }            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }              x += m_iSpeed;              m_iCountR++;              if (m_iCountR > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountR = 1;              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio += 0.01f;              }            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }              y -= m_iSpeed;              m_iCountU++;              if (m_iCountU > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountU = 1;              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio -= 0.05f;              }            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }              y += m_iSpeed;              m_iCountD++;              if (m_iCountD > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountD = 1;              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio += 0.05f;              }            }            break;            case Action.ActionType.ACTION_CALIBRATE_SWAP_ARROWS:            m_iControl++;            if (m_iControl > (int)Controls.CONTROL_OSD)            {              m_iControl = (int)Controls.CONTROL_TOP_LEFT;            }            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            return;              case Action.ActionType.ACTION_CALIBRATE_RESET:            //GUIGraphicsContext.ResetScreenParameters(m_Res[m_iCurRes]);            GUIGraphicsContext.OverScanLeft = 0;            GUIGraphicsContext.OverScanTop = 0;            GUIGraphicsContext.PixelRatio = 1.0f;            GUIGraphicsContext.OSDOffset = 0;            GUIGraphicsContext.Subtitles = 530;              GUIGraphicsContext.OverScanWidth = GUIGraphicsContext.Width;            GUIGraphicsContext.OverScanHeight = GUIGraphicsContext.Height;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            GUIWindowManager.ResetAllControls();              return;              case Action.ActionType.ACTION_CHANGE_RESOLUTION:            // choose the next resolution in our list            //m_iCurRes++;            //if (m_iCurRes == m_Res.size())            //  m_iCurRes = 0;            //Sleep(1000);            //GUIGraphicsContext.SetGUIResolution(m_Res[m_iCurRes]);            GUIWindowManager.ResetAllControls();            return;              case Action.ActionType.ACTION_ANALOG_MOVE:            x += (int)(2 * action.fAmount1);            y -= (int)(2 * action.fAmount2);            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            {              GUIWindowManager.ShowPreviousWindow();              return;            }            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }              x -= m_iSpeed;              m_iCountL++;              if (m_iCountL > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountL = 1;              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio -= 0.01f;              }            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }              x += m_iSpeed;              m_iCountR++;              if (m_iCountR > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountR = 1;              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio += 0.01f;              }            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }              y -= m_iSpeed;              m_iCountU++;              if (m_iCountU > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountU = 1;              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio -= 0.05f;              }            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }              y += m_iSpeed;              m_iCountD++;              if (m_iCountD > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountD = 1;              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio += 0.05f;              }            }            break;            case Action.ActionType.ACTION_CALIBRATE_SWAP_ARROWS:            m_iControl++;            if (m_iControl > (int)Controls.CONTROL_OSD)            {              m_iControl = (int)Controls.CONTROL_TOP_LEFT;            }            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            return;              case Action.ActionType.ACTION_CALIBRATE_RESET:            //GUIGraphicsContext.ResetScreenParameters(m_Res[m_iCurRes]);            GUIGraphicsContext.OverScanLeft = 0;            GUIGraphicsContext.OverScanTop = 0;            GUIGraphicsContext.PixelRatio = 1.0f;            GUIGraphicsContext.OSDOffset = 0;            GUIGraphicsContext.Subtitles = 530;              GUIGraphicsContext.OverScanWidth = GUIGraphicsContext.Width;            GUIGraphicsContext.OverScanHeight = GUIGraphicsContext.Height;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            GUIWindowManager.ResetAllControls();              return;              case Action.ActionType.ACTION_CHANGE_RESOLUTION:            // choose the next resolution in our list            //m_iCurRes++;            //if (m_iCurRes == m_Res.size())            //  m_iCurRes = 0;            //Sleep(1000);            //GUIGraphicsContext.SetGUIResolution(m_Res[m_iCurRes]);            GUIWindowManager.ResetAllControls();            return;              case Action.ActionType.ACTION_ANALOG_MOVE:            x += (int)(2 * action.fAmount1);            y -= (int)(2 * action.fAmount2);            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            {              GUIWindowManager.ShowPreviousWindow();              return;            }            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }              x -= m_iSpeed;              m_iCountL++;              if (m_iCountL > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountL = 1;              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio -= 0.01f;              }            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }              x += m_iSpeed;              m_iCountR++;              if (m_iCountR > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountR = 1;              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio += 0.01f;              }            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }              y -= m_iSpeed;              m_iCountU++;              if (m_iCountU > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountU = 1;              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio -= 0.05f;              }            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }              y += m_iSpeed;              m_iCountD++;              if (m_iCountD > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountD = 1;              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio += 0.05f;              }            }            break;            case Action.ActionType.ACTION_CALIBRATE_SWAP_ARROWS:            m_iControl++;            if (m_iControl > (int)Controls.CONTROL_OSD)            {              m_iControl = (int)Controls.CONTROL_TOP_LEFT;            }            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            return;              case Action.ActionType.ACTION_CALIBRATE_RESET:            //GUIGraphicsContext.ResetScreenParameters(m_Res[m_iCurRes]);            GUIGraphicsContext.OverScanLeft = 0;            GUIGraphicsContext.OverScanTop = 0;            GUIGraphicsContext.PixelRatio = 1.0f;            GUIGraphicsContext.OSDOffset = 0;            GUIGraphicsContext.Subtitles = 530;              GUIGraphicsContext.OverScanWidth = GUIGraphicsContext.Width;            GUIGraphicsContext.OverScanHeight = GUIGraphicsContext.Height;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            GUIWindowManager.ResetAllControls();              return;              case Action.ActionType.ACTION_CHANGE_RESOLUTION:            // choose the next resolution in our list            //m_iCurRes++;            //if (m_iCurRes == m_Res.size())            //  m_iCurRes = 0;            //Sleep(1000);            //GUIGraphicsContext.SetGUIResolution(m_Res[m_iCurRes]);            GUIWindowManager.ResetAllControls();            return;              case Action.ActionType.ACTION_ANALOG_MOVE:            x += (int)(2 * action.fAmount1);            y -= (int)(2 * action.fAmount2);            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,The following statement contains a magic number: switch (m_iControl)        {          case (int)Controls.CONTROL_TOP_LEFT:            if (x < 0)            {              x = 0;            }            if (y < 0)            {              y = 0;            }            if (x > 128)            {              x = 128;            }            if (y > 128)            {              y = 128;            }            GUIGraphicsContext.OverScanWidth += GUIGraphicsContext.OverScanLeft - x;            GUIGraphicsContext.OverScanHeight += GUIGraphicsContext.OverScanTop - y;            GUIGraphicsContext.OverScanLeft = x;            GUIGraphicsContext.OverScanTop = y;            break;          case (int)Controls.CONTROL_BOTTOM_RIGHT:            if (x > GUIGraphicsContext.Width)            {              x = GUIGraphicsContext.Width;            }            if (y > GUIGraphicsContext.Height)            {              y = GUIGraphicsContext.Height;            }            if (x < GUIGraphicsContext.Width - 128)            {              x = GUIGraphicsContext.Width - 128;            }            if (y < GUIGraphicsContext.Height - 128)            {              y = GUIGraphicsContext.Height - 128;            }            GUIGraphicsContext.OverScanWidth = x - GUIGraphicsContext.OverScanLeft;            GUIGraphicsContext.OverScanHeight = y - GUIGraphicsContext.OverScanTop;            break;          case (int)Controls.CONTROL_SUBTITLES:            if (y > GUIGraphicsContext.Height)            {              y = GUIGraphicsContext.Height;            }            if (y < GUIGraphicsContext.Height - 128)            {              y = GUIGraphicsContext.Height - 128;            }            GUIGraphicsContext.Subtitles = y;            break;          case (int)Controls.CONTROL_OSD:            GUIGraphicsContext.OSDOffset = (y - GUIGraphicsContext.Height);            GUIWindow window = GUIWindowManager.GetWindow((int)Window.WINDOW_OSD);            window.ResetAllControls();            break;          case (int)Controls.CONTROL_PIXEL_RATIO:            GUIGraphicsContext.PixelRatio = fPixelRatio;            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,The following statement contains a magic number: switch (m_iControl)        {          case (int)Controls.CONTROL_TOP_LEFT:            if (x < 0)            {              x = 0;            }            if (y < 0)            {              y = 0;            }            if (x > 128)            {              x = 128;            }            if (y > 128)            {              y = 128;            }            GUIGraphicsContext.OverScanWidth += GUIGraphicsContext.OverScanLeft - x;            GUIGraphicsContext.OverScanHeight += GUIGraphicsContext.OverScanTop - y;            GUIGraphicsContext.OverScanLeft = x;            GUIGraphicsContext.OverScanTop = y;            break;          case (int)Controls.CONTROL_BOTTOM_RIGHT:            if (x > GUIGraphicsContext.Width)            {              x = GUIGraphicsContext.Width;            }            if (y > GUIGraphicsContext.Height)            {              y = GUIGraphicsContext.Height;            }            if (x < GUIGraphicsContext.Width - 128)            {              x = GUIGraphicsContext.Width - 128;            }            if (y < GUIGraphicsContext.Height - 128)            {              y = GUIGraphicsContext.Height - 128;            }            GUIGraphicsContext.OverScanWidth = x - GUIGraphicsContext.OverScanLeft;            GUIGraphicsContext.OverScanHeight = y - GUIGraphicsContext.OverScanTop;            break;          case (int)Controls.CONTROL_SUBTITLES:            if (y > GUIGraphicsContext.Height)            {              y = GUIGraphicsContext.Height;            }            if (y < GUIGraphicsContext.Height - 128)            {              y = GUIGraphicsContext.Height - 128;            }            GUIGraphicsContext.Subtitles = y;            break;          case (int)Controls.CONTROL_OSD:            GUIGraphicsContext.OSDOffset = (y - GUIGraphicsContext.Height);            GUIWindow window = GUIWindowManager.GetWindow((int)Window.WINDOW_OSD);            window.ResetAllControls();            break;          case (int)Controls.CONTROL_PIXEL_RATIO:            GUIGraphicsContext.PixelRatio = fPixelRatio;            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,The following statement contains a magic number: switch (m_iControl)        {          case (int)Controls.CONTROL_TOP_LEFT:            if (x < 0)            {              x = 0;            }            if (y < 0)            {              y = 0;            }            if (x > 128)            {              x = 128;            }            if (y > 128)            {              y = 128;            }            GUIGraphicsContext.OverScanWidth += GUIGraphicsContext.OverScanLeft - x;            GUIGraphicsContext.OverScanHeight += GUIGraphicsContext.OverScanTop - y;            GUIGraphicsContext.OverScanLeft = x;            GUIGraphicsContext.OverScanTop = y;            break;          case (int)Controls.CONTROL_BOTTOM_RIGHT:            if (x > GUIGraphicsContext.Width)            {              x = GUIGraphicsContext.Width;            }            if (y > GUIGraphicsContext.Height)            {              y = GUIGraphicsContext.Height;            }            if (x < GUIGraphicsContext.Width - 128)            {              x = GUIGraphicsContext.Width - 128;            }            if (y < GUIGraphicsContext.Height - 128)            {              y = GUIGraphicsContext.Height - 128;            }            GUIGraphicsContext.OverScanWidth = x - GUIGraphicsContext.OverScanLeft;            GUIGraphicsContext.OverScanHeight = y - GUIGraphicsContext.OverScanTop;            break;          case (int)Controls.CONTROL_SUBTITLES:            if (y > GUIGraphicsContext.Height)            {              y = GUIGraphicsContext.Height;            }            if (y < GUIGraphicsContext.Height - 128)            {              y = GUIGraphicsContext.Height - 128;            }            GUIGraphicsContext.Subtitles = y;            break;          case (int)Controls.CONTROL_OSD:            GUIGraphicsContext.OSDOffset = (y - GUIGraphicsContext.Height);            GUIWindow window = GUIWindowManager.GetWindow((int)Window.WINDOW_OSD);            window.ResetAllControls();            break;          case (int)Controls.CONTROL_PIXEL_RATIO:            GUIGraphicsContext.PixelRatio = fPixelRatio;            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,The following statement contains a magic number: switch (m_iControl)        {          case (int)Controls.CONTROL_TOP_LEFT:            if (x < 0)            {              x = 0;            }            if (y < 0)            {              y = 0;            }            if (x > 128)            {              x = 128;            }            if (y > 128)            {              y = 128;            }            GUIGraphicsContext.OverScanWidth += GUIGraphicsContext.OverScanLeft - x;            GUIGraphicsContext.OverScanHeight += GUIGraphicsContext.OverScanTop - y;            GUIGraphicsContext.OverScanLeft = x;            GUIGraphicsContext.OverScanTop = y;            break;          case (int)Controls.CONTROL_BOTTOM_RIGHT:            if (x > GUIGraphicsContext.Width)            {              x = GUIGraphicsContext.Width;            }            if (y > GUIGraphicsContext.Height)            {              y = GUIGraphicsContext.Height;            }            if (x < GUIGraphicsContext.Width - 128)            {              x = GUIGraphicsContext.Width - 128;            }            if (y < GUIGraphicsContext.Height - 128)            {              y = GUIGraphicsContext.Height - 128;            }            GUIGraphicsContext.OverScanWidth = x - GUIGraphicsContext.OverScanLeft;            GUIGraphicsContext.OverScanHeight = y - GUIGraphicsContext.OverScanTop;            break;          case (int)Controls.CONTROL_SUBTITLES:            if (y > GUIGraphicsContext.Height)            {              y = GUIGraphicsContext.Height;            }            if (y < GUIGraphicsContext.Height - 128)            {              y = GUIGraphicsContext.Height - 128;            }            GUIGraphicsContext.Subtitles = y;            break;          case (int)Controls.CONTROL_OSD:            GUIGraphicsContext.OSDOffset = (y - GUIGraphicsContext.Height);            GUIWindow window = GUIWindowManager.GetWindow((int)Window.WINDOW_OSD);            window.ResetAllControls();            break;          case (int)Controls.CONTROL_PIXEL_RATIO:            GUIGraphicsContext.PixelRatio = fPixelRatio;            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,The following statement contains a magic number: switch (m_iControl)        {          case (int)Controls.CONTROL_TOP_LEFT:            if (x < 0)            {              x = 0;            }            if (y < 0)            {              y = 0;            }            if (x > 128)            {              x = 128;            }            if (y > 128)            {              y = 128;            }            GUIGraphicsContext.OverScanWidth += GUIGraphicsContext.OverScanLeft - x;            GUIGraphicsContext.OverScanHeight += GUIGraphicsContext.OverScanTop - y;            GUIGraphicsContext.OverScanLeft = x;            GUIGraphicsContext.OverScanTop = y;            break;          case (int)Controls.CONTROL_BOTTOM_RIGHT:            if (x > GUIGraphicsContext.Width)            {              x = GUIGraphicsContext.Width;            }            if (y > GUIGraphicsContext.Height)            {              y = GUIGraphicsContext.Height;            }            if (x < GUIGraphicsContext.Width - 128)            {              x = GUIGraphicsContext.Width - 128;            }            if (y < GUIGraphicsContext.Height - 128)            {              y = GUIGraphicsContext.Height - 128;            }            GUIGraphicsContext.OverScanWidth = x - GUIGraphicsContext.OverScanLeft;            GUIGraphicsContext.OverScanHeight = y - GUIGraphicsContext.OverScanTop;            break;          case (int)Controls.CONTROL_SUBTITLES:            if (y > GUIGraphicsContext.Height)            {              y = GUIGraphicsContext.Height;            }            if (y < GUIGraphicsContext.Height - 128)            {              y = GUIGraphicsContext.Height - 128;            }            GUIGraphicsContext.Subtitles = y;            break;          case (int)Controls.CONTROL_OSD:            GUIGraphicsContext.OSDOffset = (y - GUIGraphicsContext.Height);            GUIWindow window = GUIWindowManager.GetWindow((int)Window.WINDOW_OSD);            window.ResetAllControls();            break;          case (int)Controls.CONTROL_PIXEL_RATIO:            GUIGraphicsContext.PixelRatio = fPixelRatio;            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,The following statement contains a magic number: switch (m_iControl)        {          case (int)Controls.CONTROL_TOP_LEFT:            if (x < 0)            {              x = 0;            }            if (y < 0)            {              y = 0;            }            if (x > 128)            {              x = 128;            }            if (y > 128)            {              y = 128;            }            GUIGraphicsContext.OverScanWidth += GUIGraphicsContext.OverScanLeft - x;            GUIGraphicsContext.OverScanHeight += GUIGraphicsContext.OverScanTop - y;            GUIGraphicsContext.OverScanLeft = x;            GUIGraphicsContext.OverScanTop = y;            break;          case (int)Controls.CONTROL_BOTTOM_RIGHT:            if (x > GUIGraphicsContext.Width)            {              x = GUIGraphicsContext.Width;            }            if (y > GUIGraphicsContext.Height)            {              y = GUIGraphicsContext.Height;            }            if (x < GUIGraphicsContext.Width - 128)            {              x = GUIGraphicsContext.Width - 128;            }            if (y < GUIGraphicsContext.Height - 128)            {              y = GUIGraphicsContext.Height - 128;            }            GUIGraphicsContext.OverScanWidth = x - GUIGraphicsContext.OverScanLeft;            GUIGraphicsContext.OverScanHeight = y - GUIGraphicsContext.OverScanTop;            break;          case (int)Controls.CONTROL_SUBTITLES:            if (y > GUIGraphicsContext.Height)            {              y = GUIGraphicsContext.Height;            }            if (y < GUIGraphicsContext.Height - 128)            {              y = GUIGraphicsContext.Height - 128;            }            GUIGraphicsContext.Subtitles = y;            break;          case (int)Controls.CONTROL_OSD:            GUIGraphicsContext.OSDOffset = (y - GUIGraphicsContext.Height);            GUIWindow window = GUIWindowManager.GetWindow((int)Window.WINDOW_OSD);            window.ResetAllControls();            break;          case (int)Controls.CONTROL_PIXEL_RATIO:            GUIGraphicsContext.PixelRatio = fPixelRatio;            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,The following statement contains a magic number: switch (m_iControl)        {          case (int)Controls.CONTROL_TOP_LEFT:            if (x < 0)            {              x = 0;            }            if (y < 0)            {              y = 0;            }            if (x > 128)            {              x = 128;            }            if (y > 128)            {              y = 128;            }            GUIGraphicsContext.OverScanWidth += GUIGraphicsContext.OverScanLeft - x;            GUIGraphicsContext.OverScanHeight += GUIGraphicsContext.OverScanTop - y;            GUIGraphicsContext.OverScanLeft = x;            GUIGraphicsContext.OverScanTop = y;            break;          case (int)Controls.CONTROL_BOTTOM_RIGHT:            if (x > GUIGraphicsContext.Width)            {              x = GUIGraphicsContext.Width;            }            if (y > GUIGraphicsContext.Height)            {              y = GUIGraphicsContext.Height;            }            if (x < GUIGraphicsContext.Width - 128)            {              x = GUIGraphicsContext.Width - 128;            }            if (y < GUIGraphicsContext.Height - 128)            {              y = GUIGraphicsContext.Height - 128;            }            GUIGraphicsContext.OverScanWidth = x - GUIGraphicsContext.OverScanLeft;            GUIGraphicsContext.OverScanHeight = y - GUIGraphicsContext.OverScanTop;            break;          case (int)Controls.CONTROL_SUBTITLES:            if (y > GUIGraphicsContext.Height)            {              y = GUIGraphicsContext.Height;            }            if (y < GUIGraphicsContext.Height - 128)            {              y = GUIGraphicsContext.Height - 128;            }            GUIGraphicsContext.Subtitles = y;            break;          case (int)Controls.CONTROL_OSD:            GUIGraphicsContext.OSDOffset = (y - GUIGraphicsContext.Height);            GUIWindow window = GUIWindowManager.GetWindow((int)Window.WINDOW_OSD);            window.ResetAllControls();            break;          case (int)Controls.CONTROL_PIXEL_RATIO:            GUIGraphicsContext.PixelRatio = fPixelRatio;            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,The following statement contains a magic number: switch (m_iControl)        {          case (int)Controls.CONTROL_TOP_LEFT:            if (x < 0)            {              x = 0;            }            if (y < 0)            {              y = 0;            }            if (x > 128)            {              x = 128;            }            if (y > 128)            {              y = 128;            }            GUIGraphicsContext.OverScanWidth += GUIGraphicsContext.OverScanLeft - x;            GUIGraphicsContext.OverScanHeight += GUIGraphicsContext.OverScanTop - y;            GUIGraphicsContext.OverScanLeft = x;            GUIGraphicsContext.OverScanTop = y;            break;          case (int)Controls.CONTROL_BOTTOM_RIGHT:            if (x > GUIGraphicsContext.Width)            {              x = GUIGraphicsContext.Width;            }            if (y > GUIGraphicsContext.Height)            {              y = GUIGraphicsContext.Height;            }            if (x < GUIGraphicsContext.Width - 128)            {              x = GUIGraphicsContext.Width - 128;            }            if (y < GUIGraphicsContext.Height - 128)            {              y = GUIGraphicsContext.Height - 128;            }            GUIGraphicsContext.OverScanWidth = x - GUIGraphicsContext.OverScanLeft;            GUIGraphicsContext.OverScanHeight = y - GUIGraphicsContext.OverScanTop;            break;          case (int)Controls.CONTROL_SUBTITLES:            if (y > GUIGraphicsContext.Height)            {              y = GUIGraphicsContext.Height;            }            if (y < GUIGraphicsContext.Height - 128)            {              y = GUIGraphicsContext.Height - 128;            }            GUIGraphicsContext.Subtitles = y;            break;          case (int)Controls.CONTROL_OSD:            GUIGraphicsContext.OSDOffset = (y - GUIGraphicsContext.Height);            GUIWindow window = GUIWindowManager.GetWindow((int)Window.WINDOW_OSD);            window.ResetAllControls();            break;          case (int)Controls.CONTROL_PIXEL_RATIO:            GUIGraphicsContext.PixelRatio = fPixelRatio;            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,The following statement contains a magic number: switch (m_iControl)        {          case (int)Controls.CONTROL_TOP_LEFT:            if (x < 0)            {              x = 0;            }            if (y < 0)            {              y = 0;            }            if (x > 128)            {              x = 128;            }            if (y > 128)            {              y = 128;            }            GUIGraphicsContext.OverScanWidth += GUIGraphicsContext.OverScanLeft - x;            GUIGraphicsContext.OverScanHeight += GUIGraphicsContext.OverScanTop - y;            GUIGraphicsContext.OverScanLeft = x;            GUIGraphicsContext.OverScanTop = y;            break;          case (int)Controls.CONTROL_BOTTOM_RIGHT:            if (x > GUIGraphicsContext.Width)            {              x = GUIGraphicsContext.Width;            }            if (y > GUIGraphicsContext.Height)            {              y = GUIGraphicsContext.Height;            }            if (x < GUIGraphicsContext.Width - 128)            {              x = GUIGraphicsContext.Width - 128;            }            if (y < GUIGraphicsContext.Height - 128)            {              y = GUIGraphicsContext.Height - 128;            }            GUIGraphicsContext.OverScanWidth = x - GUIGraphicsContext.OverScanLeft;            GUIGraphicsContext.OverScanHeight = y - GUIGraphicsContext.OverScanTop;            break;          case (int)Controls.CONTROL_SUBTITLES:            if (y > GUIGraphicsContext.Height)            {              y = GUIGraphicsContext.Height;            }            if (y < GUIGraphicsContext.Height - 128)            {              y = GUIGraphicsContext.Height - 128;            }            GUIGraphicsContext.Subtitles = y;            break;          case (int)Controls.CONTROL_OSD:            GUIGraphicsContext.OSDOffset = (y - GUIGraphicsContext.Height);            GUIWindow window = GUIWindowManager.GetWindow((int)Window.WINDOW_OSD);            window.ResetAllControls();            break;          case (int)Controls.CONTROL_PIXEL_RATIO:            GUIGraphicsContext.PixelRatio = fPixelRatio;            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,The following statement contains a magic number: switch (m_iControl)        {          case (int)Controls.CONTROL_TOP_LEFT:            if (x < 0)            {              x = 0;            }            if (y < 0)            {              y = 0;            }            if (x > 128)            {              x = 128;            }            if (y > 128)            {              y = 128;            }            GUIGraphicsContext.OverScanWidth += GUIGraphicsContext.OverScanLeft - x;            GUIGraphicsContext.OverScanHeight += GUIGraphicsContext.OverScanTop - y;            GUIGraphicsContext.OverScanLeft = x;            GUIGraphicsContext.OverScanTop = y;            break;          case (int)Controls.CONTROL_BOTTOM_RIGHT:            if (x > GUIGraphicsContext.Width)            {              x = GUIGraphicsContext.Width;            }            if (y > GUIGraphicsContext.Height)            {              y = GUIGraphicsContext.Height;            }            if (x < GUIGraphicsContext.Width - 128)            {              x = GUIGraphicsContext.Width - 128;            }            if (y < GUIGraphicsContext.Height - 128)            {              y = GUIGraphicsContext.Height - 128;            }            GUIGraphicsContext.OverScanWidth = x - GUIGraphicsContext.OverScanLeft;            GUIGraphicsContext.OverScanHeight = y - GUIGraphicsContext.OverScanTop;            break;          case (int)Controls.CONTROL_SUBTITLES:            if (y > GUIGraphicsContext.Height)            {              y = GUIGraphicsContext.Height;            }            if (y < GUIGraphicsContext.Height - 128)            {              y = GUIGraphicsContext.Height - 128;            }            GUIGraphicsContext.Subtitles = y;            break;          case (int)Controls.CONTROL_OSD:            GUIGraphicsContext.OSDOffset = (y - GUIGraphicsContext.Height);            GUIWindow window = GUIWindowManager.GetWindow((int)Window.WINDOW_OSD);            window.ResetAllControls();            break;          case (int)Controls.CONTROL_PIXEL_RATIO:            GUIGraphicsContext.PixelRatio = fPixelRatio;            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,Render,The following statement contains a magic number: switch (m_iControl)        {          case (int)Controls.CONTROL_TOP_LEFT:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.OverScanTop;              pControl = (GUIImage)GetControl((int)Controls.CONTROL_TOP_LEFT);              if (null != pControl)              {                pControl.IsVisible = true;                pControl.Height = pControl.TextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff' iYOff);              }              string strMode = GUILocalizeStrings.Get(272);              strStatus = String.Format("{0} ({1}'{2})"' strMode' iXOff' iYOff);              GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(276));            }            break;          case (int)Controls.CONTROL_BOTTOM_RIGHT:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.OverScanTop;              iXOff += GUIGraphicsContext.OverScanWidth;              iYOff += GUIGraphicsContext.OverScanHeight;              pControl = (GUIImage)GetControl((int)Controls.CONTROL_BOTTOM_RIGHT);              if (null != pControl)              {                pControl.IsVisible = true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                pControl.Height = iTextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff - iTextureWidth' iYOff - iTextureHeight);                int iXOff1 = GUIGraphicsContext.Width - iXOff;                int iYOff1 = GUIGraphicsContext.Height - iYOff;                string strMode = GUILocalizeStrings.Get(273);                strStatus = String.Format("{0} ({1}'{2})"' strMode' iXOff1' iYOff1);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(276));              }            }            break;          case (int)Controls.CONTROL_SUBTITLES:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.Subtitles;                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_SUBTITLES);              if (null != pControl)              {                pControl.IsVisible = true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                  pControl.Height = pControl.TextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff + (iScreenWidth - iTextureWidth) / 2' iYOff - iTextureHeight);                string strMode = GUILocalizeStrings.Get(274);                strStatus = String.Format("{0} ({1})"' strMode' iYOff);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(277));              }            }            break;          case (int)Controls.CONTROL_PIXEL_RATIO:            {              float fSqrtRatio = (float)Math.Sqrt(GUIGraphicsContext.PixelRatio);              pControl = (GUIImage)GetControl((int)Controls.CONTROL_PIXEL_RATIO);              if (null != pControl)              {                pControl.IsVisible = true;                int iControlHeight = (int)(m_fPixelRatioBoxHeight * fSqrtRatio);                int iControlWidth = (int)(m_fPixelRatioBoxHeight / fSqrtRatio);                pControl.Width = iControlWidth;                pControl.Height = iControlHeight;                iXOff = GUIGraphicsContext.OverScanLeft;                iYOff = GUIGraphicsContext.OverScanTop;                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                int iScreenHeight = GUIGraphicsContext.OverScanHeight;                pControl.SetPosition(iXOff + (iScreenWidth - iControlWidth) / 2'                                     iYOff + (iScreenHeight - iControlHeight) / 2);                string strMode = GUILocalizeStrings.Get(275);                strStatus = String.Format("{0} ({1:#.##})"' strMode' GUIGraphicsContext.PixelRatio);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(278));              }            }            break;            case (int)Controls.CONTROL_OSD:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.Subtitles;              iYOff = (GUIGraphicsContext.Height + GUIGraphicsContext.OSDOffset);                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_OSD);              if (null != pControl)              {                //pControl.IsVisible=true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                  pControl.SetPosition(iXOff + (iScreenWidth - iTextureWidth) / 2' iYOff - iTextureHeight);                string strMode = GUILocalizeStrings.Get(469);                strStatus = String.Format("{0} ({1}' Offset={2})"' strMode' iYOff' GUIGraphicsContext.OSDOffset);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(468));              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,Render,The following statement contains a magic number: switch (m_iControl)        {          case (int)Controls.CONTROL_TOP_LEFT:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.OverScanTop;              pControl = (GUIImage)GetControl((int)Controls.CONTROL_TOP_LEFT);              if (null != pControl)              {                pControl.IsVisible = true;                pControl.Height = pControl.TextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff' iYOff);              }              string strMode = GUILocalizeStrings.Get(272);              strStatus = String.Format("{0} ({1}'{2})"' strMode' iXOff' iYOff);              GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(276));            }            break;          case (int)Controls.CONTROL_BOTTOM_RIGHT:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.OverScanTop;              iXOff += GUIGraphicsContext.OverScanWidth;              iYOff += GUIGraphicsContext.OverScanHeight;              pControl = (GUIImage)GetControl((int)Controls.CONTROL_BOTTOM_RIGHT);              if (null != pControl)              {                pControl.IsVisible = true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                pControl.Height = iTextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff - iTextureWidth' iYOff - iTextureHeight);                int iXOff1 = GUIGraphicsContext.Width - iXOff;                int iYOff1 = GUIGraphicsContext.Height - iYOff;                string strMode = GUILocalizeStrings.Get(273);                strStatus = String.Format("{0} ({1}'{2})"' strMode' iXOff1' iYOff1);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(276));              }            }            break;          case (int)Controls.CONTROL_SUBTITLES:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.Subtitles;                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_SUBTITLES);              if (null != pControl)              {                pControl.IsVisible = true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                  pControl.Height = pControl.TextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff + (iScreenWidth - iTextureWidth) / 2' iYOff - iTextureHeight);                string strMode = GUILocalizeStrings.Get(274);                strStatus = String.Format("{0} ({1})"' strMode' iYOff);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(277));              }            }            break;          case (int)Controls.CONTROL_PIXEL_RATIO:            {              float fSqrtRatio = (float)Math.Sqrt(GUIGraphicsContext.PixelRatio);              pControl = (GUIImage)GetControl((int)Controls.CONTROL_PIXEL_RATIO);              if (null != pControl)              {                pControl.IsVisible = true;                int iControlHeight = (int)(m_fPixelRatioBoxHeight * fSqrtRatio);                int iControlWidth = (int)(m_fPixelRatioBoxHeight / fSqrtRatio);                pControl.Width = iControlWidth;                pControl.Height = iControlHeight;                iXOff = GUIGraphicsContext.OverScanLeft;                iYOff = GUIGraphicsContext.OverScanTop;                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                int iScreenHeight = GUIGraphicsContext.OverScanHeight;                pControl.SetPosition(iXOff + (iScreenWidth - iControlWidth) / 2'                                     iYOff + (iScreenHeight - iControlHeight) / 2);                string strMode = GUILocalizeStrings.Get(275);                strStatus = String.Format("{0} ({1:#.##})"' strMode' GUIGraphicsContext.PixelRatio);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(278));              }            }            break;            case (int)Controls.CONTROL_OSD:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.Subtitles;              iYOff = (GUIGraphicsContext.Height + GUIGraphicsContext.OSDOffset);                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_OSD);              if (null != pControl)              {                //pControl.IsVisible=true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                  pControl.SetPosition(iXOff + (iScreenWidth - iTextureWidth) / 2' iYOff - iTextureHeight);                string strMode = GUILocalizeStrings.Get(469);                strStatus = String.Format("{0} ({1}' Offset={2})"' strMode' iYOff' GUIGraphicsContext.OSDOffset);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(468));              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,Render,The following statement contains a magic number: switch (m_iControl)        {          case (int)Controls.CONTROL_TOP_LEFT:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.OverScanTop;              pControl = (GUIImage)GetControl((int)Controls.CONTROL_TOP_LEFT);              if (null != pControl)              {                pControl.IsVisible = true;                pControl.Height = pControl.TextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff' iYOff);              }              string strMode = GUILocalizeStrings.Get(272);              strStatus = String.Format("{0} ({1}'{2})"' strMode' iXOff' iYOff);              GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(276));            }            break;          case (int)Controls.CONTROL_BOTTOM_RIGHT:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.OverScanTop;              iXOff += GUIGraphicsContext.OverScanWidth;              iYOff += GUIGraphicsContext.OverScanHeight;              pControl = (GUIImage)GetControl((int)Controls.CONTROL_BOTTOM_RIGHT);              if (null != pControl)              {                pControl.IsVisible = true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                pControl.Height = iTextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff - iTextureWidth' iYOff - iTextureHeight);                int iXOff1 = GUIGraphicsContext.Width - iXOff;                int iYOff1 = GUIGraphicsContext.Height - iYOff;                string strMode = GUILocalizeStrings.Get(273);                strStatus = String.Format("{0} ({1}'{2})"' strMode' iXOff1' iYOff1);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(276));              }            }            break;          case (int)Controls.CONTROL_SUBTITLES:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.Subtitles;                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_SUBTITLES);              if (null != pControl)              {                pControl.IsVisible = true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                  pControl.Height = pControl.TextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff + (iScreenWidth - iTextureWidth) / 2' iYOff - iTextureHeight);                string strMode = GUILocalizeStrings.Get(274);                strStatus = String.Format("{0} ({1})"' strMode' iYOff);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(277));              }            }            break;          case (int)Controls.CONTROL_PIXEL_RATIO:            {              float fSqrtRatio = (float)Math.Sqrt(GUIGraphicsContext.PixelRatio);              pControl = (GUIImage)GetControl((int)Controls.CONTROL_PIXEL_RATIO);              if (null != pControl)              {                pControl.IsVisible = true;                int iControlHeight = (int)(m_fPixelRatioBoxHeight * fSqrtRatio);                int iControlWidth = (int)(m_fPixelRatioBoxHeight / fSqrtRatio);                pControl.Width = iControlWidth;                pControl.Height = iControlHeight;                iXOff = GUIGraphicsContext.OverScanLeft;                iYOff = GUIGraphicsContext.OverScanTop;                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                int iScreenHeight = GUIGraphicsContext.OverScanHeight;                pControl.SetPosition(iXOff + (iScreenWidth - iControlWidth) / 2'                                     iYOff + (iScreenHeight - iControlHeight) / 2);                string strMode = GUILocalizeStrings.Get(275);                strStatus = String.Format("{0} ({1:#.##})"' strMode' GUIGraphicsContext.PixelRatio);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(278));              }            }            break;            case (int)Controls.CONTROL_OSD:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.Subtitles;              iYOff = (GUIGraphicsContext.Height + GUIGraphicsContext.OSDOffset);                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_OSD);              if (null != pControl)              {                //pControl.IsVisible=true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                  pControl.SetPosition(iXOff + (iScreenWidth - iTextureWidth) / 2' iYOff - iTextureHeight);                string strMode = GUILocalizeStrings.Get(469);                strStatus = String.Format("{0} ({1}' Offset={2})"' strMode' iYOff' GUIGraphicsContext.OSDOffset);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(468));              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,Render,The following statement contains a magic number: switch (m_iControl)        {          case (int)Controls.CONTROL_TOP_LEFT:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.OverScanTop;              pControl = (GUIImage)GetControl((int)Controls.CONTROL_TOP_LEFT);              if (null != pControl)              {                pControl.IsVisible = true;                pControl.Height = pControl.TextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff' iYOff);              }              string strMode = GUILocalizeStrings.Get(272);              strStatus = String.Format("{0} ({1}'{2})"' strMode' iXOff' iYOff);              GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(276));            }            break;          case (int)Controls.CONTROL_BOTTOM_RIGHT:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.OverScanTop;              iXOff += GUIGraphicsContext.OverScanWidth;              iYOff += GUIGraphicsContext.OverScanHeight;              pControl = (GUIImage)GetControl((int)Controls.CONTROL_BOTTOM_RIGHT);              if (null != pControl)              {                pControl.IsVisible = true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                pControl.Height = iTextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff - iTextureWidth' iYOff - iTextureHeight);                int iXOff1 = GUIGraphicsContext.Width - iXOff;                int iYOff1 = GUIGraphicsContext.Height - iYOff;                string strMode = GUILocalizeStrings.Get(273);                strStatus = String.Format("{0} ({1}'{2})"' strMode' iXOff1' iYOff1);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(276));              }            }            break;          case (int)Controls.CONTROL_SUBTITLES:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.Subtitles;                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_SUBTITLES);              if (null != pControl)              {                pControl.IsVisible = true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                  pControl.Height = pControl.TextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff + (iScreenWidth - iTextureWidth) / 2' iYOff - iTextureHeight);                string strMode = GUILocalizeStrings.Get(274);                strStatus = String.Format("{0} ({1})"' strMode' iYOff);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(277));              }            }            break;          case (int)Controls.CONTROL_PIXEL_RATIO:            {              float fSqrtRatio = (float)Math.Sqrt(GUIGraphicsContext.PixelRatio);              pControl = (GUIImage)GetControl((int)Controls.CONTROL_PIXEL_RATIO);              if (null != pControl)              {                pControl.IsVisible = true;                int iControlHeight = (int)(m_fPixelRatioBoxHeight * fSqrtRatio);                int iControlWidth = (int)(m_fPixelRatioBoxHeight / fSqrtRatio);                pControl.Width = iControlWidth;                pControl.Height = iControlHeight;                iXOff = GUIGraphicsContext.OverScanLeft;                iYOff = GUIGraphicsContext.OverScanTop;                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                int iScreenHeight = GUIGraphicsContext.OverScanHeight;                pControl.SetPosition(iXOff + (iScreenWidth - iControlWidth) / 2'                                     iYOff + (iScreenHeight - iControlHeight) / 2);                string strMode = GUILocalizeStrings.Get(275);                strStatus = String.Format("{0} ({1:#.##})"' strMode' GUIGraphicsContext.PixelRatio);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(278));              }            }            break;            case (int)Controls.CONTROL_OSD:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.Subtitles;              iYOff = (GUIGraphicsContext.Height + GUIGraphicsContext.OSDOffset);                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_OSD);              if (null != pControl)              {                //pControl.IsVisible=true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                  pControl.SetPosition(iXOff + (iScreenWidth - iTextureWidth) / 2' iYOff - iTextureHeight);                string strMode = GUILocalizeStrings.Get(469);                strStatus = String.Format("{0} ({1}' Offset={2})"' strMode' iYOff' GUIGraphicsContext.OSDOffset);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(468));              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,Render,The following statement contains a magic number: switch (m_iControl)        {          case (int)Controls.CONTROL_TOP_LEFT:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.OverScanTop;              pControl = (GUIImage)GetControl((int)Controls.CONTROL_TOP_LEFT);              if (null != pControl)              {                pControl.IsVisible = true;                pControl.Height = pControl.TextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff' iYOff);              }              string strMode = GUILocalizeStrings.Get(272);              strStatus = String.Format("{0} ({1}'{2})"' strMode' iXOff' iYOff);              GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(276));            }            break;          case (int)Controls.CONTROL_BOTTOM_RIGHT:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.OverScanTop;              iXOff += GUIGraphicsContext.OverScanWidth;              iYOff += GUIGraphicsContext.OverScanHeight;              pControl = (GUIImage)GetControl((int)Controls.CONTROL_BOTTOM_RIGHT);              if (null != pControl)              {                pControl.IsVisible = true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                pControl.Height = iTextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff - iTextureWidth' iYOff - iTextureHeight);                int iXOff1 = GUIGraphicsContext.Width - iXOff;                int iYOff1 = GUIGraphicsContext.Height - iYOff;                string strMode = GUILocalizeStrings.Get(273);                strStatus = String.Format("{0} ({1}'{2})"' strMode' iXOff1' iYOff1);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(276));              }            }            break;          case (int)Controls.CONTROL_SUBTITLES:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.Subtitles;                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_SUBTITLES);              if (null != pControl)              {                pControl.IsVisible = true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                  pControl.Height = pControl.TextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff + (iScreenWidth - iTextureWidth) / 2' iYOff - iTextureHeight);                string strMode = GUILocalizeStrings.Get(274);                strStatus = String.Format("{0} ({1})"' strMode' iYOff);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(277));              }            }            break;          case (int)Controls.CONTROL_PIXEL_RATIO:            {              float fSqrtRatio = (float)Math.Sqrt(GUIGraphicsContext.PixelRatio);              pControl = (GUIImage)GetControl((int)Controls.CONTROL_PIXEL_RATIO);              if (null != pControl)              {                pControl.IsVisible = true;                int iControlHeight = (int)(m_fPixelRatioBoxHeight * fSqrtRatio);                int iControlWidth = (int)(m_fPixelRatioBoxHeight / fSqrtRatio);                pControl.Width = iControlWidth;                pControl.Height = iControlHeight;                iXOff = GUIGraphicsContext.OverScanLeft;                iYOff = GUIGraphicsContext.OverScanTop;                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                int iScreenHeight = GUIGraphicsContext.OverScanHeight;                pControl.SetPosition(iXOff + (iScreenWidth - iControlWidth) / 2'                                     iYOff + (iScreenHeight - iControlHeight) / 2);                string strMode = GUILocalizeStrings.Get(275);                strStatus = String.Format("{0} ({1:#.##})"' strMode' GUIGraphicsContext.PixelRatio);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(278));              }            }            break;            case (int)Controls.CONTROL_OSD:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.Subtitles;              iYOff = (GUIGraphicsContext.Height + GUIGraphicsContext.OSDOffset);                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_OSD);              if (null != pControl)              {                //pControl.IsVisible=true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                  pControl.SetPosition(iXOff + (iScreenWidth - iTextureWidth) / 2' iYOff - iTextureHeight);                string strMode = GUILocalizeStrings.Get(469);                strStatus = String.Format("{0} ({1}' Offset={2})"' strMode' iYOff' GUIGraphicsContext.OSDOffset);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(468));              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,Render,The following statement contains a magic number: switch (m_iControl)        {          case (int)Controls.CONTROL_TOP_LEFT:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.OverScanTop;              pControl = (GUIImage)GetControl((int)Controls.CONTROL_TOP_LEFT);              if (null != pControl)              {                pControl.IsVisible = true;                pControl.Height = pControl.TextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff' iYOff);              }              string strMode = GUILocalizeStrings.Get(272);              strStatus = String.Format("{0} ({1}'{2})"' strMode' iXOff' iYOff);              GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(276));            }            break;          case (int)Controls.CONTROL_BOTTOM_RIGHT:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.OverScanTop;              iXOff += GUIGraphicsContext.OverScanWidth;              iYOff += GUIGraphicsContext.OverScanHeight;              pControl = (GUIImage)GetControl((int)Controls.CONTROL_BOTTOM_RIGHT);              if (null != pControl)              {                pControl.IsVisible = true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                pControl.Height = iTextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff - iTextureWidth' iYOff - iTextureHeight);                int iXOff1 = GUIGraphicsContext.Width - iXOff;                int iYOff1 = GUIGraphicsContext.Height - iYOff;                string strMode = GUILocalizeStrings.Get(273);                strStatus = String.Format("{0} ({1}'{2})"' strMode' iXOff1' iYOff1);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(276));              }            }            break;          case (int)Controls.CONTROL_SUBTITLES:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.Subtitles;                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_SUBTITLES);              if (null != pControl)              {                pControl.IsVisible = true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                  pControl.Height = pControl.TextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff + (iScreenWidth - iTextureWidth) / 2' iYOff - iTextureHeight);                string strMode = GUILocalizeStrings.Get(274);                strStatus = String.Format("{0} ({1})"' strMode' iYOff);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(277));              }            }            break;          case (int)Controls.CONTROL_PIXEL_RATIO:            {              float fSqrtRatio = (float)Math.Sqrt(GUIGraphicsContext.PixelRatio);              pControl = (GUIImage)GetControl((int)Controls.CONTROL_PIXEL_RATIO);              if (null != pControl)              {                pControl.IsVisible = true;                int iControlHeight = (int)(m_fPixelRatioBoxHeight * fSqrtRatio);                int iControlWidth = (int)(m_fPixelRatioBoxHeight / fSqrtRatio);                pControl.Width = iControlWidth;                pControl.Height = iControlHeight;                iXOff = GUIGraphicsContext.OverScanLeft;                iYOff = GUIGraphicsContext.OverScanTop;                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                int iScreenHeight = GUIGraphicsContext.OverScanHeight;                pControl.SetPosition(iXOff + (iScreenWidth - iControlWidth) / 2'                                     iYOff + (iScreenHeight - iControlHeight) / 2);                string strMode = GUILocalizeStrings.Get(275);                strStatus = String.Format("{0} ({1:#.##})"' strMode' GUIGraphicsContext.PixelRatio);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(278));              }            }            break;            case (int)Controls.CONTROL_OSD:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.Subtitles;              iYOff = (GUIGraphicsContext.Height + GUIGraphicsContext.OSDOffset);                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_OSD);              if (null != pControl)              {                //pControl.IsVisible=true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                  pControl.SetPosition(iXOff + (iScreenWidth - iTextureWidth) / 2' iYOff - iTextureHeight);                string strMode = GUILocalizeStrings.Get(469);                strStatus = String.Format("{0} ({1}' Offset={2})"' strMode' iYOff' GUIGraphicsContext.OSDOffset);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(468));              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,Render,The following statement contains a magic number: switch (m_iControl)        {          case (int)Controls.CONTROL_TOP_LEFT:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.OverScanTop;              pControl = (GUIImage)GetControl((int)Controls.CONTROL_TOP_LEFT);              if (null != pControl)              {                pControl.IsVisible = true;                pControl.Height = pControl.TextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff' iYOff);              }              string strMode = GUILocalizeStrings.Get(272);              strStatus = String.Format("{0} ({1}'{2})"' strMode' iXOff' iYOff);              GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(276));            }            break;          case (int)Controls.CONTROL_BOTTOM_RIGHT:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.OverScanTop;              iXOff += GUIGraphicsContext.OverScanWidth;              iYOff += GUIGraphicsContext.OverScanHeight;              pControl = (GUIImage)GetControl((int)Controls.CONTROL_BOTTOM_RIGHT);              if (null != pControl)              {                pControl.IsVisible = true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                pControl.Height = iTextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff - iTextureWidth' iYOff - iTextureHeight);                int iXOff1 = GUIGraphicsContext.Width - iXOff;                int iYOff1 = GUIGraphicsContext.Height - iYOff;                string strMode = GUILocalizeStrings.Get(273);                strStatus = String.Format("{0} ({1}'{2})"' strMode' iXOff1' iYOff1);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(276));              }            }            break;          case (int)Controls.CONTROL_SUBTITLES:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.Subtitles;                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_SUBTITLES);              if (null != pControl)              {                pControl.IsVisible = true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                  pControl.Height = pControl.TextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff + (iScreenWidth - iTextureWidth) / 2' iYOff - iTextureHeight);                string strMode = GUILocalizeStrings.Get(274);                strStatus = String.Format("{0} ({1})"' strMode' iYOff);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(277));              }            }            break;          case (int)Controls.CONTROL_PIXEL_RATIO:            {              float fSqrtRatio = (float)Math.Sqrt(GUIGraphicsContext.PixelRatio);              pControl = (GUIImage)GetControl((int)Controls.CONTROL_PIXEL_RATIO);              if (null != pControl)              {                pControl.IsVisible = true;                int iControlHeight = (int)(m_fPixelRatioBoxHeight * fSqrtRatio);                int iControlWidth = (int)(m_fPixelRatioBoxHeight / fSqrtRatio);                pControl.Width = iControlWidth;                pControl.Height = iControlHeight;                iXOff = GUIGraphicsContext.OverScanLeft;                iYOff = GUIGraphicsContext.OverScanTop;                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                int iScreenHeight = GUIGraphicsContext.OverScanHeight;                pControl.SetPosition(iXOff + (iScreenWidth - iControlWidth) / 2'                                     iYOff + (iScreenHeight - iControlHeight) / 2);                string strMode = GUILocalizeStrings.Get(275);                strStatus = String.Format("{0} ({1:#.##})"' strMode' GUIGraphicsContext.PixelRatio);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(278));              }            }            break;            case (int)Controls.CONTROL_OSD:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.Subtitles;              iYOff = (GUIGraphicsContext.Height + GUIGraphicsContext.OSDOffset);                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_OSD);              if (null != pControl)              {                //pControl.IsVisible=true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                  pControl.SetPosition(iXOff + (iScreenWidth - iTextureWidth) / 2' iYOff - iTextureHeight);                string strMode = GUILocalizeStrings.Get(469);                strStatus = String.Format("{0} ({1}' Offset={2})"' strMode' iYOff' GUIGraphicsContext.OSDOffset);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(468));              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,Render,The following statement contains a magic number: switch (m_iControl)        {          case (int)Controls.CONTROL_TOP_LEFT:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.OverScanTop;              pControl = (GUIImage)GetControl((int)Controls.CONTROL_TOP_LEFT);              if (null != pControl)              {                pControl.IsVisible = true;                pControl.Height = pControl.TextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff' iYOff);              }              string strMode = GUILocalizeStrings.Get(272);              strStatus = String.Format("{0} ({1}'{2})"' strMode' iXOff' iYOff);              GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(276));            }            break;          case (int)Controls.CONTROL_BOTTOM_RIGHT:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.OverScanTop;              iXOff += GUIGraphicsContext.OverScanWidth;              iYOff += GUIGraphicsContext.OverScanHeight;              pControl = (GUIImage)GetControl((int)Controls.CONTROL_BOTTOM_RIGHT);              if (null != pControl)              {                pControl.IsVisible = true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                pControl.Height = iTextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff - iTextureWidth' iYOff - iTextureHeight);                int iXOff1 = GUIGraphicsContext.Width - iXOff;                int iYOff1 = GUIGraphicsContext.Height - iYOff;                string strMode = GUILocalizeStrings.Get(273);                strStatus = String.Format("{0} ({1}'{2})"' strMode' iXOff1' iYOff1);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(276));              }            }            break;          case (int)Controls.CONTROL_SUBTITLES:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.Subtitles;                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_SUBTITLES);              if (null != pControl)              {                pControl.IsVisible = true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                  pControl.Height = pControl.TextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff + (iScreenWidth - iTextureWidth) / 2' iYOff - iTextureHeight);                string strMode = GUILocalizeStrings.Get(274);                strStatus = String.Format("{0} ({1})"' strMode' iYOff);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(277));              }            }            break;          case (int)Controls.CONTROL_PIXEL_RATIO:            {              float fSqrtRatio = (float)Math.Sqrt(GUIGraphicsContext.PixelRatio);              pControl = (GUIImage)GetControl((int)Controls.CONTROL_PIXEL_RATIO);              if (null != pControl)              {                pControl.IsVisible = true;                int iControlHeight = (int)(m_fPixelRatioBoxHeight * fSqrtRatio);                int iControlWidth = (int)(m_fPixelRatioBoxHeight / fSqrtRatio);                pControl.Width = iControlWidth;                pControl.Height = iControlHeight;                iXOff = GUIGraphicsContext.OverScanLeft;                iYOff = GUIGraphicsContext.OverScanTop;                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                int iScreenHeight = GUIGraphicsContext.OverScanHeight;                pControl.SetPosition(iXOff + (iScreenWidth - iControlWidth) / 2'                                     iYOff + (iScreenHeight - iControlHeight) / 2);                string strMode = GUILocalizeStrings.Get(275);                strStatus = String.Format("{0} ({1:#.##})"' strMode' GUIGraphicsContext.PixelRatio);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(278));              }            }            break;            case (int)Controls.CONTROL_OSD:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.Subtitles;              iYOff = (GUIGraphicsContext.Height + GUIGraphicsContext.OSDOffset);                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_OSD);              if (null != pControl)              {                //pControl.IsVisible=true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                  pControl.SetPosition(iXOff + (iScreenWidth - iTextureWidth) / 2' iYOff - iTextureHeight);                string strMode = GUILocalizeStrings.Get(469);                strStatus = String.Format("{0} ({1}' Offset={2})"' strMode' iYOff' GUIGraphicsContext.OSDOffset);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(468));              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,Render,The following statement contains a magic number: switch (m_iControl)        {          case (int)Controls.CONTROL_TOP_LEFT:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.OverScanTop;              pControl = (GUIImage)GetControl((int)Controls.CONTROL_TOP_LEFT);              if (null != pControl)              {                pControl.IsVisible = true;                pControl.Height = pControl.TextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff' iYOff);              }              string strMode = GUILocalizeStrings.Get(272);              strStatus = String.Format("{0} ({1}'{2})"' strMode' iXOff' iYOff);              GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(276));            }            break;          case (int)Controls.CONTROL_BOTTOM_RIGHT:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.OverScanTop;              iXOff += GUIGraphicsContext.OverScanWidth;              iYOff += GUIGraphicsContext.OverScanHeight;              pControl = (GUIImage)GetControl((int)Controls.CONTROL_BOTTOM_RIGHT);              if (null != pControl)              {                pControl.IsVisible = true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                pControl.Height = iTextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff - iTextureWidth' iYOff - iTextureHeight);                int iXOff1 = GUIGraphicsContext.Width - iXOff;                int iYOff1 = GUIGraphicsContext.Height - iYOff;                string strMode = GUILocalizeStrings.Get(273);                strStatus = String.Format("{0} ({1}'{2})"' strMode' iXOff1' iYOff1);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(276));              }            }            break;          case (int)Controls.CONTROL_SUBTITLES:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.Subtitles;                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_SUBTITLES);              if (null != pControl)              {                pControl.IsVisible = true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                  pControl.Height = pControl.TextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff + (iScreenWidth - iTextureWidth) / 2' iYOff - iTextureHeight);                string strMode = GUILocalizeStrings.Get(274);                strStatus = String.Format("{0} ({1})"' strMode' iYOff);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(277));              }            }            break;          case (int)Controls.CONTROL_PIXEL_RATIO:            {              float fSqrtRatio = (float)Math.Sqrt(GUIGraphicsContext.PixelRatio);              pControl = (GUIImage)GetControl((int)Controls.CONTROL_PIXEL_RATIO);              if (null != pControl)              {                pControl.IsVisible = true;                int iControlHeight = (int)(m_fPixelRatioBoxHeight * fSqrtRatio);                int iControlWidth = (int)(m_fPixelRatioBoxHeight / fSqrtRatio);                pControl.Width = iControlWidth;                pControl.Height = iControlHeight;                iXOff = GUIGraphicsContext.OverScanLeft;                iYOff = GUIGraphicsContext.OverScanTop;                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                int iScreenHeight = GUIGraphicsContext.OverScanHeight;                pControl.SetPosition(iXOff + (iScreenWidth - iControlWidth) / 2'                                     iYOff + (iScreenHeight - iControlHeight) / 2);                string strMode = GUILocalizeStrings.Get(275);                strStatus = String.Format("{0} ({1:#.##})"' strMode' GUIGraphicsContext.PixelRatio);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(278));              }            }            break;            case (int)Controls.CONTROL_OSD:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.Subtitles;              iYOff = (GUIGraphicsContext.Height + GUIGraphicsContext.OSDOffset);                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_OSD);              if (null != pControl)              {                //pControl.IsVisible=true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                  pControl.SetPosition(iXOff + (iScreenWidth - iTextureWidth) / 2' iYOff - iTextureHeight);                string strMode = GUILocalizeStrings.Get(469);                strStatus = String.Format("{0} ({1}' Offset={2})"' strMode' iYOff' GUIGraphicsContext.OSDOffset);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(468));              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,Render,The following statement contains a magic number: switch (m_iControl)        {          case (int)Controls.CONTROL_TOP_LEFT:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.OverScanTop;              pControl = (GUIImage)GetControl((int)Controls.CONTROL_TOP_LEFT);              if (null != pControl)              {                pControl.IsVisible = true;                pControl.Height = pControl.TextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff' iYOff);              }              string strMode = GUILocalizeStrings.Get(272);              strStatus = String.Format("{0} ({1}'{2})"' strMode' iXOff' iYOff);              GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(276));            }            break;          case (int)Controls.CONTROL_BOTTOM_RIGHT:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.OverScanTop;              iXOff += GUIGraphicsContext.OverScanWidth;              iYOff += GUIGraphicsContext.OverScanHeight;              pControl = (GUIImage)GetControl((int)Controls.CONTROL_BOTTOM_RIGHT);              if (null != pControl)              {                pControl.IsVisible = true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                pControl.Height = iTextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff - iTextureWidth' iYOff - iTextureHeight);                int iXOff1 = GUIGraphicsContext.Width - iXOff;                int iYOff1 = GUIGraphicsContext.Height - iYOff;                string strMode = GUILocalizeStrings.Get(273);                strStatus = String.Format("{0} ({1}'{2})"' strMode' iXOff1' iYOff1);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(276));              }            }            break;          case (int)Controls.CONTROL_SUBTITLES:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.Subtitles;                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_SUBTITLES);              if (null != pControl)              {                pControl.IsVisible = true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                  pControl.Height = pControl.TextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff + (iScreenWidth - iTextureWidth) / 2' iYOff - iTextureHeight);                string strMode = GUILocalizeStrings.Get(274);                strStatus = String.Format("{0} ({1})"' strMode' iYOff);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(277));              }            }            break;          case (int)Controls.CONTROL_PIXEL_RATIO:            {              float fSqrtRatio = (float)Math.Sqrt(GUIGraphicsContext.PixelRatio);              pControl = (GUIImage)GetControl((int)Controls.CONTROL_PIXEL_RATIO);              if (null != pControl)              {                pControl.IsVisible = true;                int iControlHeight = (int)(m_fPixelRatioBoxHeight * fSqrtRatio);                int iControlWidth = (int)(m_fPixelRatioBoxHeight / fSqrtRatio);                pControl.Width = iControlWidth;                pControl.Height = iControlHeight;                iXOff = GUIGraphicsContext.OverScanLeft;                iYOff = GUIGraphicsContext.OverScanTop;                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                int iScreenHeight = GUIGraphicsContext.OverScanHeight;                pControl.SetPosition(iXOff + (iScreenWidth - iControlWidth) / 2'                                     iYOff + (iScreenHeight - iControlHeight) / 2);                string strMode = GUILocalizeStrings.Get(275);                strStatus = String.Format("{0} ({1:#.##})"' strMode' GUIGraphicsContext.PixelRatio);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(278));              }            }            break;            case (int)Controls.CONTROL_OSD:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.Subtitles;              iYOff = (GUIGraphicsContext.Height + GUIGraphicsContext.OSDOffset);                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_OSD);              if (null != pControl)              {                //pControl.IsVisible=true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                  pControl.SetPosition(iXOff + (iScreenWidth - iTextureWidth) / 2' iYOff - iTextureHeight);                string strMode = GUILocalizeStrings.Get(469);                strStatus = String.Format("{0} ({1}' Offset={2})"' strMode' iYOff' GUIGraphicsContext.OSDOffset);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(468));              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,Render,The following statement contains a magic number: switch (m_iControl)        {          case (int)Controls.CONTROL_TOP_LEFT:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.OverScanTop;              pControl = (GUIImage)GetControl((int)Controls.CONTROL_TOP_LEFT);              if (null != pControl)              {                pControl.IsVisible = true;                pControl.Height = pControl.TextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff' iYOff);              }              string strMode = GUILocalizeStrings.Get(272);              strStatus = String.Format("{0} ({1}'{2})"' strMode' iXOff' iYOff);              GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(276));            }            break;          case (int)Controls.CONTROL_BOTTOM_RIGHT:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.OverScanTop;              iXOff += GUIGraphicsContext.OverScanWidth;              iYOff += GUIGraphicsContext.OverScanHeight;              pControl = (GUIImage)GetControl((int)Controls.CONTROL_BOTTOM_RIGHT);              if (null != pControl)              {                pControl.IsVisible = true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                pControl.Height = iTextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff - iTextureWidth' iYOff - iTextureHeight);                int iXOff1 = GUIGraphicsContext.Width - iXOff;                int iYOff1 = GUIGraphicsContext.Height - iYOff;                string strMode = GUILocalizeStrings.Get(273);                strStatus = String.Format("{0} ({1}'{2})"' strMode' iXOff1' iYOff1);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(276));              }            }            break;          case (int)Controls.CONTROL_SUBTITLES:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.Subtitles;                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_SUBTITLES);              if (null != pControl)              {                pControl.IsVisible = true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                  pControl.Height = pControl.TextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff + (iScreenWidth - iTextureWidth) / 2' iYOff - iTextureHeight);                string strMode = GUILocalizeStrings.Get(274);                strStatus = String.Format("{0} ({1})"' strMode' iYOff);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(277));              }            }            break;          case (int)Controls.CONTROL_PIXEL_RATIO:            {              float fSqrtRatio = (float)Math.Sqrt(GUIGraphicsContext.PixelRatio);              pControl = (GUIImage)GetControl((int)Controls.CONTROL_PIXEL_RATIO);              if (null != pControl)              {                pControl.IsVisible = true;                int iControlHeight = (int)(m_fPixelRatioBoxHeight * fSqrtRatio);                int iControlWidth = (int)(m_fPixelRatioBoxHeight / fSqrtRatio);                pControl.Width = iControlWidth;                pControl.Height = iControlHeight;                iXOff = GUIGraphicsContext.OverScanLeft;                iYOff = GUIGraphicsContext.OverScanTop;                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                int iScreenHeight = GUIGraphicsContext.OverScanHeight;                pControl.SetPosition(iXOff + (iScreenWidth - iControlWidth) / 2'                                     iYOff + (iScreenHeight - iControlHeight) / 2);                string strMode = GUILocalizeStrings.Get(275);                strStatus = String.Format("{0} ({1:#.##})"' strMode' GUIGraphicsContext.PixelRatio);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(278));              }            }            break;            case (int)Controls.CONTROL_OSD:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.Subtitles;              iYOff = (GUIGraphicsContext.Height + GUIGraphicsContext.OSDOffset);                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_OSD);              if (null != pControl)              {                //pControl.IsVisible=true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                  pControl.SetPosition(iXOff + (iScreenWidth - iTextureWidth) / 2' iYOff - iTextureHeight);                string strMode = GUILocalizeStrings.Get(469);                strStatus = String.Format("{0} ({1}' Offset={2})"' strMode' iYOff' GUIGraphicsContext.OSDOffset);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(468));              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,Render,The following statement contains a magic number: switch (m_iControl)        {          case (int)Controls.CONTROL_TOP_LEFT:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.OverScanTop;              pControl = (GUIImage)GetControl((int)Controls.CONTROL_TOP_LEFT);              if (null != pControl)              {                pControl.IsVisible = true;                pControl.Height = pControl.TextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff' iYOff);              }              string strMode = GUILocalizeStrings.Get(272);              strStatus = String.Format("{0} ({1}'{2})"' strMode' iXOff' iYOff);              GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(276));            }            break;          case (int)Controls.CONTROL_BOTTOM_RIGHT:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.OverScanTop;              iXOff += GUIGraphicsContext.OverScanWidth;              iYOff += GUIGraphicsContext.OverScanHeight;              pControl = (GUIImage)GetControl((int)Controls.CONTROL_BOTTOM_RIGHT);              if (null != pControl)              {                pControl.IsVisible = true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                pControl.Height = iTextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff - iTextureWidth' iYOff - iTextureHeight);                int iXOff1 = GUIGraphicsContext.Width - iXOff;                int iYOff1 = GUIGraphicsContext.Height - iYOff;                string strMode = GUILocalizeStrings.Get(273);                strStatus = String.Format("{0} ({1}'{2})"' strMode' iXOff1' iYOff1);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(276));              }            }            break;          case (int)Controls.CONTROL_SUBTITLES:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.Subtitles;                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_SUBTITLES);              if (null != pControl)              {                pControl.IsVisible = true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                  pControl.Height = pControl.TextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff + (iScreenWidth - iTextureWidth) / 2' iYOff - iTextureHeight);                string strMode = GUILocalizeStrings.Get(274);                strStatus = String.Format("{0} ({1})"' strMode' iYOff);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(277));              }            }            break;          case (int)Controls.CONTROL_PIXEL_RATIO:            {              float fSqrtRatio = (float)Math.Sqrt(GUIGraphicsContext.PixelRatio);              pControl = (GUIImage)GetControl((int)Controls.CONTROL_PIXEL_RATIO);              if (null != pControl)              {                pControl.IsVisible = true;                int iControlHeight = (int)(m_fPixelRatioBoxHeight * fSqrtRatio);                int iControlWidth = (int)(m_fPixelRatioBoxHeight / fSqrtRatio);                pControl.Width = iControlWidth;                pControl.Height = iControlHeight;                iXOff = GUIGraphicsContext.OverScanLeft;                iYOff = GUIGraphicsContext.OverScanTop;                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                int iScreenHeight = GUIGraphicsContext.OverScanHeight;                pControl.SetPosition(iXOff + (iScreenWidth - iControlWidth) / 2'                                     iYOff + (iScreenHeight - iControlHeight) / 2);                string strMode = GUILocalizeStrings.Get(275);                strStatus = String.Format("{0} ({1:#.##})"' strMode' GUIGraphicsContext.PixelRatio);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(278));              }            }            break;            case (int)Controls.CONTROL_OSD:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.Subtitles;              iYOff = (GUIGraphicsContext.Height + GUIGraphicsContext.OSDOffset);                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_OSD);              if (null != pControl)              {                //pControl.IsVisible=true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                  pControl.SetPosition(iXOff + (iScreenWidth - iTextureWidth) / 2' iYOff - iTextureHeight);                string strMode = GUILocalizeStrings.Get(469);                strStatus = String.Format("{0} ({1}' Offset={2})"' strMode' iYOff' GUIGraphicsContext.OSDOffset);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(468));              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,Render,The following statement contains a magic number: switch (m_iControl)        {          case (int)Controls.CONTROL_TOP_LEFT:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.OverScanTop;              pControl = (GUIImage)GetControl((int)Controls.CONTROL_TOP_LEFT);              if (null != pControl)              {                pControl.IsVisible = true;                pControl.Height = pControl.TextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff' iYOff);              }              string strMode = GUILocalizeStrings.Get(272);              strStatus = String.Format("{0} ({1}'{2})"' strMode' iXOff' iYOff);              GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(276));            }            break;          case (int)Controls.CONTROL_BOTTOM_RIGHT:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.OverScanTop;              iXOff += GUIGraphicsContext.OverScanWidth;              iYOff += GUIGraphicsContext.OverScanHeight;              pControl = (GUIImage)GetControl((int)Controls.CONTROL_BOTTOM_RIGHT);              if (null != pControl)              {                pControl.IsVisible = true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                pControl.Height = iTextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff - iTextureWidth' iYOff - iTextureHeight);                int iXOff1 = GUIGraphicsContext.Width - iXOff;                int iYOff1 = GUIGraphicsContext.Height - iYOff;                string strMode = GUILocalizeStrings.Get(273);                strStatus = String.Format("{0} ({1}'{2})"' strMode' iXOff1' iYOff1);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(276));              }            }            break;          case (int)Controls.CONTROL_SUBTITLES:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.Subtitles;                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_SUBTITLES);              if (null != pControl)              {                pControl.IsVisible = true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                  pControl.Height = pControl.TextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff + (iScreenWidth - iTextureWidth) / 2' iYOff - iTextureHeight);                string strMode = GUILocalizeStrings.Get(274);                strStatus = String.Format("{0} ({1})"' strMode' iYOff);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(277));              }            }            break;          case (int)Controls.CONTROL_PIXEL_RATIO:            {              float fSqrtRatio = (float)Math.Sqrt(GUIGraphicsContext.PixelRatio);              pControl = (GUIImage)GetControl((int)Controls.CONTROL_PIXEL_RATIO);              if (null != pControl)              {                pControl.IsVisible = true;                int iControlHeight = (int)(m_fPixelRatioBoxHeight * fSqrtRatio);                int iControlWidth = (int)(m_fPixelRatioBoxHeight / fSqrtRatio);                pControl.Width = iControlWidth;                pControl.Height = iControlHeight;                iXOff = GUIGraphicsContext.OverScanLeft;                iYOff = GUIGraphicsContext.OverScanTop;                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                int iScreenHeight = GUIGraphicsContext.OverScanHeight;                pControl.SetPosition(iXOff + (iScreenWidth - iControlWidth) / 2'                                     iYOff + (iScreenHeight - iControlHeight) / 2);                string strMode = GUILocalizeStrings.Get(275);                strStatus = String.Format("{0} ({1:#.##})"' strMode' GUIGraphicsContext.PixelRatio);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(278));              }            }            break;            case (int)Controls.CONTROL_OSD:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.Subtitles;              iYOff = (GUIGraphicsContext.Height + GUIGraphicsContext.OSDOffset);                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_OSD);              if (null != pControl)              {                //pControl.IsVisible=true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                  pControl.SetPosition(iXOff + (iScreenWidth - iTextureWidth) / 2' iYOff - iTextureHeight);                string strMode = GUILocalizeStrings.Get(469);                strStatus = String.Format("{0} ({1}' Offset={2})"' strMode' iYOff' GUIGraphicsContext.OSDOffset);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(468));              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,Render,The following statement contains a magic number: switch (m_iControl)        {          case (int)Controls.CONTROL_TOP_LEFT:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.OverScanTop;              pControl = (GUIImage)GetControl((int)Controls.CONTROL_TOP_LEFT);              if (null != pControl)              {                pControl.IsVisible = true;                pControl.Height = pControl.TextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff' iYOff);              }              string strMode = GUILocalizeStrings.Get(272);              strStatus = String.Format("{0} ({1}'{2})"' strMode' iXOff' iYOff);              GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(276));            }            break;          case (int)Controls.CONTROL_BOTTOM_RIGHT:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.OverScanTop;              iXOff += GUIGraphicsContext.OverScanWidth;              iYOff += GUIGraphicsContext.OverScanHeight;              pControl = (GUIImage)GetControl((int)Controls.CONTROL_BOTTOM_RIGHT);              if (null != pControl)              {                pControl.IsVisible = true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                pControl.Height = iTextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff - iTextureWidth' iYOff - iTextureHeight);                int iXOff1 = GUIGraphicsContext.Width - iXOff;                int iYOff1 = GUIGraphicsContext.Height - iYOff;                string strMode = GUILocalizeStrings.Get(273);                strStatus = String.Format("{0} ({1}'{2})"' strMode' iXOff1' iYOff1);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(276));              }            }            break;          case (int)Controls.CONTROL_SUBTITLES:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.Subtitles;                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_SUBTITLES);              if (null != pControl)              {                pControl.IsVisible = true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                  pControl.Height = pControl.TextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff + (iScreenWidth - iTextureWidth) / 2' iYOff - iTextureHeight);                string strMode = GUILocalizeStrings.Get(274);                strStatus = String.Format("{0} ({1})"' strMode' iYOff);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(277));              }            }            break;          case (int)Controls.CONTROL_PIXEL_RATIO:            {              float fSqrtRatio = (float)Math.Sqrt(GUIGraphicsContext.PixelRatio);              pControl = (GUIImage)GetControl((int)Controls.CONTROL_PIXEL_RATIO);              if (null != pControl)              {                pControl.IsVisible = true;                int iControlHeight = (int)(m_fPixelRatioBoxHeight * fSqrtRatio);                int iControlWidth = (int)(m_fPixelRatioBoxHeight / fSqrtRatio);                pControl.Width = iControlWidth;                pControl.Height = iControlHeight;                iXOff = GUIGraphicsContext.OverScanLeft;                iYOff = GUIGraphicsContext.OverScanTop;                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                int iScreenHeight = GUIGraphicsContext.OverScanHeight;                pControl.SetPosition(iXOff + (iScreenWidth - iControlWidth) / 2'                                     iYOff + (iScreenHeight - iControlHeight) / 2);                string strMode = GUILocalizeStrings.Get(275);                strStatus = String.Format("{0} ({1:#.##})"' strMode' GUIGraphicsContext.PixelRatio);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(278));              }            }            break;            case (int)Controls.CONTROL_OSD:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.Subtitles;              iYOff = (GUIGraphicsContext.Height + GUIGraphicsContext.OSDOffset);                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_OSD);              if (null != pControl)              {                //pControl.IsVisible=true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                  pControl.SetPosition(iXOff + (iScreenWidth - iTextureWidth) / 2' iYOff - iTextureHeight);                string strMode = GUILocalizeStrings.Get(469);                strStatus = String.Format("{0} ({1}' Offset={2})"' strMode' iYOff' GUIGraphicsContext.OSDOffset);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(468));              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettings,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettings.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(100004));
Magic Number,MediaPortal.GUI.Settings,GUISettings,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettings.cs,OnRestartMP,The following statement contains a magic number: dlgYesNo.SetHeading(927);
Magic Number,MediaPortal.GUI.Settings,GUISettings,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettings.cs,OnRestartMP,The following statement contains a magic number: dlgYesNo.SetLine(2' "Do you want to restart MediaPortal?");
Magic Number,MediaPortal.GUI.Settings,GUISettings,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettings.cs,GetHome,The following statement contains a magic number: strButtonText = GUILocalizeStrings.Get(5);
Magic Number,MediaPortal.GUI.Settings,GUISettingsExtensions,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_Extensions.cs,OnPageLoad,The following statement contains a magic number: switch (_section)        {          case "movies":            module = GUILocalizeStrings.Get(300042); // Videos - File extensions            break;          case "music":            module = GUILocalizeStrings.Get(300043);            break;          case "pictures":            module = GUILocalizeStrings.Get(300044);            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsExtensions,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_Extensions.cs,OnPageLoad,The following statement contains a magic number: switch (_section)        {          case "movies":            module = GUILocalizeStrings.Get(300042); // Videos - File extensions            break;          case "music":            module = GUILocalizeStrings.Get(300043);            break;          case "pictures":            module = GUILocalizeStrings.Get(300044);            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsExtensions,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_Extensions.cs,OnPageLoad,The following statement contains a magic number: switch (_section)        {          case "movies":            module = GUILocalizeStrings.Get(300042); // Videos - File extensions            break;          case "music":            module = GUILocalizeStrings.Get(300043);            break;          case "pictures":            module = GUILocalizeStrings.Get(300044);            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsPlaylist,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_Playlist.cs,OnPageLoad,The following statement contains a magic number: switch (_section)        {          case "music":            GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(300045));            break;            case "movies":            GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(300046));            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsPlaylist,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_Playlist.cs,OnPageLoad,The following statement contains a magic number: switch (_section)        {          case "music":            GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(300045));            break;            case "movies":            GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(300046));            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsPlaylist,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_Playlist.cs,OnPageLoad,The following statement contains a magic number: _userNetFolder = GUILocalizeStrings.Get(145);
Magic Number,MediaPortal.GUI.Settings,GUISettingsPlaylist,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_Playlist.cs,SetProperties,The following statement contains a magic number: switch (_section)        {          case "music":            GUIPropertyManager.SetProperty("#playlisttype"' GUILocalizeStrings.Get(300047));            break;            case "movies":            GUIPropertyManager.SetProperty("#playlisttype"' GUILocalizeStrings.Get(300048));            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsPlaylist,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_Playlist.cs,SetProperties,The following statement contains a magic number: switch (_section)        {          case "music":            GUIPropertyManager.SetProperty("#playlisttype"' GUILocalizeStrings.Get(300047));            break;            case "movies":            GUIPropertyManager.SetProperty("#playlisttype"' GUILocalizeStrings.Get(300048));            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsPlaylist,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_Playlist.cs,GetFolders,The following statement contains a magic number: selectedItem.Label2 == GUILocalizeStrings.Get(145)
Magic Number,MediaPortal.GUI.Settings,GUISettingsPlaylist,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_Playlist.cs,GetFolders,The following statement contains a magic number: selectedItem.Label2.LastIndexOf(@"\") < 2
Magic Number,MediaPortal.GUI.Settings,GUISettingsPlaylist,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_Playlist.cs,GetNetworkFolders,The following statement contains a magic number: dlgOk.SetHeading(GUILocalizeStrings.Get(1020));
Magic Number,MediaPortal.GUI.Settings,GUISettingsPlaylist,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_Playlist.cs,GetNetworkFolders,The following statement contains a magic number: dlgOk.SetLine(1' GUILocalizeStrings.Get(300056));
Magic Number,MediaPortal.GUI.Settings,GUISettingsPlaylist,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_Playlist.cs,GetNetworkFolders,The following statement contains a magic number: dlgOk.SetLine(2' GUILocalizeStrings.Get(300057));
Magic Number,MediaPortal.GUI.Settings,GUISettingsPlaylist,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_Playlist.cs,GetNetworkFolders,The following statement contains a magic number: dlgOk.SetLine(2' GUILocalizeStrings.Get(300057));
Magic Number,MediaPortal.GUI.Settings,GUISettingsPlaylist,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_Playlist.cs,GetNetworkFolders,The following statement contains a magic number: netShare = GUILocalizeStrings.Get(145);
Magic Number,MediaPortal.GUI.Settings,GUISettingsPlaylist,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_Playlist.cs,GetNetworkFolders,The following statement contains a magic number: string.IsNullOrEmpty(netShare) || !netShare.StartsWith(@"\\") || (netShare.StartsWith(@"\\") && netShare.Length <= 2)
Magic Number,MediaPortal.GUI.Settings,GUISettingsPlaylist,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_Playlist.cs,OnAddPath,The following statement contains a magic number: dlg.SetHeading(300049);
Magic Number,MediaPortal.GUI.Settings,GUISettingsPlaylist,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_Playlist.cs,OnAddPath,The following statement contains a magic number: dlg.SetButtonLabel(424);
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnPageLoad,The following statement contains a magic number: switch (_section)        {          case "movies":            module = GUILocalizeStrings.Get(300050);//Videos - Folders            break;          case "music":            module = GUILocalizeStrings.Get(300051); //Music - Folders            break;          case "pictures":            module = GUILocalizeStrings.Get(300052); //Pictures - Folders            break;        }
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnPageLoad,The following statement contains a magic number: switch (_section)        {          case "movies":            module = GUILocalizeStrings.Get(300050);//Videos - Folders            break;          case "music":            module = GUILocalizeStrings.Get(300051); //Music - Folders            break;          case "pictures":            module = GUILocalizeStrings.Get(300052); //Pictures - Folders            break;        }
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnPageLoad,The following statement contains a magic number: switch (_section)        {          case "movies":            module = GUILocalizeStrings.Get(300050);//Videos - Folders            break;          case "music":            module = GUILocalizeStrings.Get(300051); //Music - Folders            break;          case "pictures":            module = GUILocalizeStrings.Get(300052); //Pictures - Folders            break;        }
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnPageLoad,The following statement contains a magic number: _userNetFolder = GUILocalizeStrings.Get(145);
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnClicked,The following statement contains a magic number: _userNetFolder = GUILocalizeStrings.Get(145);
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnClicked,The following statement contains a magic number: dlgOk.SetHeading(257);
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnClicked,The following statement contains a magic number: dlgOk.SetLine(1' GUILocalizeStrings.Get(300053));
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnClicked,The following statement contains a magic number: dlgOk.SetLine(2' GUILocalizeStrings.Get(300054));
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnClicked,The following statement contains a magic number: dlgOk.SetLine(2' GUILocalizeStrings.Get(300054));
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnClicked,The following statement contains a magic number: dlgOk.SetHeading(257);
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnClicked,The following statement contains a magic number: dlgOk.SetLine(1' GUILocalizeStrings.Get(300053));
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnClicked,The following statement contains a magic number: dlgOk.SetLine(2' GUILocalizeStrings.Get(300054));
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnClicked,The following statement contains a magic number: dlgOk.SetLine(2' GUILocalizeStrings.Get(300054));
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnClicked,The following statement contains a magic number: dlgYesNo.SetHeading(GUILocalizeStrings.Get(927));
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnClicked,The following statement contains a magic number: dlgYesNo.SetLine(1' GUILocalizeStrings.Get(300055));
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,SetProperties,The following statement contains a magic number: strValue = GUILocalizeStrings.Get(200032);
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,SetProperties,The following statement contains a magic number: strValue = GUILocalizeStrings.Get(200031);
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,SetProperties,The following statement contains a magic number: strValue = GUILocalizeStrings.Get(200032);
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,SetProperties,The following statement contains a magic number: strValue = GUILocalizeStrings.Get(200031);
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,GetFolders,The following statement contains a magic number: selectedItem.Label2 == GUILocalizeStrings.Get(145)
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,GetFolders,The following statement contains a magic number: selectedItem.Label2.LastIndexOf(@"\") < 2
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,GetNetworkFolders,The following statement contains a magic number: dlgOk.SetHeading(GUILocalizeStrings.Get(1020));
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,GetNetworkFolders,The following statement contains a magic number: dlgOk.SetLine(1' GUILocalizeStrings.Get(300056));
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,GetNetworkFolders,The following statement contains a magic number: dlgOk.SetLine(2' GUILocalizeStrings.Get(300057));
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,GetNetworkFolders,The following statement contains a magic number: dlgOk.SetLine(2' GUILocalizeStrings.Get(300057));
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,GetNetworkFolders,The following statement contains a magic number: netShare = GUILocalizeStrings.Get(145);
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,GetNetworkFolders,The following statement contains a magic number: string.IsNullOrEmpty(netShare) || !netShare.StartsWith(@"\\") || (netShare.StartsWith(@"\\") && netShare.Length <= 2)
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnAddEditFolder,The following statement contains a magic number: dlg.SetHeading(496);
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnAddEditFolder,The following statement contains a magic number: dlg.AddLocalizedString(300009);
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnAddEditFolder,The following statement contains a magic number: dlg.AddLocalizedString(300058);
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnAddEditFolder,The following statement contains a magic number: dlg.AddLocalizedString(109);
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnAddEditFolder,The following statement contains a magic number: dlg.AddLocalizedString(300221);
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnAddEditFolder,The following statement contains a magic number: dlg.AddLocalizedString(300059);
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnAddEditFolder,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 300009:            OnAddName();            break;          case 300058:            _selectedLabelIndex = -1;            OnAddPath();            break;          case 109:            OnThumb();            break;          case 300221:            OnMovieFolder();            break;          //case 1374:          //  OnAddLayout();          //  break;          case 300059:            OnAddPin();            break;        }
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnAddEditFolder,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 300009:            OnAddName();            break;          case 300058:            _selectedLabelIndex = -1;            OnAddPath();            break;          case 109:            OnThumb();            break;          case 300221:            OnMovieFolder();            break;          //case 1374:          //  OnAddLayout();          //  break;          case 300059:            OnAddPin();            break;        }
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnAddEditFolder,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 300009:            OnAddName();            break;          case 300058:            _selectedLabelIndex = -1;            OnAddPath();            break;          case 109:            OnThumb();            break;          case 300221:            OnMovieFolder();            break;          //case 1374:          //  OnAddLayout();          //  break;          case 300059:            OnAddPin();            break;        }
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnAddEditFolder,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 300009:            OnAddName();            break;          case 300058:            _selectedLabelIndex = -1;            OnAddPath();            break;          case 109:            OnThumb();            break;          case 300221:            OnMovieFolder();            break;          //case 1374:          //  OnAddLayout();          //  break;          case 300059:            OnAddPin();            break;        }
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnAddEditFolder,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 300009:            OnAddName();            break;          case 300058:            _selectedLabelIndex = -1;            OnAddPath();            break;          case 109:            OnThumb();            break;          case 300221:            OnMovieFolder();            break;          //case 1374:          //  OnAddLayout();          //  break;          case 300059:            OnAddPin();            break;        }
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnAddName,The following statement contains a magic number: dlgOk.SetHeading(GUILocalizeStrings.Get(257));
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnAddName,The following statement contains a magic number: dlgOk.SetLine(1' GUILocalizeStrings.Get(300013));
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnAddPath,The following statement contains a magic number: dlg.SetHeading(300049);
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnAddPath,The following statement contains a magic number: dlg.SetButtonLabel(424);
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnAddPin,The following statement contains a magic number: dlgOK.SetLine(1' 100513);
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnAddPin,The following statement contains a magic number: dlgOK2.SetLine(1' 100514);
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnThumb,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnThumb,The following statement contains a magic number: dlg.Add(GUILocalizeStrings.Get(200031));
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnThumb,The following statement contains a magic number: dlg.Add(GUILocalizeStrings.Get(200032));
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnMovieFolder,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnMovieFolder,The following statement contains a magic number: dlg.Add(GUILocalizeStrings.Get(200031));
Magic Number,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnMovieFolder,The following statement contains a magic number: dlg.Add(GUILocalizeStrings.Get(200032));
Magic Number,MediaPortal.GUI.Settings,SettingsSharesHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettings_SharesHelper.cs,LoadSettings,The following statement contains a magic number: int sharePortData = xmlreader.GetValueAsInt(section' sharePort' 21);
Magic Number,MediaPortal.GUI.Settings,SettingsSharesHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettings_SharesHelper.cs,LoadSettings,The following statement contains a magic number: index < 128
Magic Number,MediaPortal.GUI.Settings,SettingsSharesHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettings_SharesHelper.cs,SetDefaultDrives,The following statement contains a magic number: index < 128
Magic Number,MediaPortal.GUI.Settings,SettingsSharesHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettings_SharesHelper.cs,SaveSettings,The following statement contains a magic number: int sharePortData = 21;
Magic Number,MediaPortal.GUI.Settings,SettingsSharesHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettings_SharesHelper.cs,SaveSettings,The following statement contains a magic number: index < 128
Magic Number,MediaPortal.GUI.Settings,SettingsSharesHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettings_SharesHelper.cs,ProperLayoutFromDefault,The following statement contains a magic number: switch (defaultView)        {          case 1: return GUIFacadeControl.Layout.SmallIcons;          case 2: return GUIFacadeControl.Layout.LargeIcons;          case 3: return GUIFacadeControl.Layout.AlbumView;          case 4: return GUIFacadeControl.Layout.Filmstrip;          case 5: return GUIFacadeControl.Layout.CoverFlow;          default: return GUIFacadeControl.Layout.List;        }
Magic Number,MediaPortal.GUI.Settings,SettingsSharesHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettings_SharesHelper.cs,ProperLayoutFromDefault,The following statement contains a magic number: switch (defaultView)        {          case 1: return GUIFacadeControl.Layout.SmallIcons;          case 2: return GUIFacadeControl.Layout.LargeIcons;          case 3: return GUIFacadeControl.Layout.AlbumView;          case 4: return GUIFacadeControl.Layout.Filmstrip;          case 5: return GUIFacadeControl.Layout.CoverFlow;          default: return GUIFacadeControl.Layout.List;        }
Magic Number,MediaPortal.GUI.Settings,SettingsSharesHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettings_SharesHelper.cs,ProperLayoutFromDefault,The following statement contains a magic number: switch (defaultView)        {          case 1: return GUIFacadeControl.Layout.SmallIcons;          case 2: return GUIFacadeControl.Layout.LargeIcons;          case 3: return GUIFacadeControl.Layout.AlbumView;          case 4: return GUIFacadeControl.Layout.Filmstrip;          case 5: return GUIFacadeControl.Layout.CoverFlow;          default: return GUIFacadeControl.Layout.List;        }
Magic Number,MediaPortal.GUI.Settings,SettingsSharesHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettings_SharesHelper.cs,ProperLayoutFromDefault,The following statement contains a magic number: switch (defaultView)        {          case 1: return GUIFacadeControl.Layout.SmallIcons;          case 2: return GUIFacadeControl.Layout.LargeIcons;          case 3: return GUIFacadeControl.Layout.AlbumView;          case 4: return GUIFacadeControl.Layout.Filmstrip;          case 5: return GUIFacadeControl.Layout.CoverFlow;          default: return GUIFacadeControl.Layout.List;        }
Magic Number,MediaPortal.GUI.Settings,SettingsSharesHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettings_SharesHelper.cs,ProperDefaultFromLayout,The following statement contains a magic number: switch (layout)        {          case GUIFacadeControl.Layout.SmallIcons: return 1;          case GUIFacadeControl.Layout.LargeIcons: return 2;          case GUIFacadeControl.Layout.AlbumView: return 3;          case GUIFacadeControl.Layout.Filmstrip: return 4;          case GUIFacadeControl.Layout.CoverFlow: return 5;          default: return 0;        }
Magic Number,MediaPortal.GUI.Settings,SettingsSharesHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettings_SharesHelper.cs,ProperDefaultFromLayout,The following statement contains a magic number: switch (layout)        {          case GUIFacadeControl.Layout.SmallIcons: return 1;          case GUIFacadeControl.Layout.LargeIcons: return 2;          case GUIFacadeControl.Layout.AlbumView: return 3;          case GUIFacadeControl.Layout.Filmstrip: return 4;          case GUIFacadeControl.Layout.CoverFlow: return 5;          default: return 0;        }
Magic Number,MediaPortal.GUI.Settings,SettingsSharesHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettings_SharesHelper.cs,ProperDefaultFromLayout,The following statement contains a magic number: switch (layout)        {          case GUIFacadeControl.Layout.SmallIcons: return 1;          case GUIFacadeControl.Layout.LargeIcons: return 2;          case GUIFacadeControl.Layout.AlbumView: return 3;          case GUIFacadeControl.Layout.Filmstrip: return 4;          case GUIFacadeControl.Layout.CoverFlow: return 5;          default: return 0;        }
Magic Number,MediaPortal.GUI.Settings,SettingsSharesHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettings_SharesHelper.cs,ProperDefaultFromLayout,The following statement contains a magic number: switch (layout)        {          case GUIFacadeControl.Layout.SmallIcons: return 1;          case GUIFacadeControl.Layout.LargeIcons: return 2;          case GUIFacadeControl.Layout.AlbumView: return 3;          case GUIFacadeControl.Layout.Filmstrip: return 4;          case GUIFacadeControl.Layout.CoverFlow: return 5;          default: return 0;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMusic,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\GUISettingsMusic.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(100014));
Magic Number,MediaPortal.GUI.Settings,GUISettingsMusicDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\GUISettingsMusic_Database.cs,LoadSettings,The following statement contains a magic number: _updateSinceLastImport = String.Format(GUILocalizeStrings.Get(300232)'                                                            xmlreader.GetValueAsString("musicfiles"' "lastImport"'                                                                                       "1900-01-01 00:00:00"));
Magic Number,MediaPortal.GUI.Settings,GUISettingsMusicDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\GUISettingsMusic_Database.cs,LoadSettings,The following statement contains a magic number: string driveLetter = FolderInfo(item).Folder.Substring(0' 3).ToUpperInvariant();
Magic Number,MediaPortal.GUI.Settings,GUISettingsMusicDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\GUISettingsMusic_Database.cs,LoadSettings,The following statement contains a magic number: item.Label2 = GUILocalizeStrings.Get(193);
Magic Number,MediaPortal.GUI.Settings,GUISettingsMusicDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\GUISettingsMusic_Database.cs,LoadSettings,The following statement contains a magic number: driveLetter.StartsWith("\\\\") || Util.Utils.getDriveType(driveLetter) == 3 ||               Util.Utils.getDriveType(driveLetter) == 4
Magic Number,MediaPortal.GUI.Settings,GUISettingsMusicDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\GUISettingsMusic_Database.cs,LoadSettings,The following statement contains a magic number: driveLetter.StartsWith("\\\\") || Util.Utils.getDriveType(driveLetter) == 3 ||               Util.Utils.getDriveType(driveLetter) == 4
Magic Number,MediaPortal.GUI.Settings,GUISettingsMusicDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\GUISettingsMusic_Database.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(101011));
Magic Number,MediaPortal.GUI.Settings,GUISettingsMusicDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\GUISettingsMusic_Database.cs,OnClicked,The following statement contains a magic number: dlgOk.SetHeading(GUILocalizeStrings.Get(1020));
Magic Number,MediaPortal.GUI.Settings,GUISettingsMusicDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\GUISettingsMusic_Database.cs,OnClicked,The following statement contains a magic number: dlgOk.SetLine(1' GUILocalizeStrings.Get(300004));
Magic Number,MediaPortal.GUI.Settings,GUISettingsMusicDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\GUISettingsMusic_Database.cs,OnClicked,The following statement contains a magic number: dlgOk.SetLine(2' GUILocalizeStrings.Get(300005));
Magic Number,MediaPortal.GUI.Settings,GUISettingsMusicDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\GUISettingsMusic_Database.cs,OnClicked,The following statement contains a magic number: dlgOk.SetLine(2' GUILocalizeStrings.Get(300005));
Magic Number,MediaPortal.GUI.Settings,GUISettingsMusicDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\GUISettingsMusic_Database.cs,OnDateAdded,The following statement contains a magic number: dlg.SetHeading(496);
Magic Number,MediaPortal.GUI.Settings,GUISettingsMusicDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\GUISettingsMusic_Database.cs,FolderScanThread,The following statement contains a magic number: ulong diskSpace = freeBytesAvailable / 1048576;
Magic Number,MediaPortal.GUI.Settings,GUISettingsMusicDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\GUISettingsMusic_Database.cs,FolderScanThread,The following statement contains a magic number: diskSpace > 100
Magic Number,MediaPortal.GUI.Settings,GUISettingsMusicDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\GUISettingsMusic_Database.cs,FolderScanThread,The following statement contains a magic number: _updateSinceLastImport = String.Format(GUILocalizeStrings.Get(300232)'                                                            xmlreader.GetValueAsString("musicfiles"' "lastImport"'                                                                                       "1900-01-01 00:00:00"));
Magic Number,MediaPortal.GUI.Settings,GUISettingsMusicDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\GUISettingsMusic_Database.cs,SetProperties,The following statement contains a magic number: GUIPropertyManager.SetProperty("#dateadded"' GUILocalizeStrings.Get(300025) + " " + (string)_dateAdded[_dateAddedSelectedIndex]);
Magic Number,MediaPortal.GUI.Settings,GUISettingsMusicNowPlaying,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\GUISettingsMusic_NowPlaying.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(101013));
Magic Number,MediaPortal.GUI.Settings,GUISettingsMusicNowPlaying,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\GUISettingsMusic_NowPlaying.cs,OnClicked,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,MediaPortal.GUI.Settings,MusicDatabaseReorg,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\MusicDatabaseReorg.cs,DoReorg,The following statement contains a magic number: pDlgProgress.SetHeading(313);
Magic Number,MediaPortal.GUI.Settings,MusicDatabaseReorg,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\MusicDatabaseReorg.cs,DoReorg,The following statement contains a magic number: pDlgProgress.SetLine(2' "");
Magic Number,MediaPortal.GUI.Settings,MusicDatabaseReorg,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\MusicDatabaseReorg.cs,DoReorg,The following statement contains a magic number: pDlgProgress.SetLine(3' "");
Magic Number,MediaPortal.GUI.Settings,MusicDatabaseReorg,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\MusicDatabaseReorg.cs,DoReorg,The following statement contains a magic number: pDlgProgress.SetLine(1' 316);
Magic Number,MediaPortal.GUI.Settings,MusicDatabaseReorg,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\MusicDatabaseReorg.cs,DoReorg,The following statement contains a magic number: pDlgProgress.SetLine(2' "Klaar");
Magic Number,MediaPortal.GUI.Settings,MusicDatabaseReorg,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\MusicDatabaseReorg.cs,ReorgAsync,The following statement contains a magic number: dlgNotify.SetHeading(GUILocalizeStrings.Get(313));
Magic Number,MediaPortal.GUI.Settings,MusicDatabaseReorg,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\MusicDatabaseReorg.cs,ReorgAsync,The following statement contains a magic number: dlgNotify.SetText(GUILocalizeStrings.Get(317));
Magic Number,MediaPortal.GUI.Settings,MusicDatabaseReorg,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\MusicDatabaseReorg.cs,DeleteAlbumInfo,The following statement contains a magic number: pDlg.SetHeading(313);
Magic Number,MediaPortal.GUI.Settings,MusicDatabaseReorg,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\MusicDatabaseReorg.cs,DeleteAlbumInfo,The following statement contains a magic number: pDlg.SetLine(1' 425);
Magic Number,MediaPortal.GUI.Settings,MusicDatabaseReorg,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\MusicDatabaseReorg.cs,DeleteAlbumInfo,The following statement contains a magic number: pDlg.SetLine(2' "");
Magic Number,MediaPortal.GUI.Settings,MusicDatabaseReorg,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\MusicDatabaseReorg.cs,DeleteAlbumInfo,The following statement contains a magic number: pDlg.SetLine(3' "");
Magic Number,MediaPortal.GUI.Settings,MusicDatabaseReorg,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\MusicDatabaseReorg.cs,DeleteAlbumInfo,The following statement contains a magic number: string szText = GUILocalizeStrings.Get(181);
Magic Number,MediaPortal.GUI.Settings,MusicDatabaseReorg,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\MusicDatabaseReorg.cs,DeleteAlbumInfo,The following statement contains a magic number: pDlgSelect.SetButtonLabel(510);
Magic Number,MediaPortal.GUI.Settings,MusicDatabaseReorg,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\MusicDatabaseReorg.cs,DeleteSingleAlbum,The following statement contains a magic number: pDlg.SetHeading(313);
Magic Number,MediaPortal.GUI.Settings,MusicDatabaseReorg,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\MusicDatabaseReorg.cs,DeleteSingleAlbum,The following statement contains a magic number: pDlg.SetLine(1' 425);
Magic Number,MediaPortal.GUI.Settings,MusicDatabaseReorg,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\MusicDatabaseReorg.cs,DeleteSingleAlbum,The following statement contains a magic number: pDlg.SetLine(2' "");
Magic Number,MediaPortal.GUI.Settings,MusicDatabaseReorg,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\MusicDatabaseReorg.cs,DeleteSingleAlbum,The following statement contains a magic number: pDlg.SetLine(3' "");
Magic Number,MediaPortal.GUI.Settings,MusicDatabaseReorg,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\MusicDatabaseReorg.cs,DeleteSingleAlbum,The following statement contains a magic number: string szText = GUILocalizeStrings.Get(181);
Magic Number,MediaPortal.GUI.Settings,MusicDatabaseReorg,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\MusicDatabaseReorg.cs,DeleteSingleAlbum,The following statement contains a magic number: pDlgSelect.SetButtonLabel(510);
Magic Number,MediaPortal.GUI.Settings,GUISettingsPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(100012));
Magic Number,MediaPortal.GUI.Settings,GUISettingsPicturesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures_Database.cs,LoadSettings,The following statement contains a magic number: string driveLetter = FolderInfo(item).Folder.Substring(0' 3).ToUpperInvariant();
Magic Number,MediaPortal.GUI.Settings,GUISettingsPicturesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures_Database.cs,LoadSettings,The following statement contains a magic number: item.Label2 = GUILocalizeStrings.Get(193);
Magic Number,MediaPortal.GUI.Settings,GUISettingsPicturesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures_Database.cs,LoadSettings,The following statement contains a magic number: driveLetter.StartsWith("\\\\") || Util.Utils.getDriveType(driveLetter) == 3 ||               Util.Utils.getDriveType(driveLetter) == 4
Magic Number,MediaPortal.GUI.Settings,GUISettingsPicturesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures_Database.cs,LoadSettings,The following statement contains a magic number: driveLetter.StartsWith("\\\\") || Util.Utils.getDriveType(driveLetter) == 3 ||               Util.Utils.getDriveType(driveLetter) == 4
Magic Number,MediaPortal.GUI.Settings,GUISettingsPicturesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures_Database.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(101012));
Magic Number,MediaPortal.GUI.Settings,GUISettingsPicturesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures_Database.cs,OnClicked,The following statement contains a magic number: dlgOk.SetHeading(GUILocalizeStrings.Get(1020));
Magic Number,MediaPortal.GUI.Settings,GUISettingsPicturesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures_Database.cs,OnClicked,The following statement contains a magic number: dlgOk.SetLine(1' GUILocalizeStrings.Get(300004));
Magic Number,MediaPortal.GUI.Settings,GUISettingsPicturesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures_Database.cs,OnClicked,The following statement contains a magic number: dlgOk.SetLine(2' GUILocalizeStrings.Get(300005));
Magic Number,MediaPortal.GUI.Settings,GUISettingsPicturesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures_Database.cs,OnClicked,The following statement contains a magic number: dlgOk.SetLine(2' GUILocalizeStrings.Get(300005));
Magic Number,MediaPortal.GUI.Settings,GUISettingsPicturesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures_Database.cs,OnScanDatabaseThread,The following statement contains a magic number: SetStatus(GUILocalizeStrings.Get(300061));
Magic Number,MediaPortal.GUI.Settings,GUISettingsPicturesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures_Database.cs,OnScanDatabaseThread,The following statement contains a magic number: totalFiles = availableFiles.Count*2;
Magic Number,MediaPortal.GUI.Settings,GUISettingsPicturesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures_Database.cs,OnScanDatabaseThread,The following statement contains a magic number: dlgNotify.SetHeading(GUILocalizeStrings.Get(1020));
Magic Number,MediaPortal.GUI.Settings,GUISettingsPicturesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures_Database.cs,OnScanDatabaseThread,The following statement contains a magic number: dlgNotify.SetText(GUILocalizeStrings.Get(300062));
Magic Number,MediaPortal.GUI.Settings,GUISettingsPicturesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures_Database.cs,OnResetDatabase,The following statement contains a magic number: dlgYesNo.SetHeading(GUILocalizeStrings.Get(927));
Magic Number,MediaPortal.GUI.Settings,GUISettingsPicturesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures_Database.cs,OnResetDatabase,The following statement contains a magic number: dlgYesNo.SetLine(1' GUILocalizeStrings.Get(300026));
Magic Number,MediaPortal.GUI.Settings,GUISettingsPicturesSlideshow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures_Slideshow.cs,LoadSettings,The following statement contains a magic number: m_iSpeed = xmlreader.GetValueAsInt("pictures"' "speed"' 3);
Magic Number,MediaPortal.GUI.Settings,GUISettingsPicturesSlideshow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures_Slideshow.cs,LoadSettings,The following statement contains a magic number: m_iTransistion = xmlreader.GetValueAsInt("pictures"' "transition"' 20);
Magic Number,MediaPortal.GUI.Settings,GUISettingsPicturesSlideshow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures_Slideshow.cs,LoadSettings,The following statement contains a magic number: m_iKenBurnsSpeed = xmlreader.GetValueAsInt("pictures"' "kenburnsspeed"' 20);
Magic Number,MediaPortal.GUI.Settings,GUISettingsPicturesSlideshow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures_Slideshow.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(101015));
Magic Number,MediaPortal.GUI.Settings,GUISettingsPicturesSlideshow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures_Slideshow.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              LoadSettings();              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_SPEED);              for (int i = 1; i <= 10; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_SPEED' i.ToString());              }                GUIControl.ClearControl(GetID' (int)Controls.CONTROL_TRANSITION);              for (int i = 1; i <= 50; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_TRANSITION' i.ToString());              }                GUIControl.ClearControl(GetID' (int)Controls.CONTROL_KENBURNS_SPEED);              for (int i = 1; i <= 50; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_KENBURNS_SPEED' i.ToString());              }                GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_SPEED' m_iSpeed - 1);              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_TRANSITION' m_iTransistion - 1);              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_KENBURNS_SPEED' m_iKenBurnsSpeed - 1);                if (m_bXFade)              {                cmXfade.Selected = true;              }              if (m_bKenBurns)              {                cmKenburns.Selected = true;              }              if (m_bRandom)              {                cmRandom.Selected = true;              }                return true;            }            case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:            {              SaveSettings();            }            break;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;              if (iControl == (int)Controls.CONTROL_SPEED)              {                string strLabel = message.Label;                m_iSpeed = Int32.Parse(strLabel);              }              if (iControl == (int)Controls.CONTROL_TRANSITION)              {                string strLabel = message.Label;                m_iTransistion = Int32.Parse(strLabel);              }              if (iControl == (int)Controls.CONTROL_KENBURNS_SPEED)              {                string strLabel = message.Label;                m_iKenBurnsSpeed = Int32.Parse(strLabel);              }              if (iControl == cmXfade.GetID)              {                m_bXFade = true;                m_bKenBurns = false;                m_bRandom = false;                UpdateButtons();                return true;              }              if (iControl == cmKenburns.GetID)              {                m_bXFade = false;                m_bKenBurns = true;                m_bRandom = false;                UpdateButtons();                return true;              }              if (iControl == cmRandom.GetID)              {                m_bXFade = false;                m_bKenBurns = false;                m_bRandom = true;                UpdateButtons();                return true;              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsPicturesSlideshow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures_Slideshow.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              LoadSettings();              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_SPEED);              for (int i = 1; i <= 10; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_SPEED' i.ToString());              }                GUIControl.ClearControl(GetID' (int)Controls.CONTROL_TRANSITION);              for (int i = 1; i <= 50; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_TRANSITION' i.ToString());              }                GUIControl.ClearControl(GetID' (int)Controls.CONTROL_KENBURNS_SPEED);              for (int i = 1; i <= 50; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_KENBURNS_SPEED' i.ToString());              }                GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_SPEED' m_iSpeed - 1);              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_TRANSITION' m_iTransistion - 1);              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_KENBURNS_SPEED' m_iKenBurnsSpeed - 1);                if (m_bXFade)              {                cmXfade.Selected = true;              }              if (m_bKenBurns)              {                cmKenburns.Selected = true;              }              if (m_bRandom)              {                cmRandom.Selected = true;              }                return true;            }            case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:            {              SaveSettings();            }            break;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;              if (iControl == (int)Controls.CONTROL_SPEED)              {                string strLabel = message.Label;                m_iSpeed = Int32.Parse(strLabel);              }              if (iControl == (int)Controls.CONTROL_TRANSITION)              {                string strLabel = message.Label;                m_iTransistion = Int32.Parse(strLabel);              }              if (iControl == (int)Controls.CONTROL_KENBURNS_SPEED)              {                string strLabel = message.Label;                m_iKenBurnsSpeed = Int32.Parse(strLabel);              }              if (iControl == cmXfade.GetID)              {                m_bXFade = true;                m_bKenBurns = false;                m_bRandom = false;                UpdateButtons();                return true;              }              if (iControl == cmKenburns.GetID)              {                m_bXFade = false;                m_bKenBurns = true;                m_bRandom = false;                UpdateButtons();                return true;              }              if (iControl == cmRandom.GetID)              {                m_bXFade = false;                m_bKenBurns = false;                m_bRandom = true;                UpdateButtons();                return true;              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsPicturesSlideshow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures_Slideshow.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              LoadSettings();              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_SPEED);              for (int i = 1; i <= 10; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_SPEED' i.ToString());              }                GUIControl.ClearControl(GetID' (int)Controls.CONTROL_TRANSITION);              for (int i = 1; i <= 50; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_TRANSITION' i.ToString());              }                GUIControl.ClearControl(GetID' (int)Controls.CONTROL_KENBURNS_SPEED);              for (int i = 1; i <= 50; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_KENBURNS_SPEED' i.ToString());              }                GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_SPEED' m_iSpeed - 1);              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_TRANSITION' m_iTransistion - 1);              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_KENBURNS_SPEED' m_iKenBurnsSpeed - 1);                if (m_bXFade)              {                cmXfade.Selected = true;              }              if (m_bKenBurns)              {                cmKenburns.Selected = true;              }              if (m_bRandom)              {                cmRandom.Selected = true;              }                return true;            }            case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:            {              SaveSettings();            }            break;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;              if (iControl == (int)Controls.CONTROL_SPEED)              {                string strLabel = message.Label;                m_iSpeed = Int32.Parse(strLabel);              }              if (iControl == (int)Controls.CONTROL_TRANSITION)              {                string strLabel = message.Label;                m_iTransistion = Int32.Parse(strLabel);              }              if (iControl == (int)Controls.CONTROL_KENBURNS_SPEED)              {                string strLabel = message.Label;                m_iKenBurnsSpeed = Int32.Parse(strLabel);              }              if (iControl == cmXfade.GetID)              {                m_bXFade = true;                m_bKenBurns = false;                m_bRandom = false;                UpdateButtons();                return true;              }              if (iControl == cmKenburns.GetID)              {                m_bXFade = false;                m_bKenBurns = true;                m_bRandom = false;                UpdateButtons();                return true;              }              if (iControl == cmRandom.GetID)              {                m_bXFade = false;                m_bKenBurns = false;                m_bRandom = true;                UpdateButtons();                return true;              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,LoadSettings,The following statement contains a magic number: string driveLetter = FolderInfo(item).Folder.Substring(0' 3).ToUpperInvariant();
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,LoadSettings,The following statement contains a magic number: item.Label2 = GUILocalizeStrings.Get(193);
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,LoadSettings,The following statement contains a magic number: driveLetter.StartsWith("\\\\") || Util.Utils.getDriveType(driveLetter) == 3 ||                Util.Utils.getDriveType(driveLetter) == 4
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,LoadSettings,The following statement contains a magic number: driveLetter.StartsWith("\\\\") || Util.Utils.getDriveType(driveLetter) == 3 ||                Util.Utils.getDriveType(driveLetter) == 4
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_FANARTCOUNT);              for (int i = 1; i <= 5; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_FANARTCOUNT' i.ToString());              }                GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_FANARTCOUNT' m_iCount - 1);                return true;            }            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;              if (iControl == (int)Controls.CONTROL_FANARTCOUNT)              {                string strLabel = message.Label;                m_iCount = Int32.Parse(strLabel);              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(101010));
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnClicked,The following statement contains a magic number: dlgOk.SetHeading(GUILocalizeStrings.Get(1020));
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnClicked,The following statement contains a magic number: dlgOk.SetLine(1' GUILocalizeStrings.Get(300004));
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnClicked,The following statement contains a magic number: dlgOk.SetLine(2' GUILocalizeStrings.Get(300005));
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnClicked,The following statement contains a magic number: dlgOk.SetLine(2' GUILocalizeStrings.Get(300005));
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnUpdateGrabberScripts,The following statement contains a magic number: dlgOk.SetHeading(257);
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnUpdateGrabberScripts,The following statement contains a magic number: dlgOk.SetLine(1' GUILocalizeStrings.Get(703));
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnUpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetHeading(GUILocalizeStrings.Get(300030));
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnUpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetLine(1' GUILocalizeStrings.Get(300031));
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnUpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetLine(2' GUILocalizeStrings.Get(300032));
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnUpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetLine(2' GUILocalizeStrings.Get(300032));
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnUpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetPercentage(100);
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnUpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetLine(2' "Downloading...");
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnUpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetPercentage(33);
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnUpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetLine(2' "Downloading...");
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnUpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetPercentage(66);
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnUpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetLine(2' "Downloading...");
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnUpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetPercentage(100);
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnUpdateGrabberScripts,The following statement contains a magic number: dlgOk.SetHeading(257);
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnUpdateGrabberScripts,The following statement contains a magic number: dlgOk.SetLine(1' GUILocalizeStrings.Get(300033));
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnUpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetLine(1' GUILocalizeStrings.Get(300034) + id);
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnUpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetLine(2' GUILocalizeStrings.Get(300035));
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnUpdateGrabberScripts,The following statement contains a magic number: progressDialog.SetLine(2' GUILocalizeStrings.Get(300035));
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnUpdateGrabberScripts,The following statement contains a magic number: percent += 100 / (sectionNodes.Count - 1);
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnSetDefaultGrabber,The following statement contains a magic number: dlgOk.SetHeading(257);
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnSetDefaultGrabber,The following statement contains a magic number: dlgOk.SetLine(1' GUILocalizeStrings.Get(300033));
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnSetDefaultGrabber,The following statement contains a magic number: dlg.SetHeading(300036);
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnSetDefaultGrabber,The following statement contains a magic number: xmlwriter.SetValue("moviedatabase"' "limit" + 0' 25);
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,GetGrabbers,The following statement contains a magic number: progressDialog.SetHeading(GUILocalizeStrings.Get(300037));
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,GetGrabbers,The following statement contains a magic number: percent += 100 / (fileList.Count() - 1);
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnActorsFetchSize,The following statement contains a magic number: dlg.SetHeading(GUILocalizeStrings.Get(496));
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnActorsFetchSize,The following statement contains a magic number: dlg.AddLocalizedString(300209);
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnActorsFetchSize,The following statement contains a magic number: dlg.AddLocalizedString(300210);
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnResetDatabase,The following statement contains a magic number: dlgYesNo.SetHeading(GUILocalizeStrings.Get(927));
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnResetDatabase,The following statement contains a magic number: dlgYesNo.SetLine(1' GUILocalizeStrings.Get(300038));
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnResetDatabase,The following statement contains a magic number: dlgYesNo.SetHeading(GUILocalizeStrings.Get(927));
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnResetDatabase,The following statement contains a magic number: dlgYesNo.SetLine(1' GUILocalizeStrings.Get(300039));
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnResetDatabase,The following statement contains a magic number: dlgNotify.SetHeading(GUILocalizeStrings.Get(1020));
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnResetDatabase,The following statement contains a magic number: dlgNotify.SetText(GUILocalizeStrings.Get(300041));
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnProgress,The following statement contains a magic number: pDlgProgress.SetLine(2' line2);
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnSearchStarting,The following statement contains a magic number: heading = String.Format("{0}:{1}/{2}"' GUILocalizeStrings.Get(197)' _scanningFileNumber' _scanningFileTotal);
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnSearchStarting,The following statement contains a magic number: pDlgProgress.SetLine(2' string.Empty);
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnDetailsStarting,The following statement contains a magic number: heading = String.Format("{0}:{1}/{2}"' GUILocalizeStrings.Get(198)' _scanningFileNumber' _scanningFileTotal);
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnDetailsStarting,The following statement contains a magic number: pDlgProgress.SetLine(2' string.Empty);
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnActorsStarting,The following statement contains a magic number: heading = String.Format("{0}:{1}/{2}"' GUILocalizeStrings.Get(986)' _scanningFileNumber' _scanningFileTotal);
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnActorsStarting,The following statement contains a magic number: pDlgProgress.SetLine(2' string.Empty);
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnActorInfoStarting,The following statement contains a magic number: heading = String.Format("{0}:{1}/{2}"' GUILocalizeStrings.Get(986)' _scanningFileNumber' _scanningFileTotal);
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnActorInfoStarting,The following statement contains a magic number: pDlgProgress.SetLine(2' string.Empty);
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnScanEnd,The following statement contains a magic number: pDlgSelect.SetHeading(892);
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnScanEnd,The following statement contains a magic number: pDlgSelect.SetButtonLabel(4517);
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesOther,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_OtherSettings.cs,LoadSettings,The following statement contains a magic number: _watchedPercentage = xmlreader.GetValueAsInt("movies"' "playedpercentagewatched"' 95);
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesOther,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_OtherSettings.cs,LoadSettings,The following statement contains a magic number: _videoAudioDelay = xmlreader.GetValueAsInt("FFDShow"' "audiodelayInterval"' 50);
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesOther,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_OtherSettings.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              LoadSettings();              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_PLAYEDTIMEPERCENTAGE);              for (int i = 1; i <= 100; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_PLAYEDTIMEPERCENTAGE' i.ToString());              }                GUIControl.ClearControl(GetID' (int)Controls.CONTROL_VIDEOAUDIODELAY);              for (int i = 1; i <= 100; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_VIDEOAUDIODELAY' i.ToString());              }                GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_PLAYEDTIMEPERCENTAGE' _watchedPercentage - 1);              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_VIDEOAUDIODELAY' _videoAudioDelay - 1);                return true;            }            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;              if (iControl == (int)Controls.CONTROL_PLAYEDTIMEPERCENTAGE)              {                string strLabel = message.Label;                _watchedPercentage = Int32.Parse(strLabel);              }              if (iControl == (int)Controls.CONTROL_VIDEOAUDIODELAY)              {                string strLabel = message.Label;                if (Int32.Parse(strLabel) < 10)                {                  GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_VIDEOAUDIODELAY' 9);                  _videoAudioDelay = 10;                  break;                }                _videoAudioDelay = Int32.Parse(strLabel);              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesOther,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_OtherSettings.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              LoadSettings();              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_PLAYEDTIMEPERCENTAGE);              for (int i = 1; i <= 100; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_PLAYEDTIMEPERCENTAGE' i.ToString());              }                GUIControl.ClearControl(GetID' (int)Controls.CONTROL_VIDEOAUDIODELAY);              for (int i = 1; i <= 100; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_VIDEOAUDIODELAY' i.ToString());              }                GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_PLAYEDTIMEPERCENTAGE' _watchedPercentage - 1);              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_VIDEOAUDIODELAY' _videoAudioDelay - 1);                return true;            }            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;              if (iControl == (int)Controls.CONTROL_PLAYEDTIMEPERCENTAGE)              {                string strLabel = message.Label;                _watchedPercentage = Int32.Parse(strLabel);              }              if (iControl == (int)Controls.CONTROL_VIDEOAUDIODELAY)              {                string strLabel = message.Label;                if (Int32.Parse(strLabel) < 10)                {                  GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_VIDEOAUDIODELAY' 9);                  _videoAudioDelay = 10;                  break;                }                _videoAudioDelay = Int32.Parse(strLabel);              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesOther,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_OtherSettings.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              LoadSettings();              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_PLAYEDTIMEPERCENTAGE);              for (int i = 1; i <= 100; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_PLAYEDTIMEPERCENTAGE' i.ToString());              }                GUIControl.ClearControl(GetID' (int)Controls.CONTROL_VIDEOAUDIODELAY);              for (int i = 1; i <= 100; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_VIDEOAUDIODELAY' i.ToString());              }                GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_PLAYEDTIMEPERCENTAGE' _watchedPercentage - 1);              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_VIDEOAUDIODELAY' _videoAudioDelay - 1);                return true;            }            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;              if (iControl == (int)Controls.CONTROL_PLAYEDTIMEPERCENTAGE)              {                string strLabel = message.Label;                _watchedPercentage = Int32.Parse(strLabel);              }              if (iControl == (int)Controls.CONTROL_VIDEOAUDIODELAY)              {                string strLabel = message.Label;                if (Int32.Parse(strLabel) < 10)                {                  GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_VIDEOAUDIODELAY' 9);                  _videoAudioDelay = 10;                  break;                }                _videoAudioDelay = Int32.Parse(strLabel);              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesOther,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_OtherSettings.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              LoadSettings();              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_PLAYEDTIMEPERCENTAGE);              for (int i = 1; i <= 100; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_PLAYEDTIMEPERCENTAGE' i.ToString());              }                GUIControl.ClearControl(GetID' (int)Controls.CONTROL_VIDEOAUDIODELAY);              for (int i = 1; i <= 100; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_VIDEOAUDIODELAY' i.ToString());              }                GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_PLAYEDTIMEPERCENTAGE' _watchedPercentage - 1);              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_VIDEOAUDIODELAY' _videoAudioDelay - 1);                return true;            }            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;              if (iControl == (int)Controls.CONTROL_PLAYEDTIMEPERCENTAGE)              {                string strLabel = message.Label;                _watchedPercentage = Int32.Parse(strLabel);              }              if (iControl == (int)Controls.CONTROL_VIDEOAUDIODELAY)              {                string strLabel = message.Label;                if (Int32.Parse(strLabel) < 10)                {                  GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_VIDEOAUDIODELAY' 9);                  _videoAudioDelay = 10;                  break;                }                _videoAudioDelay = Int32.Parse(strLabel);              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesOther,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_OtherSettings.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              LoadSettings();              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_PLAYEDTIMEPERCENTAGE);              for (int i = 1; i <= 100; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_PLAYEDTIMEPERCENTAGE' i.ToString());              }                GUIControl.ClearControl(GetID' (int)Controls.CONTROL_VIDEOAUDIODELAY);              for (int i = 1; i <= 100; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_VIDEOAUDIODELAY' i.ToString());              }                GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_PLAYEDTIMEPERCENTAGE' _watchedPercentage - 1);              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_VIDEOAUDIODELAY' _videoAudioDelay - 1);                return true;            }            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;              if (iControl == (int)Controls.CONTROL_PLAYEDTIMEPERCENTAGE)              {                string strLabel = message.Label;                _watchedPercentage = Int32.Parse(strLabel);              }              if (iControl == (int)Controls.CONTROL_VIDEOAUDIODELAY)              {                string strLabel = message.Label;                if (Int32.Parse(strLabel) < 10)                {                  GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_VIDEOAUDIODELAY' 9);                  _videoAudioDelay = 10;                  break;                }                _videoAudioDelay = Int32.Parse(strLabel);              }            }            break;        }
Magic Number,MediaPortal.GUI.Settings,GUISettingsMoviesOther,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_OtherSettings.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(101023));
Magic Number,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,BacklightWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_BackLight.cs,BacklightWindow,The following statement contains a magic number: this.GetID = 9001;
Magic Number,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,BacklightWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_BackLight.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(109001));
Magic Number,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,BacklightWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_BackLight.cs,SetBlue,The following statement contains a magic number: i < 256
Magic Number,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,BacklightWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_BackLight.cs,SetGreen,The following statement contains a magic number: i < 256
Magic Number,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,BacklightWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_BackLight.cs,SetRed,The following statement contains a magic number: i < 256
Magic Number,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,DisplayControlWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_ControlWindow.cs,DisplayControlWindow,The following statement contains a magic number: this.GetID = 9002;
Magic Number,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,DisplayControlWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_ControlWindow.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(109002));
Magic Number,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,DisplayControlWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_ControlWindow.cs,SetDisplayActionTime,The following statement contains a magic number: i < 31
Magic Number,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,DisplayControlWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_ControlWindow.cs,SetIdleDelay,The following statement contains a magic number: i < 31
Magic Number,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,EqualizerWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_EqualizerWindow.cs,EqualizerWindow,The following statement contains a magic number: this.GetID = 9004;
Magic Number,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,EqualizerWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_EqualizerWindow.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(109004));
Magic Number,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,EqualizerWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_EqualizerWindow.cs,SaveSettings,The following statement contains a magic number: switch (this.btnUseStyle.SelectedItem)          {            case 0:              this.EQSettings.UseNormalEq = true;              this.EQSettings.UseStereoEq = false;              this.EQSettings.UseVUmeter = false;              this.EQSettings.UseVUmeter2 = false;              break;              case 1:              this.EQSettings.UseNormalEq = false;              this.EQSettings.UseStereoEq = true;              this.EQSettings.UseVUmeter = false;              this.EQSettings.UseVUmeter2 = false;              break;              case 2:              this.EQSettings.UseNormalEq = false;              this.EQSettings.UseStereoEq = false;              this.EQSettings.UseVUmeter = true;              this.EQSettings.UseVUmeter2 = false;              break;              case 3:              this.EQSettings.UseNormalEq = false;              this.EQSettings.UseStereoEq = false;              this.EQSettings.UseVUmeter = false;              this.EQSettings.UseVUmeter2 = true;              break;          }
Magic Number,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,EqualizerWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_EqualizerWindow.cs,SaveSettings,The following statement contains a magic number: switch (this.btnUseStyle.SelectedItem)          {            case 0:              this.EQSettings.UseNormalEq = true;              this.EQSettings.UseStereoEq = false;              this.EQSettings.UseVUmeter = false;              this.EQSettings.UseVUmeter2 = false;              break;              case 1:              this.EQSettings.UseNormalEq = false;              this.EQSettings.UseStereoEq = true;              this.EQSettings.UseVUmeter = false;              this.EQSettings.UseVUmeter2 = false;              break;              case 2:              this.EQSettings.UseNormalEq = false;              this.EQSettings.UseStereoEq = false;              this.EQSettings.UseVUmeter = true;              this.EQSettings.UseVUmeter2 = false;              break;              case 3:              this.EQSettings.UseNormalEq = false;              this.EQSettings.UseStereoEq = false;              this.EQSettings.UseVUmeter = false;              this.EQSettings.UseVUmeter2 = true;              break;          }
Magic Number,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,EqualizerWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_EqualizerWindow.cs,SetDelayStart,The following statement contains a magic number: i < 31
Magic Number,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,EqualizerWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_EqualizerWindow.cs,SetShowTitle,The following statement contains a magic number: i < 31
Magic Number,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,EqualizerWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_EqualizerWindow.cs,SetUseStyle,The following statement contains a magic number: int iItem = this.EQSettings.UseNormalEq                        ? 0                        : (this.EQSettings.UseStereoEq ? 1 : (this.EQSettings.UseVUmeter ? 2 : 3));
Magic Number,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,EqualizerWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_EqualizerWindow.cs,SetUseStyle,The following statement contains a magic number: int iItem = this.EQSettings.UseNormalEq                        ? 0                        : (this.EQSettings.UseStereoEq ? 1 : (this.EQSettings.UseVUmeter ? 2 : 3));
Magic Number,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,EqualizerWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_EqualizerWindow.cs,SetUseStyle,The following statement contains a magic number: GUIControl.AddItemLabelControl(this.GetID' this.btnUseStyle.GetID' GUILocalizeStrings.Get(9149));
Magic Number,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,EqualizerWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_EqualizerWindow.cs,SetUseStyle,The following statement contains a magic number: GUIControl.AddItemLabelControl(this.GetID' this.btnUseStyle.GetID' GUILocalizeStrings.Get(9150));
Magic Number,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,EqualizerWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_EqualizerWindow.cs,SetUseStyle,The following statement contains a magic number: GUIControl.AddItemLabelControl(this.GetID' this.btnUseStyle.GetID' GUILocalizeStrings.Get(9151));
Magic Number,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,EqualizerWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_EqualizerWindow.cs,SetUseStyle,The following statement contains a magic number: GUIControl.AddItemLabelControl(this.GetID' this.btnUseStyle.GetID' GUILocalizeStrings.Get(9152));
Magic Number,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,KeyPadWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_KeyPadWindow.cs,KeyPadWindow,The following statement contains a magic number: this.GetID = 9005;
Magic Number,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,KeyPadWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_KeyPadWindow.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(109005));
Magic Number,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,MainMenuWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_MainMenuWindow.cs,MainMenuWindow,The following statement contains a magic number: this.GetID = 9000;
Magic Number,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,MainMenuWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_MainMenuWindow.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(109000));
Magic Number,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,MainMenuWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_MainMenuWindow.cs,SetBrightness,The following statement contains a magic number: i < 256
Magic Number,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,MainMenuWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_MainMenuWindow.cs,SetContrast,The following statement contains a magic number: i < 256
Magic Number,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,DisplayOptionsWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_OptionsWindow.cs,DisplayOptionsWindow,The following statement contains a magic number: this.GetID = 9003;
Magic Number,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,DisplayOptionsWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_OptionsWindow.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(109003));
Magic Number,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,RemoteWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_RemoteWindow.cs,RemoteWindow,The following statement contains a magic number: this.GetID = 9006;
Magic Number,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,RemoteWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_RemoteWindow.cs,OnPageLoad,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(109006));
Missing Default,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              LoadSettings();              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_PARENTALAGELIMIT);              for (int i = 1; i <= 99; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_PARENTALAGELIMIT' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_PARENTALAGELIMIT' i_ageLimit - 1);                            return true;            }            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;              if (iControl == (int)Controls.CONTROL_PARENTALAGELIMIT)              {                string strLabel = message.Label;                i_ageLimit = Int32.Parse(strLabel);                GUIGraphicsContext.ScrollSpeedHorizontal = i_ageLimit;              }            }            break;        }
Missing Default,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,OnVideo,The following switch statement is missing a default case: switch (dlg.SelectedId)          {            case 6000:              OnVideoCodec();              break;            case 6036:              OnH264VideoCodec();              break;            case 1029:              OnSubtitle();              break;            case 300212:              OnVC1();              break;          }
Missing Default,WindowPlugins.GUISettings.TV,GUISettingsBluRay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\BluRay\GUISettingsBluRay.cs,OnAudio,The following switch statement is missing a default case: switch (dlg.SelectedId)          {            case 6001:              OnAudioCodec();              break;            case 6002:              OnAudioRenderer();              break;            case 492:              OnAudioLanguage();              break;          }
Missing Default,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnVideo,The following switch statement is missing a default case: switch (dlg.SelectedId)          {            case 1198:              OnDVDNavigator();              break;            case 6000:              OnVideoCodec();              break;            case 6004:              OnAspectRatio();              break;            case 1029:              OnSubtitle();              break;          }
Missing Default,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnAudio,The following switch statement is missing a default case: switch (dlg.SelectedId)          {            case 6001:              OnAudioCodec();              break;            case 6002:              OnAudioRenderer();              break;            case 492:              OnAudioLanguage();              break;          }
Missing Default,WindowPlugins.GUISettings.TV,GUISettingsDVD,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\DVD\GUISettingsDVD.cs,OnAspectRatio,The following switch statement is missing a default case: switch (dlg.SelectedId)        {          case 300000:            OnPixelRatioCorrection();            break;          case 300001:            OnAspectRatioCorrectionMode();            break;          case 300002:            OnAspectRatioDisplayMode();            break;          case 300003:            OnAspectRatioZoomMode();            break;        }
Missing Default,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnVideo,The following switch statement is missing a default case: switch (dlg.SelectedId)         {           case 6000:             OnVideoCodec();             break;           case 6036:             OnH264VideoCodec();             break;           case 6004:             OnAspectRatio();             break;           case 1029:             OnSubtitle();             break;           case 300212:             OnVC1();             break;           case 300213:             OnVC1i();             break;           case 300214:             OnDivX();             break;           case 300215:             OnSplitter();             break;           case 300216:             OnSplitterFilesync();             break;         }
Missing Default,WindowPlugins.GUISettings.TV,GUISettingsMovies,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos.cs,OnAudio,The following switch statement is missing a default case: switch (dlg.SelectedId)         {           case 6001:             OnAudioCodec();             break;           case 6039:             OnAACAudioCodec();             break;           case 6002:             OnAudioRenderer();             break;           case 492:             OnAudioLanguage();             break;         }
Missing Default,WindowPlugins.GUISettings,GUISettingsGeneralMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral.cs,OnAutoPlay,The following switch statement is missing a default case: switch (dlg.SelectedId)          {            case 2135: // Audio            case 2134: // Video            case 300006: // Photo              OnPlay(dlg.SelectedId);              break;          }
Missing Default,WindowPlugins.GUISettings,GUISettingsGeneralMain,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral.cs,OnPlay,The following switch statement is missing a default case: switch (dlg.SelectedId)        {          case 208: // Play            strHowToPlay = "Yes";            break;          case 300007: // Do not play            strHowToPlay = "No";            break;          case 300008: // Ask what to do            strHowToPlay = "Ask";            break;        }
Missing Default,WindowPlugins.GUISettings,GUISettingsGeneralMP,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_GeneralMP.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              LoadSettings();                GUIControl.ClearControl(GetID' (int)Controls.CONTROL_DELAYINSEC);                            for (int i = 1; i <= 100; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_DELAYINSEC' i.ToString());              }                GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_DELAYINSEC' _iDelay - 1);                return true;            }            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;              if (iControl == (int)Controls.CONTROL_DELAYINSEC)              {                string strLabel = message.Label;                _iDelay = Int32.Parse(strLabel);                SettingsChanged(true);              }            }            break;        }
Missing Default,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,OnAddItem,The following switch statement is missing a default case: switch (dlg.SelectedId)       {         case 300009:           OnAddName();           break;         case 300010:           OnAddFPS();           break;         case 300011:           OnAddRefreshRate();           break;         case 300012:           OnAddAction();           break;       }
Missing Default,WindowPlugins.GUISettings,GUISettingsGeneralRefreshRate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GeneralMP\GUISettingsGeneral_RefreshRate.cs,OnEditItem,The following switch statement is missing a default case: switch (dlg.SelectedId)       {         case 300009:           OnEditName();           break;         case 300010:           OnEditFPS();           break;         case 300011:           OnEditRefreshRate();           break;         case 300012:           OnEditAction();           break;       }
Missing Default,WindowPlugins.GUISettings,GUISettingsGUIScreenSaver,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_ScreenSaver.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);                for (int i = 1; i <= 10000; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_SCREENSAVER_DELAY' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_SCREENSAVER_DELAY' _screenSaverDelay - 1);            }            return true;              case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;              if (iControl == (int)Controls.CONTROL_SCREENSAVER_DELAY)              {                string strLabel = message.Label;                _screenSaverDelay = Int32.Parse(strLabel);                GUIGraphicsContext.ScrollSpeedHorizontal = _screenSaverDelay;                SettingsChanged(true);              }              break;            }        }
Missing Default,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);                for (int i = 1; i <= 6; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_THUMBNAILS_QUALITY' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_THUMBNAILS_QUALITY' _iQuality - 1);                for (int i = 1; i <= 3; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_THUMBNAILS_COLUMNS' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_THUMBNAILS_COLUMNS' _iColumns - 1);                for (int i = 1; i <= 3; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_THUMBNAILS_ROWS' i.ToString());              }              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_THUMBNAILS_ROWS' _iRows - 1);            }            return true;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;                            if (iControl == (int)Controls.CONTROL_THUMBNAILS_QUALITY)              {                string strLabel = message.Label;                _iQuality = Int32.Parse(strLabel);                GUIGraphicsContext.ScrollSpeedHorizontal = _iQuality;                //settingsChanged = true;                ThumbQualityValueChanged();                SetProperties();              }                if (iControl == (int)Controls.CONTROL_THUMBNAILS_COLUMNS)              {                string strLabel = message.Label;                _iColumns = Int32.Parse(strLabel);                GUIGraphicsContext.ScrollSpeedHorizontal = _iColumns;                //settingsChanged = true;              }                if (iControl == (int)Controls.CONTROL_THUMBNAILS_ROWS)              {                string strLabel = message.Label;                _iRows = Int32.Parse(strLabel);                GUIGraphicsContext.ScrollSpeedHorizontal = _iRows;                //settingsChanged = true;              }                break;            }        }
Missing Default,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,ThumbQualityValueChanged,The following switch statement is missing a default case: switch (_iQuality)        {          case 1:            Thumbs.Quality = Thumbs.ThumbQuality.fastest;            break;          case 2:            Thumbs.Quality = Thumbs.ThumbQuality.fast;            break;          case 3:            Thumbs.Quality = Thumbs.ThumbQuality.average;            break;          case 4:            Thumbs.Quality = Thumbs.ThumbQuality.higher;            break;          case 5:            Thumbs.Quality = Thumbs.ThumbQuality.highest;            break;          case 6:            Thumbs.Quality = Thumbs.ThumbQuality.uhd;            break;        }
Missing Default,WindowPlugins.GUISettings,GUISettingsGUIThumbnails,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_Thumbnails.cs,SetProperties,The following switch statement is missing a default case: switch (_iQuality)        {          case 1:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300015)); // Nearest neighbor            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(231)); //None            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300016)); //Small CRTs            break;          case 2:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(883)); // Low            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300014)); //High speed            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300017)); //Small wide CRTs' medium CRTs            break;          case 3:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(886)); // Default            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300018)); //Large wide CRTs' small LCDs            break;          case 4:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300019)); //Assume Linear            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300021)); //LCDs' Plasmas            break;          case 5:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300023)); //Large LCDs' Plasmas            break;          case 6:            GUIPropertyManager.SetProperty("#thumbResolution"' Convert.ToString((int)Thumbs.ThumbResolution) + " + " +                                          Convert.ToString((int)Thumbs.ThumbLargeResolution));            GUIPropertyManager.SetProperty("#thumbCompositing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbInterpolation"' GUILocalizeStrings.Get(300022)); //High Quality Bicubic            GUIPropertyManager.SetProperty("#thumbSmoothing"' GUILocalizeStrings.Get(300020)); //High Quality            GUIPropertyManager.SetProperty("#thumbScreen"' GUILocalizeStrings.Get(300096)); //UHD TVs' Projectors            break;        }
Missing Default,MediaPortal.GUI.Settings,GUISettingsGUIScreenSetup,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_ScreenSetup.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            {              GUIWindowManager.ShowPreviousWindow();              return;            }        }
Missing Default,MediaPortal.GUI.Settings,GUISettingsGUIScreenSetup,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_ScreenSetup.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              return true;            }            case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT: {}            break;        }
Missing Default,MediaPortal.GUI.Settings,GUISettingsGUI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_ScrollSpeed.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)       {         case Action.ActionType.ACTION_PREVIOUS_MENU:           {             GUIWindowManager.ShowPreviousWindow();             return;           }       }
Missing Default,MediaPortal.GUI.Settings,GUISettingsGUI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_ScrollSpeed.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)       {         case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:           {             base.OnMessage(message);             LoadSettings();             GUISpinControl cntl = (GUISpinControl)GetControl((int)Controls.CONTROL_FPS);             cntl.ShowRange = false;             GUIControl.ClearControl(GetID' (int)Controls.CONTROL_SPEED_HORIZONTAL);             for (int i = 1; i <= 5; ++i)             {               GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_SPEED_HORIZONTAL' i.ToString());             }             GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_SPEED_HORIZONTAL' m_iSpeedHorizontal - 1);              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_SPEED_VERTICAL);             for (int i = 1; i <= 5; ++i)             {               GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_SPEED_VERTICAL' i.ToString());             }             GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_SPEED_VERTICAL' m_iSpeedVertical - 1);              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_FPS);             for (int i = 10; i <= 100; ++i)             {               GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_FPS' i.ToString());             }             GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_FPS' GUIGraphicsContext.MaxFPS - 10);               GUIControl.ClearControl(GetID' (int)Controls.CONTROL_LISTLOOP_DELAY);             for (int i = 1; i <= 10000; ++i)             {               GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_LISTLOOP_DELAY' i.ToString());             }             GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_LISTLOOP_DELAY' m_iListLoopDelay - 1);               ResetExampleLabels();              return true;           }          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:           {             SaveSettings();           }           break;          case GUIMessage.MessageType.GUI_MSG_CLICKED:           {             int iControl = message.SenderControlId;             if (iControl == (int)Controls.CONTROL_SPEED_HORIZONTAL)             {               string strLabel = message.Label;               m_iSpeedHorizontal = Int32.Parse(strLabel);               GUIGraphicsContext.ScrollSpeedHorizontal = m_iSpeedHorizontal;               ResetExampleLabels();             }             if (iControl == (int)Controls.CONTROL_SPEED_VERTICAL)             {               string strLabel = message.Label;               m_iSpeedVertical = Int32.Parse(strLabel);               GUIGraphicsContext.ScrollSpeedVertical = m_iSpeedVertical;               ResetExampleLabels();             }             if (iControl == (int)Controls.CONTROL_FPS)             {               string strLabel = message.Label;               int fps = Int32.Parse(strLabel);               GUIGraphicsContext.MaxFPS = fps;             }             if (iControl == (int)Controls.CONTROL_LISTLOOP_DELAY)             {               string strLabel = message.Label;               m_iListLoopDelay = Int32.Parse(strLabel);               GUIGraphicsContext.ScrollSpeedVertical = m_iListLoopDelay;               ResetExampleLabels();             }           }           break;       }
Missing Default,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)        {          case Action.ActionType.ACTION_SELECT_ITEM:            {              // Cycle modes              // Only 0'1 currently.              if (!m_bModeLocked)              {                m_iMode = 1 - m_iMode;                m_bModeLocked = true;                bChanged = true;              }            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth > iLogWidthMin)                {                  m_iLogWidth -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              else              {                // Offset                if (iXOff > -128)                {                  iXOff -= m_iSpeed;                  bChanged = true;                  m_iCountL++;                  if (m_iCountL > 5)                  {                    m_iSpeed += 1;                    m_iCountL = 1;                  }                }              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogWidth < iLogWidthMax)                {                  m_iLogWidth += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }              else              {                // Offset                if (iXOff < 128)                {                  iXOff += m_iSpeed;                  bChanged = true;                  m_iCountR++;                  if (m_iCountR > 5)                  {                    m_iSpeed += 1;                    m_iCountR = 1;                  }                }              }                m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight > iLogHeightMin)                {                  m_iLogHeight -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              else              {                // Offset                if (iYOff > -128)                {                  iYOff -= m_iSpeed;                  bChanged = true;                  m_iCountU++;                  if (m_iCountU > 5)                  {                    m_iSpeed += 1;                    m_iCountU = 1;                  }                }              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }                if (m_iMode == 1)              {                // Zoom                if (m_iLogHeight < iLogHeightMax)                {                  m_iLogHeight += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              else              {                if (iYOff < 128)                {                  iYOff += m_iSpeed;                  bChanged = true;                  m_iCountD++;                  if (m_iCountD > 5)                  {                    m_iSpeed += 1;                    m_iCountD = 1;                  }                }              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;            }            break;            case Action.ActionType.ACTION_CALIBRATE_RESET:            //if (m_iMode == 1)            //{            m_iLogWidth = GUIGraphicsContext.Width;            m_iLogHeight = GUIGraphicsContext.Height;            //}            //else            //{            iXOff = 0;            iYOff = 0;            //}            bChanged = true;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            break;            case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0 || fY != 0.0)            {              bChanged = true;              if (m_iMode == 1)              {                m_iLogWidth += (int)fX;                m_iLogHeight -= (int)fY;              }              else              {                iXOff += (int)fX;                if (iXOff < -128)                {                  iXOff = -128;                }                if (iXOff > 128)                {                  iXOff = 128;                }                  iYOff -= (int)fY;                if (iYOff < -128)                {                  iYOff = -128;                }                if (iYOff > 128)                {                  iYOff = 128;                }              }            }            break;        }
Missing Default,MediaPortal.GUI.Settings,GUISettingsUICalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_UICalibration.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:            {              GUIWindowManager.OnResize();              GUIWindowManager.PreInit();              GUIGraphicsContext.Save();              if (m_orgZoomVertical != GUIGraphicsContext.ZoomVertical) // only vertical zoom affects font sizes              {                GUIDialogNotify dlgNotify =                  (GUIDialogNotify)GUIWindowManager.GetWindow((int)GUIWindow.Window.WINDOW_DIALOG_NOTIFY);                if (dlgNotify != null)                {                  dlgNotify.Reset();                  dlgNotify.ClearAll();                  dlgNotify.SetHeading(213); // UI Calibration                  dlgNotify.SetText(GUILocalizeStrings.Get(2650)); // Reloading fonts' please wait...                  dlgNotify.TimeOut = 1;                  dlgNotify.DoModal(GUIWindowManager.ActiveWindow);                }                GUIFontManager.LoadFonts(Config.GetFile(Config.Dir.Skin' GUIGraphicsContext.Skin' "fonts.xml"));                GUIFontManager.InitializeDeviceObjects();              }            }            break;            case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              m_iSpeed = 1;              m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;              m_iMode = 0;              m_bModeLocked = true;              m_orgZoomVertical = GUIGraphicsContext.ZoomVertical;              m_iLogWidth = (int)Math.Round((float)GUIGraphicsContext.Width * (float)GUIGraphicsContext.ZoomHorizontal);              m_iLogHeight = (int)Math.Round((float)GUIGraphicsContext.Height * (float)GUIGraphicsContext.ZoomVertical);              ClampLogicalScreenSize();              UpdateControlLabel();              return true;            }        }
Missing Default,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            {              GUIWindowManager.ShowPreviousWindow();              return;            }            case Action.ActionType.ACTION_MOVE_LEFT:            {              if (m_iCountL == 0)              {                m_iSpeed = 1;              }              x -= m_iSpeed;              m_iCountL++;              if (m_iCountL > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountL = 1;              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio -= 0.01f;              }            }            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            {              if (m_iCountR == 0)              {                m_iSpeed = 1;              }              x += m_iSpeed;              m_iCountR++;              if (m_iCountR > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountR = 1;              }              m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio += 0.01f;              }            }            break;            case Action.ActionType.ACTION_MOVE_UP:            {              if (m_iCountU == 0)              {                m_iSpeed = 1;              }              y -= m_iSpeed;              m_iCountU++;              if (m_iCountU > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountU = 1;              }              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio -= 0.05f;              }            }            break;            case Action.ActionType.ACTION_MOVE_DOWN:            {              if (m_iCountD == 0)              {                m_iSpeed = 1;              }              y += m_iSpeed;              m_iCountD++;              if (m_iCountD > 5 && m_iSpeed < 10)              {                m_iSpeed += 1;                m_iCountD = 1;              }              m_iCountU = 0;              m_iCountL = 0;              m_iCountR = 0;              if (m_iControl == (int)Controls.CONTROL_PIXEL_RATIO)              {                fPixelRatio += 0.05f;              }            }            break;            case Action.ActionType.ACTION_CALIBRATE_SWAP_ARROWS:            m_iControl++;            if (m_iControl > (int)Controls.CONTROL_OSD)            {              m_iControl = (int)Controls.CONTROL_TOP_LEFT;            }            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            return;              case Action.ActionType.ACTION_CALIBRATE_RESET:            //GUIGraphicsContext.ResetScreenParameters(m_Res[m_iCurRes]);            GUIGraphicsContext.OverScanLeft = 0;            GUIGraphicsContext.OverScanTop = 0;            GUIGraphicsContext.PixelRatio = 1.0f;            GUIGraphicsContext.OSDOffset = 0;            GUIGraphicsContext.Subtitles = 530;              GUIGraphicsContext.OverScanWidth = GUIGraphicsContext.Width;            GUIGraphicsContext.OverScanHeight = GUIGraphicsContext.Height;            m_iSpeed = 1;            m_iCountU = 0;            m_iCountD = 0;            m_iCountL = 0;            m_iCountR = 0;            GUIWindowManager.ResetAllControls();              return;              case Action.ActionType.ACTION_CHANGE_RESOLUTION:            // choose the next resolution in our list            //m_iCurRes++;            //if (m_iCurRes == m_Res.size())            //  m_iCurRes = 0;            //Sleep(1000);            //GUIGraphicsContext.SetGUIResolution(m_Res[m_iCurRes]);            GUIWindowManager.ResetAllControls();            return;              case Action.ActionType.ACTION_ANALOG_MOVE:            x += (int)(2 * action.fAmount1);            y -= (int)(2 * action.fAmount2);            break;        }
Missing Default,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnAction,The following switch statement is missing a default case: switch (m_iControl)        {          case (int)Controls.CONTROL_TOP_LEFT:            if (x < 0)            {              x = 0;            }            if (y < 0)            {              y = 0;            }            if (x > 128)            {              x = 128;            }            if (y > 128)            {              y = 128;            }            GUIGraphicsContext.OverScanWidth += GUIGraphicsContext.OverScanLeft - x;            GUIGraphicsContext.OverScanHeight += GUIGraphicsContext.OverScanTop - y;            GUIGraphicsContext.OverScanLeft = x;            GUIGraphicsContext.OverScanTop = y;            break;          case (int)Controls.CONTROL_BOTTOM_RIGHT:            if (x > GUIGraphicsContext.Width)            {              x = GUIGraphicsContext.Width;            }            if (y > GUIGraphicsContext.Height)            {              y = GUIGraphicsContext.Height;            }            if (x < GUIGraphicsContext.Width - 128)            {              x = GUIGraphicsContext.Width - 128;            }            if (y < GUIGraphicsContext.Height - 128)            {              y = GUIGraphicsContext.Height - 128;            }            GUIGraphicsContext.OverScanWidth = x - GUIGraphicsContext.OverScanLeft;            GUIGraphicsContext.OverScanHeight = y - GUIGraphicsContext.OverScanTop;            break;          case (int)Controls.CONTROL_SUBTITLES:            if (y > GUIGraphicsContext.Height)            {              y = GUIGraphicsContext.Height;            }            if (y < GUIGraphicsContext.Height - 128)            {              y = GUIGraphicsContext.Height - 128;            }            GUIGraphicsContext.Subtitles = y;            break;          case (int)Controls.CONTROL_OSD:            GUIGraphicsContext.OSDOffset = (y - GUIGraphicsContext.Height);            GUIWindow window = GUIWindowManager.GetWindow((int)Window.WINDOW_OSD);            window.ResetAllControls();            break;          case (int)Controls.CONTROL_PIXEL_RATIO:            GUIGraphicsContext.PixelRatio = fPixelRatio;            break;        }
Missing Default,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:            {              GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT' GetID' 0' 0' 0' 0' null);              //g_application.m_guiWindowOSD.OnMessage(msg);	// Send an init msg to the OSD              GUIGraphicsContext.Save();              GUIGraphicsContext.Calibrating = false;              // reset our screen resolution to what it was initially              //GUIGraphicsContext.SetGUIResolution(g_stSettings.m_ScreenResolution);              // Inform the player so we can update the resolution              //if (g_application.m_pPlayer)              //  g_application.m_pPlayer.Update();	            }            break;            case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              m_iControl = (int)Controls.CONTROL_TOP_LEFT;              m_iSpeed = 1;              m_iCountU = 0;              m_iCountD = 0;              m_iCountL = 0;              m_iCountR = 0;              GUIGraphicsContext.Calibrating = true;              // Inform the player so we can update the resolution                // disable the UI calibration for our controls...              GUIImage pControl = (GUIImage)GetControl((int)Controls.CONTROL_BOTTOM_RIGHT);              if (null != pControl)              {                pControl.CalibrationEnabled = false;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_TOP_LEFT);                pControl.CalibrationEnabled = false;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_SUBTITLES);                pControl.CalibrationEnabled = false;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_PIXEL_RATIO);                pControl.CalibrationEnabled = false;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_OSD);                pControl.CalibrationEnabled = false;                m_fPixelRatioBoxHeight = (float)pControl.Height;              }                GUIMessage msg = new GUIMessage(GUIMessage.MessageType.GUI_MSG_WINDOW_INIT' GetID' 0' 0' 0' 0' null);              GUIWindow window = GUIWindowManager.GetWindow((int)Window.WINDOW_OSD);              window.OnMessage(msg); // Send an init msg to the OSD              return true;            }        }
Missing Default,MediaPortal.GUI.Settings,GUISettingsMovieCalibration,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\General\GUI\GUISettingsGUI_VideoScreenCalibration.cs,Render,The following switch statement is missing a default case: switch (m_iControl)        {          case (int)Controls.CONTROL_TOP_LEFT:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.OverScanTop;              pControl = (GUIImage)GetControl((int)Controls.CONTROL_TOP_LEFT);              if (null != pControl)              {                pControl.IsVisible = true;                pControl.Height = pControl.TextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff' iYOff);              }              string strMode = GUILocalizeStrings.Get(272);              strStatus = String.Format("{0} ({1}'{2})"' strMode' iXOff' iYOff);              GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(276));            }            break;          case (int)Controls.CONTROL_BOTTOM_RIGHT:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.OverScanTop;              iXOff += GUIGraphicsContext.OverScanWidth;              iYOff += GUIGraphicsContext.OverScanHeight;              pControl = (GUIImage)GetControl((int)Controls.CONTROL_BOTTOM_RIGHT);              if (null != pControl)              {                pControl.IsVisible = true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                pControl.Height = iTextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff - iTextureWidth' iYOff - iTextureHeight);                int iXOff1 = GUIGraphicsContext.Width - iXOff;                int iYOff1 = GUIGraphicsContext.Height - iYOff;                string strMode = GUILocalizeStrings.Get(273);                strStatus = String.Format("{0} ({1}'{2})"' strMode' iXOff1' iYOff1);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(276));              }            }            break;          case (int)Controls.CONTROL_SUBTITLES:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.Subtitles;                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_SUBTITLES);              if (null != pControl)              {                pControl.IsVisible = true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                  pControl.Height = pControl.TextureHeight;                pControl.Width = pControl.TextureWidth;                pControl.SetPosition(iXOff + (iScreenWidth - iTextureWidth) / 2' iYOff - iTextureHeight);                string strMode = GUILocalizeStrings.Get(274);                strStatus = String.Format("{0} ({1})"' strMode' iYOff);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(277));              }            }            break;          case (int)Controls.CONTROL_PIXEL_RATIO:            {              float fSqrtRatio = (float)Math.Sqrt(GUIGraphicsContext.PixelRatio);              pControl = (GUIImage)GetControl((int)Controls.CONTROL_PIXEL_RATIO);              if (null != pControl)              {                pControl.IsVisible = true;                int iControlHeight = (int)(m_fPixelRatioBoxHeight * fSqrtRatio);                int iControlWidth = (int)(m_fPixelRatioBoxHeight / fSqrtRatio);                pControl.Width = iControlWidth;                pControl.Height = iControlHeight;                iXOff = GUIGraphicsContext.OverScanLeft;                iYOff = GUIGraphicsContext.OverScanTop;                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                int iScreenHeight = GUIGraphicsContext.OverScanHeight;                pControl.SetPosition(iXOff + (iScreenWidth - iControlWidth) / 2'                                     iYOff + (iScreenHeight - iControlHeight) / 2);                string strMode = GUILocalizeStrings.Get(275);                strStatus = String.Format("{0} ({1:#.##})"' strMode' GUIGraphicsContext.PixelRatio);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(278));              }            }            break;            case (int)Controls.CONTROL_OSD:            {              iXOff = GUIGraphicsContext.OverScanLeft;              iYOff = GUIGraphicsContext.Subtitles;              iYOff = (GUIGraphicsContext.Height + GUIGraphicsContext.OSDOffset);                int iScreenWidth = GUIGraphicsContext.OverScanWidth;                pControl = (GUIImage)GetControl((int)Controls.CONTROL_OSD);              if (null != pControl)              {                //pControl.IsVisible=true;                int iTextureWidth = pControl.TextureWidth;                int iTextureHeight = pControl.TextureHeight;                  pControl.SetPosition(iXOff + (iScreenWidth - iTextureWidth) / 2' iYOff - iTextureHeight);                string strMode = GUILocalizeStrings.Get(469);                strStatus = String.Format("{0} ({1}' Offset={2})"' strMode' iYOff' GUIGraphicsContext.OSDOffset);                GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_LABEL_ROW2' GUILocalizeStrings.Get(468));              }            }            break;        }
Missing Default,MediaPortal.GUI.Settings,GUISettings,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettings.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            {              GUIWindowManager.ShowPreviousWindow();              return;            }        }
Missing Default,MediaPortal.GUI.Settings,GUISettings,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettings.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              _btnMiniDisplay.Visible = MiniDisplayHelper.IsSetupAvailable();              _btnTV.Visible = Util.Utils.UsingTvServer;              return true;            }            case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT: {}            break;        }
Missing Default,MediaPortal.GUI.Settings,GUISettingsExtensions,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_Extensions.cs,OnPageLoad,The following switch statement is missing a default case: switch (_section)        {          case "movies":            module = GUILocalizeStrings.Get(300042); // Videos - File extensions            break;          case "music":            module = GUILocalizeStrings.Get(300043);            break;          case "pictures":            module = GUILocalizeStrings.Get(300044);            break;        }
Missing Default,MediaPortal.GUI.Settings,GUISettingsExtensions,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_Extensions.cs,SaveExtensions,The following switch statement is missing a default case: switch (_section)        {          case "movies":            GUIVideoFiles.ResetExtensions(aExtensions);            break;          case "music":            GUIMusicFiles.ResetExtensions(aExtensions);            break;          case "pictures":            Pictures.GUIPictures.ResetExtensions(aExtensions);            break;        }
Missing Default,MediaPortal.GUI.Settings,GUISettingsPlaylist,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_Playlist.cs,SaveSettings,The following switch statement is missing a default case: switch (_section)          {            case "music":              xmlwriter.SetValue("music"' "playlists"' _musicPlayListFolder);              xmlwriter.SetValueAsBool("musicfiles"' "repeat"' btnMusicrepeatplaylist.Selected);              xmlwriter.SetValueAsBool("musicfiles"' "autoshuffle"' btnMusicautoshuffle.Selected);              xmlwriter.SetValueAsBool("musicfiles"' "savePlaylistOnExit"' btnMusicsavecurrentasdefault.Selected);              xmlwriter.SetValueAsBool("musicfiles"' "resumePlaylistOnMusicEnter"' btnMusicloaddefault.Selected);              xmlwriter.SetValueAsBool("musicfiles"' "playlistIsCurrent"' btnMusicplaylistscreen.Selected );              break;              case "movies":              xmlwriter.SetValue("movies"' "playlists"' _videosPlayListFolder);              xmlwriter.SetValueAsBool("movies"' "repeat"' btnVideosrepeatplaylist.Selected);              break;          }
Missing Default,MediaPortal.GUI.Settings,GUISettingsPlaylist,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_Playlist.cs,OnPageLoad,The following switch statement is missing a default case: switch (_section)        {          case "music":            GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(300045));            break;            case "movies":            GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(300046));            break;        }
Missing Default,MediaPortal.GUI.Settings,GUISettingsPlaylist,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_Playlist.cs,SetProperties,The following switch statement is missing a default case: switch (_section)        {          case "music":            GUIPropertyManager.SetProperty("#playlisttype"' GUILocalizeStrings.Get(300047));            break;            case "movies":            GUIPropertyManager.SetProperty("#playlisttype"' GUILocalizeStrings.Get(300048));            break;        }
Missing Default,MediaPortal.GUI.Settings,GUISettingsPlaylist,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_Playlist.cs,OnAddPath,The following switch statement is missing a default case: switch (_section)          {            case "music":              _musicPlayListFolder = path.Label2;              break;              case "movies":              _videosPlayListFolder = path.Label2;              break;          }
Missing Default,MediaPortal.GUI.Settings,GUISettingsPlaylist,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_Playlist.cs,UpdateControls,The following switch statement is missing a default case: switch (_section)        {          case "music":            btnVideosplaylist.IsVisible = false;            btnVideosrepeatplaylist.IsVisible = false;              btnMusicautoshuffle.IsVisible = true;            btnMusicloaddefault.IsVisible = true;            btnMusicplaylist.IsVisible = true;            btnMusicplaylistscreen.IsVisible = true;            btnMusicrepeatplaylist.IsVisible = true;            btnMusicsavecurrentasdefault.IsVisible = true;              btnMusicplaylist.Focus = true;            btnVideosplaylist.Focus = false;              break;            case "movies":            btnVideosplaylist.IsVisible = true;            btnVideosrepeatplaylist.IsVisible = true;              btnMusicautoshuffle.IsVisible = false;            btnMusicloaddefault.IsVisible = false;            btnMusicplaylist.IsVisible = false;            btnMusicplaylistscreen.IsVisible = false;            btnMusicrepeatplaylist.IsVisible = false;            btnMusicsavecurrentasdefault.IsVisible = false;              btnMusicplaylist.Focus = false;            btnVideosplaylist.Focus = true;              break;        }
Missing Default,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnPageLoad,The following switch statement is missing a default case: switch (_section)        {          case "movies":            module = GUILocalizeStrings.Get(300050);//Videos - Folders            break;          case "music":            module = GUILocalizeStrings.Get(300051); //Music - Folders            break;          case "pictures":            module = GUILocalizeStrings.Get(300052); //Pictures - Folders            break;        }
Missing Default,MediaPortal.GUI.Settings,GUIShareFolders,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettingsCommon_ShareFolders.cs,OnAddEditFolder,The following switch statement is missing a default case: switch (dlg.SelectedId)        {          case 300009:            OnAddName();            break;          case 300058:            _selectedLabelIndex = -1;            OnAddPath();            break;          case 109:            OnThumb();            break;          case 300221:            OnMovieFolder();            break;          //case 1374:          //  OnAddLayout();          //  break;          case 300059:            OnAddPin();            break;        }
Missing Default,MediaPortal.GUI.Settings,SettingsSharesHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettings_SharesHelper.cs,AddStaticShares,The following switch statement is missing a default case: switch (driveType)              {                case DriveType.Removable:                  name = String.Format("({0}:) Removable"' drive.Substring(0' 1).ToUpperInvariant());                  break;                case DriveType.Fixed:                  name = String.Format("({0}:) Fixed"' drive.Substring(0' 1).ToUpperInvariant());                  break;                case DriveType.RemoteDisk:                  name = String.Format("({0}:) Remote"' drive.Substring(0' 1).ToUpperInvariant());                  break;                case DriveType.DVD: // or cd                  name = String.Format("({0}:) CD/DVD"' drive.Substring(0' 1).ToUpperInvariant());                  break;                case DriveType.RamDisk:                  name = String.Format("({0}:) Ram"' drive.Substring(0' 1).ToUpperInvariant());                  break;              }
Missing Default,MediaPortal.GUI.Settings,SettingsSharesHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettings_SharesHelper.cs,LoadSettings,The following switch statement is missing a default case: switch (section)          {            case "movies":              defaultSharePath = Win32API.GetFolderPath(Win32API.CSIDL_MYVIDEO);              break;            case "music":              defaultSharePath = Win32API.GetFolderPath(Win32API.CSIDL_MYMUSIC);              break;            case "pictures":              defaultSharePath = Win32API.GetFolderPath(Win32API.CSIDL_MYPICTURES);              break;          }
Missing Default,MediaPortal.GUI.Settings,SettingsSharesHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettings_SharesHelper.cs,SetDefaultDrives,The following switch statement is missing a default case: switch (section)        {          case "movies":            VirtualDirectory.SetInitialDefaultShares(false' false' false' true);            break;          case "music":            VirtualDirectory.SetInitialDefaultShares(false' true' false' false);            break;          case "pictures":            VirtualDirectory.SetInitialDefaultShares(false' false' true' false);            break;        }
Missing Default,MediaPortal.GUI.Settings,SettingsSharesHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\GUISettings_SharesHelper.cs,SaveSettings,The following switch statement is missing a default case: switch (section)        {          case "movies":            GUIVideoFiles.ResetShares();            break;          case "music":            GUIMusicFiles.ResetShares();            break;          case "pictures":            Pictures.GUIPictures.ResetShares();            break;        }
Missing Default,MediaPortal.GUI.Settings,GUISettingsMusic,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyMusic\GUISettingsMusic.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            {              GUIWindowManager.ShowPreviousWindow();              return;            }        }
Missing Default,MediaPortal.GUI.Settings,GUISettingsPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            {              GUIWindowManager.ShowPreviousWindow();              return;            }        }
Missing Default,MediaPortal.GUI.Settings,GUISettingsPicturesSlideshow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures_Slideshow.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            {              GUIWindowManager.ShowPreviousWindow();              return;            }        }
Missing Default,MediaPortal.GUI.Settings,GUISettingsPicturesSlideshow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyPictures\GUISettingsPictures_Slideshow.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              LoadSettings();              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_SPEED);              for (int i = 1; i <= 10; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_SPEED' i.ToString());              }                GUIControl.ClearControl(GetID' (int)Controls.CONTROL_TRANSITION);              for (int i = 1; i <= 50; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_TRANSITION' i.ToString());              }                GUIControl.ClearControl(GetID' (int)Controls.CONTROL_KENBURNS_SPEED);              for (int i = 1; i <= 50; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_KENBURNS_SPEED' i.ToString());              }                GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_SPEED' m_iSpeed - 1);              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_TRANSITION' m_iTransistion - 1);              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_KENBURNS_SPEED' m_iKenBurnsSpeed - 1);                if (m_bXFade)              {                cmXfade.Selected = true;              }              if (m_bKenBurns)              {                cmKenburns.Selected = true;              }              if (m_bRandom)              {                cmRandom.Selected = true;              }                return true;            }            case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:            {              SaveSettings();            }            break;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;              if (iControl == (int)Controls.CONTROL_SPEED)              {                string strLabel = message.Label;                m_iSpeed = Int32.Parse(strLabel);              }              if (iControl == (int)Controls.CONTROL_TRANSITION)              {                string strLabel = message.Label;                m_iTransistion = Int32.Parse(strLabel);              }              if (iControl == (int)Controls.CONTROL_KENBURNS_SPEED)              {                string strLabel = message.Label;                m_iKenBurnsSpeed = Int32.Parse(strLabel);              }              if (iControl == cmXfade.GetID)              {                m_bXFade = true;                m_bKenBurns = false;                m_bRandom = false;                UpdateButtons();                return true;              }              if (iControl == cmKenburns.GetID)              {                m_bXFade = false;                m_bKenBurns = true;                m_bRandom = false;                UpdateButtons();                return true;              }              if (iControl == cmRandom.GetID)              {                m_bXFade = false;                m_bKenBurns = false;                m_bRandom = true;                UpdateButtons();                return true;              }            }            break;        }
Missing Default,MediaPortal.GUI.Settings,GUISettingsMoviesDatabase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_Database.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_FANARTCOUNT);              for (int i = 1; i <= 5; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_FANARTCOUNT' i.ToString());              }                GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_FANARTCOUNT' m_iCount - 1);                return true;            }            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;              if (iControl == (int)Controls.CONTROL_FANARTCOUNT)              {                string strLabel = message.Label;                m_iCount = Int32.Parse(strLabel);              }            }            break;        }
Missing Default,MediaPortal.GUI.Settings,GUISettingsMoviesOther,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MyVideos\GUISettingsMyVideos_OtherSettings.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              LoadSettings();              GUIControl.ClearControl(GetID' (int)Controls.CONTROL_PLAYEDTIMEPERCENTAGE);              for (int i = 1; i <= 100; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_PLAYEDTIMEPERCENTAGE' i.ToString());              }                GUIControl.ClearControl(GetID' (int)Controls.CONTROL_VIDEOAUDIODELAY);              for (int i = 1; i <= 100; ++i)              {                GUIControl.AddItemLabelControl(GetID' (int)Controls.CONTROL_VIDEOAUDIODELAY' i.ToString());              }                GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_PLAYEDTIMEPERCENTAGE' _watchedPercentage - 1);              GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_VIDEOAUDIODELAY' _videoAudioDelay - 1);                return true;            }            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;              if (iControl == (int)Controls.CONTROL_PLAYEDTIMEPERCENTAGE)              {                string strLabel = message.Label;                _watchedPercentage = Int32.Parse(strLabel);              }              if (iControl == (int)Controls.CONTROL_VIDEOAUDIODELAY)              {                string strLabel = message.Label;                if (Int32.Parse(strLabel) < 10)                {                  GUIControl.SelectItemControl(GetID' (int)Controls.CONTROL_VIDEOAUDIODELAY' 9);                  _videoAudioDelay = 10;                  break;                }                _videoAudioDelay = Int32.Parse(strLabel);              }            }            break;        }
Missing Default,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,DisplayControlWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_ControlWindow.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            LoadSettings();            SetButtons();            break;        }
Missing Default,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,EqualizerWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_EqualizerWindow.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            LoadSettings();            SetButtons();            break;        }
Missing Default,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,EqualizerWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_EqualizerWindow.cs,SaveSettings,The following switch statement is missing a default case: switch (this.btnUseStyle.SelectedItem)          {            case 0:              this.EQSettings.UseNormalEq = true;              this.EQSettings.UseStereoEq = false;              this.EQSettings.UseVUmeter = false;              this.EQSettings.UseVUmeter2 = false;              break;              case 1:              this.EQSettings.UseNormalEq = false;              this.EQSettings.UseStereoEq = true;              this.EQSettings.UseVUmeter = false;              this.EQSettings.UseVUmeter2 = false;              break;              case 2:              this.EQSettings.UseNormalEq = false;              this.EQSettings.UseStereoEq = false;              this.EQSettings.UseVUmeter = true;              this.EQSettings.UseVUmeter2 = false;              break;              case 3:              this.EQSettings.UseNormalEq = false;              this.EQSettings.UseStereoEq = false;              this.EQSettings.UseVUmeter = false;              this.EQSettings.UseVUmeter2 = true;              break;          }
Missing Default,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,KeyPadWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_KeyPadWindow.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            LoadSettings();            SetButtons();            break;        }
Missing Default,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,MainMenuWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_MainMenuWindow.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            SetButtons();            break;        }
Missing Default,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,DisplayOptionsWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_OptionsWindow.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            LoadSettings();            SetButtons();            break;        }
Missing Default,MediaPortal.ProcessPlugins.MiniDisplayPlugin.Setup,RemoteWindow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUISettings\MiniDisplay\GUISettingsMiniDisplay_RemoteWindow.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            LoadSettings();            SetButtons();            break;        }
