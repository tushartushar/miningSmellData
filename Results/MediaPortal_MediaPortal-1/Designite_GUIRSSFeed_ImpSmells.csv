Implementation smell,Namespace,Class,File,Method,Description
Long Method,Rss,RssFeed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssFeed.cs,read,The method has 105 lines of code.
Long Method,Rss,RssReader,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssReader.cs,Read,The method has 574 lines of code.
Long Method,Rss,RssWriter,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssWriter.cs,writeChannel,The method has 184 lines of code.
Long Method,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The method has 171 lines of code.
Long Method,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The method has 151 lines of code.
Long Method,MediaPortal.GUI.RSS,GUIRSSFeed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\GUIRSSFeed.cs,Download,The method has 100 lines of code.
Complex Method,Rss,RssFeed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssFeed.cs,read,Cyclomatic complexity of the method is 8
Complex Method,Rss,RssItemCollection,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssItemCollection.cs,CalculatePubDates,Cyclomatic complexity of the method is 8
Complex Method,Rss,RssWriter,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssWriter.cs,BeginDocument,Cyclomatic complexity of the method is 9
Complex Method,Rss,RssWriter,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssWriter.cs,writeChannel,Cyclomatic complexity of the method is 29
Complex Method,Rss,RssWriter,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssWriter.cs,writeItem,Cyclomatic complexity of the method is 17
Complex Method,MediaPortal.GUI.RSS,GUIRSSFeed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\GUIRSSFeed.cs,OnMessage,Cyclomatic complexity of the method is 11
Complex Method,MediaPortal.GUI.RSS,GUIRSSFeed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\GUIRSSFeed.cs,Download,Cyclomatic complexity of the method is 11
Long Statement,Rss,RssWriter,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssWriter.cs,Write,The length of the statement  "      // NOTE: Standalone items cannot adhere to modules' hence -1 is passed. This may not be the case' however' no examples have been seen where this is legal. " is 154.
Empty Catch Block,Rss,RssWriter,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssWriter.cs,writeItem,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.RSS,GUIRSSFeed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\GUIRSSFeed.cs,DownloadMainStory,The method has an empty catch block.
Magic Number,Rss,RssReader,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssReader.cs,Read,The following statement contains a magic number: switch (reader.NodeType)            {              case XmlNodeType.Element:                {                  if (reader.IsEmptyElement)                  {                    break;                  }                  elementText = new StringBuilder();                    switch (readerName)                  {                    case "item":                      // is this the end of the channel element? (absence of </channel> before <item>)                      if (!wroteChannel)                      {                        wroteChannel = true;                        rssElement = channel; // return RssChannel                        readData = false;                      }                      item = new RssItem(); // create new RssItem                      channel.Items.Add(item);                      break;                    case "source":                      source = new RssSource();                      item.Source = source;                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        switch (reader.Name.ToLowerInvariant())                        {                          case "url":                            try                            {                              source.Url = new Uri(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                        }                      }                      break;                    case "enclosure":                      enclosure = new RssEnclosure();                      item.Enclosure = enclosure;                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        switch (reader.Name.ToLowerInvariant())                        {                          case "url":                            try                            {                              enclosure.Url = new Uri(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                          case "length":                            try                            {                              enclosure.Length = int.Parse(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                          case "type":                            enclosure.Type = reader.Value;                            break;                        }                      }                      break;                    case "guid":                      guid = new RssGuid();                      item.Guid = guid;                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        switch (reader.Name.ToLowerInvariant())                        {                          case "ispermalink":                            try                            {                              guid.PermaLink = bool.Parse(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                        }                      }                      break;                    case "category":                      category = new RssCategory();                      if ((string)xmlNodeStack.Peek() == "channel")                      {                        channel.Categories.Add(category);                      }                      else                      {                        item.Categories.Add(category);                      }                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        switch (reader.Name.ToLowerInvariant())                        {                          case "url":                            goto case "domain";                          case "domain":                            category.Domain = reader.Value;                            break;                        }                      }                      break;                    case "channel":                      channel = new RssChannel();                      textInput = null;                      image = null;                      cloud = null;                      source = null;                      enclosure = null;                      category = null;                      item = null;                      break;                    case "image":                      image = new RssImage();                      channel.Image = image;                      break;                    case "textinput":                      textInput = new RssTextInput();                      channel.TextInput = textInput;                      break;                    case "cloud":                      pushElement = false;                      cloud = new RssCloud();                      channel.Cloud = cloud;                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        switch (reader.Name.ToLowerInvariant())                        {                          case "domain":                            cloud.Domain = reader.Value;                            break;                          case "port":                            try                            {                              cloud.Port = ushort.Parse(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                          case "path":                            cloud.Path = reader.Value;                            break;                          case "registerprocedure":                            cloud.RegisterProcedure = reader.Value;                            break;                          case "protocol":                            switch (reader.Value.ToLowerInvariant())                            {                              case "xml-rpc":                                cloud.Protocol = RssCloudProtocol.XmlRpc;                                break;                              case "soap":                                cloud.Protocol = RssCloudProtocol.Soap;                                break;                              case "http-post":                                cloud.Protocol = RssCloudProtocol.HttpPost;                                break;                              default:                                cloud.Protocol = RssCloudProtocol.Empty;                                break;                            }                            break;                        }                      }                      break;                    case "rss":                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        if (reader.Name.ToLowerInvariant() == "version")                        {                          switch (reader.Value)                          {                            case "0.91":                              rssVersion = RssVersion.RSS091;                              break;                            case "0.92":                              rssVersion = RssVersion.RSS092;                              break;                            case "2.0":                              rssVersion = RssVersion.RSS20;                              break;                            default:                              rssVersion = RssVersion.NotSupported;                              break;                          }                        }                      }                      break;                    case "rdf":                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        if (reader.Name.ToLowerInvariant() == "version")                        {                          switch (reader.Value)                          {                            case "0.90":                              rssVersion = RssVersion.RSS090;                              break;                            case "1.0":                              rssVersion = RssVersion.RSS10;                              break;                            default:                              rssVersion = RssVersion.NotSupported;                              break;                          }                        }                      }                      break;                  }                  if (pushElement)                  {                    xmlNodeStack.Push(readerName);                  }                  break;                }              case XmlNodeType.EndElement:                {                  if (xmlNodeStack.Count == 1)                  {                    break;                  }                  string childElementName = (string)xmlNodeStack.Pop();                  string parentElementName = (string)xmlNodeStack.Peek();                  switch (childElementName) // current element                  {                      // item classes                    case "item":                      rssElement = item;                      readData = false;                      break;                    case "source":                      source.Name = elementText.ToString();                      rssElement = source;                      readData = false;                      break;                    case "enclosure":                      rssElement = enclosure;                      readData = false;                      break;                    case "guid":                      guid.Name = elementText.ToString();                      rssElement = guid;                      readData = false;                      break;                    case "category": // parent is either item or channel                      category.Name = elementText.ToString();                      rssElement = category;                      readData = false;                      break;                      // channel classes                    case "channel":                      if (wroteChannel)                      {                        wroteChannel = false;                      }                      else                      {                        wroteChannel = true;                        rssElement = channel;                        readData = false;                      }                      break;                    case "textinput":                      rssElement = textInput;                      readData = false;                      break;                    case "image":                      rssElement = image;                      readData = false;                      break;                    case "cloud":                      rssElement = cloud;                      readData = false;                      break;                  }                  switch (parentElementName) // parent element                  {                    case "item":                      switch (childElementName)                      {                        case "title":                          item.Title = elementText.ToString();                          break;                        case "link":                          item.Link = new Uri(elementText.ToString());                          break;                        case "description":                          item.Description = elementText.ToString();                          break;                        case "author":                          item.Author = elementText.ToString();                          break;                        case "comments":                          item.Comments = elementText.ToString();                          break;                        case "pubdate":                          try                          {                            item.PubDate = DateTime.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            try                            {                              string tmp = elementText.ToString();                              tmp = tmp.Substring(0' tmp.Length - 5);                              tmp += "GMT";                              item.PubDate = DateTime.Parse(tmp);                            }                            catch                            {                              exceptions.Add(e);                            }                          }                          break;                      }                      break;                    case "channel":                      switch (childElementName)                      {                        case "title":                          channel.Title = elementText.ToString();                          break;                        case "link":                          try                          {                            channel.Link = new Uri(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "description":                          channel.Description = elementText.ToString();                          break;                        case "language":                          channel.Language = elementText.ToString();                          break;                        case "copyright":                          channel.Copyright = elementText.ToString();                          break;                        case "managingeditor":                          channel.ManagingEditor = elementText.ToString();                          break;                        case "webmaster":                          channel.WebMaster = elementText.ToString();                          break;                        case "rating":                          channel.Rating = elementText.ToString();                          break;                        case "pubdate":                          try                          {                            channel.PubDate = DateTime.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "lastbuilddate":                          try                          {                            channel.LastBuildDate = DateTime.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "generator":                          channel.Generator = elementText.ToString();                          break;                        case "docs":                          channel.Docs = elementText.ToString();                          break;                        case "ttl":                          try                          {                            channel.TimeToLive = int.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                      }                      break;                    case "image":                      switch (childElementName)                      {                        case "url":                          try                          {                            image.Url = new Uri(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "title":                          image.Title = elementText.ToString();                          break;                        case "link":                          try                          {                            image.Link = new Uri(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "description":                          image.Description = elementText.ToString();                          break;                        case "width":                          try                          {                            image.Width = Byte.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "height":                          try                          {                            image.Height = Byte.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                      }                      break;                    case "textinput":                      switch (childElementName)                      {                        case "title":                          textInput.Title = elementText.ToString();                          break;                        case "description":                          textInput.Description = elementText.ToString();                          break;                        case "name":                          textInput.Name = elementText.ToString();                          break;                        case "link":                          try                          {                            textInput.Link = new Uri(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                      }                      break;                    case "skipdays":                      if (childElementName == "day")                      {                        switch (elementText.ToString().ToLowerInvariant())                        {                          case "monday":                            channel.SkipDays[0] = true;                            break;                          case "tuesday":                            channel.SkipDays[1] = true;                            break;                          case "wednesday":                            channel.SkipDays[2] = true;                            break;                          case "thursday":                            channel.SkipDays[3] = true;                            break;                          case "friday":                            channel.SkipDays[4] = true;                            break;                          case "saturday":                            channel.SkipDays[5] = true;                            break;                          case "sunday":                            channel.SkipDays[6] = true;                            break;                        }                      }                      break;                    case "skiphours":                      if (childElementName == "hour")                      {                        channel.SkipHours[Byte.Parse(elementText.ToString().ToLowerInvariant())] = true;                      }                      break;                  }                  break;                }              case XmlNodeType.Text:                elementText.Append(reader.Value);                break;              case XmlNodeType.CDATA:                elementText.Append(reader.Value);                break;            }
Magic Number,Rss,RssReader,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssReader.cs,Read,The following statement contains a magic number: switch (reader.NodeType)            {              case XmlNodeType.Element:                {                  if (reader.IsEmptyElement)                  {                    break;                  }                  elementText = new StringBuilder();                    switch (readerName)                  {                    case "item":                      // is this the end of the channel element? (absence of </channel> before <item>)                      if (!wroteChannel)                      {                        wroteChannel = true;                        rssElement = channel; // return RssChannel                        readData = false;                      }                      item = new RssItem(); // create new RssItem                      channel.Items.Add(item);                      break;                    case "source":                      source = new RssSource();                      item.Source = source;                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        switch (reader.Name.ToLowerInvariant())                        {                          case "url":                            try                            {                              source.Url = new Uri(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                        }                      }                      break;                    case "enclosure":                      enclosure = new RssEnclosure();                      item.Enclosure = enclosure;                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        switch (reader.Name.ToLowerInvariant())                        {                          case "url":                            try                            {                              enclosure.Url = new Uri(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                          case "length":                            try                            {                              enclosure.Length = int.Parse(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                          case "type":                            enclosure.Type = reader.Value;                            break;                        }                      }                      break;                    case "guid":                      guid = new RssGuid();                      item.Guid = guid;                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        switch (reader.Name.ToLowerInvariant())                        {                          case "ispermalink":                            try                            {                              guid.PermaLink = bool.Parse(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                        }                      }                      break;                    case "category":                      category = new RssCategory();                      if ((string)xmlNodeStack.Peek() == "channel")                      {                        channel.Categories.Add(category);                      }                      else                      {                        item.Categories.Add(category);                      }                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        switch (reader.Name.ToLowerInvariant())                        {                          case "url":                            goto case "domain";                          case "domain":                            category.Domain = reader.Value;                            break;                        }                      }                      break;                    case "channel":                      channel = new RssChannel();                      textInput = null;                      image = null;                      cloud = null;                      source = null;                      enclosure = null;                      category = null;                      item = null;                      break;                    case "image":                      image = new RssImage();                      channel.Image = image;                      break;                    case "textinput":                      textInput = new RssTextInput();                      channel.TextInput = textInput;                      break;                    case "cloud":                      pushElement = false;                      cloud = new RssCloud();                      channel.Cloud = cloud;                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        switch (reader.Name.ToLowerInvariant())                        {                          case "domain":                            cloud.Domain = reader.Value;                            break;                          case "port":                            try                            {                              cloud.Port = ushort.Parse(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                          case "path":                            cloud.Path = reader.Value;                            break;                          case "registerprocedure":                            cloud.RegisterProcedure = reader.Value;                            break;                          case "protocol":                            switch (reader.Value.ToLowerInvariant())                            {                              case "xml-rpc":                                cloud.Protocol = RssCloudProtocol.XmlRpc;                                break;                              case "soap":                                cloud.Protocol = RssCloudProtocol.Soap;                                break;                              case "http-post":                                cloud.Protocol = RssCloudProtocol.HttpPost;                                break;                              default:                                cloud.Protocol = RssCloudProtocol.Empty;                                break;                            }                            break;                        }                      }                      break;                    case "rss":                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        if (reader.Name.ToLowerInvariant() == "version")                        {                          switch (reader.Value)                          {                            case "0.91":                              rssVersion = RssVersion.RSS091;                              break;                            case "0.92":                              rssVersion = RssVersion.RSS092;                              break;                            case "2.0":                              rssVersion = RssVersion.RSS20;                              break;                            default:                              rssVersion = RssVersion.NotSupported;                              break;                          }                        }                      }                      break;                    case "rdf":                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        if (reader.Name.ToLowerInvariant() == "version")                        {                          switch (reader.Value)                          {                            case "0.90":                              rssVersion = RssVersion.RSS090;                              break;                            case "1.0":                              rssVersion = RssVersion.RSS10;                              break;                            default:                              rssVersion = RssVersion.NotSupported;                              break;                          }                        }                      }                      break;                  }                  if (pushElement)                  {                    xmlNodeStack.Push(readerName);                  }                  break;                }              case XmlNodeType.EndElement:                {                  if (xmlNodeStack.Count == 1)                  {                    break;                  }                  string childElementName = (string)xmlNodeStack.Pop();                  string parentElementName = (string)xmlNodeStack.Peek();                  switch (childElementName) // current element                  {                      // item classes                    case "item":                      rssElement = item;                      readData = false;                      break;                    case "source":                      source.Name = elementText.ToString();                      rssElement = source;                      readData = false;                      break;                    case "enclosure":                      rssElement = enclosure;                      readData = false;                      break;                    case "guid":                      guid.Name = elementText.ToString();                      rssElement = guid;                      readData = false;                      break;                    case "category": // parent is either item or channel                      category.Name = elementText.ToString();                      rssElement = category;                      readData = false;                      break;                      // channel classes                    case "channel":                      if (wroteChannel)                      {                        wroteChannel = false;                      }                      else                      {                        wroteChannel = true;                        rssElement = channel;                        readData = false;                      }                      break;                    case "textinput":                      rssElement = textInput;                      readData = false;                      break;                    case "image":                      rssElement = image;                      readData = false;                      break;                    case "cloud":                      rssElement = cloud;                      readData = false;                      break;                  }                  switch (parentElementName) // parent element                  {                    case "item":                      switch (childElementName)                      {                        case "title":                          item.Title = elementText.ToString();                          break;                        case "link":                          item.Link = new Uri(elementText.ToString());                          break;                        case "description":                          item.Description = elementText.ToString();                          break;                        case "author":                          item.Author = elementText.ToString();                          break;                        case "comments":                          item.Comments = elementText.ToString();                          break;                        case "pubdate":                          try                          {                            item.PubDate = DateTime.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            try                            {                              string tmp = elementText.ToString();                              tmp = tmp.Substring(0' tmp.Length - 5);                              tmp += "GMT";                              item.PubDate = DateTime.Parse(tmp);                            }                            catch                            {                              exceptions.Add(e);                            }                          }                          break;                      }                      break;                    case "channel":                      switch (childElementName)                      {                        case "title":                          channel.Title = elementText.ToString();                          break;                        case "link":                          try                          {                            channel.Link = new Uri(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "description":                          channel.Description = elementText.ToString();                          break;                        case "language":                          channel.Language = elementText.ToString();                          break;                        case "copyright":                          channel.Copyright = elementText.ToString();                          break;                        case "managingeditor":                          channel.ManagingEditor = elementText.ToString();                          break;                        case "webmaster":                          channel.WebMaster = elementText.ToString();                          break;                        case "rating":                          channel.Rating = elementText.ToString();                          break;                        case "pubdate":                          try                          {                            channel.PubDate = DateTime.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "lastbuilddate":                          try                          {                            channel.LastBuildDate = DateTime.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "generator":                          channel.Generator = elementText.ToString();                          break;                        case "docs":                          channel.Docs = elementText.ToString();                          break;                        case "ttl":                          try                          {                            channel.TimeToLive = int.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                      }                      break;                    case "image":                      switch (childElementName)                      {                        case "url":                          try                          {                            image.Url = new Uri(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "title":                          image.Title = elementText.ToString();                          break;                        case "link":                          try                          {                            image.Link = new Uri(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "description":                          image.Description = elementText.ToString();                          break;                        case "width":                          try                          {                            image.Width = Byte.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "height":                          try                          {                            image.Height = Byte.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                      }                      break;                    case "textinput":                      switch (childElementName)                      {                        case "title":                          textInput.Title = elementText.ToString();                          break;                        case "description":                          textInput.Description = elementText.ToString();                          break;                        case "name":                          textInput.Name = elementText.ToString();                          break;                        case "link":                          try                          {                            textInput.Link = new Uri(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                      }                      break;                    case "skipdays":                      if (childElementName == "day")                      {                        switch (elementText.ToString().ToLowerInvariant())                        {                          case "monday":                            channel.SkipDays[0] = true;                            break;                          case "tuesday":                            channel.SkipDays[1] = true;                            break;                          case "wednesday":                            channel.SkipDays[2] = true;                            break;                          case "thursday":                            channel.SkipDays[3] = true;                            break;                          case "friday":                            channel.SkipDays[4] = true;                            break;                          case "saturday":                            channel.SkipDays[5] = true;                            break;                          case "sunday":                            channel.SkipDays[6] = true;                            break;                        }                      }                      break;                    case "skiphours":                      if (childElementName == "hour")                      {                        channel.SkipHours[Byte.Parse(elementText.ToString().ToLowerInvariant())] = true;                      }                      break;                  }                  break;                }              case XmlNodeType.Text:                elementText.Append(reader.Value);                break;              case XmlNodeType.CDATA:                elementText.Append(reader.Value);                break;            }
Magic Number,Rss,RssReader,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssReader.cs,Read,The following statement contains a magic number: switch (reader.NodeType)            {              case XmlNodeType.Element:                {                  if (reader.IsEmptyElement)                  {                    break;                  }                  elementText = new StringBuilder();                    switch (readerName)                  {                    case "item":                      // is this the end of the channel element? (absence of </channel> before <item>)                      if (!wroteChannel)                      {                        wroteChannel = true;                        rssElement = channel; // return RssChannel                        readData = false;                      }                      item = new RssItem(); // create new RssItem                      channel.Items.Add(item);                      break;                    case "source":                      source = new RssSource();                      item.Source = source;                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        switch (reader.Name.ToLowerInvariant())                        {                          case "url":                            try                            {                              source.Url = new Uri(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                        }                      }                      break;                    case "enclosure":                      enclosure = new RssEnclosure();                      item.Enclosure = enclosure;                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        switch (reader.Name.ToLowerInvariant())                        {                          case "url":                            try                            {                              enclosure.Url = new Uri(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                          case "length":                            try                            {                              enclosure.Length = int.Parse(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                          case "type":                            enclosure.Type = reader.Value;                            break;                        }                      }                      break;                    case "guid":                      guid = new RssGuid();                      item.Guid = guid;                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        switch (reader.Name.ToLowerInvariant())                        {                          case "ispermalink":                            try                            {                              guid.PermaLink = bool.Parse(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                        }                      }                      break;                    case "category":                      category = new RssCategory();                      if ((string)xmlNodeStack.Peek() == "channel")                      {                        channel.Categories.Add(category);                      }                      else                      {                        item.Categories.Add(category);                      }                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        switch (reader.Name.ToLowerInvariant())                        {                          case "url":                            goto case "domain";                          case "domain":                            category.Domain = reader.Value;                            break;                        }                      }                      break;                    case "channel":                      channel = new RssChannel();                      textInput = null;                      image = null;                      cloud = null;                      source = null;                      enclosure = null;                      category = null;                      item = null;                      break;                    case "image":                      image = new RssImage();                      channel.Image = image;                      break;                    case "textinput":                      textInput = new RssTextInput();                      channel.TextInput = textInput;                      break;                    case "cloud":                      pushElement = false;                      cloud = new RssCloud();                      channel.Cloud = cloud;                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        switch (reader.Name.ToLowerInvariant())                        {                          case "domain":                            cloud.Domain = reader.Value;                            break;                          case "port":                            try                            {                              cloud.Port = ushort.Parse(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                          case "path":                            cloud.Path = reader.Value;                            break;                          case "registerprocedure":                            cloud.RegisterProcedure = reader.Value;                            break;                          case "protocol":                            switch (reader.Value.ToLowerInvariant())                            {                              case "xml-rpc":                                cloud.Protocol = RssCloudProtocol.XmlRpc;                                break;                              case "soap":                                cloud.Protocol = RssCloudProtocol.Soap;                                break;                              case "http-post":                                cloud.Protocol = RssCloudProtocol.HttpPost;                                break;                              default:                                cloud.Protocol = RssCloudProtocol.Empty;                                break;                            }                            break;                        }                      }                      break;                    case "rss":                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        if (reader.Name.ToLowerInvariant() == "version")                        {                          switch (reader.Value)                          {                            case "0.91":                              rssVersion = RssVersion.RSS091;                              break;                            case "0.92":                              rssVersion = RssVersion.RSS092;                              break;                            case "2.0":                              rssVersion = RssVersion.RSS20;                              break;                            default:                              rssVersion = RssVersion.NotSupported;                              break;                          }                        }                      }                      break;                    case "rdf":                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        if (reader.Name.ToLowerInvariant() == "version")                        {                          switch (reader.Value)                          {                            case "0.90":                              rssVersion = RssVersion.RSS090;                              break;                            case "1.0":                              rssVersion = RssVersion.RSS10;                              break;                            default:                              rssVersion = RssVersion.NotSupported;                              break;                          }                        }                      }                      break;                  }                  if (pushElement)                  {                    xmlNodeStack.Push(readerName);                  }                  break;                }              case XmlNodeType.EndElement:                {                  if (xmlNodeStack.Count == 1)                  {                    break;                  }                  string childElementName = (string)xmlNodeStack.Pop();                  string parentElementName = (string)xmlNodeStack.Peek();                  switch (childElementName) // current element                  {                      // item classes                    case "item":                      rssElement = item;                      readData = false;                      break;                    case "source":                      source.Name = elementText.ToString();                      rssElement = source;                      readData = false;                      break;                    case "enclosure":                      rssElement = enclosure;                      readData = false;                      break;                    case "guid":                      guid.Name = elementText.ToString();                      rssElement = guid;                      readData = false;                      break;                    case "category": // parent is either item or channel                      category.Name = elementText.ToString();                      rssElement = category;                      readData = false;                      break;                      // channel classes                    case "channel":                      if (wroteChannel)                      {                        wroteChannel = false;                      }                      else                      {                        wroteChannel = true;                        rssElement = channel;                        readData = false;                      }                      break;                    case "textinput":                      rssElement = textInput;                      readData = false;                      break;                    case "image":                      rssElement = image;                      readData = false;                      break;                    case "cloud":                      rssElement = cloud;                      readData = false;                      break;                  }                  switch (parentElementName) // parent element                  {                    case "item":                      switch (childElementName)                      {                        case "title":                          item.Title = elementText.ToString();                          break;                        case "link":                          item.Link = new Uri(elementText.ToString());                          break;                        case "description":                          item.Description = elementText.ToString();                          break;                        case "author":                          item.Author = elementText.ToString();                          break;                        case "comments":                          item.Comments = elementText.ToString();                          break;                        case "pubdate":                          try                          {                            item.PubDate = DateTime.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            try                            {                              string tmp = elementText.ToString();                              tmp = tmp.Substring(0' tmp.Length - 5);                              tmp += "GMT";                              item.PubDate = DateTime.Parse(tmp);                            }                            catch                            {                              exceptions.Add(e);                            }                          }                          break;                      }                      break;                    case "channel":                      switch (childElementName)                      {                        case "title":                          channel.Title = elementText.ToString();                          break;                        case "link":                          try                          {                            channel.Link = new Uri(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "description":                          channel.Description = elementText.ToString();                          break;                        case "language":                          channel.Language = elementText.ToString();                          break;                        case "copyright":                          channel.Copyright = elementText.ToString();                          break;                        case "managingeditor":                          channel.ManagingEditor = elementText.ToString();                          break;                        case "webmaster":                          channel.WebMaster = elementText.ToString();                          break;                        case "rating":                          channel.Rating = elementText.ToString();                          break;                        case "pubdate":                          try                          {                            channel.PubDate = DateTime.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "lastbuilddate":                          try                          {                            channel.LastBuildDate = DateTime.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "generator":                          channel.Generator = elementText.ToString();                          break;                        case "docs":                          channel.Docs = elementText.ToString();                          break;                        case "ttl":                          try                          {                            channel.TimeToLive = int.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                      }                      break;                    case "image":                      switch (childElementName)                      {                        case "url":                          try                          {                            image.Url = new Uri(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "title":                          image.Title = elementText.ToString();                          break;                        case "link":                          try                          {                            image.Link = new Uri(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "description":                          image.Description = elementText.ToString();                          break;                        case "width":                          try                          {                            image.Width = Byte.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "height":                          try                          {                            image.Height = Byte.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                      }                      break;                    case "textinput":                      switch (childElementName)                      {                        case "title":                          textInput.Title = elementText.ToString();                          break;                        case "description":                          textInput.Description = elementText.ToString();                          break;                        case "name":                          textInput.Name = elementText.ToString();                          break;                        case "link":                          try                          {                            textInput.Link = new Uri(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                      }                      break;                    case "skipdays":                      if (childElementName == "day")                      {                        switch (elementText.ToString().ToLowerInvariant())                        {                          case "monday":                            channel.SkipDays[0] = true;                            break;                          case "tuesday":                            channel.SkipDays[1] = true;                            break;                          case "wednesday":                            channel.SkipDays[2] = true;                            break;                          case "thursday":                            channel.SkipDays[3] = true;                            break;                          case "friday":                            channel.SkipDays[4] = true;                            break;                          case "saturday":                            channel.SkipDays[5] = true;                            break;                          case "sunday":                            channel.SkipDays[6] = true;                            break;                        }                      }                      break;                    case "skiphours":                      if (childElementName == "hour")                      {                        channel.SkipHours[Byte.Parse(elementText.ToString().ToLowerInvariant())] = true;                      }                      break;                  }                  break;                }              case XmlNodeType.Text:                elementText.Append(reader.Value);                break;              case XmlNodeType.CDATA:                elementText.Append(reader.Value);                break;            }
Magic Number,Rss,RssReader,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssReader.cs,Read,The following statement contains a magic number: switch (reader.NodeType)            {              case XmlNodeType.Element:                {                  if (reader.IsEmptyElement)                  {                    break;                  }                  elementText = new StringBuilder();                    switch (readerName)                  {                    case "item":                      // is this the end of the channel element? (absence of </channel> before <item>)                      if (!wroteChannel)                      {                        wroteChannel = true;                        rssElement = channel; // return RssChannel                        readData = false;                      }                      item = new RssItem(); // create new RssItem                      channel.Items.Add(item);                      break;                    case "source":                      source = new RssSource();                      item.Source = source;                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        switch (reader.Name.ToLowerInvariant())                        {                          case "url":                            try                            {                              source.Url = new Uri(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                        }                      }                      break;                    case "enclosure":                      enclosure = new RssEnclosure();                      item.Enclosure = enclosure;                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        switch (reader.Name.ToLowerInvariant())                        {                          case "url":                            try                            {                              enclosure.Url = new Uri(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                          case "length":                            try                            {                              enclosure.Length = int.Parse(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                          case "type":                            enclosure.Type = reader.Value;                            break;                        }                      }                      break;                    case "guid":                      guid = new RssGuid();                      item.Guid = guid;                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        switch (reader.Name.ToLowerInvariant())                        {                          case "ispermalink":                            try                            {                              guid.PermaLink = bool.Parse(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                        }                      }                      break;                    case "category":                      category = new RssCategory();                      if ((string)xmlNodeStack.Peek() == "channel")                      {                        channel.Categories.Add(category);                      }                      else                      {                        item.Categories.Add(category);                      }                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        switch (reader.Name.ToLowerInvariant())                        {                          case "url":                            goto case "domain";                          case "domain":                            category.Domain = reader.Value;                            break;                        }                      }                      break;                    case "channel":                      channel = new RssChannel();                      textInput = null;                      image = null;                      cloud = null;                      source = null;                      enclosure = null;                      category = null;                      item = null;                      break;                    case "image":                      image = new RssImage();                      channel.Image = image;                      break;                    case "textinput":                      textInput = new RssTextInput();                      channel.TextInput = textInput;                      break;                    case "cloud":                      pushElement = false;                      cloud = new RssCloud();                      channel.Cloud = cloud;                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        switch (reader.Name.ToLowerInvariant())                        {                          case "domain":                            cloud.Domain = reader.Value;                            break;                          case "port":                            try                            {                              cloud.Port = ushort.Parse(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                          case "path":                            cloud.Path = reader.Value;                            break;                          case "registerprocedure":                            cloud.RegisterProcedure = reader.Value;                            break;                          case "protocol":                            switch (reader.Value.ToLowerInvariant())                            {                              case "xml-rpc":                                cloud.Protocol = RssCloudProtocol.XmlRpc;                                break;                              case "soap":                                cloud.Protocol = RssCloudProtocol.Soap;                                break;                              case "http-post":                                cloud.Protocol = RssCloudProtocol.HttpPost;                                break;                              default:                                cloud.Protocol = RssCloudProtocol.Empty;                                break;                            }                            break;                        }                      }                      break;                    case "rss":                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        if (reader.Name.ToLowerInvariant() == "version")                        {                          switch (reader.Value)                          {                            case "0.91":                              rssVersion = RssVersion.RSS091;                              break;                            case "0.92":                              rssVersion = RssVersion.RSS092;                              break;                            case "2.0":                              rssVersion = RssVersion.RSS20;                              break;                            default:                              rssVersion = RssVersion.NotSupported;                              break;                          }                        }                      }                      break;                    case "rdf":                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        if (reader.Name.ToLowerInvariant() == "version")                        {                          switch (reader.Value)                          {                            case "0.90":                              rssVersion = RssVersion.RSS090;                              break;                            case "1.0":                              rssVersion = RssVersion.RSS10;                              break;                            default:                              rssVersion = RssVersion.NotSupported;                              break;                          }                        }                      }                      break;                  }                  if (pushElement)                  {                    xmlNodeStack.Push(readerName);                  }                  break;                }              case XmlNodeType.EndElement:                {                  if (xmlNodeStack.Count == 1)                  {                    break;                  }                  string childElementName = (string)xmlNodeStack.Pop();                  string parentElementName = (string)xmlNodeStack.Peek();                  switch (childElementName) // current element                  {                      // item classes                    case "item":                      rssElement = item;                      readData = false;                      break;                    case "source":                      source.Name = elementText.ToString();                      rssElement = source;                      readData = false;                      break;                    case "enclosure":                      rssElement = enclosure;                      readData = false;                      break;                    case "guid":                      guid.Name = elementText.ToString();                      rssElement = guid;                      readData = false;                      break;                    case "category": // parent is either item or channel                      category.Name = elementText.ToString();                      rssElement = category;                      readData = false;                      break;                      // channel classes                    case "channel":                      if (wroteChannel)                      {                        wroteChannel = false;                      }                      else                      {                        wroteChannel = true;                        rssElement = channel;                        readData = false;                      }                      break;                    case "textinput":                      rssElement = textInput;                      readData = false;                      break;                    case "image":                      rssElement = image;                      readData = false;                      break;                    case "cloud":                      rssElement = cloud;                      readData = false;                      break;                  }                  switch (parentElementName) // parent element                  {                    case "item":                      switch (childElementName)                      {                        case "title":                          item.Title = elementText.ToString();                          break;                        case "link":                          item.Link = new Uri(elementText.ToString());                          break;                        case "description":                          item.Description = elementText.ToString();                          break;                        case "author":                          item.Author = elementText.ToString();                          break;                        case "comments":                          item.Comments = elementText.ToString();                          break;                        case "pubdate":                          try                          {                            item.PubDate = DateTime.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            try                            {                              string tmp = elementText.ToString();                              tmp = tmp.Substring(0' tmp.Length - 5);                              tmp += "GMT";                              item.PubDate = DateTime.Parse(tmp);                            }                            catch                            {                              exceptions.Add(e);                            }                          }                          break;                      }                      break;                    case "channel":                      switch (childElementName)                      {                        case "title":                          channel.Title = elementText.ToString();                          break;                        case "link":                          try                          {                            channel.Link = new Uri(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "description":                          channel.Description = elementText.ToString();                          break;                        case "language":                          channel.Language = elementText.ToString();                          break;                        case "copyright":                          channel.Copyright = elementText.ToString();                          break;                        case "managingeditor":                          channel.ManagingEditor = elementText.ToString();                          break;                        case "webmaster":                          channel.WebMaster = elementText.ToString();                          break;                        case "rating":                          channel.Rating = elementText.ToString();                          break;                        case "pubdate":                          try                          {                            channel.PubDate = DateTime.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "lastbuilddate":                          try                          {                            channel.LastBuildDate = DateTime.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "generator":                          channel.Generator = elementText.ToString();                          break;                        case "docs":                          channel.Docs = elementText.ToString();                          break;                        case "ttl":                          try                          {                            channel.TimeToLive = int.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                      }                      break;                    case "image":                      switch (childElementName)                      {                        case "url":                          try                          {                            image.Url = new Uri(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "title":                          image.Title = elementText.ToString();                          break;                        case "link":                          try                          {                            image.Link = new Uri(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "description":                          image.Description = elementText.ToString();                          break;                        case "width":                          try                          {                            image.Width = Byte.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "height":                          try                          {                            image.Height = Byte.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                      }                      break;                    case "textinput":                      switch (childElementName)                      {                        case "title":                          textInput.Title = elementText.ToString();                          break;                        case "description":                          textInput.Description = elementText.ToString();                          break;                        case "name":                          textInput.Name = elementText.ToString();                          break;                        case "link":                          try                          {                            textInput.Link = new Uri(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                      }                      break;                    case "skipdays":                      if (childElementName == "day")                      {                        switch (elementText.ToString().ToLowerInvariant())                        {                          case "monday":                            channel.SkipDays[0] = true;                            break;                          case "tuesday":                            channel.SkipDays[1] = true;                            break;                          case "wednesday":                            channel.SkipDays[2] = true;                            break;                          case "thursday":                            channel.SkipDays[3] = true;                            break;                          case "friday":                            channel.SkipDays[4] = true;                            break;                          case "saturday":                            channel.SkipDays[5] = true;                            break;                          case "sunday":                            channel.SkipDays[6] = true;                            break;                        }                      }                      break;                    case "skiphours":                      if (childElementName == "hour")                      {                        channel.SkipHours[Byte.Parse(elementText.ToString().ToLowerInvariant())] = true;                      }                      break;                  }                  break;                }              case XmlNodeType.Text:                elementText.Append(reader.Value);                break;              case XmlNodeType.CDATA:                elementText.Append(reader.Value);                break;            }
Magic Number,Rss,RssReader,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssReader.cs,Read,The following statement contains a magic number: switch (reader.NodeType)            {              case XmlNodeType.Element:                {                  if (reader.IsEmptyElement)                  {                    break;                  }                  elementText = new StringBuilder();                    switch (readerName)                  {                    case "item":                      // is this the end of the channel element? (absence of </channel> before <item>)                      if (!wroteChannel)                      {                        wroteChannel = true;                        rssElement = channel; // return RssChannel                        readData = false;                      }                      item = new RssItem(); // create new RssItem                      channel.Items.Add(item);                      break;                    case "source":                      source = new RssSource();                      item.Source = source;                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        switch (reader.Name.ToLowerInvariant())                        {                          case "url":                            try                            {                              source.Url = new Uri(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                        }                      }                      break;                    case "enclosure":                      enclosure = new RssEnclosure();                      item.Enclosure = enclosure;                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        switch (reader.Name.ToLowerInvariant())                        {                          case "url":                            try                            {                              enclosure.Url = new Uri(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                          case "length":                            try                            {                              enclosure.Length = int.Parse(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                          case "type":                            enclosure.Type = reader.Value;                            break;                        }                      }                      break;                    case "guid":                      guid = new RssGuid();                      item.Guid = guid;                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        switch (reader.Name.ToLowerInvariant())                        {                          case "ispermalink":                            try                            {                              guid.PermaLink = bool.Parse(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                        }                      }                      break;                    case "category":                      category = new RssCategory();                      if ((string)xmlNodeStack.Peek() == "channel")                      {                        channel.Categories.Add(category);                      }                      else                      {                        item.Categories.Add(category);                      }                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        switch (reader.Name.ToLowerInvariant())                        {                          case "url":                            goto case "domain";                          case "domain":                            category.Domain = reader.Value;                            break;                        }                      }                      break;                    case "channel":                      channel = new RssChannel();                      textInput = null;                      image = null;                      cloud = null;                      source = null;                      enclosure = null;                      category = null;                      item = null;                      break;                    case "image":                      image = new RssImage();                      channel.Image = image;                      break;                    case "textinput":                      textInput = new RssTextInput();                      channel.TextInput = textInput;                      break;                    case "cloud":                      pushElement = false;                      cloud = new RssCloud();                      channel.Cloud = cloud;                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        switch (reader.Name.ToLowerInvariant())                        {                          case "domain":                            cloud.Domain = reader.Value;                            break;                          case "port":                            try                            {                              cloud.Port = ushort.Parse(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                          case "path":                            cloud.Path = reader.Value;                            break;                          case "registerprocedure":                            cloud.RegisterProcedure = reader.Value;                            break;                          case "protocol":                            switch (reader.Value.ToLowerInvariant())                            {                              case "xml-rpc":                                cloud.Protocol = RssCloudProtocol.XmlRpc;                                break;                              case "soap":                                cloud.Protocol = RssCloudProtocol.Soap;                                break;                              case "http-post":                                cloud.Protocol = RssCloudProtocol.HttpPost;                                break;                              default:                                cloud.Protocol = RssCloudProtocol.Empty;                                break;                            }                            break;                        }                      }                      break;                    case "rss":                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        if (reader.Name.ToLowerInvariant() == "version")                        {                          switch (reader.Value)                          {                            case "0.91":                              rssVersion = RssVersion.RSS091;                              break;                            case "0.92":                              rssVersion = RssVersion.RSS092;                              break;                            case "2.0":                              rssVersion = RssVersion.RSS20;                              break;                            default:                              rssVersion = RssVersion.NotSupported;                              break;                          }                        }                      }                      break;                    case "rdf":                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        if (reader.Name.ToLowerInvariant() == "version")                        {                          switch (reader.Value)                          {                            case "0.90":                              rssVersion = RssVersion.RSS090;                              break;                            case "1.0":                              rssVersion = RssVersion.RSS10;                              break;                            default:                              rssVersion = RssVersion.NotSupported;                              break;                          }                        }                      }                      break;                  }                  if (pushElement)                  {                    xmlNodeStack.Push(readerName);                  }                  break;                }              case XmlNodeType.EndElement:                {                  if (xmlNodeStack.Count == 1)                  {                    break;                  }                  string childElementName = (string)xmlNodeStack.Pop();                  string parentElementName = (string)xmlNodeStack.Peek();                  switch (childElementName) // current element                  {                      // item classes                    case "item":                      rssElement = item;                      readData = false;                      break;                    case "source":                      source.Name = elementText.ToString();                      rssElement = source;                      readData = false;                      break;                    case "enclosure":                      rssElement = enclosure;                      readData = false;                      break;                    case "guid":                      guid.Name = elementText.ToString();                      rssElement = guid;                      readData = false;                      break;                    case "category": // parent is either item or channel                      category.Name = elementText.ToString();                      rssElement = category;                      readData = false;                      break;                      // channel classes                    case "channel":                      if (wroteChannel)                      {                        wroteChannel = false;                      }                      else                      {                        wroteChannel = true;                        rssElement = channel;                        readData = false;                      }                      break;                    case "textinput":                      rssElement = textInput;                      readData = false;                      break;                    case "image":                      rssElement = image;                      readData = false;                      break;                    case "cloud":                      rssElement = cloud;                      readData = false;                      break;                  }                  switch (parentElementName) // parent element                  {                    case "item":                      switch (childElementName)                      {                        case "title":                          item.Title = elementText.ToString();                          break;                        case "link":                          item.Link = new Uri(elementText.ToString());                          break;                        case "description":                          item.Description = elementText.ToString();                          break;                        case "author":                          item.Author = elementText.ToString();                          break;                        case "comments":                          item.Comments = elementText.ToString();                          break;                        case "pubdate":                          try                          {                            item.PubDate = DateTime.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            try                            {                              string tmp = elementText.ToString();                              tmp = tmp.Substring(0' tmp.Length - 5);                              tmp += "GMT";                              item.PubDate = DateTime.Parse(tmp);                            }                            catch                            {                              exceptions.Add(e);                            }                          }                          break;                      }                      break;                    case "channel":                      switch (childElementName)                      {                        case "title":                          channel.Title = elementText.ToString();                          break;                        case "link":                          try                          {                            channel.Link = new Uri(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "description":                          channel.Description = elementText.ToString();                          break;                        case "language":                          channel.Language = elementText.ToString();                          break;                        case "copyright":                          channel.Copyright = elementText.ToString();                          break;                        case "managingeditor":                          channel.ManagingEditor = elementText.ToString();                          break;                        case "webmaster":                          channel.WebMaster = elementText.ToString();                          break;                        case "rating":                          channel.Rating = elementText.ToString();                          break;                        case "pubdate":                          try                          {                            channel.PubDate = DateTime.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "lastbuilddate":                          try                          {                            channel.LastBuildDate = DateTime.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "generator":                          channel.Generator = elementText.ToString();                          break;                        case "docs":                          channel.Docs = elementText.ToString();                          break;                        case "ttl":                          try                          {                            channel.TimeToLive = int.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                      }                      break;                    case "image":                      switch (childElementName)                      {                        case "url":                          try                          {                            image.Url = new Uri(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "title":                          image.Title = elementText.ToString();                          break;                        case "link":                          try                          {                            image.Link = new Uri(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "description":                          image.Description = elementText.ToString();                          break;                        case "width":                          try                          {                            image.Width = Byte.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "height":                          try                          {                            image.Height = Byte.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                      }                      break;                    case "textinput":                      switch (childElementName)                      {                        case "title":                          textInput.Title = elementText.ToString();                          break;                        case "description":                          textInput.Description = elementText.ToString();                          break;                        case "name":                          textInput.Name = elementText.ToString();                          break;                        case "link":                          try                          {                            textInput.Link = new Uri(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                      }                      break;                    case "skipdays":                      if (childElementName == "day")                      {                        switch (elementText.ToString().ToLowerInvariant())                        {                          case "monday":                            channel.SkipDays[0] = true;                            break;                          case "tuesday":                            channel.SkipDays[1] = true;                            break;                          case "wednesday":                            channel.SkipDays[2] = true;                            break;                          case "thursday":                            channel.SkipDays[3] = true;                            break;                          case "friday":                            channel.SkipDays[4] = true;                            break;                          case "saturday":                            channel.SkipDays[5] = true;                            break;                          case "sunday":                            channel.SkipDays[6] = true;                            break;                        }                      }                      break;                    case "skiphours":                      if (childElementName == "hour")                      {                        channel.SkipHours[Byte.Parse(elementText.ToString().ToLowerInvariant())] = true;                      }                      break;                  }                  break;                }              case XmlNodeType.Text:                elementText.Append(reader.Value);                break;              case XmlNodeType.CDATA:                elementText.Append(reader.Value);                break;            }
Magic Number,Rss,RssReader,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssReader.cs,Read,The following statement contains a magic number: switch (reader.NodeType)            {              case XmlNodeType.Element:                {                  if (reader.IsEmptyElement)                  {                    break;                  }                  elementText = new StringBuilder();                    switch (readerName)                  {                    case "item":                      // is this the end of the channel element? (absence of </channel> before <item>)                      if (!wroteChannel)                      {                        wroteChannel = true;                        rssElement = channel; // return RssChannel                        readData = false;                      }                      item = new RssItem(); // create new RssItem                      channel.Items.Add(item);                      break;                    case "source":                      source = new RssSource();                      item.Source = source;                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        switch (reader.Name.ToLowerInvariant())                        {                          case "url":                            try                            {                              source.Url = new Uri(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                        }                      }                      break;                    case "enclosure":                      enclosure = new RssEnclosure();                      item.Enclosure = enclosure;                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        switch (reader.Name.ToLowerInvariant())                        {                          case "url":                            try                            {                              enclosure.Url = new Uri(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                          case "length":                            try                            {                              enclosure.Length = int.Parse(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                          case "type":                            enclosure.Type = reader.Value;                            break;                        }                      }                      break;                    case "guid":                      guid = new RssGuid();                      item.Guid = guid;                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        switch (reader.Name.ToLowerInvariant())                        {                          case "ispermalink":                            try                            {                              guid.PermaLink = bool.Parse(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                        }                      }                      break;                    case "category":                      category = new RssCategory();                      if ((string)xmlNodeStack.Peek() == "channel")                      {                        channel.Categories.Add(category);                      }                      else                      {                        item.Categories.Add(category);                      }                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        switch (reader.Name.ToLowerInvariant())                        {                          case "url":                            goto case "domain";                          case "domain":                            category.Domain = reader.Value;                            break;                        }                      }                      break;                    case "channel":                      channel = new RssChannel();                      textInput = null;                      image = null;                      cloud = null;                      source = null;                      enclosure = null;                      category = null;                      item = null;                      break;                    case "image":                      image = new RssImage();                      channel.Image = image;                      break;                    case "textinput":                      textInput = new RssTextInput();                      channel.TextInput = textInput;                      break;                    case "cloud":                      pushElement = false;                      cloud = new RssCloud();                      channel.Cloud = cloud;                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        switch (reader.Name.ToLowerInvariant())                        {                          case "domain":                            cloud.Domain = reader.Value;                            break;                          case "port":                            try                            {                              cloud.Port = ushort.Parse(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                          case "path":                            cloud.Path = reader.Value;                            break;                          case "registerprocedure":                            cloud.RegisterProcedure = reader.Value;                            break;                          case "protocol":                            switch (reader.Value.ToLowerInvariant())                            {                              case "xml-rpc":                                cloud.Protocol = RssCloudProtocol.XmlRpc;                                break;                              case "soap":                                cloud.Protocol = RssCloudProtocol.Soap;                                break;                              case "http-post":                                cloud.Protocol = RssCloudProtocol.HttpPost;                                break;                              default:                                cloud.Protocol = RssCloudProtocol.Empty;                                break;                            }                            break;                        }                      }                      break;                    case "rss":                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        if (reader.Name.ToLowerInvariant() == "version")                        {                          switch (reader.Value)                          {                            case "0.91":                              rssVersion = RssVersion.RSS091;                              break;                            case "0.92":                              rssVersion = RssVersion.RSS092;                              break;                            case "2.0":                              rssVersion = RssVersion.RSS20;                              break;                            default:                              rssVersion = RssVersion.NotSupported;                              break;                          }                        }                      }                      break;                    case "rdf":                      for (int i = 0; i < reader.AttributeCount; i++)                      {                        reader.MoveToAttribute(i);                        if (reader.Name.ToLowerInvariant() == "version")                        {                          switch (reader.Value)                          {                            case "0.90":                              rssVersion = RssVersion.RSS090;                              break;                            case "1.0":                              rssVersion = RssVersion.RSS10;                              break;                            default:                              rssVersion = RssVersion.NotSupported;                              break;                          }                        }                      }                      break;                  }                  if (pushElement)                  {                    xmlNodeStack.Push(readerName);                  }                  break;                }              case XmlNodeType.EndElement:                {                  if (xmlNodeStack.Count == 1)                  {                    break;                  }                  string childElementName = (string)xmlNodeStack.Pop();                  string parentElementName = (string)xmlNodeStack.Peek();                  switch (childElementName) // current element                  {                      // item classes                    case "item":                      rssElement = item;                      readData = false;                      break;                    case "source":                      source.Name = elementText.ToString();                      rssElement = source;                      readData = false;                      break;                    case "enclosure":                      rssElement = enclosure;                      readData = false;                      break;                    case "guid":                      guid.Name = elementText.ToString();                      rssElement = guid;                      readData = false;                      break;                    case "category": // parent is either item or channel                      category.Name = elementText.ToString();                      rssElement = category;                      readData = false;                      break;                      // channel classes                    case "channel":                      if (wroteChannel)                      {                        wroteChannel = false;                      }                      else                      {                        wroteChannel = true;                        rssElement = channel;                        readData = false;                      }                      break;                    case "textinput":                      rssElement = textInput;                      readData = false;                      break;                    case "image":                      rssElement = image;                      readData = false;                      break;                    case "cloud":                      rssElement = cloud;                      readData = false;                      break;                  }                  switch (parentElementName) // parent element                  {                    case "item":                      switch (childElementName)                      {                        case "title":                          item.Title = elementText.ToString();                          break;                        case "link":                          item.Link = new Uri(elementText.ToString());                          break;                        case "description":                          item.Description = elementText.ToString();                          break;                        case "author":                          item.Author = elementText.ToString();                          break;                        case "comments":                          item.Comments = elementText.ToString();                          break;                        case "pubdate":                          try                          {                            item.PubDate = DateTime.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            try                            {                              string tmp = elementText.ToString();                              tmp = tmp.Substring(0' tmp.Length - 5);                              tmp += "GMT";                              item.PubDate = DateTime.Parse(tmp);                            }                            catch                            {                              exceptions.Add(e);                            }                          }                          break;                      }                      break;                    case "channel":                      switch (childElementName)                      {                        case "title":                          channel.Title = elementText.ToString();                          break;                        case "link":                          try                          {                            channel.Link = new Uri(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "description":                          channel.Description = elementText.ToString();                          break;                        case "language":                          channel.Language = elementText.ToString();                          break;                        case "copyright":                          channel.Copyright = elementText.ToString();                          break;                        case "managingeditor":                          channel.ManagingEditor = elementText.ToString();                          break;                        case "webmaster":                          channel.WebMaster = elementText.ToString();                          break;                        case "rating":                          channel.Rating = elementText.ToString();                          break;                        case "pubdate":                          try                          {                            channel.PubDate = DateTime.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "lastbuilddate":                          try                          {                            channel.LastBuildDate = DateTime.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "generator":                          channel.Generator = elementText.ToString();                          break;                        case "docs":                          channel.Docs = elementText.ToString();                          break;                        case "ttl":                          try                          {                            channel.TimeToLive = int.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                      }                      break;                    case "image":                      switch (childElementName)                      {                        case "url":                          try                          {                            image.Url = new Uri(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "title":                          image.Title = elementText.ToString();                          break;                        case "link":                          try                          {                            image.Link = new Uri(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "description":                          image.Description = elementText.ToString();                          break;                        case "width":                          try                          {                            image.Width = Byte.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "height":                          try                          {                            image.Height = Byte.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                      }                      break;                    case "textinput":                      switch (childElementName)                      {                        case "title":                          textInput.Title = elementText.ToString();                          break;                        case "description":                          textInput.Description = elementText.ToString();                          break;                        case "name":                          textInput.Name = elementText.ToString();                          break;                        case "link":                          try                          {                            textInput.Link = new Uri(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                      }                      break;                    case "skipdays":                      if (childElementName == "day")                      {                        switch (elementText.ToString().ToLowerInvariant())                        {                          case "monday":                            channel.SkipDays[0] = true;                            break;                          case "tuesday":                            channel.SkipDays[1] = true;                            break;                          case "wednesday":                            channel.SkipDays[2] = true;                            break;                          case "thursday":                            channel.SkipDays[3] = true;                            break;                          case "friday":                            channel.SkipDays[4] = true;                            break;                          case "saturday":                            channel.SkipDays[5] = true;                            break;                          case "sunday":                            channel.SkipDays[6] = true;                            break;                        }                      }                      break;                    case "skiphours":                      if (childElementName == "hour")                      {                        channel.SkipHours[Byte.Parse(elementText.ToString().ToLowerInvariant())] = true;                      }                      break;                  }                  break;                }              case XmlNodeType.Text:                elementText.Append(reader.Value);                break;              case XmlNodeType.CDATA:                elementText.Append(reader.Value);                break;            }
Magic Number,Rss,RssWriter,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssWriter.cs,writeChannel,The following statement contains a magic number: switch (rssVersion)        {          case RssVersion.RSS091:          case RssVersion.RSS092:          case RssVersion.RSS20:            WriteElement("language"' channel.Language' rssVersion == RssVersion.RSS091);            WriteElement("copyright"' channel.Copyright' false);            WriteElement("managingEditor"' channel.ManagingEditor' false);            WriteElement("webMaster"' channel.WebMaster' false);            WriteElement("pubDate"' channel.PubDate' false);            WriteElement("lastBuildDate"' channel.LastBuildDate' false);            if (channel.Docs != RssDefault.String)            {              WriteElement("docs"' channel.Docs' false);            }            else            {              switch (rssVersion)              {                case RssVersion.RSS091:                  WriteElement("docs"' "http://my.netscape.com/publish/formats/rss-spec-0.91.html"' false);                  break;                case RssVersion.RSS092:                  WriteElement("docs"' "http://backend.userland.com/rss092"' false);                  break;                case RssVersion.RSS20:                  WriteElement("docs"' "http://backend.userland.com/rss"' false);                  break;              }            }            WriteElement("rating"' channel.Rating' false);            string[] Days = {"monday"' "tuesday"' "wednesday"' "thursday"' "friday"' "saturday"' "sunday"};            for (int i = 0; i <= 6; i++)            {              if (channel.SkipDays[i])              {                writer.WriteStartElement("skipDays");                for (int i2 = 0; i2 <= 6; i2++)                {                  if (channel.SkipDays[i2])                  {                    WriteElement("day"' Days[i2]' false);                  }                }                writer.WriteEndElement();                break;              }            }            for (int i = 0; i <= 23; i++)            {              if (channel.SkipHours[i])              {                writer.WriteStartElement("skipHours");                for (int i2 = 0; i2 <= 23; i2++)                {                  if (channel.SkipHours[i2])                  {                    WriteElement("hour"' i2 + 1' false);                  }                }                writer.WriteEndElement();                break;              }            }            break;        }
Magic Number,Rss,RssWriter,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssWriter.cs,writeChannel,The following statement contains a magic number: switch (rssVersion)        {          case RssVersion.RSS091:          case RssVersion.RSS092:          case RssVersion.RSS20:            WriteElement("language"' channel.Language' rssVersion == RssVersion.RSS091);            WriteElement("copyright"' channel.Copyright' false);            WriteElement("managingEditor"' channel.ManagingEditor' false);            WriteElement("webMaster"' channel.WebMaster' false);            WriteElement("pubDate"' channel.PubDate' false);            WriteElement("lastBuildDate"' channel.LastBuildDate' false);            if (channel.Docs != RssDefault.String)            {              WriteElement("docs"' channel.Docs' false);            }            else            {              switch (rssVersion)              {                case RssVersion.RSS091:                  WriteElement("docs"' "http://my.netscape.com/publish/formats/rss-spec-0.91.html"' false);                  break;                case RssVersion.RSS092:                  WriteElement("docs"' "http://backend.userland.com/rss092"' false);                  break;                case RssVersion.RSS20:                  WriteElement("docs"' "http://backend.userland.com/rss"' false);                  break;              }            }            WriteElement("rating"' channel.Rating' false);            string[] Days = {"monday"' "tuesday"' "wednesday"' "thursday"' "friday"' "saturday"' "sunday"};            for (int i = 0; i <= 6; i++)            {              if (channel.SkipDays[i])              {                writer.WriteStartElement("skipDays");                for (int i2 = 0; i2 <= 6; i2++)                {                  if (channel.SkipDays[i2])                  {                    WriteElement("day"' Days[i2]' false);                  }                }                writer.WriteEndElement();                break;              }            }            for (int i = 0; i <= 23; i++)            {              if (channel.SkipHours[i])              {                writer.WriteStartElement("skipHours");                for (int i2 = 0; i2 <= 23; i2++)                {                  if (channel.SkipHours[i2])                  {                    WriteElement("hour"' i2 + 1' false);                  }                }                writer.WriteEndElement();                break;              }            }            break;        }
Magic Number,Rss,RssWriter,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssWriter.cs,writeChannel,The following statement contains a magic number: switch (rssVersion)        {          case RssVersion.RSS091:          case RssVersion.RSS092:          case RssVersion.RSS20:            WriteElement("language"' channel.Language' rssVersion == RssVersion.RSS091);            WriteElement("copyright"' channel.Copyright' false);            WriteElement("managingEditor"' channel.ManagingEditor' false);            WriteElement("webMaster"' channel.WebMaster' false);            WriteElement("pubDate"' channel.PubDate' false);            WriteElement("lastBuildDate"' channel.LastBuildDate' false);            if (channel.Docs != RssDefault.String)            {              WriteElement("docs"' channel.Docs' false);            }            else            {              switch (rssVersion)              {                case RssVersion.RSS091:                  WriteElement("docs"' "http://my.netscape.com/publish/formats/rss-spec-0.91.html"' false);                  break;                case RssVersion.RSS092:                  WriteElement("docs"' "http://backend.userland.com/rss092"' false);                  break;                case RssVersion.RSS20:                  WriteElement("docs"' "http://backend.userland.com/rss"' false);                  break;              }            }            WriteElement("rating"' channel.Rating' false);            string[] Days = {"monday"' "tuesday"' "wednesday"' "thursday"' "friday"' "saturday"' "sunday"};            for (int i = 0; i <= 6; i++)            {              if (channel.SkipDays[i])              {                writer.WriteStartElement("skipDays");                for (int i2 = 0; i2 <= 6; i2++)                {                  if (channel.SkipDays[i2])                  {                    WriteElement("day"' Days[i2]' false);                  }                }                writer.WriteEndElement();                break;              }            }            for (int i = 0; i <= 23; i++)            {              if (channel.SkipHours[i])              {                writer.WriteStartElement("skipHours");                for (int i2 = 0; i2 <= 23; i2++)                {                  if (channel.SkipHours[i2])                  {                    WriteElement("hour"' i2 + 1' false);                  }                }                writer.WriteEndElement();                break;              }            }            break;        }
Magic Number,Rss,RssWriter,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssWriter.cs,writeChannel,The following statement contains a magic number: switch (rssVersion)        {          case RssVersion.RSS091:          case RssVersion.RSS092:          case RssVersion.RSS20:            WriteElement("language"' channel.Language' rssVersion == RssVersion.RSS091);            WriteElement("copyright"' channel.Copyright' false);            WriteElement("managingEditor"' channel.ManagingEditor' false);            WriteElement("webMaster"' channel.WebMaster' false);            WriteElement("pubDate"' channel.PubDate' false);            WriteElement("lastBuildDate"' channel.LastBuildDate' false);            if (channel.Docs != RssDefault.String)            {              WriteElement("docs"' channel.Docs' false);            }            else            {              switch (rssVersion)              {                case RssVersion.RSS091:                  WriteElement("docs"' "http://my.netscape.com/publish/formats/rss-spec-0.91.html"' false);                  break;                case RssVersion.RSS092:                  WriteElement("docs"' "http://backend.userland.com/rss092"' false);                  break;                case RssVersion.RSS20:                  WriteElement("docs"' "http://backend.userland.com/rss"' false);                  break;              }            }            WriteElement("rating"' channel.Rating' false);            string[] Days = {"monday"' "tuesday"' "wednesday"' "thursday"' "friday"' "saturday"' "sunday"};            for (int i = 0; i <= 6; i++)            {              if (channel.SkipDays[i])              {                writer.WriteStartElement("skipDays");                for (int i2 = 0; i2 <= 6; i2++)                {                  if (channel.SkipDays[i2])                  {                    WriteElement("day"' Days[i2]' false);                  }                }                writer.WriteEndElement();                break;              }            }            for (int i = 0; i <= 23; i++)            {              if (channel.SkipHours[i])              {                writer.WriteStartElement("skipHours");                for (int i2 = 0; i2 <= 23; i2++)                {                  if (channel.SkipHours[i2])                  {                    WriteElement("hour"' i2 + 1' false);                  }                }                writer.WriteEndElement();                break;              }            }            break;        }
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxURL.Location = new Point(80' 58);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxURL.Location = new Point(80' 58);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxURL.Size = new Size(396' 20);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxURL.Size = new Size(396' 20);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxURL.TabIndex = 4;
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.textEncoding.Location = new Point(80' 93);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.textEncoding.Location = new Point(80' 93);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.textEncoding.Size = new Size(136' 20);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.textEncoding.Size = new Size(136' 20);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.textEncoding.TabIndex = 6;
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonSave.Location = new Point(320' 180);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonSave.Location = new Point(320' 180);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonSave.Size = new Size(75' 23);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonSave.Size = new Size(75' 23);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonSave.TabIndex = 7;
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.textDescription.Location = new Point(340' 24);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.textDescription.Location = new Point(340' 24);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.textDescription.Size = new Size(136' 20);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.textDescription.Size = new Size(136' 20);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.textDescription.TabIndex = 5;
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Location = new Point(401' 180);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Location = new Point(401' 180);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Size = new Size(75' 23);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Size = new Size(75' 23);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.TabIndex = 8;
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new Point(12' 61);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new Point(12' 61);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new Size(54' 13);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new Size(54' 13);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.textImage.Location = new Point(80' 128);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.textImage.Location = new Point(80' 128);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.textImage.Size = new Size(315' 20);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.textImage.Size = new Size(315' 20);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.textImage.TabIndex = 9;
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonBrowse.Location = new Point(401' 126);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonBrowse.Location = new Point(401' 126);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonBrowse.Size = new Size(75' 23);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonBrowse.Size = new Size(75' 23);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonBrowse.TabIndex = 10;
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelFeedName.Location = new Point(12' 27);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelFeedName.Location = new Point(12' 27);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelFeedName.Size = new Size(60' 13);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelFeedName.Size = new Size(60' 13);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelThumbnail.Location = new Point(12' 131);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelThumbnail.Location = new Point(12' 131);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelThumbnail.Size = new Size(56' 13);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelThumbnail.Size = new Size(56' 13);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelThumbnail.TabIndex = 8;
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.textName.Location = new Point(80' 24);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.textName.Location = new Point(80' 24);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.textName.Size = new Size(136' 20);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.textName.Size = new Size(136' 20);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.textName.TabIndex = 3;
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelDescription.Location = new Point(253' 27);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelDescription.Location = new Point(253' 27);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelDescription.Size = new Size(81' 13);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelDescription.Size = new Size(81' 13);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelDescription.TabIndex = 2;
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelEncoding.Location = new Point(12' 96);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelEncoding.Location = new Point(12' 96);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelEncoding.Size = new Size(52' 13);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelEncoding.Size = new Size(52' 13);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new SizeF(6F' 13F);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new SizeF(6F' 13F);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new Size(488' 215);
Magic Number,GUIRSSFeed,DetailsForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\DetailsForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new Size(488' 215);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,editSite,The following statement contains a magic number: i < 100
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,deleteSite,The following statement contains a magic number: i < 100
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,PopulateFields,The following statement contains a magic number: i < 100
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,GetHome,The following statement contains a magic number: strButtonText = GUILocalizeStrings.Get(9);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonDelete.Location = new Point(368' 185);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonDelete.Location = new Point(368' 185);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonDelete.Size = new Size(88' 23);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonDelete.Size = new Size(88' 23);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonDelete.TabIndex = 3;
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonEdit.Location = new Point(274' 185);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonEdit.Location = new Point(274' 185);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonEdit.Size = new Size(88' 23);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonEdit.Size = new Size(88' 23);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonEdit.TabIndex = 2;
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.listBox.Location = new Point(6' 19);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.listBox.Location = new Point(6' 19);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.listBox.Size = new Size(450' 147);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.listBox.Size = new Size(450' 147);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.listBox.TabIndex = 5;
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonAdd.Location = new Point(180' 185);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonAdd.Location = new Point(180' 185);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonAdd.Size = new Size(88' 23);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonAdd.Size = new Size(88' 23);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.button3.Location = new Point(402' 279);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.button3.Location = new Point(402' 279);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.button3.Size = new Size(72' 22);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.button3.Size = new Size(72' 22);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.button3.TabIndex = 12;
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.checkAutoRefresh.Location = new Point(6' 19);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.checkAutoRefresh.Location = new Point(6' 19);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.checkAutoRefresh.Size = new Size(122' 17);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.checkAutoRefresh.Size = new Size(122' 17);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.checkAutoRefresh.TabIndex = 4;
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.labelRefresh.Location = new Point(21' 43);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.labelRefresh.Location = new Point(21' 43);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.labelRefresh.Size = new Size(109' 13);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.labelRefresh.Size = new Size(109' 13);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.labelRefresh.TabIndex = 13;
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.textRefreshInterval.Location = new Point(142' 40);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.textRefreshInterval.Location = new Point(142' 40);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.textRefreshInterval.Size = new Size(53' 20);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.textRefreshInterval.Size = new Size(53' 20);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.textRefreshInterval.TabIndex = 14;
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox1.Location = new Point(12' 11);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox1.Location = new Point(12' 11);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox1.Size = new Size(462' 213);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox1.Size = new Size(462' 213);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox1.TabIndex = 15;
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox2.Location = new Point(12' 230);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox2.Location = new Point(12' 230);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox2.Size = new Size(215' 71);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox2.Size = new Size(215' 71);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.mpGroupBox2.TabIndex = 16;
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new SizeF(6F' 13F);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new SizeF(6F' 13F);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new Size(486' 313);
Magic Number,GUIRSSFeed,SetupForm,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\SetupForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new Size(486' 313);
Magic Number,MediaPortal.GUI.RSS,GUIRSSFeed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\GUIRSSFeed.cs,OnSelectFeed,The following statement contains a magic number: dlg.SetHeading(496);
Magic Number,MediaPortal.GUI.RSS,GUIRSSFeed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\GUIRSSFeed.cs,UpdateNews,The following statement contains a magic number: dlgProgress.SetHeading(704);
Magic Number,MediaPortal.GUI.RSS,GUIRSSFeed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\GUIRSSFeed.cs,UpdateNews,The following statement contains a magic number: dlgProgress.SetLine(1' GUILocalizeStrings.Get(705) + " " + m_strSiteName);
Magic Number,MediaPortal.GUI.RSS,GUIRSSFeed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\GUIRSSFeed.cs,UpdateNews,The following statement contains a magic number: dlgProgress.SetLine(2' "");
Magic Number,MediaPortal.GUI.RSS,GUIRSSFeed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\GUIRSSFeed.cs,UpdateNews,The following statement contains a magic number: dlgProgress.SetLine(3' "");
Magic Number,MediaPortal.GUI.RSS,GUIRSSFeed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\GUIRSSFeed.cs,UpdateNews,The following statement contains a magic number: Thread.Sleep((int)(1000 - (endTime - startTime)));
Magic Number,MediaPortal.GUI.RSS,GUIRSSFeed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\GUIRSSFeed.cs,UpdateNews,The following statement contains a magic number: endTime - startTime < 1000
Magic Number,MediaPortal.GUI.RSS,GUIRSSFeed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\GUIRSSFeed.cs,LoadSettings,The following statement contains a magic number: m_iRSSRefresh = xmlreader.GetValueAsInt("rss"' "iRefreshTime"' 15);
Magic Number,MediaPortal.GUI.RSS,GUIRSSFeed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\GUIRSSFeed.cs,UpdateButtons,The following statement contains a magic number: GUIControl.SetControlLabel(GetID' (int)Controls.CONTROL_BTNREFRESH' GUILocalizeStrings.Get(184));
Magic Number,MediaPortal.GUI.RSS,GUIRSSFeed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\GUIRSSFeed.cs,UpdateButtons,The following statement contains a magic number: GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(9) + @"/" + m_strSiteName);
Missing Default,Rss,RssFeed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssFeed.cs,read,The following switch statement is missing a default case: switch (uri.Scheme)        {          case "file":            feed.lastModified = File.GetLastWriteTime(uri.LocalPath);            if ((oldFeed != null) && (feed.LastModified == oldFeed.LastModified))            {              oldFeed.cached = true;              return oldFeed;            }            stream = new FileStream(uri.LocalPath' FileMode.Open' FileAccess.Read' FileShare.ReadWrite);            break;          case "https":            goto case "http";          case "http":            if (request == null)            {              request = (HttpWebRequest)WebRequest.Create(uri);              try              {                // Use the current user in case an NTLM Proxy or similar is used.                // request.Proxy = WebProxy.GetDefaultProxy();                request.Proxy.Credentials = CredentialCache.DefaultCredentials;              }              catch (Exception e)              {                Log.Error(e);              }            }            if (oldFeed != null)            {              request.IfModifiedSince = oldFeed.LastModified;              request.Headers.Add("If-None-Match"' oldFeed.ETag);            }            try            {              HttpWebResponse response = (HttpWebResponse)request.GetResponse();              feed.lastModified = response.LastModified;              feed.etag = response.Headers["ETag"];              try              {                if (response.ContentEncoding != "")                {                  feed.encoding = Encoding.GetEncoding(response.ContentEncoding);                }                  stream = response.GetResponseStream();              }              catch (Exception e)              {                Log.Error(e);              }            }            catch (WebException we)            {              if (oldFeed != null)              {                oldFeed.cached = true;                return oldFeed;              }              else              {                throw we; // bad              }            }            catch (Exception e)            {              Log.Error(e);            }            break;        }
Missing Default,Rss,RssReader,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssReader.cs,Read,The following switch statement is missing a default case: switch (reader.Name.ToLowerInvariant())                        {                          case "url":                            try                            {                              source.Url = new Uri(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                        }
Missing Default,Rss,RssReader,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssReader.cs,Read,The following switch statement is missing a default case: switch (reader.Name.ToLowerInvariant())                        {                          case "url":                            try                            {                              enclosure.Url = new Uri(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                          case "length":                            try                            {                              enclosure.Length = int.Parse(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                          case "type":                            enclosure.Type = reader.Value;                            break;                        }
Missing Default,Rss,RssReader,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssReader.cs,Read,The following switch statement is missing a default case: switch (reader.Name.ToLowerInvariant())                        {                          case "ispermalink":                            try                            {                              guid.PermaLink = bool.Parse(reader.Value);                            }                            catch (Exception e)                            {                              exceptions.Add(e);                            }                            break;                        }
Missing Default,Rss,RssReader,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssReader.cs,Read,The following switch statement is missing a default case: switch (reader.Name.ToLowerInvariant())                        {                          case "url":                            goto case "domain";                          case "domain":                            category.Domain = reader.Value;                            break;                        }
Missing Default,Rss,RssReader,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssReader.cs,Read,The following switch statement is missing a default case: switch (childElementName) // current element                  {                      // item classes                    case "item":                      rssElement = item;                      readData = false;                      break;                    case "source":                      source.Name = elementText.ToString();                      rssElement = source;                      readData = false;                      break;                    case "enclosure":                      rssElement = enclosure;                      readData = false;                      break;                    case "guid":                      guid.Name = elementText.ToString();                      rssElement = guid;                      readData = false;                      break;                    case "category": // parent is either item or channel                      category.Name = elementText.ToString();                      rssElement = category;                      readData = false;                      break;                      // channel classes                    case "channel":                      if (wroteChannel)                      {                        wroteChannel = false;                      }                      else                      {                        wroteChannel = true;                        rssElement = channel;                        readData = false;                      }                      break;                    case "textinput":                      rssElement = textInput;                      readData = false;                      break;                    case "image":                      rssElement = image;                      readData = false;                      break;                    case "cloud":                      rssElement = cloud;                      readData = false;                      break;                  }
Missing Default,Rss,RssReader,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssReader.cs,Read,The following switch statement is missing a default case: switch (parentElementName) // parent element                  {                    case "item":                      switch (childElementName)                      {                        case "title":                          item.Title = elementText.ToString();                          break;                        case "link":                          item.Link = new Uri(elementText.ToString());                          break;                        case "description":                          item.Description = elementText.ToString();                          break;                        case "author":                          item.Author = elementText.ToString();                          break;                        case "comments":                          item.Comments = elementText.ToString();                          break;                        case "pubdate":                          try                          {                            item.PubDate = DateTime.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            try                            {                              string tmp = elementText.ToString();                              tmp = tmp.Substring(0' tmp.Length - 5);                              tmp += "GMT";                              item.PubDate = DateTime.Parse(tmp);                            }                            catch                            {                              exceptions.Add(e);                            }                          }                          break;                      }                      break;                    case "channel":                      switch (childElementName)                      {                        case "title":                          channel.Title = elementText.ToString();                          break;                        case "link":                          try                          {                            channel.Link = new Uri(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "description":                          channel.Description = elementText.ToString();                          break;                        case "language":                          channel.Language = elementText.ToString();                          break;                        case "copyright":                          channel.Copyright = elementText.ToString();                          break;                        case "managingeditor":                          channel.ManagingEditor = elementText.ToString();                          break;                        case "webmaster":                          channel.WebMaster = elementText.ToString();                          break;                        case "rating":                          channel.Rating = elementText.ToString();                          break;                        case "pubdate":                          try                          {                            channel.PubDate = DateTime.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "lastbuilddate":                          try                          {                            channel.LastBuildDate = DateTime.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "generator":                          channel.Generator = elementText.ToString();                          break;                        case "docs":                          channel.Docs = elementText.ToString();                          break;                        case "ttl":                          try                          {                            channel.TimeToLive = int.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                      }                      break;                    case "image":                      switch (childElementName)                      {                        case "url":                          try                          {                            image.Url = new Uri(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "title":                          image.Title = elementText.ToString();                          break;                        case "link":                          try                          {                            image.Link = new Uri(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "description":                          image.Description = elementText.ToString();                          break;                        case "width":                          try                          {                            image.Width = Byte.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "height":                          try                          {                            image.Height = Byte.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                      }                      break;                    case "textinput":                      switch (childElementName)                      {                        case "title":                          textInput.Title = elementText.ToString();                          break;                        case "description":                          textInput.Description = elementText.ToString();                          break;                        case "name":                          textInput.Name = elementText.ToString();                          break;                        case "link":                          try                          {                            textInput.Link = new Uri(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                      }                      break;                    case "skipdays":                      if (childElementName == "day")                      {                        switch (elementText.ToString().ToLowerInvariant())                        {                          case "monday":                            channel.SkipDays[0] = true;                            break;                          case "tuesday":                            channel.SkipDays[1] = true;                            break;                          case "wednesday":                            channel.SkipDays[2] = true;                            break;                          case "thursday":                            channel.SkipDays[3] = true;                            break;                          case "friday":                            channel.SkipDays[4] = true;                            break;                          case "saturday":                            channel.SkipDays[5] = true;                            break;                          case "sunday":                            channel.SkipDays[6] = true;                            break;                        }                      }                      break;                    case "skiphours":                      if (childElementName == "hour")                      {                        channel.SkipHours[Byte.Parse(elementText.ToString().ToLowerInvariant())] = true;                      }                      break;                  }
Missing Default,Rss,RssReader,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssReader.cs,Read,The following switch statement is missing a default case: switch (childElementName)                      {                        case "title":                          item.Title = elementText.ToString();                          break;                        case "link":                          item.Link = new Uri(elementText.ToString());                          break;                        case "description":                          item.Description = elementText.ToString();                          break;                        case "author":                          item.Author = elementText.ToString();                          break;                        case "comments":                          item.Comments = elementText.ToString();                          break;                        case "pubdate":                          try                          {                            item.PubDate = DateTime.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            try                            {                              string tmp = elementText.ToString();                              tmp = tmp.Substring(0' tmp.Length - 5);                              tmp += "GMT";                              item.PubDate = DateTime.Parse(tmp);                            }                            catch                            {                              exceptions.Add(e);                            }                          }                          break;                      }
Missing Default,Rss,RssReader,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssReader.cs,Read,The following switch statement is missing a default case: switch (childElementName)                      {                        case "title":                          channel.Title = elementText.ToString();                          break;                        case "link":                          try                          {                            channel.Link = new Uri(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "description":                          channel.Description = elementText.ToString();                          break;                        case "language":                          channel.Language = elementText.ToString();                          break;                        case "copyright":                          channel.Copyright = elementText.ToString();                          break;                        case "managingeditor":                          channel.ManagingEditor = elementText.ToString();                          break;                        case "webmaster":                          channel.WebMaster = elementText.ToString();                          break;                        case "rating":                          channel.Rating = elementText.ToString();                          break;                        case "pubdate":                          try                          {                            channel.PubDate = DateTime.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "lastbuilddate":                          try                          {                            channel.LastBuildDate = DateTime.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "generator":                          channel.Generator = elementText.ToString();                          break;                        case "docs":                          channel.Docs = elementText.ToString();                          break;                        case "ttl":                          try                          {                            channel.TimeToLive = int.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                      }
Missing Default,Rss,RssReader,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssReader.cs,Read,The following switch statement is missing a default case: switch (childElementName)                      {                        case "url":                          try                          {                            image.Url = new Uri(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "title":                          image.Title = elementText.ToString();                          break;                        case "link":                          try                          {                            image.Link = new Uri(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "description":                          image.Description = elementText.ToString();                          break;                        case "width":                          try                          {                            image.Width = Byte.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                        case "height":                          try                          {                            image.Height = Byte.Parse(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                      }
Missing Default,Rss,RssReader,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssReader.cs,Read,The following switch statement is missing a default case: switch (childElementName)                      {                        case "title":                          textInput.Title = elementText.ToString();                          break;                        case "description":                          textInput.Description = elementText.ToString();                          break;                        case "name":                          textInput.Name = elementText.ToString();                          break;                        case "link":                          try                          {                            textInput.Link = new Uri(elementText.ToString());                          }                          catch (Exception e)                          {                            exceptions.Add(e);                          }                          break;                      }
Missing Default,Rss,RssReader,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssReader.cs,Read,The following switch statement is missing a default case: switch (elementText.ToString().ToLowerInvariant())                        {                          case "monday":                            channel.SkipDays[0] = true;                            break;                          case "tuesday":                            channel.SkipDays[1] = true;                            break;                          case "wednesday":                            channel.SkipDays[2] = true;                            break;                          case "thursday":                            channel.SkipDays[3] = true;                            break;                          case "friday":                            channel.SkipDays[4] = true;                            break;                          case "saturday":                            channel.SkipDays[5] = true;                            break;                          case "sunday":                            channel.SkipDays[6] = true;                            break;                        }
Missing Default,Rss,RssWriter,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssWriter.cs,BeginDocument,The following switch statement is missing a default case: switch (rssVersion)          {            case RssVersion.RSS090:              //<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns="http://my.netscape.com/rdf/simple/0.9/">              writer.WriteStartElement("RDF"' "rdf"' "http://www.w3.org/1999/02/22-rdf-syntax-ns#");              break;            case RssVersion.RSS091:              writer.WriteStartElement("rss");              writer.WriteDocType("rss"' "-//Netscape Communications//DTD RSS 0.91//EN"'                                  "http://my.netscape.com/publish/formats/rss-0.91.dtd"' null);              writer.WriteAttributeString("version"' "0.91");              break;            case RssVersion.RSS092:              writer.WriteStartElement("rss");              writer.WriteAttributeString("version"' "0.92");              break;            case RssVersion.RSS10:              throw new NotSupportedException("RDF Site Summary (RSS) 1.0 is not currently supported.");            case RssVersion.RSS20:              writer.WriteStartElement("rss");              writer.WriteAttributeString("version"' "2.0");              // RSS Modules              foreach (RssModule rssModule in this._rssModules)              {                WriteAttribute("xmlns:" + rssModule.NamespacePrefix' rssModule.NamespaceURL.ToString()' true);              }              break;          }
Missing Default,Rss,RssWriter,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssWriter.cs,writeChannel,The following switch statement is missing a default case: switch (rssVersion)          {            case RssVersion.RSS091:            case RssVersion.RSS092:            case RssVersion.RSS20:              WriteElement("description"' channel.Image.Description' false);              WriteElement("width"' channel.Image.Width' false);              WriteElement("height"' channel.Image.Height' false);              break;          }
Missing Default,Rss,RssWriter,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssWriter.cs,writeChannel,The following switch statement is missing a default case: switch (rssVersion)        {          case RssVersion.RSS091:          case RssVersion.RSS092:          case RssVersion.RSS20:            WriteElement("language"' channel.Language' rssVersion == RssVersion.RSS091);            WriteElement("copyright"' channel.Copyright' false);            WriteElement("managingEditor"' channel.ManagingEditor' false);            WriteElement("webMaster"' channel.WebMaster' false);            WriteElement("pubDate"' channel.PubDate' false);            WriteElement("lastBuildDate"' channel.LastBuildDate' false);            if (channel.Docs != RssDefault.String)            {              WriteElement("docs"' channel.Docs' false);            }            else            {              switch (rssVersion)              {                case RssVersion.RSS091:                  WriteElement("docs"' "http://my.netscape.com/publish/formats/rss-spec-0.91.html"' false);                  break;                case RssVersion.RSS092:                  WriteElement("docs"' "http://backend.userland.com/rss092"' false);                  break;                case RssVersion.RSS20:                  WriteElement("docs"' "http://backend.userland.com/rss"' false);                  break;              }            }            WriteElement("rating"' channel.Rating' false);            string[] Days = {"monday"' "tuesday"' "wednesday"' "thursday"' "friday"' "saturday"' "sunday"};            for (int i = 0; i <= 6; i++)            {              if (channel.SkipDays[i])              {                writer.WriteStartElement("skipDays");                for (int i2 = 0; i2 <= 6; i2++)                {                  if (channel.SkipDays[i2])                  {                    WriteElement("day"' Days[i2]' false);                  }                }                writer.WriteEndElement();                break;              }            }            for (int i = 0; i <= 23; i++)            {              if (channel.SkipHours[i])              {                writer.WriteStartElement("skipHours");                for (int i2 = 0; i2 <= 23; i2++)                {                  if (channel.SkipHours[i2])                  {                    WriteElement("hour"' i2 + 1' false);                  }                }                writer.WriteEndElement();                break;              }            }            break;        }
Missing Default,Rss,RssWriter,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssWriter.cs,writeChannel,The following switch statement is missing a default case: switch (rssVersion)              {                case RssVersion.RSS091:                  WriteElement("docs"' "http://my.netscape.com/publish/formats/rss-spec-0.91.html"' false);                  break;                case RssVersion.RSS092:                  WriteElement("docs"' "http://backend.userland.com/rss092"' false);                  break;                case RssVersion.RSS20:                  WriteElement("docs"' "http://backend.userland.com/rss"' false);                  break;              }
Missing Default,Rss,RssWriter,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssWriter.cs,writeChannel,The following switch statement is missing a default case: switch (rssVersion)        {          case RssVersion.RSS092:          case RssVersion.RSS20:            if (channel.Categories != null)            {              foreach (RssCategory category in channel.Categories)              {                if (category.Name != RssDefault.String)                {                  writer.WriteStartElement("category");                  WriteAttribute("domain"' category.Domain' false);                  writer.WriteString(category.Name);                  writer.WriteEndElement();                }              }            }            if (channel.Cloud != null)            {              writer.WriteStartElement("cloud");              WriteElement("domain"' channel.Cloud.Domain' false);              WriteElement("port"' channel.Cloud.Port' false);              WriteElement("path"' channel.Cloud.Path' false);              WriteElement("registerProcedure"' channel.Cloud.RegisterProcedure' false);              if (channel.Cloud.Protocol != RssCloudProtocol.Empty)              {                WriteElement("Protocol"' channel.Cloud.Protocol' false);              }              writer.WriteEndElement();            }            break;        }
Missing Default,Rss,RssWriter,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\RssWriter.cs,writeItem,The following switch statement is missing a default case: switch (rssVersion)        {          case RssVersion.RSS090:          case RssVersion.RSS10:          case RssVersion.RSS091:            WriteElement("title"' item.Title' true);            WriteElement("description"' item.Description' false);            WriteElement("link"' item.Link' true);            break;          case RssVersion.RSS20:            if ((item.Title == RssDefault.String) && (item.Description == RssDefault.String))            {              throw new ArgumentException("item title and description cannot be null");            }            goto case RssVersion.RSS092;          case RssVersion.RSS092:            WriteElement("title"' item.Title' false);            WriteElement("description"' item.Description' false);            WriteElement("link"' item.Link' false);            if (item.Source != null)            {              writer.WriteStartElement("source");              WriteAttribute("url"' item.Source.Url' true);              writer.WriteString(item.Source.Name);              writer.WriteEndElement();            }            if (item.Enclosure != null)            {              writer.WriteStartElement("enclosure");              WriteAttribute("url"' item.Enclosure.Url' true);              WriteAttribute("length"' item.Enclosure.Length' true);              WriteAttribute("type"' item.Enclosure.Type' true);              writer.WriteEndElement();            }            foreach (RssCategory category in item.Categories)            {              if (category.Name != RssDefault.String)              {                writer.WriteStartElement("category");                WriteAttribute("domain"' category.Domain' false);                writer.WriteString(category.Name);                writer.WriteEndElement();              }            }            break;        }
Missing Default,MediaPortal.GUI.RSS,GUIRSSFeed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\GUIRSSFeed.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)        {          case Action.ActionType.ACTION_PREVIOUS_MENU:            {              GUIWindowManager.ShowPreviousWindow();              return;            }        }
Missing Default,MediaPortal.GUI.RSS,GUIRSSFeed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIRSSFeed\GUIRSSFeed.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              for (int j = 0; j < NUM_STORIES; j++)              {                m_feed_details[j].m_site = "";                m_feed_details[j].m_title = "";                m_feed_details[j].m_description = "";              }                base.OnMessage(message);              LoadSettings();              m_pSiteImage = (GUIImage)GetControl((int)Controls.CONTROL_IMAGELOGO);                UpdateNews(true);                return true;            }            case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:            {              SaveSettings();            }            break;            case GUIMessage.MessageType.GUI_MSG_ITEM_FOCUS_CHANGED:            {              int iControl = message.SenderControlId;              if (iControl == (int)Controls.CONTROL_LIST)              {                UpdateDetails();              }            }            break;            case GUIMessage.MessageType.GUI_MSG_CLICKED:            {              int iControl = message.SenderControlId;              if (iControl == (int)Controls.CONTROL_BTNREFRESH)              {                UpdateNews(true);              }                if (iControl == (int)Controls.CONTROL_LIST)              {                String story = DownloadMainStory();                  if (story != null)                {                  GUIDialogText dlg = (GUIDialogText)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_TEXT);                  if (dlg != null)                  {                    dlg.Reset();                    dlg.ResetAllControls();                    dlg.SetHeading("Story");                    dlg.SetText(story);                    dlg.DoModal(GetID);                  }                }              }                if (iControl == (int)Controls.CONTROL_BTNCHANNEL)              {                OnSelectFeed();                  return true;              }            }            break;        }
