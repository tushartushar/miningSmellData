Implementation smell,Namespace,Class,File,Method,Description
Long Method,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnPageLoad,The method has 193 lines of code.
Long Method,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnMessage,The method has 126 lines of code.
Long Method,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The method has 258 lines of code.
Long Method,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,Compare,The method has 125 lines of code.
Long Method,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,LoadDirectory,The method has 117 lines of code.
Long Method,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,LoadDateView,The method has 191 lines of code.
Long Method,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,LoadDateViewSelect,The method has 205 lines of code.
Long Method,MediaPortal.GUI.Pictures,MissingThumbCacher,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,PerformRequest,The method has 123 lines of code.
Long Method,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,LoadCurrentSlide,The method has 139 lines of code.
Long Method,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The method has 344 lines of code.
Long Method,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,Render,The method has 263 lines of code.
Long Method,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The method has 203 lines of code.
Long Method,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomBackGround,The method has 107 lines of code.
Long Method,MediaPortal.GUI.Pictures,PictureSort,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\PictureSort.cs,Compare,The method has 299 lines of code.
Complex Method,MediaPortal.GUI.Pictures,FolderSetting,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\FolderSetting.cs,UpdateFolders,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,GetThumbnailfile,Cyclomatic complexity of the method is 11
Complex Method,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,LoadSettings,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnAction,Cyclomatic complexity of the method is 17
Complex Method,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnPageLoad,Cyclomatic complexity of the method is 28
Complex Method,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnMessage,Cyclomatic complexity of the method is 29
Complex Method,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,Cyclomatic complexity of the method is 47
Complex Method,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,AddItem,Cyclomatic complexity of the method is 13
Complex Method,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,Compare,Cyclomatic complexity of the method is 22
Complex Method,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnRetrieveCoverArt,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnRetrieveThumbnailFiles,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnClickSlide,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnClick,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnClickSlideShow,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowPicture,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,AddDir,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnSlideShow,Cyclomatic complexity of the method is 10
Complex Method,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,LoadDirectory,Cyclomatic complexity of the method is 20
Complex Method,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,LoadDateView,Cyclomatic complexity of the method is 17
Complex Method,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,LoadDateViewSelect,Cyclomatic complexity of the method is 21
Complex Method,MediaPortal.GUI.Pictures,MissingThumbCacher,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,PerformRequest,Cyclomatic complexity of the method is 20
Complex Method,MediaPortal.GUI.Pictures,MissingThumbCacher,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,CreateFolderThumb,Cyclomatic complexity of the method is 14
Complex Method,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,LoadCurrentSlide,Cyclomatic complexity of the method is 17
Complex Method,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnMessage,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,Cyclomatic complexity of the method is 72
Complex Method,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,Render,Cyclomatic complexity of the method is 48
Complex Method,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,Shuffle,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,RenderMethod10,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurns,Cyclomatic complexity of the method is 13
Complex Method,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomZoom,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,Cyclomatic complexity of the method is 39
Complex Method,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ShowContextMenu,Cyclomatic complexity of the method is 10
Complex Method,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomCurrent,Cyclomatic complexity of the method is 16
Complex Method,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomBackGround,Cyclomatic complexity of the method is 17
Complex Method,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,StartBackgroundMusic,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ShowSong,Cyclomatic complexity of the method is 12
Complex Method,MediaPortal.GUI.Pictures,PictureSort,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\PictureSort.cs,Compare,Cyclomatic complexity of the method is 56
Complex Method,MediaPortal.GUI.Pictures,PicturesFolderWatcherHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\PicturesFolderWatcherHelper.cs,ProcessEvents,Cyclomatic complexity of the method is 13
Long Parameter List,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,GetOutputRect,The method has 7 parameters. Parameters: iSourceWidth' iSourceHeight' fZoomLevel' x' y' width' height
Long Identifier,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,,The length of the parameter _progressDialogForRefreshThumbnails is 35.
Long Statement,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,Process,The length of the statement  "      else if (((GUIWindow.Window)(Enum.Parse(typeof(GUIWindow.Window)' GUIWindowManager.ActiveWindow.ToString())) == GUIWindow.Window.WINDOW_PICTURES) && !g_Player.Playing )" is 168.
Long Statement,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnPageLoad,The length of the statement  "      if (selectedItemIndex >= 0 && (PreviousWindowId == (int)Window.WINDOW_SLIDESHOW || PreviousWindowId == (int)Window.WINDOW_PICTURES)) " is 132.
Long Statement,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,RefreshThumbnailsThread,The length of the statement  "          MissingThumbCacher ManualThumbBuilder = new MissingThumbCacher(itemlist[i].Path' _autocreateLargeThumbs' Regenerate' false); " is 124.
Long Statement,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,DoRotate,The length of the statement  "      //_currentTexture = MediaPortal.Util.Picture.Load(_backgroundSlideFileName' _rotation' iMaxWidth' iMaxHeight' true' true' out X' out Y); " is 136.
Long Statement,MediaPortal.GUI.Pictures,PictureSort,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\PictureSort.cs,TryGetFileInfo,The length of the statement  "          DateTime.TryParseExact(item.Label2' "yyyy-MM-dd HH:mm:ss"' CultureInfo.CurrentCulture' DateTimeStyles.None' out dateAddedWatched);" is 130.
Complex Conditional,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,GetThumbnailfile,The conditional expression  "recreateThumbs || !File.Exists(thumbnailImage) || !Util.Utils.FileExistsInCache(thumbnailImage) ||               !File.Exists(thumbnailImageL) || !Util.Utils.FileExistsInCache(thumbnailImageL)"  is complex.
Complex Conditional,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowPicture,The conditional expression  "g_Player.MediaInfo != null && g_Player.MediaInfo.HasVideo || g_Player.IsTV || g_Player.IsVideo"  is complex.
Complex Conditional,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnSlideShowRecursive,The conditional expression  "g_Player.MediaInfo != null && g_Player.MediaInfo.HasVideo || g_Player.IsTV || g_Player.IsVideo"  is complex.
Complex Conditional,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnSlideShow,The conditional expression  "g_Player.MediaInfo != null && g_Player.MediaInfo.HasVideo || g_Player.IsTV || g_Player.IsVideo"  is complex.
Complex Conditional,MediaPortal.GUI.Pictures,MissingThumbCacher,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,PerformRequest,The conditional expression  "recreateThumbs || !File.Exists(thumbnailImage) || !Util.Utils.FileExistsInCache(thumbnailImage) ||                         !File.Exists(thumbnailImageL) || !Util.Utils.FileExistsInCache(thumbnailImageL)"  is complex.
Complex Conditional,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,LoadCurrentSlide,The conditional expression  "g_Player.IsMusic || g_Player.IsCDA || (g_Player.IsRadio && !g_Player.IsTimeShifting)"  is complex.
Complex Conditional,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,Render,The conditional expression  "_autoHideOsd && (_infoVisible || _zoomInfoVisible || _isLoadingRawPicture)"  is complex.
Complex Conditional,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,RenderPause,The conditional expression  "(!_isPaused && !_infoVisible && !_zoomInfoVisible && !_isPictureZoomed) || _zoomInfoVisible || _infoVisible"  is complex.
Complex Conditional,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,StartBackgroundMusic,The conditional expression  "g_Player.IsMusic || g_Player.IsRadio || g_Player.IsTV || g_Player.IsVideo"  is complex.
Complex Conditional,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ShowSong,The conditional expression  "currentSong == null || string.IsNullOrEmpty(currentSong.Title) ||                    (string.IsNullOrEmpty(currentSong.Artist) && string.IsNullOrEmpty(currentSong.AlbumArtist))"  is complex.
Empty Catch Block,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,CheckPathForHistory,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,WakeUpSrv,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ShowSong,The method has an empty catch block.
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,GetThumbnailfile,The following statement contains a magic number: Thread.Sleep(5);
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,LoadSettings,The following statement contains a magic number: _wolTimeout = xmlreader.GetValueAsInt("WOL"' "WolTimeout"' 10);
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,InitViewSelections,The following statement contains a magic number: btnViews.AddItem(GUILocalizeStrings.Get(134)' index++);
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,InitViewSelections,The following statement contains a magic number: btnViews.AddItem(GUILocalizeStrings.Get(636)' index++);
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnAction,The following statement contains a magic number: item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,GetProtectedShares,The following statement contains a magic number: index < 128
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnPageLoad,The following statement contains a magic number: pDlgOK.SetHeading(315);
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnPageLoad,The following statement contains a magic number: pDlgOK.SetLine(2' GUILocalizeStrings.Get(190010' new object[] { GUILocalizeStrings.Get(1) }));
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnPageLoad,The following statement contains a magic number: pDlgOK.SetLine(2' GUILocalizeStrings.Get(190010' new object[] { GUILocalizeStrings.Get(1) }));
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnPageLoad,The following statement contains a magic number: pDlgOK.SetHeading(315);
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnPageLoad,The following statement contains a magic number: pDlgOK.SetLine(2' GUILocalizeStrings.Get(190010' new object[] { GUILocalizeStrings.Get(190011) }));
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnPageLoad,The following statement contains a magic number: pDlgOK.SetLine(2' GUILocalizeStrings.Get(190010' new object[] { GUILocalizeStrings.Get(190011) }));
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnPageLoad,The following statement contains a magic number: pDlgOK.SetLine(2' GUILocalizeStrings.Get(190010' new object[] { GUILocalizeStrings.Get(190011) }));
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnMessage,The following statement contains a magic number: switch (message.Message)       {         case GUIMessage.MessageType.GUI_MSG_START_SLIDESHOW:           string strUrl = message.Label;           LoadDirectory(strUrl);           OnSlideShow();           break;          case GUIMessage.MessageType.GUI_MSG_AUTOPLAY_VOLUME:           currentFolder = message.Label;           OnSlideShowRecursive();           break;          case GUIMessage.MessageType.GUI_MSG_SHOW_DIRECTORY:           currentFolder = message.Label;           LoadDirectory(currentFolder);           break;          case GUIMessage.MessageType.GUI_MSG_ADD_REMOVABLE_DRIVE:           if (_switchRemovableDrives)           {             currentFolder = message.Label;             if (!Util.Utils.IsRemovable(message.Label))             {               _virtualDirectory.AddRemovableDrive(message.Label' message.Label2);             }           }           if (_removableDrivesHandlerThread != null)            {              _removableDrivesHandlerThread.Join();            }           RemovableDrivesHandler.ListRemovableDrives(_virtualDirectory.GetDirectoryExt(string.Empty));            LoadDirectory(currentFolder);           break;          case GUIMessage.MessageType.GUI_MSG_REMOVE_REMOVABLE_DRIVE:           if (!Util.Utils.IsRemovable(message.Label))           {             _virtualDirectory.Remove(message.Label);           }           if (currentFolder.Contains(message.Label))           {             currentFolder = string.Empty;           }           LoadDirectory(currentFolder);           break;          case GUIMessage.MessageType.GUI_MSG_FILE_DOWNLOADING:           GUIFacadeControl pControl = (GUIFacadeControl)GetControl(facadeLayout.GetID);           pControl.OnMessage(message);           break;          case GUIMessage.MessageType.GUI_MSG_FILE_DOWNLOADED:           GUIFacadeControl pControl2 = (GUIFacadeControl)GetControl(facadeLayout.GetID);           pControl2.OnMessage(message);           break;          case GUIMessage.MessageType.GUI_MSG_VOLUME_INSERTED:         case GUIMessage.MessageType.GUI_MSG_VOLUME_REMOVED:           if (currentFolder == string.Empty || currentFolder.Substring(0' 2) == message.Label)           {             currentFolder = string.Empty;             LoadDirectory(currentFolder);           }           break;          case GUIMessage.MessageType.GUI_MSG_ITEM_SELECT:         case GUIMessage.MessageType.GUI_MSG_CLICKED:            // Respond to the correct control.  The value is retrived directly from the control by the called handler.           if (message.TargetControlId == btnViews.GetID)           {             SetView(btnViews.SelectedItemValue);             GUIControl.FocusControl(GetID' btnViews.GetID);           }           break;           case GUIMessage.MessageType.GUI_MSG_LAYOUT_CHANGED:            FolderSetting folderSetting = new FolderSetting();            folderSetting.UpdateFolders(-1' CurrentSortAsc' (int)currentLayout);            break;           case GUIMessage.MessageType.GUI_MSG_PICTURESFILE_CREATED:            if (disp == Display.Files)            {              AddItem(message.Label' -1);        }           break;            case GUIMessage.MessageType.GUI_MSG_PICTURESFILE_DELETED:            if (disp == Display.Files)            {              DeleteItem(message.Label);              SelectCurrentItem();            }            break;            case GUIMessage.MessageType.GUI_MSG_PICTURESFILE_RENAMED:            if (disp == Display.Files)            {              ReplaceItem(message.Label2' message.Label);              SelectCurrentItem();            }            break;            case GUIMessage.MessageType.GUI_MSG_PICTURESDIRECTORY_CREATED:            if (disp == Display.Files)            {              AddItem(message.Label' -1);            }            break;            case GUIMessage.MessageType.GUI_MSG_PICTURESDIRECTORY_DELETED:            if (disp == Display.Files)            {              DeleteItem(message.Label);              SelectCurrentItem();            }            break;            case GUIMessage.MessageType.GUI_MSG_PICTURESDIRECTORY_RENAMED:            if (disp == Display.Files)            {              ReplaceItem(message.Label2' message.Label);              SelectCurrentItem();            }            break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: dlg.SetHeading(498);
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(868);
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1240);
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1299);
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,UpdateButtonStates,The following statement contains a magic number: switch (method)       {         case SortMethod.Name:           textLine = GUILocalizeStrings.Get(103);           break;         case SortMethod.Modified:           textLine = GUILocalizeStrings.Get(1221);           break;         case SortMethod.Created:           textLine = GUILocalizeStrings.Get(1220);           break;         case SortMethod.Size:           textLine = GUILocalizeStrings.Get(105);           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,UpdateButtonStates,The following statement contains a magic number: switch (method)       {         case SortMethod.Name:           textLine = GUILocalizeStrings.Get(103);           break;         case SortMethod.Modified:           textLine = GUILocalizeStrings.Get(1221);           break;         case SortMethod.Created:           textLine = GUILocalizeStrings.Get(1220);           break;         case SortMethod.Size:           textLine = GUILocalizeStrings.Get(105);           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,UpdateButtonStates,The following statement contains a magic number: switch (method)       {         case SortMethod.Name:           textLine = GUILocalizeStrings.Get(103);           break;         case SortMethod.Modified:           textLine = GUILocalizeStrings.Get(1221);           break;         case SortMethod.Created:           textLine = GUILocalizeStrings.Get(1220);           break;         case SortMethod.Size:           textLine = GUILocalizeStrings.Get(105);           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,UpdateButtonStates,The following statement contains a magic number: switch (method)       {         case SortMethod.Name:           textLine = GUILocalizeStrings.Get(103);           break;         case SortMethod.Modified:           textLine = GUILocalizeStrings.Get(1221);           break;         case SortMethod.Created:           textLine = GUILocalizeStrings.Get(1220);           break;         case SortMethod.Size:           textLine = GUILocalizeStrings.Get(105);           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,UpdateButtonStates,The following statement contains a magic number: GUIControl.SetControlLabel(GetID' btnSortBy.GetID' GUILocalizeStrings.Get(96) + textLine);
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnDeleteItem,The following statement contains a magic number: dlgYesNo.SetHeading(664);
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnDeleteItem,The following statement contains a magic number: dlgYesNo.SetLine(2' string.Empty);
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnDeleteItem,The following statement contains a magic number: dlgYesNo.SetLine(3' string.Empty);
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,DoRotatePicture,The following statement contains a magic number: DoRotatePicture(aPicturePath' 90);
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,DoRotatePicture,The following statement contains a magic number: degrees == 90
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,DoRotatePicture,The following statement contains a magic number: rotate = rotate - 4;
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,DoRotatePicture,The following statement contains a magic number: rotate >= 4
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,DoRotatePicture,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,UpdateThumbnailsInFolder,The following statement contains a magic number: _progressDialogForRefreshThumbnails =         (GUIDialogProgress)GUIWindowManager.GetWindow(101);
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,UpdateThumbnailsInFolder,The following statement contains a magic number: _progressDialogForRefreshThumbnails.SetHeading(GUILocalizeStrings.Get(200047));
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,UpdateThumbnailsInFolder,The following statement contains a magic number: _progressDialogForRefreshThumbnails.SetLine(2' string.Empty);
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,UpdateThumbnailsInFolder,The following statement contains a magic number: _progressDialogForRefreshThumbnails.SetLine(3' "Folder count: " + itemlist.Count + "/0");
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,RefreshThumbnailsThread,The following statement contains a magic number: int perc = (i * 100) / itemlist.Count;
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,RefreshThumbnailsThread,The following statement contains a magic number: _progressDialogForRefreshThumbnails.SetLine(3' "Folder count: " + itemlist.Count + "/" + i);
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,RefreshThumbnailsThread,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowSort,The following statement contains a magic number: dlg.SetHeading(495);
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(103);
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(1221);
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(1220);
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowSort,The following statement contains a magic number: dlg.AddLocalizedString(105);
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 103:           mapSettings.SortBy = (int)SortMethod.Name;           break;         case 1220:           mapSettings.SortBy = (int)SortMethod.Created;           break;         case 1221:           mapSettings.SortBy = (int)SortMethod.Modified;           break;         case 105:           mapSettings.SortBy = (int)SortMethod.Size;           break;         default:           mapSettings.SortBy = (int)SortMethod.Name;           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 103:           mapSettings.SortBy = (int)SortMethod.Name;           break;         case 1220:           mapSettings.SortBy = (int)SortMethod.Created;           break;         case 1221:           mapSettings.SortBy = (int)SortMethod.Modified;           break;         case 105:           mapSettings.SortBy = (int)SortMethod.Size;           break;         default:           mapSettings.SortBy = (int)SortMethod.Name;           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 103:           mapSettings.SortBy = (int)SortMethod.Name;           break;         case 1220:           mapSettings.SortBy = (int)SortMethod.Created;           break;         case 1221:           mapSettings.SortBy = (int)SortMethod.Modified;           break;         case 105:           mapSettings.SortBy = (int)SortMethod.Size;           break;         default:           mapSettings.SortBy = (int)SortMethod.Name;           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowSort,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 103:           mapSettings.SortBy = (int)SortMethod.Name;           break;         case 1220:           mapSettings.SortBy = (int)SortMethod.Created;           break;         case 1221:           mapSettings.SortBy = (int)SortMethod.Modified;           break;         case 105:           mapSettings.SortBy = (int)SortMethod.Size;           break;         default:           mapSettings.SortBy = (int)SortMethod.Name;           break;       }
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,WakeUpSrv,The following statement contains a magic number: serverName == _prevServerName && _wolResendTime*60 > ts.TotalSeconds
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,LoadDateView,The following statement contains a magic number: string year = strNewDirectory.Substring(0' 4);
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,LoadDateView,The following statement contains a magic number: string month = strNewDirectory.Substring(5' 2);
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,LoadDateView,The following statement contains a magic number: string month = strNewDirectory.Substring(5' 2);
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,LoadDateView,The following statement contains a magic number: strNewDirectory.Length == 7
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,LoadDateViewSelect,The following statement contains a magic number: string year = strNewDirectory.Substring(0' 4);
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,LoadDateViewSelect,The following statement contains a magic number: strNewDirectory.Length == 4 && !_useDayGrouping
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,LoadDateViewSelect,The following statement contains a magic number: string year = strNewDirectory.Substring(0' 4);
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,LoadDateViewSelect,The following statement contains a magic number: folderHistory.Set(strFreshNewDirectory.Substring(0' 7)' year);
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,LoadDateViewSelect,The following statement contains a magic number: folderHistory.Set(strFreshNewDirectory' strFreshNewDirectory.Substring(0' 7));
Magic Number,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,LoadDateViewSelect,The following statement contains a magic number: strNewDirectory.Length == 4
Magic Number,MediaPortal.GUI.Pictures,MissingThumbCacher,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,PerformRequest,The following statement contains a magic number: Thread.Sleep(5000);
Magic Number,MediaPortal.GUI.Pictures,MissingThumbCacher,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,PerformRequest,The following statement contains a magic number: Thread.Sleep(5);
Magic Number,MediaPortal.GUI.Pictures,MissingThumbCacher,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,PerformRequest,The following statement contains a magic number: Thread.Sleep(5);
Magic Number,MediaPortal.GUI.Pictures,MissingThumbCacher,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,PerformRequest,The following statement contains a magic number: Thread.Sleep(5);
Magic Number,MediaPortal.GUI.Pictures,MissingThumbCacher,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,CreateFolderThumb,The following statement contains a magic number: pictureList.Count >= 4
Magic Number,MediaPortal.GUI.Pictures,MissingThumbCacher,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,CreateFolderThumb,The following statement contains a magic number: pictureList.Count >= 4
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,Render,The following statement contains a magic number: totalFrames = _kenBurnTransistionSpeed * 30;
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,Render,The following statement contains a magic number: _transitionMethod != 9 || _currentSlide == null
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,Render,The following statement contains a magic number: switch (_transitionMethod)          {            case 0:              bResult = RenderMethod1(); // open from left->right              break;            case 1:              bResult = RenderMethod2(); // move into the screen from left->right              break;            case 2:              bResult = RenderMethod3(); // move into the screen from right->left              break;            case 3:              bResult = RenderMethod4(); // move into the screen from up->bottom              break;            case 4:              bResult = RenderMethod5(); // move into the screen from bottom->top              break;            case 5:              bResult = RenderMethod6(); // open from up->bottom              break;            case 6:              bResult = RenderMethod7(); // slide from left<-right              break;            case 7:              bResult = RenderMethod8(); // slide from down->up              break;            case 8:              bResult = RenderMethod9(); // grow from middle              break;            case 9:              bResult = RenderMethod10(); // x-fade              break;          }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,Render,The following statement contains a magic number: switch (_transitionMethod)          {            case 0:              bResult = RenderMethod1(); // open from left->right              break;            case 1:              bResult = RenderMethod2(); // move into the screen from left->right              break;            case 2:              bResult = RenderMethod3(); // move into the screen from right->left              break;            case 3:              bResult = RenderMethod4(); // move into the screen from up->bottom              break;            case 4:              bResult = RenderMethod5(); // move into the screen from bottom->top              break;            case 5:              bResult = RenderMethod6(); // open from up->bottom              break;            case 6:              bResult = RenderMethod7(); // slide from left<-right              break;            case 7:              bResult = RenderMethod8(); // slide from down->up              break;            case 8:              bResult = RenderMethod9(); // grow from middle              break;            case 9:              bResult = RenderMethod10(); // x-fade              break;          }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,Render,The following statement contains a magic number: switch (_transitionMethod)          {            case 0:              bResult = RenderMethod1(); // open from left->right              break;            case 1:              bResult = RenderMethod2(); // move into the screen from left->right              break;            case 2:              bResult = RenderMethod3(); // move into the screen from right->left              break;            case 3:              bResult = RenderMethod4(); // move into the screen from up->bottom              break;            case 4:              bResult = RenderMethod5(); // move into the screen from bottom->top              break;            case 5:              bResult = RenderMethod6(); // open from up->bottom              break;            case 6:              bResult = RenderMethod7(); // slide from left<-right              break;            case 7:              bResult = RenderMethod8(); // slide from down->up              break;            case 8:              bResult = RenderMethod9(); // grow from middle              break;            case 9:              bResult = RenderMethod10(); // x-fade              break;          }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,Render,The following statement contains a magic number: switch (_transitionMethod)          {            case 0:              bResult = RenderMethod1(); // open from left->right              break;            case 1:              bResult = RenderMethod2(); // move into the screen from left->right              break;            case 2:              bResult = RenderMethod3(); // move into the screen from right->left              break;            case 3:              bResult = RenderMethod4(); // move into the screen from up->bottom              break;            case 4:              bResult = RenderMethod5(); // move into the screen from bottom->top              break;            case 5:              bResult = RenderMethod6(); // open from up->bottom              break;            case 6:              bResult = RenderMethod7(); // slide from left<-right              break;            case 7:              bResult = RenderMethod8(); // slide from down->up              break;            case 8:              bResult = RenderMethod9(); // grow from middle              break;            case 9:              bResult = RenderMethod10(); // x-fade              break;          }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,Render,The following statement contains a magic number: switch (_transitionMethod)          {            case 0:              bResult = RenderMethod1(); // open from left->right              break;            case 1:              bResult = RenderMethod2(); // move into the screen from left->right              break;            case 2:              bResult = RenderMethod3(); // move into the screen from right->left              break;            case 3:              bResult = RenderMethod4(); // move into the screen from up->bottom              break;            case 4:              bResult = RenderMethod5(); // move into the screen from bottom->top              break;            case 5:              bResult = RenderMethod6(); // open from up->bottom              break;            case 6:              bResult = RenderMethod7(); // slide from left<-right              break;            case 7:              bResult = RenderMethod8(); // slide from down->up              break;            case 8:              bResult = RenderMethod9(); // grow from middle              break;            case 9:              bResult = RenderMethod10(); // x-fade              break;          }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,Render,The following statement contains a magic number: switch (_transitionMethod)          {            case 0:              bResult = RenderMethod1(); // open from left->right              break;            case 1:              bResult = RenderMethod2(); // move into the screen from left->right              break;            case 2:              bResult = RenderMethod3(); // move into the screen from right->left              break;            case 3:              bResult = RenderMethod4(); // move into the screen from up->bottom              break;            case 4:              bResult = RenderMethod5(); // move into the screen from bottom->top              break;            case 5:              bResult = RenderMethod6(); // open from up->bottom              break;            case 6:              bResult = RenderMethod7(); // slide from left<-right              break;            case 7:              bResult = RenderMethod8(); // slide from down->up              break;            case 8:              bResult = RenderMethod9(); // grow from middle              break;            case 9:              bResult = RenderMethod10(); // x-fade              break;          }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,Render,The following statement contains a magic number: switch (_transitionMethod)          {            case 0:              bResult = RenderMethod1(); // open from left->right              break;            case 1:              bResult = RenderMethod2(); // move into the screen from left->right              break;            case 2:              bResult = RenderMethod3(); // move into the screen from right->left              break;            case 3:              bResult = RenderMethod4(); // move into the screen from up->bottom              break;            case 4:              bResult = RenderMethod5(); // move into the screen from bottom->top              break;            case 5:              bResult = RenderMethod6(); // open from up->bottom              break;            case 6:              bResult = RenderMethod7(); // slide from left<-right              break;            case 7:              bResult = RenderMethod8(); // slide from down->up              break;            case 8:              bResult = RenderMethod9(); // grow from middle              break;            case 9:              bResult = RenderMethod10(); // x-fade              break;          }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,Render,The following statement contains a magic number: switch (_transitionMethod)          {            case 0:              bResult = RenderMethod1(); // open from left->right              break;            case 1:              bResult = RenderMethod2(); // move into the screen from left->right              break;            case 2:              bResult = RenderMethod3(); // move into the screen from right->left              break;            case 3:              bResult = RenderMethod4(); // move into the screen from up->bottom              break;            case 4:              bResult = RenderMethod5(); // move into the screen from bottom->top              break;            case 5:              bResult = RenderMethod6(); // open from up->bottom              break;            case 6:              bResult = RenderMethod7(); // slide from left<-right              break;            case 7:              bResult = RenderMethod8(); // slide from down->up              break;            case 8:              bResult = RenderMethod9(); // grow from middle              break;            case 9:              bResult = RenderMethod10(); // x-fade              break;          }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,Render,The following statement contains a magic number: int dwOSDTimeElapsed = ((int)(DateTime.Now.Ticks / 10000)) - _slideTime;
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,Render,The following statement contains a magic number: dwOSDTimeElapsed >= 3000
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,Render,The following statement contains a magic number: strZoomInfo = String.Format("{0}% ({1} ' {2})"' (int)(_zoomFactorBackground * 100.0f)' (int)_zoomLeftBackground'                                      (int)_zoomTopBackground);
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,Render,The following statement contains a magic number: strFileInfo = String.Format("{0} ({1}x{2}) "' strFileName' _backgroundSlide.Width - 2'                                        _backgroundSlide.Height - 2);
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,Render,The following statement contains a magic number: strFileInfo = String.Format("{0} ({1}x{2}) "' strFileName' _backgroundSlide.Width - 2'                                        _backgroundSlide.Height - 2);
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,Render,The following statement contains a magic number: strFileInfo = String.Format("{0}"' GUILocalizeStrings.Get(13012));
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,PushCurrentTextureToBackground,The following statement contains a magic number: _slideTime = (int)(DateTime.Now.Ticks / 10000);
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ShowNext,The following statement contains a magic number: _slideTime = (int)(DateTime.Now.Ticks / 10000);
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ShowPrevious,The following statement contains a magic number: _slideTime = (int)(DateTime.Now.Ticks / 10000);
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,InitKenBurnsTransition,The following statement contains a magic number: iRandom = _randomizer.Next(2);
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,InitKenBurnsTransition,The following statement contains a magic number: switch (iRandom)        {          default:          case 0:            iEffect = 1; // Zoom            break;          case 1:            iEffect = 2; // Pan            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,RenderMethod9,The following statement contains a magic number: float posx = x + (width - newwidth) / 2;
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,RenderMethod9,The following statement contains a magic number: float posy = y + (height - newheight) / 2;
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,RenderMethod10,The following statement contains a magic number: lColorDiffuse <<= 24;
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,RenderMethod10,The following statement contains a magic number: lColorDiffuse <<= 24;
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurns,The following statement contains a magic number: int iNrOfFramesPerEffect = _kenBurnTransistionSpeed * 30;
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurns,The following statement contains a magic number: switch (iEffect)        {          default:          case 0:            // No effects' just wait for next picture            break;            case 1:            bEnd = KenBurnsRandomZoom(_kenBurnsState' _frameNumber' iNrOfFramesPerEffect' bReset);            break;            case 2:            bEnd = KenBurnsRandomPan(_kenBurnsState' _frameNumber' iNrOfFramesPerEffect' bReset);            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurns,The following statement contains a magic number: _slideTime = (int)(DateTime.Now.Ticks / 10000);
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomZoom,The following statement contains a magic number: iRandom = _randomizer.Next(3);
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomZoom,The following statement contains a magic number: switch (iRandom)          {            case 0:              if (_landScape)              {                _currentZoomType = 8; // from left              }              else              {                _currentZoomType = 2; // from top              }              break;              case 1:              if (_landScape)              {                _currentZoomType = 4; // from right              }              else              {                _currentZoomType = 6; // from bottom              }              break;              default:            case 2:              _currentZoomType = 0; // centered              break;          }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomZoom,The following statement contains a magic number: switch (iRandom)          {            case 0:              if (_landScape)              {                _currentZoomType = 8; // from left              }              else              {                _currentZoomType = 2; // from top              }              break;              case 1:              if (_landScape)              {                _currentZoomType = 4; // from right              }              else              {                _currentZoomType = 6; // from bottom              }              break;              default:            case 2:              _currentZoomType = 0; // centered              break;          }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomZoom,The following statement contains a magic number: switch (iRandom)          {            case 0:              if (_landScape)              {                _currentZoomType = 8; // from left              }              else              {                _currentZoomType = 2; // from top              }              break;              case 1:              if (_landScape)              {                _currentZoomType = 4; // from right              }              else              {                _currentZoomType = 6; // from bottom              }              break;              default:            case 2:              _currentZoomType = 0; // centered              break;          }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomZoom,The following statement contains a magic number: switch (iRandom)          {            case 0:              if (_landScape)              {                _currentZoomType = 8; // from left              }              else              {                _currentZoomType = 2; // from top              }              break;              case 1:              if (_landScape)              {                _currentZoomType = 4; // from right              }              else              {                _currentZoomType = 6; // from bottom              }              break;              default:            case 2:              _currentZoomType = 0; // centered              break;          }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomZoom,The following statement contains a magic number: switch (iRandom)          {            case 0:              if (_landScape)              {                _currentZoomType = 8; // from left              }              else              {                _currentZoomType = 2; // from top              }              break;              case 1:              if (_landScape)              {                _currentZoomType = 4; // from right              }              else              {                _currentZoomType = 6; // from bottom              }              break;              default:            case 2:              _currentZoomType = 0; // centered              break;          }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: iRandom = _randomizer.Next(14);
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following statement contains a magic number: switch (iRandom)            {              default:              case 0:                _startPoint = 1;                _endPoint = 4;                break;              case 1:                _startPoint = 1;                _endPoint = 5;                break;              case 2:                _startPoint = 8;                _endPoint = 3;                break;              case 3:                _startPoint = 8;                _endPoint = 4;                break;              case 4:                _startPoint = 8;                _endPoint = 5;                break;              case 5:                _startPoint = 7;                _endPoint = 4;                break;              case 6:                _startPoint = 7;                _endPoint = 3;                break;              case 7:                _startPoint = 5;                _endPoint = 8;                break;              case 8:                _startPoint = 5;                _endPoint = 1;                break;              case 9:                _startPoint = 4;                _endPoint = 7;                break;              case 10:                _startPoint = 4;                _endPoint = 8;                break;              case 11:                _startPoint = 4;                _endPoint = 1;                break;              case 12:                _startPoint = 3;                _endPoint = 7;                break;              case 13:                _startPoint = 3;                _endPoint = 8;                break;            }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ShowContextMenu,The following statement contains a magic number: dlg.SetHeading(498);
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(117);
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(735);
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(783);
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(784);
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(108);
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(940);
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(970);
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 117: // Delete            OnDelete();            break;            case 735: // Rotate            DoRotate();            break;            case 783: // rotate 180            DoRotate(180);            break;            case 784: // rotate 270            DoRotate(270);            break;            case 108: // Start slideshow            StartSlideShow();            break;            case 940: // Properties            OnShowInfo();            break;            case 970:            ShowPreviousWindow();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 117: // Delete            OnDelete();            break;            case 735: // Rotate            DoRotate();            break;            case 783: // rotate 180            DoRotate(180);            break;            case 784: // rotate 270            DoRotate(270);            break;            case 108: // Start slideshow            StartSlideShow();            break;            case 940: // Properties            OnShowInfo();            break;            case 970:            ShowPreviousWindow();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 117: // Delete            OnDelete();            break;            case 735: // Rotate            DoRotate();            break;            case 783: // rotate 180            DoRotate(180);            break;            case 784: // rotate 270            DoRotate(270);            break;            case 108: // Start slideshow            StartSlideShow();            break;            case 940: // Properties            OnShowInfo();            break;            case 970:            ShowPreviousWindow();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 117: // Delete            OnDelete();            break;            case 735: // Rotate            DoRotate();            break;            case 783: // rotate 180            DoRotate(180);            break;            case 784: // rotate 270            DoRotate(270);            break;            case 108: // Start slideshow            StartSlideShow();            break;            case 940: // Properties            OnShowInfo();            break;            case 970:            ShowPreviousWindow();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 117: // Delete            OnDelete();            break;            case 735: // Rotate            DoRotate();            break;            case 783: // rotate 180            DoRotate(180);            break;            case 784: // rotate 270            DoRotate(270);            break;            case 108: // Start slideshow            StartSlideShow();            break;            case 940: // Properties            OnShowInfo();            break;            case 970:            ShowPreviousWindow();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 117: // Delete            OnDelete();            break;            case 735: // Rotate            DoRotate();            break;            case 783: // rotate 180            DoRotate(180);            break;            case 784: // rotate 270            DoRotate(270);            break;            case 108: // Start slideshow            StartSlideShow();            break;            case 940: // Properties            OnShowInfo();            break;            case 970:            ShowPreviousWindow();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 117: // Delete            OnDelete();            break;            case 735: // Rotate            DoRotate();            break;            case 783: // rotate 180            DoRotate(180);            break;            case 784: // rotate 270            DoRotate(270);            break;            case 108: // Start slideshow            StartSlideShow();            break;            case 940: // Properties            OnShowInfo();            break;            case 970:            ShowPreviousWindow();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 117: // Delete            OnDelete();            break;            case 735: // Rotate            DoRotate();            break;            case 783: // rotate 180            DoRotate(180);            break;            case 784: // rotate 270            DoRotate(270);            break;            case 108: // Start slideshow            StartSlideShow();            break;            case 940: // Properties            OnShowInfo();            break;            case 970:            ShowPreviousWindow();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)        {          case 117: // Delete            OnDelete();            break;            case 735: // Rotate            DoRotate();            break;            case 783: // rotate 180            DoRotate(180);            break;            case 784: // rotate 270            DoRotate(270);            break;            case 108: // Start slideshow            StartSlideShow();            break;            case 940: // Properties            OnShowInfo();            break;            case 970:            ShowPreviousWindow();            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnDelete,The following statement contains a magic number: dlgYesNo.SetHeading(GUILocalizeStrings.Get(664));
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnDelete,The following statement contains a magic number: dlgYesNo.SetLine(2' strFileName);
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnDelete,The following statement contains a magic number: dlgYesNo.SetLine(3' "");
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnDelete,The following statement contains a magic number: _slideTime = (int)(DateTime.Now.Ticks / 10000);
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,RenderPause,The following statement contains a magic number: _counter > 25
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,RenderPause,The following statement contains a magic number: _counter < 13
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,RenderPause,The following statement contains a magic number: string szText = GUILocalizeStrings.Get(112);
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,RenderPause,The following statement contains a magic number: pFont.DrawShadowText(500.0f' 60.0f' 0xffffffff' szText' GUIControl.Alignment.ALIGN_LEFT' (int)fw' 2' 2'                               0xff000000);
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,RenderPause,The following statement contains a magic number: pFont.DrawShadowText(500.0f' 60.0f' 0xffffffff' szText' GUIControl.Alignment.ALIGN_LEFT' (int)fw' 2' 2'                               0xff000000);
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,RenderPause,The following statement contains a magic number: pFont.DrawShadowText(500.0f' 60.0f' 0xffffffff' szText' GUIControl.Alignment.ALIGN_LEFT' (int)fw' 2' 2'                               0xff000000);
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,RenderPause,The following statement contains a magic number: pFont.DrawShadowText(500.0f' 60.0f' 0xffffffff' szText' GUIControl.Alignment.ALIGN_LEFT' (int)fw' 2' 2'                               0xff000000);
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,DoRotate,The following statement contains a magic number: DoRotate(90);
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,DoRotate,The following statement contains a magic number: _transitionMethod = 9;
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,GetOutputRect,The following statement contains a magic number: x = (iScreenWidth - width) / 2 + iOffsetX1;
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,GetOutputRect,The following statement contains a magic number: y = (iScreenHeight - height) / 2 + iOffsetY1;
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomCurrent,The following statement contains a magic number: float middlex = _currentSlide.Width / 2;
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomCurrent,The following statement contains a magic number: float middley = _currentSlide.Height / 2;
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomCurrent,The following statement contains a magic number: switch (_currentZoomType)        {            /* 0: // centered' centered            * 1: // Top Left unchanged            * 2: // Width centered' Top unchanged            * 3: // Top Right unchanged            * 4: // Height centered' Right unchanged            * 5: // Bottom Right unchanged            * 6: // Widht centered' Bottom unchanged            * 7: // Bottom Left unchanged            * 8: // Heigth centered' Left unchanged            * */          case 0: // centered' centered            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            _currentZoomTop = middley - _zoomHeight * 0.5f;            break;          case 2: // Width centered' Top unchanged            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            break;          case 8: // Heigth centered' Left unchanged            _currentZoomTop = middley - _zoomHeight * 0.5f;            break;          case 6: // Widht centered' Bottom unchanged            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            _currentZoomTop = yend - _zoomHeight;            break;          case 4: // Height centered' Right unchanged            _currentZoomTop = middley - _zoomHeight * 0.5f;            _currentZoomLeft = xend - _zoomWidth;            break;          case 1: // Top Left unchanged            break;          case 3: // Top Right unchanged            _currentZoomLeft = xend - _zoomWidth;            break;          case 7: // Bottom Left unchanged            _currentZoomTop = yend - _zoomHeight;            break;          case 5: // Bottom Right unchanged            _currentZoomTop = yend - _zoomHeight;            _currentZoomLeft = xend - _zoomWidth;            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomCurrent,The following statement contains a magic number: switch (_currentZoomType)        {            /* 0: // centered' centered            * 1: // Top Left unchanged            * 2: // Width centered' Top unchanged            * 3: // Top Right unchanged            * 4: // Height centered' Right unchanged            * 5: // Bottom Right unchanged            * 6: // Widht centered' Bottom unchanged            * 7: // Bottom Left unchanged            * 8: // Heigth centered' Left unchanged            * */          case 0: // centered' centered            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            _currentZoomTop = middley - _zoomHeight * 0.5f;            break;          case 2: // Width centered' Top unchanged            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            break;          case 8: // Heigth centered' Left unchanged            _currentZoomTop = middley - _zoomHeight * 0.5f;            break;          case 6: // Widht centered' Bottom unchanged            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            _currentZoomTop = yend - _zoomHeight;            break;          case 4: // Height centered' Right unchanged            _currentZoomTop = middley - _zoomHeight * 0.5f;            _currentZoomLeft = xend - _zoomWidth;            break;          case 1: // Top Left unchanged            break;          case 3: // Top Right unchanged            _currentZoomLeft = xend - _zoomWidth;            break;          case 7: // Bottom Left unchanged            _currentZoomTop = yend - _zoomHeight;            break;          case 5: // Bottom Right unchanged            _currentZoomTop = yend - _zoomHeight;            _currentZoomLeft = xend - _zoomWidth;            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomCurrent,The following statement contains a magic number: switch (_currentZoomType)        {            /* 0: // centered' centered            * 1: // Top Left unchanged            * 2: // Width centered' Top unchanged            * 3: // Top Right unchanged            * 4: // Height centered' Right unchanged            * 5: // Bottom Right unchanged            * 6: // Widht centered' Bottom unchanged            * 7: // Bottom Left unchanged            * 8: // Heigth centered' Left unchanged            * */          case 0: // centered' centered            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            _currentZoomTop = middley - _zoomHeight * 0.5f;            break;          case 2: // Width centered' Top unchanged            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            break;          case 8: // Heigth centered' Left unchanged            _currentZoomTop = middley - _zoomHeight * 0.5f;            break;          case 6: // Widht centered' Bottom unchanged            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            _currentZoomTop = yend - _zoomHeight;            break;          case 4: // Height centered' Right unchanged            _currentZoomTop = middley - _zoomHeight * 0.5f;            _currentZoomLeft = xend - _zoomWidth;            break;          case 1: // Top Left unchanged            break;          case 3: // Top Right unchanged            _currentZoomLeft = xend - _zoomWidth;            break;          case 7: // Bottom Left unchanged            _currentZoomTop = yend - _zoomHeight;            break;          case 5: // Bottom Right unchanged            _currentZoomTop = yend - _zoomHeight;            _currentZoomLeft = xend - _zoomWidth;            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomCurrent,The following statement contains a magic number: switch (_currentZoomType)        {            /* 0: // centered' centered            * 1: // Top Left unchanged            * 2: // Width centered' Top unchanged            * 3: // Top Right unchanged            * 4: // Height centered' Right unchanged            * 5: // Bottom Right unchanged            * 6: // Widht centered' Bottom unchanged            * 7: // Bottom Left unchanged            * 8: // Heigth centered' Left unchanged            * */          case 0: // centered' centered            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            _currentZoomTop = middley - _zoomHeight * 0.5f;            break;          case 2: // Width centered' Top unchanged            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            break;          case 8: // Heigth centered' Left unchanged            _currentZoomTop = middley - _zoomHeight * 0.5f;            break;          case 6: // Widht centered' Bottom unchanged            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            _currentZoomTop = yend - _zoomHeight;            break;          case 4: // Height centered' Right unchanged            _currentZoomTop = middley - _zoomHeight * 0.5f;            _currentZoomLeft = xend - _zoomWidth;            break;          case 1: // Top Left unchanged            break;          case 3: // Top Right unchanged            _currentZoomLeft = xend - _zoomWidth;            break;          case 7: // Bottom Left unchanged            _currentZoomTop = yend - _zoomHeight;            break;          case 5: // Bottom Right unchanged            _currentZoomTop = yend - _zoomHeight;            _currentZoomLeft = xend - _zoomWidth;            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomCurrent,The following statement contains a magic number: switch (_currentZoomType)        {            /* 0: // centered' centered            * 1: // Top Left unchanged            * 2: // Width centered' Top unchanged            * 3: // Top Right unchanged            * 4: // Height centered' Right unchanged            * 5: // Bottom Right unchanged            * 6: // Widht centered' Bottom unchanged            * 7: // Bottom Left unchanged            * 8: // Heigth centered' Left unchanged            * */          case 0: // centered' centered            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            _currentZoomTop = middley - _zoomHeight * 0.5f;            break;          case 2: // Width centered' Top unchanged            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            break;          case 8: // Heigth centered' Left unchanged            _currentZoomTop = middley - _zoomHeight * 0.5f;            break;          case 6: // Widht centered' Bottom unchanged            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            _currentZoomTop = yend - _zoomHeight;            break;          case 4: // Height centered' Right unchanged            _currentZoomTop = middley - _zoomHeight * 0.5f;            _currentZoomLeft = xend - _zoomWidth;            break;          case 1: // Top Left unchanged            break;          case 3: // Top Right unchanged            _currentZoomLeft = xend - _zoomWidth;            break;          case 7: // Bottom Left unchanged            _currentZoomTop = yend - _zoomHeight;            break;          case 5: // Bottom Right unchanged            _currentZoomTop = yend - _zoomHeight;            _currentZoomLeft = xend - _zoomWidth;            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomCurrent,The following statement contains a magic number: switch (_currentZoomType)        {            /* 0: // centered' centered            * 1: // Top Left unchanged            * 2: // Width centered' Top unchanged            * 3: // Top Right unchanged            * 4: // Height centered' Right unchanged            * 5: // Bottom Right unchanged            * 6: // Widht centered' Bottom unchanged            * 7: // Bottom Left unchanged            * 8: // Heigth centered' Left unchanged            * */          case 0: // centered' centered            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            _currentZoomTop = middley - _zoomHeight * 0.5f;            break;          case 2: // Width centered' Top unchanged            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            break;          case 8: // Heigth centered' Left unchanged            _currentZoomTop = middley - _zoomHeight * 0.5f;            break;          case 6: // Widht centered' Bottom unchanged            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            _currentZoomTop = yend - _zoomHeight;            break;          case 4: // Height centered' Right unchanged            _currentZoomTop = middley - _zoomHeight * 0.5f;            _currentZoomLeft = xend - _zoomWidth;            break;          case 1: // Top Left unchanged            break;          case 3: // Top Right unchanged            _currentZoomLeft = xend - _zoomWidth;            break;          case 7: // Bottom Left unchanged            _currentZoomTop = yend - _zoomHeight;            break;          case 5: // Bottom Right unchanged            _currentZoomTop = yend - _zoomHeight;            _currentZoomLeft = xend - _zoomWidth;            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomCurrent,The following statement contains a magic number: switch (_currentZoomType)        {            /* 0: // centered' centered            * 1: // Top Left unchanged            * 2: // Width centered' Top unchanged            * 3: // Top Right unchanged            * 4: // Height centered' Right unchanged            * 5: // Bottom Right unchanged            * 6: // Widht centered' Bottom unchanged            * 7: // Bottom Left unchanged            * 8: // Heigth centered' Left unchanged            * */          case 0: // centered' centered            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            _currentZoomTop = middley - _zoomHeight * 0.5f;            break;          case 2: // Width centered' Top unchanged            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            break;          case 8: // Heigth centered' Left unchanged            _currentZoomTop = middley - _zoomHeight * 0.5f;            break;          case 6: // Widht centered' Bottom unchanged            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            _currentZoomTop = yend - _zoomHeight;            break;          case 4: // Height centered' Right unchanged            _currentZoomTop = middley - _zoomHeight * 0.5f;            _currentZoomLeft = xend - _zoomWidth;            break;          case 1: // Top Left unchanged            break;          case 3: // Top Right unchanged            _currentZoomLeft = xend - _zoomWidth;            break;          case 7: // Bottom Left unchanged            _currentZoomTop = yend - _zoomHeight;            break;          case 5: // Bottom Right unchanged            _currentZoomTop = yend - _zoomHeight;            _currentZoomLeft = xend - _zoomWidth;            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomCurrent,The following statement contains a magic number: switch (_currentZoomType)        {            /* 0: // centered' centered            * 1: // Top Left unchanged            * 2: // Width centered' Top unchanged            * 3: // Top Right unchanged            * 4: // Height centered' Right unchanged            * 5: // Bottom Right unchanged            * 6: // Widht centered' Bottom unchanged            * 7: // Bottom Left unchanged            * 8: // Heigth centered' Left unchanged            * */          case 0: // centered' centered            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            _currentZoomTop = middley - _zoomHeight * 0.5f;            break;          case 2: // Width centered' Top unchanged            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            break;          case 8: // Heigth centered' Left unchanged            _currentZoomTop = middley - _zoomHeight * 0.5f;            break;          case 6: // Widht centered' Bottom unchanged            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            _currentZoomTop = yend - _zoomHeight;            break;          case 4: // Height centered' Right unchanged            _currentZoomTop = middley - _zoomHeight * 0.5f;            _currentZoomLeft = xend - _zoomWidth;            break;          case 1: // Top Left unchanged            break;          case 3: // Top Right unchanged            _currentZoomLeft = xend - _zoomWidth;            break;          case 7: // Bottom Left unchanged            _currentZoomTop = yend - _zoomHeight;            break;          case 5: // Bottom Right unchanged            _currentZoomTop = yend - _zoomHeight;            _currentZoomLeft = xend - _zoomWidth;            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomCurrent,The following statement contains a magic number: switch (_currentZoomType)        {            /* 0: // centered' centered            * 1: // Top Left unchanged            * 2: // Width centered' Top unchanged            * 3: // Top Right unchanged            * 4: // Height centered' Right unchanged            * 5: // Bottom Right unchanged            * 6: // Widht centered' Bottom unchanged            * 7: // Bottom Left unchanged            * 8: // Heigth centered' Left unchanged            * */          case 0: // centered' centered            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            _currentZoomTop = middley - _zoomHeight * 0.5f;            break;          case 2: // Width centered' Top unchanged            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            break;          case 8: // Heigth centered' Left unchanged            _currentZoomTop = middley - _zoomHeight * 0.5f;            break;          case 6: // Widht centered' Bottom unchanged            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            _currentZoomTop = yend - _zoomHeight;            break;          case 4: // Height centered' Right unchanged            _currentZoomTop = middley - _zoomHeight * 0.5f;            _currentZoomLeft = xend - _zoomWidth;            break;          case 1: // Top Left unchanged            break;          case 3: // Top Right unchanged            _currentZoomLeft = xend - _zoomWidth;            break;          case 7: // Bottom Left unchanged            _currentZoomTop = yend - _zoomHeight;            break;          case 5: // Bottom Right unchanged            _currentZoomTop = yend - _zoomHeight;            _currentZoomLeft = xend - _zoomWidth;            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomCurrent,The following statement contains a magic number: switch (_currentZoomType)        {            /* 0: // centered' centered            * 1: // Top Left unchanged            * 2: // Width centered' Top unchanged            * 3: // Top Right unchanged            * 4: // Height centered' Right unchanged            * 5: // Bottom Right unchanged            * 6: // Widht centered' Bottom unchanged            * 7: // Bottom Left unchanged            * 8: // Heigth centered' Left unchanged            * */          case 0: // centered' centered            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            _currentZoomTop = middley - _zoomHeight * 0.5f;            break;          case 2: // Width centered' Top unchanged            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            break;          case 8: // Heigth centered' Left unchanged            _currentZoomTop = middley - _zoomHeight * 0.5f;            break;          case 6: // Widht centered' Bottom unchanged            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            _currentZoomTop = yend - _zoomHeight;            break;          case 4: // Height centered' Right unchanged            _currentZoomTop = middley - _zoomHeight * 0.5f;            _currentZoomLeft = xend - _zoomWidth;            break;          case 1: // Top Left unchanged            break;          case 3: // Top Right unchanged            _currentZoomLeft = xend - _zoomWidth;            break;          case 7: // Bottom Left unchanged            _currentZoomTop = yend - _zoomHeight;            break;          case 5: // Bottom Right unchanged            _currentZoomTop = yend - _zoomHeight;            _currentZoomLeft = xend - _zoomWidth;            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomCurrent,The following statement contains a magic number: switch (_currentZoomType)        {            /* 0: // centered' centered            * 1: // Top Left unchanged            * 2: // Width centered' Top unchanged            * 3: // Top Right unchanged            * 4: // Height centered' Right unchanged            * 5: // Bottom Right unchanged            * 6: // Widht centered' Bottom unchanged            * 7: // Bottom Left unchanged            * 8: // Heigth centered' Left unchanged            * */          case 0: // centered' centered            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            _currentZoomTop = middley - _zoomHeight * 0.5f;            break;          case 2: // Width centered' Top unchanged            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            break;          case 8: // Heigth centered' Left unchanged            _currentZoomTop = middley - _zoomHeight * 0.5f;            break;          case 6: // Widht centered' Bottom unchanged            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            _currentZoomTop = yend - _zoomHeight;            break;          case 4: // Height centered' Right unchanged            _currentZoomTop = middley - _zoomHeight * 0.5f;            _currentZoomLeft = xend - _zoomWidth;            break;          case 1: // Top Left unchanged            break;          case 3: // Top Right unchanged            _currentZoomLeft = xend - _zoomWidth;            break;          case 7: // Bottom Left unchanged            _currentZoomTop = yend - _zoomHeight;            break;          case 5: // Bottom Right unchanged            _currentZoomTop = yend - _zoomHeight;            _currentZoomLeft = xend - _zoomWidth;            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomCurrent,The following statement contains a magic number: switch (_currentZoomType)        {            /* 0: // centered' centered            * 1: // Top Left unchanged            * 2: // Width centered' Top unchanged            * 3: // Top Right unchanged            * 4: // Height centered' Right unchanged            * 5: // Bottom Right unchanged            * 6: // Widht centered' Bottom unchanged            * 7: // Bottom Left unchanged            * 8: // Heigth centered' Left unchanged            * */          case 0: // centered' centered            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            _currentZoomTop = middley - _zoomHeight * 0.5f;            break;          case 2: // Width centered' Top unchanged            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            break;          case 8: // Heigth centered' Left unchanged            _currentZoomTop = middley - _zoomHeight * 0.5f;            break;          case 6: // Widht centered' Bottom unchanged            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            _currentZoomTop = yend - _zoomHeight;            break;          case 4: // Height centered' Right unchanged            _currentZoomTop = middley - _zoomHeight * 0.5f;            _currentZoomLeft = xend - _zoomWidth;            break;          case 1: // Top Left unchanged            break;          case 3: // Top Right unchanged            _currentZoomLeft = xend - _zoomWidth;            break;          case 7: // Bottom Left unchanged            _currentZoomTop = yend - _zoomHeight;            break;          case 5: // Bottom Right unchanged            _currentZoomTop = yend - _zoomHeight;            _currentZoomLeft = xend - _zoomWidth;            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomCurrent,The following statement contains a magic number: switch (_currentZoomType)        {            /* 0: // centered' centered            * 1: // Top Left unchanged            * 2: // Width centered' Top unchanged            * 3: // Top Right unchanged            * 4: // Height centered' Right unchanged            * 5: // Bottom Right unchanged            * 6: // Widht centered' Bottom unchanged            * 7: // Bottom Left unchanged            * 8: // Heigth centered' Left unchanged            * */          case 0: // centered' centered            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            _currentZoomTop = middley - _zoomHeight * 0.5f;            break;          case 2: // Width centered' Top unchanged            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            break;          case 8: // Heigth centered' Left unchanged            _currentZoomTop = middley - _zoomHeight * 0.5f;            break;          case 6: // Widht centered' Bottom unchanged            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            _currentZoomTop = yend - _zoomHeight;            break;          case 4: // Height centered' Right unchanged            _currentZoomTop = middley - _zoomHeight * 0.5f;            _currentZoomLeft = xend - _zoomWidth;            break;          case 1: // Top Left unchanged            break;          case 3: // Top Right unchanged            _currentZoomLeft = xend - _zoomWidth;            break;          case 7: // Bottom Left unchanged            _currentZoomTop = yend - _zoomHeight;            break;          case 5: // Bottom Right unchanged            _currentZoomTop = yend - _zoomHeight;            _currentZoomLeft = xend - _zoomWidth;            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomBackGround,The following statement contains a magic number: float middlex = _zoomLeftBackground + _zoomWidth / 2;
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomBackGround,The following statement contains a magic number: float middley = _zoomTopBackground + _zoomHeight / 2;
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomBackGround,The following statement contains a magic number: switch (_zoomTypeBackground)        {            /* 0: // centered' centered             * 1: // Top Left unchanged             * 2: // Width centered' Top unchanged             * 3: // Top Right unchanged             * 4: // Height centered' Right unchanged             * 5: // Bottom Right unchanged             * 6: // Widht centered' Bottom unchanged             * 7: // Bottom Left unchanged             * 8: // Heigth centered' Left unchanged             * */          case 0: // centered' centered            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            _zoomTopBackground = middley - _zoomHeight * 0.5f;            break;          case 2: // Width centered' Top unchanged            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            break;          case 8: // Heigth centered' Left unchanged            _zoomTopBackground = middley - _zoomHeight * 0.5f;            break;          case 6: // Widht centered' Bottom unchanged            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            _zoomTopBackground = yend - _zoomHeight;            break;          case 4: // Height centered' Right unchanged            _zoomTopBackground = middley - _zoomHeight * 0.5f;            _zoomLeftBackground = xend - _zoomWidth;            break;          case 1: // Top Left unchanged            break;          case 3: // Top Right unchanged            _zoomLeftBackground = xend - _zoomWidth;            break;          case 7: // Bottom Left unchanged            _zoomTopBackground = yend - _zoomHeight;            break;          case 5: // Bottom Right unchanged            _zoomTopBackground = yend - _zoomHeight;            _zoomLeftBackground = xend - _zoomWidth;            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomBackGround,The following statement contains a magic number: switch (_zoomTypeBackground)        {            /* 0: // centered' centered             * 1: // Top Left unchanged             * 2: // Width centered' Top unchanged             * 3: // Top Right unchanged             * 4: // Height centered' Right unchanged             * 5: // Bottom Right unchanged             * 6: // Widht centered' Bottom unchanged             * 7: // Bottom Left unchanged             * 8: // Heigth centered' Left unchanged             * */          case 0: // centered' centered            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            _zoomTopBackground = middley - _zoomHeight * 0.5f;            break;          case 2: // Width centered' Top unchanged            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            break;          case 8: // Heigth centered' Left unchanged            _zoomTopBackground = middley - _zoomHeight * 0.5f;            break;          case 6: // Widht centered' Bottom unchanged            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            _zoomTopBackground = yend - _zoomHeight;            break;          case 4: // Height centered' Right unchanged            _zoomTopBackground = middley - _zoomHeight * 0.5f;            _zoomLeftBackground = xend - _zoomWidth;            break;          case 1: // Top Left unchanged            break;          case 3: // Top Right unchanged            _zoomLeftBackground = xend - _zoomWidth;            break;          case 7: // Bottom Left unchanged            _zoomTopBackground = yend - _zoomHeight;            break;          case 5: // Bottom Right unchanged            _zoomTopBackground = yend - _zoomHeight;            _zoomLeftBackground = xend - _zoomWidth;            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomBackGround,The following statement contains a magic number: switch (_zoomTypeBackground)        {            /* 0: // centered' centered             * 1: // Top Left unchanged             * 2: // Width centered' Top unchanged             * 3: // Top Right unchanged             * 4: // Height centered' Right unchanged             * 5: // Bottom Right unchanged             * 6: // Widht centered' Bottom unchanged             * 7: // Bottom Left unchanged             * 8: // Heigth centered' Left unchanged             * */          case 0: // centered' centered            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            _zoomTopBackground = middley - _zoomHeight * 0.5f;            break;          case 2: // Width centered' Top unchanged            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            break;          case 8: // Heigth centered' Left unchanged            _zoomTopBackground = middley - _zoomHeight * 0.5f;            break;          case 6: // Widht centered' Bottom unchanged            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            _zoomTopBackground = yend - _zoomHeight;            break;          case 4: // Height centered' Right unchanged            _zoomTopBackground = middley - _zoomHeight * 0.5f;            _zoomLeftBackground = xend - _zoomWidth;            break;          case 1: // Top Left unchanged            break;          case 3: // Top Right unchanged            _zoomLeftBackground = xend - _zoomWidth;            break;          case 7: // Bottom Left unchanged            _zoomTopBackground = yend - _zoomHeight;            break;          case 5: // Bottom Right unchanged            _zoomTopBackground = yend - _zoomHeight;            _zoomLeftBackground = xend - _zoomWidth;            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomBackGround,The following statement contains a magic number: switch (_zoomTypeBackground)        {            /* 0: // centered' centered             * 1: // Top Left unchanged             * 2: // Width centered' Top unchanged             * 3: // Top Right unchanged             * 4: // Height centered' Right unchanged             * 5: // Bottom Right unchanged             * 6: // Widht centered' Bottom unchanged             * 7: // Bottom Left unchanged             * 8: // Heigth centered' Left unchanged             * */          case 0: // centered' centered            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            _zoomTopBackground = middley - _zoomHeight * 0.5f;            break;          case 2: // Width centered' Top unchanged            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            break;          case 8: // Heigth centered' Left unchanged            _zoomTopBackground = middley - _zoomHeight * 0.5f;            break;          case 6: // Widht centered' Bottom unchanged            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            _zoomTopBackground = yend - _zoomHeight;            break;          case 4: // Height centered' Right unchanged            _zoomTopBackground = middley - _zoomHeight * 0.5f;            _zoomLeftBackground = xend - _zoomWidth;            break;          case 1: // Top Left unchanged            break;          case 3: // Top Right unchanged            _zoomLeftBackground = xend - _zoomWidth;            break;          case 7: // Bottom Left unchanged            _zoomTopBackground = yend - _zoomHeight;            break;          case 5: // Bottom Right unchanged            _zoomTopBackground = yend - _zoomHeight;            _zoomLeftBackground = xend - _zoomWidth;            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomBackGround,The following statement contains a magic number: switch (_zoomTypeBackground)        {            /* 0: // centered' centered             * 1: // Top Left unchanged             * 2: // Width centered' Top unchanged             * 3: // Top Right unchanged             * 4: // Height centered' Right unchanged             * 5: // Bottom Right unchanged             * 6: // Widht centered' Bottom unchanged             * 7: // Bottom Left unchanged             * 8: // Heigth centered' Left unchanged             * */          case 0: // centered' centered            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            _zoomTopBackground = middley - _zoomHeight * 0.5f;            break;          case 2: // Width centered' Top unchanged            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            break;          case 8: // Heigth centered' Left unchanged            _zoomTopBackground = middley - _zoomHeight * 0.5f;            break;          case 6: // Widht centered' Bottom unchanged            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            _zoomTopBackground = yend - _zoomHeight;            break;          case 4: // Height centered' Right unchanged            _zoomTopBackground = middley - _zoomHeight * 0.5f;            _zoomLeftBackground = xend - _zoomWidth;            break;          case 1: // Top Left unchanged            break;          case 3: // Top Right unchanged            _zoomLeftBackground = xend - _zoomWidth;            break;          case 7: // Bottom Left unchanged            _zoomTopBackground = yend - _zoomHeight;            break;          case 5: // Bottom Right unchanged            _zoomTopBackground = yend - _zoomHeight;            _zoomLeftBackground = xend - _zoomWidth;            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomBackGround,The following statement contains a magic number: switch (_zoomTypeBackground)        {            /* 0: // centered' centered             * 1: // Top Left unchanged             * 2: // Width centered' Top unchanged             * 3: // Top Right unchanged             * 4: // Height centered' Right unchanged             * 5: // Bottom Right unchanged             * 6: // Widht centered' Bottom unchanged             * 7: // Bottom Left unchanged             * 8: // Heigth centered' Left unchanged             * */          case 0: // centered' centered            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            _zoomTopBackground = middley - _zoomHeight * 0.5f;            break;          case 2: // Width centered' Top unchanged            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            break;          case 8: // Heigth centered' Left unchanged            _zoomTopBackground = middley - _zoomHeight * 0.5f;            break;          case 6: // Widht centered' Bottom unchanged            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            _zoomTopBackground = yend - _zoomHeight;            break;          case 4: // Height centered' Right unchanged            _zoomTopBackground = middley - _zoomHeight * 0.5f;            _zoomLeftBackground = xend - _zoomWidth;            break;          case 1: // Top Left unchanged            break;          case 3: // Top Right unchanged            _zoomLeftBackground = xend - _zoomWidth;            break;          case 7: // Bottom Left unchanged            _zoomTopBackground = yend - _zoomHeight;            break;          case 5: // Bottom Right unchanged            _zoomTopBackground = yend - _zoomHeight;            _zoomLeftBackground = xend - _zoomWidth;            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomBackGround,The following statement contains a magic number: switch (_zoomTypeBackground)        {            /* 0: // centered' centered             * 1: // Top Left unchanged             * 2: // Width centered' Top unchanged             * 3: // Top Right unchanged             * 4: // Height centered' Right unchanged             * 5: // Bottom Right unchanged             * 6: // Widht centered' Bottom unchanged             * 7: // Bottom Left unchanged             * 8: // Heigth centered' Left unchanged             * */          case 0: // centered' centered            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            _zoomTopBackground = middley - _zoomHeight * 0.5f;            break;          case 2: // Width centered' Top unchanged            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            break;          case 8: // Heigth centered' Left unchanged            _zoomTopBackground = middley - _zoomHeight * 0.5f;            break;          case 6: // Widht centered' Bottom unchanged            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            _zoomTopBackground = yend - _zoomHeight;            break;          case 4: // Height centered' Right unchanged            _zoomTopBackground = middley - _zoomHeight * 0.5f;            _zoomLeftBackground = xend - _zoomWidth;            break;          case 1: // Top Left unchanged            break;          case 3: // Top Right unchanged            _zoomLeftBackground = xend - _zoomWidth;            break;          case 7: // Bottom Left unchanged            _zoomTopBackground = yend - _zoomHeight;            break;          case 5: // Bottom Right unchanged            _zoomTopBackground = yend - _zoomHeight;            _zoomLeftBackground = xend - _zoomWidth;            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomBackGround,The following statement contains a magic number: switch (_zoomTypeBackground)        {            /* 0: // centered' centered             * 1: // Top Left unchanged             * 2: // Width centered' Top unchanged             * 3: // Top Right unchanged             * 4: // Height centered' Right unchanged             * 5: // Bottom Right unchanged             * 6: // Widht centered' Bottom unchanged             * 7: // Bottom Left unchanged             * 8: // Heigth centered' Left unchanged             * */          case 0: // centered' centered            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            _zoomTopBackground = middley - _zoomHeight * 0.5f;            break;          case 2: // Width centered' Top unchanged            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            break;          case 8: // Heigth centered' Left unchanged            _zoomTopBackground = middley - _zoomHeight * 0.5f;            break;          case 6: // Widht centered' Bottom unchanged            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            _zoomTopBackground = yend - _zoomHeight;            break;          case 4: // Height centered' Right unchanged            _zoomTopBackground = middley - _zoomHeight * 0.5f;            _zoomLeftBackground = xend - _zoomWidth;            break;          case 1: // Top Left unchanged            break;          case 3: // Top Right unchanged            _zoomLeftBackground = xend - _zoomWidth;            break;          case 7: // Bottom Left unchanged            _zoomTopBackground = yend - _zoomHeight;            break;          case 5: // Bottom Right unchanged            _zoomTopBackground = yend - _zoomHeight;            _zoomLeftBackground = xend - _zoomWidth;            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomBackGround,The following statement contains a magic number: switch (_zoomTypeBackground)        {            /* 0: // centered' centered             * 1: // Top Left unchanged             * 2: // Width centered' Top unchanged             * 3: // Top Right unchanged             * 4: // Height centered' Right unchanged             * 5: // Bottom Right unchanged             * 6: // Widht centered' Bottom unchanged             * 7: // Bottom Left unchanged             * 8: // Heigth centered' Left unchanged             * */          case 0: // centered' centered            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            _zoomTopBackground = middley - _zoomHeight * 0.5f;            break;          case 2: // Width centered' Top unchanged            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            break;          case 8: // Heigth centered' Left unchanged            _zoomTopBackground = middley - _zoomHeight * 0.5f;            break;          case 6: // Widht centered' Bottom unchanged            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            _zoomTopBackground = yend - _zoomHeight;            break;          case 4: // Height centered' Right unchanged            _zoomTopBackground = middley - _zoomHeight * 0.5f;            _zoomLeftBackground = xend - _zoomWidth;            break;          case 1: // Top Left unchanged            break;          case 3: // Top Right unchanged            _zoomLeftBackground = xend - _zoomWidth;            break;          case 7: // Bottom Left unchanged            _zoomTopBackground = yend - _zoomHeight;            break;          case 5: // Bottom Right unchanged            _zoomTopBackground = yend - _zoomHeight;            _zoomLeftBackground = xend - _zoomWidth;            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomBackGround,The following statement contains a magic number: switch (_zoomTypeBackground)        {            /* 0: // centered' centered             * 1: // Top Left unchanged             * 2: // Width centered' Top unchanged             * 3: // Top Right unchanged             * 4: // Height centered' Right unchanged             * 5: // Bottom Right unchanged             * 6: // Widht centered' Bottom unchanged             * 7: // Bottom Left unchanged             * 8: // Heigth centered' Left unchanged             * */          case 0: // centered' centered            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            _zoomTopBackground = middley - _zoomHeight * 0.5f;            break;          case 2: // Width centered' Top unchanged            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            break;          case 8: // Heigth centered' Left unchanged            _zoomTopBackground = middley - _zoomHeight * 0.5f;            break;          case 6: // Widht centered' Bottom unchanged            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            _zoomTopBackground = yend - _zoomHeight;            break;          case 4: // Height centered' Right unchanged            _zoomTopBackground = middley - _zoomHeight * 0.5f;            _zoomLeftBackground = xend - _zoomWidth;            break;          case 1: // Top Left unchanged            break;          case 3: // Top Right unchanged            _zoomLeftBackground = xend - _zoomWidth;            break;          case 7: // Bottom Left unchanged            _zoomTopBackground = yend - _zoomHeight;            break;          case 5: // Bottom Right unchanged            _zoomTopBackground = yend - _zoomHeight;            _zoomLeftBackground = xend - _zoomWidth;            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomBackGround,The following statement contains a magic number: switch (_zoomTypeBackground)        {            /* 0: // centered' centered             * 1: // Top Left unchanged             * 2: // Width centered' Top unchanged             * 3: // Top Right unchanged             * 4: // Height centered' Right unchanged             * 5: // Bottom Right unchanged             * 6: // Widht centered' Bottom unchanged             * 7: // Bottom Left unchanged             * 8: // Heigth centered' Left unchanged             * */          case 0: // centered' centered            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            _zoomTopBackground = middley - _zoomHeight * 0.5f;            break;          case 2: // Width centered' Top unchanged            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            break;          case 8: // Heigth centered' Left unchanged            _zoomTopBackground = middley - _zoomHeight * 0.5f;            break;          case 6: // Widht centered' Bottom unchanged            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            _zoomTopBackground = yend - _zoomHeight;            break;          case 4: // Height centered' Right unchanged            _zoomTopBackground = middley - _zoomHeight * 0.5f;            _zoomLeftBackground = xend - _zoomWidth;            break;          case 1: // Top Left unchanged            break;          case 3: // Top Right unchanged            _zoomLeftBackground = xend - _zoomWidth;            break;          case 7: // Bottom Left unchanged            _zoomTopBackground = yend - _zoomHeight;            break;          case 5: // Bottom Right unchanged            _zoomTopBackground = yend - _zoomHeight;            _zoomLeftBackground = xend - _zoomWidth;            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomBackGround,The following statement contains a magic number: switch (_zoomTypeBackground)        {            /* 0: // centered' centered             * 1: // Top Left unchanged             * 2: // Width centered' Top unchanged             * 3: // Top Right unchanged             * 4: // Height centered' Right unchanged             * 5: // Bottom Right unchanged             * 6: // Widht centered' Bottom unchanged             * 7: // Bottom Left unchanged             * 8: // Heigth centered' Left unchanged             * */          case 0: // centered' centered            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            _zoomTopBackground = middley - _zoomHeight * 0.5f;            break;          case 2: // Width centered' Top unchanged            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            break;          case 8: // Heigth centered' Left unchanged            _zoomTopBackground = middley - _zoomHeight * 0.5f;            break;          case 6: // Widht centered' Bottom unchanged            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            _zoomTopBackground = yend - _zoomHeight;            break;          case 4: // Height centered' Right unchanged            _zoomTopBackground = middley - _zoomHeight * 0.5f;            _zoomLeftBackground = xend - _zoomWidth;            break;          case 1: // Top Left unchanged            break;          case 3: // Top Right unchanged            _zoomLeftBackground = xend - _zoomWidth;            break;          case 7: // Bottom Left unchanged            _zoomTopBackground = yend - _zoomHeight;            break;          case 5: // Bottom Right unchanged            _zoomTopBackground = yend - _zoomHeight;            _zoomLeftBackground = xend - _zoomWidth;            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomBackGround,The following statement contains a magic number: switch (_zoomTypeBackground)        {            /* 0: // centered' centered             * 1: // Top Left unchanged             * 2: // Width centered' Top unchanged             * 3: // Top Right unchanged             * 4: // Height centered' Right unchanged             * 5: // Bottom Right unchanged             * 6: // Widht centered' Bottom unchanged             * 7: // Bottom Left unchanged             * 8: // Heigth centered' Left unchanged             * */          case 0: // centered' centered            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            _zoomTopBackground = middley - _zoomHeight * 0.5f;            break;          case 2: // Width centered' Top unchanged            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            break;          case 8: // Heigth centered' Left unchanged            _zoomTopBackground = middley - _zoomHeight * 0.5f;            break;          case 6: // Widht centered' Bottom unchanged            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            _zoomTopBackground = yend - _zoomHeight;            break;          case 4: // Height centered' Right unchanged            _zoomTopBackground = middley - _zoomHeight * 0.5f;            _zoomLeftBackground = xend - _zoomWidth;            break;          case 1: // Top Left unchanged            break;          case 3: // Top Right unchanged            _zoomLeftBackground = xend - _zoomWidth;            break;          case 7: // Bottom Left unchanged            _zoomTopBackground = yend - _zoomHeight;            break;          case 5: // Bottom Right unchanged            _zoomTopBackground = yend - _zoomHeight;            _zoomLeftBackground = xend - _zoomWidth;            break;        }
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,LoadSettings,The following statement contains a magic number: _speed = xmlreader.GetValueAsInt("pictures"' "speed"' 3);
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,LoadSettings,The following statement contains a magic number: _slideShowTransistionFrames = xmlreader.GetValueAsInt("pictures"' "transition"' 20);
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,LoadSettings,The following statement contains a magic number: _kenBurnTransistionSpeed = xmlreader.GetValueAsInt("pictures"' "kenburnsspeed"' 20);
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,StartBackgroundMusic,The following statement contains a magic number: int shuffleCount = r.Next() % 50;
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ShowSong,The following statement contains a magic number: dlg.SetHeading(4540);
Magic Number,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ShowSong,The following statement contains a magic number: dlg.TimeOut = 5;
Magic Number,MediaPortal.GUI.Pictures,PicturesFolderWatcherHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\PicturesFolderWatcherHelper.cs,WatchFolders,The following statement contains a magic number: _Events = ArrayList.Synchronized(new ArrayList(64));
Duplicate Code,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,LoadDateView,The method contains a code clone-set at the following line numbers (starting from the method definition): ((106' 125)' (154' 173))
Duplicate Code,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,LoadDateViewSelect,The method contains a code clone-set at the following line numbers (starting from the method definition): ((69' 88)' (110' 129))
Duplicate Code,MediaPortal.GUI.Pictures,PictureSort,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\PictureSort.cs,Compare,The method contains a code clone-set at the following line numbers (starting from the method definition): ((89' 114)' (268' 293))
Duplicate Code,MediaPortal.GUI.Pictures,PictureSort,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\PictureSort.cs,Compare,The method contains a code clone-set at the following line numbers (starting from the method definition): ((117' 138)' (189' 210))
Missing Default,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,GUIWindowManager_OnNewMessage,The following switch statement is missing a default case: switch (message.Message)       {         case GUIMessage.MessageType.GUI_MSG_AUTOPLAY_VOLUME:           if (message.Param1 == (int)Ripper.AutoPlay.MediaType.PHOTO)           {             if (message.Param2 == (int)Ripper.AutoPlay.MediaSubType.FILES)             {               currentFolder = message.Label;               OnSlideShowRecursive();             }           }           break;           case GUIMessage.MessageType.GUI_MSG_ONRESUME:            using (Settings xmlreader = new MPSettings())            {              if (!xmlreader.GetValueAsBool("general"' "showlastactivemodule"' false))              {                currentFolder = string.Empty;        }     }            Log.Debug("{0}:{1}"' SerializeName' message.Message);            break;       }
Missing Default,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)       {         case GUIMessage.MessageType.GUI_MSG_START_SLIDESHOW:           string strUrl = message.Label;           LoadDirectory(strUrl);           OnSlideShow();           break;          case GUIMessage.MessageType.GUI_MSG_AUTOPLAY_VOLUME:           currentFolder = message.Label;           OnSlideShowRecursive();           break;          case GUIMessage.MessageType.GUI_MSG_SHOW_DIRECTORY:           currentFolder = message.Label;           LoadDirectory(currentFolder);           break;          case GUIMessage.MessageType.GUI_MSG_ADD_REMOVABLE_DRIVE:           if (_switchRemovableDrives)           {             currentFolder = message.Label;             if (!Util.Utils.IsRemovable(message.Label))             {               _virtualDirectory.AddRemovableDrive(message.Label' message.Label2);             }           }           if (_removableDrivesHandlerThread != null)            {              _removableDrivesHandlerThread.Join();            }           RemovableDrivesHandler.ListRemovableDrives(_virtualDirectory.GetDirectoryExt(string.Empty));            LoadDirectory(currentFolder);           break;          case GUIMessage.MessageType.GUI_MSG_REMOVE_REMOVABLE_DRIVE:           if (!Util.Utils.IsRemovable(message.Label))           {             _virtualDirectory.Remove(message.Label);           }           if (currentFolder.Contains(message.Label))           {             currentFolder = string.Empty;           }           LoadDirectory(currentFolder);           break;          case GUIMessage.MessageType.GUI_MSG_FILE_DOWNLOADING:           GUIFacadeControl pControl = (GUIFacadeControl)GetControl(facadeLayout.GetID);           pControl.OnMessage(message);           break;          case GUIMessage.MessageType.GUI_MSG_FILE_DOWNLOADED:           GUIFacadeControl pControl2 = (GUIFacadeControl)GetControl(facadeLayout.GetID);           pControl2.OnMessage(message);           break;          case GUIMessage.MessageType.GUI_MSG_VOLUME_INSERTED:         case GUIMessage.MessageType.GUI_MSG_VOLUME_REMOVED:           if (currentFolder == string.Empty || currentFolder.Substring(0' 2) == message.Label)           {             currentFolder = string.Empty;             LoadDirectory(currentFolder);           }           break;          case GUIMessage.MessageType.GUI_MSG_ITEM_SELECT:         case GUIMessage.MessageType.GUI_MSG_CLICKED:            // Respond to the correct control.  The value is retrived directly from the control by the called handler.           if (message.TargetControlId == btnViews.GetID)           {             SetView(btnViews.SelectedItemValue);             GUIControl.FocusControl(GetID' btnViews.GetID);           }           break;           case GUIMessage.MessageType.GUI_MSG_LAYOUT_CHANGED:            FolderSetting folderSetting = new FolderSetting();            folderSetting.UpdateFolders(-1' CurrentSortAsc' (int)currentLayout);            break;           case GUIMessage.MessageType.GUI_MSG_PICTURESFILE_CREATED:            if (disp == Display.Files)            {              AddItem(message.Label' -1);        }           break;            case GUIMessage.MessageType.GUI_MSG_PICTURESFILE_DELETED:            if (disp == Display.Files)            {              DeleteItem(message.Label);              SelectCurrentItem();            }            break;            case GUIMessage.MessageType.GUI_MSG_PICTURESFILE_RENAMED:            if (disp == Display.Files)            {              ReplaceItem(message.Label2' message.Label);              SelectCurrentItem();            }            break;            case GUIMessage.MessageType.GUI_MSG_PICTURESDIRECTORY_CREATED:            if (disp == Display.Files)            {              AddItem(message.Label' -1);            }            break;            case GUIMessage.MessageType.GUI_MSG_PICTURESDIRECTORY_DELETED:            if (disp == Display.Files)            {              DeleteItem(message.Label);              SelectCurrentItem();            }            break;            case GUIMessage.MessageType.GUI_MSG_PICTURESDIRECTORY_RENAMED:            if (disp == Display.Files)            {              ReplaceItem(message.Label2' message.Label);              SelectCurrentItem();            }            break;       }
Missing Default,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,SetView,The following switch statement is missing a default case: switch (selectedViewId)       {         case 0: // Shares           if (disp != Display.Files)           {             disp = Display.Files;             LoadDirectory(m_strDirectoryStart);           }           break;          case 1: // Date           if (disp != Display.Date)           {             disp = Display.Date;             LoadDirectory("");           }           break;       }
Missing Default,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,OnShowContextMenu,The following switch statement is missing a default case: switch (dlg.SelectedId)       {         case 457: //Switch View            ;            break;                  case 735: // rotate           OnRotatePicture(90);           break;          case 783: // rotate 180           OnRotatePicture(180);           break;          case 784: // rotate 270           OnRotatePicture(270);           break;          case 923: // show           OnClick(itemNo);           break;          case 108: // start slideshow           OnClickSlideShow(itemNo);           break;          case 940: // properties           OnInfo(itemNo);           break;          case 500: // File menu           // get pincode           if (fileMenuPinCode != string.Empty)           {             string strUserCode = string.Empty;             if (GetUserPasswordString(ref strUserCode) && strUserCode == fileMenuPinCode)             {               OnShowFileMenu();             }           }           else           {             OnShowFileMenu();           }           break;           case 1240: // Protected content          case 1241: // Protected content            OnContentLock();            break;            case 190000: // Abort thumbnail creation thread           if (_refreshThumbnailsThread != null && _refreshThumbnailsThread.IsAlive)            {              _refreshThumbnailsThreadAbort = true;            }           break;          case 190001: // Create missing thumbnails (incl. subfolders)            if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' false' true);            }           break;         case 200047: // Recreate all thumbnails (incl. subfolders)           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' true);           }           break;         case 200048: // Regenerate Thumbnails           if (item != null && item.IsFolder)           {             OnCreateAllThumbs(item' true' false);           }           break;         case 831:           string message;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {             if (!RemovableDriveHelper.EjectDrive(item.Path' out message))             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));               pDlgOK.SetLine(2' string.Empty);               pDlgOK.SetLine(3' message);               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }             else             {               GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);               pDlgOK.SetHeading(831);               pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));               pDlgOK.DoModal(GUIWindowManager.ActiveWindow);             }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;          case 607: // Load (only CDROM)            if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }            break;         case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;           case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);        }     }           break;       }
Missing Default,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,AddItem,The following switch statement is missing a default case: switch (method)            {              case SortMethod.Name:                item.Label2 = Util.Utils.GetSize(item.FileInfo.Length);                break;              case SortMethod.Modified:              case SortMethod.Created:                if (method == SortMethod.Modified)                {                  item.Label2 = item.FileInfo.ModificationTime.ToShortDateString() + " " +                                 item.FileInfo.ModificationTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat);                }                else                {                  item.Label2 = item.FileInfo.CreationTime.ToShortDateString() + " " +                                 item.FileInfo.CreationTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat);                }                break;              case SortMethod.Size:                item.Label2 = Util.Utils.GetSize(item.FileInfo.Length);                break;            }
Missing Default,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,UpdateButtonStates,The following switch statement is missing a default case: switch (method)       {         case SortMethod.Name:           textLine = GUILocalizeStrings.Get(103);           break;         case SortMethod.Modified:           textLine = GUILocalizeStrings.Get(1221);           break;         case SortMethod.Created:           textLine = GUILocalizeStrings.Get(1220);           break;         case SortMethod.Size:           textLine = GUILocalizeStrings.Get(105);           break;       }
Missing Default,MediaPortal.GUI.Pictures,GUIPictures,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUIPictures.cs,Compare,The following switch statement is missing a default case: switch (method)       {         case SortMethod.Name:           item1.Label2 = sizeItem1;           item2.Label2 = sizeItem2;            if (sortAsc)           {             return Util.StringLogicalComparer.Compare(item1.Label' item2.Label);           }           else           {             return Util.StringLogicalComparer.Compare(item2.Label' item1.Label);           }           case SortMethod.Modified:         case SortMethod.Created:           if (item1.FileInfo == null)           {             return -1;           }           if (item2.FileInfo == null)           {             return -1;           }            if (method == SortMethod.Modified)           {             item1.Label2 = item1.FileInfo.ModificationTime.ToShortDateString() + " " +                            item1.FileInfo.ModificationTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat);             item2.Label2 = item2.FileInfo.ModificationTime.ToShortDateString() + " " +                            item2.FileInfo.ModificationTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat);           }           else           {             item1.Label2 = item1.FileInfo.CreationTime.ToShortDateString() + " " +                            item1.FileInfo.CreationTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat);             item2.Label2 = item2.FileInfo.CreationTime.ToShortDateString() + " " +                            item2.FileInfo.CreationTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat);           }            if (sortAsc)           {             if (method == SortMethod.Modified)               return DateTime.Compare(item1.FileInfo.ModificationTime' item2.FileInfo.ModificationTime);             else               return DateTime.Compare(item1.FileInfo.CreationTime' item2.FileInfo.CreationTime);           }           else           {             if (method == SortMethod.Modified)               return DateTime.Compare(item2.FileInfo.ModificationTime' item1.FileInfo.ModificationTime);             else               return DateTime.Compare(item2.FileInfo.CreationTime' item1.FileInfo.CreationTime);           }          case SortMethod.Size:           if (item1.FileInfo == null)           {             return -1;           }           if (item2.FileInfo == null)           {             return -1;           }           item1.Label2 = sizeItem1;           item2.Label2 = sizeItem2;           if (sortAsc)           {             long compare = (item1.FileInfo.Length - item2.FileInfo.Length);             return compare == 0 ? 0 : compare < 0 ? -1 : 1;           }           else           {             long compare = (item2.FileInfo.Length - item1.FileInfo.Length);             return compare == 0 ? 0 : compare < 0 ? -1 : 1;           }       }
Missing Default,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            _showOverlayFlag = GUIGraphicsContext.Overlay;            GUIGraphicsContext.Overlay = false;            base.OnMessage(message);              if (_returnedFromVideoPlayback)            {              if (GUIPictureSlideShow.SlideDirection == 1)              {                ShowNext();              }              //Backward              if (GUIPictureSlideShow.SlideDirection == -1)              {                ShowPrevious();              }              if (GUIPictureSlideShow.SlideDirection == 0)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                GUIWindowManager.ShowPreviousWindow();              }            }            else            {              _update = false;              _lastSlideShown = -1;              _currentSlideIndex = -1;            }            // LoadSettings();            return true;            case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:            if (!_returnedFromVideoPlayback && !_loadVideoPlayback)            {              // Get folder path for recursive selectedItemIndex.              if (_slideList.Count != 0)              {                _folderCurrentItem = _slideList[_currentSlideIndex];              }              Reset();            }            GUIGraphicsContext.Overlay = _showOverlayFlag;            break;        }
Missing Default,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)        {          case Action.ActionType.ACTION_MOUSE_CLICK:            int x = (int)action.fAmount1;              if (!_isPictureZoomed)            {              // Divide screen into three sections (previous / pause / next)              if (x < (GUIGraphicsContext.OverScanWidth / 3))              {                ShowPrevious();              }              else if (x > (GUIGraphicsContext.OverScanWidth / 3) * 2)              {                ShowNext();              }              else if (_isSlideShow)              {                _isPaused = !_isPaused;              }            }            else            {              _userZoomLevel = 1.0f;              ZoomBackGround(_defaultZoomFactor);              _isPaused = false;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_STOP:          case Action.ActionType.ACTION_PREVIOUS_MENU:            if (_returnedFromVideoPlayback)            {              _returnedFromVideoPlayback = false;            }            GUIPictureSlideShow.SlideDirection = 0;            ShowPreviousWindow();            break;            case Action.ActionType.ACTION_DELETE_ITEM:            OnDelete();            break;            case Action.ActionType.ACTION_PREV_ITEM:          case Action.ActionType.ACTION_PREV_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowPrevious(true);              GUIPictureSlideShow._slideDirection = -1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = -1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex - 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex - 1]))                {                  GUIPictureSlideShow._slideDirection = -1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              ShowPrevious();            }            else            {              // Move picture              _zoomLeftBackground -= 25;              if (_zoomLeftBackground < 0)              {                _zoomLeftBackground = 0;              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_NEXT_ITEM:          case Action.ActionType.ACTION_NEXT_PICTURE:            if (_lastSegmentIndex != -1)            {              ShowNext(false' true);              GUIPictureSlideShow._slideDirection = 1;            }            else if (_isSlideShow)            {              GUIPictureSlideShow._slideDirection = 1;            }            else if (_currentSlideIndex > 0)            {              if (_currentSlideIndex + 1 < _slideList.Count)              {                if (Util.Utils.IsVideo(_slideList[_currentSlideIndex + 1]))                {                  GUIPictureSlideShow._slideDirection = 1;                }              }            }            else            {              GUIPictureSlideShow._slideDirection = 0;            }              if (!_isPictureZoomed)            {              if ((_currentSlideIndex >= _slideList.Count - 1) && !_autoRepeat)              {                // Get folder path for recursive selectedItemIndex.                if (_slideList.Count != 0)                {                  _folderCurrentItem = _slideList[_currentSlideIndex];                }                // We reach the end of slideshow                GUIPictureSlideShow._slideDirection = 0;                ShowPreviousWindow();              }              else              {                ShowNext(false' true);              }            }            else            {              // Move picture              _zoomLeftBackground += 25;              if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)              {                _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);              }              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_MOVE_LEFT:            _zoomLeftBackground -= 25;            if (_zoomLeftBackground < 0)            {              _zoomLeftBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_RIGHT:            _zoomLeftBackground += 25;            if (_zoomLeftBackground > (int)_backgroundSlide.Width - _zoomWidth)            {              _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_DOWN:            if (_isPictureZoomed)            {              _zoomTopBackground += 25;            }            if (_zoomTopBackground > (int)_backgroundSlide.Height - _zoomHeight)            {              _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_MOVE_UP:            if (_isPictureZoomed)            {              _zoomTopBackground -= 25;            }            if (_zoomTopBackground < 0)            {              _zoomTopBackground = 0;            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_SHOW_INFO:            if (_infoVisible)            {              _infoVisible = false;              _zoomInfoVisible = false;            }            else            {              if (_isPictureZoomed)              {                _zoomInfoVisible = true;              }              _infoVisible = true;              _autoHideOsd = true;              _slideTime = (int)(DateTime.Now.Ticks / 10000);            }            break;            case Action.ActionType.ACTION_PAUSE_PICTURE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_PAUSE:            if (_isSlideShow)            {              if (_isPictureZoomed)              {                _userZoomLevel = 1.0f;                ZoomBackGround(_defaultZoomFactor);                _isPaused = false;              }              else              {                _isPaused = !_isPaused;              }            }            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_OUT:            if (_userZoomLevel == 1.0f)            {              break; // picture has already min Zoom value            }              _userZoomLevel -= 0.25f; //decrease the zoomLevel            if (_userZoomLevel < 1.0f) //if zoom level < 1.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 1.0f; //  so set it to 1.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_IN:            if (_userZoomLevel == 20.0f)            {              break; // picture has already max Zoom value            }              _userZoomLevel += 0.25f; //increase the zoomLevel            if (_userZoomLevel > 20.0f) //if zoom level > 20.0f' then anywhere zoomLevel is not changed in 0.25f steps            {              _userZoomLevel = 20.0f; //  so set it to 20.0f            }              ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE:            DoRotate();            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_180:            DoRotate(180);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ROTATE_PICTURE_270:            DoRotate(270);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;            case Action.ActionType.ACTION_ZOOM_LEVEL_NORMAL:            _userZoomLevel = 1.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_1:            _userZoomLevel = 1.5f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_2:            _userZoomLevel = 2.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_3:            _userZoomLevel = 3.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_4:            _userZoomLevel = 4.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_5:            _userZoomLevel = 5.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_6:            _userZoomLevel = 6.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_7:            _userZoomLevel = 7.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_8:            _userZoomLevel = 8.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ZOOM_LEVEL_9:            _userZoomLevel = 9.0f;            ZoomBackGround(_defaultZoomFactor * _userZoomLevel);            _slideTime = (int)(DateTime.Now.Ticks / 10000);            break;          case Action.ActionType.ACTION_ANALOG_MOVE:            float fX = 2 * action.fAmount1;            float fY = 2 * action.fAmount2;            if (fX != 0.0f || fY != 0.0f)            {              if (_isPictureZoomed)              {                _zoomLeftBackground += (int)fX;                _zoomTopBackground -= (int)fY;                if (_zoomTopBackground < 0)                {                  _zoomTopBackground = 0;                }                if (_zoomLeftBackground < 0)                {                  _zoomLeftBackground = 0;                }                if (_zoomTopBackground > _backgroundSlide.Height - _zoomHeight)                {                  _zoomTopBackground = (_backgroundSlide.Height - _zoomHeight);                }                if (_zoomLeftBackground > _backgroundSlide.Width - _zoomWidth)                {                  _zoomLeftBackground = (_backgroundSlide.Width - _zoomWidth);                }                  _slideTime = (int)(DateTime.Now.Ticks / 10000);              }            }            break;            case Action.ActionType.ACTION_CONTEXT_MENU:            ShowContextMenu();            break;        }
Missing Default,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,Render,The following switch statement is missing a default case: switch (_transitionMethod)          {            case 0:              bResult = RenderMethod1(); // open from left->right              break;            case 1:              bResult = RenderMethod2(); // move into the screen from left->right              break;            case 2:              bResult = RenderMethod3(); // move into the screen from right->left              break;            case 3:              bResult = RenderMethod4(); // move into the screen from up->bottom              break;            case 4:              bResult = RenderMethod5(); // move into the screen from bottom->top              break;            case 5:              bResult = RenderMethod6(); // open from up->bottom              break;            case 6:              bResult = RenderMethod7(); // slide from left<-right              break;            case 7:              bResult = RenderMethod8(); // slide from down->up              break;            case 8:              bResult = RenderMethod9(); // grow from middle              break;            case 9:              bResult = RenderMethod10(); // x-fade              break;          }
Missing Default,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,KenBurnsRandomPan,The following switch statement is missing a default case: switch (_endPoint)                {                  case 8:                    iDestY = (float)_backgroundSlide.Height / 2;                    iDestX = (float)_zoomWidth / 2;                    break;                  case 4:                    iDestY = (float)_backgroundSlide.Height / 2;                    iDestX = (float)_backgroundSlide.Width - (float)_zoomWidth / 2;                    break;                  case 2:                    iDestY = (float)_zoomHeight / 2;                    iDestX = (float)_backgroundSlide.Width / 2;                    break;                  case 6:                    iDestY = (float)_backgroundSlide.Height - (float)_zoomHeight / 2;                    iDestX = (float)_backgroundSlide.Width / 2;                    break;                  case 1:                    iDestY = (float)_zoomHeight / 2;                    iDestX = (float)_zoomWidth / 2;                    break;                  case 3:                    iDestY = (float)_zoomHeight / 2;                    iDestX = (float)_backgroundSlide.Width - (float)_zoomWidth / 2;                    break;                  case 7:                    iDestY = (float)_backgroundSlide.Height - (float)_zoomHeight / 2;                    iDestX = (float)_zoomWidth / 2;                    break;                  case 5:                    iDestY = (float)_backgroundSlide.Height - (float)_zoomHeight / 2;                    iDestX = (float)_backgroundSlide.Width - (float)_zoomWidth / 2;                    break;                }
Missing Default,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ShowContextMenu,The following switch statement is missing a default case: switch (dlg.SelectedId)        {          case 117: // Delete            OnDelete();            break;            case 735: // Rotate            DoRotate();            break;            case 783: // rotate 180            DoRotate(180);            break;            case 784: // rotate 270            DoRotate(270);            break;            case 108: // Start slideshow            StartSlideShow();            break;            case 940: // Properties            OnShowInfo();            break;            case 970:            ShowPreviousWindow();            break;        }
Missing Default,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomCurrent,The following switch statement is missing a default case: switch (_currentZoomType)        {            /* 0: // centered' centered            * 1: // Top Left unchanged            * 2: // Width centered' Top unchanged            * 3: // Top Right unchanged            * 4: // Height centered' Right unchanged            * 5: // Bottom Right unchanged            * 6: // Widht centered' Bottom unchanged            * 7: // Bottom Left unchanged            * 8: // Heigth centered' Left unchanged            * */          case 0: // centered' centered            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            _currentZoomTop = middley - _zoomHeight * 0.5f;            break;          case 2: // Width centered' Top unchanged            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            break;          case 8: // Heigth centered' Left unchanged            _currentZoomTop = middley - _zoomHeight * 0.5f;            break;          case 6: // Widht centered' Bottom unchanged            _currentZoomLeft = middlex - _zoomWidth * 0.5f;            _currentZoomTop = yend - _zoomHeight;            break;          case 4: // Height centered' Right unchanged            _currentZoomTop = middley - _zoomHeight * 0.5f;            _currentZoomLeft = xend - _zoomWidth;            break;          case 1: // Top Left unchanged            break;          case 3: // Top Right unchanged            _currentZoomLeft = xend - _zoomWidth;            break;          case 7: // Bottom Left unchanged            _currentZoomTop = yend - _zoomHeight;            break;          case 5: // Bottom Right unchanged            _currentZoomTop = yend - _zoomHeight;            _currentZoomLeft = xend - _zoomWidth;            break;        }
Missing Default,MediaPortal.GUI.Pictures,GUISlideShow,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\GUISlideShow.cs,ZoomBackGround,The following switch statement is missing a default case: switch (_zoomTypeBackground)        {            /* 0: // centered' centered             * 1: // Top Left unchanged             * 2: // Width centered' Top unchanged             * 3: // Top Right unchanged             * 4: // Height centered' Right unchanged             * 5: // Bottom Right unchanged             * 6: // Widht centered' Bottom unchanged             * 7: // Bottom Left unchanged             * 8: // Heigth centered' Left unchanged             * */          case 0: // centered' centered            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            _zoomTopBackground = middley - _zoomHeight * 0.5f;            break;          case 2: // Width centered' Top unchanged            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            break;          case 8: // Heigth centered' Left unchanged            _zoomTopBackground = middley - _zoomHeight * 0.5f;            break;          case 6: // Widht centered' Bottom unchanged            _zoomLeftBackground = middlex - _zoomWidth * 0.5f;            _zoomTopBackground = yend - _zoomHeight;            break;          case 4: // Height centered' Right unchanged            _zoomTopBackground = middley - _zoomHeight * 0.5f;            _zoomLeftBackground = xend - _zoomWidth;            break;          case 1: // Top Left unchanged            break;          case 3: // Top Right unchanged            _zoomLeftBackground = xend - _zoomWidth;            break;          case 7: // Bottom Left unchanged            _zoomTopBackground = yend - _zoomHeight;            break;          case 5: // Bottom Right unchanged            _zoomTopBackground = yend - _zoomHeight;            _zoomLeftBackground = xend - _zoomWidth;            break;        }
Missing Default,MediaPortal.GUI.Pictures,PictureSort,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\PictureSort.cs,Compare,The following switch statement is missing a default case: switch (CurrentSortMethod)       {         case SortMethod.Year:           {             if (SortAscending)             {               if (item1.Year > item2.Year)               {                 return 1;               }               if (item1.Year < item2.Year)               {                 return -1;               }             }             else             {               if (item1.Year > item2.Year)               {                 return -1;               }               if (item1.Year < item2.Year)               {                 return 1;               }             }             return 0;           }         case SortMethod.Rating:           {             if (SortAscending)             {               if (item1.Rating > item2.Rating)               {                 return 1;               }               if (item1.Rating < item2.Rating)               {                 return -1;               }             }             else             {               if (item1.Rating > item2.Rating)               {                 return -1;               }               if (item1.Rating < item2.Rating)               {                 return 1;               }             }             return 0;           }          case SortMethod.Name:         case SortMethod.NameAll:            if (SortAscending)           {             if (!UseSortTitle)             {                return Util.StringLogicalComparer.Compare(item1.Label' item2.Label);             }             else             {               {                  return Util.StringLogicalComparer.Compare(item1.Label' item2.Label);               }             }           }           else           {             if (!UseSortTitle)             {                return Util.StringLogicalComparer.Compare(item2.Label' item1.Label);             }             else             {               {                  return Util.StringLogicalComparer.Compare(item2.Label' item1.Label);               }             }           }          case SortMethod.Date: // Only recently added/watched->database view + date used for sort for title            if (item1.FileInfo == null)           {             if (!this.TryGetFileInfo(ref item1))             {               return -1;             }           }            if (item2.FileInfo == null)           {             if (!this.TryGetFileInfo(ref item2))             {               return -1;             }           }            item1.Label2 = item1.FileInfo.CreationTime.ToShortDateString() + " " +                           item1.FileInfo.CreationTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat);           item2.Label2 = item2.FileInfo.CreationTime.ToShortDateString() + " " +                           item2.FileInfo.CreationTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat);            if (item1.Label2 == string.Empty || item2.Label2 == string.Empty)           {             return -1;           }            if (SortAscending)           {             return DateTime.Compare(Convert.ToDateTime(item1.Label2)' Convert.ToDateTime(item2.Label2));           }           else           {             return DateTime.Compare(Convert.ToDateTime(item2.Label2)' Convert.ToDateTime(item1.Label2));           }                    case SortMethod.Label:           if (SortAscending)           {              return Util.StringLogicalComparer.Compare(item1.DVDLabel' item2.DVDLabel);           }           else           {              return Util.StringLogicalComparer.Compare(item2.DVDLabel' item1.DVDLabel);           }         case SortMethod.Size:           if (item1.FileInfo == null || item2.FileInfo == null)           {             if (SortAscending)             {               return (int)(item1.Duration - item2.Duration);             }             else             {               return (int)(item2.Duration - item1.Duration);             }           }           else           {             if (SortAscending)             {                long compare = (item1.FileInfo.Length - item2.FileInfo.Length);                return compare == 0 ? 0 : compare < 0 ? -1 : 1;             }             else             {               long compare = (item2.FileInfo.Length - item1.FileInfo.Length);               return compare == 0 ? 0 : compare < 0 ? -1 : 1;             }           }          case SortMethod.Created:            if (item1.FileInfo == null)           {             if (!this.TryGetFileInfo(ref item1))             {               return -1;             }           }            if (item2.FileInfo == null)           {             if (!this.TryGetFileInfo(ref item2))             {               return -1;             }           }            item1.Label2 = item1.FileInfo.CreationTime.ToShortDateString() + " " +                          item1.FileInfo.CreationTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat);           item2.Label2 = item2.FileInfo.CreationTime.ToShortDateString() + " " +                          item2.FileInfo.CreationTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat);            if (SortAscending)           {             return DateTime.Compare(item1.FileInfo.CreationTime' item2.FileInfo.CreationTime);           }           else           {             return DateTime.Compare(item2.FileInfo.CreationTime' item1.FileInfo.CreationTime);           }                  case SortMethod.Modified:                    if (item1.FileInfo == null)           {             if (!this.TryGetFileInfo(ref item1))             {               return -1;             }           }            if (item2.FileInfo == null)           {             if (!this.TryGetFileInfo(ref item2))             {               return -1;             }           }            item1.Label2 = item1.FileInfo.ModificationTime.ToShortDateString() + " " +                            item1.FileInfo.ModificationTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat);           item2.Label2 = item2.FileInfo.ModificationTime.ToShortDateString() + " " +                            item2.FileInfo.ModificationTime.ToString("t"' CultureInfo.CurrentCulture.DateTimeFormat);                      if (SortAscending)           {             return DateTime.Compare(item1.FileInfo.ModificationTime' item2.FileInfo.ModificationTime);           }           else           {             return DateTime.Compare(item2.FileInfo.ModificationTime' item1.FileInfo.ModificationTime);           }                  case SortMethod.Watched:           {             int ret = 0;                          if (item1.IsPlayed && !item2.IsPlayed)             {               ret = -1;               if (!SortAscending) ret = 1;             }             else if (!item1.IsPlayed && item2.IsPlayed)             {               ret = 1;               if (!SortAscending) ret = -1;             }             else             {               if (SortAscending)               {                 if (!UseSortTitle)                 {                    return Util.StringLogicalComparer.Compare(item1.Label' item2.Label);                 }                 else                 {                   {                      return Util.StringLogicalComparer.Compare(item1.Label' item2.Label);                   }                 }               }               else               {                 if (!UseSortTitle)                 {                    return Util.StringLogicalComparer.Compare(item2.Label' item1.Label);                 }                 else                 {                   {                      return Util.StringLogicalComparer.Compare(item2.Label' item1.Label);                   }                 }               }             }             return ret;           }       }
Missing Default,MediaPortal.GUI.Pictures,PicturesFolderWatcherHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIPictures\PicturesFolderWatcherHelper.cs,ProcessEvents,The following switch statement is missing a default case: switch (currentEvent.Type)                  {                      #region file events handlers                      // Create Pictures                    case FolderWatcherEvent.EventType.Create:                    case FolderWatcherEvent.EventType.Change:                      {                        AddPictures(currentEvent.FileName);                        break;                      }                      // Delete Pictures                    case FolderWatcherEvent.EventType.Delete:                      {                        DeletePictures(currentEvent.FileName);                        break;                      }                      // Rename Pictures                    case FolderWatcherEvent.EventType.Rename:                      {                        RenamePictures(currentEvent.OldFileName' currentEvent.FileName);                        break;                      }                      #endregion                      #region directory events handlers                      // Create directory                    case FolderWatcherEvent.EventType.CreateDirectory:                      {                        AddPicturesDirectory(currentEvent.FileName);                        break;                      }                      // Delete directory                    case FolderWatcherEvent.EventType.DeleteDirectory:                      {                        DeletePicturesDirectory(currentEvent.FileName);                        break;                      }                      // Rename directory                    case FolderWatcherEvent.EventType.RenameDirectory:                      {                        RenamePicturesDirectory(currentEvent.OldFileName' currentEvent.FileName);                        break;                      }                      #endregion                    }
