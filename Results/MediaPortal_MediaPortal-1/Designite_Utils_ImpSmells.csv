Implementation smell,Namespace,Class,File,Method,Description
Long Method,MediaPortal.Utils.Web,HTTPTransaction,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Web\http\HTTPTransaction.cs,Transaction,The method has 153 lines of code.
Long Method,MediaPortal.Utils.Web,HtmlSectionParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Web\Parser\HtmlSectionParser.cs,ParseSection,The method has 107 lines of code.
Long Method,MediaPortal.Utils.Web,HtmlSectionParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Web\Parser\HtmlSectionParser.cs,GetSections,The method has 114 lines of code.
Complex Method,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSProductType,Cyclomatic complexity of the method is 22
Complex Method,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSNameString,Cyclomatic complexity of the method is 15
Complex Method,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSName,Cyclomatic complexity of the method is 8
Complex Method,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSSupported,Cyclomatic complexity of the method is 8
Complex Method,OSPrerequisites,OSPrerequisites,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSPrerequisites.cs,OsCheck,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.Utils.CommandLine,CommandLine,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\CommandLine\CommandLine.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.Profile,XmlSettingsProvider,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Configuration\XmlSettingsProvider.cs,Save,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.Configuration,Config,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Configuration\Config.cs,ReadConfig,Cyclomatic complexity of the method is 10
Complex Method,MediaPortal.Localisation,LocalisationProvider,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Localisation\LocalisationProvider.cs,LoadStrings,Cyclomatic complexity of the method is 13
Complex Method,MediaPortal.ServiceImplementations,Log4NetWrapper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\ServiceImplementations\Log4NetWrapper.cs,ConvertToCommonLogType,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.Threading,ThreadPool,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Threading\ThreadPool.cs,ProcessQueue,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.Utils.Time,BasicTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\BasicTime.cs,ParseTimeString,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,SetFromLong,Cyclomatic complexity of the method is 10
Complex Method,MediaPortal.Utils.Time,WorldTimeZone,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldTimeZone.cs,WorldTimeZone,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.Utils.Time,WorldTimeZone,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldTimeZone.cs,LoadRegistryTimeZones,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.Utils.Web,HtmlString,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Web\html\HtmlString.cs,GetTagLength,Cyclomatic complexity of the method is 10
Complex Method,MediaPortal.Utils.Web,HTMLPage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Web\http\HTMLPage.cs,GetInternal,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.Utils.Web,HTTPTransaction,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Web\http\HTTPTransaction.cs,Transaction,Cyclomatic complexity of the method is 17
Complex Method,MediaPortal.Utils.Web,HtmlParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Web\Parser\HtmlParser.cs,GetHyperLink,Cyclomatic complexity of the method is 15
Complex Method,MediaPortal.Utils.Web,HtmlProfiler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Web\Parser\HtmlProfiler.cs,BuildProfile,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.Utils.Web,HtmlSectionParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Web\Parser\HtmlSectionParser.cs,ParseSection,Cyclomatic complexity of the method is 20
Complex Method,MediaPortal.Utils.Web,HtmlSectionParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Web\Parser\HtmlSectionParser.cs,GetSections,Cyclomatic complexity of the method is 16
Long Parameter List,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetProductInfo,The method has 5 parameters. Parameters: dwOSMajorVersion' dwOSMinorVersion' dwSpMajorVersion' dwSpMinorVersion' pdwReturnedProductType
Long Parameter List,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,IsOSAsReported,The method has 5 parameters. Parameters: majorVersion' minorVersion' buildVersion' productType' servicePack
Long Parameter List,MediaPortal.Configuration,Reg,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Configuration\Registry.cs,RegOpenKeyEx,The method has 5 parameters. Parameters: hKey' subKey' options' sam' phkResult
Long Parameter List,MediaPortal.Configuration,Reg,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Configuration\Registry.cs,RegQueryValueEx,The method has 6 parameters. Parameters: hKey' lpValueName' lpReserved' lpType' lpData' lpcbData
Long Parameter List,MediaPortal.Threading,IThreadPool,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Threading\Interfaces\IThreadPool.cs,Add,The method has 5 parameters. Parameters: work' description' queuePriority' threadPriority' workCompletedHandler
Long Parameter List,MediaPortal.Threading,ThreadPool,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Threading\ThreadPool.cs,Add,The method has 5 parameters. Parameters: work' description' queuePriority' threadPriority' workCompletedHandler
Long Parameter List,MediaPortal.Threading,ThreadPoolStartInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Threading\ThreadPoolStartInfo.cs,ThreadPoolStartInfo,The method has 5 parameters. Parameters: name' minThreads' maxThreads' idleTimeout' delayedInit
Long Parameter List,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,WorldDateTime,The method has 5 parameters. Parameters: year' month' day' hour' minute
Long Parameter List,MediaPortal.Utils.Web,HtmlParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Web\Parser\HtmlParser.cs,SearchRegex,The method has 5 parameters. Parameters: index' regex' caseinsensitive' remove' replace
Long Statement,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetLastInstalledWindowsUpdateTimestampAsString,The length of the statement  "      return "Last install date from WindowsUpdate is " + TimeZone.CurrentTimeZone.ToLocalTime(dt).ToString("yyyy-MM-dd HH:mm:ss"); " is 125.
Long Statement,MediaPortal.Profile,XmlSettingsProvider,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Configuration\XmlSettingsProvider.cs,SelectSingleNodeFast,The length of the statement  "      // XmlNode.SelectSingleNode finds all occurances as oppossed to a single one' this causes huge perf issues (about 50% of control creation according to dotTrace) " is 160.
Long Statement,MediaPortal.Configuration,Config,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Configuration\Config.cs,LoadDefaultDirs,The length of the statement  "      Set(Dir.Weather' Path.Combine(commonAppData' @"skin\DefaultWide HD\Media\Weather\")); //will be 'fixed' and set to correct path as soon as available " is 148.
Long Statement,MediaPortal.Localisation,LocalisationProvider,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Localisation\LocalisationProvider.cs,ReloadAll,The length of the statement  "          LoadStrings(_languageDirectories[i]' i == 0); // we want to load RTL flag only from main directory' first in list (index 0) " is 123.
Long Statement,MediaPortal.Threading,ThreadPool,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Threading\ThreadPool.cs,HandleInUseThreadCount,The length of the statement  "      //LogDebug("ThreadPool.HandleInUseThreadCount() : in use threads: {0} max: {1} increment: {2}"' inUse' _startInfo.MaximumThreads' increment); " is 141.
Long Statement,MediaPortal.Threading,ThreadPool,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Threading\ThreadPool.cs,ProcessQueue,The length of the statement  "//          LogDebug("ThreadPool.ProcessQueue() {0} : received valid work: {1}"' Thread.CurrentThread.Name' work.State); " is 120.
Long Statement,MediaPortal.Threading,ThreadPool,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Threading\ThreadPool.cs,ProcessQueue,The length of the statement  "//              LogDebug("ThreadPool.ProcessQueue() {0} : processing work {1}"' Thread.CurrentThread.Name' work.Description); " is 125.
Complex Conditional,MediaPortal.ServiceImplementations,LogImpl,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\ServiceImplementations\LogImpl.cs,WriteFile,The conditional expression  "type != LogType.Log && type != LogType.Error && type != LogType.EPG &&            type != LogType.MusicShareWatcher && type != LogType.WebEPG"  is complex.
Complex Conditional,MediaPortal.Time,DateRange,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\DateRange.cs,IsInRange,The conditional expression  "_start < checkTime && checkTime.Month < 12 ||              _end > checkTime && checkTime.Month >= 1"  is complex.
Complex Conditional,MediaPortal.Time,DateRange,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\DateRange.cs,IsInRange,The conditional expression  "_start < checkTime && checkTime.Month < 12 ||              _end > checkTime && checkTime.Month >= 1"  is complex.
Complex Conditional,MediaPortal.Utils.Time,TimeRange,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\TimeRange.cs,IsInRange,The conditional expression  "_start < checkTime && checkTime.Hour < 24 ||              _end > checkTime && checkTime.Hour >= 0"  is complex.
Complex Conditional,MediaPortal.Utils.Time,TimeRange,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\TimeRange.cs,IsInRange,The conditional expression  "_start < checkTime && checkTime.Hour < 24 ||              _end > checkTime && checkTime.Hour > 0"  is complex.
Complex Conditional,MediaPortal.Utils.Web,HtmlString,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Web\html\HtmlString.cs,TagList,The conditional expression  "length >= 3 &&                (source[i + 1] == '/' || source[i + 1] == '!' ||                 (source[i + 1] >= 'A' && source[i + 1] <= 'Z') ||                 (source[i + 1] >= 'a' && source[i + 1] <= 'z'))"  is complex.
Complex Conditional,MediaPortal.Utils.Web,HTTPRequest,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Web\http\HTTPRequest.cs,Equals,The conditional expression  "_scheme == req._scheme &&            _host == req._host &&            _getQuery == req._getQuery &&            _postQuery == req._postQuery"  is complex.
Complex Conditional,MediaPortal.Utils.Web,HTTPTransaction,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Web\http\HTTPTransaction.cs,Transaction,The conditional expression  "(_response.StatusCode == HttpStatusCode.Found) ||              (_response.StatusCode == HttpStatusCode.Redirect) ||              (_response.StatusCode == HttpStatusCode.Moved) ||              (_response.StatusCode == HttpStatusCode.MovedPermanently)"  is complex.
Complex Conditional,MediaPortal.Utils.Xml,XmlNoNamespaceWriter,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Xml\XmlNoNamespaceWriter.cs,WriteStartAttribute,The conditional expression  "(prefix != null && prefix.CompareTo("xmlns") == 0) ||            (localName != null && localName.CompareTo("xmlns") == 0)"  is complex.
Empty Catch Block,MediaPortal.Profile,XmlSettingsProvider,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Configuration\XmlSettingsProvider.cs,Save,The method has an empty catch block.
Empty Catch Block,MediaPortal.Localisation,LocalisationProvider,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Localisation\LocalisationProvider.cs,GetAvailableLangauges,The method has an empty catch block.
Empty Catch Block,MediaPortal.ServiceImplementations,LogImpl,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\ServiceImplementations\LogImpl.cs,WriteFile,The method has an empty catch block.
Empty Catch Block,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,GetTimeOffset,The method has an empty catch block.
Empty Catch Block,MediaPortal.Utils.Time,WorldTimeZone,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldTimeZone.cs,LoadRegistryTimeZones,The method has an empty catch block.
Empty Catch Block,MediaPortal.Utils.Web,AsyncGetRequest,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Web\http\AsyncGetRequest.cs,SendWorkerRequest,The method has an empty catch block.
Empty Catch Block,MediaPortal.Utils.Web,HTTPTransaction,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Web\http\HTTPTransaction.cs,Transaction,The method has an empty catch block.
Empty Catch Block,MediaPortal.Utils.Web,HTTPTransaction,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Web\http\HTTPTransaction.cs,Transaction,The method has an empty catch block.
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSProductType,The following statement contains a magic number: switch (OSMajorVersion)        {            #region VERSION 4            case 4:            if (OSProductType == NTProductType.NT_WORKSTATION)              // Windows NT 4.0 Workstation              return "Workstation";            else if (OSProductType == NTProductType.NT_SERVER)            {              if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_ENTERPRISE))                // Windows NT 4.0 Server Enterprise                return "Enterprise Server";              else              // Windows NT 4.0 Server                return "Standard Server";            }            return string.Empty;              #endregion              #region VERSION 5            case 5:            if (GetSystemMetrics(SM_MEDIACENTER))              return "Media Center";            else if (GetSystemMetrics(SM_TABLETPC))              return "Tablet PC";            else if (OSProductType == NTProductType.NT_WORKSTATION)            {              if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_EMBEDDEDNT))              {                //Windows XP Embedded                return "Embedded";              }              else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_PERSONAL))              {                // Windows XP Home Edition                return "Home";              }              else              {                // Windows XP / Windows 2000 Professional                return "Professional";              }            }            else if (OSProductType == NTProductType.NT_SERVER || OSProductType == NTProductType.NT_DOMAIN_CONTROLLER)            {              if (OSMinorVersion == 0)              {                if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_DATACENTER))                  // Windows 2000 Datacenter Server                  return "Datacenter Server";                else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_ENTERPRISE))                  // Windows 2000 Advanced Server                  return "Advanced Server";                else                // Windows 2000 Server                  return "Server";              }              else if (OSMinorVersion == 2)              {                if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_DATACENTER))                  // Windows Server 2003 Datacenter Edition                  return "Datacenter Edition";                else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_ENTERPRISE))                  // Windows Server 2003 Enterprise Edition                  return "Enterprise Edition";                else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_STORAGE_SERVER))                  // Windows Server 2003 Storage Edition                  return "Storage Edition";                else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_COMPUTE_SERV))                  // Windows Server 2003 Compute Cluster Edition                  return "Compute Cluster Edition";                else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_BLADE))                  // Windows Server 2003 Web Edition                  return "Web Edition";                else                // Windows Server 2003 Standard Edition                  return "Standard Edition";              }            }            break;              #endregion              #region VERSION 6 and 10            case 6:          case 10:            int intProductType;            GetProductInfo(osVersionInfo.dwMajorVersion' osVersionInfo.dwMinorVersion' 0' 0' out intProductType);            return ((ProductType) intProductType).DescriptionAttr();              #endregion        }
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSProductType,The following statement contains a magic number: switch (OSMajorVersion)        {            #region VERSION 4            case 4:            if (OSProductType == NTProductType.NT_WORKSTATION)              // Windows NT 4.0 Workstation              return "Workstation";            else if (OSProductType == NTProductType.NT_SERVER)            {              if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_ENTERPRISE))                // Windows NT 4.0 Server Enterprise                return "Enterprise Server";              else              // Windows NT 4.0 Server                return "Standard Server";            }            return string.Empty;              #endregion              #region VERSION 5            case 5:            if (GetSystemMetrics(SM_MEDIACENTER))              return "Media Center";            else if (GetSystemMetrics(SM_TABLETPC))              return "Tablet PC";            else if (OSProductType == NTProductType.NT_WORKSTATION)            {              if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_EMBEDDEDNT))              {                //Windows XP Embedded                return "Embedded";              }              else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_PERSONAL))              {                // Windows XP Home Edition                return "Home";              }              else              {                // Windows XP / Windows 2000 Professional                return "Professional";              }            }            else if (OSProductType == NTProductType.NT_SERVER || OSProductType == NTProductType.NT_DOMAIN_CONTROLLER)            {              if (OSMinorVersion == 0)              {                if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_DATACENTER))                  // Windows 2000 Datacenter Server                  return "Datacenter Server";                else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_ENTERPRISE))                  // Windows 2000 Advanced Server                  return "Advanced Server";                else                // Windows 2000 Server                  return "Server";              }              else if (OSMinorVersion == 2)              {                if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_DATACENTER))                  // Windows Server 2003 Datacenter Edition                  return "Datacenter Edition";                else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_ENTERPRISE))                  // Windows Server 2003 Enterprise Edition                  return "Enterprise Edition";                else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_STORAGE_SERVER))                  // Windows Server 2003 Storage Edition                  return "Storage Edition";                else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_COMPUTE_SERV))                  // Windows Server 2003 Compute Cluster Edition                  return "Compute Cluster Edition";                else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_BLADE))                  // Windows Server 2003 Web Edition                  return "Web Edition";                else                // Windows Server 2003 Standard Edition                  return "Standard Edition";              }            }            break;              #endregion              #region VERSION 6 and 10            case 6:          case 10:            int intProductType;            GetProductInfo(osVersionInfo.dwMajorVersion' osVersionInfo.dwMinorVersion' 0' 0' out intProductType);            return ((ProductType) intProductType).DescriptionAttr();              #endregion        }
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSProductType,The following statement contains a magic number: switch (OSMajorVersion)        {            #region VERSION 4            case 4:            if (OSProductType == NTProductType.NT_WORKSTATION)              // Windows NT 4.0 Workstation              return "Workstation";            else if (OSProductType == NTProductType.NT_SERVER)            {              if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_ENTERPRISE))                // Windows NT 4.0 Server Enterprise                return "Enterprise Server";              else              // Windows NT 4.0 Server                return "Standard Server";            }            return string.Empty;              #endregion              #region VERSION 5            case 5:            if (GetSystemMetrics(SM_MEDIACENTER))              return "Media Center";            else if (GetSystemMetrics(SM_TABLETPC))              return "Tablet PC";            else if (OSProductType == NTProductType.NT_WORKSTATION)            {              if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_EMBEDDEDNT))              {                //Windows XP Embedded                return "Embedded";              }              else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_PERSONAL))              {                // Windows XP Home Edition                return "Home";              }              else              {                // Windows XP / Windows 2000 Professional                return "Professional";              }            }            else if (OSProductType == NTProductType.NT_SERVER || OSProductType == NTProductType.NT_DOMAIN_CONTROLLER)            {              if (OSMinorVersion == 0)              {                if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_DATACENTER))                  // Windows 2000 Datacenter Server                  return "Datacenter Server";                else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_ENTERPRISE))                  // Windows 2000 Advanced Server                  return "Advanced Server";                else                // Windows 2000 Server                  return "Server";              }              else if (OSMinorVersion == 2)              {                if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_DATACENTER))                  // Windows Server 2003 Datacenter Edition                  return "Datacenter Edition";                else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_ENTERPRISE))                  // Windows Server 2003 Enterprise Edition                  return "Enterprise Edition";                else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_STORAGE_SERVER))                  // Windows Server 2003 Storage Edition                  return "Storage Edition";                else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_COMPUTE_SERV))                  // Windows Server 2003 Compute Cluster Edition                  return "Compute Cluster Edition";                else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_BLADE))                  // Windows Server 2003 Web Edition                  return "Web Edition";                else                // Windows Server 2003 Standard Edition                  return "Standard Edition";              }            }            break;              #endregion              #region VERSION 6 and 10            case 6:          case 10:            int intProductType;            GetProductInfo(osVersionInfo.dwMajorVersion' osVersionInfo.dwMinorVersion' 0' 0' out intProductType);            return ((ProductType) intProductType).DescriptionAttr();              #endregion        }
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSProductType,The following statement contains a magic number: switch (OSMajorVersion)        {            #region VERSION 4            case 4:            if (OSProductType == NTProductType.NT_WORKSTATION)              // Windows NT 4.0 Workstation              return "Workstation";            else if (OSProductType == NTProductType.NT_SERVER)            {              if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_ENTERPRISE))                // Windows NT 4.0 Server Enterprise                return "Enterprise Server";              else              // Windows NT 4.0 Server                return "Standard Server";            }            return string.Empty;              #endregion              #region VERSION 5            case 5:            if (GetSystemMetrics(SM_MEDIACENTER))              return "Media Center";            else if (GetSystemMetrics(SM_TABLETPC))              return "Tablet PC";            else if (OSProductType == NTProductType.NT_WORKSTATION)            {              if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_EMBEDDEDNT))              {                //Windows XP Embedded                return "Embedded";              }              else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_PERSONAL))              {                // Windows XP Home Edition                return "Home";              }              else              {                // Windows XP / Windows 2000 Professional                return "Professional";              }            }            else if (OSProductType == NTProductType.NT_SERVER || OSProductType == NTProductType.NT_DOMAIN_CONTROLLER)            {              if (OSMinorVersion == 0)              {                if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_DATACENTER))                  // Windows 2000 Datacenter Server                  return "Datacenter Server";                else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_ENTERPRISE))                  // Windows 2000 Advanced Server                  return "Advanced Server";                else                // Windows 2000 Server                  return "Server";              }              else if (OSMinorVersion == 2)              {                if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_DATACENTER))                  // Windows Server 2003 Datacenter Edition                  return "Datacenter Edition";                else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_ENTERPRISE))                  // Windows Server 2003 Enterprise Edition                  return "Enterprise Edition";                else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_STORAGE_SERVER))                  // Windows Server 2003 Storage Edition                  return "Storage Edition";                else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_COMPUTE_SERV))                  // Windows Server 2003 Compute Cluster Edition                  return "Compute Cluster Edition";                else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_BLADE))                  // Windows Server 2003 Web Edition                  return "Web Edition";                else                // Windows Server 2003 Standard Edition                  return "Standard Edition";              }            }            break;              #endregion              #region VERSION 6 and 10            case 6:          case 10:            int intProductType;            GetProductInfo(osVersionInfo.dwMajorVersion' osVersionInfo.dwMinorVersion' 0' 0' out intProductType);            return ((ProductType) intProductType).DescriptionAttr();              #endregion        }
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSProductType,The following statement contains a magic number: switch (OSMajorVersion)        {            #region VERSION 4            case 4:            if (OSProductType == NTProductType.NT_WORKSTATION)              // Windows NT 4.0 Workstation              return "Workstation";            else if (OSProductType == NTProductType.NT_SERVER)            {              if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_ENTERPRISE))                // Windows NT 4.0 Server Enterprise                return "Enterprise Server";              else              // Windows NT 4.0 Server                return "Standard Server";            }            return string.Empty;              #endregion              #region VERSION 5            case 5:            if (GetSystemMetrics(SM_MEDIACENTER))              return "Media Center";            else if (GetSystemMetrics(SM_TABLETPC))              return "Tablet PC";            else if (OSProductType == NTProductType.NT_WORKSTATION)            {              if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_EMBEDDEDNT))              {                //Windows XP Embedded                return "Embedded";              }              else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_PERSONAL))              {                // Windows XP Home Edition                return "Home";              }              else              {                // Windows XP / Windows 2000 Professional                return "Professional";              }            }            else if (OSProductType == NTProductType.NT_SERVER || OSProductType == NTProductType.NT_DOMAIN_CONTROLLER)            {              if (OSMinorVersion == 0)              {                if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_DATACENTER))                  // Windows 2000 Datacenter Server                  return "Datacenter Server";                else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_ENTERPRISE))                  // Windows 2000 Advanced Server                  return "Advanced Server";                else                // Windows 2000 Server                  return "Server";              }              else if (OSMinorVersion == 2)              {                if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_DATACENTER))                  // Windows Server 2003 Datacenter Edition                  return "Datacenter Edition";                else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_ENTERPRISE))                  // Windows Server 2003 Enterprise Edition                  return "Enterprise Edition";                else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_STORAGE_SERVER))                  // Windows Server 2003 Storage Edition                  return "Storage Edition";                else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_COMPUTE_SERV))                  // Windows Server 2003 Compute Cluster Edition                  return "Compute Cluster Edition";                else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_BLADE))                  // Windows Server 2003 Web Edition                  return "Web Edition";                else                // Windows Server 2003 Standard Edition                  return "Standard Edition";              }            }            break;              #endregion              #region VERSION 6 and 10            case 6:          case 10:            int intProductType;            GetProductInfo(osVersionInfo.dwMajorVersion' osVersionInfo.dwMinorVersion' 0' 0' out intProductType);            return ((ProductType) intProductType).DescriptionAttr();              #endregion        }
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSNameString,The following statement contains a magic number: switch (osInfo.Platform)        {          case PlatformID.Win32Windows:          {            switch (OSMinorVersion)            {              case 0:                osName = "Windows 95";                break;              case 10:                osName = osInfo.Version.Revision == 2222 ? "Windows 98 Second Edition" : "Windows 98";                break;              case 90:                osName = "Windows Me";                break;            }            break;          }          case PlatformID.Win32NT:          {            switch (OSMajorVersion)            {              case 3:                osName = "Windows NT 3.51";                break;              case 4:                osName = "Windows NT 4.0";                break;              case 5:              {                switch (OSMinorVersion)                {                  case 0:                    osName = "Windows 2000";                    break;                  case 1:                    osName = "Windows XP";                    break;                  case 2:                    if (OSProductType == NTProductType.NT_WORKSTATION)                      osName = "WindowsXP x64";                    else                      osName = GetSystemMetrics(SM_SERVERR2) ? "Windows Server 2003 R2" : "Windows Server 2003";                    break;                }                break;              }              case 6:              {                switch (OSMinorVersion)                {                  case 0:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows Vista" : "Windows 2008";                    break;                  case 1:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 7" : "Windows 2008 R2";                    break;                  case 2:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 8" : "Windows 2012";                    break;                  case 3:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 8.1" : "Windows 2012 R2";                    break;                }                break;              }              case 10:              {                switch (OSMinorVersion)                {                  case 0:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 10" : "Windows 2016";                    break;                }                break;              }            }            break;          }        }
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSNameString,The following statement contains a magic number: switch (osInfo.Platform)        {          case PlatformID.Win32Windows:          {            switch (OSMinorVersion)            {              case 0:                osName = "Windows 95";                break;              case 10:                osName = osInfo.Version.Revision == 2222 ? "Windows 98 Second Edition" : "Windows 98";                break;              case 90:                osName = "Windows Me";                break;            }            break;          }          case PlatformID.Win32NT:          {            switch (OSMajorVersion)            {              case 3:                osName = "Windows NT 3.51";                break;              case 4:                osName = "Windows NT 4.0";                break;              case 5:              {                switch (OSMinorVersion)                {                  case 0:                    osName = "Windows 2000";                    break;                  case 1:                    osName = "Windows XP";                    break;                  case 2:                    if (OSProductType == NTProductType.NT_WORKSTATION)                      osName = "WindowsXP x64";                    else                      osName = GetSystemMetrics(SM_SERVERR2) ? "Windows Server 2003 R2" : "Windows Server 2003";                    break;                }                break;              }              case 6:              {                switch (OSMinorVersion)                {                  case 0:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows Vista" : "Windows 2008";                    break;                  case 1:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 7" : "Windows 2008 R2";                    break;                  case 2:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 8" : "Windows 2012";                    break;                  case 3:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 8.1" : "Windows 2012 R2";                    break;                }                break;              }              case 10:              {                switch (OSMinorVersion)                {                  case 0:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 10" : "Windows 2016";                    break;                }                break;              }            }            break;          }        }
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSNameString,The following statement contains a magic number: switch (osInfo.Platform)        {          case PlatformID.Win32Windows:          {            switch (OSMinorVersion)            {              case 0:                osName = "Windows 95";                break;              case 10:                osName = osInfo.Version.Revision == 2222 ? "Windows 98 Second Edition" : "Windows 98";                break;              case 90:                osName = "Windows Me";                break;            }            break;          }          case PlatformID.Win32NT:          {            switch (OSMajorVersion)            {              case 3:                osName = "Windows NT 3.51";                break;              case 4:                osName = "Windows NT 4.0";                break;              case 5:              {                switch (OSMinorVersion)                {                  case 0:                    osName = "Windows 2000";                    break;                  case 1:                    osName = "Windows XP";                    break;                  case 2:                    if (OSProductType == NTProductType.NT_WORKSTATION)                      osName = "WindowsXP x64";                    else                      osName = GetSystemMetrics(SM_SERVERR2) ? "Windows Server 2003 R2" : "Windows Server 2003";                    break;                }                break;              }              case 6:              {                switch (OSMinorVersion)                {                  case 0:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows Vista" : "Windows 2008";                    break;                  case 1:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 7" : "Windows 2008 R2";                    break;                  case 2:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 8" : "Windows 2012";                    break;                  case 3:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 8.1" : "Windows 2012 R2";                    break;                }                break;              }              case 10:              {                switch (OSMinorVersion)                {                  case 0:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 10" : "Windows 2016";                    break;                }                break;              }            }            break;          }        }
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSNameString,The following statement contains a magic number: switch (osInfo.Platform)        {          case PlatformID.Win32Windows:          {            switch (OSMinorVersion)            {              case 0:                osName = "Windows 95";                break;              case 10:                osName = osInfo.Version.Revision == 2222 ? "Windows 98 Second Edition" : "Windows 98";                break;              case 90:                osName = "Windows Me";                break;            }            break;          }          case PlatformID.Win32NT:          {            switch (OSMajorVersion)            {              case 3:                osName = "Windows NT 3.51";                break;              case 4:                osName = "Windows NT 4.0";                break;              case 5:              {                switch (OSMinorVersion)                {                  case 0:                    osName = "Windows 2000";                    break;                  case 1:                    osName = "Windows XP";                    break;                  case 2:                    if (OSProductType == NTProductType.NT_WORKSTATION)                      osName = "WindowsXP x64";                    else                      osName = GetSystemMetrics(SM_SERVERR2) ? "Windows Server 2003 R2" : "Windows Server 2003";                    break;                }                break;              }              case 6:              {                switch (OSMinorVersion)                {                  case 0:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows Vista" : "Windows 2008";                    break;                  case 1:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 7" : "Windows 2008 R2";                    break;                  case 2:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 8" : "Windows 2012";                    break;                  case 3:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 8.1" : "Windows 2012 R2";                    break;                }                break;              }              case 10:              {                switch (OSMinorVersion)                {                  case 0:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 10" : "Windows 2016";                    break;                }                break;              }            }            break;          }        }
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSNameString,The following statement contains a magic number: switch (osInfo.Platform)        {          case PlatformID.Win32Windows:          {            switch (OSMinorVersion)            {              case 0:                osName = "Windows 95";                break;              case 10:                osName = osInfo.Version.Revision == 2222 ? "Windows 98 Second Edition" : "Windows 98";                break;              case 90:                osName = "Windows Me";                break;            }            break;          }          case PlatformID.Win32NT:          {            switch (OSMajorVersion)            {              case 3:                osName = "Windows NT 3.51";                break;              case 4:                osName = "Windows NT 4.0";                break;              case 5:              {                switch (OSMinorVersion)                {                  case 0:                    osName = "Windows 2000";                    break;                  case 1:                    osName = "Windows XP";                    break;                  case 2:                    if (OSProductType == NTProductType.NT_WORKSTATION)                      osName = "WindowsXP x64";                    else                      osName = GetSystemMetrics(SM_SERVERR2) ? "Windows Server 2003 R2" : "Windows Server 2003";                    break;                }                break;              }              case 6:              {                switch (OSMinorVersion)                {                  case 0:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows Vista" : "Windows 2008";                    break;                  case 1:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 7" : "Windows 2008 R2";                    break;                  case 2:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 8" : "Windows 2012";                    break;                  case 3:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 8.1" : "Windows 2012 R2";                    break;                }                break;              }              case 10:              {                switch (OSMinorVersion)                {                  case 0:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 10" : "Windows 2016";                    break;                }                break;              }            }            break;          }        }
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSNameString,The following statement contains a magic number: switch (osInfo.Platform)        {          case PlatformID.Win32Windows:          {            switch (OSMinorVersion)            {              case 0:                osName = "Windows 95";                break;              case 10:                osName = osInfo.Version.Revision == 2222 ? "Windows 98 Second Edition" : "Windows 98";                break;              case 90:                osName = "Windows Me";                break;            }            break;          }          case PlatformID.Win32NT:          {            switch (OSMajorVersion)            {              case 3:                osName = "Windows NT 3.51";                break;              case 4:                osName = "Windows NT 4.0";                break;              case 5:              {                switch (OSMinorVersion)                {                  case 0:                    osName = "Windows 2000";                    break;                  case 1:                    osName = "Windows XP";                    break;                  case 2:                    if (OSProductType == NTProductType.NT_WORKSTATION)                      osName = "WindowsXP x64";                    else                      osName = GetSystemMetrics(SM_SERVERR2) ? "Windows Server 2003 R2" : "Windows Server 2003";                    break;                }                break;              }              case 6:              {                switch (OSMinorVersion)                {                  case 0:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows Vista" : "Windows 2008";                    break;                  case 1:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 7" : "Windows 2008 R2";                    break;                  case 2:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 8" : "Windows 2012";                    break;                  case 3:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 8.1" : "Windows 2012 R2";                    break;                }                break;              }              case 10:              {                switch (OSMinorVersion)                {                  case 0:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 10" : "Windows 2016";                    break;                }                break;              }            }            break;          }        }
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSNameString,The following statement contains a magic number: switch (osInfo.Platform)        {          case PlatformID.Win32Windows:          {            switch (OSMinorVersion)            {              case 0:                osName = "Windows 95";                break;              case 10:                osName = osInfo.Version.Revision == 2222 ? "Windows 98 Second Edition" : "Windows 98";                break;              case 90:                osName = "Windows Me";                break;            }            break;          }          case PlatformID.Win32NT:          {            switch (OSMajorVersion)            {              case 3:                osName = "Windows NT 3.51";                break;              case 4:                osName = "Windows NT 4.0";                break;              case 5:              {                switch (OSMinorVersion)                {                  case 0:                    osName = "Windows 2000";                    break;                  case 1:                    osName = "Windows XP";                    break;                  case 2:                    if (OSProductType == NTProductType.NT_WORKSTATION)                      osName = "WindowsXP x64";                    else                      osName = GetSystemMetrics(SM_SERVERR2) ? "Windows Server 2003 R2" : "Windows Server 2003";                    break;                }                break;              }              case 6:              {                switch (OSMinorVersion)                {                  case 0:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows Vista" : "Windows 2008";                    break;                  case 1:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 7" : "Windows 2008 R2";                    break;                  case 2:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 8" : "Windows 2012";                    break;                  case 3:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 8.1" : "Windows 2012 R2";                    break;                }                break;              }              case 10:              {                switch (OSMinorVersion)                {                  case 0:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 10" : "Windows 2016";                    break;                }                break;              }            }            break;          }        }
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSNameString,The following statement contains a magic number: switch (osInfo.Platform)        {          case PlatformID.Win32Windows:          {            switch (OSMinorVersion)            {              case 0:                osName = "Windows 95";                break;              case 10:                osName = osInfo.Version.Revision == 2222 ? "Windows 98 Second Edition" : "Windows 98";                break;              case 90:                osName = "Windows Me";                break;            }            break;          }          case PlatformID.Win32NT:          {            switch (OSMajorVersion)            {              case 3:                osName = "Windows NT 3.51";                break;              case 4:                osName = "Windows NT 4.0";                break;              case 5:              {                switch (OSMinorVersion)                {                  case 0:                    osName = "Windows 2000";                    break;                  case 1:                    osName = "Windows XP";                    break;                  case 2:                    if (OSProductType == NTProductType.NT_WORKSTATION)                      osName = "WindowsXP x64";                    else                      osName = GetSystemMetrics(SM_SERVERR2) ? "Windows Server 2003 R2" : "Windows Server 2003";                    break;                }                break;              }              case 6:              {                switch (OSMinorVersion)                {                  case 0:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows Vista" : "Windows 2008";                    break;                  case 1:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 7" : "Windows 2008 R2";                    break;                  case 2:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 8" : "Windows 2012";                    break;                  case 3:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 8.1" : "Windows 2012 R2";                    break;                }                break;              }              case 10:              {                switch (OSMinorVersion)                {                  case 0:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 10" : "Windows 2016";                    break;                }                break;              }            }            break;          }        }
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSNameString,The following statement contains a magic number: switch (osInfo.Platform)        {          case PlatformID.Win32Windows:          {            switch (OSMinorVersion)            {              case 0:                osName = "Windows 95";                break;              case 10:                osName = osInfo.Version.Revision == 2222 ? "Windows 98 Second Edition" : "Windows 98";                break;              case 90:                osName = "Windows Me";                break;            }            break;          }          case PlatformID.Win32NT:          {            switch (OSMajorVersion)            {              case 3:                osName = "Windows NT 3.51";                break;              case 4:                osName = "Windows NT 4.0";                break;              case 5:              {                switch (OSMinorVersion)                {                  case 0:                    osName = "Windows 2000";                    break;                  case 1:                    osName = "Windows XP";                    break;                  case 2:                    if (OSProductType == NTProductType.NT_WORKSTATION)                      osName = "WindowsXP x64";                    else                      osName = GetSystemMetrics(SM_SERVERR2) ? "Windows Server 2003 R2" : "Windows Server 2003";                    break;                }                break;              }              case 6:              {                switch (OSMinorVersion)                {                  case 0:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows Vista" : "Windows 2008";                    break;                  case 1:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 7" : "Windows 2008 R2";                    break;                  case 2:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 8" : "Windows 2012";                    break;                  case 3:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 8.1" : "Windows 2012 R2";                    break;                }                break;              }              case 10:              {                switch (OSMinorVersion)                {                  case 0:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 10" : "Windows 2016";                    break;                }                break;              }            }            break;          }        }
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSNameString,The following statement contains a magic number: switch (osInfo.Platform)        {          case PlatformID.Win32Windows:          {            switch (OSMinorVersion)            {              case 0:                osName = "Windows 95";                break;              case 10:                osName = osInfo.Version.Revision == 2222 ? "Windows 98 Second Edition" : "Windows 98";                break;              case 90:                osName = "Windows Me";                break;            }            break;          }          case PlatformID.Win32NT:          {            switch (OSMajorVersion)            {              case 3:                osName = "Windows NT 3.51";                break;              case 4:                osName = "Windows NT 4.0";                break;              case 5:              {                switch (OSMinorVersion)                {                  case 0:                    osName = "Windows 2000";                    break;                  case 1:                    osName = "Windows XP";                    break;                  case 2:                    if (OSProductType == NTProductType.NT_WORKSTATION)                      osName = "WindowsXP x64";                    else                      osName = GetSystemMetrics(SM_SERVERR2) ? "Windows Server 2003 R2" : "Windows Server 2003";                    break;                }                break;              }              case 6:              {                switch (OSMinorVersion)                {                  case 0:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows Vista" : "Windows 2008";                    break;                  case 1:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 7" : "Windows 2008 R2";                    break;                  case 2:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 8" : "Windows 2012";                    break;                  case 3:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 8.1" : "Windows 2012 R2";                    break;                }                break;              }              case 10:              {                switch (OSMinorVersion)                {                  case 0:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 10" : "Windows 2016";                    break;                }                break;              }            }            break;          }        }
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSNameString,The following statement contains a magic number: switch (osInfo.Platform)        {          case PlatformID.Win32Windows:          {            switch (OSMinorVersion)            {              case 0:                osName = "Windows 95";                break;              case 10:                osName = osInfo.Version.Revision == 2222 ? "Windows 98 Second Edition" : "Windows 98";                break;              case 90:                osName = "Windows Me";                break;            }            break;          }          case PlatformID.Win32NT:          {            switch (OSMajorVersion)            {              case 3:                osName = "Windows NT 3.51";                break;              case 4:                osName = "Windows NT 4.0";                break;              case 5:              {                switch (OSMinorVersion)                {                  case 0:                    osName = "Windows 2000";                    break;                  case 1:                    osName = "Windows XP";                    break;                  case 2:                    if (OSProductType == NTProductType.NT_WORKSTATION)                      osName = "WindowsXP x64";                    else                      osName = GetSystemMetrics(SM_SERVERR2) ? "Windows Server 2003 R2" : "Windows Server 2003";                    break;                }                break;              }              case 6:              {                switch (OSMinorVersion)                {                  case 0:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows Vista" : "Windows 2008";                    break;                  case 1:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 7" : "Windows 2008 R2";                    break;                  case 2:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 8" : "Windows 2012";                    break;                  case 3:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 8.1" : "Windows 2012 R2";                    break;                }                break;              }              case 10:              {                switch (OSMinorVersion)                {                  case 0:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 10" : "Windows 2016";                    break;                }                break;              }            }            break;          }        }
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSName,The following statement contains a magic number: switch (OsVersionInt())        {          case 51:            return OSList.WindowsXp;          case 52:            if (OSProductType == NTProductType.NT_WORKSTATION)              return OSList.WindowsXp64;            else              return GetSystemMetrics(SM_SERVERR2) ? OSList.Windows2003R2 : OSList.Windows2003;          case 60:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.WindowsVista : OSList.Windows2008;          case 61:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.Windows7 : OSList.Windows2008R2;          case 62:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.Windows8 : OSList.Windows2012;          case 63:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.Windows81 : OSList.Windows2012R2;          case 10:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.Windows10 : OSList.Windows2016;        }
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSName,The following statement contains a magic number: switch (OsVersionInt())        {          case 51:            return OSList.WindowsXp;          case 52:            if (OSProductType == NTProductType.NT_WORKSTATION)              return OSList.WindowsXp64;            else              return GetSystemMetrics(SM_SERVERR2) ? OSList.Windows2003R2 : OSList.Windows2003;          case 60:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.WindowsVista : OSList.Windows2008;          case 61:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.Windows7 : OSList.Windows2008R2;          case 62:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.Windows8 : OSList.Windows2012;          case 63:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.Windows81 : OSList.Windows2012R2;          case 10:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.Windows10 : OSList.Windows2016;        }
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSName,The following statement contains a magic number: switch (OsVersionInt())        {          case 51:            return OSList.WindowsXp;          case 52:            if (OSProductType == NTProductType.NT_WORKSTATION)              return OSList.WindowsXp64;            else              return GetSystemMetrics(SM_SERVERR2) ? OSList.Windows2003R2 : OSList.Windows2003;          case 60:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.WindowsVista : OSList.Windows2008;          case 61:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.Windows7 : OSList.Windows2008R2;          case 62:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.Windows8 : OSList.Windows2012;          case 63:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.Windows81 : OSList.Windows2012R2;          case 10:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.Windows10 : OSList.Windows2016;        }
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSName,The following statement contains a magic number: switch (OsVersionInt())        {          case 51:            return OSList.WindowsXp;          case 52:            if (OSProductType == NTProductType.NT_WORKSTATION)              return OSList.WindowsXp64;            else              return GetSystemMetrics(SM_SERVERR2) ? OSList.Windows2003R2 : OSList.Windows2003;          case 60:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.WindowsVista : OSList.Windows2008;          case 61:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.Windows7 : OSList.Windows2008R2;          case 62:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.Windows8 : OSList.Windows2012;          case 63:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.Windows81 : OSList.Windows2012R2;          case 10:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.Windows10 : OSList.Windows2016;        }
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSName,The following statement contains a magic number: switch (OsVersionInt())        {          case 51:            return OSList.WindowsXp;          case 52:            if (OSProductType == NTProductType.NT_WORKSTATION)              return OSList.WindowsXp64;            else              return GetSystemMetrics(SM_SERVERR2) ? OSList.Windows2003R2 : OSList.Windows2003;          case 60:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.WindowsVista : OSList.Windows2008;          case 61:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.Windows7 : OSList.Windows2008R2;          case 62:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.Windows8 : OSList.Windows2012;          case 63:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.Windows81 : OSList.Windows2012R2;          case 10:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.Windows10 : OSList.Windows2016;        }
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSName,The following statement contains a magic number: switch (OsVersionInt())        {          case 51:            return OSList.WindowsXp;          case 52:            if (OSProductType == NTProductType.NT_WORKSTATION)              return OSList.WindowsXp64;            else              return GetSystemMetrics(SM_SERVERR2) ? OSList.Windows2003R2 : OSList.Windows2003;          case 60:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.WindowsVista : OSList.Windows2008;          case 61:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.Windows7 : OSList.Windows2008R2;          case 62:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.Windows8 : OSList.Windows2012;          case 63:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.Windows81 : OSList.Windows2012R2;          case 10:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.Windows10 : OSList.Windows2016;        }
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSName,The following statement contains a magic number: switch (OsVersionInt())        {          case 51:            return OSList.WindowsXp;          case 52:            if (OSProductType == NTProductType.NT_WORKSTATION)              return OSList.WindowsXp64;            else              return GetSystemMetrics(SM_SERVERR2) ? OSList.Windows2003R2 : OSList.Windows2003;          case 60:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.WindowsVista : OSList.Windows2008;          case 61:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.Windows7 : OSList.Windows2008R2;          case 62:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.Windows8 : OSList.Windows2012;          case 63:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.Windows81 : OSList.Windows2012R2;          case 10:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.Windows10 : OSList.Windows2016;        }
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSSupported,The following statement contains a magic number: VerifyOSMinRequirement(5' 1' 2600' 3)
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSSupported,The following statement contains a magic number: VerifyOSMinRequirement(5' 1' 2600' 3)
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSSupported,The following statement contains a magic number: VerifyOSMinRequirement(5' 1' 2600' 3)
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSSupported,The following statement contains a magic number: VerifyOSMinRequirement(5' 2' 3790' 0)
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSSupported,The following statement contains a magic number: VerifyOSMinRequirement(5' 2' 3790' 0)
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSSupported,The following statement contains a magic number: VerifyOSMinRequirement(5' 2' 3790' 0)
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSSupported,The following statement contains a magic number: VerifyOSMinRequirement(6' 0' 6001' 0)
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSSupported,The following statement contains a magic number: VerifyOSMinRequirement(6' 0' 6001' 0)
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSSupported,The following statement contains a magic number: VerifyOSMinRequirement(6' 1' 7600' 0)
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSSupported,The following statement contains a magic number: VerifyOSMinRequirement(6' 1' 7600' 0)
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSSupported,The following statement contains a magic number: VerifyOSMinRequirement(6' 2' 9200' 0)
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSSupported,The following statement contains a magic number: VerifyOSMinRequirement(6' 2' 9200' 0)
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSSupported,The following statement contains a magic number: VerifyOSMinRequirement(6' 2' 9200' 0)
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSSupported,The following statement contains a magic number: VerifyOSMinRequirement(6' 3' 9200' 0)
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSSupported,The following statement contains a magic number: VerifyOSMinRequirement(6' 3' 9200' 0)
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSSupported,The following statement contains a magic number: VerifyOSMinRequirement(6' 3' 9200' 0)
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSSupported,The following statement contains a magic number: VerifyOSMinRequirement(10' 0' 10240' 0)
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSSupported,The following statement contains a magic number: VerifyOSMinRequirement(10' 0' 10240' 0)
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,XpOrLater,The following statement contains a magic number: return VerifyVersionGreaterEqual(5' 1);
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,Xp64OrLater,The following statement contains a magic number: return VerifyVersionGreaterEqual(5' 2);
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,Xp64OrLater,The following statement contains a magic number: return VerifyVersionGreaterEqual(5' 2);
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,VistaOrLater,The following statement contains a magic number: return VerifyVersionGreaterEqual(6' 0);
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,Win7OrLater,The following statement contains a magic number: return VerifyVersionGreaterEqual(6' 1);
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,Win8OrLater,The following statement contains a magic number: return VerifyVersionGreaterEqual(6' 2);
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,Win8OrLater,The following statement contains a magic number: return VerifyVersionGreaterEqual(6' 2);
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,Win81OrLater,The following statement contains a magic number: return VerifyVersionGreaterEqual(6' 3);
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,Win81OrLater,The following statement contains a magic number: return VerifyVersionGreaterEqual(6' 3);
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,Win10OrLater,The following statement contains a magic number: return VerifyVersionGreaterEqual(10' 0);
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,OsVersionInt,The following statement contains a magic number: return OSMajorVersion < 10 ? OSMajorVersion*10 + OSMinorVersion : OSMajorVersion + OSMinorVersion;
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,OsVersionInt,The following statement contains a magic number: return OSMajorVersion < 10 ? OSMajorVersion*10 + OSMinorVersion : OSMajorVersion + OSMinorVersion;
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetLastInstalledWindowsUpdateTimestamp,The following statement contains a magic number: updateSearcher.ServerSelection = (ServerSelection)2;
Magic Number,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetLastInstalledWindowsUpdateTimestamp,The following statement contains a magic number: (i < count) && (i < 50)
Magic Number,OSPrerequisites,OSPrerequisites,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSPrerequisites.cs,OsCheck,The following statement contains a magic number: switch (OSInfo.OSInfo.GetOSSupported())        {          case OSInfo.OSInfo.OsSupport.Blocked:            Log.Error("*******************************************");            Log.Error("* ERROR' OS can't be used for MediaPortal *");            Log.Error("*******************************************");            if (dispMessage)            {              MessageBox.Show(MSG_NOT_INSTALLABLE' OSInfo.OSInfo.GetOSDisplayVersion()' MessageBoxButtons.OK'                              MessageBoxIcon.Error);            }            Environment.Exit(-100);            break;          case OSInfo.OSInfo.OsSupport.NotSupported:            //Used .Info as .Warning is missing            Log.Info("*******************************************");            Log.Info("* WARNING' OS not officially supported    *");            Log.Info("*******************************************");            if (dispMessage)            {              res = MessageBox.Show(MSG_NOT_SUPPORTED' OSInfo.OSInfo.GetOSDisplayVersion()' MessageBoxButtons.OKCancel'                                    MessageBoxIcon.Warning);              if (res == DialogResult.Cancel) Environment.Exit(-200);            }            break;          default:            break;        }
Magic Number,OSPrerequisites,OSPrerequisites,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSPrerequisites.cs,OsCheck,The following statement contains a magic number: switch (OSInfo.OSInfo.GetOSSupported())        {          case OSInfo.OSInfo.OsSupport.Blocked:            Log.Error("*******************************************");            Log.Error("* ERROR' OS can't be used for MediaPortal *");            Log.Error("*******************************************");            if (dispMessage)            {              MessageBox.Show(MSG_NOT_INSTALLABLE' OSInfo.OSInfo.GetOSDisplayVersion()' MessageBoxButtons.OK'                              MessageBoxIcon.Error);            }            Environment.Exit(-100);            break;          case OSInfo.OSInfo.OsSupport.NotSupported:            //Used .Info as .Warning is missing            Log.Info("*******************************************");            Log.Info("* WARNING' OS not officially supported    *");            Log.Info("*******************************************");            if (dispMessage)            {              res = MessageBox.Show(MSG_NOT_SUPPORTED' OSInfo.OSInfo.GetOSDisplayVersion()' MessageBoxButtons.OKCancel'                                    MessageBoxIcon.Warning);              if (res == DialogResult.Cancel) Environment.Exit(-200);            }            break;          default:            break;        }
Magic Number,OSPrerequisites,OSPrerequisites,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSPrerequisites.cs,OsCheck,The following statement contains a magic number: Environment.Exit(-300);
Magic Number,MediaPortal.Utils.CommandLine,CommandLine,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\CommandLine\CommandLine.cs,Parse,The following statement contains a magic number: string[] parts = Spliter.Split(txt' 3);
Magic Number,MediaPortal.Utils.CommandLine,CommandLine,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\CommandLine\CommandLine.cs,Parse,The following statement contains a magic number: switch (parts.Length)          {              // Found a value (for the last parameter               // found (space separator))            case 1:              if (parameter != null)              {                options.SetOption(parameter' Remover.Replace(parts[0]' "$1"));                parameter = null;              }              else              {                // else Error: no parameter waiting for a value (skipped)                throw (new ArgumentException());              }              break;                // Found just a parameter            case 2:              // The last parameter is still waiting.               // With no value' set it to null.              if (parameter != null)              {                options.SetOption(parameter' null);              }                parameter = parts[1];              break;                // Parameter with enclosed value            case 3:              // The last parameter is still waiting.               // With no value' set it to null              if (parameter != null)              {                options.SetOption(parameter' null);              }                // Set Option              options.SetOption(parts[1]' Remover.Replace(parts[2]' "$1"));                // clear parameter              parameter = null;              break;          }
Magic Number,MediaPortal.Utils.CommandLine,CommandLine,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\CommandLine\CommandLine.cs,Parse,The following statement contains a magic number: switch (parts.Length)          {              // Found a value (for the last parameter               // found (space separator))            case 1:              if (parameter != null)              {                options.SetOption(parameter' Remover.Replace(parts[0]' "$1"));                parameter = null;              }              else              {                // else Error: no parameter waiting for a value (skipped)                throw (new ArgumentException());              }              break;                // Found just a parameter            case 2:              // The last parameter is still waiting.               // With no value' set it to null.              if (parameter != null)              {                options.SetOption(parameter' null);              }                parameter = parts[1];              break;                // Parameter with enclosed value            case 3:              // The last parameter is still waiting.               // With no value' set it to null              if (parameter != null)              {                options.SetOption(parameter' null);              }                // Set Option              options.SetOption(parts[1]' Remover.Replace(parts[2]' "$1"));                // clear parameter              parameter = null;              break;          }
Magic Number,MediaPortal.Utils.CommandLine,CommandLine,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\CommandLine\CommandLine.cs,Parse,The following statement contains a magic number: switch (parts.Length)          {              // Found a value (for the last parameter               // found (space separator))            case 1:              if (parameter != null)              {                options.SetOption(parameter' Remover.Replace(parts[0]' "$1"));                parameter = null;              }              else              {                // else Error: no parameter waiting for a value (skipped)                throw (new ArgumentException());              }              break;                // Found just a parameter            case 2:              // The last parameter is still waiting.               // With no value' set it to null.              if (parameter != null)              {                options.SetOption(parameter' null);              }                parameter = parts[1];              break;                // Parameter with enclosed value            case 3:              // The last parameter is still waiting.               // With no value' set it to null              if (parameter != null)              {                options.SetOption(parameter' null);              }                // Set Option              options.SetOption(parts[1]' Remover.Replace(parts[2]' "$1"));                // clear parameter              parameter = null;              break;          }
Magic Number,MediaPortal.Profile,XmlSettingsProvider,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Configuration\XmlSettingsProvider.cs,IsAtEntry,The following statement contains a magic number: return reader.LocalName == "entry" && reader.Depth == 2 && reader.NodeType == XmlNodeType.Element;
Magic Number,MediaPortal.Localisation,LocalisationProvider,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Localisation\LocalisationProvider.cs,Clear,The following statement contains a magic number: _characters = 255;
Magic Number,MediaPortal.Localisation,LocalisationProvider,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Localisation\LocalisationProvider.cs,LoadStrings,The following statement contains a magic number: _characters = 1536;
Magic Number,MediaPortal.Localisation,LocalisationProvider,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Localisation\LocalisationProvider.cs,LoadStrings,The following statement contains a magic number: useChineseHackNum >= 128 && useChineseHackNum <= 1536
Magic Number,MediaPortal.Localisation,LocalisationProvider,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Localisation\LocalisationProvider.cs,LoadStrings,The following statement contains a magic number: useChineseHackNum >= 128 && useChineseHackNum <= 1536
Magic Number,MediaPortal.ServiceImplementations,Log4NetWrapper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\ServiceImplementations\Log4NetWrapper.cs,Log4NetWrapper,The following statement contains a magic number: var logLevel = (Level)MediaPortal.Profile.MPSettings.Instance.GetValueAsInt("general"' "loglevel"' 3);
Magic Number,MediaPortal.Time,BasicDate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\BasicDate.cs,BasicDate,The following statement contains a magic number: time /= 100L;
Magic Number,MediaPortal.Time,BasicDate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\BasicDate.cs,BasicDate,The following statement contains a magic number: _month = (int)(time % 100L);
Magic Number,MediaPortal.Time,BasicDate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\BasicDate.cs,BasicDate,The following statement contains a magic number: time /= 100L;
Magic Number,MediaPortal.Time,BasicDate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\BasicDate.cs,BasicDate,The following statement contains a magic number: _day = (int)(time % 100L);
Magic Number,MediaPortal.Time,BasicDate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\BasicDate.cs,ParseDateString,The following statement contains a magic number: int start = sepPos - 2;
Magic Number,MediaPortal.Time,BasicDate,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\BasicDate.cs,ParseDateString,The following statement contains a magic number: _day = int.Parse(strDate.Substring(sepPos + 1' 2));
Magic Number,MediaPortal.Time,DateRange,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\DateRange.cs,IsInRange,The following statement contains a magic number: _start < checkTime && checkTime.Month < 12 ||              _end > checkTime && checkTime.Month >= 1
Magic Number,MediaPortal.Time,DateRange,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\DateRange.cs,IsInRange,The following statement contains a magic number: _start < checkTime && checkTime.Month < 12 ||              _end > checkTime && checkTime.Month >= 1
Magic Number,MediaPortal.Utils.Time,BasicTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\BasicTime.cs,BasicTime,The following statement contains a magic number: time /= 100L;
Magic Number,MediaPortal.Utils.Time,BasicTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\BasicTime.cs,BasicTime,The following statement contains a magic number: _minute = (int)(time % 100L);
Magic Number,MediaPortal.Utils.Time,BasicTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\BasicTime.cs,BasicTime,The following statement contains a magic number: time /= 100L;
Magic Number,MediaPortal.Utils.Time,BasicTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\BasicTime.cs,BasicTime,The following statement contains a magic number: _hour = (int)(time % 100L);
Magic Number,MediaPortal.Utils.Time,BasicTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\BasicTime.cs,ParseTimeString,The following statement contains a magic number: int start = sepPos - 2;
Magic Number,MediaPortal.Utils.Time,BasicTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\BasicTime.cs,ParseTimeString,The following statement contains a magic number: _minute = int.Parse(strTime.Substring(sepPos + 1' 2));
Magic Number,MediaPortal.Utils.Time,BasicTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\BasicTime.cs,ParseTimeString,The following statement contains a magic number: _hour += 12;
Magic Number,MediaPortal.Utils.Time,BasicTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\BasicTime.cs,ParseTimeString,The following statement contains a magic number: _hour != 12
Magic Number,MediaPortal.Utils.Time,BasicTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\BasicTime.cs,ParseTimeString,The following statement contains a magic number: strTime.ToLowerInvariant().IndexOf("am") != -1 && _hour == 12
Magic Number,MediaPortal.Utils.Time,BasicTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\BasicTime.cs,ParseTimeString,The following statement contains a magic number: _hour == 24
Magic Number,MediaPortal.Utils.Time,TimeRange,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\TimeRange.cs,IsInRange,The following statement contains a magic number: _start < checkTime && checkTime.Hour < 24 ||              _end > checkTime && checkTime.Hour >= 0
Magic Number,MediaPortal.Utils.Time,TimeRange,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\TimeRange.cs,IsInRange,The following statement contains a magic number: _start < checkTime && checkTime.Hour < 24 ||              _end > checkTime && checkTime.Hour > 0
Magic Number,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,ToLongDateTime,The following statement contains a magic number: lDatetime *= 100;
Magic Number,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,ToLongDateTime,The following statement contains a magic number: lDatetime *= 100;
Magic Number,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,ToLongDateTime,The following statement contains a magic number: lDatetime *= 100;
Magic Number,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,ToLongDateTime,The following statement contains a magic number: lDatetime *= 100;
Magic Number,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,ToLongDateTime,The following statement contains a magic number: lDatetime *= 100;
Magic Number,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,ToLocalLongDateTime,The following statement contains a magic number: lDatetime *= 100;
Magic Number,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,ToLocalLongDateTime,The following statement contains a magic number: lDatetime *= 100;
Magic Number,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,ToLocalLongDateTime,The following statement contains a magic number: lDatetime *= 100;
Magic Number,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,ToLocalLongDateTime,The following statement contains a magic number: lDatetime *= 100;
Magic Number,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,ToLocalLongDateTime,The following statement contains a magic number: lDatetime *= 100;
Magic Number,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,SetFromLong,The following statement contains a magic number: _second = (int)(ldatetime % 100L);
Magic Number,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,SetFromLong,The following statement contains a magic number: ldatetime /= 100L;
Magic Number,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,SetFromLong,The following statement contains a magic number: _second < 0 || _second > 59
Magic Number,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,SetFromLong,The following statement contains a magic number: ldatetime > 10000000000000
Magic Number,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,SetFromLong,The following statement contains a magic number: _minute = (int)(ldatetime % 100L);
Magic Number,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,SetFromLong,The following statement contains a magic number: ldatetime /= 100L;
Magic Number,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,SetFromLong,The following statement contains a magic number: _hour = (int)(ldatetime % 100L);
Magic Number,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,SetFromLong,The following statement contains a magic number: ldatetime /= 100L;
Magic Number,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,SetFromLong,The following statement contains a magic number: _day = (int)(ldatetime % 100L);
Magic Number,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,SetFromLong,The following statement contains a magic number: ldatetime /= 100L;
Magic Number,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,SetFromLong,The following statement contains a magic number: _month = (int)(ldatetime % 100L);
Magic Number,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,SetFromLong,The following statement contains a magic number: ldatetime /= 100L;
Magic Number,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,SetFromLong,The following statement contains a magic number: _day < 0 || _day > 31
Magic Number,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,SetFromLong,The following statement contains a magic number: _month < 0 || _month > 12
Magic Number,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,SetFromLong,The following statement contains a magic number: _year < 1900 || _year > 2100
Magic Number,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,SetFromLong,The following statement contains a magic number: _year < 1900 || _year > 2100
Magic Number,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,SetFromLong,The following statement contains a magic number: _minute < 0 || _minute > 59
Magic Number,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,SetFromLong,The following statement contains a magic number: _hour == 24
Magic Number,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,SetFromLong,The following statement contains a magic number: _hour < 0 || _hour > 23
Magic Number,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,GetTimeOffset,The following statement contains a magic number: int mintue = (iOff % 100);
Magic Number,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,GetTimeOffset,The following statement contains a magic number: iOff /= 100;
Magic Number,MediaPortal.Utils.Time,WorldDateTime,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldDateTime.cs,GetTimeOffset,The following statement contains a magic number: int hour = (iOff % 100);
Magic Number,MediaPortal.Utils.Time,WorldTimeZone,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Time\WorldTimeZone.cs,GetDateTime,The following statement contains a magic number: TimeChange.WeekOfMonth == 4
Magic Number,MediaPortal.Utils.Web,HtmlString,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Web\html\HtmlString.cs,TagList,The following statement contains a magic number: length >= 3 &&                (source[i + 1] == '/' || source[i + 1] == '!' ||                 (source[i + 1] >= 'A' && source[i + 1] <= 'Z') ||                 (source[i + 1] >= 'a' && source[i + 1] <= 'z'))
Magic Number,MediaPortal.Utils.Web,HtmlString,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Web\html\HtmlString.cs,Decode,The following statement contains a magic number: stripped = stripped.Replace((char)145' '’');
Magic Number,MediaPortal.Utils.Web,HtmlString,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Web\html\HtmlString.cs,Decode,The following statement contains a magic number: stripped = stripped.Replace((char)146' '’');
Magic Number,MediaPortal.Utils.Web,HtmlString,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Web\html\HtmlString.cs,Decode,The following statement contains a magic number: stripped = stripped.Replace((char)148' '\"');
Magic Number,MediaPortal.Utils.Web,HtmlString,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Web\html\HtmlString.cs,Decode,The following statement contains a magic number: stripped = stripped.Replace((char)150' '-');
Magic Number,MediaPortal.Utils.Web,HtmlString,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Web\html\HtmlString.cs,Decode,The following statement contains a magic number: stripped = stripped.Replace((char)160' ' ');
Magic Number,MediaPortal.Utils.Web,HTTPTransaction,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Web\http\HTTPTransaction.cs,Transaction,The following statement contains a magic number: cookieParts.Length >= 2
Magic Number,MediaPortal.Utils.Web,SiteStatistics,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Web\http\SiteStatistics.cs,ToString,The following statement contains a magic number: return String.Format("Site {0} : Pages {1} : Bytes {2} : Total Time {3} : Av. Rate {4} KBps"' _site' _pages'                               _bytes' _totalTime.ToString()' rate / 1000);
Magic Number,MediaPortal.Utils.Web,SiteStatistics,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Web\http\SiteStatistics.cs,ToString,The following statement contains a magic number: rate > 1000
Magic Number,MediaPortal.Utils.Web,HtmlParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Web\Parser\HtmlParser.cs,GetHyperLink,The following statement contains a magic number: start += result.ToLowerInvariant().IndexOf("href=") + 5;
Magic Number,MediaPortal.Utils.Web,HtmlParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Web\Parser\HtmlParser.cs,GetHyperLink,The following statement contains a magic number: start += result.ToLowerInvariant().IndexOf("onclick=") + 8;
Magic Number,MediaPortal.Utils.Web,HtmlParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Web\Parser\HtmlParser.cs,GetJavaSubLinkParams,The following statement contains a magic number: param = new int[link.Length - start'2];
Magic Number,MediaPortal.Utils.Web,HtmlSectionParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\Web\Parser\HtmlSectionParser.cs,GetElements,The following statement contains a magic number: element.end = element.name.Substring(sepPos + 1' element.name.Length - sepPos - 2);
Missing Default,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSProductType,The following switch statement is missing a default case: switch (OSMajorVersion)        {            #region VERSION 4            case 4:            if (OSProductType == NTProductType.NT_WORKSTATION)              // Windows NT 4.0 Workstation              return "Workstation";            else if (OSProductType == NTProductType.NT_SERVER)            {              if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_ENTERPRISE))                // Windows NT 4.0 Server Enterprise                return "Enterprise Server";              else              // Windows NT 4.0 Server                return "Standard Server";            }            return string.Empty;              #endregion              #region VERSION 5            case 5:            if (GetSystemMetrics(SM_MEDIACENTER))              return "Media Center";            else if (GetSystemMetrics(SM_TABLETPC))              return "Tablet PC";            else if (OSProductType == NTProductType.NT_WORKSTATION)            {              if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_EMBEDDEDNT))              {                //Windows XP Embedded                return "Embedded";              }              else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_PERSONAL))              {                // Windows XP Home Edition                return "Home";              }              else              {                // Windows XP / Windows 2000 Professional                return "Professional";              }            }            else if (OSProductType == NTProductType.NT_SERVER || OSProductType == NTProductType.NT_DOMAIN_CONTROLLER)            {              if (OSMinorVersion == 0)              {                if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_DATACENTER))                  // Windows 2000 Datacenter Server                  return "Datacenter Server";                else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_ENTERPRISE))                  // Windows 2000 Advanced Server                  return "Advanced Server";                else                // Windows 2000 Server                  return "Server";              }              else if (OSMinorVersion == 2)              {                if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_DATACENTER))                  // Windows Server 2003 Datacenter Edition                  return "Datacenter Edition";                else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_ENTERPRISE))                  // Windows Server 2003 Enterprise Edition                  return "Enterprise Edition";                else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_STORAGE_SERVER))                  // Windows Server 2003 Storage Edition                  return "Storage Edition";                else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_COMPUTE_SERV))                  // Windows Server 2003 Compute Cluster Edition                  return "Compute Cluster Edition";                else if (osVersionInfo.wSuiteMask.HasFlag(SuiteFlags.VER_SUITE_BLADE))                  // Windows Server 2003 Web Edition                  return "Web Edition";                else                // Windows Server 2003 Standard Edition                  return "Standard Edition";              }            }            break;              #endregion              #region VERSION 6 and 10            case 6:          case 10:            int intProductType;            GetProductInfo(osVersionInfo.dwMajorVersion' osVersionInfo.dwMinorVersion' 0' 0' out intProductType);            return ((ProductType) intProductType).DescriptionAttr();              #endregion        }
Missing Default,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSNameString,The following switch statement is missing a default case: switch (osInfo.Platform)        {          case PlatformID.Win32Windows:          {            switch (OSMinorVersion)            {              case 0:                osName = "Windows 95";                break;              case 10:                osName = osInfo.Version.Revision == 2222 ? "Windows 98 Second Edition" : "Windows 98";                break;              case 90:                osName = "Windows Me";                break;            }            break;          }          case PlatformID.Win32NT:          {            switch (OSMajorVersion)            {              case 3:                osName = "Windows NT 3.51";                break;              case 4:                osName = "Windows NT 4.0";                break;              case 5:              {                switch (OSMinorVersion)                {                  case 0:                    osName = "Windows 2000";                    break;                  case 1:                    osName = "Windows XP";                    break;                  case 2:                    if (OSProductType == NTProductType.NT_WORKSTATION)                      osName = "WindowsXP x64";                    else                      osName = GetSystemMetrics(SM_SERVERR2) ? "Windows Server 2003 R2" : "Windows Server 2003";                    break;                }                break;              }              case 6:              {                switch (OSMinorVersion)                {                  case 0:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows Vista" : "Windows 2008";                    break;                  case 1:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 7" : "Windows 2008 R2";                    break;                  case 2:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 8" : "Windows 2012";                    break;                  case 3:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 8.1" : "Windows 2012 R2";                    break;                }                break;              }              case 10:              {                switch (OSMinorVersion)                {                  case 0:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 10" : "Windows 2016";                    break;                }                break;              }            }            break;          }        }
Missing Default,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSNameString,The following switch statement is missing a default case: switch (OSMinorVersion)            {              case 0:                osName = "Windows 95";                break;              case 10:                osName = osInfo.Version.Revision == 2222 ? "Windows 98 Second Edition" : "Windows 98";                break;              case 90:                osName = "Windows Me";                break;            }
Missing Default,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSNameString,The following switch statement is missing a default case: switch (OSMajorVersion)            {              case 3:                osName = "Windows NT 3.51";                break;              case 4:                osName = "Windows NT 4.0";                break;              case 5:              {                switch (OSMinorVersion)                {                  case 0:                    osName = "Windows 2000";                    break;                  case 1:                    osName = "Windows XP";                    break;                  case 2:                    if (OSProductType == NTProductType.NT_WORKSTATION)                      osName = "WindowsXP x64";                    else                      osName = GetSystemMetrics(SM_SERVERR2) ? "Windows Server 2003 R2" : "Windows Server 2003";                    break;                }                break;              }              case 6:              {                switch (OSMinorVersion)                {                  case 0:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows Vista" : "Windows 2008";                    break;                  case 1:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 7" : "Windows 2008 R2";                    break;                  case 2:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 8" : "Windows 2012";                    break;                  case 3:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 8.1" : "Windows 2012 R2";                    break;                }                break;              }              case 10:              {                switch (OSMinorVersion)                {                  case 0:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 10" : "Windows 2016";                    break;                }                break;              }            }
Missing Default,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSNameString,The following switch statement is missing a default case: switch (OSMinorVersion)                {                  case 0:                    osName = "Windows 2000";                    break;                  case 1:                    osName = "Windows XP";                    break;                  case 2:                    if (OSProductType == NTProductType.NT_WORKSTATION)                      osName = "WindowsXP x64";                    else                      osName = GetSystemMetrics(SM_SERVERR2) ? "Windows Server 2003 R2" : "Windows Server 2003";                    break;                }
Missing Default,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSNameString,The following switch statement is missing a default case: switch (OSMinorVersion)                {                  case 0:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows Vista" : "Windows 2008";                    break;                  case 1:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 7" : "Windows 2008 R2";                    break;                  case 2:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 8" : "Windows 2012";                    break;                  case 3:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 8.1" : "Windows 2012 R2";                    break;                }
Missing Default,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSNameString,The following switch statement is missing a default case: switch (OSMinorVersion)                {                  case 0:                    osName = OSProductType == NTProductType.NT_WORKSTATION ? "Windows 10" : "Windows 2016";                    break;                }
Missing Default,OSInfo,OSInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\Common-MP-TVE3\OsInfo\OSInfo.cs,GetOSName,The following switch statement is missing a default case: switch (OsVersionInt())        {          case 51:            return OSList.WindowsXp;          case 52:            if (OSProductType == NTProductType.NT_WORKSTATION)              return OSList.WindowsXp64;            else              return GetSystemMetrics(SM_SERVERR2) ? OSList.Windows2003R2 : OSList.Windows2003;          case 60:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.WindowsVista : OSList.Windows2008;          case 61:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.Windows7 : OSList.Windows2008R2;          case 62:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.Windows8 : OSList.Windows2012;          case 63:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.Windows81 : OSList.Windows2012R2;          case 10:            return OSProductType == NTProductType.NT_WORKSTATION ? OSList.Windows10 : OSList.Windows2016;        }
Missing Default,MediaPortal.Utils.CommandLine,CommandLine,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\CommandLine\CommandLine.cs,Parse,The following switch statement is missing a default case: switch (parts.Length)          {              // Found a value (for the last parameter               // found (space separator))            case 1:              if (parameter != null)              {                options.SetOption(parameter' Remover.Replace(parts[0]' "$1"));                parameter = null;              }              else              {                // else Error: no parameter waiting for a value (skipped)                throw (new ArgumentException());              }              break;                // Found just a parameter            case 2:              // The last parameter is still waiting.               // With no value' set it to null.              if (parameter != null)              {                options.SetOption(parameter' null);              }                parameter = parts[1];              break;                // Parameter with enclosed value            case 3:              // The last parameter is still waiting.               // With no value' set it to null              if (parameter != null)              {                options.SetOption(parameter' null);              }                // Set Option              options.SetOption(parts[1]' Remover.Replace(parts[2]' "$1"));                // clear parameter              parameter = null;              break;          }
Missing Default,MediaPortal.ServiceImplementations,Log4NetWrapper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\ServiceImplementations\Log4NetWrapper.cs,Log,The following switch statement is missing a default case: switch (commonLogLevel)        {          case CommonLogLevel.All:            CommonLogger.Instance.Debug(CommonLogType.Log' message' parameters);            break;          case CommonLogLevel.Debug:            CommonLogger.Instance.Debug(CommonLogType.Log' message' parameters);            break;          case CommonLogLevel.Information:            CommonLogger.Instance.Info(CommonLogType.Log' message' parameters);            break;          case CommonLogLevel.Warning:            CommonLogger.Instance.Warn(CommonLogType.Log' message' parameters);            break;          case CommonLogLevel.Error:            CommonLogger.Instance.Error(CommonLogType.Log' message' parameters);            break;          case CommonLogLevel.Critical:            CommonLogger.Instance.Critical(CommonLogType.Log' message' parameters);            break;        }
Missing Default,MediaPortal.ServiceImplementations,LogImpl,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\ServiceImplementations\LogImpl.cs,GetFileName,The following switch statement is missing a default case: switch (type)          {            case LogType.Recorder:              fname = "recorder.log";              break;            case LogType.Error:              fname = "error.log";              break;            case LogType.EPG:              fname = "epg.log";              break;            case LogType.VMR9:              fname = "vmr9.log";              break;            case LogType.MusicShareWatcher:              fname = "MusicshareWatcher.log";              break;            case LogType.WebEPG:              fname = "webEPG.log";              break;          }
Missing Default,MediaPortal.ServiceImplementations,LogImpl,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\Utils\ServiceImplementations\LogImpl.cs,GetLevelName,The following switch statement is missing a default case: switch (logLevel)        {          case Level.Error:            return "ERROR";            case Level.Warning:            return "Warn.";            case Level.Information:            return "Info.";            case Level.Debug:            return "Debug";        }
