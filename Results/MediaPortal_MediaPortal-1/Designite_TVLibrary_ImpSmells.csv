Implementation smell,Namespace,Class,File,Method,Description
Long Method,TvLibrary.Implementations.Analog.Components,Capture,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Capture.cs,CreateConfigurationBasedFilterInstance,The method has 143 lines of code.
Long Method,TvLibrary.Implementations.Analog.Components,Capture,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Capture.cs,CreateAutomaticFilterInstance,The method has 125 lines of code.
Long Method,TvLibrary.Implementations.Analog.Components,TeletextComponent,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\TeletextComponent.cs,CreateFilterInstance,The method has 143 lines of code.
Long Method,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CreateConfigurationBasedFilterInstance,The method has 102 lines of code.
Long Method,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CreateAutomaticFilterInstance,The method has 112 lines of code.
Long Method,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CheckCapabilities,The method has 197 lines of code.
Long Method,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,CreateFilterInstance,The method has 129 lines of code.
Long Method,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,ConnectMultiplexer,The method has 376 lines of code.
Long Method,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,AddTvEncoderFilter,The method has 234 lines of code.
Long Method,TvLibrary.Implementations.Analog.Components,TvAudio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\TvAudio.cs,CreateConfigurationBasedFilterInstance,The method has 114 lines of code.
Long Method,TvLibrary.Implementations.Analog.Components,TvAudio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\TvAudio.cs,CreateAutomaticFilterInstance,The method has 112 lines of code.
Long Method,TvLibrary.Implementations.Analog,TvCardAnalog,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\Analog\TvCardAnalog.cs,BuildGraph,The method has 120 lines of code.
Long Method,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,CheckCapabilities,The method has 202 lines of code.
Long Method,TvLibrary.Implementations.Analog.QualityControl,BaseControl,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\QualityControl\BaseControl.cs,ApplyQualityBitRate,The method has 125 lines of code.
Long Method,TvLibrary.Implementations,DeviceDetector,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DeviceDetector.cs,DetectSupportedBdaSourceDevices,The method has 196 lines of code.
Long Method,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The method has 172 lines of code.
Long Method,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The method has 135 lines of code.
Long Method,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,Decode,The method has 148 lines of code.
Long Method,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The method has 127 lines of code.
Long Method,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The method has 187 lines of code.
Long Method,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,ReadDeviceInfo,The method has 223 lines of code.
Long Method,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,HandleMmiMessage,The method has 118 lines of code.
Long Method,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,MmiHandler,The method has 201 lines of code.
Long Method,TvLibrary.Implementations.DVB,DvbBaseScanning,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DvbBaseScanning.cs,Scan,The method has 124 lines of code.
Long Method,TvLibrary.Implementations.DVB,MDPlug,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\MDPlug.cs,SetChannel,The method has 428 lines of code.
Long Method,TvLibrary.Implementations.DVB,TvDvbChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvDvbChannel.cs,WaitForPMT,The method has 122 lines of code.
Long Method,TvLibrary.Implementations.DVB,TvDvbChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvDvbChannel.cs,SetMpegPidMapping,The method has 147 lines of code.
Long Method,TvLibrary.Implementations.DVB,TvDvbChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvDvbChannel.cs,SendPmtToCam,The method has 132 lines of code.
Long Method,TvLibrary.Implementations.DVB,DVB_MMI_Handler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,HandleMMI,The method has 113 lines of code.
Long Method,TvLibrary.Implementations.DVB,ConditionalAccess,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ConditionalAccess.cs,ConditionalAccess,The method has 235 lines of code.
Long Method,TvLibrary.Implementations.DVB,ConditionalAccess,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ConditionalAccess.cs,SetDVBS2Modulation,The method has 184 lines of code.
Long Method,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The method has 155 lines of code.
Long Method,TvLibrary.Implementations.DVB,TvCardDVBS,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DVBS\TvCardDVBS.cs,BeforeTune,The method has 108 lines of code.
Long Method,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,BeforeTune,The method has 318 lines of code.
Long Method,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,BuildGraph,The method has 116 lines of code.
Long Method,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,SubmitTuneRequest,The method has 103 lines of code.
Long Method,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,PerformInternalNetworkProviderTuning,The method has 153 lines of code.
Long Method,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,AddDigitalDevicesCIModule,The method has 102 lines of code.
Long Method,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,AddBdaTransportFiltersToGraph,The method has 126 lines of code.
Long Method,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,Decompose,The method has 154 lines of code.
Long Method,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,UpdateSignalQuality,The method has 142 lines of code.
Long Method,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The method has 255 lines of code.
Long Method,TvLibrary.Teletext,TeletextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextDecoder.cs,Decode,The method has 245 lines of code.
Long Method,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The method has 254 lines of code.
Long Method,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The method has 437 lines of code.
Long Method,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,GetPageLinks,The method has 100 lines of code.
Complex Method,TvLibrary,DeviceSorter,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\DeviceSorter.cs,Sort,Cyclomatic complexity of the method is 18
Complex Method,TvLibrary.Implementations.Analog.Components,Capture,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Capture.cs,CreateConfigurationBasedFilterInstance,Cyclomatic complexity of the method is 17
Complex Method,TvLibrary.Implementations.Analog.Components,Capture,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Capture.cs,CreateAutomaticFilterInstance,Cyclomatic complexity of the method is 15
Complex Method,TvLibrary.Implementations.Analog.Components,Capture,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Capture.cs,CheckCapabilitiesVideoProcAmp,Cyclomatic complexity of the method is 12
Complex Method,TvLibrary.Implementations.Analog.Components,Capture,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Capture.cs,SetFrameRate,Cyclomatic complexity of the method is 8
Complex Method,TvLibrary.Implementations.Analog.Components,Capture,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Capture.cs,SetFrameSize,Cyclomatic complexity of the method is 8
Complex Method,TvLibrary.Implementations.Analog.Components,TeletextComponent,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\TeletextComponent.cs,CreateFilterInstance,Cyclomatic complexity of the method is 18
Complex Method,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CreateConfigurationBasedFilterInstance,Cyclomatic complexity of the method is 13
Complex Method,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CreateAutomaticFilterInstance,Cyclomatic complexity of the method is 13
Complex Method,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CheckCapabilities,Cyclomatic complexity of the method is 33
Complex Method,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,PerformTune,Cyclomatic complexity of the method is 11
Complex Method,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,Dispose,Cyclomatic complexity of the method is 22
Complex Method,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,CreateFilterInstance,Cyclomatic complexity of the method is 20
Complex Method,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,FindCapturePin,Cyclomatic complexity of the method is 9
Complex Method,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,ConnectEncoderFilter,Cyclomatic complexity of the method is 11
Complex Method,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,ConnectMultiplexer,Cyclomatic complexity of the method is 46
Complex Method,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,AddTvMultiPlexer,Cyclomatic complexity of the method is 10
Complex Method,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,AddTvEncoderFilter,Cyclomatic complexity of the method is 32
Complex Method,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,FindMediaPin,Cyclomatic complexity of the method is 8
Complex Method,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,FindAudioVideoPins,Cyclomatic complexity of the method is 14
Complex Method,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,AddAudioCompressor,Cyclomatic complexity of the method is 15
Complex Method,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,AddVideoCompressor,Cyclomatic complexity of the method is 14
Complex Method,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,AddAnalogMuxer,Cyclomatic complexity of the method is 9
Complex Method,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,AddInterVideoMuxer,Cyclomatic complexity of the method is 10
Complex Method,TvLibrary.Implementations.Analog.Components,Tuner,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Tuner.cs,SetFrequencyOverride,Cyclomatic complexity of the method is 8
Complex Method,TvLibrary.Implementations.Analog.Components,Tuner,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Tuner.cs,PerformTune,Cyclomatic complexity of the method is 13
Complex Method,TvLibrary.Implementations.Analog.Components,TvAudio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\TvAudio.cs,CreateConfigurationBasedFilterInstance,Cyclomatic complexity of the method is 14
Complex Method,TvLibrary.Implementations.Analog.Components,TvAudio,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\TvAudio.cs,CreateAutomaticFilterInstance,Cyclomatic complexity of the method is 12
Complex Method,TvLibrary.Implementations.Analog,TvCardAnalog,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\Analog\TvCardAnalog.cs,PauseGraph,Cyclomatic complexity of the method is 8
Complex Method,TvLibrary.Implementations.Analog,TvCardAnalog,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\Analog\TvCardAnalog.cs,StopGraph,Cyclomatic complexity of the method is 8
Complex Method,TvLibrary.Implementations.Analog,TvCardAnalog,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\Analog\TvCardAnalog.cs,Dispose,Cyclomatic complexity of the method is 12
Complex Method,TvLibrary.Implementations.Analog,TvCardAnalog,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\Analog\TvCardAnalog.cs,BuildGraph,Cyclomatic complexity of the method is 14
Complex Method,TvLibrary.Implementations.Analog,TvCardAnalog,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\Analog\TvCardAnalog.cs,RunGraph,Cyclomatic complexity of the method is 8
Complex Method,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,Dispose,Cyclomatic complexity of the method is 15
Complex Method,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,AddCaptureFilter,Cyclomatic complexity of the method is 9
Complex Method,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,AddEncoderFilter,Cyclomatic complexity of the method is 10
Complex Method,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,CheckCapabilities,Cyclomatic complexity of the method is 34
Complex Method,TvLibrary.Implementations.Analog,AnalogScanning,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\Analog\AnalogScanning.cs,Scan,Cyclomatic complexity of the method is 10
Complex Method,TvLibrary.Implementations.Analog.QualityControl,BaseControl,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\QualityControl\BaseControl.cs,ApplyQualityBitRate,Cyclomatic complexity of the method is 19
Complex Method,TvLibrary.Implementations,EncodersInUse,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Helper\EncodersInUse.cs,Add,Cyclomatic complexity of the method is 8
Complex Method,TvLibrary.Implementations,DeviceDetector,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DeviceDetector.cs,DetectSupportedLegacyAmFilterDevices,Cyclomatic complexity of the method is 11
Complex Method,TvLibrary.Implementations,DeviceDetector,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DeviceDetector.cs,DetectSupportedBdaSourceDevices,Cyclomatic complexity of the method is 29
Complex Method,TvLibrary.Implementations,DeviceDetector,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DeviceDetector.cs,OnUpnpRootDeviceAdded,Cyclomatic complexity of the method is 8
Complex Method,TvLibrary.Implementations,DeviceDetector,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DeviceDetector.cs,OnUpnpRootDeviceRemoved,Cyclomatic complexity of the method is 8
Complex Method,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,Cyclomatic complexity of the method is 24
Complex Method,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,Cyclomatic complexity of the method is 22
Complex Method,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,Decode,Cyclomatic complexity of the method is 25
Complex Method,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,Cyclomatic complexity of the method is 34
Complex Method,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,Decode,Cyclomatic complexity of the method is 17
Complex Method,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeTransponderName,Cyclomatic complexity of the method is 9
Complex Method,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeSatelliteText,Cyclomatic complexity of the method is 11
Complex Method,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeRatingsText,Cyclomatic complexity of the method is 9
Complex Method,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeRatingSystem,Cyclomatic complexity of the method is 9
Complex Method,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeCurrencySystem,Cyclomatic complexity of the method is 9
Complex Method,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeSourceName,Cyclomatic complexity of the method is 10
Complex Method,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeMapName,Cyclomatic complexity of the method is 9
Complex Method,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,Decode,Cyclomatic complexity of the method is 13
Complex Method,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,Cyclomatic complexity of the method is 25
Complex Method,TvLibrary.Implementations.Dri,ScannerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\ScannerDri.cs,OnTableSection,Cyclomatic complexity of the method is 11
Complex Method,TvLibrary.Implementations.Dri,ScannerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\ScannerDri.cs,OnLvctChannelDetail,Cyclomatic complexity of the method is 9
Complex Method,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,Dispose,Cyclomatic complexity of the method is 15
Complex Method,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,ReadDeviceInfo,Cyclomatic complexity of the method is 11
Complex Method,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,UpdateSignalQuality,Cyclomatic complexity of the method is 8
Complex Method,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,OnStateVariableChanged,Cyclomatic complexity of the method is 12
Complex Method,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,HandleMmiMessage,Cyclomatic complexity of the method is 10
Complex Method,TvLibrary.Implementations.DVB,DigitalDevices,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalDevices\DigitalDevices.cs,GetCamMenuText,Cyclomatic complexity of the method is 8
Complex Method,TvLibrary.Implementations.DVB,ProfRed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ProfRed\ProfRed.cs,SendDiseqCommand,Cyclomatic complexity of the method is 11
Complex Method,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,Turbosight,Cyclomatic complexity of the method is 8
Complex Method,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,HandleMenu,Cyclomatic complexity of the method is 10
Complex Method,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,MmiHandler,Cyclomatic complexity of the method is 26
Complex Method,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,SetTuningParameters,Cyclomatic complexity of the method is 12
Complex Method,TvLibrary.Implementations.DVB,ConexantBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\ConexantBDA.cs,SendDiseqCommand,Cyclomatic complexity of the method is 8
Complex Method,TvLibrary.Implementations.DVB,GenericBDAS,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\GenericBDAS.cs,SendDiSEqCCommand,Cyclomatic complexity of the method is 9
Complex Method,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SendDiseqCommand,Cyclomatic complexity of the method is 8
Complex Method,TvLibrary.Implementations.DVB,KNCAPI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\KNC\KNCAPI.cs,SendDiSEqCCommand,Cyclomatic complexity of the method is 9
Complex Method,TvLibrary.Implementations.DVB,TechnoTrendAPI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TechnoTrend\TechnoTrendAPI.cs,DescrambleMultiple,Cyclomatic complexity of the method is 15
Complex Method,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,GotoPosition,Cyclomatic complexity of the method is 12
Complex Method,TvLibrary.Implementations.DVB,DvbBaseScanning,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DvbBaseScanning.cs,Scan,Cyclomatic complexity of the method is 9
Complex Method,TvLibrary.Implementations.DVB,DvbBaseScanning,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DvbBaseScanning.cs,ScanNIT,Cyclomatic complexity of the method is 9
Complex Method,TvLibrary.Implementations.DVB,TvCardDVBIP,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DVBIP\TvCardDVBIP.cs,DoTune,Cyclomatic complexity of the method is 8
Complex Method,TvLibrary.Implementations.DVB,MDPlugs,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\MDPlug.cs,IsMDApiEnabled,Cyclomatic complexity of the method is 10
Complex Method,TvLibrary.Implementations.DVB,MDPlugs,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\MDPlug.cs,SetChannel,Cyclomatic complexity of the method is 10
Complex Method,TvLibrary.Implementations.DVB,MDPlug,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\MDPlug.cs,SetChannel,Cyclomatic complexity of the method is 69
Complex Method,TvLibrary.Implementations.DVB,TvDvbChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvDvbChannel.cs,WaitForPMT,Cyclomatic complexity of the method is 14
Complex Method,TvLibrary.Implementations.DVB,TvDvbChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvDvbChannel.cs,SetMpegPidMapping,Cyclomatic complexity of the method is 31
Complex Method,TvLibrary.Implementations.DVB,TvDvbChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvDvbChannel.cs,SendPmtToCam,Cyclomatic complexity of the method is 16
Complex Method,TvLibrary.Implementations.DVB,DVB_MMI_Handler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,HandleMMI,Cyclomatic complexity of the method is 14
Complex Method,TvLibrary.Implementations.DVB,ConditionalAccess,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ConditionalAccess.cs,ConditionalAccess,Cyclomatic complexity of the method is 28
Complex Method,TvLibrary.Implementations.DVB,ConditionalAccess,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ConditionalAccess.cs,IsCamReady,Cyclomatic complexity of the method is 11
Complex Method,TvLibrary.Implementations.DVB,ConditionalAccess,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ConditionalAccess.cs,SendPMT,Cyclomatic complexity of the method is 13
Complex Method,TvLibrary.Implementations.DVB,ConditionalAccess,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ConditionalAccess.cs,SendDiseqcCommand,Cyclomatic complexity of the method is 12
Complex Method,TvLibrary.Implementations.DVB,ConditionalAccess,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ConditionalAccess.cs,SendPids,Cyclomatic complexity of the method is 8
Complex Method,TvLibrary.Implementations.DVB,ConditionalAccess,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ConditionalAccess.cs,SetDVBS2Modulation,Cyclomatic complexity of the method is 35
Complex Method,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SendPMTToFireDTV,Cyclomatic complexity of the method is 13
Complex Method,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SendPMTToFireDTV,Cyclomatic complexity of the method is 9
Complex Method,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,Cyclomatic complexity of the method is 24
Complex Method,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,GetCAMName,Cyclomatic complexity of the method is 11
Complex Method,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SendDiseqcCommand,Cyclomatic complexity of the method is 9
Complex Method,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,CiMenuHandler,Cyclomatic complexity of the method is 10
Complex Method,TvLibrary.Implementations.DVB,TvCardATSC,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\ATSC\TvCardATSC.cs,BeforeTune,Cyclomatic complexity of the method is 15
Complex Method,TvLibrary.Implementations.DVB,TvCardDVBC,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DVBC\TvCardDVBC.cs,CreateTuningSpace,Cyclomatic complexity of the method is 9
Complex Method,TvLibrary.Implementations.DVB,TvCardDVBS,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DVBS\TvCardDVBS.cs,BeforeTune,Cyclomatic complexity of the method is 13
Complex Method,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,DoTune,Cyclomatic complexity of the method is 8
Complex Method,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,BeforeTune,Cyclomatic complexity of the method is 56
Complex Method,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,CanTune,Cyclomatic complexity of the method is 9
Complex Method,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,BuildGraph,Cyclomatic complexity of the method is 10
Complex Method,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,UpdateSignalQuality,Cyclomatic complexity of the method is 9
Complex Method,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,GetTunerCapabilities,Cyclomatic complexity of the method is 11
Complex Method,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,SubmitTuneRequest,Cyclomatic complexity of the method is 11
Complex Method,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,PerformInternalNetworkProviderTuning,Cyclomatic complexity of the method is 9
Complex Method,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,GetTunerSignalStatistics,Cyclomatic complexity of the method is 13
Complex Method,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,StopGraph,Cyclomatic complexity of the method is 9
Complex Method,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,AddNetworkProviderFilter,Cyclomatic complexity of the method is 13
Complex Method,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,AddWinTvCIModule,Cyclomatic complexity of the method is 11
Complex Method,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,AddDigitalDevicesCIModule,Cyclomatic complexity of the method is 10
Complex Method,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,AddAndConnectBDABoardFilters,Cyclomatic complexity of the method is 11
Complex Method,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,UseCaptureFilter,Cyclomatic complexity of the method is 11
Complex Method,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,AddBDARendererToGraph,Cyclomatic complexity of the method is 13
Complex Method,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,AddBdaTransportFiltersToGraph,Cyclomatic complexity of the method is 19
Complex Method,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,Decompose,Cyclomatic complexity of the method is 30
Complex Method,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,UpdateSignalQuality,Cyclomatic complexity of the method is 13
Complex Method,TvLibrary.Implementations.DVB,FilterGraphTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Helper\FilterGraphTools.cs,FindMediaPin,Cyclomatic complexity of the method is 8
Complex Method,TvLibrary.Hardware,TeVii,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\TeVii.cs,Translate,Cyclomatic complexity of the method is 15
Complex Method,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,Cyclomatic complexity of the method is 16
Complex Method,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,GetECM,Cyclomatic complexity of the method is 9
Complex Method,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,CaPmtStruct,Cyclomatic complexity of the method is 8
Complex Method,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,Cyclomatic complexity of the method is 36
Complex Method,TvLibrary.Implementations.DVB.Structures,PidInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\PidInfo.cs,ToString,Cyclomatic complexity of the method is 14
Complex Method,TvLibrary.Teletext,DVBTeletext,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\DVBTeletext.cs,GetPage,Cyclomatic complexity of the method is 9
Complex Method,TvLibrary.Teletext,FastTextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\FastTextDecoder.cs,DecodePacket27,Cyclomatic complexity of the method is 10
Complex Method,TvLibrary.Teletext,TeletextPage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPage.cs,SubPageReceived,Cyclomatic complexity of the method is 17
Complex Method,TvLibrary.Teletext,TeletextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextDecoder.cs,Decode,Cyclomatic complexity of the method is 28
Complex Method,TvLibrary.Teletext,TeletextPageCache,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageCache.cs,PageReceived,Cyclomatic complexity of the method is 20
Complex Method,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,Cyclomatic complexity of the method is 41
Complex Method,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,GetColor,Cyclomatic complexity of the method is 10
Complex Method,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,Cyclomatic complexity of the method is 90
Complex Method,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,Decode,Cyclomatic complexity of the method is 8
Complex Method,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,GetPageLinks,Cyclomatic complexity of the method is 22
Complex Method,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeAdditionalPages,Cyclomatic complexity of the method is 11
Long Parameter List,TvLibrary.Implementations.Analog.Components,Capture,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Capture.cs,CreateFilterInstance,The method has 6 parameters. Parameters: graph' capBuilder' graphBuilder' tuner' crossbar' tvAudio
Long Parameter List,TvLibrary.Implementations.Analog.Components,Capture,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Capture.cs,CreateConfigurationBasedFilterInstance,The method has 6 parameters. Parameters: graph' capBuilder' graphBuilder' tuner' crossbar' tvAudio
Long Parameter List,TvLibrary.Implementations.Analog.Components,Capture,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Capture.cs,CreateAutomaticFilterInstance,The method has 6 parameters. Parameters: graph' capBuilder' graphBuilder' tuner' crossbar' tvAudio
Long Parameter List,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,CreateFilterInstance,The method has 5 parameters. Parameters: _graphBuilder' _tuner' _tvAudio' _crossbar' _capture
Long Parameter List,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,ConnectEncoderFilter,The method has 6 parameters. Parameters: filterEncoder' isVideo' isAudio' matchPinNames' _graphBuilder' _capture
Long Parameter List,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,ConnectMultiplexer,The method has 5 parameters. Parameters: filterMultiPlexer' matchPinNames' _graphBuilder' _tuner' _capture
Long Parameter List,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,AddTvMultiPlexer,The method has 6 parameters. Parameters: matchPinNames' _graphBuilder' _tuner' _tvAudio' _crossbar' _capture
Long Parameter List,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,AddTvEncoderFilter,The method has 7 parameters. Parameters: matchPinNames' mpeg2ProgramFilter' _graphBuilder' _tuner' _tvAudio' _crossbar' _capture
Long Parameter List,TvLibrary.Implementations.Analog,AnalogSubChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\Analog\AnalogSubChannel.cs,AnalogSubChannel,The method has 5 parameters. Parameters: card' subchnnelId' tvAudio' hasTeletext' mpFileWriter
Long Parameter List,TvLibrary.Implementations.Analog,HDPVRChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\HDPVRChannel.cs,HDPVRChannel,The method has 5 parameters. Parameters: card' deviceType' subchannelId' filterTsWriter' graphBuilder
Long Parameter List,TvLibrary.Implementations.Analog.QualityControl,QualityControlFactory,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\QualityControl\QualityControlFactory.cs,createQualityControl,The method has 5 parameters. Parameters: configuration' filterVideoEncoder' filterCapture' filterMultiplexer' filterVideoCompressor
Long Parameter List,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeCarrierDefinition,The method has 5 parameters. Parameters: section' endOfSection' pointer' firstIndex' transmissionMedium
Long Parameter List,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The method has 5 parameters. Parameters: section' endOfSection' pointer' firstIndex' transmissionMedium
Long Parameter List,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The method has 5 parameters. Parameters: section' endOfSection' pointer' transmissionMedium' vctId
Long Parameter List,TvLibrary.Implementations.Dri,ScannerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\ScannerDri.cs,OnModulationMode,The method has 7 parameters. Parameters: transmissionMedium' index' transmissionSystem' innerCodingMode' isSplitBitstreamMode' modulationFormat' symbolRate
Long Parameter List,TvLibrary.Implementations.Dri,ScannerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\ScannerDri.cs,OnLvctChannelDetail,The method has 16 parameters. Parameters: tableType' shortName' majorChannelNumber' minorChannelNumber' modulationMode' carrierFrequency' channelTsid' programNumber' etmLocation' accessControlled' hidden' pathSelect' outOfBand' hideGuide' serviceType' sourceId
Long Parameter List,TvLibrary.Implementations.Dri,ScannerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\ScannerDri.cs,OnSvctChannelDetail,The method has 11 parameters. Parameters: transmissionMedium' vctId' virtualChannelNumber' applicationVirtualChannel' bitstreamSelect' pathSelect' channelType' sourceId' cdsReference' programNumber' mmsReference
Long Parameter List,TvLibrary.Implementations.Dri.Service,AuxService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\AuxService.cs,SetAuxParameters,The method has 5 parameters. Parameters: selectType' selectInput' selectFormat' actualFormat' currentGenLock
Long Parameter List,TvLibrary.Implementations.Dri.Service,AvTransportService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\AvTransportService.cs,GetMediaInfo,The method has 10 parameters. Parameters: instanceId' nrTracks' mediaDuration' currentUri' currentUriMetaData' nextUri' nextUriMetaData' playMedium' recordMedium' writeStatus
Long Parameter List,TvLibrary.Implementations.Dri.Service,AvTransportService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\AvTransportService.cs,GetPositionInfo,The method has 9 parameters. Parameters: instanceId' track' trackDuration' trackMetaData' trackUri' relTime' absTime' relCount' absCount
Long Parameter List,TvLibrary.Implementations.Dri.Service,CasService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\CasService.cs,GetCardStatus,The method has 7 parameters. Parameters: currentCardStatus' currentCardManufacturer' currentCardVersion' currentDaylightSaving' currentEaLocationCode' currentRatingRegion' currentTimeZone
Long Parameter List,TvLibrary.Implementations.Dri.Service,ConnectionManagerService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\ConnectionManagerService.cs,PrepareForConnection,The method has 7 parameters. Parameters: remoteProtocolInfo' peerConnectionManager' peerConnectionId' direction' connectionId' avTransportId' rcsId
Long Parameter List,TvLibrary.Implementations.Dri.Service,ConnectionManagerService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\ConnectionManagerService.cs,GetCurrentConnectionInfo,The method has 8 parameters. Parameters: connectionId' rcsId' avTransportId' protocolInfo' peerConnectionManager' peerConnectionId' direction' status
Long Parameter List,TvLibrary.Implementations.Dri.Service,EncoderService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\EncoderService.cs,SetEncoderParameters,The method has 12 parameters. Parameters: audioMode' audioBitrate' audioMethod' mute' fieldToggle' signalSource' noiseFilter' pulldown' sap' videoMode' videoBitrate' videoMethod
Long Parameter List,TvLibrary.Implementations.Dri.Service,EncoderService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\EncoderService.cs,GetEncoderParameters,The method has 20 parameters. Parameters: currentAudioMax' currentAudioMin' currentAudioMode' currentAudioStepping' currentAudioBitrate' currentAudioMethod' currentMuteStatus' currentFieldOrder' currentSignalSource' currentNoiseFilter' currentPulldownStatus' currentPulldownSetting' currentSapStatus' currentSapSetting' currentVideoMax' currentVideoMin' currentVideoMode' currentVideoBitrate' currentVideoStepping' currentVideoMethod
Long Parameter List,TvLibrary.Implementations.Dri.Service,FdcService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\FdcService.cs,GetFdcStatus,The method has 5 parameters. Parameters: currentBitrate' currentCarrierLock' currentFrequency' currentSpectrumInversion' currentPidList
Long Parameter List,TvLibrary.Implementations.Dri.Service,TunerService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\TunerService.cs,SetTunerParameters,The method has 5 parameters. Parameters: newFrequency' newModulationList' currentFrequency' currentModulation' pcrLockStatus
Long Parameter List,TvLibrary.Implementations.Dri.Service,TunerService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\TunerService.cs,GetTunerParameters,The method has 6 parameters. Parameters: currentCarrierLock' currentFrequency' currentModulation' currentPcrLock' currentSignalLevel' currentSnr
Long Parameter List,TvLibrary.Implementations.Dri.Service,TunerService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\TunerService.cs,SeekSignal,The method has 6 parameters. Parameters: startFrequency' stopFrequency' newModulationList' increment' seekUp' timeToBlock
Long Parameter List,TvLibrary.Implementations.DVB,IKsControl,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalDevices\DigitalDevices.cs,KsProperty,The method has 5 parameters. Parameters: Property' PropertyLength' PropertyData' DataLength' BytesReturned
Long Parameter List,TvLibrary.Implementations.DVB,IKsControl,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalDevices\DigitalDevices.cs,KsMethod,The method has 5 parameters. Parameters: Method' MethodLength' MethodData' DataLength' BytesReturned
Long Parameter List,TvLibrary.Implementations.DVB,IKsControl,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalDevices\DigitalDevices.cs,KsEvent,The method has 5 parameters. Parameters: Event' EventLength' EventData' DataLength' BytesReturned
Long Parameter List,TvLibrary.Implementations.DVB,WinTvCiModule,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\WinTvCiModule.cs,OnCamInfo,The method has 5 parameters. Parameters: Context' appType' appManuf' manufCode' Info
Long Parameter List,TvLibrary.Implementations.DVB,KNCAPI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\KNC\KNCAPI.cs,OnCiMenu,The method has 6 parameters. Parameters: slot' lpszTitle' lpszSubTitle' lpszBottom' nNumChoices' pParam
Long Parameter List,TvLibrary.Implementations.DVB,KNCAPI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\KNC\KNCAPI.cs,OnCiRequest,The method has 5 parameters. Parameters: slot' bBlind' nAnswerLength' lpszText' pParam
Long Parameter List,TvLibrary.Implementations.DVB,TechnoTrendAPI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TechnoTrend\TechnoTrendAPI.cs,bdaapiGetDrvVersion,The method has 5 parameters. Parameters: device' v1' v2' v3' v4
Long Parameter List,TvLibrary.Implementations.DVB,TechnoTrendAPI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TechnoTrend\TechnoTrendAPI.cs,bdaapiSetDiSEqCMsg,The method has 6 parameters. Parameters: device' data' length' repeat' toneburst' polarity
Long Parameter List,TvLibrary.Implementations.DVB,TechnoTrendAPI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TechnoTrend\TechnoTrendAPI.cs,onDisplayMenuOrList,The method has 5 parameters. Parameters: Context' nSlot' wItems' pStringArray' wLength
Long Parameter List,TvLibrary.Implementations.DVB,TechnoTrendAPI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TechnoTrend\TechnoTrendAPI.cs,onInputRequest,The method has 5 parameters. Parameters: Context' nSlot' bBlindAnswer' nExpectedLength' dwKeyMask
Long Parameter List,TvLibrary.Implementations.DVB,TechnoTrendAPI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TechnoTrend\TechnoTrendAPI.cs,onLscTransmitBuffer,The method has 5 parameters. Parameters: Context' nSlot' PhaseID' pData' nLength
Long Parameter List,TvLibrary.Implementations.DVB,IChangeChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\MDPlug.cs,ChangeChannel,The method has 8 parameters. Parameters: frequency' bandwidth' polarity' videopid' audiopid' ecmpid' caid' providerid
Long Parameter List,TvLibrary.Implementations.DVB,TvDvbChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvDvbChannel.cs,TvDvbChannel,The method has 7 parameters. Parameters: graphBuilder' ca' mdplugs' tif' tsWriter' subChannelId' channel
Long Parameter List,TvLibrary.Implementations.DVB,DVB_MMI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,CreateMMIAnswer,The method has 5 parameters. Parameters: Cancel' Answer' uData' uLength1' uLength2
Long Parameter List,TvLibrary.Implementations.DVB,ConditionalAccess,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ConditionalAccess.cs,SendPMT,The method has 6 parameters. Parameters: subChannel' channel' PMT' pmtLength' audioPid' isPmtChange
Long Parameter List,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The method has 5 parameters. Parameters: isDvbc' isDvbT' isDvbS' isAtsc' pids
Long Parameter List,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,InitStructure,The method has 5 parameters. Parameters: ControlCode' InBuffer' InBufferSize' OutBuffer' OutBufferSize
Long Parameter List,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,SetLnbData,The method has 6 parameters. Parameters: lnbPower' LNBLOFLowBand' LNBLOFHighBand' LNBLOFHiLoSW' turnon22Khz' disEqcPort
Long Parameter List,TvLibrary.Implementations.DVB,IB2C2MPEG2AVCtrl2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\DVBSkyStar2Helper.cs,GetAudioVideoState,The method has 6 parameters. Parameters: a' b' c' d' e' f
Long Parameter List,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,RegOpenKeyEx,The method has 5 parameters. Parameters: key' subKey' ulOptions' sam' resultKey
Long Parameter List,TvLibrary.Implementations.DVB,FilterGraphTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Helper\FilterGraphTools.cs,FindMediaPin,The method has 5 parameters. Parameters: filter' mediaType' mediaSubtype' direction' index
Long Parameter List,TvLibrary.Implementations.DVB,FilterGraphTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Helper\FilterGraphTools.cs,GetPinByCategoryAndDirection,The method has 5 parameters. Parameters: vSource' PinCategory' iIndex' vDir' pinIndex
Long Parameter List,TvLibrary.Implementations.DVB,FilterGraphTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Helper\FilterGraphTools.cs,ConnectFilters,The method has 6 parameters. Parameters: graphBuilder' upFilter' sourcePinName' downFilter' destPinName' useIntelligentConnect
Long Parameter List,TvLibrary.Implementations.DVB,IStorage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Helper\FilterGraphTools.cs,CreateStream,The method has 5 parameters. Parameters: pwcsName' grfMode' reserved1' reserved2' ppstm
Long Parameter List,TvLibrary.Implementations.DVB,IStorage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Helper\FilterGraphTools.cs,OpenStream,The method has 5 parameters. Parameters: pwcsName' reserved1' grfMode' reserved2' ppstm
Long Parameter List,TvLibrary.Implementations.DVB,IStorage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Helper\FilterGraphTools.cs,CreateStorage,The method has 5 parameters. Parameters: pwcsName' grfMode' reserved1' reserved2' ppstg
Long Parameter List,TvLibrary.Implementations.DVB,IStorage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Helper\FilterGraphTools.cs,OpenStorage,The method has 6 parameters. Parameters: pwcsName' pstgPriority' grfMode' snbExclude' reserved' ppstg
Long Parameter List,TvLibrary.Implementations.DVB,NativeMethods,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Helper\FilterGraphTools.cs,OleCreatePropertyFrame,The method has 11 parameters. Parameters: hwndOwner' x' y' lpszCaption' cObjects' ppUnk' cPages' pPageClsID' lcid' dwReserved' pvReserved
Long Parameter List,TvLibrary.Implementations.DVB,NativeMethods,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Helper\FilterGraphTools.cs,StgOpenStorage,The method has 6 parameters. Parameters: pwcsName' pstgPriority' grfMode' snbExclude' reserved' ppstgOpen
Long Parameter List,TvLibrary.Hardware,TeVii,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\TeVii.cs,TuneTransponder,The method has 8 parameters. Parameters: idx' Freq' SymbRate' LOF' Pol' F22KHz' MOD' FEC
Long Parameter List,TvLibrary.Hardware,TeVii,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\TeVii.cs,SendDiSEqC,The method has 5 parameters. Parameters: idx' Data' Len' Repeats' Flg
Long Parameter List,TvLibrary.Helper,SidHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Helper\SidHelper.cs,LookupAccountSid,The method has 7 parameters. Parameters: systemName' sid' name' cbName' referencedDomainName' cbReferencedDomainName' use
Long Parameter List,TvLibrary.Helper,SidHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Helper\SidHelper.cs,LookupAccountName,The method has 7 parameters. Parameters: systemName' accountName' sid' cbSid' referencedDomainName' cbReferencedDomainName' use
Long Parameter List,TvLibrary.Interfaces.Analyzer,ITsChannelLinkageScanner,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Interfaces\Analyzer\ITsChannelLinkageScanner.cs,GetLinkedChannel,The method has 6 parameters. Parameters: channelIndex' linkIndex' network_id' transport_id' service_id' name
Long Parameter List,TvLibrary.Interfaces.Analyzer,ITsFilter,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Interfaces\Analyzer\ITsFilter.cs,RecordSetPmtPid,The method has 5 parameters. Parameters: handle' pmtPid' serviceId' pmtData' pmtLength
Long Parameter List,TvLibrary.Interfaces.Analyzer,ITsFilter,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Interfaces\Analyzer\ITsFilter.cs,TimeShiftSetPmtPid,The method has 5 parameters. Parameters: handle' pmtPid' serviceId' pmtData' pmtLength
Long Parameter List,TvLibrary.Interfaces.Analyzer,ITsFilter,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Interfaces\Analyzer\ITsFilter.cs,GetStreamQualityCounters,The method has 5 parameters. Parameters: handle' totalTsBytes' totalRecordingBytes' TsDiscontinuity' recordingDiscontinuity
Long Parameter List,TvLibrary.Interfaces.Analyzer,ITsChannelScan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Interfaces\Analyzer\ITsChannelScan.cs,GetChannel,The method has 17 parameters. Parameters: index' networkId' transportId' serviceId' majorChannel' minorChannel' frequency' lcn' freeCAMode' serviceType' modulation' providerName' serviceName' pmtPid' hasVideo' hasAudio' hasCaDescriptor
Long Parameter List,TvLibrary.Interfaces.Analyzer,ITsChannelScan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Interfaces\Analyzer\ITsChannelScan.cs,GetNITChannel,The method has 10 parameters. Parameters: channel' chType' frequency' polarisation' modulation' symbolrate' bandwidth' fecInner' rollOff' networkName
Long Parameter List,TvLibrary.Interfaces.Analyzer,ITsEpgScanner,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Interfaces\Analyzer\ITsEpgScanner.cs,GetEPGEvent,The method has 9 parameters. Parameters: channel' eventid' languageCount' date' time' duration' genre' starRating' classification
Long Parameter List,TvLibrary.Interfaces.Analyzer,ITsEpgScanner,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Interfaces\Analyzer\ITsEpgScanner.cs,GetEPGLanguage,The method has 7 parameters. Parameters: channel' eventid' languageIndex' language' eventText' eventDescription' parentalRating
Long Parameter List,TvLibrary.Interfaces.Analyzer,ITsEpgScanner,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Interfaces\Analyzer\ITsEpgScanner.cs,GetMHWTitle,The method has 14 parameters. Parameters: program' id' transportId' networkId' channelId' programId' themeId' PPV' Summaries' duration' dateStart' timeStart' title' programName
Long Parameter List,TvLibrary.Interfaces.Analyzer,ITsEpgScanner,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Interfaces\Analyzer\ITsEpgScanner.cs,GetMHWChannel,The method has 5 parameters. Parameters: channelNr' channelId' networkId' transportId' channelName
Long Parameter List,TvLibrary.Interfaces.Analyzer,WinTv_CI_Wrapper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Interfaces\Analyzer\IWinTvUsbCI.cs,WinTVCI_Init,The method has 5 parameters. Parameters: pUSBCIFilter' onStatus' onCamInfo' onAPDU' onCloseMMI
Long Parameter List,TvLibrary.Streaming,RtspStreaming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Streaming\RtspStreaming.cs,StreamGetClientDetail,The method has 5 parameters. Parameters: clientNr' ipAdres' streamName' isActive' ticks
Long Parameter List,TvLibrary.Teletext,TeletextPage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPage.cs,SubPageReceived,The method has 7 parameters. Parameters: pageNumber' subPageNumber' pageData' isUpdate' isNew' isDeleted' vbiLines
Long Parameter List,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The method has 8 parameters. Parameters: graph' chr' attrib' x' y' w' h' txtLanguage
Long Parameter List,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,GetPageLinks,The method has 8 parameters. Parameters: cache' pageNumber' redPage' greenPage' yellowPage' bluePage' nextGroup' nextBlock
Long Identifier,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,,The length of the parameter CROSSBAR_NAME_HDPVR2_COLOSSUS2 is 30.
Long Identifier,TvLibrary.Implementations,DeviceDetector,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DeviceDetector.cs,,The length of the parameter _systemDeviceChangeEventWatcher is 31.
Long Identifier,TvLibrary.Implementations.Dri.Service,AvTransportService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\AvTransportService.cs,,The length of the parameter _getCurrentTransportActionsAction is 33.
Long Identifier,TvLibrary.Implementations.Dri.Service,ConnectionManagerService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\ConnectionManagerService.cs,,The length of the parameter _getCurrentConnectionIdsAction is 30.
Long Identifier,TvLibrary.Implementations.Dri.Service,ConnectionManagerService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\ConnectionManagerService.cs,,The length of the parameter _getCurrentConnectionInfoAction is 31.
Long Identifier,TvLibrary.Implementations.DVB,DigitalDevices,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalDevices\DigitalDevices.cs,,The length of the parameter KSPROPERTYSET_DD_COMMON_INTERFACE is 33.
Long Identifier,TvLibrary.Implementations.DVB,TechnoTrendAPI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TechnoTrend\TechnoTrendAPI.cs,,The length of the parameter LUSB2BDA_DVB_NAME_S_TUNER_FAKE is 30.
Long Identifier,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,,The length of the parameter KSPROPERTY_FIRESAT_SELECT_PIDS_DVB_C is 36.
Long Identifier,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,,The length of the parameter KSPROPERTY_FIRESAT_SELECT_PIDS_DVB_T is 36.
Long Identifier,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,,The length of the parameter KSPROPERTY_FIRESAT_SELECT_PIDS_DVB_S is 36.
Long Identifier,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,,The length of the parameter KSPROPERTY_FIRESAT_DRIVER_VERSION is 33.
Long Identifier,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,,The length of the parameter KSPROPERTY_FIRESAT_GET_FIRMWARE_VERSION is 39.
Long Identifier,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,,The length of the parameter KSPROPERTY_FIRESAT_GET_CI_STATUS is 32.
Long Identifier,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,,The length of the parameter KSPROPERTY_FIRESAT_LNB_CONTROL is 30.
Long Identifier,TvLibrary.Implementations.DVB,DVBSkyStar2Helper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\DVBSkyStar2Helper.cs,,The length of the parameter CLSID_Mpeg2VideoStreamAnalyzer is 30.
Long Identifier,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,SendHwPids,The length of the parameter PID_CAPTURE_ALL_INCLUDING_NULLS is 31.
Long Identifier,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,,The length of the parameter _interfaceChannelLinkageScanner is 31.
Long Statement,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,AddMpegMuxer,The length of the statement  "        if (!_capture.VideoCaptureDevicePath.ToLower().StartsWith(@"@device:pnp:\\?\usb#vid_03f3&pid_0091#") && // Adaptec AVC-3610 tuner 1 " is 131.
Long Statement,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,AddMpegMuxer,The length of the statement  "            !_capture.VideoCaptureDevicePath.ToLower().StartsWith(@"@device:pnp:\\?\usb#vid_03f3&pid_0093#") && // Adaptec AVC-3610 tuner 2 " is 127.
Long Statement,TvLibrary.Implementations.Analog.QualityControl,BaseControl,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\QualityControl\BaseControl.cs,CheckCapabilities,The length of the statement  "        //ENCAPIPARAM_BITRATE_MODE 	Specifies the bit-rate mode' as a VIDEOENCODER_BITRATE_MODE enumeration value (32-bit signed long). " is 127.
Long Statement,TvLibrary.Implementations.Analog.QualityControl,BaseControl,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\QualityControl\BaseControl.cs,CheckCapabilities,The length of the statement  "        //ENCAPIPARAM_BITRATE 	Specifies the bit rate' in bits per second. In constant bit rate (CBR) mode' the value gives the constant bitrate. In either variable bit rate mode' it gives the average bit rate. The value is a 32-bit unsigned long. " is 239.
Long Statement,TvLibrary.Implementations.Analog.QualityControl,BaseControl,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\QualityControl\BaseControl.cs,CheckCapabilities,The length of the statement  "        //ENCAPIPARAM_PEAK_BITRATE 	Secifies the peak bit rate. This parameter is relevant only when ENCAPIPARAM_BITRATE_MODE has been set to VariableBitRatePeak. " is 154.
Long Statement,TvLibrary.Implementations,DeviceDetector,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DeviceDetector.cs,Start,The length of the statement  "      _upnpAgent.SharedControlPointData.SSDPController.SearchDeviceByDeviceTypeVersion("schemas-opencable-com:service:Tuner"' "1"' null); " is 131.
Long Statement,TvLibrary.Implementations,DeviceDetector,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DeviceDetector.cs,InitBdaDetectionGraph,The length of the statement  "      _atscNp = FilterGraphTools.AddFilterFromClsid(_graphBuilder' typeof(ATSCNetworkProvider).GUID' "ATSC Network Provider"); " is 120.
Long Statement,TvLibrary.Implementations,DeviceDetector,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DeviceDetector.cs,InitBdaDetectionGraph,The length of the statement  "      _dvbcNp = FilterGraphTools.AddFilterFromClsid(_graphBuilder' typeof(DVBCNetworkProvider).GUID' "DVB-C Network Provider"); " is 121.
Long Statement,TvLibrary.Implementations,DeviceDetector,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DeviceDetector.cs,InitBdaDetectionGraph,The length of the statement  "      _dvbsNp = FilterGraphTools.AddFilterFromClsid(_graphBuilder' typeof(DVBSNetworkProvider).GUID' "DVB-S Network Provider"); " is 121.
Long Statement,TvLibrary.Implementations,DeviceDetector,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DeviceDetector.cs,InitBdaDetectionGraph,The length of the statement  "      _dvbtNp = FilterGraphTools.AddFilterFromClsid(_graphBuilder' typeof(DVBTNetworkProvider).GUID' "DVB-T Network Provider"); " is 121.
Long Statement,TvLibrary.Implementations,DeviceDetector,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DeviceDetector.cs,DetectSupportedBdaSourceDevices,The length of the statement  "              genericNp = FilterGraphTools.AddFilterFromClsid(_graphBuilder' typeof(NetworkProvider).GUID' "Microsoft Network Provider"); " is 123.
Long Statement,TvLibrary.Implementations,DeviceDetector,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DeviceDetector.cs,OnUpnpRootDeviceAdded,The length of the statement  "      if (rootDescriptor == null || rootDescriptor.State != RootDescriptorState.Ready || _knownUpnpDevices.Contains(rootDescriptor.SSDPRootEntry.RootDeviceUUID)) " is 155.
Long Statement,TvLibrary.Implementations,DeviceDetector,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DeviceDetector.cs,OnUpnpRootDeviceRemoved,The length of the statement  "            Log.Log.Info("  remove {0} {1}"' childDeviceDescriptorEn.Current.FriendlyName' childDeviceDescriptorEn.Current.DeviceUDN); " is 122.
Long Statement,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The length of the statement  "      Log.Log.Debug("L-VCT: section length = {0}' transport stream ID = 0x{1:x}' version number = {2}' section number = {3}' last section number {4}' protocol version = {5}' number of channels in section = 0x{6:x}"' " is 209.
Long Statement,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The length of the statement  "        sectionLength' transportStreamId' versionNumber' sectionNumber' lastSectionNumber' protocolVersion' numChannelsInSection); " is 122.
Long Statement,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The length of the statement  "          Log.Log.Error("L-VCT: detected number of channels in section {0} is invalid' pointer = {1}' end of section = {2}' loop = {3}"' numChannelsInSection' pointer' endOfSection' i); " is 175.
Long Statement,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The length of the statement  "        Log.Log.Debug("L-VCT: channel' short name = {0}' major channel number = {1}' minor channel number = {2}' modulation mode = {3}' carrier frequency = {4} Hz' TSID = 0x{5:x}' program number = 0x{6:x}' ETM location = {7}' access controlled = {8}' hidden = {9}' path select = {10}' out of band = {11}' hide guide = {12}' service type = {13}' source ID = 0x{14:x}"' " is 359.
Long Statement,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The length of the statement  "          OnChannelDetail(tableType' shortName' majorChannelNumber' minorChannelNumber' modulationMode' carrierFrequency' channelTsid' " is 124.
Long Statement,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The length of the statement  "          Log.Log.Error("L-VCT: invalid descriptors length {0}' pointer = {1}' end of section = {2}' loop = {3}"' descriptorsLength' pointer' endOfSection' i); " is 149.
Long Statement,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The length of the statement  "            Log.Log.Error("L-VCT: invalid descriptor length {0}' pointer = {1}' end of descriptors = {2}' loop = {3}"' length' pointer' endOfDescriptors' i); " is 145.
Long Statement,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The length of the statement  "          Log.Log.Error("L-VCT: corruption detected at end of descriptors' pointer = {0}' end of section = {1}' end of descriptors = {2}' loop = {3}"' pointer' endOfSection' endOfDescriptors' i); " is 185.
Long Statement,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The length of the statement  "        Log.Log.Error("L-VCT: invalid additional descriptors length {0}' pointer = {1}' end of section = {2}"' additionalDescriptorsLength' pointer' endOfSection); " is 155.
Long Statement,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The length of the statement  "          Log.Log.Error("L-VCT: invalid additional descriptor length {0}' pointer = {1}' end of section = {2}"' length' pointer' endOfSection); " is 133.
Long Statement,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The length of the statement  "        Log.Log.Error("L-VCT: corruption detected at end of section' pointer = {0}' end of section = {1}"' pointer' endOfSection); " is 122.
Long Statement,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The length of the statement  "      Log.Log.Debug("MGT: section length = {0}' map ID = 0x{1:x}' version number = {2}' section number = {3}' last section number {4}' protocol version = {5}' tables defined = {6}"' " is 175.
Long Statement,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The length of the statement  "          Log.Log.Error("MGT: detected tables defined {0} is invalid' pointer = {1}' end of section = {2}' loop = {3}"' tablesDefined' pointer' endOfSection' i); " is 151.
Long Statement,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The length of the statement  "        Log.Log.Debug("MGT: table type = 0x{0:x}' PID = 0x{1:x}' version number = {2}"' tableType' tableTypePid' tableTypeVersionNumber); " is 129.
Long Statement,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The length of the statement  "          Log.Log.Error("MGT: invalid table type descriptors length {0}' pointer = {1}' end of section = {2}' loop = {3}"' tableTypeDescriptorsLength' pointer' endOfSection' i); " is 167.
Long Statement,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The length of the statement  "            Log.Log.Error("MGT: invalid table type descriptor length {0}' pointer = {1}' end of table type descriptors = {2}' loop = {3}"' length' pointer' endOfTableTypeDescriptors' i); " is 174.
Long Statement,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The length of the statement  "          Log.Log.Error("MGT: corruption detected at end of table type descriptors' pointer = {0}' end of section = {1}' end of table type descriptors = {2}' loop = {3}"' pointer' endOfSection' endOfTableTypeDescriptors' i); " is 214.
Long Statement,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The length of the statement  "        Log.Log.Error("MGT: invalid descriptors length {0}' pointer = {1}' end of section = {2}"' descriptorsLength' pointer' endOfSection); " is 132.
Long Statement,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The length of the statement  "          Log.Log.Error("MGT: invalid descriptor length {0}' pointer = {1}' end of section = {2}"' length' pointer' endOfSection); " is 120.
Long Statement,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The length of the statement  "        Log.Log.Error("MGT: corruption detected at end of section' pointer = {0}' end of section = {1}"' pointer' endOfSection); " is 120.
Long Statement,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,Decode,The length of the statement  "          Log.Log.Error("NIT: invalid section length at satellite ID' pointer = {0}' end of section = {1}"' pointer' endOfSection); " is 121.
Long Statement,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,Decode,The length of the statement  "      Log.Log.Debug("NIT: section length = {0}' protocol version = {1}' first index = {2}' number of records = {3}' transmission medium = {4}' table subtype = {5}' satellite ID = {6}"' " is 178.
Long Statement,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,Decode,The length of the statement  "          Log.Log.Error("NIT: invalid section length at table descriptor count' pointer = {0}' end of section = {1}' loop = {2}"' pointer' endOfSection' i); " is 146.
Long Statement,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,Decode,The length of the statement  "            Log.Log.Error("NIT: detected table descriptor count {0} is invalid' pointer = {1}' end of section = {2}' loop = {3}' inner loop = {4}"' descriptorCount' pointer' endOfSection' i' d); " is 182.
Long Statement,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,Decode,The length of the statement  "            Log.Log.Error("NIT: invalid table descriptor length {0}' pointer = {1}' end of section = {2}' loop = {3}' inner loop = {4}"' length' pointer' endOfSection' i' d); " is 162.
Long Statement,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,Decode,The length of the statement  "          Log.Log.Error("NIT: invalid descriptor length {0}' pointer = {1}' end of section = {2}"' length' pointer' endOfSection); " is 120.
Long Statement,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,Decode,The length of the statement  "        Log.Log.Error("NIT: corruption detected at end of section' pointer = {0}' end of section = {1}"' pointer' endOfSection); " is 120.
Long Statement,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeCarrierDefinition,The length of the statement  "        throw new Exception(string.Format("NIT: corruption detected at carrier definition' pointer = {0}' end of section = {1}"' pointer' endOfSection)); " is 145.
Long Statement,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeCarrierDefinition,The length of the statement  "      Log.Log.Debug("NIT: carrier definition' number of carriers = {0}' spacing unit = {1} kHz' frequency spacing = {2} kHz' frequency unit = {3} kHz' first carrier frequency = {4} kHz"' " is 180.
Long Statement,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The length of the statement  "        throw new Exception(string.Format("NIT: corruption detected at modulation mode' pointer = {0}' end of section = {1}"' pointer' endOfSection)); " is 142.
Long Statement,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The length of the statement  "      int symbolRate = ((section[pointer] & 0x0f) << 24) + (section[pointer + 1] << 16) + (section[pointer + 2] << 8) + section[pointer + 3]; " is 135.
Long Statement,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The length of the statement  "      Log.Log.Debug("NIT: modulation mode' transmission system = {0}' inner coding mode = {1}' is split bitstream mode = {2}' modulation format = {3}' symbol rate = {4} s/s"' " is 168.
Long Statement,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The length of the statement  "        OnModulationMode(transmissionMedium' firstIndex++' transmissionSystem' innerCodingMode' isSplitBitstreamMode' modulationFormat' symbolRate); " is 140.
Long Statement,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeSatelliteInformation,The length of the statement  "        throw new Exception(string.Format("NIT: corruption detected at satellite information' pointer = {0}' end of section = {1}"' pointer' endOfSection)); " is 148.
Long Statement,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeSatelliteInformation,The length of the statement  "      Log.Log.Debug("NIT: satellite information' satellite ID = {0}' you are here = {1}' frequency band = {2}' out of service = {3}' is Eastern hemisphere = {4}' orbital position = {5}' is circular polarisation = {6}' number of transponders = {7}"' " is 242.
Long Statement,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeSatelliteInformation,The length of the statement  "        satelliteId' youAreHere' frequencyBand' outOfService' isEasternHemisphere' orbitalPosition' isCircularPolarisation' numberOfTransponders); " is 138.
Long Statement,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeTransponderData,The length of the statement  "        throw new Exception(string.Format("NIT: corruption detected at transponder data' pointer = {0}' end of section = {1}"' pointer' endOfSection)); " is 143.
Long Statement,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeTransponderData,The length of the statement  "      Log.Log.Debug("NIT: transponder data' is MPEG 2 transport = {0}' is vertical/right polarisation = {1}' transponder number = {2}' CDS reference = {3}"' " is 150.
Long Statement,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeTransponderData,The length of the statement  "        Log.Log.Debug("NIT: MPEG 2 transponder data' MMS reference = {0}' VCT ID = 0x{1:x}' is root transponder = {2}"' mmsReference' vctId' isRootTransponder); " is 152.
Long Statement,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeTransponderData,The length of the statement  "        Log.Log.Debug("NIT: non-MPEG 2 transponder data' is WB video = {0}' waveform standard = {1}' is WB audio = {2}' is companded audio = {3}' matrix mode = {4}' subcarrier 2 offset = {5} kHz' subcarrier 1 offset = {6} kHz"' " is 219.
Long Statement,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeTransponderData,The length of the statement  "          isWideBandwidthVideo' waveformStandard' isWideBandwidthAudio' isCompandedAudio' matrixMode' subcarrier2Offset' subcarrier1Offset); " is 130.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,Decode,The length of the statement  "      Log.Log.Debug("NTT: section length = {0}' protocol version = {1}' ISO language code = {2}' transmission medium = {3}' table subtype = {4}"' " is 139.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,Decode,The length of the statement  "          Log.Log.Error("NTT: invalid descriptor length {0}' pointer = {1}' end of section = {2}"' length' pointer' endOfSection); " is 120.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,Decode,The length of the statement  "        Log.Log.Error("NTT: corruption detected at end of section' pointer = {0}' end of section = {1}"' pointer' endOfSection); " is 120.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeTransponderName,The length of the statement  "        throw new Exception(string.Format("NTT: corruption detected at transponder name' pointer = {0}' end of section = {1}"' pointer' endOfSection)); " is 143.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeTransponderName,The length of the statement  "      Log.Log.Debug("NTT: transponder name' satellite ID = {0}' first index = {1}' number of TNT records = {2}"' satelliteId' firstIndex' numberOfTntRecords); " is 152.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeTransponderName,The length of the statement  "          throw new Exception(string.Format("NTT: detected transponder name table number of TNT records {0} is invalid' pointer = {1}' end of section = {2}"' numberOfTntRecords' pointer' endOfSection' i)); " is 195.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeTransponderName,The length of the statement  "          throw new Exception(string.Format("NTT: invalid transponder name table transponder name length {0}' pointer = {1}' end of section = {2}' loop = {3}"' transponderNameLength' pointer' endOfSection' i)); " is 200.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeTransponderName,The length of the statement  "          throw new Exception(string.Format("NTT: invalid section length at transponder name table descriptor count' pointer = {0}' end of section = {1}' loop = {2}"' pointer' endOfSection' i)); " is 184.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeTransponderName,The length of the statement  "            throw new Exception(string.Format("NTT: detected transponder name table descriptor count {0} is invalid' pointer = {1}' end of section = {2}' loop = {3}' inner loop = {4}"' descriptorCount' pointer' endOfSection' i' d)); " is 220.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeTransponderName,The length of the statement  "            throw new Exception(string.Format("NTT: invalid transponder name table descriptor length {0}' pointer = {1}' end of section = {2}' loop = {3}' inner loop = {4}"' length' pointer' endOfSection' i' d)); " is 200.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeSatelliteText,The length of the statement  "        throw new Exception(string.Format("NTT: corruption detected at satellite text' pointer = {0}' end of section = {1}"' pointer' endOfSection)); " is 141.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeSatelliteText,The length of the statement  "          throw new Exception(string.Format("NTT: detected satellite text table number of STT records {0} is invalid' pointer = {1}' end of section = {2}' loop = {3}"' numberOfSttRecords' pointer' endOfSection' i)); " is 205.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeSatelliteText,The length of the statement  "          throw new Exception(string.Format("NTT: invalid satellite text table satellite reference name length {0}' pointer = {1}' end of section = {2}' loop = {3}"' satelliteReferenceNameLength' pointer' endOfSection' i)); " is 213.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeSatelliteText,The length of the statement  "          throw new Exception(string.Format("NTT: corruption detected at satellite text table full satellite name' pointer = {0}' end of section = {1}' loop = {2}"' pointer' endOfSection' i)); " is 182.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeSatelliteText,The length of the statement  "          throw new Exception(string.Format("NTT: invalid satellite text table full satellite name length {0}' pointer = {1}' end of section = {2}' loop = {3}"' fullSatelliteNameLength' pointer' endOfSection' i)); " is 203.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeSatelliteText,The length of the statement  "        Log.Log.Debug("NTT: satellite text' satellite ID = {0}' reference name = {1}' full name = {2}"' satelliteId' satelliteReferenceName' fullSatelliteName); " is 152.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeSatelliteText,The length of the statement  "          throw new Exception(string.Format("NTT: invalid section length at satellite text table descriptor count' pointer = {0}' end of section = {1}' loop = {2}"' pointer' endOfSection' i)); " is 182.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeSatelliteText,The length of the statement  "            throw new Exception(string.Format("NTT: detected satellite text table descriptor count {0} is invalid' pointer = {1}' end of section = {2}' loop = {3}' inner loop = {4}"' descriptorCount' pointer' endOfSection' i' d)); " is 218.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeSatelliteText,The length of the statement  "            throw new Exception(string.Format("NTT: invalid satellite text table descriptor length {0}' pointer = {1}' end of section = {2}' loop = {3}' inner loop = {4}"' length' pointer' endOfSection' i' d)); " is 198.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeRatingsText,The length of the statement  "        throw new Exception(string.Format("NTT: corruption detected at ratings text' pointer = {0}' end of section = {1}"' pointer' endOfSection)); " is 139.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeRatingsText,The length of the statement  "          throw new Exception(string.Format("NTT: corruption detected at ratings text table levels defined' pointer = {0}' end of section = {1}' loop = {2}"' pointer' endOfSection' i)); " is 175.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeRatingsText,The length of the statement  "            throw new Exception(string.Format("NTT: corruption detected at ratings text table dimension name length' pointer = {0}' end of section = {1}' loop = {2}"' pointer' endOfSection' i)); " is 182.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeRatingsText,The length of the statement  "            throw new Exception(string.Format("NTT: invalid ratings text table dimension name length {0}' pointer = {1}' end of section = {2}' loop = {3}"' dimensionNameLength' pointer' endOfSection' i)); " is 192.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeRatingsText,The length of the statement  "              throw new Exception(string.Format("NTT: invalid ratings text table rating name length {0}' pointer = {1}' end of section = {2}' loop = {3}' inner loop = {4}"' ratingNameLength' pointer' endOfSection' i' l)); " is 207.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeRatingSystem,The length of the statement  "        throw new Exception(string.Format("NTT: corruption detected at rating system' pointer = {0}' end of section = {1}"' pointer' endOfSection)); " is 140.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeRatingSystem,The length of the statement  "          throw new Exception(string.Format("NTT: detected rating system table regions defined {0} is invalid' pointer = {1}' end of section = {2}' loop = {3}"' regionsDefined' pointer' endOfSection' i)); " is 194.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeRatingSystem,The length of the statement  "          throw new Exception(string.Format("NTT: invalid rating system table data length {0}' pointer = {1}' end of section = {2}' loop = {3}"' dataLength' pointer' endOfSection' i)); " is 174.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeRatingSystem,The length of the statement  "          throw new Exception(string.Format("NTT: invalid rating system table string length {0}' pointer = {1}' end of section = {2}' loop = {3}"' stringLength' pointer' endOfSection' i)); " is 178.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeRatingSystem,The length of the statement  "            throw new Exception(string.Format("NTT: invalid rating system table descriptor length {0}' pointer = {1}' end of section = {2}' loop = {3}"' length' pointer' endOfSection' i)); " is 176.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeRatingSystem,The length of the statement  "          throw new Exception(string.Format("NTT: corruption detected at end of rating system data' pointer = {0}' end of section = {1}' end of data = {2}' loop = {3}"' pointer' endOfSection' endOfData' i)); " is 197.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeCurrencySystem,The length of the statement  "        throw new Exception(string.Format("NTT: corruption detected at currency system' pointer = {0}' end of section = {1}"' pointer' endOfSection)); " is 142.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeCurrencySystem,The length of the statement  "          throw new Exception(string.Format("NTT: detected currency system table regions defined {0} is invalid' pointer = {1}' end of section = {2}' loop = {3}"' regionsDefined' pointer' endOfSection' i)); " is 196.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeCurrencySystem,The length of the statement  "          throw new Exception(string.Format("NTT: invalid currency system table data length {0}' pointer = {1}' end of section = {2}' loop = {3}"' dataLength' pointer' endOfSection' i)); " is 176.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeCurrencySystem,The length of the statement  "          throw new Exception(string.Format("NTT: invalid currency system table string length {0}' pointer = {1}' end of section = {2}' loop = {3}"' stringLength' pointer' endOfSection' i)); " is 180.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeCurrencySystem,The length of the statement  "            throw new Exception(string.Format("NTT: invalid currency system table descriptor length {0}' pointer = {1}' end of section = {2}' loop = {3}"' length' pointer' endOfSection' i)); " is 178.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeCurrencySystem,The length of the statement  "          throw new Exception(string.Format("NTT: corruption detected at end of currency system data' pointer = {0}' end of section = {1}' end of data = {2}' loop = {3}"' pointer' endOfSection' endOfData' i)); " is 199.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeSourceName,The length of the statement  "        throw new Exception(string.Format("NTT: corruption detected at source name' pointer = {0}' end of section = {1}"' pointer' endOfSection)); " is 138.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeSourceName,The length of the statement  "          throw new Exception(string.Format("NTT: detected source name table number of SNT records {0} is invalid' pointer = {1}' end of section = {2}' loop = {3}"' numberOfSntRecords' pointer' endOfSection' i)); " is 202.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeSourceName,The length of the statement  "          throw new Exception(string.Format("NTT: invalid source name table string length {0}' pointer = {1}' end of section = {2}' loop = {3}"' nameLength' pointer' endOfSection' i)); " is 174.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeSourceName,The length of the statement  "        Log.Log.Debug("NTT: source name' source ID = 0x{0:x}' name = {1}' application type = {2}"' sourceId' sourceName' applicationType); " is 130.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeSourceName,The length of the statement  "          throw new Exception(string.Format("NTT: invalid section length at source name table descriptor count' pointer = {0}' end of section = {1}' loop = {2}"' pointer' endOfSection' i)); " is 179.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeSourceName,The length of the statement  "            throw new Exception(string.Format("NTT: detected source name table descriptor count {0} is invalid' pointer = {1}' end of section = {2}' loop = {3}' inner loop = {4}"' descriptorCount' pointer' endOfSection' i' d)); " is 215.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeSourceName,The length of the statement  "            throw new Exception(string.Format("NTT: invalid source name table descriptor length {0}' pointer = {1}' end of section = {2}' loop = {3}' inner loop = {4}"' length' pointer' endOfSection' i' d)); " is 195.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeMapName,The length of the statement  "        throw new Exception(string.Format("NTT: corruption detected at map name' pointer = {0}' end of section = {1}"' pointer' endOfSection)); " is 135.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeMapName,The length of the statement  "          throw new Exception(string.Format("NTT: detected map name table number of MNT records {0} is invalid' pointer = {1}' end of section = {2}' loop = {3}"' numberOfMntRecords' pointer' endOfSection' i)); " is 199.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeMapName,The length of the statement  "          throw new Exception(string.Format("NTT: invalid map name table map name length {0}' pointer = {1}' end of section = {2}' loop = {3}"' mapNameLength' pointer' endOfSection' i)); " is 176.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeMapName,The length of the statement  "          throw new Exception(string.Format("NTT: invalid section length at map name table descriptor count' pointer = {0}' end of section = {1}' loop = {2}"' pointer' endOfSection' i)); " is 176.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeMapName,The length of the statement  "            throw new Exception(string.Format("NTT: detected map name table descriptor count {0} is invalid' pointer = {1}' end of section = {2}' loop = {3}' inner loop = {4}"' descriptorCount' pointer' endOfSection' i' d)); " is 212.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeMapName,The length of the statement  "            throw new Exception(string.Format("NTT: invalid map name table descriptor length {0}' pointer = {1}' end of section = {2}' loop = {3}' inner loop = {4}"' length' pointer' endOfSection' i' d)); " is 192.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeMultilingualText,The length of the statement  "          throw new Exception(string.Format("NTT: invalid multilingual text segment length {0}' pointer = {1}' end of string = {2}"' segmentLength' pointer' endOfString)); " is 161.
Long Statement,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeMultilingualText,The length of the statement  "        throw new Exception(string.Format("NTT: corruption detected at end of multilingual string' pointer = {0}' end of string = {2}"' pointer' endOfString)); " is 151.
Long Statement,TvLibrary.Implementations.Dri.Parser,BaseDriParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\BaseDriParser.cs,DecodeRevisionDetectionDescriptor,The length of the statement  "        throw new Exception(string.Format("DRI: invalid revision detection descriptor length {0}' pointer = {1}"' length' pointer)); " is 124.
Long Statement,TvLibrary.Implementations.Dri.Parser,BaseDriParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\BaseDriParser.cs,DecodeRevisionDetectionDescriptor,The length of the statement  "      Log.Log.Info("DRI: revision detection descriptor' version = {0}' section number = {1}' last section number = {2}"' tableVersionNumber' sectionNumber' lastSectionNumber); " is 169.
Long Statement,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,Decode,The length of the statement  "      Log.Log.Debug("S-VCT: section length = {0}' protocol version = {1}' transmission medium = {2}' table subtype = {3}' VCT ID = 0x{4:x}"' " is 134.
Long Statement,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,Decode,The length of the statement  "          Log.Log.Error("S-VCT: invalid descriptor length {0}' pointer = {1}' end of section = {2}"' length' pointer' endOfSection); " is 122.
Long Statement,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,Decode,The length of the statement  "        Log.Log.Error("S-VCT: corruption detected at end of section' pointer = {0}' end of section = {1}"' pointer' endOfSection); " is 122.
Long Statement,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeDefinedChannelMap,The length of the statement  "        throw new Exception(string.Format("S-VCT: corruption detected at defined channel map' pointer = {0}' end of section = {1}"' pointer' endOfSection)); " is 148.
Long Statement,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeDefinedChannelMap,The length of the statement  "        throw new Exception(string.Format("S-VCT: invalid defined channel map data length {0}' pointer = {1}' end of section = {2}"' dcmDataLength' pointer' endOfSection)); " is 164.
Long Statement,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeDefinedChannelMap,The length of the statement  "      Log.Log.Debug("S-VCT: defined channel map' first virtual channel = {0}' DCM data length = {1}"' firstVirtualChannel' dcmDataLength); " is 132.
Long Statement,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The length of the statement  "        throw new Exception(string.Format("S-VCT: corruption detected at virtual channel map' pointer = {0}' end of section = {1}"' pointer' endOfSection)); " is 148.
Long Statement,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The length of the statement  "      Log.Log.Debug("S-VCT: virtual channel map' transmission medium = {0}' freq. spec. included = {1}' symbol rate included = {2}' descriptors included = {3}' splice = {4}' activation time = {5}' number of VC records = {6}"' " is 219.
Long Statement,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The length of the statement  "        transmissionMedium' freqSpecIncluded' symbolRateIncluded' descriptorsIncluded' splice' activationTime' numberOfVcRecords); " is 122.
Long Statement,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The length of the statement  "          throw new Exception(string.Format("S-VCT: detected number of virtual channel records {0} is invalid' pointer = {1}' end of section = {2}' loop = {3}"' numberOfVcRecords' pointer' endOfSection' i)); " is 197.
Long Statement,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The length of the statement  "        Log.Log.Debug("S-VCT: virtual channel number = {0}' application virtual channel = {1}' bitstream select = {2}' path select = {3}' transport type = {4}' channel type = {5}' source ID = 0x{6:x}"' " is 193.
Long Statement,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The length of the statement  "                Log.Log.Debug("S-VCT: satellite = {0}' transponder = {1}' program number = 0x{2:x}"' satellite' transponder' programNumber); " is 124.
Long Statement,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The length of the statement  "                Log.Log.Debug("S-VCT: CDS reference = {0}' program number = 0x{1:x}' MMS reference = {2}"' cdsReference' programNumber' mmsReference); " is 134.
Long Statement,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The length of the statement  "                Log.Log.Debug("S-VCT: CDS reference = {0}' scrambled = {1}' video standard = {2}' is WB video = {3}' waveform standard = {4}' is WB audio = {5}' is companded audio = {6}' matrix mode = {7}' subcarrier 2 offset = {8} kHz' subcarrier 1 offset = {9} kHz"' " is 252.
Long Statement,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The length of the statement  "                Log.Log.Debug("S-VCT: CDS reference = {0}' program number = 0x{1:x}' MMS reference = {2}"' cdsReference' programNumber' mmsReference); " is 134.
Long Statement,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The length of the statement  "                Log.Log.Debug("S-VCT: CDS reference = {0}' scrambled = {1}' video standard = {2}"' cdsReference' scrambled' videoStandard); " is 123.
Long Statement,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The length of the statement  "          int symbolRate = ((section[pointer] & 0x0f) << 24) + (section[pointer + 1] << 16) + (section[pointer + 2] << 8) + section[pointer + 3]; " is 135.
Long Statement,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The length of the statement  "            throw new Exception(string.Format("S-VCT: invalid section length at virtual channel map descriptor count' pointer = {0}' end of section = {1}' loop = {2}"' pointer' endOfSection' i)); " is 183.
Long Statement,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The length of the statement  "              throw new Exception(string.Format("S-VCT: detected virtual channel map descriptor count {0} is invalid' pointer = {1}' end of section = {2}' loop = {3}' inner loop = {4}"' descriptorCount' pointer' endOfSection' i' d)); " is 219.
Long Statement,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The length of the statement  "              throw new Exception(string.Format("S-VCT: invalid virtual channel map descriptor length {0}' pointer = {1}' end of section = {2}' loop = {3}' inner loop = {4}"' length' pointer' endOfSection' i' d)); " is 199.
Long Statement,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeInverseChannelMap,The length of the statement  "        throw new Exception(string.Format("S-VCT: corruption detected at inverse channel map' pointer = {0}' end of section = {1}"' pointer' endOfSection)); " is 148.
Long Statement,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeInverseChannelMap,The length of the statement  "        throw new Exception(string.Format("S-VCT: invalid inverse channel map record count {0}' pointer = {1}' end of section = {2}"' recordCount' pointer' endOfSection)); " is 163.
Long Statement,TvLibrary.Implementations.Dri,ScannerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\ScannerDri.cs,OnTableSection,The length of the statement  "        Log.Log.Debug("DRI CC: scan stage = {0}' PID = 0x{1:x}' table ID = 0x{2:x}' size = {3}"' _scanStage' pid' tableId' section.Length); " is 131.
Long Statement,TvLibrary.Implementations.Dri,ScannerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\ScannerDri.cs,OnLvctChannelDetail,The length of the statement  "      if (programNumber == 0 || outOfBand || modulationMode == ModulationMode.Analog || modulationMode == ModulationMode.PrivateDescriptor || " is 135.
Long Statement,TvLibrary.Implementations.Dri,ScannerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\ScannerDri.cs,OnLvctChannelDetail,The length of the statement  "        (serviceType != TvLibrary.Implementations.Dri.Parser.AtscServiceType.Audio && serviceType != TvLibrary.Implementations.Dri.Parser.AtscServiceType.DigitalTelevision) || sourceId == 0) " is 182.
Long Statement,TvLibrary.Implementations.Dri,ScannerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\ScannerDri.cs,OnSvctChannelDetail,The length of the statement  "      if (transmissionMedium != AtscTransmissionMedium.Cable || applicationVirtualChannel || programNumber == 0 || sourceId == 0) " is 123.
Long Statement,TvLibrary.Implementations.Dri,ScannerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\ScannerDri.cs,Scan,The length of the statement  "            atscChannel.Name = string.Format("Unknown {0} ({1}-{2})"' atscChannel.LogicalChannelNumber' atscChannel.PhysicalChannel' atscChannel.ServiceId); " is 144.
Long Statement,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,ReadDeviceInfo,The length of the statement  "        _tunerService.GetTunerParameters(out isCarrierLocked' out frequency' out modulation' out isPcrLocked' out signalLevel' out snr); " is 128.
Long Statement,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,ReadDeviceInfo,The length of the statement  "            Log.Log.Debug("  codec = {0}' bit depth = {1}' channel count = {2}' sample rate = {3} Hz"' Enum.GetName(typeof(DriEncoderAudioAlgorithm)' ap.AudioAlgorithmCode)' ap.BitDepth' ap.NumberChannel' ap.SamplingRate); " is 210.
Long Statement,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,ReadDeviceInfo,The length of the statement  "            Log.Log.Debug("  hor. pixels = {0}' vert. pixels = {1}' aspect ratio = {2}' frame rate = {3}' {4}"' vp.HorizontalSize' vp.VerticalSize' Enum.GetName(typeof(DriEncoderVideoAspectRatio)' vp.AspectRatioInformation)' Enum.GetName(typeof(DriEncoderVideoFrameRate)' vp.FrameRateCode)); " is 279.
Long Statement,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,ReadDeviceInfo,The length of the statement  "        _casService.GetCardStatus(out status' out manufacturer' out version' out isDst' out eaLocationCode' out ratingRegion' out timeZone); " is 132.
Long Statement,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,ReadDeviceInfo,The length of the statement  "          Log.Log.Debug("DRI CC: supported AV transport actions = {0}"' string.Join("' "' actions.Select(x => x.ToString()).ToArray())); " is 126.
Long Statement,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,ReadDeviceInfo,The length of the statement  "        _avTransportService.GetDeviceCapabilities((uint)_avTransportId' out playMedia' out recordMedia' out recordQualityModes); " is 120.
Long Statement,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,ReadDeviceInfo,The length of the statement  "        Log.Log.Debug("DRI CC: supported record media = {0}"' string.Join("' "' recordMedia.Select(x => x.ToString()).ToArray())); " is 122.
Long Statement,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,ReadDeviceInfo,The length of the statement  "        Log.Log.Debug("DRI CC: supported record quality modes = {0}"' string.Join("' "' recordQualityModes.Select(x => x.ToString()).ToArray())); " is 137.
Long Statement,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,BuildGraph,The length of the statement  "        _deviceConnection = _controlPoint.Connect(_descriptor.RootDescriptor' _descriptor.DeviceUUID' ResolveDataType' useKeepAlive); " is 125.
Long Statement,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,BuildGraph,The length of the statement  "        _connectionManagerService.PrepareForConnection(string.Empty' string.Empty' -1' UpnpConnectionDirection.Output' out _connectionId' out _avTransportId' out rcsId); " is 161.
Long Statement,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,BuildGraph,The length of the statement  "        Log.Log.Debug("DRI CC: PrepareForConnection' connection ID = {0}' AV transport ID = {1}"' _connectionId' _avTransportId); " is 121.
Long Statement,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,AddStreamSourceFilter,The length of the statement  "          throw new TvExceptionGraphBuildingFailed(string.Format("DRI CC: failed to connect source filter into graph' hr = 0x{0:x} ({1})"' hr' HResult.GetDXErrorString(hr))); " is 164.
Long Statement,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,SubmitTuneRequest,The length of the statement  "      Log.Log.Info("DRI CC: tune channel {0} \"{1}\"' sub channel ID {2}"' atscChannel.MajorChannel' channel.Name' subChannelId); " is 123.
Long Statement,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,UpdateSignalQuality,The length of the statement  "        _tunerService.GetTunerParameters(out _signalPresent' out frequency' out modulation' out _tunerLocked' out _signalLevel' out snr); " is 129.
Long Statement,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,OnStateVariableChanged,The length of the statement  "            Log.Log.Info("DRI CC: device {0} CableCARD status update' old status = {1}' new status = {2}"' _cardId' oldStatus' _cardStatus); " is 128.
Long Statement,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,OnStateVariableChanged,The length of the statement  "            Log.Log.Info("DRI CC: device {0} received message from the CableCARD' current status = {1}' message = {2}"' _cardId' _cardStatus' newValue); " is 140.
Long Statement,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,OnStateVariableChanged,The length of the statement  "            Log.Log.Info("DRI CC: device {0} descrambling status update' old status = {1}' new status = {2}"' _cardId' oldStatus' _descramblingStatus); " is 139.
Long Statement,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,OnStateVariableChanged,The length of the statement  "            Log.Log.Info("DRI CC: device {0} pairing status update' old status = {1}' new status = {2}"' _cardId' oldStatus' _pairingStatus); " is 129.
Long Statement,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,OnStateVariableChanged,The length of the statement  "          Log.Log.Debug("DRI CC: device {0} state variable {1} for service {2} changed to {3}"' _cardId' stateVariable.Name' stateVariable.ParentService.FullQualifiedName' newValue ?? "[null]"); " is 184.
Long Statement,TvLibrary.Implementations.Dri.Service,AvTransportService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\AvTransportService.cs,GetDeviceCapabilities,The length of the statement  "      playMedia = outParams[0].ToString().Split(''').Select(x => (UpnpAvStorageMedium)(string)x).ToList<UpnpAvStorageMedium>(); " is 121.
Long Statement,TvLibrary.Implementations.Dri.Service,AvTransportService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\AvTransportService.cs,GetDeviceCapabilities,The length of the statement  "      recMedia = outParams[1].ToString().Split(''').Select(x => (UpnpAvStorageMedium)(string)x).ToList<UpnpAvStorageMedium>(); " is 120.
Long Statement,TvLibrary.Implementations.Dri.Service,AvTransportService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\AvTransportService.cs,GetDeviceCapabilities,The length of the statement  "      recQualityModes = outParams[2].ToString().Split(''').Select(x => (UpnpAvRecordQualityMode)(string)x).ToList<UpnpAvRecordQualityMode>(); " is 135.
Long Statement,TvLibrary.Implementations.Dri.Service,AvTransportService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\AvTransportService.cs,GetCurrentTransportActions,The length of the statement  "        actions = outParams[0].ToString().Split(''').Select(x => (UpnpAvTransportAction)Enum.Parse(typeof(UpnpAvTransportAction)' x)).ToList<UpnpAvTransportAction>(); " is 158.
Long Statement,TvLibrary.Implementations.Dri.Service,AvTransportService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\AvTransportService.cs,GetCurrentTransportActions,The length of the statement  "        Log.Log.Debug("DRI: device {0} does not implement a AVTransport GetCurrentTransportActions action' threw exception"' _device.UDN); " is 130.
Long Statement,TvLibrary.Implementations.Dri.Service,BaseService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\BaseService.cs,Initialise,The length of the statement  "        throw new NotImplementedException(string.Format("DRI: device does not implement a {0} service"' _unqualifiedServiceName)); " is 122.
Long Statement,TvLibrary.Implementations.Dri.Service,BaseService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\BaseService.cs,SubscribeFailed,The length of the statement  "      Log.Log.Error("DRI: failed to subscribe to state variable events for service {0}' code = {1}' description = {2}"' _unqualifiedServiceName' error.ErrorCode' error.ErrorDescription); " is 180.
Long Statement,TvLibrary.Implementations.Dri.Service,CasService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\CasService.cs,SetChannel,The length of the statement  "      IList<object> outParams = _setChannelAction.InvokeAction(new List<object> { newChannelNumber' newSourceId' newCaptureMode.ToString() }); " is 136.
Long Statement,TvLibrary.Implementations.Dri.Service,EncoderService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\EncoderService.cs,GetEncoderCapabilities,The length of the statement  "          throw new Exception(string.Format("DRI: GetEncoderCapabilities audioProfile has {0} profile(s)' but the byte count is {1} (we expect {2})"' numberAudioCompressionFormat' bytes.Length' expectedByteCount)); " is 204.
Long Statement,TvLibrary.Implementations.Dri.Service,EncoderService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\EncoderService.cs,GetEncoderCapabilities,The length of the statement  "            audioProfile.Add((DriEncoderAudioProfile)Marshal.PtrToStructure(handle.AddrOfPinnedObject()' typeof(DriEncoderAudioProfile))); " is 126.
Long Statement,TvLibrary.Implementations.Dri.Service,EncoderService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\EncoderService.cs,GetEncoderCapabilities,The length of the statement  "          throw new TvException(string.Format("DRI: GetEncoderCapabilities videoProfile has {0} profile(s)' but the byte count is {1} (we expect {2})"' numberVideoCompressionFormat' bytes.Length' expectedByteCount)); " is 206.
Long Statement,TvLibrary.Implementations.Dri.Service,EncoderService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\EncoderService.cs,GetEncoderCapabilities,The length of the statement  "            videoProfile.Add((DriEncoderVideoProfile)Marshal.PtrToStructure(handle.AddrOfPinnedObject()' typeof(DriEncoderVideoProfile))); " is 126.
Long Statement,TvLibrary.Implementations.Dri.Service,TunerService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\TunerService.cs,SetTunerParameters,The length of the statement  "      IList<object> outParams = _setTunerParametersAction.InvokeAction(new List<object> { newFrequency' newModulationListCsv }); " is 122.
Long Statement,TvLibrary.Implementations.Dri.Service,TunerService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\TunerService.cs,SeekSignal,The length of the statement  "      _seekSignalAction.InvokeAction(new List<object> { startFrequency' stopFrequency' newModulationListCsv' increment' seekUp' timeToBlock }); " is 137.
Long Statement,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,MmiHandler,The length of the statement  "                    if (message == TbsMmiMessageType.EnterMenu || message == TbsMmiMessageType.MenuAnswer || message == TbsMmiMessageType.Answer || message == TbsMmiMessageType.CloseMmi) " is 166.
Long Statement,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,ReadDiSEqCCommand,The length of the statement  "                TvLibrary.Log.Log.Debug("Turbosight: result = failure' unexpected number of message bytes ({0}) returned"' accessParams.DiseqcReceiveMessageLength); " is 148.
Long Statement,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,SendPmt,The length of the statement  "            TvLibrary.Log.Log.Debug("Turbosight: send PMT to CAM' list action = {0}' command = {1}"' new object[] { listAction' command }); " is 127.
Long Statement,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,SetPowerState,The length of the statement  "            int hresult = this._propertySet.Set(this._propertySetGuid' this._tbsAccessProperty' this._generalBuffer' TbsAccessParamsSize' this._generalBuffer' TbsAccessParamsSize); " is 168.
Long Statement,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,SetPowerState,The length of the statement  "            TvLibrary.Log.Log.Debug("Turbosight: result = failure' hr = 0x{0:x} ({1})"' new object[] { hresult' HResult.GetDXErrorString(hresult) }); " is 137.
Long Statement,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,SetTuningParameters,The length of the statement  "                TvLibrary.Log.Log.Debug("Turbosight: failed to query property support' hr = 0x{0:x} ({1})"' new object[] { hresult' HResult.GetDXErrorString(hresult) }); " is 153.
Long Statement,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,SetTuningParameters,The length of the statement  "            TvLibrary.Log.Log.Debug("Turbosight: result = failure' hr = 0x{0:x} ({1})"' new object[] { hresult' HResult.GetDXErrorString(hresult) }); " is 137.
Long Statement,TvLibrary.Implementations.DVB,GenericATSC,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\QAM\GenericATSC.cs,SetXPATSCQam,The length of the statement  "        hr = _propertySet.Get(guidBdaDigitalDemodulator' (int)BdaDigitalModulator.MODULATION_TYPE' _tempInstance' 32' _tempValue' 4' out length); " is 137.
Long Statement,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,GotoPosition,The length of the statement  "          TvLibrary.Log.Log.Write("DiSEqC: goto position {0} - wanted sat degrees {1} - Direction {2}"' position' positionSat' positionDirection); " is 136.
Long Statement,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,GotoPosition,The length of the statement  "          string wantedPositionDirection = xmlreader.GetValueAsString(i.ToString()' "PositionDirection"' 0.ToString()).ToLowerInvariant(); " is 128.
Long Statement,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,GotoPosition,The length of the statement  "            TvLibrary.Log.Log.Write("DiSEqC: goto position {0} - current sat degrees {1} - Direction {2}"' position' wantedPositionSat' wantedPositionDirection); " is 149.
Long Statement,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,GotoPosition,The length of the statement  "            var deltaPositionSat = Math.Abs(float.Parse(wantedPositionSat' CultureInfo.InvariantCulture.NumberFormat) - float.Parse(positionSat' CultureInfo.InvariantCulture.NumberFormat)); " is 177.
Long Statement,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,GotoPosition,The length of the statement  "            TvLibrary.Log.Log.Write("DiSEqC: goto position {0} - delta between wanted and current sat degrees {1}"' position' deltaPositionSat); " is 132.
Long Statement,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,GotoPosition,The length of the statement  "            TvLibrary.Log.Log.Write("DiSEqC: goto position {0} - current sat degrees {1} - Direction {2}"' position' wantedPositionSat' wantedPositionDirection); " is 149.
Long Statement,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,GotoPosition,The length of the statement  "            var deltaPositionSat = Math.Abs(float.Parse(wantedPositionSat' CultureInfo.InvariantCulture.NumberFormat) + float.Parse(positionSat' CultureInfo.InvariantCulture.NumberFormat)); " is 177.
Long Statement,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,GotoPosition,The length of the statement  "            TvLibrary.Log.Log.Write("DiSEqC: goto position {0} - delta between wanted and current sat degrees {1}"' position' deltaPositionSat); " is 132.
Long Statement,TvLibrary.Implementations.DVB,MDPlugs,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\MDPlug.cs,IsProviderSelected,The length of the statement  "        if (_cardFolder.Contains(nodeCard.Attributes["Name"].Value) && (nodeCard.Attributes["Provider"]==null || nodeCard.Attributes["Provider"].Value == "All" || (provider != null && nodeCard.Attributes["Provider"].Value.Contains(provider)))) " is 235.
Long Statement,TvLibrary.Implementations.DVB,TvDvbChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvDvbChannel.cs,SendPmtToCam,The length of the statement  "            //HACK: Currently Premiere Direkt Feeds (nid=133) have the free_ca flag in SDT set to true (means not scrambled)' so we have to override this " is 141.
Long Statement,TvLibrary.Implementations.DVB,TvDvbChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvDvbChannel.cs,HandlePmtUpdate,The length of the statement  "        if (dvbBaseChannel != null && (_mdplugs != null && _channelInfo.scrambled && _mdplugs.IsProviderSelected(dvbBaseChannel.Provider))) " is 131.
Long Statement,TvLibrary.Implementations.DVB,ConditionalAccess,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ConditionalAccess.cs,PatchPMT_AstonCrypt2,The length of the statement  "      // Need to patch audio AC3 channels 0x06' ' ' ' '0x6A in real AC3 descriptor 0x81' .... for ( at least !) ASTONCRYPT CAM module " is 127.
Long Statement,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,CiMenuHandler,The length of the statement  "          // this code is equal to GetCAMStatus' but implemented separately to avoid memory / threading conflicts with used pointers! " is 123.
Long Statement,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,SendHwPids,The length of the statement  "      //const int PID_CAPTURE_ALL_EXCLUDING_NULLS = 0x2001;//Enables reception of all PIDs in the transport stream excluding the NULL PID. " is 132.
Long Statement,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,SubmitTuneRequest,The length of the statement  "          Log.Log.WriteFile("dvb:SubmitTuneRequest  failed - removing subchannel: {0}' {1} - {2}"' subChannelId' ex.Message' ex.StackTrace); " is 130.
Long Statement,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,AddDigitalDevicesCIModule,The length of the statement  "          Log.Log.WriteFile("dvb:  DigitalDevices CI: connection to [demux] successful' CI not available or configured for this tuner."); " is 127.
Long Statement,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,UseCaptureFilter,The length of the statement  "      // filter to connect to the MPEG 2 Demultiplexor filter (see http://msdn.microsoft.com/en-us/library/dd390716%28v=vs.85%29.aspx). " is 129.
Long Statement,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,UpdateSignalQuality,The length of the statement  "          //Log.Log.WriteFile("  dvb:#{0}  locked:{1} present:{2} quality:{3} strength:{4}"' i' isLocked' isPresent' quality' strength);           " is 126.
Long Statement,TvLibrary.Implementations.Pbda,TunerPbdaCableCard,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Pbda\TunerPbdaCableCard.cs,AddPbdaFilter,The length of the statement  "        throw new TvExceptionGraphBuildingFailed("PBDA CC: failed to add PBDA filter' filter is null - you must use Windows 7+!"); " is 122.
Long Statement,TvLibrary.Implementations.Pbda,TunerPbdaCableCard,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Pbda\TunerPbdaCableCard.cs,AddPbdaFilter,The length of the statement  "        throw new TvExceptionGraphBuildingFailed(string.Format("PBDA CC: failed to connect PBDA filter into the graph' hr = 0x{0:x}"' hr)); " is 131.
Long Statement,TvLibrary.Implementations.Pbda,TunerPbdaCableCard,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Pbda\TunerPbdaCableCard.cs,CheckCableCardInfo,The length of the statement  "        hr = _bdaCa.get_SmartCardInfo(out cardName' out cardManufacturer' out isDaylightSavings' out ratingRegion' out timeOffset' out lang' out locationCode); " is 151.
Long Statement,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\Hamming.cs,GetSubPageNumber,The length of the statement  "      // SubPageNumber = 4 Bits SubPageNumber_Byte1 - 3 Bits SubPageNumber_Byte2 - 4 Bits SubPageNumber_Byte3 - 2 Bits SubPageNumber_Byte4 " is 132.
Long Statement,TvLibrary.Teletext,TeletextPage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPage.cs,PageDiffers,The length of the statement  "                      // Trace.WriteLine(String.Format("2) {0:X}/{1} r:{2} c:{3} {4} {5:X}!={6:X}"' _pageNumber' subPageNumber' row' col' _clearSubPage[subPageNumber]' ptr[off + col]' pageData[off + col])); " is 184.
Long Statement,TvLibrary.Teletext,TeletextPage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPage.cs,PageDiffers,The length of the statement  "                    //Trace.WriteLine(String.Format("3) {0:X}/{1} r:{2} c:{3} {4} {5:X}!={6:X}"' _pageNumber' subPageNumber' row' col' _clearSubPage[subPageNumber]' ptr[off + col]' pageData[off + col])); " is 183.
Long Statement,TvLibrary.Teletext,TeletextPage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPage.cs,PageDiffers,The length of the statement  "                  //Trace.WriteLine(String.Format("4) {0:X}/{1} r:{2} c:{3} {4} {5:X}!={6:X}"' _pageNumber' subPageNumber' row' col' _clearSubPage[subPageNumber]' ptr[off + col]' pageData[off + col])); " is 183.
Complex Conditional,TvLibrary.Implementations,DeviceDetector,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DeviceDetector.cs,DetectSupportedAmKsCrossbarDevices,The conditional expression  "!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(devicePath) &&            (              name.Equals(TvCardHDPVR.CROSSBAR_NAME_HDPVR) ||              name.Contains(TvCardHDPVR.CROSSBAR_NAME_COLOSSUS) ||              name.Equals(TvCardHDPVR.CROSSBAR_NAME_HDPVR2_COLOSSUS2) ||              name.Equals(TvCardHDPVR.CROSSBAR_NAME_HDPVR60)            )"  is complex.
Complex Conditional,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,Decode,The conditional expression  "(tableSubtype != TableSubtype.CarrierDefinition || OnCarrierDefinition == null) &&          (tableSubtype != TableSubtype.ModulationMode || OnModulationMode == null)"  is complex.
Complex Conditional,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,Decode,The conditional expression  "tableSubtype == TableSubtype.CarrierDefinition &&          (            _currentVersions[(int)TableSubtype.CarrierDefinition] == -1 ||            _unseenSections[(int)TableSubtype.CarrierDefinition].Count == 0          ) &&          OnCarrierDefinition != null"  is complex.
Complex Conditional,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,Decode,The conditional expression  "tableSubtype == TableSubtype.ModulationMode &&          (            _currentVersions[(int)TableSubtype.ModulationMode] == -1 ||            _unseenSections[(int)TableSubtype.ModulationMode].Count == 0          ) &&          OnModulationMode != null"  is complex.
Complex Conditional,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,Decode,The conditional expression  "tableSubtype == TableSubtype.SourceName &&          _currentVersions[(int)TableSubtype.SourceName] != -1 &&          _unseenSections[(int)TableSubtype.SourceName].Count == 0 &&          OnTableComplete != null"  is complex.
Complex Conditional,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,Decode,The conditional expression  "(            tableSubtype == TableSubtype.VirtualChannelMap &&            _currentVersions[(int)TableSubtype.VirtualChannelMap] != -1 &&            _unseenSections[(int)TableSubtype.VirtualChannelMap].Count == 0 &&            OnTableComplete != null          ) ||          (            (tableSubtype == TableSubtype.DefinedChannelMap || tableSubtype == TableSubtype.VirtualChannelMap) &&            _currentVersions[(int)TableSubtype.VirtualChannelMap] == -1 &&            _channelDefinitions.Count == _definedChannels.Count &&            OnTableComplete != null          )"  is complex.
Complex Conditional,TvLibrary.Implementations.Dri,ScannerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\ScannerDri.cs,OnLvctChannelDetail,The conditional expression  "programNumber == 0 || outOfBand || modulationMode == ModulationMode.Analog || modulationMode == ModulationMode.PrivateDescriptor ||          (serviceType != TvLibrary.Implementations.Dri.Parser.AtscServiceType.Audio && serviceType != TvLibrary.Implementations.Dri.Parser.AtscServiceType.DigitalTelevision) || sourceId == 0"  is complex.
Complex Conditional,TvLibrary.Implementations.Dri,ScannerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\ScannerDri.cs,OnSvctChannelDetail,The conditional expression  "transmissionMedium != AtscTransmissionMedium.Cable || applicationVirtualChannel || programNumber == 0 || sourceId == 0"  is complex.
Complex Conditional,TvLibrary.Implementations.DVB,ProfRed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ProfRed\ProfRed.cs,SendDiseqCommand,The conditional expression  "_previousChannel.Frequency == channel.Frequency &&              _previousChannel.DisEqc == channel.DisEqc &&              _previousChannel.Polarisation == channel.Polarisation &&              _previousChannel.Pilot == channel.Pilot &&              _previousChannel.Rolloff == channel.Rolloff &&              _previousChannel.InnerFecRate == channel.InnerFecRate"  is complex.
Complex Conditional,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,MmiHandler,The conditional expression  "message == TbsMmiMessageType.EnterMenu || message == TbsMmiMessageType.MenuAnswer || message == TbsMmiMessageType.Answer || message == TbsMmiMessageType.CloseMmi"  is complex.
Complex Conditional,TvLibrary.Implementations.DVB,DvbBaseScanning,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DvbBaseScanning.cs,Scan,The conditional expression  "_card.IsTunerLocked || _card.SignalLevel > 0 || _card.SignalQuality > 0 || isDigitalCableScan"  is complex.
Complex Conditional,TvLibrary.Implementations.DVB,DvbBaseScanning,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DvbBaseScanning.cs,IsTvService,The conditional expression  "serviceType == (int)DvbServiceType.DigitalTelevision ||          serviceType == (int)DvbServiceType.Mpeg2HdDigitalTelevision ||          serviceType == (int)DvbServiceType.AdvancedCodecSdDigitalTelevision ||          serviceType == (int)DvbServiceType.AdvancedCodecHdDigitalTelevision ||          serviceType == (int)DvbServiceType.SkyGermanyOptionChannel"  is complex.
Complex Conditional,TvLibrary.Implementations.DVB,MDPlugs,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\MDPlug.cs,IsProviderSelected,The conditional expression  "_cardFolder.Contains(nodeCard.Attributes["Name"].Value) && (nodeCard.Attributes["Provider"]==null || nodeCard.Attributes["Provider"].Value == "All" || (provider != null && nodeCard.Attributes["Provider"].Value.Contains(provider)))"  is complex.
Complex Conditional,TvLibrary.Implementations.DVB,TvDvbChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvDvbChannel.cs,HandlePmtUpdate,The conditional expression  "dvbBaseChannel != null && (_mdplugs != null && _channelInfo.scrambled && _mdplugs.IsProviderSelected(dvbBaseChannel.Provider))"  is complex.
Complex Conditional,TvLibrary.Implementations.DVB,DVB_MMI_Handler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,HandleMMI,The conditional expression  "uMMITag == DVB_MMI.MMI_TAGS.LIST_LAST || uMMITag == DVB_MMI.MMI_TAGS.MENU_LAST ||            uMMITag == DVB_MMI.MMI_TAGS.MENU_MORE || uMMITag == DVB_MMI.MMI_TAGS.LIST_MORE"  is complex.
Complex Conditional,TvLibrary.Implementations.DVB,ConditionalAccess,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ConditionalAccess.cs,SendPids,The conditional expression  "pids.Count != 0 && isDvbs &&                (((DVBSChannel)channel).ModulationType == ModulationType.Mod8Psk ||                ((DVBSChannel)channel).ModulationType == ModulationType.Mod16Apsk ||                ((DVBSChannel)channel).ModulationType == ModulationType.Mod32Apsk)"  is complex.
Complex Conditional,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SendDiseqcCommand,The conditional expression  "_previousChannel.Frequency == channel.Frequency &&              _previousChannel.DisEqc == channel.DisEqc &&              _previousChannel.Polarisation == channel.Polarisation &&              _previousChannel.Pilot == channel.Pilot &&              _previousChannel.Rolloff == channel.Rolloff &&              _previousChannel.InnerFecRate == channel.InnerFecRate"  is complex.
Complex Conditional,TvLibrary.Implementations.DVB,ATSCScanning,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\ATSC\ATSCScanning.cs,CreateNewChannel,The conditional expression  "tuningChannel.PhysicalChannel == 0 ||          (info.freq > 1750 && tuningChannel.Frequency > 0 && info.freq != tuningChannel.Frequency)"  is complex.
Complex Conditional,TvLibrary.Implementations.DVB,TvCardDVBS,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DVBS\TvCardDVBS.cs,AfterTune,The conditional expression  "_filterTIF != null && _dvbsChannel != null &&            (_dvbsChannel.ServiceId < 0 || _dvbsChannel.NetworkId < 0 || _dvbsChannel.TransportId < 0)"  is complex.
Complex Conditional,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,SubmitTuneRequest,The conditional expression  "_conditionalAccess != null &&                  _conditionalAccess.HWProvider != null &&                  _conditionalAccess.HWProvider is ICustomTuning &&                  (_conditionalAccess.HWProvider as ICustomTuning).SupportsTuningForChannel(channel)"  is complex.
Complex Conditional,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,SubmitTuneRequest,The conditional expression  "(!revert && hr < 0) || (revert && hr != 0)"  is complex.
Complex Conditional,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The conditional expression  "pidInfo.isVideo || pidInfo.isAC3Audio || pidInfo.isEAC3Audio || pidInfo.isAudio"  is complex.
Complex Conditional,TvLibrary.Teletext,TeletextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextDecoder.cs,Decode,The conditional expression  "packetNumber < 0 || packetNumber == 25 || packetNumber == 26 || packetNumber > 27"  is complex.
Complex Conditional,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The conditional expression  "(isBoxed || _transparentMode) && _fullscreenMode && !displayHeaderAndTopText"  is complex.
Complex Conditional,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeBasicPage,The conditional expression  "data == ProgramInfoBlockPageMulti ||              data == BlockPageMulti ||              data == GroupPageMulti ||              data == NormalPageMulti ||              data == NormalPageMultiInfo"  is complex.
Complex Conditional,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeBasicPage,The conditional expression  "data == ProgramInfoBlockPageSingle ||              data == BlockPageSingle ||              data == GroupPageSingle ||              data == NormalPage ||              data == NormalPageInfo"  is complex.
Empty Catch Block,TvLibrary.Implementations.DVB,DigitalDevices,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalDevices\DigitalDevices.cs,CiMenuHandler,The method has an empty catch block.
Empty Catch Block,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,MmiHandler,The method has an empty catch block.
Empty Catch Block,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,CiMenuHandler,The method has an empty catch block.
Empty Catch Block,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,Dispose,The method has an empty catch block.
Empty Catch Block,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,CiMenuHandler,The method has an empty catch block.
Empty Catch Block,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,Dispose,The method has an empty catch block.
Empty Catch Block,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,SubmitTuneRequest,The method has an empty catch block.
Empty Catch Block,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,LockInOnSignal,The method has an empty catch block.
Empty Catch Block,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,UpdateSignalQuality,The method has an empty catch block.
Empty Catch Block,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,UpdateSignalQuality,The method has an empty catch block.
Empty Catch Block,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,UpdateSignalQuality,The method has an empty catch block.
Empty Catch Block,TvLibrary.Implementations.DVB,FilterGraphTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Helper\FilterGraphTools.cs,IsThisComObjectInstalled,The method has an empty catch block.
Magic Number,TvLibrary,DeviceSorter,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\DeviceSorter.cs,Sort,The following statement contains a magic number: float[] results = new float[devices.Length + 20];
Magic Number,TvLibrary,HResult,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Helper\HResult.cs,Set,The following statement contains a magic number: _serverityCode = (int)(_hresult >> 30);
Magic Number,TvLibrary,HResult,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Helper\HResult.cs,Set,The following statement contains a magic number: _facilityCode = (int)(_hresult >> 16);
Magic Number,TvLibrary,HResult,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Helper\HResult.cs,ToString,The following statement contains a magic number: return _facility == Facility.Unknown                 ? String.Format("0x{0} - {1}:Unknown(0x{2}):0x{3}"' _hresult.ToString("X").PadLeft(8' '0')' _serverity'                                 _facilityCode.ToString("X").PadLeft(3' '0')' _code.ToString("X").PadLeft(4' '0'))                 : String.Format("0x{0} - {1}:{2}:0x{3}"' _hresult.ToString("X").PadLeft(8' '0')' _serverity' _facility'                                 _code.ToString("X").PadLeft(4' '0'));
Magic Number,TvLibrary,HResult,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Helper\HResult.cs,ToString,The following statement contains a magic number: return _facility == Facility.Unknown                 ? String.Format("0x{0} - {1}:Unknown(0x{2}):0x{3}"' _hresult.ToString("X").PadLeft(8' '0')' _serverity'                                 _facilityCode.ToString("X").PadLeft(3' '0')' _code.ToString("X").PadLeft(4' '0'))                 : String.Format("0x{0} - {1}:{2}:0x{3}"' _hresult.ToString("X").PadLeft(8' '0')' _serverity' _facility'                                 _code.ToString("X").PadLeft(4' '0'));
Magic Number,TvLibrary,HResult,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Helper\HResult.cs,ToString,The following statement contains a magic number: return _facility == Facility.Unknown                 ? String.Format("0x{0} - {1}:Unknown(0x{2}):0x{3}"' _hresult.ToString("X").PadLeft(8' '0')' _serverity'                                 _facilityCode.ToString("X").PadLeft(3' '0')' _code.ToString("X").PadLeft(4' '0'))                 : String.Format("0x{0} - {1}:{2}:0x{3}"' _hresult.ToString("X").PadLeft(8' '0')' _serverity' _facility'                                 _code.ToString("X").PadLeft(4' '0'));
Magic Number,TvLibrary,HResult,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Helper\HResult.cs,ToString,The following statement contains a magic number: return _facility == Facility.Unknown                 ? String.Format("0x{0} - {1}:Unknown(0x{2}):0x{3}"' _hresult.ToString("X").PadLeft(8' '0')' _serverity'                                 _facilityCode.ToString("X").PadLeft(3' '0')' _code.ToString("X").PadLeft(4' '0'))                 : String.Format("0x{0} - {1}:{2}:0x{3}"' _hresult.ToString("X").PadLeft(8' '0')' _serverity' _facility'                                 _code.ToString("X").PadLeft(4' '0'));
Magic Number,TvLibrary,HResult,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Helper\HResult.cs,ToString,The following statement contains a magic number: return _facility == Facility.Unknown                 ? String.Format("0x{0} - {1}:Unknown(0x{2}):0x{3}"' _hresult.ToString("X").PadLeft(8' '0')' _serverity'                                 _facilityCode.ToString("X").PadLeft(3' '0')' _code.ToString("X").PadLeft(4' '0'))                 : String.Format("0x{0} - {1}:{2}:0x{3}"' _hresult.ToString("X").PadLeft(8' '0')' _serverity' _facility'                                 _code.ToString("X").PadLeft(4' '0'));
Magic Number,TvLibrary,TimeShiftingEPGGrabber,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\TimeShiftingEPGGrabber.cs,LoadSettings,The following statement contains a magic number: timeout = 2;
Magic Number,TvLibrary,TimeShiftingEPGGrabber,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\TimeShiftingEPGGrabber.cs,LoadSettings,The following statement contains a magic number: _epgTimer.Interval = timeout * 60000;
Magic Number,TvLibrary.Implementations.Analog.Components,Capture,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Capture.cs,SetStreamConfigSetting,The following statement contains a magic number: SetFrameRate((long)(10000000d / frameRate))
Magic Number,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)          {            case PhysicalConnectorType.Audio_Tuner:              _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);              break;            case PhysicalConnectorType.Video_Tuner:              _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);              _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);              break;            case PhysicalConnectorType.Audio_Line:              audioLine++;              switch (audioLine)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_SPDIFDigital:              audioSPDIF++;              switch (audioSPDIF)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AUX:              audioAux++;              switch (audioAux)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AESDigital:              audioAes++;              switch (audioAes)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                  break;              }              break;            case PhysicalConnectorType.Video_Composite:              videoCvbsNr++;              switch (videoCvbsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SVideo:              videoSvhsNr++;              switch (videoSvhsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_RGB:              videoRgbNr++;              switch (videoRgbNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_YRYBY:              videoYrYbYNr++;              switch (videoYrYbYNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SerialDigital:              videoHdmiNr++;              switch (videoHdmiNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                  break;              }              break;          }
Magic Number,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)          {            case PhysicalConnectorType.Audio_Tuner:              _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);              break;            case PhysicalConnectorType.Video_Tuner:              _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);              _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);              break;            case PhysicalConnectorType.Audio_Line:              audioLine++;              switch (audioLine)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_SPDIFDigital:              audioSPDIF++;              switch (audioSPDIF)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AUX:              audioAux++;              switch (audioAux)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AESDigital:              audioAes++;              switch (audioAes)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                  break;              }              break;            case PhysicalConnectorType.Video_Composite:              videoCvbsNr++;              switch (videoCvbsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SVideo:              videoSvhsNr++;              switch (videoSvhsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_RGB:              videoRgbNr++;              switch (videoRgbNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_YRYBY:              videoYrYbYNr++;              switch (videoYrYbYNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SerialDigital:              videoHdmiNr++;              switch (videoHdmiNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                  break;              }              break;          }
Magic Number,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)          {            case PhysicalConnectorType.Audio_Tuner:              _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);              break;            case PhysicalConnectorType.Video_Tuner:              _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);              _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);              break;            case PhysicalConnectorType.Audio_Line:              audioLine++;              switch (audioLine)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_SPDIFDigital:              audioSPDIF++;              switch (audioSPDIF)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AUX:              audioAux++;              switch (audioAux)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AESDigital:              audioAes++;              switch (audioAes)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                  break;              }              break;            case PhysicalConnectorType.Video_Composite:              videoCvbsNr++;              switch (videoCvbsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SVideo:              videoSvhsNr++;              switch (videoSvhsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_RGB:              videoRgbNr++;              switch (videoRgbNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_YRYBY:              videoYrYbYNr++;              switch (videoYrYbYNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SerialDigital:              videoHdmiNr++;              switch (videoHdmiNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                  break;              }              break;          }
Magic Number,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)          {            case PhysicalConnectorType.Audio_Tuner:              _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);              break;            case PhysicalConnectorType.Video_Tuner:              _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);              _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);              break;            case PhysicalConnectorType.Audio_Line:              audioLine++;              switch (audioLine)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_SPDIFDigital:              audioSPDIF++;              switch (audioSPDIF)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AUX:              audioAux++;              switch (audioAux)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AESDigital:              audioAes++;              switch (audioAes)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                  break;              }              break;            case PhysicalConnectorType.Video_Composite:              videoCvbsNr++;              switch (videoCvbsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SVideo:              videoSvhsNr++;              switch (videoSvhsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_RGB:              videoRgbNr++;              switch (videoRgbNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_YRYBY:              videoYrYbYNr++;              switch (videoYrYbYNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SerialDigital:              videoHdmiNr++;              switch (videoHdmiNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                  break;              }              break;          }
Magic Number,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)          {            case PhysicalConnectorType.Audio_Tuner:              _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);              break;            case PhysicalConnectorType.Video_Tuner:              _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);              _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);              break;            case PhysicalConnectorType.Audio_Line:              audioLine++;              switch (audioLine)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_SPDIFDigital:              audioSPDIF++;              switch (audioSPDIF)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AUX:              audioAux++;              switch (audioAux)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AESDigital:              audioAes++;              switch (audioAes)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                  break;              }              break;            case PhysicalConnectorType.Video_Composite:              videoCvbsNr++;              switch (videoCvbsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SVideo:              videoSvhsNr++;              switch (videoSvhsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_RGB:              videoRgbNr++;              switch (videoRgbNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_YRYBY:              videoYrYbYNr++;              switch (videoYrYbYNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SerialDigital:              videoHdmiNr++;              switch (videoHdmiNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                  break;              }              break;          }
Magic Number,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)          {            case PhysicalConnectorType.Audio_Tuner:              _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);              break;            case PhysicalConnectorType.Video_Tuner:              _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);              _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);              break;            case PhysicalConnectorType.Audio_Line:              audioLine++;              switch (audioLine)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_SPDIFDigital:              audioSPDIF++;              switch (audioSPDIF)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AUX:              audioAux++;              switch (audioAux)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AESDigital:              audioAes++;              switch (audioAes)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                  break;              }              break;            case PhysicalConnectorType.Video_Composite:              videoCvbsNr++;              switch (videoCvbsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SVideo:              videoSvhsNr++;              switch (videoSvhsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_RGB:              videoRgbNr++;              switch (videoRgbNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_YRYBY:              videoYrYbYNr++;              switch (videoYrYbYNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SerialDigital:              videoHdmiNr++;              switch (videoHdmiNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                  break;              }              break;          }
Magic Number,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)          {            case PhysicalConnectorType.Audio_Tuner:              _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);              break;            case PhysicalConnectorType.Video_Tuner:              _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);              _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);              break;            case PhysicalConnectorType.Audio_Line:              audioLine++;              switch (audioLine)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_SPDIFDigital:              audioSPDIF++;              switch (audioSPDIF)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AUX:              audioAux++;              switch (audioAux)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AESDigital:              audioAes++;              switch (audioAes)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                  break;              }              break;            case PhysicalConnectorType.Video_Composite:              videoCvbsNr++;              switch (videoCvbsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SVideo:              videoSvhsNr++;              switch (videoSvhsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_RGB:              videoRgbNr++;              switch (videoRgbNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_YRYBY:              videoYrYbYNr++;              switch (videoYrYbYNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SerialDigital:              videoHdmiNr++;              switch (videoHdmiNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                  break;              }              break;          }
Magic Number,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)          {            case PhysicalConnectorType.Audio_Tuner:              _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);              break;            case PhysicalConnectorType.Video_Tuner:              _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);              _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);              break;            case PhysicalConnectorType.Audio_Line:              audioLine++;              switch (audioLine)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_SPDIFDigital:              audioSPDIF++;              switch (audioSPDIF)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AUX:              audioAux++;              switch (audioAux)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AESDigital:              audioAes++;              switch (audioAes)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                  break;              }              break;            case PhysicalConnectorType.Video_Composite:              videoCvbsNr++;              switch (videoCvbsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SVideo:              videoSvhsNr++;              switch (videoSvhsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_RGB:              videoRgbNr++;              switch (videoRgbNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_YRYBY:              videoYrYbYNr++;              switch (videoYrYbYNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SerialDigital:              videoHdmiNr++;              switch (videoHdmiNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                  break;              }              break;          }
Magic Number,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)          {            case PhysicalConnectorType.Audio_Tuner:              _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);              break;            case PhysicalConnectorType.Video_Tuner:              _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);              _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);              break;            case PhysicalConnectorType.Audio_Line:              audioLine++;              switch (audioLine)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_SPDIFDigital:              audioSPDIF++;              switch (audioSPDIF)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AUX:              audioAux++;              switch (audioAux)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AESDigital:              audioAes++;              switch (audioAes)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                  break;              }              break;            case PhysicalConnectorType.Video_Composite:              videoCvbsNr++;              switch (videoCvbsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SVideo:              videoSvhsNr++;              switch (videoSvhsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_RGB:              videoRgbNr++;              switch (videoRgbNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_YRYBY:              videoYrYbYNr++;              switch (videoYrYbYNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SerialDigital:              videoHdmiNr++;              switch (videoHdmiNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                  break;              }              break;          }
Magic Number,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)          {            case PhysicalConnectorType.Audio_Tuner:              _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);              break;            case PhysicalConnectorType.Video_Tuner:              _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);              _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);              break;            case PhysicalConnectorType.Audio_Line:              audioLine++;              switch (audioLine)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_SPDIFDigital:              audioSPDIF++;              switch (audioSPDIF)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AUX:              audioAux++;              switch (audioAux)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AESDigital:              audioAes++;              switch (audioAes)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                  break;              }              break;            case PhysicalConnectorType.Video_Composite:              videoCvbsNr++;              switch (videoCvbsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SVideo:              videoSvhsNr++;              switch (videoSvhsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_RGB:              videoRgbNr++;              switch (videoRgbNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_YRYBY:              videoYrYbYNr++;              switch (videoYrYbYNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SerialDigital:              videoHdmiNr++;              switch (videoHdmiNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                  break;              }              break;          }
Magic Number,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)          {            case PhysicalConnectorType.Audio_Tuner:              _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);              break;            case PhysicalConnectorType.Video_Tuner:              _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);              _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);              break;            case PhysicalConnectorType.Audio_Line:              audioLine++;              switch (audioLine)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_SPDIFDigital:              audioSPDIF++;              switch (audioSPDIF)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AUX:              audioAux++;              switch (audioAux)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AESDigital:              audioAes++;              switch (audioAes)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                  break;              }              break;            case PhysicalConnectorType.Video_Composite:              videoCvbsNr++;              switch (videoCvbsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SVideo:              videoSvhsNr++;              switch (videoSvhsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_RGB:              videoRgbNr++;              switch (videoRgbNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_YRYBY:              videoYrYbYNr++;              switch (videoYrYbYNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SerialDigital:              videoHdmiNr++;              switch (videoHdmiNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                  break;              }              break;          }
Magic Number,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)          {            case PhysicalConnectorType.Audio_Tuner:              _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);              break;            case PhysicalConnectorType.Video_Tuner:              _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);              _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);              break;            case PhysicalConnectorType.Audio_Line:              audioLine++;              switch (audioLine)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_SPDIFDigital:              audioSPDIF++;              switch (audioSPDIF)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AUX:              audioAux++;              switch (audioAux)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AESDigital:              audioAes++;              switch (audioAes)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                  break;              }              break;            case PhysicalConnectorType.Video_Composite:              videoCvbsNr++;              switch (videoCvbsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SVideo:              videoSvhsNr++;              switch (videoSvhsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_RGB:              videoRgbNr++;              switch (videoRgbNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_YRYBY:              videoYrYbYNr++;              switch (videoYrYbYNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SerialDigital:              videoHdmiNr++;              switch (videoHdmiNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                  break;              }              break;          }
Magic Number,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)          {            case PhysicalConnectorType.Audio_Tuner:              _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);              break;            case PhysicalConnectorType.Video_Tuner:              _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);              _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);              break;            case PhysicalConnectorType.Audio_Line:              audioLine++;              switch (audioLine)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_SPDIFDigital:              audioSPDIF++;              switch (audioSPDIF)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AUX:              audioAux++;              switch (audioAux)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AESDigital:              audioAes++;              switch (audioAes)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                  break;              }              break;            case PhysicalConnectorType.Video_Composite:              videoCvbsNr++;              switch (videoCvbsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SVideo:              videoSvhsNr++;              switch (videoSvhsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_RGB:              videoRgbNr++;              switch (videoRgbNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_YRYBY:              videoYrYbYNr++;              switch (videoYrYbYNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SerialDigital:              videoHdmiNr++;              switch (videoHdmiNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                  break;              }              break;          }
Magic Number,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)          {            case PhysicalConnectorType.Audio_Tuner:              _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);              break;            case PhysicalConnectorType.Video_Tuner:              _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);              _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);              break;            case PhysicalConnectorType.Audio_Line:              audioLine++;              switch (audioLine)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_SPDIFDigital:              audioSPDIF++;              switch (audioSPDIF)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AUX:              audioAux++;              switch (audioAux)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AESDigital:              audioAes++;              switch (audioAes)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                  break;              }              break;            case PhysicalConnectorType.Video_Composite:              videoCvbsNr++;              switch (videoCvbsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SVideo:              videoSvhsNr++;              switch (videoSvhsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_RGB:              videoRgbNr++;              switch (videoRgbNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_YRYBY:              videoYrYbYNr++;              switch (videoYrYbYNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SerialDigital:              videoHdmiNr++;              switch (videoHdmiNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                  break;              }              break;          }
Magic Number,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)          {            case PhysicalConnectorType.Audio_Tuner:              _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);              break;            case PhysicalConnectorType.Video_Tuner:              _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);              _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);              break;            case PhysicalConnectorType.Audio_Line:              audioLine++;              switch (audioLine)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_SPDIFDigital:              audioSPDIF++;              switch (audioSPDIF)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AUX:              audioAux++;              switch (audioAux)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AESDigital:              audioAes++;              switch (audioAes)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                  break;              }              break;            case PhysicalConnectorType.Video_Composite:              videoCvbsNr++;              switch (videoCvbsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SVideo:              videoSvhsNr++;              switch (videoSvhsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_RGB:              videoRgbNr++;              switch (videoRgbNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_YRYBY:              videoYrYbYNr++;              switch (videoYrYbYNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SerialDigital:              videoHdmiNr++;              switch (videoHdmiNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                  break;              }              break;          }
Magic Number,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)          {            case PhysicalConnectorType.Audio_Tuner:              _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);              break;            case PhysicalConnectorType.Video_Tuner:              _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);              _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);              break;            case PhysicalConnectorType.Audio_Line:              audioLine++;              switch (audioLine)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_SPDIFDigital:              audioSPDIF++;              switch (audioSPDIF)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AUX:              audioAux++;              switch (audioAux)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AESDigital:              audioAes++;              switch (audioAes)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                  break;              }              break;            case PhysicalConnectorType.Video_Composite:              videoCvbsNr++;              switch (videoCvbsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SVideo:              videoSvhsNr++;              switch (videoSvhsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_RGB:              videoRgbNr++;              switch (videoRgbNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_YRYBY:              videoYrYbYNr++;              switch (videoYrYbYNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SerialDigital:              videoHdmiNr++;              switch (videoHdmiNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                  break;              }              break;          }
Magic Number,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)          {            case PhysicalConnectorType.Audio_Tuner:              _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);              break;            case PhysicalConnectorType.Video_Tuner:              _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);              _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);              break;            case PhysicalConnectorType.Audio_Line:              audioLine++;              switch (audioLine)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_SPDIFDigital:              audioSPDIF++;              switch (audioSPDIF)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AUX:              audioAux++;              switch (audioAux)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AESDigital:              audioAes++;              switch (audioAes)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                  break;              }              break;            case PhysicalConnectorType.Video_Composite:              videoCvbsNr++;              switch (videoCvbsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SVideo:              videoSvhsNr++;              switch (videoSvhsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_RGB:              videoRgbNr++;              switch (videoRgbNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_YRYBY:              videoYrYbYNr++;              switch (videoYrYbYNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SerialDigital:              videoHdmiNr++;              switch (videoHdmiNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                  break;              }              break;          }
Magic Number,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)          {            case PhysicalConnectorType.Audio_Tuner:              _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);              break;            case PhysicalConnectorType.Video_Tuner:              _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);              _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);              break;            case PhysicalConnectorType.Audio_Line:              audioLine++;              switch (audioLine)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_SPDIFDigital:              audioSPDIF++;              switch (audioSPDIF)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AUX:              audioAux++;              switch (audioAux)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AESDigital:              audioAes++;              switch (audioAes)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                  break;              }              break;            case PhysicalConnectorType.Video_Composite:              videoCvbsNr++;              switch (videoCvbsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SVideo:              videoSvhsNr++;              switch (videoSvhsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_RGB:              videoRgbNr++;              switch (videoRgbNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_YRYBY:              videoYrYbYNr++;              switch (videoYrYbYNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SerialDigital:              videoHdmiNr++;              switch (videoHdmiNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                  break;              }              break;          }
Magic Number,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,FindCapturePin,The following statement contains a magic number: IPin[] pins = new IPin[2];
Magic Number,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,FindCapturePin,The following statement contains a magic number: AMMediaType[] media = new AMMediaType[2];
Magic Number,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,ConnectEncoderFilter,The following statement contains a magic number: IPin[] pins = new IPin[20];
Magic Number,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,ConnectEncoderFilter,The following statement contains a magic number: enumPins.Next(20' pins' out pinsAvailable);
Magic Number,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,ConnectEncoderFilter,The following statement contains a magic number: pinsConnected == 2
Magic Number,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,ConnectMultiplexer,The following statement contains a magic number: IPin[] pins = new IPin[20];
Magic Number,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,ConnectMultiplexer,The following statement contains a magic number: enumPins.Next(20' pins' out pinsAvailable);
Magic Number,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,ConnectMultiplexer,The following statement contains a magic number: pinsConnected == 2
Magic Number,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,ConnectMultiplexer,The following statement contains a magic number: IPin[] pins = new IPin[20];
Magic Number,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,ConnectMultiplexer,The following statement contains a magic number: enumPins.Next(20' pins' out pinsAvailable);
Magic Number,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,ConnectMultiplexer,The following statement contains a magic number: pinsConnected == 2
Magic Number,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,ConnectMultiplexer,The following statement contains a magic number: IPin[] pins = new IPin[20];
Magic Number,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,ConnectMultiplexer,The following statement contains a magic number: enumPins.Next(20' pins' out pinsAvailable);
Magic Number,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,ConnectMultiplexer,The following statement contains a magic number: enumPins.Next(20' pins' out pinsAvailable);
Magic Number,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,ConnectMultiplexer,The following statement contains a magic number: pinsConnected == 2
Magic Number,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,AddTvEncoderFilter,The following statement contains a magic number: AMMediaType[] mediaTypes = new AMMediaType[20];
Magic Number,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,AddTvEncoderFilter,The following statement contains a magic number: enumMediaTypes.Next(20' mediaTypes' out fetched);
Magic Number,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,FindMediaPin,The following statement contains a magic number: IPin[] pins = new IPin[2];
Magic Number,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,FindMediaPin,The following statement contains a magic number: AMMediaType[] media = new AMMediaType[2];
Magic Number,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,AddMpeg2Demultiplexer,The following statement contains a magic number: map.MapStreamId(224' MPEG2Program.ElementaryStream' 0' 0);
Magic Number,TvLibrary.Implementations.Analog.Components,Encoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Encoder.cs,AddMpeg2Demultiplexer,The following statement contains a magic number: map.MapStreamId(0xBD' MPEG2Program.ElementaryStream' 0xA0' 7);
Magic Number,TvLibrary.Implementations.Analog.Components,Tuner,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Tuner.cs,UpdateSignalQuality,The following statement contains a magic number: _signalLevel = 100;
Magic Number,TvLibrary.Implementations.Analog.Components,Tuner,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Tuner.cs,UpdateSignalQuality,The following statement contains a magic number: _signalQuality = 100;
Magic Number,TvLibrary.Implementations.Analog,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\QualityControl\Hauppauge.cs,SetStream,The following statement contains a magic number: _SetStreamType(103);
Magic Number,TvLibrary.Implementations.Analog,HDPVRChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\HDPVRChannel.cs,WaitForPMT,The following statement contains a magic number: pmtFound = _eventPMT.WaitOne(_parameters.TimeOutPMT * 1000' true);
Magic Number,TvLibrary.Implementations.Analog,HDPVRChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\HDPVRChannel.cs,HandlePmt,The following statement contains a magic number: IntPtr pmtMem = Marshal.AllocCoTaskMem(4096);
Magic Number,TvLibrary.Implementations.Analog,HDPVRChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\HDPVRChannel.cs,HandlePmt,The following statement contains a magic number: _pmtLength < 6
Magic Number,TvLibrary.Implementations.Analog,HDPVRChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\HDPVRChannel.cs,HandlePmt,The following statement contains a magic number: int version = ((_pmtData[5] >> 1) & 0x1F);
Magic Number,TvLibrary.Implementations.Analog,HDPVRChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\HDPVRChannel.cs,HandlePmt,The following statement contains a magic number: int pmtProgramNumber = (_pmtData[3] << 8) + _pmtData[4];
Magic Number,TvLibrary.Implementations.Analog,HDPVRChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\HDPVRChannel.cs,HandlePmt,The following statement contains a magic number: int pmtProgramNumber = (_pmtData[3] << 8) + _pmtData[4];
Magic Number,TvLibrary.Implementations.Analog,HDPVRChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\HDPVRChannel.cs,HandlePmt,The following statement contains a magic number: int pmtProgramNumber = (_pmtData[3] << 8) + _pmtData[4];
Magic Number,TvLibrary.Implementations.Analog,TvCardAnalog,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\Analog\TvCardAnalog.cs,TvCardAnalog,The following statement contains a magic number: _maxChannel = 128;
Magic Number,TvLibrary.Implementations.Analog,TvCardAnalog,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\Analog\TvCardAnalog.cs,PauseGraph,The following statement contains a magic number: mediaCtl.GetState(10' out state);
Magic Number,TvLibrary.Implementations.Analog,TvCardAnalog,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\Analog\TvCardAnalog.cs,StopGraph,The following statement contains a magic number: mediaCtl.GetState(10' out state);
Magic Number,TvLibrary.Implementations.Analog,TvCardAnalog,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\Analog\TvCardAnalog.cs,LockInOnSignal,The following statement contains a magic number: System.Threading.Thread.Sleep(20);
Magic Number,TvLibrary.Implementations.Analog,TvCardAnalog,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\Analog\TvCardAnalog.cs,LockInOnSignal,The following statement contains a magic number: !isLocked && ts.TotalSeconds < 2
Magic Number,TvLibrary.Implementations.Analog,TvCardAnalog,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\Analog\TvCardAnalog.cs,UpdateSignalQuality,The following statement contains a magic number: ts.TotalMilliseconds < 5000 || _graphState == GraphState.Idle
Magic Number,TvLibrary.Implementations.Analog,TvCardAnalog,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\Analog\TvCardAnalog.cs,BuildGraph,The following statement contains a magic number: _hauppauge.SetStream(103);
Magic Number,TvLibrary.Implementations.Analog,TvCardAnalog,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\Analog\TvCardAnalog.cs,BuildGraph,The following statement contains a magic number: _hauppauge.SetAudioBitRate(384);
Magic Number,TvLibrary.Implementations.Analog,TvCardAnalog,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\Analog\TvCardAnalog.cs,BuildGraph,The following statement contains a magic number: _hauppauge.SetVideoBitRate(6000' 8000' true);
Magic Number,TvLibrary.Implementations.Analog,TvCardAnalog,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\Analog\TvCardAnalog.cs,BuildGraph,The following statement contains a magic number: _hauppauge.SetVideoBitRate(6000' 8000' true);
Magic Number,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,TvCardHDPVR,The following statement contains a magic number: _maxChannel = 128;
Magic Number,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,PauseGraph,The following statement contains a magic number: mediaCtl.GetState(10' out state);
Magic Number,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,StopGraph,The following statement contains a magic number: mediaCtl.GetState(10' out state);
Magic Number,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,UpdateSignalQuality,The following statement contains a magic number: ts.TotalMilliseconds < 5000 || _graphState == GraphState.Idle
Magic Number,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,UpdateSignalQuality,The following statement contains a magic number: _signalLevel = 100;
Magic Number,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,UpdateSignalQuality,The following statement contains a magic number: _signalQuality = 100;
Magic Number,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)            {              case PhysicalConnectorType.Audio_Tuner:                _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);                break;              case PhysicalConnectorType.Video_Tuner:                _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);                _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);                break;              case PhysicalConnectorType.Audio_Line:                audioLine++;                switch (audioLine)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_SPDIFDigital:                audioSPDIF++;                switch (audioSPDIF)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AUX:                audioAux++;                switch (audioAux)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AESDigital:                audioAes++;                switch (audioAes)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                    break;                }                break;              case PhysicalConnectorType.Video_Composite:                videoCvbsNr++;                switch (videoCvbsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SVideo:                videoSvhsNr++;                switch (videoSvhsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_RGB:                videoRgbNr++;                switch (videoRgbNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_YRYBY:                videoYrYbYNr++;                switch (videoYrYbYNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SerialDigital:              case PhysicalConnectorType.Video_ParallelDigital:                videoHdmiNr++;                switch (videoHdmiNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                    break;                }                break;            }
Magic Number,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)            {              case PhysicalConnectorType.Audio_Tuner:                _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);                break;              case PhysicalConnectorType.Video_Tuner:                _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);                _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);                break;              case PhysicalConnectorType.Audio_Line:                audioLine++;                switch (audioLine)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_SPDIFDigital:                audioSPDIF++;                switch (audioSPDIF)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AUX:                audioAux++;                switch (audioAux)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AESDigital:                audioAes++;                switch (audioAes)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                    break;                }                break;              case PhysicalConnectorType.Video_Composite:                videoCvbsNr++;                switch (videoCvbsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SVideo:                videoSvhsNr++;                switch (videoSvhsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_RGB:                videoRgbNr++;                switch (videoRgbNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_YRYBY:                videoYrYbYNr++;                switch (videoYrYbYNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SerialDigital:              case PhysicalConnectorType.Video_ParallelDigital:                videoHdmiNr++;                switch (videoHdmiNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                    break;                }                break;            }
Magic Number,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)            {              case PhysicalConnectorType.Audio_Tuner:                _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);                break;              case PhysicalConnectorType.Video_Tuner:                _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);                _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);                break;              case PhysicalConnectorType.Audio_Line:                audioLine++;                switch (audioLine)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_SPDIFDigital:                audioSPDIF++;                switch (audioSPDIF)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AUX:                audioAux++;                switch (audioAux)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AESDigital:                audioAes++;                switch (audioAes)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                    break;                }                break;              case PhysicalConnectorType.Video_Composite:                videoCvbsNr++;                switch (videoCvbsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SVideo:                videoSvhsNr++;                switch (videoSvhsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_RGB:                videoRgbNr++;                switch (videoRgbNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_YRYBY:                videoYrYbYNr++;                switch (videoYrYbYNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SerialDigital:              case PhysicalConnectorType.Video_ParallelDigital:                videoHdmiNr++;                switch (videoHdmiNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                    break;                }                break;            }
Magic Number,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)            {              case PhysicalConnectorType.Audio_Tuner:                _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);                break;              case PhysicalConnectorType.Video_Tuner:                _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);                _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);                break;              case PhysicalConnectorType.Audio_Line:                audioLine++;                switch (audioLine)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_SPDIFDigital:                audioSPDIF++;                switch (audioSPDIF)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AUX:                audioAux++;                switch (audioAux)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AESDigital:                audioAes++;                switch (audioAes)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                    break;                }                break;              case PhysicalConnectorType.Video_Composite:                videoCvbsNr++;                switch (videoCvbsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SVideo:                videoSvhsNr++;                switch (videoSvhsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_RGB:                videoRgbNr++;                switch (videoRgbNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_YRYBY:                videoYrYbYNr++;                switch (videoYrYbYNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SerialDigital:              case PhysicalConnectorType.Video_ParallelDigital:                videoHdmiNr++;                switch (videoHdmiNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                    break;                }                break;            }
Magic Number,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)            {              case PhysicalConnectorType.Audio_Tuner:                _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);                break;              case PhysicalConnectorType.Video_Tuner:                _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);                _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);                break;              case PhysicalConnectorType.Audio_Line:                audioLine++;                switch (audioLine)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_SPDIFDigital:                audioSPDIF++;                switch (audioSPDIF)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AUX:                audioAux++;                switch (audioAux)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AESDigital:                audioAes++;                switch (audioAes)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                    break;                }                break;              case PhysicalConnectorType.Video_Composite:                videoCvbsNr++;                switch (videoCvbsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SVideo:                videoSvhsNr++;                switch (videoSvhsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_RGB:                videoRgbNr++;                switch (videoRgbNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_YRYBY:                videoYrYbYNr++;                switch (videoYrYbYNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SerialDigital:              case PhysicalConnectorType.Video_ParallelDigital:                videoHdmiNr++;                switch (videoHdmiNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                    break;                }                break;            }
Magic Number,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)            {              case PhysicalConnectorType.Audio_Tuner:                _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);                break;              case PhysicalConnectorType.Video_Tuner:                _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);                _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);                break;              case PhysicalConnectorType.Audio_Line:                audioLine++;                switch (audioLine)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_SPDIFDigital:                audioSPDIF++;                switch (audioSPDIF)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AUX:                audioAux++;                switch (audioAux)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AESDigital:                audioAes++;                switch (audioAes)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                    break;                }                break;              case PhysicalConnectorType.Video_Composite:                videoCvbsNr++;                switch (videoCvbsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SVideo:                videoSvhsNr++;                switch (videoSvhsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_RGB:                videoRgbNr++;                switch (videoRgbNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_YRYBY:                videoYrYbYNr++;                switch (videoYrYbYNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SerialDigital:              case PhysicalConnectorType.Video_ParallelDigital:                videoHdmiNr++;                switch (videoHdmiNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                    break;                }                break;            }
Magic Number,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)            {              case PhysicalConnectorType.Audio_Tuner:                _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);                break;              case PhysicalConnectorType.Video_Tuner:                _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);                _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);                break;              case PhysicalConnectorType.Audio_Line:                audioLine++;                switch (audioLine)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_SPDIFDigital:                audioSPDIF++;                switch (audioSPDIF)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AUX:                audioAux++;                switch (audioAux)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AESDigital:                audioAes++;                switch (audioAes)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                    break;                }                break;              case PhysicalConnectorType.Video_Composite:                videoCvbsNr++;                switch (videoCvbsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SVideo:                videoSvhsNr++;                switch (videoSvhsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_RGB:                videoRgbNr++;                switch (videoRgbNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_YRYBY:                videoYrYbYNr++;                switch (videoYrYbYNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SerialDigital:              case PhysicalConnectorType.Video_ParallelDigital:                videoHdmiNr++;                switch (videoHdmiNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                    break;                }                break;            }
Magic Number,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)            {              case PhysicalConnectorType.Audio_Tuner:                _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);                break;              case PhysicalConnectorType.Video_Tuner:                _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);                _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);                break;              case PhysicalConnectorType.Audio_Line:                audioLine++;                switch (audioLine)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_SPDIFDigital:                audioSPDIF++;                switch (audioSPDIF)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AUX:                audioAux++;                switch (audioAux)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AESDigital:                audioAes++;                switch (audioAes)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                    break;                }                break;              case PhysicalConnectorType.Video_Composite:                videoCvbsNr++;                switch (videoCvbsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SVideo:                videoSvhsNr++;                switch (videoSvhsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_RGB:                videoRgbNr++;                switch (videoRgbNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_YRYBY:                videoYrYbYNr++;                switch (videoYrYbYNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SerialDigital:              case PhysicalConnectorType.Video_ParallelDigital:                videoHdmiNr++;                switch (videoHdmiNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                    break;                }                break;            }
Magic Number,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)            {              case PhysicalConnectorType.Audio_Tuner:                _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);                break;              case PhysicalConnectorType.Video_Tuner:                _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);                _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);                break;              case PhysicalConnectorType.Audio_Line:                audioLine++;                switch (audioLine)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_SPDIFDigital:                audioSPDIF++;                switch (audioSPDIF)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AUX:                audioAux++;                switch (audioAux)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AESDigital:                audioAes++;                switch (audioAes)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                    break;                }                break;              case PhysicalConnectorType.Video_Composite:                videoCvbsNr++;                switch (videoCvbsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SVideo:                videoSvhsNr++;                switch (videoSvhsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_RGB:                videoRgbNr++;                switch (videoRgbNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_YRYBY:                videoYrYbYNr++;                switch (videoYrYbYNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SerialDigital:              case PhysicalConnectorType.Video_ParallelDigital:                videoHdmiNr++;                switch (videoHdmiNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                    break;                }                break;            }
Magic Number,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)            {              case PhysicalConnectorType.Audio_Tuner:                _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);                break;              case PhysicalConnectorType.Video_Tuner:                _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);                _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);                break;              case PhysicalConnectorType.Audio_Line:                audioLine++;                switch (audioLine)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_SPDIFDigital:                audioSPDIF++;                switch (audioSPDIF)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AUX:                audioAux++;                switch (audioAux)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AESDigital:                audioAes++;                switch (audioAes)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                    break;                }                break;              case PhysicalConnectorType.Video_Composite:                videoCvbsNr++;                switch (videoCvbsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SVideo:                videoSvhsNr++;                switch (videoSvhsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_RGB:                videoRgbNr++;                switch (videoRgbNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_YRYBY:                videoYrYbYNr++;                switch (videoYrYbYNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SerialDigital:              case PhysicalConnectorType.Video_ParallelDigital:                videoHdmiNr++;                switch (videoHdmiNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                    break;                }                break;            }
Magic Number,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)            {              case PhysicalConnectorType.Audio_Tuner:                _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);                break;              case PhysicalConnectorType.Video_Tuner:                _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);                _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);                break;              case PhysicalConnectorType.Audio_Line:                audioLine++;                switch (audioLine)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_SPDIFDigital:                audioSPDIF++;                switch (audioSPDIF)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AUX:                audioAux++;                switch (audioAux)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AESDigital:                audioAes++;                switch (audioAes)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                    break;                }                break;              case PhysicalConnectorType.Video_Composite:                videoCvbsNr++;                switch (videoCvbsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SVideo:                videoSvhsNr++;                switch (videoSvhsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_RGB:                videoRgbNr++;                switch (videoRgbNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_YRYBY:                videoYrYbYNr++;                switch (videoYrYbYNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SerialDigital:              case PhysicalConnectorType.Video_ParallelDigital:                videoHdmiNr++;                switch (videoHdmiNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                    break;                }                break;            }
Magic Number,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)            {              case PhysicalConnectorType.Audio_Tuner:                _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);                break;              case PhysicalConnectorType.Video_Tuner:                _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);                _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);                break;              case PhysicalConnectorType.Audio_Line:                audioLine++;                switch (audioLine)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_SPDIFDigital:                audioSPDIF++;                switch (audioSPDIF)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AUX:                audioAux++;                switch (audioAux)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AESDigital:                audioAes++;                switch (audioAes)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                    break;                }                break;              case PhysicalConnectorType.Video_Composite:                videoCvbsNr++;                switch (videoCvbsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SVideo:                videoSvhsNr++;                switch (videoSvhsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_RGB:                videoRgbNr++;                switch (videoRgbNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_YRYBY:                videoYrYbYNr++;                switch (videoYrYbYNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SerialDigital:              case PhysicalConnectorType.Video_ParallelDigital:                videoHdmiNr++;                switch (videoHdmiNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                    break;                }                break;            }
Magic Number,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)            {              case PhysicalConnectorType.Audio_Tuner:                _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);                break;              case PhysicalConnectorType.Video_Tuner:                _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);                _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);                break;              case PhysicalConnectorType.Audio_Line:                audioLine++;                switch (audioLine)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_SPDIFDigital:                audioSPDIF++;                switch (audioSPDIF)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AUX:                audioAux++;                switch (audioAux)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AESDigital:                audioAes++;                switch (audioAes)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                    break;                }                break;              case PhysicalConnectorType.Video_Composite:                videoCvbsNr++;                switch (videoCvbsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SVideo:                videoSvhsNr++;                switch (videoSvhsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_RGB:                videoRgbNr++;                switch (videoRgbNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_YRYBY:                videoYrYbYNr++;                switch (videoYrYbYNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SerialDigital:              case PhysicalConnectorType.Video_ParallelDigital:                videoHdmiNr++;                switch (videoHdmiNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                    break;                }                break;            }
Magic Number,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)            {              case PhysicalConnectorType.Audio_Tuner:                _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);                break;              case PhysicalConnectorType.Video_Tuner:                _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);                _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);                break;              case PhysicalConnectorType.Audio_Line:                audioLine++;                switch (audioLine)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_SPDIFDigital:                audioSPDIF++;                switch (audioSPDIF)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AUX:                audioAux++;                switch (audioAux)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AESDigital:                audioAes++;                switch (audioAes)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                    break;                }                break;              case PhysicalConnectorType.Video_Composite:                videoCvbsNr++;                switch (videoCvbsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SVideo:                videoSvhsNr++;                switch (videoSvhsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_RGB:                videoRgbNr++;                switch (videoRgbNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_YRYBY:                videoYrYbYNr++;                switch (videoYrYbYNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SerialDigital:              case PhysicalConnectorType.Video_ParallelDigital:                videoHdmiNr++;                switch (videoHdmiNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                    break;                }                break;            }
Magic Number,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)            {              case PhysicalConnectorType.Audio_Tuner:                _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);                break;              case PhysicalConnectorType.Video_Tuner:                _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);                _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);                break;              case PhysicalConnectorType.Audio_Line:                audioLine++;                switch (audioLine)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_SPDIFDigital:                audioSPDIF++;                switch (audioSPDIF)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AUX:                audioAux++;                switch (audioAux)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AESDigital:                audioAes++;                switch (audioAes)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                    break;                }                break;              case PhysicalConnectorType.Video_Composite:                videoCvbsNr++;                switch (videoCvbsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SVideo:                videoSvhsNr++;                switch (videoSvhsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_RGB:                videoRgbNr++;                switch (videoRgbNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_YRYBY:                videoYrYbYNr++;                switch (videoYrYbYNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SerialDigital:              case PhysicalConnectorType.Video_ParallelDigital:                videoHdmiNr++;                switch (videoHdmiNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                    break;                }                break;            }
Magic Number,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)            {              case PhysicalConnectorType.Audio_Tuner:                _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);                break;              case PhysicalConnectorType.Video_Tuner:                _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);                _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);                break;              case PhysicalConnectorType.Audio_Line:                audioLine++;                switch (audioLine)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_SPDIFDigital:                audioSPDIF++;                switch (audioSPDIF)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AUX:                audioAux++;                switch (audioAux)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AESDigital:                audioAes++;                switch (audioAes)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                    break;                }                break;              case PhysicalConnectorType.Video_Composite:                videoCvbsNr++;                switch (videoCvbsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SVideo:                videoSvhsNr++;                switch (videoSvhsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_RGB:                videoRgbNr++;                switch (videoRgbNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_YRYBY:                videoYrYbYNr++;                switch (videoYrYbYNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SerialDigital:              case PhysicalConnectorType.Video_ParallelDigital:                videoHdmiNr++;                switch (videoHdmiNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                    break;                }                break;            }
Magic Number,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)            {              case PhysicalConnectorType.Audio_Tuner:                _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);                break;              case PhysicalConnectorType.Video_Tuner:                _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);                _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);                break;              case PhysicalConnectorType.Audio_Line:                audioLine++;                switch (audioLine)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_SPDIFDigital:                audioSPDIF++;                switch (audioSPDIF)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AUX:                audioAux++;                switch (audioAux)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AESDigital:                audioAes++;                switch (audioAes)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                    break;                }                break;              case PhysicalConnectorType.Video_Composite:                videoCvbsNr++;                switch (videoCvbsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SVideo:                videoSvhsNr++;                switch (videoSvhsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_RGB:                videoRgbNr++;                switch (videoRgbNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_YRYBY:                videoYrYbYNr++;                switch (videoYrYbYNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SerialDigital:              case PhysicalConnectorType.Video_ParallelDigital:                videoHdmiNr++;                switch (videoHdmiNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                    break;                }                break;            }
Magic Number,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,CheckCapabilities,The following statement contains a magic number: switch (connectorType)            {              case PhysicalConnectorType.Audio_Tuner:                _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);                break;              case PhysicalConnectorType.Video_Tuner:                _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);                _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);                break;              case PhysicalConnectorType.Audio_Line:                audioLine++;                switch (audioLine)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_SPDIFDigital:                audioSPDIF++;                switch (audioSPDIF)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AUX:                audioAux++;                switch (audioAux)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AESDigital:                audioAes++;                switch (audioAes)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                    break;                }                break;              case PhysicalConnectorType.Video_Composite:                videoCvbsNr++;                switch (videoCvbsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SVideo:                videoSvhsNr++;                switch (videoSvhsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_RGB:                videoRgbNr++;                switch (videoRgbNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_YRYBY:                videoYrYbYNr++;                switch (videoYrYbYNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SerialDigital:              case PhysicalConnectorType.Video_ParallelDigital:                videoHdmiNr++;                switch (videoHdmiNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                    break;                }                break;            }
Magic Number,TvLibrary.Implementations.Analog,AnalogScanning,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\Analog\AnalogScanning.cs,Scan,The following statement contains a magic number: _event.WaitOne(settings.TimeOutAnalog * 1000' true);
Magic Number,TvLibrary.Implementations.Analog,AnalogScanning,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\Analog\AnalogScanning.cs,Scan,The following statement contains a magic number: k < (char)32 || k > (char)127
Magic Number,TvLibrary.Implementations.Analog,AnalogScanning,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\Analog\AnalogScanning.cs,Scan,The following statement contains a magic number: k < (char)32 || k > (char)127
Magic Number,TvLibrary.Implementations.Analog.QualityControl,BaseControl,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\QualityControl\BaseControl.cs,CalcQualityBitrate,The following statement contains a magic number: quality = 100;
Magic Number,TvLibrary.Implementations.Analog.QualityControl,BaseControl,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\QualityControl\BaseControl.cs,CalcQualityBitrate,The following statement contains a magic number: quality > 100
Magic Number,TvLibrary.Implementations.Analog.QualityControl,BaseControl,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\QualityControl\BaseControl.cs,CalcQualityBitrate,The following statement contains a magic number: quality == 100
Magic Number,TvLibrary.Implementations.Analog.QualityControl,BaseControl,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\QualityControl\BaseControl.cs,CalcQualityBitrate,The following statement contains a magic number: int targetquality = valMin + (int)(delta * quality / 100);
Magic Number,TvLibrary.Implementations.Analog.QualityControl,BaseControl,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\QualityControl\BaseControl.cs,ApplyQualityBitRate,The following statement contains a magic number: switch (_qualityType)              {                case QualityType.Custom:                  int qualityToSet = _configuration.CustomQualityValue;                  Log.Log.Info("analog: Encoder custom quality:{0}"' qualityToSet);                  newBitrate = CalcQualityBitrate(qualityToSet' valMin' valMax' valStepDelta);                  break;                case QualityType.Portable:                  newBitrate = CalcQualityBitrate(20' valMin' valMax' valStepDelta);                  break;                case QualityType.Low:                  newBitrate = CalcQualityBitrate(33' valMin' valMax' valStepDelta);                  break;                case QualityType.Medium:                  newBitrate = CalcQualityBitrate(66' valMin' valMax' valStepDelta);                  break;                case QualityType.High:                  newBitrate = CalcQualityBitrate(100' valMin' valMax' valStepDelta);                  break;                case QualityType.Default:                  object qualityObject;                  GetDefaultValue(PropSetID.ENCAPIPARAM_BitRate' out qualityObject);                  newBitrate = Marshal.ReadInt32(qualityObject' 0);                  break;                default:                  object qualityObject2;                  GetDefaultValue(PropSetID.ENCAPIPARAM_BitRate' out qualityObject2);                  newBitrate = Marshal.ReadInt32(qualityObject2' 0);                  break;              }
Magic Number,TvLibrary.Implementations.Analog.QualityControl,BaseControl,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\QualityControl\BaseControl.cs,ApplyQualityBitRate,The following statement contains a magic number: switch (_qualityType)              {                case QualityType.Custom:                  int qualityToSet = _configuration.CustomQualityValue;                  Log.Log.Info("analog: Encoder custom quality:{0}"' qualityToSet);                  newBitrate = CalcQualityBitrate(qualityToSet' valMin' valMax' valStepDelta);                  break;                case QualityType.Portable:                  newBitrate = CalcQualityBitrate(20' valMin' valMax' valStepDelta);                  break;                case QualityType.Low:                  newBitrate = CalcQualityBitrate(33' valMin' valMax' valStepDelta);                  break;                case QualityType.Medium:                  newBitrate = CalcQualityBitrate(66' valMin' valMax' valStepDelta);                  break;                case QualityType.High:                  newBitrate = CalcQualityBitrate(100' valMin' valMax' valStepDelta);                  break;                case QualityType.Default:                  object qualityObject;                  GetDefaultValue(PropSetID.ENCAPIPARAM_BitRate' out qualityObject);                  newBitrate = Marshal.ReadInt32(qualityObject' 0);                  break;                default:                  object qualityObject2;                  GetDefaultValue(PropSetID.ENCAPIPARAM_BitRate' out qualityObject2);                  newBitrate = Marshal.ReadInt32(qualityObject2' 0);                  break;              }
Magic Number,TvLibrary.Implementations.Analog.QualityControl,BaseControl,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\QualityControl\BaseControl.cs,ApplyQualityBitRate,The following statement contains a magic number: switch (_qualityType)              {                case QualityType.Custom:                  int qualityToSet = _configuration.CustomQualityValue;                  Log.Log.Info("analog: Encoder custom quality:{0}"' qualityToSet);                  newBitrate = CalcQualityBitrate(qualityToSet' valMin' valMax' valStepDelta);                  break;                case QualityType.Portable:                  newBitrate = CalcQualityBitrate(20' valMin' valMax' valStepDelta);                  break;                case QualityType.Low:                  newBitrate = CalcQualityBitrate(33' valMin' valMax' valStepDelta);                  break;                case QualityType.Medium:                  newBitrate = CalcQualityBitrate(66' valMin' valMax' valStepDelta);                  break;                case QualityType.High:                  newBitrate = CalcQualityBitrate(100' valMin' valMax' valStepDelta);                  break;                case QualityType.Default:                  object qualityObject;                  GetDefaultValue(PropSetID.ENCAPIPARAM_BitRate' out qualityObject);                  newBitrate = Marshal.ReadInt32(qualityObject' 0);                  break;                default:                  object qualityObject2;                  GetDefaultValue(PropSetID.ENCAPIPARAM_BitRate' out qualityObject2);                  newBitrate = Marshal.ReadInt32(qualityObject2' 0);                  break;              }
Magic Number,TvLibrary.Implementations.Analog.QualityControl,BaseControl,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\QualityControl\BaseControl.cs,ApplyQualityBitRate,The following statement contains a magic number: switch (_qualityType)              {                case QualityType.Custom:                  int qualityToSet = _configuration.CustomQualityValue;                  Log.Log.Info("analog: Encoder custom quality:{0}"' qualityToSet);                  newBitrate = CalcQualityBitrate(qualityToSet' valMin' valMax' valStepDelta);                  break;                case QualityType.Portable:                  newBitrate = CalcQualityBitrate(20' valMin' valMax' valStepDelta);                  break;                case QualityType.Low:                  newBitrate = CalcQualityBitrate(33' valMin' valMax' valStepDelta);                  break;                case QualityType.Medium:                  newBitrate = CalcQualityBitrate(66' valMin' valMax' valStepDelta);                  break;                case QualityType.High:                  newBitrate = CalcQualityBitrate(100' valMin' valMax' valStepDelta);                  break;                case QualityType.Default:                  object qualityObject;                  GetDefaultValue(PropSetID.ENCAPIPARAM_BitRate' out qualityObject);                  newBitrate = Marshal.ReadInt32(qualityObject' 0);                  break;                default:                  object qualityObject2;                  GetDefaultValue(PropSetID.ENCAPIPARAM_BitRate' out qualityObject2);                  newBitrate = Marshal.ReadInt32(qualityObject2' 0);                  break;              }
Magic Number,TvLibrary.Implementations.Analog.QualityControl,BaseControl,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\QualityControl\BaseControl.cs,ApplyQualityBitRate,The following statement contains a magic number: switch (_qualityType)                {                  case QualityType.Custom:                    int qualityToSet = _configuration.CustomPeakQualityValue;                    Log.Log.Info("analog: Encoder custom quality:{0}"' qualityToSet);                    newBitrate = CalcQualityBitrate(qualityToSet' valMin' valMax' valStepDelta);                    break;                  case QualityType.Portable:                    newBitrate = CalcQualityBitrate(45' valMin' valMax' valStepDelta);                    break;                  case QualityType.Low:                    newBitrate = CalcQualityBitrate(55' valMin' valMax' valStepDelta);                    break;                  case QualityType.Medium:                    newBitrate = CalcQualityBitrate(88' valMin' valMax' valStepDelta);                    break;                  case QualityType.High:                    newBitrate = CalcQualityBitrate(100' valMin' valMax' valStepDelta);                    break;                  case QualityType.Default:                    object qualityObject;                    GetDefaultValue(PropSetID.ENCAPIPARAM_PeakBitRate' out qualityObject);                    newBitrate = Marshal.ReadInt32(qualityObject' 0);                    break;                  default:                    object qualityObject2;                    GetDefaultValue(PropSetID.ENCAPIPARAM_PeakBitRate' out qualityObject2);                    newBitrate = Marshal.ReadInt32(qualityObject2' 0);                    break;                }
Magic Number,TvLibrary.Implementations.Analog.QualityControl,BaseControl,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\QualityControl\BaseControl.cs,ApplyQualityBitRate,The following statement contains a magic number: switch (_qualityType)                {                  case QualityType.Custom:                    int qualityToSet = _configuration.CustomPeakQualityValue;                    Log.Log.Info("analog: Encoder custom quality:{0}"' qualityToSet);                    newBitrate = CalcQualityBitrate(qualityToSet' valMin' valMax' valStepDelta);                    break;                  case QualityType.Portable:                    newBitrate = CalcQualityBitrate(45' valMin' valMax' valStepDelta);                    break;                  case QualityType.Low:                    newBitrate = CalcQualityBitrate(55' valMin' valMax' valStepDelta);                    break;                  case QualityType.Medium:                    newBitrate = CalcQualityBitrate(88' valMin' valMax' valStepDelta);                    break;                  case QualityType.High:                    newBitrate = CalcQualityBitrate(100' valMin' valMax' valStepDelta);                    break;                  case QualityType.Default:                    object qualityObject;                    GetDefaultValue(PropSetID.ENCAPIPARAM_PeakBitRate' out qualityObject);                    newBitrate = Marshal.ReadInt32(qualityObject' 0);                    break;                  default:                    object qualityObject2;                    GetDefaultValue(PropSetID.ENCAPIPARAM_PeakBitRate' out qualityObject2);                    newBitrate = Marshal.ReadInt32(qualityObject2' 0);                    break;                }
Magic Number,TvLibrary.Implementations.Analog.QualityControl,BaseControl,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\QualityControl\BaseControl.cs,ApplyQualityBitRate,The following statement contains a magic number: switch (_qualityType)                {                  case QualityType.Custom:                    int qualityToSet = _configuration.CustomPeakQualityValue;                    Log.Log.Info("analog: Encoder custom quality:{0}"' qualityToSet);                    newBitrate = CalcQualityBitrate(qualityToSet' valMin' valMax' valStepDelta);                    break;                  case QualityType.Portable:                    newBitrate = CalcQualityBitrate(45' valMin' valMax' valStepDelta);                    break;                  case QualityType.Low:                    newBitrate = CalcQualityBitrate(55' valMin' valMax' valStepDelta);                    break;                  case QualityType.Medium:                    newBitrate = CalcQualityBitrate(88' valMin' valMax' valStepDelta);                    break;                  case QualityType.High:                    newBitrate = CalcQualityBitrate(100' valMin' valMax' valStepDelta);                    break;                  case QualityType.Default:                    object qualityObject;                    GetDefaultValue(PropSetID.ENCAPIPARAM_PeakBitRate' out qualityObject);                    newBitrate = Marshal.ReadInt32(qualityObject' 0);                    break;                  default:                    object qualityObject2;                    GetDefaultValue(PropSetID.ENCAPIPARAM_PeakBitRate' out qualityObject2);                    newBitrate = Marshal.ReadInt32(qualityObject2' 0);                    break;                }
Magic Number,TvLibrary.Implementations.Analog.QualityControl,BaseControl,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\QualityControl\BaseControl.cs,ApplyQualityBitRate,The following statement contains a magic number: switch (_qualityType)                {                  case QualityType.Custom:                    int qualityToSet = _configuration.CustomPeakQualityValue;                    Log.Log.Info("analog: Encoder custom quality:{0}"' qualityToSet);                    newBitrate = CalcQualityBitrate(qualityToSet' valMin' valMax' valStepDelta);                    break;                  case QualityType.Portable:                    newBitrate = CalcQualityBitrate(45' valMin' valMax' valStepDelta);                    break;                  case QualityType.Low:                    newBitrate = CalcQualityBitrate(55' valMin' valMax' valStepDelta);                    break;                  case QualityType.Medium:                    newBitrate = CalcQualityBitrate(88' valMin' valMax' valStepDelta);                    break;                  case QualityType.High:                    newBitrate = CalcQualityBitrate(100' valMin' valMax' valStepDelta);                    break;                  case QualityType.Default:                    object qualityObject;                    GetDefaultValue(PropSetID.ENCAPIPARAM_PeakBitRate' out qualityObject);                    newBitrate = Marshal.ReadInt32(qualityObject' 0);                    break;                  default:                    object qualityObject2;                    GetDefaultValue(PropSetID.ENCAPIPARAM_PeakBitRate' out qualityObject2);                    newBitrate = Marshal.ReadInt32(qualityObject2' 0);                    break;                }
Magic Number,TvLibrary.Implementations,BaseSubChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\BaseSubChannel.cs,OnTeletextReceived,The following statement contains a magic number: IntPtr packetPtr = new IntPtr(data.ToInt32() + i * 188);
Magic Number,TvLibrary.Implementations,TvCardBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\TvCardBase.cs,GraphRunning,The following statement contains a magic number: ((IMediaControl)_graphBuilder).GetState(10' out state);
Magic Number,TvLibrary.Implementations,DeviceDetector,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DeviceDetector.cs,Start,The following statement contains a magic number: SSDPClientController.EXPIRATION_TIMER_INTERVAL = 60000;
Magic Number,TvLibrary.Implementations,DeviceDetector,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DeviceDetector.cs,OnSystemDeviceConnectedOrDisconnected,The following statement contains a magic number: (DateTime.Now - _previousSystemDeviceChange).TotalMilliseconds < 10000
Magic Number,TvLibrary.Implementations,DeviceDetector,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DeviceDetector.cs,OnSystemDeviceConnectedOrDisconnected,The following statement contains a magic number: Thread.Sleep(delayDetect * 1000);
Magic Number,TvLibrary.Implementations,DeviceDetector,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DeviceDetector.cs,InitBdaDetectionGraph,The following statement contains a magic number: ((IATSCTuningSpace)tuningSpace).put_MaxChannel(10000);
Magic Number,TvLibrary.Implementations,DeviceDetector,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DeviceDetector.cs,InitBdaDetectionGraph,The following statement contains a magic number: ((IATSCTuningSpace)tuningSpace).put_MaxMinorChannel(10000);
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: section.Length < 18
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: byte tableId = section[2];
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: bool sectionSyntaxIndicator = ((section[3] & 0x80) != 0);
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: bool privateIndicator = ((section[3] & 0x40) != 0);
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: int sectionLength = ((section[3] & 0x0f) << 8) + section[4];
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: int sectionLength = ((section[3] & 0x0f) << 8) + section[4];
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: int sectionLength = ((section[3] & 0x0f) << 8) + section[4];
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: section.Length != 2 + sectionLength + 3
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: section.Length != 2 + sectionLength + 3
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: int transportStreamId = (section[5] << 8) + section[6];
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: int transportStreamId = (section[5] << 8) + section[6];
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: int transportStreamId = (section[5] << 8) + section[6];
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: int versionNumber = ((section[7] >> 1) & 0x1f);
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: bool currentNextIndicator = ((section[7] & 0x80) != 0);
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: byte sectionNumber = section[8];
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: byte lastSectionNumber = section[9];
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: int sectionKey = (tableId << 8) + sectionNumber;
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: _unseenSections.Add((tableId << 8) + s);
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: versionNumber > _currentVersion || (_currentVersion == 31 && versionNumber < _currentVersion)
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: byte protocolVersion = section[10];
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: int numChannelsInSection = section[11];
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: int pointer = 12;
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: int endOfSection = section.Length - 4;
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: pointer + 32 + 2 > endOfSection
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: pointer + 32 + 2 > endOfSection
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: string shortName = System.Text.Encoding.Unicode.GetString(section' pointer' 14);
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: pointer += 14;
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: int majorChannelNumber = ((section[pointer] & 0x0f) << 6) + (section[pointer + 1] >> 2);
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: int majorChannelNumber = ((section[pointer] & 0x0f) << 6) + (section[pointer + 1] >> 2);
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: int minorChannelNumber = ((section[pointer] & 0x03) << 8) + section[pointer + 1];
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: pointer += 2;
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: majorChannelNumber = ((majorChannelNumber & 0x0f) << 10) + minorChannelNumber;
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: carrierFrequency = carrierFrequency << 8;
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: b < 4
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: int channelTsid = (section[pointer] << 8) + section[pointer + 1];
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: pointer += 2;
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: int programNumber = (section[pointer] << 8) + section[pointer + 1];
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: pointer += 2;
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: EtmLocation etmLocation = (EtmLocation)(section[pointer] >> 6);
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: int pathSelect = ((section[pointer] & 0x08) >> 3);
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: int sourceId = (section[pointer] << 8) + section[pointer + 1];
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: pointer += 2;
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: int descriptorsLength = ((section[pointer] & 0x03) << 8) + section[pointer + 1];
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: pointer += 2;
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: int additionalDescriptorsLength = ((section[pointer] & 0x03) << 8) + section[pointer + 1];
Magic Number,TvLibrary.Implementations.Dri.Parser,LvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\LvctParser.cs,Decode,The following statement contains a magic number: pointer += 2;
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: section.Length < 19
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: byte tableId = section[2];
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: bool sectionSyntaxIndicator = ((section[3] & 0x80) != 0);
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: bool privateIndicator = ((section[3] & 0x40) != 0);
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: int sectionLength = ((section[3] & 0x0f) << 8) + section[4];
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: int sectionLength = ((section[3] & 0x0f) << 8) + section[4];
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: int sectionLength = ((section[3] & 0x0f) << 8) + section[4];
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: section.Length != 2 + sectionLength + 3
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: section.Length != 2 + sectionLength + 3
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: int mapId = (section[5] << 8) + section[6];
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: int mapId = (section[5] << 8) + section[6];
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: int mapId = (section[5] << 8) + section[6];
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: int versionNumber = ((section[7] >> 1) & 0x1f);
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: bool currentNextIndicator = ((section[7] & 0x80) != 0);
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: byte sectionNumber = section[8];
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: byte lastSectionNumber = section[9];
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: versionNumber > _currentVersion || (_currentVersion == 31 && versionNumber < _currentVersion)
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: byte protocolVersion = section[10];
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: int tablesDefined = (section[11] << 8) + section[12];
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: int tablesDefined = (section[11] << 8) + section[12];
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: int tablesDefined = (section[11] << 8) + section[12];
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: int pointer = 13;
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: int endOfSection = section.Length - 4;
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: pointer + 11 + 2 > endOfSection
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: pointer + 11 + 2 > endOfSection
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: int tableType = (section[pointer] << 8) + section[pointer + 1];
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: pointer += 2;
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: int tableTypePid = ((section[pointer] & 0x1f) << 8) + section[pointer + 1];
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: pointer += 2;
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: numberBytes = numberBytes << 8;
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: b < 4
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: int tableTypeDescriptorsLength = ((section[pointer] & 0x0f) << 8) + section[pointer + 1];
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: pointer += 2;
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: int descriptorsLength = ((section[pointer] & 0x0f) << 8) + section[pointer + 1];
Magic Number,TvLibrary.Implementations.Dri.Parser,MgtParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\MgtParser.cs,Decode,The following statement contains a magic number: pointer += 2;
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,Decode,The following statement contains a magic number: section.Length < 13
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,Decode,The following statement contains a magic number: byte tableId = section[2];
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,Decode,The following statement contains a magic number: int sectionLength = ((section[3] & 0xf) << 8) + section[4];
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,Decode,The following statement contains a magic number: int sectionLength = ((section[3] & 0xf) << 8) + section[4];
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,Decode,The following statement contains a magic number: int sectionLength = ((section[3] & 0xf) << 8) + section[4];
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,Decode,The following statement contains a magic number: section.Length != 2 + sectionLength + 3
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,Decode,The following statement contains a magic number: section.Length != 2 + sectionLength + 3
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,Decode,The following statement contains a magic number: int protocolVersion = (section[5] & 0x1f);
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,Decode,The following statement contains a magic number: byte firstIndex = section[6];
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,Decode,The following statement contains a magic number: byte numberOfRecords = section[7];
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,Decode,The following statement contains a magic number: AtscTransmissionMedium transmissionMedium = (AtscTransmissionMedium)(section[8] >> 4);
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,Decode,The following statement contains a magic number: AtscTransmissionMedium transmissionMedium = (AtscTransmissionMedium)(section[8] >> 4);
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,Decode,The following statement contains a magic number: TableSubtype tableSubtype = (TableSubtype)(section[8] & 0x0f);
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,Decode,The following statement contains a magic number: int pointer = 9;
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,Decode,The following statement contains a magic number: int endOfSection = section.Length - 4;
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,Decode,The following statement contains a magic number: pointer + 2 > endOfSection
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeCarrierDefinition,The following statement contains a magic number: pointer + 5 > endOfSection
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeCarrierDefinition,The following statement contains a magic number: int spacingUnit = 10;
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeCarrierDefinition,The following statement contains a magic number: spacingUnit = 125;
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeCarrierDefinition,The following statement contains a magic number: int frequencySpacing = spacingUnit * (((section[pointer] & 0x3f) << 8) + section[pointer + 1]);
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeCarrierDefinition,The following statement contains a magic number: pointer += 2;
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeCarrierDefinition,The following statement contains a magic number: int frequencyUnit = 10;
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeCarrierDefinition,The following statement contains a magic number: frequencyUnit = 125;
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeCarrierDefinition,The following statement contains a magic number: int firstCarrierFrequency = frequencyUnit * (((section[pointer] & 0x7f) << 8) + section[pointer + 1]);
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeCarrierDefinition,The following statement contains a magic number: pointer += 2;
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: pointer + 6 > endOfSection
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: TransmissionSystem transmissionSystem = (TransmissionSystem)(section[pointer] >> 4);
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: switch (section[pointer] & 0x0f)        {          case 0:            innerCodingMode = BinaryConvolutionCodeRate.Rate5_11;            break;          case 1:            innerCodingMode = BinaryConvolutionCodeRate.Rate1_2;            break;          case 3:            innerCodingMode = BinaryConvolutionCodeRate.Rate3_5;            break;          case 5:            innerCodingMode = BinaryConvolutionCodeRate.Rate2_3;            break;          case 7:            innerCodingMode = BinaryConvolutionCodeRate.Rate3_4;            break;          case 8:            innerCodingMode = BinaryConvolutionCodeRate.Rate4_5;            break;          case 9:            innerCodingMode = BinaryConvolutionCodeRate.Rate5_6;            break;          case 11:            innerCodingMode = BinaryConvolutionCodeRate.Rate7_8;            break;          case 15:            // concatenated coding not used            innerCodingMode = BinaryConvolutionCodeRate.RateNotSet;            break;        }
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: switch (section[pointer] & 0x0f)        {          case 0:            innerCodingMode = BinaryConvolutionCodeRate.Rate5_11;            break;          case 1:            innerCodingMode = BinaryConvolutionCodeRate.Rate1_2;            break;          case 3:            innerCodingMode = BinaryConvolutionCodeRate.Rate3_5;            break;          case 5:            innerCodingMode = BinaryConvolutionCodeRate.Rate2_3;            break;          case 7:            innerCodingMode = BinaryConvolutionCodeRate.Rate3_4;            break;          case 8:            innerCodingMode = BinaryConvolutionCodeRate.Rate4_5;            break;          case 9:            innerCodingMode = BinaryConvolutionCodeRate.Rate5_6;            break;          case 11:            innerCodingMode = BinaryConvolutionCodeRate.Rate7_8;            break;          case 15:            // concatenated coding not used            innerCodingMode = BinaryConvolutionCodeRate.RateNotSet;            break;        }
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: switch (section[pointer] & 0x0f)        {          case 0:            innerCodingMode = BinaryConvolutionCodeRate.Rate5_11;            break;          case 1:            innerCodingMode = BinaryConvolutionCodeRate.Rate1_2;            break;          case 3:            innerCodingMode = BinaryConvolutionCodeRate.Rate3_5;            break;          case 5:            innerCodingMode = BinaryConvolutionCodeRate.Rate2_3;            break;          case 7:            innerCodingMode = BinaryConvolutionCodeRate.Rate3_4;            break;          case 8:            innerCodingMode = BinaryConvolutionCodeRate.Rate4_5;            break;          case 9:            innerCodingMode = BinaryConvolutionCodeRate.Rate5_6;            break;          case 11:            innerCodingMode = BinaryConvolutionCodeRate.Rate7_8;            break;          case 15:            // concatenated coding not used            innerCodingMode = BinaryConvolutionCodeRate.RateNotSet;            break;        }
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: switch (section[pointer] & 0x0f)        {          case 0:            innerCodingMode = BinaryConvolutionCodeRate.Rate5_11;            break;          case 1:            innerCodingMode = BinaryConvolutionCodeRate.Rate1_2;            break;          case 3:            innerCodingMode = BinaryConvolutionCodeRate.Rate3_5;            break;          case 5:            innerCodingMode = BinaryConvolutionCodeRate.Rate2_3;            break;          case 7:            innerCodingMode = BinaryConvolutionCodeRate.Rate3_4;            break;          case 8:            innerCodingMode = BinaryConvolutionCodeRate.Rate4_5;            break;          case 9:            innerCodingMode = BinaryConvolutionCodeRate.Rate5_6;            break;          case 11:            innerCodingMode = BinaryConvolutionCodeRate.Rate7_8;            break;          case 15:            // concatenated coding not used            innerCodingMode = BinaryConvolutionCodeRate.RateNotSet;            break;        }
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: switch (section[pointer] & 0x0f)        {          case 0:            innerCodingMode = BinaryConvolutionCodeRate.Rate5_11;            break;          case 1:            innerCodingMode = BinaryConvolutionCodeRate.Rate1_2;            break;          case 3:            innerCodingMode = BinaryConvolutionCodeRate.Rate3_5;            break;          case 5:            innerCodingMode = BinaryConvolutionCodeRate.Rate2_3;            break;          case 7:            innerCodingMode = BinaryConvolutionCodeRate.Rate3_4;            break;          case 8:            innerCodingMode = BinaryConvolutionCodeRate.Rate4_5;            break;          case 9:            innerCodingMode = BinaryConvolutionCodeRate.Rate5_6;            break;          case 11:            innerCodingMode = BinaryConvolutionCodeRate.Rate7_8;            break;          case 15:            // concatenated coding not used            innerCodingMode = BinaryConvolutionCodeRate.RateNotSet;            break;        }
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: switch (section[pointer] & 0x0f)        {          case 0:            innerCodingMode = BinaryConvolutionCodeRate.Rate5_11;            break;          case 1:            innerCodingMode = BinaryConvolutionCodeRate.Rate1_2;            break;          case 3:            innerCodingMode = BinaryConvolutionCodeRate.Rate3_5;            break;          case 5:            innerCodingMode = BinaryConvolutionCodeRate.Rate2_3;            break;          case 7:            innerCodingMode = BinaryConvolutionCodeRate.Rate3_4;            break;          case 8:            innerCodingMode = BinaryConvolutionCodeRate.Rate4_5;            break;          case 9:            innerCodingMode = BinaryConvolutionCodeRate.Rate5_6;            break;          case 11:            innerCodingMode = BinaryConvolutionCodeRate.Rate7_8;            break;          case 15:            // concatenated coding not used            innerCodingMode = BinaryConvolutionCodeRate.RateNotSet;            break;        }
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: switch (section[pointer] & 0x0f)        {          case 0:            innerCodingMode = BinaryConvolutionCodeRate.Rate5_11;            break;          case 1:            innerCodingMode = BinaryConvolutionCodeRate.Rate1_2;            break;          case 3:            innerCodingMode = BinaryConvolutionCodeRate.Rate3_5;            break;          case 5:            innerCodingMode = BinaryConvolutionCodeRate.Rate2_3;            break;          case 7:            innerCodingMode = BinaryConvolutionCodeRate.Rate3_4;            break;          case 8:            innerCodingMode = BinaryConvolutionCodeRate.Rate4_5;            break;          case 9:            innerCodingMode = BinaryConvolutionCodeRate.Rate5_6;            break;          case 11:            innerCodingMode = BinaryConvolutionCodeRate.Rate7_8;            break;          case 15:            // concatenated coding not used            innerCodingMode = BinaryConvolutionCodeRate.RateNotSet;            break;        }
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: switch (section[pointer] & 0x1f)        {          case 1:            modulationFormat = ModulationType.ModQpsk;            break;          case 2:            modulationFormat = ModulationType.ModBpsk;            break;          case 3:            modulationFormat = ModulationType.ModOqpsk;            break;          case 4:            modulationFormat = ModulationType.Mod8Vsb;            break;          case 5:            modulationFormat = ModulationType.Mod16Vsb;            break;          case 6:            modulationFormat = ModulationType.Mod16Qam;            break;          case 7:            modulationFormat = ModulationType.Mod32Qam;            break;          case 8:            modulationFormat = ModulationType.Mod64Qam;            break;          case 9:            modulationFormat = ModulationType.Mod80Qam;            break;          case 10:            modulationFormat = ModulationType.Mod96Qam;            break;          case 11:            modulationFormat = ModulationType.Mod112Qam;            break;          case 12:            modulationFormat = ModulationType.Mod128Qam;            break;          case 13:            modulationFormat = ModulationType.Mod160Qam;            break;          case 14:            modulationFormat = ModulationType.Mod192Qam;            break;          case 15:            modulationFormat = ModulationType.Mod224Qam;            break;          case 16:            modulationFormat = ModulationType.Mod256Qam;            break;          case 17:            modulationFormat = ModulationType.Mod320Qam;            break;          case 18:            modulationFormat = ModulationType.Mod384Qam;            break;          case 19:            modulationFormat = ModulationType.Mod448Qam;            break;          case 20:            modulationFormat = ModulationType.Mod512Qam;            break;          case 21:            modulationFormat = ModulationType.Mod640Qam;            break;          case 22:            modulationFormat = ModulationType.Mod768Qam;            break;          case 23:            modulationFormat = ModulationType.Mod896Qam;            break;          case 24:            modulationFormat = ModulationType.Mod1024Qam;            break;        }
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: switch (section[pointer] & 0x1f)        {          case 1:            modulationFormat = ModulationType.ModQpsk;            break;          case 2:            modulationFormat = ModulationType.ModBpsk;            break;          case 3:            modulationFormat = ModulationType.ModOqpsk;            break;          case 4:            modulationFormat = ModulationType.Mod8Vsb;            break;          case 5:            modulationFormat = ModulationType.Mod16Vsb;            break;          case 6:            modulationFormat = ModulationType.Mod16Qam;            break;          case 7:            modulationFormat = ModulationType.Mod32Qam;            break;          case 8:            modulationFormat = ModulationType.Mod64Qam;            break;          case 9:            modulationFormat = ModulationType.Mod80Qam;            break;          case 10:            modulationFormat = ModulationType.Mod96Qam;            break;          case 11:            modulationFormat = ModulationType.Mod112Qam;            break;          case 12:            modulationFormat = ModulationType.Mod128Qam;            break;          case 13:            modulationFormat = ModulationType.Mod160Qam;            break;          case 14:            modulationFormat = ModulationType.Mod192Qam;            break;          case 15:            modulationFormat = ModulationType.Mod224Qam;            break;          case 16:            modulationFormat = ModulationType.Mod256Qam;            break;          case 17:            modulationFormat = ModulationType.Mod320Qam;            break;          case 18:            modulationFormat = ModulationType.Mod384Qam;            break;          case 19:            modulationFormat = ModulationType.Mod448Qam;            break;          case 20:            modulationFormat = ModulationType.Mod512Qam;            break;          case 21:            modulationFormat = ModulationType.Mod640Qam;            break;          case 22:            modulationFormat = ModulationType.Mod768Qam;            break;          case 23:            modulationFormat = ModulationType.Mod896Qam;            break;          case 24:            modulationFormat = ModulationType.Mod1024Qam;            break;        }
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: switch (section[pointer] & 0x1f)        {          case 1:            modulationFormat = ModulationType.ModQpsk;            break;          case 2:            modulationFormat = ModulationType.ModBpsk;            break;          case 3:            modulationFormat = ModulationType.ModOqpsk;            break;          case 4:            modulationFormat = ModulationType.Mod8Vsb;            break;          case 5:            modulationFormat = ModulationType.Mod16Vsb;            break;          case 6:            modulationFormat = ModulationType.Mod16Qam;            break;          case 7:            modulationFormat = ModulationType.Mod32Qam;            break;          case 8:            modulationFormat = ModulationType.Mod64Qam;            break;          case 9:            modulationFormat = ModulationType.Mod80Qam;            break;          case 10:            modulationFormat = ModulationType.Mod96Qam;            break;          case 11:            modulationFormat = ModulationType.Mod112Qam;            break;          case 12:            modulationFormat = ModulationType.Mod128Qam;            break;          case 13:            modulationFormat = ModulationType.Mod160Qam;            break;          case 14:            modulationFormat = ModulationType.Mod192Qam;            break;          case 15:            modulationFormat = ModulationType.Mod224Qam;            break;          case 16:            modulationFormat = ModulationType.Mod256Qam;            break;          case 17:            modulationFormat = ModulationType.Mod320Qam;            break;          case 18:            modulationFormat = ModulationType.Mod384Qam;            break;          case 19:            modulationFormat = ModulationType.Mod448Qam;            break;          case 20:            modulationFormat = ModulationType.Mod512Qam;            break;          case 21:            modulationFormat = ModulationType.Mod640Qam;            break;          case 22:            modulationFormat = ModulationType.Mod768Qam;            break;          case 23:            modulationFormat = ModulationType.Mod896Qam;            break;          case 24:            modulationFormat = ModulationType.Mod1024Qam;            break;        }
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: switch (section[pointer] & 0x1f)        {          case 1:            modulationFormat = ModulationType.ModQpsk;            break;          case 2:            modulationFormat = ModulationType.ModBpsk;            break;          case 3:            modulationFormat = ModulationType.ModOqpsk;            break;          case 4:            modulationFormat = ModulationType.Mod8Vsb;            break;          case 5:            modulationFormat = ModulationType.Mod16Vsb;            break;          case 6:            modulationFormat = ModulationType.Mod16Qam;            break;          case 7:            modulationFormat = ModulationType.Mod32Qam;            break;          case 8:            modulationFormat = ModulationType.Mod64Qam;            break;          case 9:            modulationFormat = ModulationType.Mod80Qam;            break;          case 10:            modulationFormat = ModulationType.Mod96Qam;            break;          case 11:            modulationFormat = ModulationType.Mod112Qam;            break;          case 12:            modulationFormat = ModulationType.Mod128Qam;            break;          case 13:            modulationFormat = ModulationType.Mod160Qam;            break;          case 14:            modulationFormat = ModulationType.Mod192Qam;            break;          case 15:            modulationFormat = ModulationType.Mod224Qam;            break;          case 16:            modulationFormat = ModulationType.Mod256Qam;            break;          case 17:            modulationFormat = ModulationType.Mod320Qam;            break;          case 18:            modulationFormat = ModulationType.Mod384Qam;            break;          case 19:            modulationFormat = ModulationType.Mod448Qam;            break;          case 20:            modulationFormat = ModulationType.Mod512Qam;            break;          case 21:            modulationFormat = ModulationType.Mod640Qam;            break;          case 22:            modulationFormat = ModulationType.Mod768Qam;            break;          case 23:            modulationFormat = ModulationType.Mod896Qam;            break;          case 24:            modulationFormat = ModulationType.Mod1024Qam;            break;        }
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: switch (section[pointer] & 0x1f)        {          case 1:            modulationFormat = ModulationType.ModQpsk;            break;          case 2:            modulationFormat = ModulationType.ModBpsk;            break;          case 3:            modulationFormat = ModulationType.ModOqpsk;            break;          case 4:            modulationFormat = ModulationType.Mod8Vsb;            break;          case 5:            modulationFormat = ModulationType.Mod16Vsb;            break;          case 6:            modulationFormat = ModulationType.Mod16Qam;            break;          case 7:            modulationFormat = ModulationType.Mod32Qam;            break;          case 8:            modulationFormat = ModulationType.Mod64Qam;            break;          case 9:            modulationFormat = ModulationType.Mod80Qam;            break;          case 10:            modulationFormat = ModulationType.Mod96Qam;            break;          case 11:            modulationFormat = ModulationType.Mod112Qam;            break;          case 12:            modulationFormat = ModulationType.Mod128Qam;            break;          case 13:            modulationFormat = ModulationType.Mod160Qam;            break;          case 14:            modulationFormat = ModulationType.Mod192Qam;            break;          case 15:            modulationFormat = ModulationType.Mod224Qam;            break;          case 16:            modulationFormat = ModulationType.Mod256Qam;            break;          case 17:            modulationFormat = ModulationType.Mod320Qam;            break;          case 18:            modulationFormat = ModulationType.Mod384Qam;            break;          case 19:            modulationFormat = ModulationType.Mod448Qam;            break;          case 20:            modulationFormat = ModulationType.Mod512Qam;            break;          case 21:            modulationFormat = ModulationType.Mod640Qam;            break;          case 22:            modulationFormat = ModulationType.Mod768Qam;            break;          case 23:            modulationFormat = ModulationType.Mod896Qam;            break;          case 24:            modulationFormat = ModulationType.Mod1024Qam;            break;        }
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: switch (section[pointer] & 0x1f)        {          case 1:            modulationFormat = ModulationType.ModQpsk;            break;          case 2:            modulationFormat = ModulationType.ModBpsk;            break;          case 3:            modulationFormat = ModulationType.ModOqpsk;            break;          case 4:            modulationFormat = ModulationType.Mod8Vsb;            break;          case 5:            modulationFormat = ModulationType.Mod16Vsb;            break;          case 6:            modulationFormat = ModulationType.Mod16Qam;            break;          case 7:            modulationFormat = ModulationType.Mod32Qam;            break;          case 8:            modulationFormat = ModulationType.Mod64Qam;            break;          case 9:            modulationFormat = ModulationType.Mod80Qam;            break;          case 10:            modulationFormat = ModulationType.Mod96Qam;            break;          case 11:            modulationFormat = ModulationType.Mod112Qam;            break;          case 12:            modulationFormat = ModulationType.Mod128Qam;            break;          case 13:            modulationFormat = ModulationType.Mod160Qam;            break;          case 14:            modulationFormat = ModulationType.Mod192Qam;            break;          case 15:            modulationFormat = ModulationType.Mod224Qam;            break;          case 16:            modulationFormat = ModulationType.Mod256Qam;            break;          case 17:            modulationFormat = ModulationType.Mod320Qam;            break;          case 18:            modulationFormat = ModulationType.Mod384Qam;            break;          case 19:            modulationFormat = ModulationType.Mod448Qam;            break;          case 20:            modulationFormat = ModulationType.Mod512Qam;            break;          case 21:            modulationFormat = ModulationType.Mod640Qam;            break;          case 22:            modulationFormat = ModulationType.Mod768Qam;            break;          case 23:            modulationFormat = ModulationType.Mod896Qam;            break;          case 24:            modulationFormat = ModulationType.Mod1024Qam;            break;        }
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: switch (section[pointer] & 0x1f)        {          case 1:            modulationFormat = ModulationType.ModQpsk;            break;          case 2:            modulationFormat = ModulationType.ModBpsk;            break;          case 3:            modulationFormat = ModulationType.ModOqpsk;            break;          case 4:            modulationFormat = ModulationType.Mod8Vsb;            break;          case 5:            modulationFormat = ModulationType.Mod16Vsb;            break;          case 6:            modulationFormat = ModulationType.Mod16Qam;            break;          case 7:            modulationFormat = ModulationType.Mod32Qam;            break;          case 8:            modulationFormat = ModulationType.Mod64Qam;            break;          case 9:            modulationFormat = ModulationType.Mod80Qam;            break;          case 10:            modulationFormat = ModulationType.Mod96Qam;            break;          case 11:            modulationFormat = ModulationType.Mod112Qam;            break;          case 12:            modulationFormat = ModulationType.Mod128Qam;            break;          case 13:            modulationFormat = ModulationType.Mod160Qam;            break;          case 14:            modulationFormat = ModulationType.Mod192Qam;            break;          case 15:            modulationFormat = ModulationType.Mod224Qam;            break;          case 16:            modulationFormat = ModulationType.Mod256Qam;            break;          case 17:            modulationFormat = ModulationType.Mod320Qam;            break;          case 18:            modulationFormat = ModulationType.Mod384Qam;            break;          case 19:            modulationFormat = ModulationType.Mod448Qam;            break;          case 20:            modulationFormat = ModulationType.Mod512Qam;            break;          case 21:            modulationFormat = ModulationType.Mod640Qam;            break;          case 22:            modulationFormat = ModulationType.Mod768Qam;            break;          case 23:            modulationFormat = ModulationType.Mod896Qam;            break;          case 24:            modulationFormat = ModulationType.Mod1024Qam;            break;        }
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: switch (section[pointer] & 0x1f)        {          case 1:            modulationFormat = ModulationType.ModQpsk;            break;          case 2:            modulationFormat = ModulationType.ModBpsk;            break;          case 3:            modulationFormat = ModulationType.ModOqpsk;            break;          case 4:            modulationFormat = ModulationType.Mod8Vsb;            break;          case 5:            modulationFormat = ModulationType.Mod16Vsb;            break;          case 6:            modulationFormat = ModulationType.Mod16Qam;            break;          case 7:            modulationFormat = ModulationType.Mod32Qam;            break;          case 8:            modulationFormat = ModulationType.Mod64Qam;            break;          case 9:            modulationFormat = ModulationType.Mod80Qam;            break;          case 10:            modulationFormat = ModulationType.Mod96Qam;            break;          case 11:            modulationFormat = ModulationType.Mod112Qam;            break;          case 12:            modulationFormat = ModulationType.Mod128Qam;            break;          case 13:            modulationFormat = ModulationType.Mod160Qam;            break;          case 14:            modulationFormat = ModulationType.Mod192Qam;            break;          case 15:            modulationFormat = ModulationType.Mod224Qam;            break;          case 16:            modulationFormat = ModulationType.Mod256Qam;            break;          case 17:            modulationFormat = ModulationType.Mod320Qam;            break;          case 18:            modulationFormat = ModulationType.Mod384Qam;            break;          case 19:            modulationFormat = ModulationType.Mod448Qam;            break;          case 20:            modulationFormat = ModulationType.Mod512Qam;            break;          case 21:            modulationFormat = ModulationType.Mod640Qam;            break;          case 22:            modulationFormat = ModulationType.Mod768Qam;            break;          case 23:            modulationFormat = ModulationType.Mod896Qam;            break;          case 24:            modulationFormat = ModulationType.Mod1024Qam;            break;        }
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: switch (section[pointer] & 0x1f)        {          case 1:            modulationFormat = ModulationType.ModQpsk;            break;          case 2:            modulationFormat = ModulationType.ModBpsk;            break;          case 3:            modulationFormat = ModulationType.ModOqpsk;            break;          case 4:            modulationFormat = ModulationType.Mod8Vsb;            break;          case 5:            modulationFormat = ModulationType.Mod16Vsb;            break;          case 6:            modulationFormat = ModulationType.Mod16Qam;            break;          case 7:            modulationFormat = ModulationType.Mod32Qam;            break;          case 8:            modulationFormat = ModulationType.Mod64Qam;            break;          case 9:            modulationFormat = ModulationType.Mod80Qam;            break;          case 10:            modulationFormat = ModulationType.Mod96Qam;            break;          case 11:            modulationFormat = ModulationType.Mod112Qam;            break;          case 12:            modulationFormat = ModulationType.Mod128Qam;            break;          case 13:            modulationFormat = ModulationType.Mod160Qam;            break;          case 14:            modulationFormat = ModulationType.Mod192Qam;            break;          case 15:            modulationFormat = ModulationType.Mod224Qam;            break;          case 16:            modulationFormat = ModulationType.Mod256Qam;            break;          case 17:            modulationFormat = ModulationType.Mod320Qam;            break;          case 18:            modulationFormat = ModulationType.Mod384Qam;            break;          case 19:            modulationFormat = ModulationType.Mod448Qam;            break;          case 20:            modulationFormat = ModulationType.Mod512Qam;            break;          case 21:            modulationFormat = ModulationType.Mod640Qam;            break;          case 22:            modulationFormat = ModulationType.Mod768Qam;            break;          case 23:            modulationFormat = ModulationType.Mod896Qam;            break;          case 24:            modulationFormat = ModulationType.Mod1024Qam;            break;        }
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: switch (section[pointer] & 0x1f)        {          case 1:            modulationFormat = ModulationType.ModQpsk;            break;          case 2:            modulationFormat = ModulationType.ModBpsk;            break;          case 3:            modulationFormat = ModulationType.ModOqpsk;            break;          case 4:            modulationFormat = ModulationType.Mod8Vsb;            break;          case 5:            modulationFormat = ModulationType.Mod16Vsb;            break;          case 6:            modulationFormat = ModulationType.Mod16Qam;            break;          case 7:            modulationFormat = ModulationType.Mod32Qam;            break;          case 8:            modulationFormat = ModulationType.Mod64Qam;            break;          case 9:            modulationFormat = ModulationType.Mod80Qam;            break;          case 10:            modulationFormat = ModulationType.Mod96Qam;            break;          case 11:            modulationFormat = ModulationType.Mod112Qam;            break;          case 12:            modulationFormat = ModulationType.Mod128Qam;            break;          case 13:            modulationFormat = ModulationType.Mod160Qam;            break;          case 14:            modulationFormat = ModulationType.Mod192Qam;            break;          case 15:            modulationFormat = ModulationType.Mod224Qam;            break;          case 16:            modulationFormat = ModulationType.Mod256Qam;            break;          case 17:            modulationFormat = ModulationType.Mod320Qam;            break;          case 18:            modulationFormat = ModulationType.Mod384Qam;            break;          case 19:            modulationFormat = ModulationType.Mod448Qam;            break;          case 20:            modulationFormat = ModulationType.Mod512Qam;            break;          case 21:            modulationFormat = ModulationType.Mod640Qam;            break;          case 22:            modulationFormat = ModulationType.Mod768Qam;            break;          case 23:            modulationFormat = ModulationType.Mod896Qam;            break;          case 24:            modulationFormat = ModulationType.Mod1024Qam;            break;        }
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: switch (section[pointer] & 0x1f)        {          case 1:            modulationFormat = ModulationType.ModQpsk;            break;          case 2:            modulationFormat = ModulationType.ModBpsk;            break;          case 3:            modulationFormat = ModulationType.ModOqpsk;            break;          case 4:            modulationFormat = ModulationType.Mod8Vsb;            break;          case 5:            modulationFormat = ModulationType.Mod16Vsb;            break;          case 6:            modulationFormat = ModulationType.Mod16Qam;            break;          case 7:            modulationFormat = ModulationType.Mod32Qam;            break;          case 8:            modulationFormat = ModulationType.Mod64Qam;            break;          case 9:            modulationFormat = ModulationType.Mod80Qam;            break;          case 10:            modulationFormat = ModulationType.Mod96Qam;            break;          case 11:            modulationFormat = ModulationType.Mod112Qam;            break;          case 12:            modulationFormat = ModulationType.Mod128Qam;            break;          case 13:            modulationFormat = ModulationType.Mod160Qam;            break;          case 14:            modulationFormat = ModulationType.Mod192Qam;            break;          case 15:            modulationFormat = ModulationType.Mod224Qam;            break;          case 16:            modulationFormat = ModulationType.Mod256Qam;            break;          case 17:            modulationFormat = ModulationType.Mod320Qam;            break;          case 18:            modulationFormat = ModulationType.Mod384Qam;            break;          case 19:            modulationFormat = ModulationType.Mod448Qam;            break;          case 20:            modulationFormat = ModulationType.Mod512Qam;            break;          case 21:            modulationFormat = ModulationType.Mod640Qam;            break;          case 22:            modulationFormat = ModulationType.Mod768Qam;            break;          case 23:            modulationFormat = ModulationType.Mod896Qam;            break;          case 24:            modulationFormat = ModulationType.Mod1024Qam;            break;        }
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: switch (section[pointer] & 0x1f)        {          case 1:            modulationFormat = ModulationType.ModQpsk;            break;          case 2:            modulationFormat = ModulationType.ModBpsk;            break;          case 3:            modulationFormat = ModulationType.ModOqpsk;            break;          case 4:            modulationFormat = ModulationType.Mod8Vsb;            break;          case 5:            modulationFormat = ModulationType.Mod16Vsb;            break;          case 6:            modulationFormat = ModulationType.Mod16Qam;            break;          case 7:            modulationFormat = ModulationType.Mod32Qam;            break;          case 8:            modulationFormat = ModulationType.Mod64Qam;            break;          case 9:            modulationFormat = ModulationType.Mod80Qam;            break;          case 10:            modulationFormat = ModulationType.Mod96Qam;            break;          case 11:            modulationFormat = ModulationType.Mod112Qam;            break;          case 12:            modulationFormat = ModulationType.Mod128Qam;            break;          case 13:            modulationFormat = ModulationType.Mod160Qam;            break;          case 14:            modulationFormat = ModulationType.Mod192Qam;            break;          case 15:            modulationFormat = ModulationType.Mod224Qam;            break;          case 16:            modulationFormat = ModulationType.Mod256Qam;            break;          case 17:            modulationFormat = ModulationType.Mod320Qam;            break;          case 18:            modulationFormat = ModulationType.Mod384Qam;            break;          case 19:            modulationFormat = ModulationType.Mod448Qam;            break;          case 20:            modulationFormat = ModulationType.Mod512Qam;            break;          case 21:            modulationFormat = ModulationType.Mod640Qam;            break;          case 22:            modulationFormat = ModulationType.Mod768Qam;            break;          case 23:            modulationFormat = ModulationType.Mod896Qam;            break;          case 24:            modulationFormat = ModulationType.Mod1024Qam;            break;        }
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: switch (section[pointer] & 0x1f)        {          case 1:            modulationFormat = ModulationType.ModQpsk;            break;          case 2:            modulationFormat = ModulationType.ModBpsk;            break;          case 3:            modulationFormat = ModulationType.ModOqpsk;            break;          case 4:            modulationFormat = ModulationType.Mod8Vsb;            break;          case 5:            modulationFormat = ModulationType.Mod16Vsb;            break;          case 6:            modulationFormat = ModulationType.Mod16Qam;            break;          case 7:            modulationFormat = ModulationType.Mod32Qam;            break;          case 8:            modulationFormat = ModulationType.Mod64Qam;            break;          case 9:            modulationFormat = ModulationType.Mod80Qam;            break;          case 10:            modulationFormat = ModulationType.Mod96Qam;            break;          case 11:            modulationFormat = ModulationType.Mod112Qam;            break;          case 12:            modulationFormat = ModulationType.Mod128Qam;            break;          case 13:            modulationFormat = ModulationType.Mod160Qam;            break;          case 14:            modulationFormat = ModulationType.Mod192Qam;            break;          case 15:            modulationFormat = ModulationType.Mod224Qam;            break;          case 16:            modulationFormat = ModulationType.Mod256Qam;            break;          case 17:            modulationFormat = ModulationType.Mod320Qam;            break;          case 18:            modulationFormat = ModulationType.Mod384Qam;            break;          case 19:            modulationFormat = ModulationType.Mod448Qam;            break;          case 20:            modulationFormat = ModulationType.Mod512Qam;            break;          case 21:            modulationFormat = ModulationType.Mod640Qam;            break;          case 22:            modulationFormat = ModulationType.Mod768Qam;            break;          case 23:            modulationFormat = ModulationType.Mod896Qam;            break;          case 24:            modulationFormat = ModulationType.Mod1024Qam;            break;        }
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: switch (section[pointer] & 0x1f)        {          case 1:            modulationFormat = ModulationType.ModQpsk;            break;          case 2:            modulationFormat = ModulationType.ModBpsk;            break;          case 3:            modulationFormat = ModulationType.ModOqpsk;            break;          case 4:            modulationFormat = ModulationType.Mod8Vsb;            break;          case 5:            modulationFormat = ModulationType.Mod16Vsb;            break;          case 6:            modulationFormat = ModulationType.Mod16Qam;            break;          case 7:            modulationFormat = ModulationType.Mod32Qam;            break;          case 8:            modulationFormat = ModulationType.Mod64Qam;            break;          case 9:            modulationFormat = ModulationType.Mod80Qam;            break;          case 10:            modulationFormat = ModulationType.Mod96Qam;            break;          case 11:            modulationFormat = ModulationType.Mod112Qam;            break;          case 12:            modulationFormat = ModulationType.Mod128Qam;            break;          case 13:            modulationFormat = ModulationType.Mod160Qam;            break;          case 14:            modulationFormat = ModulationType.Mod192Qam;            break;          case 15:            modulationFormat = ModulationType.Mod224Qam;            break;          case 16:            modulationFormat = ModulationType.Mod256Qam;            break;          case 17:            modulationFormat = ModulationType.Mod320Qam;            break;          case 18:            modulationFormat = ModulationType.Mod384Qam;            break;          case 19:            modulationFormat = ModulationType.Mod448Qam;            break;          case 20:            modulationFormat = ModulationType.Mod512Qam;            break;          case 21:            modulationFormat = ModulationType.Mod640Qam;            break;          case 22:            modulationFormat = ModulationType.Mod768Qam;            break;          case 23:            modulationFormat = ModulationType.Mod896Qam;            break;          case 24:            modulationFormat = ModulationType.Mod1024Qam;            break;        }
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: switch (section[pointer] & 0x1f)        {          case 1:            modulationFormat = ModulationType.ModQpsk;            break;          case 2:            modulationFormat = ModulationType.ModBpsk;            break;          case 3:            modulationFormat = ModulationType.ModOqpsk;            break;          case 4:            modulationFormat = ModulationType.Mod8Vsb;            break;          case 5:            modulationFormat = ModulationType.Mod16Vsb;            break;          case 6:            modulationFormat = ModulationType.Mod16Qam;            break;          case 7:            modulationFormat = ModulationType.Mod32Qam;            break;          case 8:            modulationFormat = ModulationType.Mod64Qam;            break;          case 9:            modulationFormat = ModulationType.Mod80Qam;            break;          case 10:            modulationFormat = ModulationType.Mod96Qam;            break;          case 11:            modulationFormat = ModulationType.Mod112Qam;            break;          case 12:            modulationFormat = ModulationType.Mod128Qam;            break;          case 13:            modulationFormat = ModulationType.Mod160Qam;            break;          case 14:            modulationFormat = ModulationType.Mod192Qam;            break;          case 15:            modulationFormat = ModulationType.Mod224Qam;            break;          case 16:            modulationFormat = ModulationType.Mod256Qam;            break;          case 17:            modulationFormat = ModulationType.Mod320Qam;            break;          case 18:            modulationFormat = ModulationType.Mod384Qam;            break;          case 19:            modulationFormat = ModulationType.Mod448Qam;            break;          case 20:            modulationFormat = ModulationType.Mod512Qam;            break;          case 21:            modulationFormat = ModulationType.Mod640Qam;            break;          case 22:            modulationFormat = ModulationType.Mod768Qam;            break;          case 23:            modulationFormat = ModulationType.Mod896Qam;            break;          case 24:            modulationFormat = ModulationType.Mod1024Qam;            break;        }
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: switch (section[pointer] & 0x1f)        {          case 1:            modulationFormat = ModulationType.ModQpsk;            break;          case 2:            modulationFormat = ModulationType.ModBpsk;            break;          case 3:            modulationFormat = ModulationType.ModOqpsk;            break;          case 4:            modulationFormat = ModulationType.Mod8Vsb;            break;          case 5:            modulationFormat = ModulationType.Mod16Vsb;            break;          case 6:            modulationFormat = ModulationType.Mod16Qam;            break;          case 7:            modulationFormat = ModulationType.Mod32Qam;            break;          case 8:            modulationFormat = ModulationType.Mod64Qam;            break;          case 9:            modulationFormat = ModulationType.Mod80Qam;            break;          case 10:            modulationFormat = ModulationType.Mod96Qam;            break;          case 11:            modulationFormat = ModulationType.Mod112Qam;            break;          case 12:            modulationFormat = ModulationType.Mod128Qam;            break;          case 13:            modulationFormat = ModulationType.Mod160Qam;            break;          case 14:            modulationFormat = ModulationType.Mod192Qam;            break;          case 15:            modulationFormat = ModulationType.Mod224Qam;            break;          case 16:            modulationFormat = ModulationType.Mod256Qam;            break;          case 17:            modulationFormat = ModulationType.Mod320Qam;            break;          case 18:            modulationFormat = ModulationType.Mod384Qam;            break;          case 19:            modulationFormat = ModulationType.Mod448Qam;            break;          case 20:            modulationFormat = ModulationType.Mod512Qam;            break;          case 21:            modulationFormat = ModulationType.Mod640Qam;            break;          case 22:            modulationFormat = ModulationType.Mod768Qam;            break;          case 23:            modulationFormat = ModulationType.Mod896Qam;            break;          case 24:            modulationFormat = ModulationType.Mod1024Qam;            break;        }
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: switch (section[pointer] & 0x1f)        {          case 1:            modulationFormat = ModulationType.ModQpsk;            break;          case 2:            modulationFormat = ModulationType.ModBpsk;            break;          case 3:            modulationFormat = ModulationType.ModOqpsk;            break;          case 4:            modulationFormat = ModulationType.Mod8Vsb;            break;          case 5:            modulationFormat = ModulationType.Mod16Vsb;            break;          case 6:            modulationFormat = ModulationType.Mod16Qam;            break;          case 7:            modulationFormat = ModulationType.Mod32Qam;            break;          case 8:            modulationFormat = ModulationType.Mod64Qam;            break;          case 9:            modulationFormat = ModulationType.Mod80Qam;            break;          case 10:            modulationFormat = ModulationType.Mod96Qam;            break;          case 11:            modulationFormat = ModulationType.Mod112Qam;            break;          case 12:            modulationFormat = ModulationType.Mod128Qam;            break;          case 13:            modulationFormat = ModulationType.Mod160Qam;            break;          case 14:            modulationFormat = ModulationType.Mod192Qam;            break;          case 15:            modulationFormat = ModulationType.Mod224Qam;            break;          case 16:            modulationFormat = ModulationType.Mod256Qam;            break;          case 17:            modulationFormat = ModulationType.Mod320Qam;            break;          case 18:            modulationFormat = ModulationType.Mod384Qam;            break;          case 19:            modulationFormat = ModulationType.Mod448Qam;            break;          case 20:            modulationFormat = ModulationType.Mod512Qam;            break;          case 21:            modulationFormat = ModulationType.Mod640Qam;            break;          case 22:            modulationFormat = ModulationType.Mod768Qam;            break;          case 23:            modulationFormat = ModulationType.Mod896Qam;            break;          case 24:            modulationFormat = ModulationType.Mod1024Qam;            break;        }
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: switch (section[pointer] & 0x1f)        {          case 1:            modulationFormat = ModulationType.ModQpsk;            break;          case 2:            modulationFormat = ModulationType.ModBpsk;            break;          case 3:            modulationFormat = ModulationType.ModOqpsk;            break;          case 4:            modulationFormat = ModulationType.Mod8Vsb;            break;          case 5:            modulationFormat = ModulationType.Mod16Vsb;            break;          case 6:            modulationFormat = ModulationType.Mod16Qam;            break;          case 7:            modulationFormat = ModulationType.Mod32Qam;            break;          case 8:            modulationFormat = ModulationType.Mod64Qam;            break;          case 9:            modulationFormat = ModulationType.Mod80Qam;            break;          case 10:            modulationFormat = ModulationType.Mod96Qam;            break;          case 11:            modulationFormat = ModulationType.Mod112Qam;            break;          case 12:            modulationFormat = ModulationType.Mod128Qam;            break;          case 13:            modulationFormat = ModulationType.Mod160Qam;            break;          case 14:            modulationFormat = ModulationType.Mod192Qam;            break;          case 15:            modulationFormat = ModulationType.Mod224Qam;            break;          case 16:            modulationFormat = ModulationType.Mod256Qam;            break;          case 17:            modulationFormat = ModulationType.Mod320Qam;            break;          case 18:            modulationFormat = ModulationType.Mod384Qam;            break;          case 19:            modulationFormat = ModulationType.Mod448Qam;            break;          case 20:            modulationFormat = ModulationType.Mod512Qam;            break;          case 21:            modulationFormat = ModulationType.Mod640Qam;            break;          case 22:            modulationFormat = ModulationType.Mod768Qam;            break;          case 23:            modulationFormat = ModulationType.Mod896Qam;            break;          case 24:            modulationFormat = ModulationType.Mod1024Qam;            break;        }
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: switch (section[pointer] & 0x1f)        {          case 1:            modulationFormat = ModulationType.ModQpsk;            break;          case 2:            modulationFormat = ModulationType.ModBpsk;            break;          case 3:            modulationFormat = ModulationType.ModOqpsk;            break;          case 4:            modulationFormat = ModulationType.Mod8Vsb;            break;          case 5:            modulationFormat = ModulationType.Mod16Vsb;            break;          case 6:            modulationFormat = ModulationType.Mod16Qam;            break;          case 7:            modulationFormat = ModulationType.Mod32Qam;            break;          case 8:            modulationFormat = ModulationType.Mod64Qam;            break;          case 9:            modulationFormat = ModulationType.Mod80Qam;            break;          case 10:            modulationFormat = ModulationType.Mod96Qam;            break;          case 11:            modulationFormat = ModulationType.Mod112Qam;            break;          case 12:            modulationFormat = ModulationType.Mod128Qam;            break;          case 13:            modulationFormat = ModulationType.Mod160Qam;            break;          case 14:            modulationFormat = ModulationType.Mod192Qam;            break;          case 15:            modulationFormat = ModulationType.Mod224Qam;            break;          case 16:            modulationFormat = ModulationType.Mod256Qam;            break;          case 17:            modulationFormat = ModulationType.Mod320Qam;            break;          case 18:            modulationFormat = ModulationType.Mod384Qam;            break;          case 19:            modulationFormat = ModulationType.Mod448Qam;            break;          case 20:            modulationFormat = ModulationType.Mod512Qam;            break;          case 21:            modulationFormat = ModulationType.Mod640Qam;            break;          case 22:            modulationFormat = ModulationType.Mod768Qam;            break;          case 23:            modulationFormat = ModulationType.Mod896Qam;            break;          case 24:            modulationFormat = ModulationType.Mod1024Qam;            break;        }
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: switch (section[pointer] & 0x1f)        {          case 1:            modulationFormat = ModulationType.ModQpsk;            break;          case 2:            modulationFormat = ModulationType.ModBpsk;            break;          case 3:            modulationFormat = ModulationType.ModOqpsk;            break;          case 4:            modulationFormat = ModulationType.Mod8Vsb;            break;          case 5:            modulationFormat = ModulationType.Mod16Vsb;            break;          case 6:            modulationFormat = ModulationType.Mod16Qam;            break;          case 7:            modulationFormat = ModulationType.Mod32Qam;            break;          case 8:            modulationFormat = ModulationType.Mod64Qam;            break;          case 9:            modulationFormat = ModulationType.Mod80Qam;            break;          case 10:            modulationFormat = ModulationType.Mod96Qam;            break;          case 11:            modulationFormat = ModulationType.Mod112Qam;            break;          case 12:            modulationFormat = ModulationType.Mod128Qam;            break;          case 13:            modulationFormat = ModulationType.Mod160Qam;            break;          case 14:            modulationFormat = ModulationType.Mod192Qam;            break;          case 15:            modulationFormat = ModulationType.Mod224Qam;            break;          case 16:            modulationFormat = ModulationType.Mod256Qam;            break;          case 17:            modulationFormat = ModulationType.Mod320Qam;            break;          case 18:            modulationFormat = ModulationType.Mod384Qam;            break;          case 19:            modulationFormat = ModulationType.Mod448Qam;            break;          case 20:            modulationFormat = ModulationType.Mod512Qam;            break;          case 21:            modulationFormat = ModulationType.Mod640Qam;            break;          case 22:            modulationFormat = ModulationType.Mod768Qam;            break;          case 23:            modulationFormat = ModulationType.Mod896Qam;            break;          case 24:            modulationFormat = ModulationType.Mod1024Qam;            break;        }
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: switch (section[pointer] & 0x1f)        {          case 1:            modulationFormat = ModulationType.ModQpsk;            break;          case 2:            modulationFormat = ModulationType.ModBpsk;            break;          case 3:            modulationFormat = ModulationType.ModOqpsk;            break;          case 4:            modulationFormat = ModulationType.Mod8Vsb;            break;          case 5:            modulationFormat = ModulationType.Mod16Vsb;            break;          case 6:            modulationFormat = ModulationType.Mod16Qam;            break;          case 7:            modulationFormat = ModulationType.Mod32Qam;            break;          case 8:            modulationFormat = ModulationType.Mod64Qam;            break;          case 9:            modulationFormat = ModulationType.Mod80Qam;            break;          case 10:            modulationFormat = ModulationType.Mod96Qam;            break;          case 11:            modulationFormat = ModulationType.Mod112Qam;            break;          case 12:            modulationFormat = ModulationType.Mod128Qam;            break;          case 13:            modulationFormat = ModulationType.Mod160Qam;            break;          case 14:            modulationFormat = ModulationType.Mod192Qam;            break;          case 15:            modulationFormat = ModulationType.Mod224Qam;            break;          case 16:            modulationFormat = ModulationType.Mod256Qam;            break;          case 17:            modulationFormat = ModulationType.Mod320Qam;            break;          case 18:            modulationFormat = ModulationType.Mod384Qam;            break;          case 19:            modulationFormat = ModulationType.Mod448Qam;            break;          case 20:            modulationFormat = ModulationType.Mod512Qam;            break;          case 21:            modulationFormat = ModulationType.Mod640Qam;            break;          case 22:            modulationFormat = ModulationType.Mod768Qam;            break;          case 23:            modulationFormat = ModulationType.Mod896Qam;            break;          case 24:            modulationFormat = ModulationType.Mod1024Qam;            break;        }
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: switch (section[pointer] & 0x1f)        {          case 1:            modulationFormat = ModulationType.ModQpsk;            break;          case 2:            modulationFormat = ModulationType.ModBpsk;            break;          case 3:            modulationFormat = ModulationType.ModOqpsk;            break;          case 4:            modulationFormat = ModulationType.Mod8Vsb;            break;          case 5:            modulationFormat = ModulationType.Mod16Vsb;            break;          case 6:            modulationFormat = ModulationType.Mod16Qam;            break;          case 7:            modulationFormat = ModulationType.Mod32Qam;            break;          case 8:            modulationFormat = ModulationType.Mod64Qam;            break;          case 9:            modulationFormat = ModulationType.Mod80Qam;            break;          case 10:            modulationFormat = ModulationType.Mod96Qam;            break;          case 11:            modulationFormat = ModulationType.Mod112Qam;            break;          case 12:            modulationFormat = ModulationType.Mod128Qam;            break;          case 13:            modulationFormat = ModulationType.Mod160Qam;            break;          case 14:            modulationFormat = ModulationType.Mod192Qam;            break;          case 15:            modulationFormat = ModulationType.Mod224Qam;            break;          case 16:            modulationFormat = ModulationType.Mod256Qam;            break;          case 17:            modulationFormat = ModulationType.Mod320Qam;            break;          case 18:            modulationFormat = ModulationType.Mod384Qam;            break;          case 19:            modulationFormat = ModulationType.Mod448Qam;            break;          case 20:            modulationFormat = ModulationType.Mod512Qam;            break;          case 21:            modulationFormat = ModulationType.Mod640Qam;            break;          case 22:            modulationFormat = ModulationType.Mod768Qam;            break;          case 23:            modulationFormat = ModulationType.Mod896Qam;            break;          case 24:            modulationFormat = ModulationType.Mod1024Qam;            break;        }
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: switch (section[pointer] & 0x1f)        {          case 1:            modulationFormat = ModulationType.ModQpsk;            break;          case 2:            modulationFormat = ModulationType.ModBpsk;            break;          case 3:            modulationFormat = ModulationType.ModOqpsk;            break;          case 4:            modulationFormat = ModulationType.Mod8Vsb;            break;          case 5:            modulationFormat = ModulationType.Mod16Vsb;            break;          case 6:            modulationFormat = ModulationType.Mod16Qam;            break;          case 7:            modulationFormat = ModulationType.Mod32Qam;            break;          case 8:            modulationFormat = ModulationType.Mod64Qam;            break;          case 9:            modulationFormat = ModulationType.Mod80Qam;            break;          case 10:            modulationFormat = ModulationType.Mod96Qam;            break;          case 11:            modulationFormat = ModulationType.Mod112Qam;            break;          case 12:            modulationFormat = ModulationType.Mod128Qam;            break;          case 13:            modulationFormat = ModulationType.Mod160Qam;            break;          case 14:            modulationFormat = ModulationType.Mod192Qam;            break;          case 15:            modulationFormat = ModulationType.Mod224Qam;            break;          case 16:            modulationFormat = ModulationType.Mod256Qam;            break;          case 17:            modulationFormat = ModulationType.Mod320Qam;            break;          case 18:            modulationFormat = ModulationType.Mod384Qam;            break;          case 19:            modulationFormat = ModulationType.Mod448Qam;            break;          case 20:            modulationFormat = ModulationType.Mod512Qam;            break;          case 21:            modulationFormat = ModulationType.Mod640Qam;            break;          case 22:            modulationFormat = ModulationType.Mod768Qam;            break;          case 23:            modulationFormat = ModulationType.Mod896Qam;            break;          case 24:            modulationFormat = ModulationType.Mod1024Qam;            break;        }
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: int symbolRate = ((section[pointer] & 0x0f) << 24) + (section[pointer + 1] << 16) + (section[pointer + 2] << 8) + section[pointer + 3];
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: int symbolRate = ((section[pointer] & 0x0f) << 24) + (section[pointer + 1] << 16) + (section[pointer + 2] << 8) + section[pointer + 3];
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: int symbolRate = ((section[pointer] & 0x0f) << 24) + (section[pointer + 1] << 16) + (section[pointer + 2] << 8) + section[pointer + 3];
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: int symbolRate = ((section[pointer] & 0x0f) << 24) + (section[pointer + 1] << 16) + (section[pointer + 2] << 8) + section[pointer + 3];
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: int symbolRate = ((section[pointer] & 0x0f) << 24) + (section[pointer + 1] << 16) + (section[pointer + 2] << 8) + section[pointer + 3];
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following statement contains a magic number: pointer += 4;
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeSatelliteInformation,The following statement contains a magic number: pointer + 4 > endOfSection
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeSatelliteInformation,The following statement contains a magic number: FrequencyBand frequencyBand = (FrequencyBand)((section[pointer] >> 5) & 0x03);
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeSatelliteInformation,The following statement contains a magic number: int orbitalPosition = ((section[pointer] & 0x03) << 8) + section[pointer + 1];
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeSatelliteInformation,The following statement contains a magic number: pointer += 2;
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeTransponderData,The following statement contains a magic number: pointer + 6 > endOfSection
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeTransponderData,The following statement contains a magic number: int vctId = (section[pointer] << 8) + section[pointer + 1];
Magic Number,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeTransponderData,The following statement contains a magic number: pointer += 2;
Magic Number,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,Decode,The following statement contains a magic number: section.Length < 14
Magic Number,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,Decode,The following statement contains a magic number: byte tableId = section[2];
Magic Number,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,Decode,The following statement contains a magic number: int sectionLength = ((section[3] & 0x0f) << 8) + section[4];
Magic Number,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,Decode,The following statement contains a magic number: int sectionLength = ((section[3] & 0x0f) << 8) + section[4];
Magic Number,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,Decode,The following statement contains a magic number: int sectionLength = ((section[3] & 0x0f) << 8) + section[4];
Magic Number,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,Decode,The following statement contains a magic number: section.Length != 2 + sectionLength + 3
Magic Number,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,Decode,The following statement contains a magic number: section.Length != 2 + sectionLength + 3
Magic Number,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,Decode,The following statement contains a magic number: int protocolVersion = (section[5] & 0x1f);
Magic Number,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,Decode,The following statement contains a magic number: string isoLangCode = System.Text.Encoding.ASCII.GetString(section' 6' 3);
Magic Number,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,Decode,The following statement contains a magic number: string isoLangCode = System.Text.Encoding.ASCII.GetString(section' 6' 3);
Magic Number,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,Decode,The following statement contains a magic number: AtscTransmissionMedium transmissionMedium = (AtscTransmissionMedium)(section[9] >> 4);
Magic Number,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,Decode,The following statement contains a magic number: AtscTransmissionMedium transmissionMedium = (AtscTransmissionMedium)(section[9] >> 4);
Magic Number,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,Decode,The following statement contains a magic number: TableSubtype tableSubtype = (TableSubtype)(section[9] & 0x0f);
Magic Number,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,Decode,The following statement contains a magic number: int pointer = 10;
Magic Number,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,Decode,The following statement contains a magic number: int endOfSection = section.Length - 4;
Magic Number,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeTransponderName,The following statement contains a magic number: pointer + 3 > endOfSection
Magic Number,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeTransponderName,The following statement contains a magic number: pointer + 3 > endOfSection
Magic Number,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeTransponderName,The following statement contains a magic number: pointer + 2 > endOfSection
Magic Number,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeSatelliteText,The following statement contains a magic number: pointer + 2 > endOfSection
Magic Number,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeSatelliteText,The following statement contains a magic number: pointer + 4 > endOfSection
Magic Number,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeSatelliteText,The following statement contains a magic number: pointer + 2 > endOfSection
Magic Number,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeRatingsText,The following statement contains a magic number: i < 6
Magic Number,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeRatingSystem,The following statement contains a magic number: pointer + 3 > endOfSection
Magic Number,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeCurrencySystem,The following statement contains a magic number: pointer + 3 > endOfSection
Magic Number,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeSourceName,The following statement contains a magic number: pointer + 5 > endOfSection
Magic Number,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeSourceName,The following statement contains a magic number: int sourceId = (section[pointer] << 8) + section[pointer + 1];
Magic Number,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeSourceName,The following statement contains a magic number: pointer += 2;
Magic Number,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeSourceName,The following statement contains a magic number: pointer + 2 > endOfSection
Magic Number,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeMapName,The following statement contains a magic number: pointer + 4 > endOfSection
Magic Number,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeMapName,The following statement contains a magic number: int vctId = (section[pointer] << 8) + section[pointer + 1];
Magic Number,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeMapName,The following statement contains a magic number: pointer += 2;
Magic Number,TvLibrary.Implementations.Dri.Parser,NttParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NttParser.cs,DecodeMapName,The following statement contains a magic number: pointer + 2 > endOfSection
Magic Number,TvLibrary.Implementations.Dri.Parser,BaseDriParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\BaseDriParser.cs,DecodeRevisionDetectionDescriptor,The following statement contains a magic number: length != 3
Magic Number,TvLibrary.Implementations.Dri.Parser,BaseDriParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\BaseDriParser.cs,DecodeRevisionDetectionDescriptor,The following statement contains a magic number: tableVersionNumber > currentVersion || (currentVersion == 31 && tableVersionNumber < currentVersion)
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,Decode,The following statement contains a magic number: section.Length < 13
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,Decode,The following statement contains a magic number: byte tableId = section[2];
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,Decode,The following statement contains a magic number: int sectionLength = ((section[3] & 0x0f) << 8) + section[4];
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,Decode,The following statement contains a magic number: int sectionLength = ((section[3] & 0x0f) << 8) + section[4];
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,Decode,The following statement contains a magic number: int sectionLength = ((section[3] & 0x0f) << 8) + section[4];
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,Decode,The following statement contains a magic number: section.Length != 2 + sectionLength + 3
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,Decode,The following statement contains a magic number: section.Length != 2 + sectionLength + 3
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,Decode,The following statement contains a magic number: byte protocolVersion = (byte)(section[5] & 0x1f);
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,Decode,The following statement contains a magic number: AtscTransmissionMedium transmissionMedium = (AtscTransmissionMedium)(section[6] >> 4);
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,Decode,The following statement contains a magic number: AtscTransmissionMedium transmissionMedium = (AtscTransmissionMedium)(section[6] >> 4);
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,Decode,The following statement contains a magic number: TableSubtype tableSubtype = (TableSubtype)(section[6] & 0x0f);
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,Decode,The following statement contains a magic number: int vctId = (section[7] << 8) + section[8];
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,Decode,The following statement contains a magic number: int vctId = (section[7] << 8) + section[8];
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,Decode,The following statement contains a magic number: int vctId = (section[7] << 8) + section[8];
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,Decode,The following statement contains a magic number: int pointer = 9;
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,Decode,The following statement contains a magic number: int endOfSection = section.Length - 4;
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeDefinedChannelMap,The following statement contains a magic number: pointer + 3 > endOfSection
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeDefinedChannelMap,The following statement contains a magic number: int firstVirtualChannel = ((section[pointer] & 0x0f) << 8) + section[pointer + 1];
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeDefinedChannelMap,The following statement contains a magic number: pointer += 2;
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The following statement contains a magic number: pointer + 7 > endOfSection
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The following statement contains a magic number: activationTime = activationTime << 8;
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The following statement contains a magic number: b < 4
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The following statement contains a magic number: pointer + 9 > endOfSection
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The following statement contains a magic number: int virtualChannelNumber = ((section[pointer] & 0x0f) << 8) + section[pointer + 1];
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The following statement contains a magic number: pointer += 2;
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The following statement contains a magic number: int bitstreamSelect = ((section[pointer] & 0x40) >> 6);
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The following statement contains a magic number: int pathSelect = ((section[pointer] & 0x20) >> 5);
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The following statement contains a magic number: TransportType transportType = (TransportType)((section[pointer] & 0x10) >> 4);
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The following statement contains a magic number: int sourceId = (section[pointer] << 8) + section[pointer + 1];
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The following statement contains a magic number: pointer += 2;
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The following statement contains a magic number: int nvodChannelBase = ((section[pointer] & 0x0f) << 8) + section[pointer + 1];
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The following statement contains a magic number: pointer += 2;
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The following statement contains a magic number: pointer += 3;
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The following statement contains a magic number: int frequencyUnit = 10;
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The following statement contains a magic number: frequencyUnit = 125;
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The following statement contains a magic number: int carrierFrequency = frequencyUnit * (((section[pointer] & 0x7f) << 8) + section[pointer + 1]);
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The following statement contains a magic number: pointer += 2;
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The following statement contains a magic number: int symbolRate = ((section[pointer] & 0x0f) << 24) + (section[pointer + 1] << 16) + (section[pointer + 2] << 8) + section[pointer + 3];
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The following statement contains a magic number: int symbolRate = ((section[pointer] & 0x0f) << 24) + (section[pointer + 1] << 16) + (section[pointer + 2] << 8) + section[pointer + 3];
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The following statement contains a magic number: int symbolRate = ((section[pointer] & 0x0f) << 24) + (section[pointer + 1] << 16) + (section[pointer + 2] << 8) + section[pointer + 3];
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The following statement contains a magic number: int symbolRate = ((section[pointer] & 0x0f) << 24) + (section[pointer + 1] << 16) + (section[pointer + 2] << 8) + section[pointer + 3];
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The following statement contains a magic number: int symbolRate = ((section[pointer] & 0x0f) << 24) + (section[pointer + 1] << 16) + (section[pointer + 2] << 8) + section[pointer + 3];
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The following statement contains a magic number: pointer += 4;
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeVirtualChannelMap,The following statement contains a magic number: pointer + 2 > endOfSection
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeInverseChannelMap,The following statement contains a magic number: pointer + 3 > endOfSection
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeInverseChannelMap,The following statement contains a magic number: int firstMapIndex = ((section[pointer] & 0x0f) << 8) + section[pointer + 1];
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeInverseChannelMap,The following statement contains a magic number: pointer += 2;
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeInverseChannelMap,The following statement contains a magic number: pointer + (recordCount * 4) > endOfSection
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeInverseChannelMap,The following statement contains a magic number: int sourceId = (section[pointer] << 8) + section[pointer + 1];
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeInverseChannelMap,The following statement contains a magic number: pointer += 2;
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeInverseChannelMap,The following statement contains a magic number: int virtualChannelNumber = ((section[pointer] & 0x0f) << 8) + section[pointer + 1];
Magic Number,TvLibrary.Implementations.Dri.Parser,SvctParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\SvctParser.cs,DecodeInverseChannelMap,The following statement contains a magic number: pointer += 2;
Magic Number,TvLibrary.Implementations.Dri,ScannerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\ScannerDri.cs,OnTableSection,The following statement contains a magic number: section == null || section.Length < 3
Magic Number,TvLibrary.Implementations.Dri,ScannerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\ScannerDri.cs,OnTableSection,The following statement contains a magic number: int pid = (section[0] << 8) + section[1];
Magic Number,TvLibrary.Implementations.Dri,ScannerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\ScannerDri.cs,OnTableSection,The following statement contains a magic number: byte tableId = section[2];
Magic Number,TvLibrary.Implementations.Dri,ScannerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\ScannerDri.cs,Reset,The following statement contains a magic number: _modulationModes = new ModulationType[255];
Magic Number,TvLibrary.Implementations.Dri,ScannerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\ScannerDri.cs,Reset,The following statement contains a magic number: _carrierFrequencies = new PhysicalChannel[255];
Magic Number,TvLibrary.Implementations.Dri,ScannerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\ScannerDri.cs,OnCarrierDefinition,The following statement contains a magic number: channel.Frequency = carrierFrequency - 1750;
Magic Number,TvLibrary.Implementations.Dri,ScannerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\ScannerDri.cs,OnCarrierDefinition,The following statement contains a magic number: carrierFrequency > 1750
Magic Number,TvLibrary.Implementations.Dri,ScannerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\ScannerDri.cs,OnLvctChannelDetail,The following statement contains a magic number: carrierFrequency /= 1000;
Magic Number,TvLibrary.Implementations.Dri,ScannerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\ScannerDri.cs,OnLvctChannelDetail,The following statement contains a magic number: channel.Frequency = carrierFrequency - 1750;
Magic Number,TvLibrary.Implementations.Dri,ScannerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\ScannerDri.cs,OnLvctChannelDetail,The following statement contains a magic number: carrierFrequency > 1750
Magic Number,TvLibrary.Implementations.Dri,ScannerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\ScannerDri.cs,Scan,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,TvLibrary.Implementations.Dri,ScannerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\ScannerDri.cs,Scan,The following statement contains a magic number: _scanEvent.WaitOne(1000);
Magic Number,TvLibrary.Implementations.Dri,ScannerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\ScannerDri.cs,Scan,The following statement contains a magic number: _scanEvent.WaitOne(_tuner.Parameters.TimeOutSDT * 1000);
Magic Number,TvLibrary.Implementations.Dri,ScannerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\ScannerDri.cs,Scan,The following statement contains a magic number: _scanEvent.WaitOne(_tuner.Parameters.TimeOutSDT * 1000);
Magic Number,TvLibrary.Implementations.Dri,ScannerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\ScannerDri.cs,Scan,The following statement contains a magic number: _scanEvent.WaitOne(_tuner.Parameters.TimeOutSDT * 1000);
Magic Number,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,ReadDeviceInfo,The following statement contains a magic number: Log.Log.Debug("  max bitrate  = {0} kbps"' maxAudioBitrate / 1000);
Magic Number,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,ReadDeviceInfo,The following statement contains a magic number: Log.Log.Debug("  min bitrate  = {0} kbps"' minAudioBitrate / 1000);
Magic Number,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,ReadDeviceInfo,The following statement contains a magic number: Log.Log.Debug("  bitrate step = {0} kbps"' audioBitrateStepping / 1000);
Magic Number,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,ReadDeviceInfo,The following statement contains a magic number: Log.Log.Debug("  bitrate      = {0} kbps"' audioBitrate / 1000);
Magic Number,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,ReadDeviceInfo,The following statement contains a magic number: Log.Log.Debug("  max bitrate  = {0} kbps"' maxVideoBitrate / 1000);
Magic Number,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,ReadDeviceInfo,The following statement contains a magic number: Log.Log.Debug("  min bitrate  = {0} kbps"' minVideoBitrate / 1000);
Magic Number,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,ReadDeviceInfo,The following statement contains a magic number: Log.Log.Debug("  bitrate step = {0} kbps"' videoBitrateStepping / 1000);
Magic Number,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,ReadDeviceInfo,The following statement contains a magic number: Log.Log.Debug("  bitrate      = {0} kbps"' videoBitrate / 1000);
Magic Number,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,BuildGraph,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,LockInOnSignal,The following statement contains a magic number: _eventSignalLock.WaitOne(_parameters.TimeOutTune * 1000);
Magic Number,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,UpdateSignalQuality,The following statement contains a magic number: ts.TotalMilliseconds < 5000
Magic Number,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,UpdateSignalQuality,The following statement contains a magic number: _signalLevel = 100;
Magic Number,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,UpdateSignalQuality,The following statement contains a magic number: _signalLevel > 100
Magic Number,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,UpdateSignalQuality,The following statement contains a magic number: _signalQuality = 100;
Magic Number,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,UpdateSignalQuality,The following statement contains a magic number: _signalQuality > 100
Magic Number,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,HandleMmiMessage,The following statement contains a magic number: message == null || message.Length < 3
Magic Number,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,HandleMmiMessage,The following statement contains a magic number: DriCasMmiAction action = (DriCasMmiAction)message[2];
Magic Number,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,HandleMmiMessage,The following statement contains a magic number: message.Length < 5
Magic Number,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,HandleMmiMessage,The following statement contains a magic number: int urlLength = (message[3] << 8) + message[4] - 1;
Magic Number,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,HandleMmiMessage,The following statement contains a magic number: int urlLength = (message[3] << 8) + message[4] - 1;
Magic Number,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,HandleMmiMessage,The following statement contains a magic number: int urlLength = (message[3] << 8) + message[4] - 1;
Magic Number,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,HandleMmiMessage,The following statement contains a magic number: string uriString = System.Text.Encoding.ASCII.GetString(message' 5' urlLength);
Magic Number,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,HandleMmiMessage,The following statement contains a magic number: request.Timeout = 5000;
Magic Number,TvLibrary.Implementations.Dri,TunerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\TunerDri.cs,HandleMmiMessage,The following statement contains a magic number: content = content.Substring(content.IndexOf("<body") + 5);
Magic Number,TvLibrary.Implementations.Dri.Service,AuxService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\AuxService.cs,GetAuxCapabilities,The following statement contains a magic number: videoNbr = (byte)outParams[2];
Magic Number,TvLibrary.Implementations.Dri.Service,AvTransportService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\AvTransportService.cs,GetMediaInfo,The following statement contains a magic number: currentUri = (string)outParams[2];
Magic Number,TvLibrary.Implementations.Dri.Service,AvTransportService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\AvTransportService.cs,GetMediaInfo,The following statement contains a magic number: currentUriMetaData = (string)outParams[3];
Magic Number,TvLibrary.Implementations.Dri.Service,AvTransportService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\AvTransportService.cs,GetMediaInfo,The following statement contains a magic number: nextUri = (string)outParams[4];
Magic Number,TvLibrary.Implementations.Dri.Service,AvTransportService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\AvTransportService.cs,GetMediaInfo,The following statement contains a magic number: nextUriMetaData = (string)outParams[5];
Magic Number,TvLibrary.Implementations.Dri.Service,AvTransportService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\AvTransportService.cs,GetMediaInfo,The following statement contains a magic number: playMedium = (UpnpAvStorageMedium)(string)outParams[6];
Magic Number,TvLibrary.Implementations.Dri.Service,AvTransportService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\AvTransportService.cs,GetMediaInfo,The following statement contains a magic number: recordMedium = (UpnpAvStorageMedium)(string)outParams[7];
Magic Number,TvLibrary.Implementations.Dri.Service,AvTransportService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\AvTransportService.cs,GetMediaInfo,The following statement contains a magic number: writeStatus = (UpnpAvRecordMediumWriteStatus)Enum.Parse(typeof(UpnpAvRecordMediumWriteStatus)' (string)outParams[8]);
Magic Number,TvLibrary.Implementations.Dri.Service,AvTransportService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\AvTransportService.cs,GetTransportInfo,The following statement contains a magic number: currentSpeed = (string)outParams[2];
Magic Number,TvLibrary.Implementations.Dri.Service,AvTransportService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\AvTransportService.cs,GetPositionInfo,The following statement contains a magic number: trackMetaData = (string)outParams[2];
Magic Number,TvLibrary.Implementations.Dri.Service,AvTransportService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\AvTransportService.cs,GetPositionInfo,The following statement contains a magic number: trackUri = (string)outParams[3];
Magic Number,TvLibrary.Implementations.Dri.Service,AvTransportService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\AvTransportService.cs,GetPositionInfo,The following statement contains a magic number: relTime = (string)outParams[4];
Magic Number,TvLibrary.Implementations.Dri.Service,AvTransportService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\AvTransportService.cs,GetPositionInfo,The following statement contains a magic number: absTime = (string)outParams[5];
Magic Number,TvLibrary.Implementations.Dri.Service,AvTransportService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\AvTransportService.cs,GetPositionInfo,The following statement contains a magic number: relCount = (int)outParams[6];
Magic Number,TvLibrary.Implementations.Dri.Service,AvTransportService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\AvTransportService.cs,GetPositionInfo,The following statement contains a magic number: absCount = (int)outParams[7];
Magic Number,TvLibrary.Implementations.Dri.Service,AvTransportService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\AvTransportService.cs,GetDeviceCapabilities,The following statement contains a magic number: recQualityModes = outParams[2].ToString().Split(''').Select(x => (UpnpAvRecordQualityMode)(string)x).ToList<UpnpAvRecordQualityMode>();
Magic Number,TvLibrary.Implementations.Dri.Service,CasService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\CasService.cs,GetCardStatus,The following statement contains a magic number: currentCardVersion = (string)outParams[2];
Magic Number,TvLibrary.Implementations.Dri.Service,CasService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\CasService.cs,GetCardStatus,The following statement contains a magic number: currentDaylightSaving = (bool)outParams[3];
Magic Number,TvLibrary.Implementations.Dri.Service,CasService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\CasService.cs,GetCardStatus,The following statement contains a magic number: currentEaLocationCode = (uint)outParams[4];
Magic Number,TvLibrary.Implementations.Dri.Service,CasService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\CasService.cs,GetCardStatus,The following statement contains a magic number: currentRatingRegion = (byte)outParams[5];
Magic Number,TvLibrary.Implementations.Dri.Service,CasService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\CasService.cs,GetCardStatus,The following statement contains a magic number: currentTimeZone = (int)outParams[6];
Magic Number,TvLibrary.Implementations.Dri.Service,ConnectionManagerService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\ConnectionManagerService.cs,PrepareForConnection,The following statement contains a magic number: rcsId = (int)outParams[2];
Magic Number,TvLibrary.Implementations.Dri.Service,ConnectionManagerService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\ConnectionManagerService.cs,GetCurrentConnectionInfo,The following statement contains a magic number: protocolInfo = (string)outParams[2];
Magic Number,TvLibrary.Implementations.Dri.Service,ConnectionManagerService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\ConnectionManagerService.cs,GetCurrentConnectionInfo,The following statement contains a magic number: peerConnectionManager = (string)outParams[3];
Magic Number,TvLibrary.Implementations.Dri.Service,ConnectionManagerService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\ConnectionManagerService.cs,GetCurrentConnectionInfo,The following statement contains a magic number: peerConnectionId = (int)outParams[4];
Magic Number,TvLibrary.Implementations.Dri.Service,ConnectionManagerService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\ConnectionManagerService.cs,GetCurrentConnectionInfo,The following statement contains a magic number: direction = (UpnpConnectionDirection)Enum.Parse(typeof(UpnpConnectionDirection)' (string)outParams[5]);
Magic Number,TvLibrary.Implementations.Dri.Service,ConnectionManagerService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\ConnectionManagerService.cs,GetCurrentConnectionInfo,The following statement contains a magic number: status = (UpnpConnectionStatus)Enum.Parse(typeof(UpnpConnectionStatus)' (string)outParams[6]);
Magic Number,TvLibrary.Implementations.Dri.Service,EncoderService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\EncoderService.cs,GetEncoderParameters,The following statement contains a magic number: currentAudioMode = (DriEncoderAudioMode)Enum.Parse(typeof(DriEncoderAudioMode)' (string)outParams[2]);
Magic Number,TvLibrary.Implementations.Dri.Service,EncoderService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\EncoderService.cs,GetEncoderParameters,The following statement contains a magic number: currentAudioStepping = (uint)outParams[3];
Magic Number,TvLibrary.Implementations.Dri.Service,EncoderService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\EncoderService.cs,GetEncoderParameters,The following statement contains a magic number: currentAudioBitrate = (uint)outParams[4];
Magic Number,TvLibrary.Implementations.Dri.Service,EncoderService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\EncoderService.cs,GetEncoderParameters,The following statement contains a magic number: currentAudioMethod = (byte)outParams[5];
Magic Number,TvLibrary.Implementations.Dri.Service,EncoderService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\EncoderService.cs,GetEncoderParameters,The following statement contains a magic number: currentMuteStatus = (bool)outParams[6];
Magic Number,TvLibrary.Implementations.Dri.Service,EncoderService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\EncoderService.cs,GetEncoderParameters,The following statement contains a magic number: currentFieldOrder = (DriEncoderFieldOrder)Enum.Parse(typeof(DriEncoderFieldOrder)' (string)outParams[7]);
Magic Number,TvLibrary.Implementations.Dri.Service,EncoderService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\EncoderService.cs,GetEncoderParameters,The following statement contains a magic number: currentSignalSource = (DriEncoderInputSelection)Enum.Parse(typeof(DriEncoderInputSelection)' (string)outParams[8]);
Magic Number,TvLibrary.Implementations.Dri.Service,EncoderService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\EncoderService.cs,GetEncoderParameters,The following statement contains a magic number: currentNoiseFilter = (bool)outParams[9];
Magic Number,TvLibrary.Implementations.Dri.Service,EncoderService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\EncoderService.cs,GetEncoderParameters,The following statement contains a magic number: currentPulldownStatus = (bool)outParams[10];
Magic Number,TvLibrary.Implementations.Dri.Service,EncoderService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\EncoderService.cs,GetEncoderParameters,The following statement contains a magic number: currentPulldownSetting = (bool)outParams[11];
Magic Number,TvLibrary.Implementations.Dri.Service,EncoderService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\EncoderService.cs,GetEncoderParameters,The following statement contains a magic number: currentSapStatus = (bool)outParams[12];
Magic Number,TvLibrary.Implementations.Dri.Service,EncoderService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\EncoderService.cs,GetEncoderParameters,The following statement contains a magic number: currentSapSetting = (bool)outParams[13];
Magic Number,TvLibrary.Implementations.Dri.Service,EncoderService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\EncoderService.cs,GetEncoderParameters,The following statement contains a magic number: currentVideoMax = (uint)outParams[14];
Magic Number,TvLibrary.Implementations.Dri.Service,EncoderService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\EncoderService.cs,GetEncoderParameters,The following statement contains a magic number: currentVideoMin = (uint)outParams[15];
Magic Number,TvLibrary.Implementations.Dri.Service,EncoderService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\EncoderService.cs,GetEncoderParameters,The following statement contains a magic number: currentVideoMode = (DriEncoderVideoMode)Enum.Parse(typeof(DriEncoderVideoMode)' (string)outParams[16]);
Magic Number,TvLibrary.Implementations.Dri.Service,EncoderService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\EncoderService.cs,GetEncoderParameters,The following statement contains a magic number: currentVideoBitrate = (uint)outParams[17];
Magic Number,TvLibrary.Implementations.Dri.Service,EncoderService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\EncoderService.cs,GetEncoderParameters,The following statement contains a magic number: currentVideoStepping = (uint)outParams[18];
Magic Number,TvLibrary.Implementations.Dri.Service,EncoderService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\EncoderService.cs,GetEncoderParameters,The following statement contains a magic number: currentVideoMethod = (byte)outParams[19];
Magic Number,TvLibrary.Implementations.Dri.Service,FdcService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\FdcService.cs,GetFdcStatus,The following statement contains a magic number: currentFrequency = (uint)outParams[2];
Magic Number,TvLibrary.Implementations.Dri.Service,FdcService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\FdcService.cs,GetFdcStatus,The following statement contains a magic number: currentSpectrumInversion = (bool)outParams[3];
Magic Number,TvLibrary.Implementations.Dri.Service,FdcService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\FdcService.cs,GetFdcStatus,The following statement contains a magic number: currentPidList = outParams[4].ToString().Split(''').Select(x => Convert.ToUInt16(x' 16)).ToList<UInt16>();
Magic Number,TvLibrary.Implementations.Dri.Service,FdcService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\FdcService.cs,GetFdcStatus,The following statement contains a magic number: currentPidList = outParams[4].ToString().Split(''').Select(x => Convert.ToUInt16(x' 16)).ToList<UInt16>();
Magic Number,TvLibrary.Implementations.Dri.Service,TunerService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\TunerService.cs,SetTunerParameters,The following statement contains a magic number: pcrLockStatus = (bool)outParams[2];
Magic Number,TvLibrary.Implementations.Dri.Service,TunerService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\TunerService.cs,GetTunerParameters,The following statement contains a magic number: currentModulation = (DriTunerModulation)(string)outParams[2];
Magic Number,TvLibrary.Implementations.Dri.Service,TunerService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\TunerService.cs,GetTunerParameters,The following statement contains a magic number: currentPcrLock = (bool)outParams[3];
Magic Number,TvLibrary.Implementations.Dri.Service,TunerService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\TunerService.cs,GetTunerParameters,The following statement contains a magic number: currentSignalLevel = (int)outParams[4];
Magic Number,TvLibrary.Implementations.Dri.Service,TunerService,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Service\TunerService.cs,GetTunerParameters,The following statement contains a magic number: currentSnr = (uint)outParams[5];
Magic Number,TvLibrary.Implementations.DVB,DigitalDevices,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalDevices\DigitalDevices.cs,SendMenuAnswer,The following statement contains a magic number: Int32 bufferSize = 8 + answerLength + 1;
Magic Number,TvLibrary.Implementations.DVB,DigitalDevices,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalDevices\DigitalDevices.cs,SendMenuAnswer,The following statement contains a magic number: bufferSize = 12;
Magic Number,TvLibrary.Implementations.DVB,DigitalDevices,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalDevices\DigitalDevices.cs,SendMenuAnswer,The following statement contains a magic number: bufferSize < 12
Magic Number,TvLibrary.Implementations.DVB,DigitalDevices,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalDevices\DigitalDevices.cs,SendMenuAnswer,The following statement contains a magic number: Marshal.WriteInt32(pReply' 4' (int)Answer.Length);
Magic Number,TvLibrary.Implementations.DVB,DigitalDevices,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalDevices\DigitalDevices.cs,SendMenuAnswer,The following statement contains a magic number: Marshal.WriteByte(pReply' 8 + i' (byte)Answer[i]);
Magic Number,TvLibrary.Implementations.DVB,DigitalDevices,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalDevices\DigitalDevices.cs,SendMenuAnswer,The following statement contains a magic number: Marshal.WriteByte(pReply' 8 + Answer.Length' 0);
Magic Number,TvLibrary.Implementations.DVB,DigitalDevices,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalDevices\DigitalDevices.cs,GetCamMenuText,The following statement contains a magic number: Int32 ulMenuSize = 2048;
Magic Number,TvLibrary.Implementations.DVB,DigitalDevices,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalDevices\DigitalDevices.cs,GetCamMenuText,The following statement contains a magic number: offs += 4;
Magic Number,TvLibrary.Implementations.DVB,DigitalDevices,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalDevices\DigitalDevices.cs,GetCamMenuText,The following statement contains a magic number: offs += 4;
Magic Number,TvLibrary.Implementations.DVB,DigitalDevices,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalDevices\DigitalDevices.cs,GetCamMenuText,The following statement contains a magic number: offs += 4;
Magic Number,TvLibrary.Implementations.DVB,DigitalDevices,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalDevices\DigitalDevices.cs,GetCamMenuText,The following statement contains a magic number: offs += 4;
Magic Number,TvLibrary.Implementations.DVB,DigitalDevices,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalDevices\DigitalDevices.cs,GetCamMenuText,The following statement contains a magic number: switch (i)              {                case 0:                  CiMenu.Title = choice;                  break;                case 1:                  CiMenu.SubTitle = choice;                  break;                case 2:                  CiMenu.BottomText = choice;                  break;                default:                  CiMenu.Choices.Add(choice);                  break;              }
Magic Number,TvLibrary.Implementations.DVB,DigitalDevices,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalDevices\DigitalDevices.cs,GetCamMenuText,The following statement contains a magic number: i < CiMenu.NumChoices + 3
Magic Number,TvLibrary.Implementations.DVB,DigitalDevices,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalDevices\DigitalDevices.cs,ProcessCamMenu,The following statement contains a magic number: switch (CiMenu.Type)        {          case 1:          case 2:            ciMenuCallbacks.OnCiMenu(CiMenu.Title' CiMenu.SubTitle' CiMenu.BottomText' CiMenu.NumChoices);            int n = 0;            foreach (String choice in CiMenu.Choices)            {              ciMenuCallbacks.OnCiMenuChoice(n++' choice);            }            break;          case 3:          case 4:            ciMenuCallbacks.OnCiRequest(false' (uint)CiMenu.NumChoices' CiMenu.Title);            break;          default:            Log.Log.Debug("Unknown MMI Type {0}"' CiMenu.Type);            break;        }
Magic Number,TvLibrary.Implementations.DVB,DigitalDevices,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalDevices\DigitalDevices.cs,ProcessCamMenu,The following statement contains a magic number: switch (CiMenu.Type)        {          case 1:          case 2:            ciMenuCallbacks.OnCiMenu(CiMenu.Title' CiMenu.SubTitle' CiMenu.BottomText' CiMenu.NumChoices);            int n = 0;            foreach (String choice in CiMenu.Choices)            {              ciMenuCallbacks.OnCiMenuChoice(n++' choice);            }            break;          case 3:          case 4:            ciMenuCallbacks.OnCiRequest(false' (uint)CiMenu.NumChoices' CiMenu.Title);            break;          default:            Log.Log.Debug("Unknown MMI Type {0}"' CiMenu.Type);            break;        }
Magic Number,TvLibrary.Implementations.DVB,DigitalDevices,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalDevices\DigitalDevices.cs,ProcessCamMenu,The following statement contains a magic number: switch (CiMenu.Type)        {          case 1:          case 2:            ciMenuCallbacks.OnCiMenu(CiMenu.Title' CiMenu.SubTitle' CiMenu.BottomText' CiMenu.NumChoices);            int n = 0;            foreach (String choice in CiMenu.Choices)            {              ciMenuCallbacks.OnCiMenuChoice(n++' choice);            }            break;          case 3:          case 4:            ciMenuCallbacks.OnCiRequest(false' (uint)CiMenu.NumChoices' CiMenu.Title);            break;          default:            Log.Log.Debug("Unknown MMI Type {0}"' CiMenu.Type);            break;        }
Magic Number,TvLibrary.Implementations.DVB,DigitalDevices,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalDevices\DigitalDevices.cs,CiMenuHandler,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,TvLibrary.Implementations.DVB,ProfRed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ProfRed\ProfRed.cs,ProfRed,The following statement contains a magic number: _ptrDiseqc = Marshal.AllocCoTaskMem(1024);
Magic Number,TvLibrary.Implementations.DVB,ProfRed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ProfRed\ProfRed.cs,SendDiseqCommand,The following statement contains a magic number: i < 188
Magic Number,TvLibrary.Implementations.DVB,ProfRed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ProfRed\ProfRed.cs,SendDiseqCommand,The following statement contains a magic number: cmd |= (byte)((isHorizontal) ? 2 : 0);
Magic Number,TvLibrary.Implementations.DVB,ProfRed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ProfRed\ProfRed.cs,SendDiseqCommand,The following statement contains a magic number: cmd |= (byte)((antennaNr - 1) << 2);
Magic Number,TvLibrary.Implementations.DVB,ProfRed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ProfRed\ProfRed.cs,SendDiseqCommand,The following statement contains a magic number: const int len = 188;
Magic Number,TvLibrary.Implementations.DVB,ProfRed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ProfRed\ProfRed.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 0' (byte)((diseqc >> 24) & 0xff));
Magic Number,TvLibrary.Implementations.DVB,ProfRed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ProfRed\ProfRed.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 1' (byte)((diseqc >> 16) & 0xff));
Magic Number,TvLibrary.Implementations.DVB,ProfRed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ProfRed\ProfRed.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 2' (byte)((diseqc >> 8) & 0xff));
Magic Number,TvLibrary.Implementations.DVB,ProfRed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ProfRed\ProfRed.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 2' (byte)((diseqc >> 8) & 0xff));
Magic Number,TvLibrary.Implementations.DVB,ProfRed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ProfRed\ProfRed.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 3' (byte)(diseqc & 0xff));
Magic Number,TvLibrary.Implementations.DVB,ProfRed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ProfRed\ProfRed.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 151' 4);
Magic Number,TvLibrary.Implementations.DVB,ProfRed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ProfRed\ProfRed.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 151' 4);
Magic Number,TvLibrary.Implementations.DVB,ProfRed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ProfRed\ProfRed.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 161' 0);
Magic Number,TvLibrary.Implementations.DVB,ProfRed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ProfRed\ProfRed.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 164' 2);
Magic Number,TvLibrary.Implementations.DVB,ProfRed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ProfRed\ProfRed.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 164' 2);
Magic Number,TvLibrary.Implementations.DVB,ProfRed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ProfRed\ProfRed.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 172' 3);
Magic Number,TvLibrary.Implementations.DVB,ProfRed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ProfRed\ProfRed.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 172' 3);
Magic Number,TvLibrary.Implementations.DVB,ProfRed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ProfRed\ProfRed.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 168' 2);
Magic Number,TvLibrary.Implementations.DVB,ProfRed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ProfRed\ProfRed.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 168' 2);
Magic Number,TvLibrary.Implementations.DVB,ProfRed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ProfRed\ProfRed.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 180' 1);
Magic Number,TvLibrary.Implementations.DVB,ProfRed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ProfRed\ProfRed.cs,SendDiseqCommand,The following statement contains a magic number: i < 4
Magic Number,TvLibrary.Implementations.DVB,ProfRed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ProfRed\ProfRed.cs,SendDiseqCommand,The following statement contains a magic number: txt += String.Format("0x{0:X} "' Marshal.ReadByte(_ptrDiseqc' 151));
Magic Number,TvLibrary.Implementations.DVB,ProfRed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ProfRed\ProfRed.cs,SendDiseqCommand,The following statement contains a magic number: i < 188
Magic Number,TvLibrary.Implementations.DVB,ProfRed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ProfRed\ProfRed.cs,SendDiSEqCCommand,The following statement contains a magic number: const int len = 188;
Magic Number,TvLibrary.Implementations.DVB,ProfRed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ProfRed\ProfRed.cs,SendDiSEqCCommand,The following statement contains a magic number: Marshal.WriteInt32(_ptrDiseqc' 151' diSEqC.Length);
Magic Number,TvLibrary.Implementations.DVB,ProfRed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ProfRed\ProfRed.cs,SendDiSEqCCommand,The following statement contains a magic number: Marshal.WriteInt32(_ptrDiseqc' 161' 0);
Magic Number,TvLibrary.Implementations.DVB,ProfRed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ProfRed\ProfRed.cs,SendDiSEqCCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 172' 1);
Magic Number,TvLibrary.Implementations.DVB,ProfRed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ProfRed\ProfRed.cs,SendDiSEqCCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 168' 2);
Magic Number,TvLibrary.Implementations.DVB,ProfRed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ProfRed\ProfRed.cs,SendDiSEqCCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 168' 2);
Magic Number,TvLibrary.Implementations.DVB,ProfRed,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ProfRed\ProfRed.cs,SendDiSEqCCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 180' 1);
Magic Number,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,HandleApplicationInformation,The following statement contains a magic number: length < 5
Magic Number,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,HandleEnquiry,The following statement contains a magic number: length < 3
Magic Number,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,MmiHandler,The following statement contains a magic number: response = (TbsMmiMessageType)Marshal.ReadByte(this._mmiResponseBuffer' 4);
Magic Number,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,MmiHandler,The following statement contains a magic number: sendCount >= 10
Magic Number,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,MmiHandler,The following statement contains a magic number: byte lsb = Marshal.ReadByte(this._mmiResponseBuffer' 5);
Magic Number,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,MmiHandler,The following statement contains a magic number: byte msb = Marshal.ReadByte(this._mmiResponseBuffer' 6);
Magic Number,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,MmiHandler,The following statement contains a magic number: int length = (256 * msb) + lsb;
Magic Number,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,MmiHandler,The following statement contains a magic number: length > MmiResponseBufferSize - 7
Magic Number,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,MmiHandler,The following statement contains a magic number: int j = 7;
Magic Number,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,CloseCi,The following statement contains a magic number: _mmiHandlerThread.Join(MmiHandlerThreadSleepTime * 2);
Magic Number,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,SetDVBS2,The following statement contains a magic number: DVBNBCParams.dvbtype = 2;
Magic Number,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,OpenCi,The following statement contains a magic number: this._pmtBuffer = Marshal.AllocCoTaskMem(MaxPmtLength + 2);
Magic Number,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,SelectMenu,The following statement contains a magic number: MmiMessage selectMessage = new MmiMessage(TbsMmiMessageType.MenuAnswer' 3);
Magic Number,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,SelectMenu,The following statement contains a magic number: selectMessage.Message[2] = choice;
Magic Number,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,SendMenuAnswer,The following statement contains a magic number: answer.Length > 254
Magic Number,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,SendMenuAnswer,The following statement contains a magic number: MmiMessage answerMessage = new MmiMessage(TbsMmiMessageType.Answer' answer.Length + 3);
Magic Number,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,SendMenuAnswer,The following statement contains a magic number: answerMessage.Message[2] = responseType;
Magic Number,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,SendMenuAnswer,The following statement contains a magic number: int offset = 3;
Magic Number,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,SendPmt,The following statement contains a magic number: int ofs = 2;
Magic Number,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,SendPmt,The following statement contains a magic number: TBS_ci_SendPmt(this._ciHandle' this._pmtBuffer' (ushort)(length + 2));
Magic Number,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,SetTuningParameters,The following statement contains a magic number: int hresult = this._propertySet.QuerySupported(BdaExtensionPropertySet' 10' out support);
Magic Number,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,SetTuningParameters,The following statement contains a magic number: hresult = this._propertySet.Set(BdaExtensionPropertySet' 10' this._generalBuffer' 20' this._generalBuffer' 20);
Magic Number,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,SetTuningParameters,The following statement contains a magic number: hresult = this._propertySet.Set(BdaExtensionPropertySet' 10' this._generalBuffer' 20' this._generalBuffer' 20);
Magic Number,TvLibrary.Implementations.DVB,Turbosight,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\Turbosight\TurboSight.cs,SetTuningParameters,The following statement contains a magic number: hresult = this._propertySet.Set(BdaExtensionPropertySet' 10' this._generalBuffer' 20' this._generalBuffer' 20);
Magic Number,TvLibrary.Implementations.DVB,ConexantBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\ConexantBDA.cs,ConexantBDA,The following statement contains a magic number: _ptrDiseqc = Marshal.AllocCoTaskMem(1024);
Magic Number,TvLibrary.Implementations.DVB,ConexantBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\ConexantBDA.cs,SendDiseqCommand,The following statement contains a magic number: i < 188
Magic Number,TvLibrary.Implementations.DVB,ConexantBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\ConexantBDA.cs,SendDiseqCommand,The following statement contains a magic number: cmd |= (byte)((isHorizontal) ? 2 : 0);
Magic Number,TvLibrary.Implementations.DVB,ConexantBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\ConexantBDA.cs,SendDiseqCommand,The following statement contains a magic number: cmd |= (byte)((antennaNr - 1) << 2);
Magic Number,TvLibrary.Implementations.DVB,ConexantBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\ConexantBDA.cs,SendDiseqCommand,The following statement contains a magic number: const int len = 188;
Magic Number,TvLibrary.Implementations.DVB,ConexantBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\ConexantBDA.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 0' (byte)((diseqc >> 24) & 0xff));
Magic Number,TvLibrary.Implementations.DVB,ConexantBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\ConexantBDA.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 1' (byte)((diseqc >> 16) & 0xff));
Magic Number,TvLibrary.Implementations.DVB,ConexantBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\ConexantBDA.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 2' (byte)((diseqc >> 8) & 0xff));
Magic Number,TvLibrary.Implementations.DVB,ConexantBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\ConexantBDA.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 2' (byte)((diseqc >> 8) & 0xff));
Magic Number,TvLibrary.Implementations.DVB,ConexantBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\ConexantBDA.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 3' (byte)(diseqc & 0xff));
Magic Number,TvLibrary.Implementations.DVB,ConexantBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\ConexantBDA.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteInt32(_ptrDiseqc' 160' 4);
Magic Number,TvLibrary.Implementations.DVB,ConexantBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\ConexantBDA.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteInt32(_ptrDiseqc' 160' 4);
Magic Number,TvLibrary.Implementations.DVB,ConexantBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\ConexantBDA.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteInt32(_ptrDiseqc' 164' 0);
Magic Number,TvLibrary.Implementations.DVB,ConexantBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\ConexantBDA.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteInt32(_ptrDiseqc' 168' 3);
Magic Number,TvLibrary.Implementations.DVB,ConexantBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\ConexantBDA.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteInt32(_ptrDiseqc' 168' 3);
Magic Number,TvLibrary.Implementations.DVB,ConexantBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\ConexantBDA.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 172' (int)BurstModulationType.TONE_BURST_UNMODULATED);
Magic Number,TvLibrary.Implementations.DVB,ConexantBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\ConexantBDA.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 176' (int)DisEqcVersion.DISEQC_VER_1X);
Magic Number,TvLibrary.Implementations.DVB,ConexantBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\ConexantBDA.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 180' (int)RxMode.RXMODE_NOREPLY);
Magic Number,TvLibrary.Implementations.DVB,ConexantBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\ConexantBDA.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 184' 1);
Magic Number,TvLibrary.Implementations.DVB,ConexantBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\ConexantBDA.cs,SendDiseqCommand,The following statement contains a magic number: i < 4
Magic Number,TvLibrary.Implementations.DVB,ConexantBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\ConexantBDA.cs,SendDiseqCommand,The following statement contains a magic number: i < 188
Magic Number,TvLibrary.Implementations.DVB,ConexantBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\ConexantBDA.cs,SendDiSEqCCommand,The following statement contains a magic number: const int len = 188;
Magic Number,TvLibrary.Implementations.DVB,ConexantBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\ConexantBDA.cs,SendDiSEqCCommand,The following statement contains a magic number: Marshal.WriteInt32(_ptrDiseqc' 160' diSEqC.Length);
Magic Number,TvLibrary.Implementations.DVB,ConexantBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\ConexantBDA.cs,SendDiSEqCCommand,The following statement contains a magic number: Marshal.WriteInt32(_ptrDiseqc' 164' 0);
Magic Number,TvLibrary.Implementations.DVB,ConexantBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\ConexantBDA.cs,SendDiSEqCCommand,The following statement contains a magic number: Marshal.WriteInt32(_ptrDiseqc' 168' 3);
Magic Number,TvLibrary.Implementations.DVB,ConexantBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\ConexantBDA.cs,SendDiSEqCCommand,The following statement contains a magic number: Marshal.WriteInt32(_ptrDiseqc' 168' 3);
Magic Number,TvLibrary.Implementations.DVB,ConexantBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\ConexantBDA.cs,SendDiSEqCCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 172' (int)BurstModulationType.TONE_BURST_MODULATED);
Magic Number,TvLibrary.Implementations.DVB,ConexantBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\ConexantBDA.cs,SendDiSEqCCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 176' (int)DisEqcVersion.DISEQC_VER_1X);
Magic Number,TvLibrary.Implementations.DVB,ConexantBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\ConexantBDA.cs,SendDiSEqCCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 180' (int)RxMode.RXMODE_NOREPLY);
Magic Number,TvLibrary.Implementations.DVB,ConexantBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\ConexantBDA.cs,SendDiSEqCCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 184' 1);
Magic Number,TvLibrary.Implementations.DVB,ConexantBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\ConexantBDA.cs,SendDiSEqCCommand,The following statement contains a magic number: i < 188
Magic Number,TvLibrary.Implementations.DVB,GenericATSC,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\QAM\GenericATSC.cs,GenericATSC,The following statement contains a magic number: _tempValue = Marshal.AllocCoTaskMem(1024);
Magic Number,TvLibrary.Implementations.DVB,GenericATSC,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\QAM\GenericATSC.cs,GenericATSC,The following statement contains a magic number: _tempInstance = Marshal.AllocCoTaskMem(1024);
Magic Number,TvLibrary.Implementations.DVB,GenericATSC,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\QAM\GenericATSC.cs,SetXPATSCQam,The following statement contains a magic number: int hr = _propertySet.Set(guidBdaDigitalDemodulator' (int)BdaDigitalModulator.MODULATION_TYPE' _tempInstance' 32'                                    _tempValue' 4);
Magic Number,TvLibrary.Implementations.DVB,GenericATSC,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\QAM\GenericATSC.cs,SetXPATSCQam,The following statement contains a magic number: int hr = _propertySet.Set(guidBdaDigitalDemodulator' (int)BdaDigitalModulator.MODULATION_TYPE' _tempInstance' 32'                                    _tempValue' 4);
Magic Number,TvLibrary.Implementations.DVB,GenPixBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\GenPixBDA.cs,GenPixBDA,The following statement contains a magic number: _ptrDiseqc = Marshal.AllocCoTaskMem(1024);
Magic Number,TvLibrary.Implementations.DVB,GenPixBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\GenPixBDA.cs,GenPixBDA,The following statement contains a magic number: _ptrTempInstance = Marshal.AllocCoTaskMem(1024);
Magic Number,TvLibrary.Implementations.DVB,GenPixBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\GenPixBDA.cs,SendDiseqCommand,The following statement contains a magic number: cmd |= (byte)((isHorizontal) ? 2 : 0);
Magic Number,TvLibrary.Implementations.DVB,GenPixBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\GenPixBDA.cs,SendDiseqCommand,The following statement contains a magic number: cmd |= (byte)((antennaNr - 1) << 2);
Magic Number,TvLibrary.Implementations.DVB,GenPixBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\GenPixBDA.cs,SendDiseqCommand,The following statement contains a magic number: DiseqcCommand.ucMessage[2] = 0x38;
Magic Number,TvLibrary.Implementations.DVB,GenPixBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\GenPixBDA.cs,SendDiseqCommand,The following statement contains a magic number: DiseqcCommand.ucMessage[3] = cmd;
Magic Number,TvLibrary.Implementations.DVB,GenPixBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\GenPixBDA.cs,SendDiseqCommand,The following statement contains a magic number: DiseqcCommand.ucMessage[4] = 0;
Magic Number,TvLibrary.Implementations.DVB,GenPixBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\GenPixBDA.cs,SendDiseqCommand,The following statement contains a magic number: DiseqcCommand.ucMessage[5] = 0;
Magic Number,TvLibrary.Implementations.DVB,GenPixBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\GenPixBDA.cs,SendDiseqCommand,The following statement contains a magic number: DiseqcCommand.ucMessageLength = 4;
Magic Number,TvLibrary.Implementations.DVB,GenPixBDA,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\GenPixBDA.cs,SendDiseqCommand,The following statement contains a magic number: int hr = _propertySet.Set(BdaTunerExtentionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_DISEQC'                                  _ptrTempInstance' 32' _ptrDiseqc' len);
Magic Number,TvLibrary.Implementations.DVB,DISEQC_COMMAND,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\GenPixBDA.cs,DISEQC_COMMAND,The following statement contains a magic number: ucMessage = new byte[6];
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,Hauppauge,The following statement contains a magic number: _ptrDiseqc = Marshal.AllocCoTaskMem(1024);
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,Hauppauge,The following statement contains a magic number: _tempValue = Marshal.AllocCoTaskMem(1024);
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,Hauppauge,The following statement contains a magic number: _tempInstance = Marshal.AllocCoTaskMem(1024);
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SendDiseqCommand,The following statement contains a magic number: i < 188
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SendDiseqCommand,The following statement contains a magic number: cmd |= (byte)((isHorizontal) ? 2 : 0);
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SendDiseqCommand,The following statement contains a magic number: cmd |= (byte)((antennaNr - 1) << 2);
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SendDiseqCommand,The following statement contains a magic number: const int len = 188;
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 0' (byte)((diseqc >> 24) & 0xff));
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 1' (byte)((diseqc >> 16) & 0xff));
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 2' (byte)((diseqc >> 8) & 0xff));
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 2' (byte)((diseqc >> 8) & 0xff));
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 3' (byte)(diseqc & 0xff));
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteInt32(_ptrDiseqc' 160' 4);
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteInt32(_ptrDiseqc' 160' 4);
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteInt32(_ptrDiseqc' 164' 0);
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteInt32(_ptrDiseqc' 168' 3);
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteInt32(_ptrDiseqc' 168' 3);
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 172' (int)BurstModulationType.TONE_BURST_UNMODULATED);
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 176' (int)DisEqcVersion.DISEQC_VER_1X);
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 180' (int)RxMode.RXMODE_NOREPLY);
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 184' 1);
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SendDiseqCommand,The following statement contains a magic number: i < 4
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SendDiseqCommand,The following statement contains a magic number: i < 188
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SendDiSEqCCommand,The following statement contains a magic number: const int len = 188;
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SendDiSEqCCommand,The following statement contains a magic number: Marshal.WriteInt32(_ptrDiseqc' 160' diSEqC.Length);
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SendDiSEqCCommand,The following statement contains a magic number: Marshal.WriteInt32(_ptrDiseqc' 164' 0);
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SendDiSEqCCommand,The following statement contains a magic number: Marshal.WriteInt32(_ptrDiseqc' 168' 3);
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SendDiSEqCCommand,The following statement contains a magic number: Marshal.WriteInt32(_ptrDiseqc' 168' 3);
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SendDiSEqCCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 172' 1);
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SendDiSEqCCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 176' (int)DisEqcVersion.DISEQC_VER_1X);
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SendDiSEqCCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 180' (int)RxMode.RXMODE_NOREPLY);
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SendDiSEqCCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 184' 1);
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SetDVBS2PilotRolloff,The following statement contains a magic number: hr = _propertySet.Set(BdaTunerExtentionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_PILOT' _tempInstance'                                32' _tempValue' 4);
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SetDVBS2PilotRolloff,The following statement contains a magic number: hr = _propertySet.Set(BdaTunerExtentionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_PILOT' _tempInstance'                                32' _tempValue' 4);
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SetDVBS2PilotRolloff,The following statement contains a magic number: hr = _propertySet.Set(BdaTunerExtentionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_ROLL_OFF' _tempInstance'                                32' _tempValue' 4);
Magic Number,TvLibrary.Implementations.DVB,Hauppauge,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\Hauppauge.cs,SetDVBS2PilotRolloff,The following statement contains a magic number: hr = _propertySet.Set(BdaTunerExtentionProperties' (int)BdaTunerExtension.KSPROPERTY_BDA_ROLL_OFF' _tempInstance'                                32' _tempValue' 4);
Magic Number,TvLibrary.Implementations.DVB,WinTvCiModule,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\WinTvCiModule.cs,OnStatus,The following statement contains a magic number: Status == 2
Magic Number,TvLibrary.Implementations.DVB,WinTvCiModule,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\WinTvCiModule.cs,CloseCIMenu,The following statement contains a magic number: byte[] uData = new byte[5];
Magic Number,TvLibrary.Implementations.DVB,WinTvCiModule,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\WinTvCiModule.cs,SelectMenu,The following statement contains a magic number: byte[] uData = new byte[5];
Magic Number,TvLibrary.Implementations.DVB,WinTvCiModule,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\HaupPauge\WinTvCiModule.cs,SendMenuAnswer,The following statement contains a magic number: byte[] uData = new byte[1024];
Magic Number,TvLibrary.Implementations.DVB,KNCAPI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\KNC\KNCAPI.cs,KNCAPI,The following statement contains a magic number: ptrPmt = Marshal.AllocCoTaskMem(1024);
Magic Number,TvLibrary.Implementations.DVB,KNCAPI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\KNC\KNCAPI.cs,KNCAPI,The following statement contains a magic number: ptrCallback = Marshal.AllocCoTaskMem(7 * 4);
Magic Number,TvLibrary.Implementations.DVB,KNCAPI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\KNC\KNCAPI.cs,KNCAPI,The following statement contains a magic number: ptrCallback = Marshal.AllocCoTaskMem(7 * 4);
Magic Number,TvLibrary.Implementations.DVB,KNCAPI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\KNC\KNCAPI.cs,KNCAPI,The following statement contains a magic number: _ptrDataInstance = Marshal.AllocCoTaskMem(1024);
Magic Number,TvLibrary.Implementations.DVB,KNCAPI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\KNC\KNCAPI.cs,OpenCI,The following statement contains a magic number: StringBuilder nameBuffer = new StringBuilder(100);
Magic Number,TvLibrary.Implementations.DVB,TechnoTrendAPI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TechnoTrend\TechnoTrendAPI.cs,TechnoTrendAPI,The following statement contains a magic number: ptrPmt = Marshal.AllocCoTaskMem(1024);
Magic Number,TvLibrary.Implementations.DVB,TechnoTrendAPI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TechnoTrend\TechnoTrendAPI.cs,TechnoTrendAPI,The following statement contains a magic number: _ptrDataInstance = Marshal.AllocCoTaskMem(1024);
Magic Number,TvLibrary.Implementations.DVB,TechnoTrendAPI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TechnoTrend\TechnoTrendAPI.cs,GetDeviceID,The following statement contains a magic number: int countRecPin = Marshal.ReadInt32(raw' 4);
Magic Number,TvLibrary.Implementations.DVB,TechnoTrendAPI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TechnoTrend\TechnoTrendAPI.cs,GetDeviceID,The following statement contains a magic number: IntPtr addr = new IntPtr(raw.ToInt32() + 8 + s * i);
Magic Number,TvLibrary.Implementations.DVB,TechnoTrendAPI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TechnoTrend\TechnoTrendAPI.cs,DescrambleMultiple,The following statement contains a magic number: Marshal.WriteInt16(ptrPmt' 2 * i' (short)context.ServiceId);
Magic Number,TvLibrary.Implementations.DVB,TechnoTrendAPI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TechnoTrend\TechnoTrendAPI.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDataInstance' 2' 0x38);
Magic Number,TvLibrary.Implementations.DVB,TechnoTrendAPI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TechnoTrend\TechnoTrendAPI.cs,SendDiseqCommand,The following statement contains a magic number: cmd |= (byte)((isHorizontal) ? 2 : 0);
Magic Number,TvLibrary.Implementations.DVB,TechnoTrendAPI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TechnoTrend\TechnoTrendAPI.cs,SendDiseqCommand,The following statement contains a magic number: cmd |= (byte)((antennaNr - 1) << 2);
Magic Number,TvLibrary.Implementations.DVB,TechnoTrendAPI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TechnoTrend\TechnoTrendAPI.cs,SendDiseqCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDataInstance' 3' cmd);
Magic Number,TvLibrary.Implementations.DVB,TechnoTrendAPI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TechnoTrend\TechnoTrendAPI.cs,SendDiseqCommand,The following statement contains a magic number: bdaapiSetDiSEqCMsg(m_hBdaApi' _ptrDataInstance' 4' 1' 0' (short)channel.Polarisation);
Magic Number,TvLibrary.Implementations.DVB,TechnoTrendAPI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TechnoTrend\TechnoTrendAPI.cs,EnableAntenna,The following statement contains a magic number: uiAntPwrOnOff == 2
Magic Number,TvLibrary.Implementations.DVB,TechnoTrendAPI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TechnoTrend\TechnoTrendAPI.cs,onCaChange,The following statement contains a magic number: switch (nReplyTag)          {            case 0x0C: //CI_PSI_COMPLETE:              Log.Log.Debug("$ CI: ### Number of programs : {0}"' wStatus);              break;              case 0x0D: //CI_MODULE_READY:              Log.Log.Debug("$ CI: CI_MODULE_READY in OnCAStatus not supported");              break;            case 0x0E: //CI_SWITCH_PRG_REPLY:              {                switch (wStatus)                {                  case 4: //ERR_INVALID_DATA:                    Log.Log.Debug("$ CI: ERROR::SetProgram failed !!! (invalid PNR)");                    break;                  case 5: //ERR_NO_CA_RESOURCE:                    Log.Log.Debug("$ CI: ERROR::SetProgram failed !!! (no CA resource available)");                    m_ciStatus = -1; // not ready                    m_caErrorCount++; // count the errors to allow reset                    break;                  case 0: //ERR_NONE:                    Log.Log.Debug("$ CI:    SetProgram OK");                    m_ciStatus = 1;                    m_caErrorCount = 0; // reset counter                    break;                  default:                    break;                }              }              break;            default:              break;          }
Magic Number,TvLibrary.Implementations.DVB,TechnoTrendAPI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TechnoTrend\TechnoTrendAPI.cs,onCaChange,The following statement contains a magic number: switch (nReplyTag)          {            case 0x0C: //CI_PSI_COMPLETE:              Log.Log.Debug("$ CI: ### Number of programs : {0}"' wStatus);              break;              case 0x0D: //CI_MODULE_READY:              Log.Log.Debug("$ CI: CI_MODULE_READY in OnCAStatus not supported");              break;            case 0x0E: //CI_SWITCH_PRG_REPLY:              {                switch (wStatus)                {                  case 4: //ERR_INVALID_DATA:                    Log.Log.Debug("$ CI: ERROR::SetProgram failed !!! (invalid PNR)");                    break;                  case 5: //ERR_NO_CA_RESOURCE:                    Log.Log.Debug("$ CI: ERROR::SetProgram failed !!! (no CA resource available)");                    m_ciStatus = -1; // not ready                    m_caErrorCount++; // count the errors to allow reset                    break;                  case 0: //ERR_NONE:                    Log.Log.Debug("$ CI:    SetProgram OK");                    m_ciStatus = 1;                    m_caErrorCount = 0; // reset counter                    break;                  default:                    break;                }              }              break;            default:              break;          }
Magic Number,TvLibrary.Implementations.DVB,ViXSATSC,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\QAM\ViXSATSC.cs,ViXSATSC,The following statement contains a magic number: _tempValue = Marshal.AllocCoTaskMem(1024);
Magic Number,TvLibrary.Implementations.DVB,ViXSATSC,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\QAM\ViXSATSC.cs,SetViXSQam,The following statement contains a magic number: int hr = _propertySet.Set(guidViXSTunerExtention' (int)BdaDigitalModulator.MODULATION_TYPE' _tempValue' 4'                                    _tempValue' 4);
Magic Number,TvLibrary.Implementations.DVB,ViXSATSC,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\QAM\ViXSATSC.cs,SetViXSQam,The following statement contains a magic number: int hr = _propertySet.Set(guidViXSTunerExtention' (int)BdaDigitalModulator.MODULATION_TYPE' _tempValue' 4'                                    _tempValue' 4);
Magic Number,TvLibrary.Implementations.DVB,ViXSATSC,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\QAM\ViXSATSC.cs,GetViXSQam,The following statement contains a magic number: int hr = _propertySet.Get(guidViXSTunerExtention' (int)BdaDigitalModulator.MODULATION_TYPE' _tempValue' 4'                                    _tempValue' 4' out length);
Magic Number,TvLibrary.Implementations.DVB,ViXSATSC,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\QAM\ViXSATSC.cs,GetViXSQam,The following statement contains a magic number: int hr = _propertySet.Get(guidViXSTunerExtention' (int)BdaDigitalModulator.MODULATION_TYPE' _tempValue' 4'                                    _tempValue' 4' out length);
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,DiSEqCMotor,The following statement contains a magic number: _currentMovingDish = xmlreader.GetValueAsInt("General"' "CurrentMovingDish"' 100);
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,DiSEqCMotor,The following statement contains a magic number: _firstTuneWait = xmlreader.GetValueAsInt("General"' "FirstTuneWait"' 200);
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,Reset,The following statement contains a magic number: byte[] cmd = new byte[3];
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,Reset,The following statement contains a magic number: cmd[2] = (byte)DiSEqCCommands.ClearReset;
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,Reset,The following statement contains a magic number: System.Threading.Thread.Sleep(100);
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,Reset,The following statement contains a magic number: cmd[2] = (byte)DiSEqCCommands.PowerOn;
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,Reset,The following statement contains a magic number: System.Threading.Thread.Sleep(100);
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,Reset,The following statement contains a magic number: cmd[2] = (byte)DiSEqCCommands.Reset;
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,Reset,The following statement contains a magic number: System.Threading.Thread.Sleep(100);
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,Reset,The following statement contains a magic number: cmd[2] = (byte)DiSEqCCommands.ClearReset;
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,Reset,The following statement contains a magic number: System.Threading.Thread.Sleep(100);
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,Reset,The following statement contains a magic number: cmd[2] = (byte)DiSEqCCommands.PowerOn;
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,StopMotor,The following statement contains a magic number: byte[] cmd = new byte[3];
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,StopMotor,The following statement contains a magic number: cmd[2] = (byte)DiSEqCCommands.Halt;
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,StopMotor,The following statement contains a magic number: System.Threading.Thread.Sleep(100);
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,SetEastLimit,The following statement contains a magic number: byte[] cmd = new byte[3];
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,SetEastLimit,The following statement contains a magic number: cmd[2] = (byte)DiSEqCCommands.SetEastLimit;
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,SetEastLimit,The following statement contains a magic number: System.Threading.Thread.Sleep(100);
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,SetWestLimit,The following statement contains a magic number: byte[] cmd = new byte[3];
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,SetWestLimit,The following statement contains a magic number: cmd[2] = (byte)DiSEqCCommands.SetWestLimit;
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,SetWestLimit,The following statement contains a magic number: System.Threading.Thread.Sleep(100);
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,DriveMotor,The following statement contains a magic number: byte[] cmd = new byte[4];
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,DriveMotor,The following statement contains a magic number: cmd[2] = (byte)DiSEqCCommands.DriveWest;
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,DriveMotor,The following statement contains a magic number: cmd[3] = (byte)(0x100 - steps);
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,DriveMotor,The following statement contains a magic number: System.Threading.Thread.Sleep(100);
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,StorePosition,The following statement contains a magic number: byte[] cmd = new byte[4];
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,StorePosition,The following statement contains a magic number: cmd[2] = (byte)DiSEqCCommands.StorePositions;
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,StorePosition,The following statement contains a magic number: cmd[3] = position;
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,StorePosition,The following statement contains a magic number: System.Threading.Thread.Sleep(100);
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,StorePosition,The following statement contains a magic number: System.Threading.Thread.Sleep(100);
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,GotoReferencePosition,The following statement contains a magic number: byte[] cmd = new byte[4];
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,GotoReferencePosition,The following statement contains a magic number: cmd[2] = (byte)DiSEqCCommands.GotoPosition;
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,GotoReferencePosition,The following statement contains a magic number: cmd[3] = 0;
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,GotoReferencePosition,The following statement contains a magic number: System.Threading.Thread.Sleep(100);
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,GotoReferencePosition,The following statement contains a magic number: System.Threading.Thread.Sleep(100);
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,GotoPosition,The following statement contains a magic number: byte[] cmd = new byte[4];
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,GotoPosition,The following statement contains a magic number: cmd[2] = (byte)DiSEqCCommands.GotoPosition;
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,GotoPosition,The following statement contains a magic number: cmd[3] = position;
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,GotoPosition,The following statement contains a magic number: int waitTime = 100;
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,GotoPosition,The following statement contains a magic number: waitTime = (int)((_currentMovingDish * (deltaPositionSat)) / 2);
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,GotoPosition,The following statement contains a magic number: TvLibrary.Log.Log.Write("DiSEqC: goto position {0} - use delay : {1}"' position' waitTime * 2);
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,GotoPosition,The following statement contains a magic number: waitTime = _firstTuneWait / 2;
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,GotoPosition,The following statement contains a magic number: waitTime = 100;
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,GotoPosition,The following statement contains a magic number: waitTime < 100
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,GotoPosition,The following statement contains a magic number: waitTime = 60000;
Magic Number,TvLibrary.Implementations.DVB,DiSEqCMotor,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\DiSEqCMotor.cs,GotoPosition,The following statement contains a magic number: waitTime > 60000
Magic Number,TvLibrary.Implementations.DVB,DvbBaseScanning,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DvbBaseScanning.cs,Scan,The following statement contains a magic number: Thread.Sleep(settings.TimeOutTune * 1000);
Magic Number,TvLibrary.Implementations.DVB,DvbBaseScanning,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DvbBaseScanning.cs,Scan,The following statement contains a magic number: _event.WaitOne(settings.TimeOutSDT * 1000' true);
Magic Number,TvLibrary.Implementations.DVB,DvbBaseScanning,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DvbBaseScanning.cs,ScanNIT,The following statement contains a magic number: Thread.Sleep(settings.TimeOutTune * 1000);
Magic Number,TvLibrary.Implementations.DVB,DvbBaseScanning,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DvbBaseScanning.cs,ScanNIT,The following statement contains a magic number: _event.WaitOne(16000' true);
Magic Number,TvLibrary.Implementations.DVB,DvbBaseScanning,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DvbBaseScanning.cs,ScanNIT,The following statement contains a magic number: switch (mod)                {                  default:                  case 0:                    ch.ModulationType = ModulationType.ModNotSet;                    break;                    //case 1: ch.ModulationType = ModulationType.ModQpsk; break;                  case 2:                    ch.ModulationType = ModulationType.Mod8Psk;                    break;                  case 3:                    ch.ModulationType = ModulationType.Mod16Qam;                    break;                }
Magic Number,TvLibrary.Implementations.DVB,DvbBaseScanning,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DvbBaseScanning.cs,ScanNIT,The following statement contains a magic number: switch (mod)                {                  default:                  case 0:                    ch.ModulationType = ModulationType.ModNotSet;                    break;                    //case 1: ch.ModulationType = ModulationType.ModQpsk; break;                  case 2:                    ch.ModulationType = ModulationType.Mod8Psk;                    break;                  case 3:                    ch.ModulationType = ModulationType.Mod16Qam;                    break;                }
Magic Number,TvLibrary.Implementations.DVB,TvCardDVBIP,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DVBIP\TvCardDVBIP.cs,UpdateSignalQuality,The following statement contains a magic number: _signalLevel = 100;
Magic Number,TvLibrary.Implementations.DVB,TvCardDVBIP,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DVBIP\TvCardDVBIP.cs,UpdateSignalQuality,The following statement contains a magic number: _signalQuality = 100;
Magic Number,TvLibrary.Implementations.DVB,TvCardDVBIPBuiltIn,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DVBIP\TvCardDVBIPBuiltIn.cs,RunGraph,The following statement contains a magic number: (_graphBuilder as IMediaControl).GetState(10' out state);
Magic Number,TvLibrary.Implementations.DVB,TvCardDVBIPElecard,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DVBIP\TvCardDVBIPElecard.cs,RunGraph,The following statement contains a magic number: (_graphBuilder as IMediaControl).GetState(10' out state);
Magic Number,TvLibrary.Implementations.DVB,MDPlug,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\MDPlug.cs,MDPlug,The following statement contains a magic number: _mDPlugTProg82.CA_Country = new byte[5];
Magic Number,TvLibrary.Implementations.DVB,MDPlug,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\MDPlug.cs,MDPlug,The following statement contains a magic number: _mDPlugTProg82.CA_System82 = new CA_System82[32];
Magic Number,TvLibrary.Implementations.DVB,MDPlug,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\MDPlug.cs,MDPlug,The following statement contains a magic number: _mDPlugTProg82.Country = new byte[30];
Magic Number,TvLibrary.Implementations.DVB,MDPlug,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\MDPlug.cs,MDPlug,The following statement contains a magic number: _mDPlugTProg82.Extern_Buffer = new byte[16];
Magic Number,TvLibrary.Implementations.DVB,MDPlug,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\MDPlug.cs,MDPlug,The following statement contains a magic number: _mDPlugTProg82.Filters = new byte[256];
Magic Number,TvLibrary.Implementations.DVB,MDPlug,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\MDPlug.cs,MDPlug,The following statement contains a magic number: _mDPlugTProg82.Name = new byte[30];
Magic Number,TvLibrary.Implementations.DVB,MDPlug,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\MDPlug.cs,MDPlug,The following statement contains a magic number: _mDPlugTProg82.Provider = new byte[30];
Magic Number,TvLibrary.Implementations.DVB,MDPlug,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\MDPlug.cs,MDPlug,The following statement contains a magic number: _mPids2Dec.Pids = new ushort[63];
Magic Number,TvLibrary.Implementations.DVB,MDPlug,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\MDPlug.cs,SetChannel,The following statement contains a magic number: _mDPlugTProg82.Afc = 68;
Magic Number,TvLibrary.Implementations.DVB,MDPlug,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\MDPlug.cs,SetChannel,The following statement contains a magic number: _mDPlugTProg82.ServiceTyp = currentChannel.IsTv ? (byte)1 : (byte)2;
Magic Number,TvLibrary.Implementations.DVB,TvDvbChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvDvbChannel.cs,WaitForPMT,The following statement contains a magic number: int timeoutPMT = _parameters.TimeOutPMT * 1000;
Magic Number,TvLibrary.Implementations.DVB,TvDvbChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvDvbChannel.cs,WaitForPMT,The following statement contains a magic number: ++retryCount <= 2
Magic Number,TvLibrary.Implementations.DVB,TvDvbChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvDvbChannel.cs,GraphRunning,The following statement contains a magic number: ((IMediaControl)_graphBuilder).GetState(10' out state);
Magic Number,TvLibrary.Implementations.DVB,TvDvbChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvDvbChannel.cs,SendPmtToCam,The following statement contains a magic number: waitInterval = 100;
Magic Number,TvLibrary.Implementations.DVB,TvDvbChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvDvbChannel.cs,SendPmtToCam,The following statement contains a magic number: !_eventCA.WaitOne(10000' true)
Magic Number,TvLibrary.Implementations.DVB,TvDvbChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvDvbChannel.cs,SendPmtToCam,The following statement contains a magic number: (!channel.FreeToAir) || (channel.NetworkId == 133 && !channel.Provider.Equals("BetaDigital"))
Magic Number,TvLibrary.Implementations.DVB,TvDvbChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvDvbChannel.cs,SendPmtToCam,The following statement contains a magic number: IntPtr pmtMem = Marshal.AllocCoTaskMem(4096);
Magic Number,TvLibrary.Implementations.DVB,TvDvbChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvDvbChannel.cs,SendPmtToCam,The following statement contains a magic number: IntPtr catMem = Marshal.AllocCoTaskMem(4096);
Magic Number,TvLibrary.Implementations.DVB,TvDvbChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvDvbChannel.cs,SendPmtToCam,The following statement contains a magic number: int version = ((_pmtData[5] >> 1) & 0x1F);
Magic Number,TvLibrary.Implementations.DVB,TvDvbChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvDvbChannel.cs,SendPmtToCam,The following statement contains a magic number: int pmtProgramNumber = (_pmtData[3] << 8) + _pmtData[4];
Magic Number,TvLibrary.Implementations.DVB,TvDvbChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvDvbChannel.cs,SendPmtToCam,The following statement contains a magic number: int pmtProgramNumber = (_pmtData[3] << 8) + _pmtData[4];
Magic Number,TvLibrary.Implementations.DVB,TvDvbChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvDvbChannel.cs,SendPmtToCam,The following statement contains a magic number: int pmtProgramNumber = (_pmtData[3] << 8) + _pmtData[4];
Magic Number,TvLibrary.Implementations.DVB,TvDvbChannel,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvDvbChannel.cs,SendPmtToCam,The following statement contains a magic number: _pmtLength > 6
Magic Number,TvLibrary.Implementations.DVB,DVB_MMI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,ToMMITag,The following statement contains a magic number: return          (MMI_TAGS)          (((Int32)sourceData[offset] << 16) | ((Int32)sourceData[offset + 1] << 8) | ((Int32)sourceData[offset + 2]));
Magic Number,TvLibrary.Implementations.DVB,DVB_MMI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,ToMMITag,The following statement contains a magic number: return          (MMI_TAGS)          (((Int32)sourceData[offset] << 16) | ((Int32)sourceData[offset + 1] << 8) | ((Int32)sourceData[offset + 2]));
Magic Number,TvLibrary.Implementations.DVB,DVB_MMI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,ToMMITag,The following statement contains a magic number: return          (MMI_TAGS)          (((Int32)sourceData[offset] << 16) | ((Int32)sourceData[offset + 1] << 8) | ((Int32)sourceData[offset + 2]));
Magic Number,TvLibrary.Implementations.DVB,DVB_MMI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,SetLength,The following statement contains a magic number: uLength1 = ((byte)(length % 256));
Magic Number,TvLibrary.Implementations.DVB,DVB_MMI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,SetLength,The following statement contains a magic number: uLength2 = ((byte)(length / 256));
Magic Number,TvLibrary.Implementations.DVB,DVB_MMI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,GetCIText,The following statement contains a magic number: Length = sourceData[offset + 3];
Magic Number,TvLibrary.Implementations.DVB,DVB_MMI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,GetCIText,The following statement contains a magic number: Length > 127
Magic Number,TvLibrary.Implementations.DVB,DVB_MMI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,GetCIText,The following statement contains a magic number: String menuEntry = BytesToString(sourceData' offset + 4' Length);
Magic Number,TvLibrary.Implementations.DVB,DVB_MMI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,GetCIText,The following statement contains a magic number: return (Length + 4);
Magic Number,TvLibrary.Implementations.DVB,DVB_MMI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,CreateMMIClose,The following statement contains a magic number: uData[2] = 0x00;
Magic Number,TvLibrary.Implementations.DVB,DVB_MMI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,CreateMMIClose,The following statement contains a magic number: uData[3] = 0x01;
Magic Number,TvLibrary.Implementations.DVB,DVB_MMI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,CreateMMIClose,The following statement contains a magic number: uData[4] = 0x00;
Magic Number,TvLibrary.Implementations.DVB,DVB_MMI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,CreateMMISelect,The following statement contains a magic number: uData[2] = 0x0B;
Magic Number,TvLibrary.Implementations.DVB,DVB_MMI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,CreateMMISelect,The following statement contains a magic number: uData[3] = 0x01;
Magic Number,TvLibrary.Implementations.DVB,DVB_MMI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,CreateMMISelect,The following statement contains a magic number: uData[4] = choice;
Magic Number,TvLibrary.Implementations.DVB,DVB_MMI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,CreateMMIAnswer,The following statement contains a magic number: uData[3] = 1;
Magic Number,TvLibrary.Implementations.DVB,DVB_MMI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,CreateMMIAnswer,The following statement contains a magic number: uData[4] = 0;
Magic Number,TvLibrary.Implementations.DVB,DVB_MMI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,CreateMMIAnswer,The following statement contains a magic number: SetLength(5' ref uLength1' ref uLength2);
Magic Number,TvLibrary.Implementations.DVB,DVB_MMI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,CreateMMIAnswer,The following statement contains a magic number: uData[2] = 0x08;
Magic Number,TvLibrary.Implementations.DVB,DVB_MMI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,ToSafeAscii,The following statement contains a magic number: b >= 32 && b <= 126
Magic Number,TvLibrary.Implementations.DVB,DVB_MMI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,ToSafeAscii,The following statement contains a magic number: b >= 32 && b <= 126
Magic Number,TvLibrary.Implementations.DVB,DVB_MMI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,DumpBinary,The following statement contains a magic number: Log.Log.WriteFile(String.Format("{0}|{1}"' row.ToString().PadRight(55' ' ')'                                              rowText.ToString().PadRight(16' ' ')));
Magic Number,TvLibrary.Implementations.DVB,DVB_MMI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,DumpBinary,The following statement contains a magic number: Log.Log.WriteFile(String.Format("{0}|{1}"' row.ToString().PadRight(55' ' ')'                                              rowText.ToString().PadRight(16' ' ')));
Magic Number,TvLibrary.Implementations.DVB,DVB_MMI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,DumpBinary,The following statement contains a magic number: Log.Log.WriteFile(String.Format("{0}|{1}"' row.ToString().PadRight(55' ' ')'                                          rowText.ToString().PadRight(16' ' ')));
Magic Number,TvLibrary.Implementations.DVB,DVB_MMI,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,DumpBinary,The following statement contains a magic number: Log.Log.WriteFile(String.Format("{0}|{1}"' row.ToString().PadRight(55' ' ')'                                          rowText.ToString().PadRight(16' ' ')));
Magic Number,TvLibrary.Implementations.DVB,DVB_MMI_Handler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,HandleMMI,The following statement contains a magic number: int mmiLength = DVB_MMI.GetLength(MMI' 3 /* bytes for mmi_tag */' out countLengthBytes);
Magic Number,TvLibrary.Implementations.DVB,DVB_MMI_Handler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,HandleMMI,The following statement contains a magic number: int mmiOffset = 3 + countLengthBytes;
Magic Number,TvLibrary.Implementations.DVB,DVB_MMI_Handler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,HandleMMI,The following statement contains a magic number: strText = DVB_MMI.BytesToString(MMI' mmiOffset + 4' mmiLength - mmiOffset - 2);
Magic Number,TvLibrary.Implementations.DVB,DVB_MMI_Handler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,HandleMMI,The following statement contains a magic number: strText = DVB_MMI.BytesToString(MMI' mmiOffset + 4' mmiLength - mmiOffset - 2);
Magic Number,TvLibrary.Implementations.DVB,DVB_MMI_Handler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,HandleMMI,The following statement contains a magic number: int max = 20;
Magic Number,TvLibrary.Implementations.DVB,DVB_MMI_Handler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,HandleMMI,The following statement contains a magic number: m_ciMenuCallback.OnCiMenu(Choices[0]' Choices[1]' Choices[2]' nChoices);
Magic Number,TvLibrary.Implementations.DVB,DVB_MMI_Handler,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\DVB_MMI.cs,HandleMMI,The following statement contains a magic number: m_ciMenuCallback.OnCiMenuChoice(c - 3' Choices[c]);
Magic Number,TvLibrary.Implementations.DVB,ConditionalAccess,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ConditionalAccess.cs,PatchPMT_AstonCrypt2,The following statement contains a magic number: i < 12
Magic Number,TvLibrary.Implementations.DVB,ConditionalAccess,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ConditionalAccess.cs,PatchPMT_AstonCrypt2,The following statement contains a magic number: i < PMT[11]
Magic Number,TvLibrary.Implementations.DVB,ConditionalAccess,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ConditionalAccess.cs,PatchPMT_AstonCrypt2,The following statement contains a magic number: int len = PMT[ps + 4] + 5;
Magic Number,TvLibrary.Implementations.DVB,ConditionalAccess,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ConditionalAccess.cs,PatchPMT_AstonCrypt2,The following statement contains a magic number: int len = PMT[ps + 4] + 5;
Magic Number,TvLibrary.Implementations.DVB,ConditionalAccess,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ConditionalAccess.cs,PatchPMT_AstonCrypt2,The following statement contains a magic number: (i == 0) && (PMT[ps] == 0x06) && (PMT[ps + 5] == 0x6A)
Magic Number,TvLibrary.Implementations.DVB,ConditionalAccess,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ConditionalAccess.cs,PatchPMT_AstonCrypt2,The following statement contains a magic number: (ps + 5 < pmtLength) && (pd < pmtLength)
Magic Number,TvLibrary.Implementations.DVB,ConditionalAccess,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ConditionalAccess.cs,SendDiseqcCommand,The following statement contains a magic number: int waitTime = 100;
Magic Number,TvLibrary.Implementations.DVB,ConditionalAccess,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ConditionalAccess.cs,SetDVBS2Modulation,The following statement contains a magic number: channel.SymbolRate == 30000
Magic Number,TvLibrary.Implementations.DVB,ConditionalAccess,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ConditionalAccess.cs,SetDVBS2Modulation,The following statement contains a magic number: _pilot = 128;
Magic Number,TvLibrary.Implementations.DVB,ConditionalAccess,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ConditionalAccess.cs,SetDVBS2Modulation,The following statement contains a magic number: _pilot = 64;
Magic Number,TvLibrary.Implementations.DVB,ConditionalAccess,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ConditionalAccess.cs,SetDVBS2Modulation,The following statement contains a magic number: _rollOff = 16;
Magic Number,TvLibrary.Implementations.DVB,ConditionalAccess,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ConditionalAccess.cs,SetDVBS2Modulation,The following statement contains a magic number: _rollOff = 32;
Magic Number,TvLibrary.Implementations.DVB,ConditionalAccess,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\ConditionalAccess.cs,SetDVBS2Modulation,The following statement contains a magic number: _rollOff = 48;
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,GET_FIRESAT_CA_DATA,The following statement contains a magic number: FIRESAT_CA_DATA CA = new FIRESAT_CA_DATA                               {                                 uSlot = 0'                                 //reserved for future implementations with multiple CI slots                                 uTag = tag'                                 bMoreSpacer1 = 0'                                 bMoreSpacer2 = 0'                                 bMoreSpacer3 = 0'                                 bMore = 0'                                 //don’t care; set by driver                                 uLengthSpacer1 = 0'                                 uLengthSpacer2 = 0'                                 uLength1 = ((byte)(length % 256))'                                 uLength2 = ((byte)(length / 256))'                                 uData = new byte[MAX_PMT_SIZE]'                                 uDataSpacer1 = 0'                                 uDataSpacer2 = 0                               };
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,GET_FIRESAT_CA_DATA,The following statement contains a magic number: FIRESAT_CA_DATA CA = new FIRESAT_CA_DATA                               {                                 uSlot = 0'                                 //reserved for future implementations with multiple CI slots                                 uTag = tag'                                 bMoreSpacer1 = 0'                                 bMoreSpacer2 = 0'                                 bMoreSpacer3 = 0'                                 bMore = 0'                                 //don’t care; set by driver                                 uLengthSpacer1 = 0'                                 uLengthSpacer2 = 0'                                 uLength1 = ((byte)(length % 256))'                                 uLength2 = ((byte)(length / 256))'                                 uData = new byte[MAX_PMT_SIZE]'                                 uDataSpacer1 = 0'                                 uDataSpacer2 = 0                               };
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SendPMTToFireDTV,The following statement contains a magic number: FIRESAT_CA_DATA caData = GET_FIRESAT_CA_DATA(2' (ushort)(2 + pmtLength));
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SendPMTToFireDTV,The following statement contains a magic number: FIRESAT_CA_DATA caData = GET_FIRESAT_CA_DATA(2' (ushort)(2 + pmtLength));
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SendPMTToFireDTV,The following statement contains a magic number: caData.uData[0] = 3;
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SendPMTToFireDTV,The following statement contains a magic number: caData.uData[i + 2] = PMT[i];
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: pidCount = 16;
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: pidCount > 16
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: pids.Count >= 2
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: dvbtStruct.uPid3 = pids[2];
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: dvbsStruct.uPid3 = pids[2];
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: pids.Count >= 3
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: dvbtStruct.uPid4 = pids[3];
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: dvbsStruct.uPid4 = pids[3];
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: pids.Count >= 4
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: dvbtStruct.uPid5 = pids[4];
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: dvbsStruct.uPid5 = pids[4];
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: pids.Count >= 5
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: dvbtStruct.uPid6 = pids[5];
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: dvbsStruct.uPid6 = pids[5];
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: pids.Count >= 6
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: dvbtStruct.uPid7 = pids[6];
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: dvbsStruct.uPid7 = pids[6];
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: pids.Count >= 7
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: dvbtStruct.uPid8 = pids[7];
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: dvbsStruct.uPid8 = pids[7];
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: pids.Count >= 8
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: dvbtStruct.uPid9 = pids[8];
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: dvbsStruct.uPid9 = pids[8];
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: pids.Count >= 9
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: dvbtStruct.uPid10 = pids[9];
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: dvbsStruct.uPid10 = pids[9];
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: pids.Count >= 10
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: dvbtStruct.uPid11 = pids[10];
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: dvbsStruct.uPid11 = pids[10];
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: pids.Count >= 11
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: dvbtStruct.uPid12 = pids[11];
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: dvbsStruct.uPid12 = pids[11];
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: pids.Count >= 12
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: dvbtStruct.uPid13 = pids[12];
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: dvbsStruct.uPid13 = pids[12];
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: pids.Count >= 13
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: dvbtStruct.uPid14 = pids[13];
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: dvbsStruct.uPid14 = pids[13];
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: pids.Count >= 14
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: dvbtStruct.uPid15 = pids[14];
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: dvbsStruct.uPid15 = pids[14];
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: pids.Count >= 15
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: dvbtStruct.uPid16 = pids[15];
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: dvbsStruct.uPid16 = pids[15];
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SetHardwarePidFiltering,The following statement contains a magic number: pids.Count >= 16
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,GetHardwareFirmwareVersionNumber,The following statement contains a magic number: Marshal.Copy(_ptrDataReturned' k' 0' 6);
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,GetHardwareFirmwareVersionNumber,The following statement contains a magic number: string hwrev = BitConverter.ToString(k).Replace("-"' ".").Substring(0' 8);
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,GetHardwareFirmwareVersionNumber,The following statement contains a magic number: string fwrev = BitConverter.ToString(k).Replace("-"' ".").Substring(9' 8);
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,GetHardwareFirmwareVersionNumber,The following statement contains a magic number: string fwrev = BitConverter.ToString(k).Replace("-"' ".").Substring(9' 8);
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,GetHardwareFirmwareVersionNumber,The following statement contains a magic number: string fwbuild =            ((Marshal.ReadByte(_ptrDataReturned' 6) * 256) + Marshal.ReadByte(_ptrDataReturned' 7)).ToString();
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,GetHardwareFirmwareVersionNumber,The following statement contains a magic number: string fwbuild =            ((Marshal.ReadByte(_ptrDataReturned' 6) * 256) + Marshal.ReadByte(_ptrDataReturned' 7)).ToString();
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,GetHardwareFirmwareVersionNumber,The following statement contains a magic number: string fwbuild =            ((Marshal.ReadByte(_ptrDataReturned' 6) * 256) + Marshal.ReadByte(_ptrDataReturned' 7)).ToString();
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,GetCAMStatus,The following statement contains a magic number: hr = propertySet.Get(propertyGuid' propId' _ptrDataInstance' 1036' _ptrDataReturned' 1036' out bytesReturned);
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,GetCAMStatus,The following statement contains a magic number: hr = propertySet.Get(propertyGuid' propId' _ptrDataInstance' 1036' _ptrDataReturned' 1036' out bytesReturned);
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,GetCAMStatus,The following statement contains a magic number: hr = propertySet.Get(propertyGuid' propId' _ptrDataInstance' 1036' _ptrDataReturned' 1036' out bytesReturned);
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,GetCAMStatus,The following statement contains a magic number: hr = propertySet.Get(propertyGuid' propId' _ptrDataInstance' 1036' _ptrDataReturned' 1036' out bytesReturned);
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,GetCAMName,The following statement contains a magic number: const int timeout = 250;
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,GetCAMName,The following statement contains a magic number: const int loops = 40;
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,GetCAMName,The following statement contains a magic number: Log.Log.WriteFile("FireDTV: GetCAMName() looping for {0}s and retrying"' (timeout * loops / 1000));
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,GetCAMName,The following statement contains a magic number: short application_manufacturer = BitConverter.ToInt16(caDataReturned.uData' 2);
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,GetCAMName,The following statement contains a magic number: int Length = Convert.ToInt16(caDataReturned.uData[4]);
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,GetCAMName,The following statement contains a magic number: caDataReturned.uData[i + 5] == 0
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,GetCAMName,The following statement contains a magic number: cam_name += (char)caDataReturned.uData[i + 5];
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SendDiseqcCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDataInstance' 2' 0xFF);
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SendDiseqcCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDataInstance' 3' 0x01);
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SendDiseqcCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDataInstance' 4' 0x04);
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SendDiseqcCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDataInstance' 5' 0xE0);
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SendDiseqcCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDataInstance' 6' 0x10);
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SendDiseqcCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDataInstance' 7' 0x38);
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SendDiseqcCommand,The following statement contains a magic number: cmd |= (byte)((isHorizontal) ? 2 : 0);
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SendDiseqcCommand,The following statement contains a magic number: cmd |= (byte)((antennaNr - 1) << 2);
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SendDiseqcCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDataInstance' 8' cmd);
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SendDiseqcCommand,The following statement contains a magic number: i < 10
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SendDiseqcCommand,The following statement contains a magic number: hr = propertySet.Set(propertyGuid' propId' _ptrDataInstance' 25' _ptrDataInstance' 25);
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SendDiseqcCommand,The following statement contains a magic number: hr = propertySet.Set(propertyGuid' propId' _ptrDataInstance' 25' _ptrDataInstance' 25);
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SendDiSEqCCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDataInstance' 2' 0xFF);
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SendDiSEqCCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDataInstance' 3' 0x01);
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SendDiSEqCCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDataInstance' 4' (byte)diSEqC.Length);
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SendDiSEqCCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDataInstance' 5 + i' diSEqC[i]);
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SendDiSEqCCommand,The following statement contains a magic number: hr = propertySet.Set(propertyGuid' propId' _ptrDataInstance' 25' _ptrDataInstance' 25);
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SendDiSEqCCommand,The following statement contains a magic number: hr = propertySet.Set(propertyGuid' propId' _ptrDataInstance' 25' _ptrDataInstance' 25);
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,EnterCIMenu,The following statement contains a magic number: FIRESAT_CA_DATA caData = GET_FIRESAT_CA_DATA(7 /*CA_ENTER_MENU*/' 0);
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,CloseCIMenu,The following statement contains a magic number: FIRESAT_CA_DATA caData = GET_FIRESAT_CA_DATA(5 /*CA_MMI*/' 5);
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,CloseCIMenu,The following statement contains a magic number: FIRESAT_CA_DATA caData = GET_FIRESAT_CA_DATA(5 /*CA_MMI*/' 5);
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SelectMenu,The following statement contains a magic number: FIRESAT_CA_DATA caData = GET_FIRESAT_CA_DATA(5 /*CA_MMI*/' 5);
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SelectMenu,The following statement contains a magic number: FIRESAT_CA_DATA caData = GET_FIRESAT_CA_DATA(5 /*CA_MMI*/' 5);
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,SendMenuAnswer,The following statement contains a magic number: FIRESAT_CA_DATA caData = GET_FIRESAT_CA_DATA(5 /*CA_MMI*/' 0);
Magic Number,TvLibrary.Implementations.DVB,DigitalEverywhere,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\DigitalEverywhere\DigitalEveryWhere.cs,CiMenuHandler,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,CTL_CODE,The following statement contains a magic number: return ((DeviceType) << 16) | ((Access) << 14) | ((Function) << 2) | (Method);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,CTL_CODE,The following statement contains a magic number: return ((DeviceType) << 16) | ((Access) << 14) | ((Function) << 2) | (Method);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,CTL_CODE,The following statement contains a magic number: return ((DeviceType) << 16) | ((Access) << 14) | ((Function) << 2) | (Method);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,InitStructure,The following statement contains a magic number: Marshal.WriteInt16(_thbdaBuf' 4' 0x2017);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,InitStructure,The following statement contains a magic number: Marshal.WriteInt16(_thbdaBuf' 6' 0x4b03);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,InitStructure,The following statement contains a magic number: Marshal.WriteByte(_thbdaBuf' 8' 0x90);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,InitStructure,The following statement contains a magic number: Marshal.WriteByte(_thbdaBuf' 9' 0xf8);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,InitStructure,The following statement contains a magic number: Marshal.WriteByte(_thbdaBuf' 10' 0x85);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,InitStructure,The following statement contains a magic number: Marshal.WriteByte(_thbdaBuf' 11' 0x6a);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,InitStructure,The following statement contains a magic number: Marshal.WriteByte(_thbdaBuf' 12' 0x62);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,InitStructure,The following statement contains a magic number: Marshal.WriteByte(_thbdaBuf' 13' 0xcb);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,InitStructure,The following statement contains a magic number: Marshal.WriteByte(_thbdaBuf' 14' 0x3d);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,InitStructure,The following statement contains a magic number: Marshal.WriteByte(_thbdaBuf' 15' 0x67);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,InitStructure,The following statement contains a magic number: Marshal.WriteInt32(_thbdaBuf' 16' ControlCode);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,InitStructure,The following statement contains a magic number: Marshal.WriteInt32(_thbdaBuf' 20' InBuffer.ToInt32());
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,InitStructure,The following statement contains a magic number: Marshal.WriteInt32(_thbdaBuf' 24' InBufferSize);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,InitStructure,The following statement contains a magic number: Marshal.WriteInt32(_thbdaBuf' 28' OutBuffer.ToInt32());
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,InitStructure,The following statement contains a magic number: Marshal.WriteInt32(_thbdaBuf' 32' OutBufferSize);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,InitStructure,The following statement contains a magic number: Marshal.WriteInt32(_thbdaBuf' 36' (int)_ptrDwBytesReturned);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,Twinhan,The following statement contains a magic number: _ptrPmt = Marshal.AllocCoTaskMem(8192);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,Twinhan,The following statement contains a magic number: _ptrDwBytesReturned = Marshal.AllocCoTaskMem(4);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,Twinhan,The following statement contains a magic number: _thbdaBuf = Marshal.AllocCoTaskMem(8192);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,Twinhan,The following statement contains a magic number: _ptrOutBuffer = Marshal.AllocCoTaskMem(8192);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,Twinhan,The following statement contains a magic number: _ptrOutBuffer2 = Marshal.AllocCoTaskMem(8192);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,Twinhan,The following statement contains a magic number: _ptrDiseqc = Marshal.AllocCoTaskMem(8192);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,Twinhan,The following statement contains a magic number: _ptrMMIBuffer = Marshal.AllocCoTaskMem(8192);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,GetCAMStatus,The following statement contains a magic number: InitStructure((int)THBDA_IOCTL_CI_GET_STATE' IntPtr.Zero' 0' _ptrOutBuffer' 4096);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,GetCAMStatus,The following statement contains a magic number: MMIState = (uint)Marshal.ReadInt32(_ptrOutBuffer' 4);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,GetPmtReply,The following statement contains a magic number: i < 1024
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,GetPmtReply,The following statement contains a magic number: InitStructure((int)THBDA_IOCTL_CI_GET_PMT_REPLY' IntPtr.Zero' 0' _ptrPmt' 1024);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,SendPMT,The following statement contains a magic number: System.Threading.Thread.Sleep(100);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,SendPMT,The following statement contains a magic number: ((uint)hr) == (0x8007001F) && failedAttempts < 10
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,SendDiseqCommand,The following statement contains a magic number: byte turnon22Khz = BandTypeConverter.IsHiBand(channel' parameters) ? (byte)2 : (byte)1;
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,SetLnbData,The following statement contains a magic number: const int disEqcLen = 20;
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,SetLnbData,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 2' 0);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,SetLnbData,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 3' 0);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,SetLnbData,The following statement contains a magic number: Marshal.WriteInt32(_ptrDiseqc' 4' LNBLOFLowBand);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,SetLnbData,The following statement contains a magic number: Marshal.WriteInt32(_ptrDiseqc' 8' LNBLOFHighBand);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,SetLnbData,The following statement contains a magic number: Marshal.WriteInt32(_ptrDiseqc' 12' LNBLOFHiLoSW);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,SetLnbData,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 16' (byte)turnon22Khz);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,SetLnbData,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 17' (byte)disEqcPort);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,SetLnbData,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 18' 0);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,SetLnbData,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 19' 0);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,SendDiseqcCommandTest,The following statement contains a magic number: cmd |= (byte)((isHorizontal) ? 2 : 0);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,SendDiseqcCommandTest,The following statement contains a magic number: cmd |= (byte)((antennaNr - 1) << 2);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,SendDiseqcCommandTest,The following statement contains a magic number: byte[] diseqc = new byte[4];
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,SendDiseqcCommandTest,The following statement contains a magic number: diseqc[2] = 0x38;
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,SendDiseqcCommandTest,The following statement contains a magic number: diseqc[3] = cmd;
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,SendDiSEqCCommand,The following statement contains a magic number: const int disEqcLen = 16;
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,SendDiSEqCCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 4 + i' 0);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,SendDiSEqCCommand,The following statement contains a magic number: i < 12
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,SendDiSEqCCommand,The following statement contains a magic number: Marshal.WriteByte(_ptrDiseqc' 4 + i' diSEqC[i]);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,ReadDiSEqCCommand,The following statement contains a magic number: const int disEqcLen = 16;
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,ReadDiSEqCCommand,The following statement contains a magic number: i < 16
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,ReadDiSEqCCommand,The following statement contains a magic number: DVB_MMI.DumpBinary(_ptrDiseqc' 0' 16);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,ReadDiSEqCCommand,The following statement contains a magic number: reply[i] = Marshal.ReadByte(_ptrDiseqc' 4 + i);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,ReadMMI,The following statement contains a magic number: i < 8192
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,ReadMMI,The following statement contains a magic number: InitStructure((int)THBDA_IOCTL_CI_GET_MMI' IntPtr.Zero' 0' _ptrMMIBuffer' 8192);
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,CiMenuHandler,The following statement contains a magic number: switch (MMIState)            {              case 3: // TODO: find proper MMIState codings                MMIInfoStruct MMI = ReadMMI();                if (MMI != null)                {                  Log.Log.Debug("TwinHan MMI:");                  Log.Log.Debug("Type        :{0}"' MMI.Type);                  Log.Log.Debug("Header:      {0}"' MMI.Header);                  Log.Log.Debug("SubHeader:   {0}"' MMI.SubHeader);                  Log.Log.Debug("ButtomLine:  {0}"' MMI.BottomLine);                  Log.Log.Debug("ItemCount:   {0}"' MMI.ItemCount);                  Log.Log.Debug("EnqFlag:     {0}"' MMI.EnqFlag);                  Log.Log.Debug("Prompt:      {0}"' MMI.Prompt);                  Log.Log.Debug("AnswerLength:{0}"' MMI.Answer_Text_Length);                  Log.Log.Debug("Blind_Answer:{0}"' MMI.Blind_Answer);                    // which types do we get???                  switch (MMI.Type)                  {                    case 0:                      m_ciMenuCallback.OnCiCloseDisplay(0);                      break;                    case 1:                      if (m_ciMenuCallback != null)                      {                        m_ciMenuCallback.OnCiMenu(MMI.Header' MMI.SubHeader' MMI.BottomLine' MMI.ItemCount);                        for (int m = 0; m < MMI.ItemCount; m++)                        {                          // choice number start with 0                          m_ciMenuCallback.OnCiMenuChoice(m' MMI.MenuItems[m].MenuItem);                        }                      }                      break;                    case 3:                      if (MMI.EnqFlag != 0)                      {                        if (m_ciMenuCallback != null)                        {                          m_ciMenuCallback.OnCiRequest((MMI.Blind_Answer == 1)' (uint)MMI.Answer_Text_Length' MMI.Prompt);                        }                      }                      break;                  }                }                break;              default:                Log.Log.Write("MMI State {0}"' (CIState)MMIState);                break;            }
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,CiMenuHandler,The following statement contains a magic number: switch (MMIState)            {              case 3: // TODO: find proper MMIState codings                MMIInfoStruct MMI = ReadMMI();                if (MMI != null)                {                  Log.Log.Debug("TwinHan MMI:");                  Log.Log.Debug("Type        :{0}"' MMI.Type);                  Log.Log.Debug("Header:      {0}"' MMI.Header);                  Log.Log.Debug("SubHeader:   {0}"' MMI.SubHeader);                  Log.Log.Debug("ButtomLine:  {0}"' MMI.BottomLine);                  Log.Log.Debug("ItemCount:   {0}"' MMI.ItemCount);                  Log.Log.Debug("EnqFlag:     {0}"' MMI.EnqFlag);                  Log.Log.Debug("Prompt:      {0}"' MMI.Prompt);                  Log.Log.Debug("AnswerLength:{0}"' MMI.Answer_Text_Length);                  Log.Log.Debug("Blind_Answer:{0}"' MMI.Blind_Answer);                    // which types do we get???                  switch (MMI.Type)                  {                    case 0:                      m_ciMenuCallback.OnCiCloseDisplay(0);                      break;                    case 1:                      if (m_ciMenuCallback != null)                      {                        m_ciMenuCallback.OnCiMenu(MMI.Header' MMI.SubHeader' MMI.BottomLine' MMI.ItemCount);                        for (int m = 0; m < MMI.ItemCount; m++)                        {                          // choice number start with 0                          m_ciMenuCallback.OnCiMenuChoice(m' MMI.MenuItems[m].MenuItem);                        }                      }                      break;                    case 3:                      if (MMI.EnqFlag != 0)                      {                        if (m_ciMenuCallback != null)                        {                          m_ciMenuCallback.OnCiRequest((MMI.Blind_Answer == 1)' (uint)MMI.Answer_Text_Length' MMI.Prompt);                        }                      }                      break;                  }                }                break;              default:                Log.Log.Write("MMI State {0}"' (CIState)MMIState);                break;            }
Magic Number,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,CiMenuHandler,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,TvLibrary.Implementations.DVB,ATSCScanning,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\ATSC\ATSCScanning.cs,CreateNewChannel,The following statement contains a magic number: atscChannel.Frequency = info.freq - 1750;
Magic Number,TvLibrary.Implementations.DVB,ATSCScanning,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\ATSC\ATSCScanning.cs,CreateNewChannel,The following statement contains a magic number: tuningChannel.PhysicalChannel == 0 ||          (info.freq > 1750 && tuningChannel.Frequency > 0 && info.freq != tuningChannel.Frequency)
Magic Number,TvLibrary.Implementations.DVB,TvCardATSC,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\ATSC\TvCardATSC.cs,CreateTuningSpace,The following statement contains a magic number: ITuningSpace[] spaces = new ITuningSpace[2];
Magic Number,TvLibrary.Implementations.DVB,TvCardATSC,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\ATSC\TvCardATSC.cs,CreateTuningSpace,The following statement contains a magic number: tuningSpace.put_MaxMinorChannel(999);
Magic Number,TvLibrary.Implementations.DVB,TvCardATSC,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\ATSC\TvCardATSC.cs,CreateTuningSpace,The following statement contains a magic number: tuningSpace.put_MaxPhysicalChannel(158);
Magic Number,TvLibrary.Implementations.DVB,TvCardATSC,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\ATSC\TvCardATSC.cs,CreateTuningSpace,The following statement contains a magic number: tuningSpace.put_MaxChannel(99);
Magic Number,TvLibrary.Implementations.DVB,TvCardDVBC,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DVBC\TvCardDVBC.cs,CreateTuningSpace,The following statement contains a magic number: ITuningSpace[] spaces = new ITuningSpace[2];
Magic Number,TvLibrary.Implementations.DVB,TvCardDVBC,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DVBC\TvCardDVBC.cs,FilterOutEPGChannel,The following statement contains a magic number: detail.ChannelType == 2
Magic Number,TvLibrary.Implementations.DVB,TvCardDVBS,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DVBS\TvCardDVBS.cs,TvCardDVBS,The following statement contains a magic number: _postDiSEqWait = xmlreader.GetValueAsInt("General"' "WaitAfterDiSEqC"' 10);
Magic Number,TvLibrary.Implementations.DVB,TvCardDVBS,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DVBS\TvCardDVBS.cs,TvCardDVBS,The following statement contains a magic number: _postDiSEqWait = 10;
Magic Number,TvLibrary.Implementations.DVB,TvCardDVBS,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DVBS\TvCardDVBS.cs,TvCardDVBS,The following statement contains a magic number: _postDiSEqWait = 30000;
Magic Number,TvLibrary.Implementations.DVB,TvCardDVBS,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DVBS\TvCardDVBS.cs,CreateTuningSpace,The following statement contains a magic number: ITuningSpace[] spaces = new ITuningSpace[2];
Magic Number,TvLibrary.Implementations.DVB,TvCardDVBS,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DVBS\TvCardDVBS.cs,CreateTuningSpace,The following statement contains a magic number: lowOsc = 9750;
Magic Number,TvLibrary.Implementations.DVB,TvCardDVBS,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DVBS\TvCardDVBS.cs,CreateTuningSpace,The following statement contains a magic number: hiOsc = 10600;
Magic Number,TvLibrary.Implementations.DVB,TvCardDVBS,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DVBS\TvCardDVBS.cs,CreateTuningSpace,The following statement contains a magic number: lnbSwitch = 11700;
Magic Number,TvLibrary.Implementations.DVB,TvCardDVBS,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DVBS\TvCardDVBS.cs,CreateTuningSpace,The following statement contains a magic number: tuningSpace.put_LNBSwitch(lnbSwitch * 1000);
Magic Number,TvLibrary.Implementations.DVB,TvCardDVBS,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DVBS\TvCardDVBS.cs,CreateTuningSpace,The following statement contains a magic number: tuningSpace.put_LowOscillator(lowOsc * 1000);
Magic Number,TvLibrary.Implementations.DVB,TvCardDVBS,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DVBS\TvCardDVBS.cs,CreateTuningSpace,The following statement contains a magic number: tuningSpace.put_HighOscillator(hiOsc * 1000);
Magic Number,TvLibrary.Implementations.DVB,TvCardDVBS,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DVBS\TvCardDVBS.cs,CreateTuningSpace,The following statement contains a magic number: tuningSpace.put_LNBSwitch(lnbSwitch * 1000);
Magic Number,TvLibrary.Implementations.DVB,TvCardDVBS,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DVBS\TvCardDVBS.cs,CreateTuningSpace,The following statement contains a magic number: tuningSpace.put_LowOscillator(lowOsc * 1000);
Magic Number,TvLibrary.Implementations.DVB,TvCardDVBS,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DVBS\TvCardDVBS.cs,CreateTuningSpace,The following statement contains a magic number: tuningSpace.put_HighOscillator(hiOsc * 1000);
Magic Number,TvLibrary.Implementations.DVB,TvCardDVBS,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DVBS\TvCardDVBS.cs,BeforeTune,The following statement contains a magic number: dvbsChannel.SwitchingFrequency = 11700000;
Magic Number,TvLibrary.Implementations.DVB,TvCardDVBS,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DVBS\TvCardDVBS.cs,BeforeTune,The following statement contains a magic number: dvbsChannel.SwitchingFrequency < 10
Magic Number,TvLibrary.Implementations.DVB,TvCardDVBS,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DVBS\TvCardDVBS.cs,BeforeTune,The following statement contains a magic number: lnbSwitch = 18000;
Magic Number,TvLibrary.Implementations.DVB,TvCardDVBS,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DVBS\TvCardDVBS.cs,BeforeTune,The following statement contains a magic number: tuningSpace.put_LNBSwitch(lnbSwitch * 1000);
Magic Number,TvLibrary.Implementations.DVB,TvCardDVBS,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DVBS\TvCardDVBS.cs,BeforeTune,The following statement contains a magic number: tuningSpace.put_LowOscillator(lowOsc * 1000);
Magic Number,TvLibrary.Implementations.DVB,TvCardDVBS,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DVBS\TvCardDVBS.cs,BeforeTune,The following statement contains a magic number: tuningSpace.put_HighOscillator(hiOsc * 1000);
Magic Number,TvLibrary.Implementations.DVB,TvCardDVBS,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DVBS\TvCardDVBS.cs,FilterOutEPGChannel,The following statement contains a magic number: detail.ChannelType == 3
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,TvCardDvbSS2,The following statement contains a magic number: _ptrDisEqc = Marshal.AllocCoTaskMem(20);
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,DoTune,The following statement contains a magic number: System.Threading.Thread.Sleep(20);
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,DoTune,The following statement contains a magic number: ((uint)hr == 0x90010115 || hr == -1) && lockRetries < 5
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,BeforeTune,The following statement contains a magic number: const int lnbKhzTone = 22;
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,BeforeTune,The following statement contains a magic number: switch (_cardType)        {          case CardType.DvbS:            DVBSChannel dvbsChannel = channel as DVBSChannel;            if (dvbsChannel == null)            {              Log.Log.Error("Channel is not a DVBS channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBSChannel oldChannels = (DVBSChannel)CurrentChannel;              if (oldChannels.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbsChannel.Frequency;            symbolRate = dvbsChannel.SymbolRate;            satelliteIndex = dvbsChannel.SatelliteIndex;            bool hiBand = BandTypeConverter.IsHiBand(dvbsChannel' Parameters);            int lof1' lof2' sw;            BandTypeConverter.GetDefaultLnbSetup(Parameters' dvbsChannel.BandType' out lof1' out lof2' out sw);            int lnbFrequency;            if (BandTypeConverter.IsHiBand(dvbsChannel' Parameters))              lnbFrequency = lof2 * 1000;            else              lnbFrequency = lof1 * 1000;            //0=horizontal or left' 1=vertical or right            polarity = 0;            if (dvbsChannel.Polarisation == Polarisation.LinearV)              polarity = 1;            if (dvbsChannel.Polarisation == Polarisation.CircularR)              polarity = 1;            Log.Log.WriteFile("ss2:  Polarity:{0} {1}"' dvbsChannel.Polarisation' polarity);            lnbSelection = LNBSelectionType.Lnb0;            if (dvbsChannel.BandType == BandType.Universal)            {              //only set the LNB (22'33'44) Khz tone when we use ku-band and are in hi-band              switch (lnbKhzTone)              {                case 22:                  lnbSelection = LNBSelectionType.Lnb22kHz;                  break;              }              if (hiBand == false)              {                lnbSelection = LNBSelectionType.Lnb0;              }            }            switch (dvbsChannel.DisEqc)            {              case DisEqcType.None: // none                disType = SS2DisEqcType.None;                break;              case DisEqcType.SimpleA: // Simple A                disType = SS2DisEqcType.Simple_A;                break;              case DisEqcType.SimpleB: // Simple B                disType = SS2DisEqcType.Simple_B;                break;              case DisEqcType.Level1AA: // Level 1 A/A                disType = SS2DisEqcType.Level_1_A_A;                break;              case DisEqcType.Level1BA: // Level 1 B/A                disType = SS2DisEqcType.Level_1_B_A;                break;              case DisEqcType.Level1AB: // Level 1 A/B                disType = SS2DisEqcType.Level_1_A_B;                break;              case DisEqcType.Level1BB: // Level 1 B/B                disType = SS2DisEqcType.Level_1_B_B;                break;            }            switchFreq = lnbFrequency / 1000; //in MHz            pmtPid = dvbsChannel.PmtPid;            break;          case CardType.DvbT:            DVBTChannel dvbtChannel = channel as DVBTChannel;            if (dvbtChannel == null)            {              Log.Log.Error("Channel is not a DVBT channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBTChannel oldChannelt = (DVBTChannel)CurrentChannel;              if (oldChannelt.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbtChannel.Frequency;            bandWidth = dvbtChannel.BandWidth;            pmtPid = dvbtChannel.PmtPid;            break;          case CardType.DvbC:            DVBCChannel dvbcChannel = channel as DVBCChannel;            if (dvbcChannel == null)            {              Log.Log.Error("Channel is not a DVBC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBCChannel oldChannelc = (DVBCChannel)CurrentChannel;              if (oldChannelc.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbcChannel.Frequency;            symbolRate = dvbcChannel.SymbolRate;            switch (dvbcChannel.ModulationType)            {              case ModulationType.Mod16Qam:                modulation = (int)eModulationTAG.QAM_16;                break;              case ModulationType.Mod32Qam:                modulation = (int)eModulationTAG.QAM_32;                break;              case ModulationType.Mod64Qam:                modulation = (int)eModulationTAG.QAM_64;                break;              case ModulationType.Mod128Qam:                modulation = (int)eModulationTAG.QAM_128;                break;              case ModulationType.Mod256Qam:                modulation = (int)eModulationTAG.QAM_256;                break;            }            pmtPid = dvbcChannel.PmtPid;            break;          case CardType.Atsc:            ATSCChannel dvbaChannel = channel as ATSCChannel;            if (dvbaChannel == null)            {              Log.Log.Error("Channel is not a ATSC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              ATSCChannel oldChannela = (ATSCChannel)CurrentChannel;              if (oldChannela.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            //if modulation = 256QAM assume ATSC QAM for HD5000            if (dvbaChannel.ModulationType == ModulationType.Mod256Qam)            {              Log.Log.WriteFile("DVBGraphB2C2:  ATSC Channel:{0} Frequency:{1}"' dvbaChannel.PhysicalChannel'                                dvbaChannel.Frequency);              frequency = (int)dvbaChannel.Frequency;              pmtPid = dvbaChannel.PmtPid;            }            else            {              Log.Log.WriteFile("DVBGraphSkyStar2:  ATSC Channel:{0}"' dvbaChannel.PhysicalChannel);              //#DM B2C2 SDK says ATSC is tuned by frequency. Here we work the OTA frequency by channel number#              int atscfreq = 0;              if (dvbaChannel.PhysicalChannel <= 6)                atscfreq = 45 + (dvbaChannel.PhysicalChannel * 6);              if (dvbaChannel.PhysicalChannel >= 7 && dvbaChannel.PhysicalChannel <= 13)                atscfreq = 177 + ((dvbaChannel.PhysicalChannel - 7) * 6);              if (dvbaChannel.PhysicalChannel >= 14)                atscfreq = 473 + ((dvbaChannel.PhysicalChannel - 14) * 6);              //#DM changed tuning parameter from physical channel to calculated frequency above.              frequency = atscfreq;              Log.Log.WriteFile("ss2:  ATSC Frequency:{0} MHz"' frequency);              pmtPid = dvbaChannel.PmtPid;            }            break;        }
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,BeforeTune,The following statement contains a magic number: switch (_cardType)        {          case CardType.DvbS:            DVBSChannel dvbsChannel = channel as DVBSChannel;            if (dvbsChannel == null)            {              Log.Log.Error("Channel is not a DVBS channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBSChannel oldChannels = (DVBSChannel)CurrentChannel;              if (oldChannels.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbsChannel.Frequency;            symbolRate = dvbsChannel.SymbolRate;            satelliteIndex = dvbsChannel.SatelliteIndex;            bool hiBand = BandTypeConverter.IsHiBand(dvbsChannel' Parameters);            int lof1' lof2' sw;            BandTypeConverter.GetDefaultLnbSetup(Parameters' dvbsChannel.BandType' out lof1' out lof2' out sw);            int lnbFrequency;            if (BandTypeConverter.IsHiBand(dvbsChannel' Parameters))              lnbFrequency = lof2 * 1000;            else              lnbFrequency = lof1 * 1000;            //0=horizontal or left' 1=vertical or right            polarity = 0;            if (dvbsChannel.Polarisation == Polarisation.LinearV)              polarity = 1;            if (dvbsChannel.Polarisation == Polarisation.CircularR)              polarity = 1;            Log.Log.WriteFile("ss2:  Polarity:{0} {1}"' dvbsChannel.Polarisation' polarity);            lnbSelection = LNBSelectionType.Lnb0;            if (dvbsChannel.BandType == BandType.Universal)            {              //only set the LNB (22'33'44) Khz tone when we use ku-band and are in hi-band              switch (lnbKhzTone)              {                case 22:                  lnbSelection = LNBSelectionType.Lnb22kHz;                  break;              }              if (hiBand == false)              {                lnbSelection = LNBSelectionType.Lnb0;              }            }            switch (dvbsChannel.DisEqc)            {              case DisEqcType.None: // none                disType = SS2DisEqcType.None;                break;              case DisEqcType.SimpleA: // Simple A                disType = SS2DisEqcType.Simple_A;                break;              case DisEqcType.SimpleB: // Simple B                disType = SS2DisEqcType.Simple_B;                break;              case DisEqcType.Level1AA: // Level 1 A/A                disType = SS2DisEqcType.Level_1_A_A;                break;              case DisEqcType.Level1BA: // Level 1 B/A                disType = SS2DisEqcType.Level_1_B_A;                break;              case DisEqcType.Level1AB: // Level 1 A/B                disType = SS2DisEqcType.Level_1_A_B;                break;              case DisEqcType.Level1BB: // Level 1 B/B                disType = SS2DisEqcType.Level_1_B_B;                break;            }            switchFreq = lnbFrequency / 1000; //in MHz            pmtPid = dvbsChannel.PmtPid;            break;          case CardType.DvbT:            DVBTChannel dvbtChannel = channel as DVBTChannel;            if (dvbtChannel == null)            {              Log.Log.Error("Channel is not a DVBT channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBTChannel oldChannelt = (DVBTChannel)CurrentChannel;              if (oldChannelt.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbtChannel.Frequency;            bandWidth = dvbtChannel.BandWidth;            pmtPid = dvbtChannel.PmtPid;            break;          case CardType.DvbC:            DVBCChannel dvbcChannel = channel as DVBCChannel;            if (dvbcChannel == null)            {              Log.Log.Error("Channel is not a DVBC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBCChannel oldChannelc = (DVBCChannel)CurrentChannel;              if (oldChannelc.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbcChannel.Frequency;            symbolRate = dvbcChannel.SymbolRate;            switch (dvbcChannel.ModulationType)            {              case ModulationType.Mod16Qam:                modulation = (int)eModulationTAG.QAM_16;                break;              case ModulationType.Mod32Qam:                modulation = (int)eModulationTAG.QAM_32;                break;              case ModulationType.Mod64Qam:                modulation = (int)eModulationTAG.QAM_64;                break;              case ModulationType.Mod128Qam:                modulation = (int)eModulationTAG.QAM_128;                break;              case ModulationType.Mod256Qam:                modulation = (int)eModulationTAG.QAM_256;                break;            }            pmtPid = dvbcChannel.PmtPid;            break;          case CardType.Atsc:            ATSCChannel dvbaChannel = channel as ATSCChannel;            if (dvbaChannel == null)            {              Log.Log.Error("Channel is not a ATSC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              ATSCChannel oldChannela = (ATSCChannel)CurrentChannel;              if (oldChannela.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            //if modulation = 256QAM assume ATSC QAM for HD5000            if (dvbaChannel.ModulationType == ModulationType.Mod256Qam)            {              Log.Log.WriteFile("DVBGraphB2C2:  ATSC Channel:{0} Frequency:{1}"' dvbaChannel.PhysicalChannel'                                dvbaChannel.Frequency);              frequency = (int)dvbaChannel.Frequency;              pmtPid = dvbaChannel.PmtPid;            }            else            {              Log.Log.WriteFile("DVBGraphSkyStar2:  ATSC Channel:{0}"' dvbaChannel.PhysicalChannel);              //#DM B2C2 SDK says ATSC is tuned by frequency. Here we work the OTA frequency by channel number#              int atscfreq = 0;              if (dvbaChannel.PhysicalChannel <= 6)                atscfreq = 45 + (dvbaChannel.PhysicalChannel * 6);              if (dvbaChannel.PhysicalChannel >= 7 && dvbaChannel.PhysicalChannel <= 13)                atscfreq = 177 + ((dvbaChannel.PhysicalChannel - 7) * 6);              if (dvbaChannel.PhysicalChannel >= 14)                atscfreq = 473 + ((dvbaChannel.PhysicalChannel - 14) * 6);              //#DM changed tuning parameter from physical channel to calculated frequency above.              frequency = atscfreq;              Log.Log.WriteFile("ss2:  ATSC Frequency:{0} MHz"' frequency);              pmtPid = dvbaChannel.PmtPid;            }            break;        }
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,BeforeTune,The following statement contains a magic number: switch (_cardType)        {          case CardType.DvbS:            DVBSChannel dvbsChannel = channel as DVBSChannel;            if (dvbsChannel == null)            {              Log.Log.Error("Channel is not a DVBS channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBSChannel oldChannels = (DVBSChannel)CurrentChannel;              if (oldChannels.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbsChannel.Frequency;            symbolRate = dvbsChannel.SymbolRate;            satelliteIndex = dvbsChannel.SatelliteIndex;            bool hiBand = BandTypeConverter.IsHiBand(dvbsChannel' Parameters);            int lof1' lof2' sw;            BandTypeConverter.GetDefaultLnbSetup(Parameters' dvbsChannel.BandType' out lof1' out lof2' out sw);            int lnbFrequency;            if (BandTypeConverter.IsHiBand(dvbsChannel' Parameters))              lnbFrequency = lof2 * 1000;            else              lnbFrequency = lof1 * 1000;            //0=horizontal or left' 1=vertical or right            polarity = 0;            if (dvbsChannel.Polarisation == Polarisation.LinearV)              polarity = 1;            if (dvbsChannel.Polarisation == Polarisation.CircularR)              polarity = 1;            Log.Log.WriteFile("ss2:  Polarity:{0} {1}"' dvbsChannel.Polarisation' polarity);            lnbSelection = LNBSelectionType.Lnb0;            if (dvbsChannel.BandType == BandType.Universal)            {              //only set the LNB (22'33'44) Khz tone when we use ku-band and are in hi-band              switch (lnbKhzTone)              {                case 22:                  lnbSelection = LNBSelectionType.Lnb22kHz;                  break;              }              if (hiBand == false)              {                lnbSelection = LNBSelectionType.Lnb0;              }            }            switch (dvbsChannel.DisEqc)            {              case DisEqcType.None: // none                disType = SS2DisEqcType.None;                break;              case DisEqcType.SimpleA: // Simple A                disType = SS2DisEqcType.Simple_A;                break;              case DisEqcType.SimpleB: // Simple B                disType = SS2DisEqcType.Simple_B;                break;              case DisEqcType.Level1AA: // Level 1 A/A                disType = SS2DisEqcType.Level_1_A_A;                break;              case DisEqcType.Level1BA: // Level 1 B/A                disType = SS2DisEqcType.Level_1_B_A;                break;              case DisEqcType.Level1AB: // Level 1 A/B                disType = SS2DisEqcType.Level_1_A_B;                break;              case DisEqcType.Level1BB: // Level 1 B/B                disType = SS2DisEqcType.Level_1_B_B;                break;            }            switchFreq = lnbFrequency / 1000; //in MHz            pmtPid = dvbsChannel.PmtPid;            break;          case CardType.DvbT:            DVBTChannel dvbtChannel = channel as DVBTChannel;            if (dvbtChannel == null)            {              Log.Log.Error("Channel is not a DVBT channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBTChannel oldChannelt = (DVBTChannel)CurrentChannel;              if (oldChannelt.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbtChannel.Frequency;            bandWidth = dvbtChannel.BandWidth;            pmtPid = dvbtChannel.PmtPid;            break;          case CardType.DvbC:            DVBCChannel dvbcChannel = channel as DVBCChannel;            if (dvbcChannel == null)            {              Log.Log.Error("Channel is not a DVBC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBCChannel oldChannelc = (DVBCChannel)CurrentChannel;              if (oldChannelc.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbcChannel.Frequency;            symbolRate = dvbcChannel.SymbolRate;            switch (dvbcChannel.ModulationType)            {              case ModulationType.Mod16Qam:                modulation = (int)eModulationTAG.QAM_16;                break;              case ModulationType.Mod32Qam:                modulation = (int)eModulationTAG.QAM_32;                break;              case ModulationType.Mod64Qam:                modulation = (int)eModulationTAG.QAM_64;                break;              case ModulationType.Mod128Qam:                modulation = (int)eModulationTAG.QAM_128;                break;              case ModulationType.Mod256Qam:                modulation = (int)eModulationTAG.QAM_256;                break;            }            pmtPid = dvbcChannel.PmtPid;            break;          case CardType.Atsc:            ATSCChannel dvbaChannel = channel as ATSCChannel;            if (dvbaChannel == null)            {              Log.Log.Error("Channel is not a ATSC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              ATSCChannel oldChannela = (ATSCChannel)CurrentChannel;              if (oldChannela.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            //if modulation = 256QAM assume ATSC QAM for HD5000            if (dvbaChannel.ModulationType == ModulationType.Mod256Qam)            {              Log.Log.WriteFile("DVBGraphB2C2:  ATSC Channel:{0} Frequency:{1}"' dvbaChannel.PhysicalChannel'                                dvbaChannel.Frequency);              frequency = (int)dvbaChannel.Frequency;              pmtPid = dvbaChannel.PmtPid;            }            else            {              Log.Log.WriteFile("DVBGraphSkyStar2:  ATSC Channel:{0}"' dvbaChannel.PhysicalChannel);              //#DM B2C2 SDK says ATSC is tuned by frequency. Here we work the OTA frequency by channel number#              int atscfreq = 0;              if (dvbaChannel.PhysicalChannel <= 6)                atscfreq = 45 + (dvbaChannel.PhysicalChannel * 6);              if (dvbaChannel.PhysicalChannel >= 7 && dvbaChannel.PhysicalChannel <= 13)                atscfreq = 177 + ((dvbaChannel.PhysicalChannel - 7) * 6);              if (dvbaChannel.PhysicalChannel >= 14)                atscfreq = 473 + ((dvbaChannel.PhysicalChannel - 14) * 6);              //#DM changed tuning parameter from physical channel to calculated frequency above.              frequency = atscfreq;              Log.Log.WriteFile("ss2:  ATSC Frequency:{0} MHz"' frequency);              pmtPid = dvbaChannel.PmtPid;            }            break;        }
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,BeforeTune,The following statement contains a magic number: switch (_cardType)        {          case CardType.DvbS:            DVBSChannel dvbsChannel = channel as DVBSChannel;            if (dvbsChannel == null)            {              Log.Log.Error("Channel is not a DVBS channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBSChannel oldChannels = (DVBSChannel)CurrentChannel;              if (oldChannels.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbsChannel.Frequency;            symbolRate = dvbsChannel.SymbolRate;            satelliteIndex = dvbsChannel.SatelliteIndex;            bool hiBand = BandTypeConverter.IsHiBand(dvbsChannel' Parameters);            int lof1' lof2' sw;            BandTypeConverter.GetDefaultLnbSetup(Parameters' dvbsChannel.BandType' out lof1' out lof2' out sw);            int lnbFrequency;            if (BandTypeConverter.IsHiBand(dvbsChannel' Parameters))              lnbFrequency = lof2 * 1000;            else              lnbFrequency = lof1 * 1000;            //0=horizontal or left' 1=vertical or right            polarity = 0;            if (dvbsChannel.Polarisation == Polarisation.LinearV)              polarity = 1;            if (dvbsChannel.Polarisation == Polarisation.CircularR)              polarity = 1;            Log.Log.WriteFile("ss2:  Polarity:{0} {1}"' dvbsChannel.Polarisation' polarity);            lnbSelection = LNBSelectionType.Lnb0;            if (dvbsChannel.BandType == BandType.Universal)            {              //only set the LNB (22'33'44) Khz tone when we use ku-band and are in hi-band              switch (lnbKhzTone)              {                case 22:                  lnbSelection = LNBSelectionType.Lnb22kHz;                  break;              }              if (hiBand == false)              {                lnbSelection = LNBSelectionType.Lnb0;              }            }            switch (dvbsChannel.DisEqc)            {              case DisEqcType.None: // none                disType = SS2DisEqcType.None;                break;              case DisEqcType.SimpleA: // Simple A                disType = SS2DisEqcType.Simple_A;                break;              case DisEqcType.SimpleB: // Simple B                disType = SS2DisEqcType.Simple_B;                break;              case DisEqcType.Level1AA: // Level 1 A/A                disType = SS2DisEqcType.Level_1_A_A;                break;              case DisEqcType.Level1BA: // Level 1 B/A                disType = SS2DisEqcType.Level_1_B_A;                break;              case DisEqcType.Level1AB: // Level 1 A/B                disType = SS2DisEqcType.Level_1_A_B;                break;              case DisEqcType.Level1BB: // Level 1 B/B                disType = SS2DisEqcType.Level_1_B_B;                break;            }            switchFreq = lnbFrequency / 1000; //in MHz            pmtPid = dvbsChannel.PmtPid;            break;          case CardType.DvbT:            DVBTChannel dvbtChannel = channel as DVBTChannel;            if (dvbtChannel == null)            {              Log.Log.Error("Channel is not a DVBT channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBTChannel oldChannelt = (DVBTChannel)CurrentChannel;              if (oldChannelt.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbtChannel.Frequency;            bandWidth = dvbtChannel.BandWidth;            pmtPid = dvbtChannel.PmtPid;            break;          case CardType.DvbC:            DVBCChannel dvbcChannel = channel as DVBCChannel;            if (dvbcChannel == null)            {              Log.Log.Error("Channel is not a DVBC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBCChannel oldChannelc = (DVBCChannel)CurrentChannel;              if (oldChannelc.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbcChannel.Frequency;            symbolRate = dvbcChannel.SymbolRate;            switch (dvbcChannel.ModulationType)            {              case ModulationType.Mod16Qam:                modulation = (int)eModulationTAG.QAM_16;                break;              case ModulationType.Mod32Qam:                modulation = (int)eModulationTAG.QAM_32;                break;              case ModulationType.Mod64Qam:                modulation = (int)eModulationTAG.QAM_64;                break;              case ModulationType.Mod128Qam:                modulation = (int)eModulationTAG.QAM_128;                break;              case ModulationType.Mod256Qam:                modulation = (int)eModulationTAG.QAM_256;                break;            }            pmtPid = dvbcChannel.PmtPid;            break;          case CardType.Atsc:            ATSCChannel dvbaChannel = channel as ATSCChannel;            if (dvbaChannel == null)            {              Log.Log.Error("Channel is not a ATSC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              ATSCChannel oldChannela = (ATSCChannel)CurrentChannel;              if (oldChannela.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            //if modulation = 256QAM assume ATSC QAM for HD5000            if (dvbaChannel.ModulationType == ModulationType.Mod256Qam)            {              Log.Log.WriteFile("DVBGraphB2C2:  ATSC Channel:{0} Frequency:{1}"' dvbaChannel.PhysicalChannel'                                dvbaChannel.Frequency);              frequency = (int)dvbaChannel.Frequency;              pmtPid = dvbaChannel.PmtPid;            }            else            {              Log.Log.WriteFile("DVBGraphSkyStar2:  ATSC Channel:{0}"' dvbaChannel.PhysicalChannel);              //#DM B2C2 SDK says ATSC is tuned by frequency. Here we work the OTA frequency by channel number#              int atscfreq = 0;              if (dvbaChannel.PhysicalChannel <= 6)                atscfreq = 45 + (dvbaChannel.PhysicalChannel * 6);              if (dvbaChannel.PhysicalChannel >= 7 && dvbaChannel.PhysicalChannel <= 13)                atscfreq = 177 + ((dvbaChannel.PhysicalChannel - 7) * 6);              if (dvbaChannel.PhysicalChannel >= 14)                atscfreq = 473 + ((dvbaChannel.PhysicalChannel - 14) * 6);              //#DM changed tuning parameter from physical channel to calculated frequency above.              frequency = atscfreq;              Log.Log.WriteFile("ss2:  ATSC Frequency:{0} MHz"' frequency);              pmtPid = dvbaChannel.PmtPid;            }            break;        }
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,BeforeTune,The following statement contains a magic number: switch (_cardType)        {          case CardType.DvbS:            DVBSChannel dvbsChannel = channel as DVBSChannel;            if (dvbsChannel == null)            {              Log.Log.Error("Channel is not a DVBS channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBSChannel oldChannels = (DVBSChannel)CurrentChannel;              if (oldChannels.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbsChannel.Frequency;            symbolRate = dvbsChannel.SymbolRate;            satelliteIndex = dvbsChannel.SatelliteIndex;            bool hiBand = BandTypeConverter.IsHiBand(dvbsChannel' Parameters);            int lof1' lof2' sw;            BandTypeConverter.GetDefaultLnbSetup(Parameters' dvbsChannel.BandType' out lof1' out lof2' out sw);            int lnbFrequency;            if (BandTypeConverter.IsHiBand(dvbsChannel' Parameters))              lnbFrequency = lof2 * 1000;            else              lnbFrequency = lof1 * 1000;            //0=horizontal or left' 1=vertical or right            polarity = 0;            if (dvbsChannel.Polarisation == Polarisation.LinearV)              polarity = 1;            if (dvbsChannel.Polarisation == Polarisation.CircularR)              polarity = 1;            Log.Log.WriteFile("ss2:  Polarity:{0} {1}"' dvbsChannel.Polarisation' polarity);            lnbSelection = LNBSelectionType.Lnb0;            if (dvbsChannel.BandType == BandType.Universal)            {              //only set the LNB (22'33'44) Khz tone when we use ku-band and are in hi-band              switch (lnbKhzTone)              {                case 22:                  lnbSelection = LNBSelectionType.Lnb22kHz;                  break;              }              if (hiBand == false)              {                lnbSelection = LNBSelectionType.Lnb0;              }            }            switch (dvbsChannel.DisEqc)            {              case DisEqcType.None: // none                disType = SS2DisEqcType.None;                break;              case DisEqcType.SimpleA: // Simple A                disType = SS2DisEqcType.Simple_A;                break;              case DisEqcType.SimpleB: // Simple B                disType = SS2DisEqcType.Simple_B;                break;              case DisEqcType.Level1AA: // Level 1 A/A                disType = SS2DisEqcType.Level_1_A_A;                break;              case DisEqcType.Level1BA: // Level 1 B/A                disType = SS2DisEqcType.Level_1_B_A;                break;              case DisEqcType.Level1AB: // Level 1 A/B                disType = SS2DisEqcType.Level_1_A_B;                break;              case DisEqcType.Level1BB: // Level 1 B/B                disType = SS2DisEqcType.Level_1_B_B;                break;            }            switchFreq = lnbFrequency / 1000; //in MHz            pmtPid = dvbsChannel.PmtPid;            break;          case CardType.DvbT:            DVBTChannel dvbtChannel = channel as DVBTChannel;            if (dvbtChannel == null)            {              Log.Log.Error("Channel is not a DVBT channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBTChannel oldChannelt = (DVBTChannel)CurrentChannel;              if (oldChannelt.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbtChannel.Frequency;            bandWidth = dvbtChannel.BandWidth;            pmtPid = dvbtChannel.PmtPid;            break;          case CardType.DvbC:            DVBCChannel dvbcChannel = channel as DVBCChannel;            if (dvbcChannel == null)            {              Log.Log.Error("Channel is not a DVBC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBCChannel oldChannelc = (DVBCChannel)CurrentChannel;              if (oldChannelc.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbcChannel.Frequency;            symbolRate = dvbcChannel.SymbolRate;            switch (dvbcChannel.ModulationType)            {              case ModulationType.Mod16Qam:                modulation = (int)eModulationTAG.QAM_16;                break;              case ModulationType.Mod32Qam:                modulation = (int)eModulationTAG.QAM_32;                break;              case ModulationType.Mod64Qam:                modulation = (int)eModulationTAG.QAM_64;                break;              case ModulationType.Mod128Qam:                modulation = (int)eModulationTAG.QAM_128;                break;              case ModulationType.Mod256Qam:                modulation = (int)eModulationTAG.QAM_256;                break;            }            pmtPid = dvbcChannel.PmtPid;            break;          case CardType.Atsc:            ATSCChannel dvbaChannel = channel as ATSCChannel;            if (dvbaChannel == null)            {              Log.Log.Error("Channel is not a ATSC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              ATSCChannel oldChannela = (ATSCChannel)CurrentChannel;              if (oldChannela.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            //if modulation = 256QAM assume ATSC QAM for HD5000            if (dvbaChannel.ModulationType == ModulationType.Mod256Qam)            {              Log.Log.WriteFile("DVBGraphB2C2:  ATSC Channel:{0} Frequency:{1}"' dvbaChannel.PhysicalChannel'                                dvbaChannel.Frequency);              frequency = (int)dvbaChannel.Frequency;              pmtPid = dvbaChannel.PmtPid;            }            else            {              Log.Log.WriteFile("DVBGraphSkyStar2:  ATSC Channel:{0}"' dvbaChannel.PhysicalChannel);              //#DM B2C2 SDK says ATSC is tuned by frequency. Here we work the OTA frequency by channel number#              int atscfreq = 0;              if (dvbaChannel.PhysicalChannel <= 6)                atscfreq = 45 + (dvbaChannel.PhysicalChannel * 6);              if (dvbaChannel.PhysicalChannel >= 7 && dvbaChannel.PhysicalChannel <= 13)                atscfreq = 177 + ((dvbaChannel.PhysicalChannel - 7) * 6);              if (dvbaChannel.PhysicalChannel >= 14)                atscfreq = 473 + ((dvbaChannel.PhysicalChannel - 14) * 6);              //#DM changed tuning parameter from physical channel to calculated frequency above.              frequency = atscfreq;              Log.Log.WriteFile("ss2:  ATSC Frequency:{0} MHz"' frequency);              pmtPid = dvbaChannel.PmtPid;            }            break;        }
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,BeforeTune,The following statement contains a magic number: switch (_cardType)        {          case CardType.DvbS:            DVBSChannel dvbsChannel = channel as DVBSChannel;            if (dvbsChannel == null)            {              Log.Log.Error("Channel is not a DVBS channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBSChannel oldChannels = (DVBSChannel)CurrentChannel;              if (oldChannels.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbsChannel.Frequency;            symbolRate = dvbsChannel.SymbolRate;            satelliteIndex = dvbsChannel.SatelliteIndex;            bool hiBand = BandTypeConverter.IsHiBand(dvbsChannel' Parameters);            int lof1' lof2' sw;            BandTypeConverter.GetDefaultLnbSetup(Parameters' dvbsChannel.BandType' out lof1' out lof2' out sw);            int lnbFrequency;            if (BandTypeConverter.IsHiBand(dvbsChannel' Parameters))              lnbFrequency = lof2 * 1000;            else              lnbFrequency = lof1 * 1000;            //0=horizontal or left' 1=vertical or right            polarity = 0;            if (dvbsChannel.Polarisation == Polarisation.LinearV)              polarity = 1;            if (dvbsChannel.Polarisation == Polarisation.CircularR)              polarity = 1;            Log.Log.WriteFile("ss2:  Polarity:{0} {1}"' dvbsChannel.Polarisation' polarity);            lnbSelection = LNBSelectionType.Lnb0;            if (dvbsChannel.BandType == BandType.Universal)            {              //only set the LNB (22'33'44) Khz tone when we use ku-band and are in hi-band              switch (lnbKhzTone)              {                case 22:                  lnbSelection = LNBSelectionType.Lnb22kHz;                  break;              }              if (hiBand == false)              {                lnbSelection = LNBSelectionType.Lnb0;              }            }            switch (dvbsChannel.DisEqc)            {              case DisEqcType.None: // none                disType = SS2DisEqcType.None;                break;              case DisEqcType.SimpleA: // Simple A                disType = SS2DisEqcType.Simple_A;                break;              case DisEqcType.SimpleB: // Simple B                disType = SS2DisEqcType.Simple_B;                break;              case DisEqcType.Level1AA: // Level 1 A/A                disType = SS2DisEqcType.Level_1_A_A;                break;              case DisEqcType.Level1BA: // Level 1 B/A                disType = SS2DisEqcType.Level_1_B_A;                break;              case DisEqcType.Level1AB: // Level 1 A/B                disType = SS2DisEqcType.Level_1_A_B;                break;              case DisEqcType.Level1BB: // Level 1 B/B                disType = SS2DisEqcType.Level_1_B_B;                break;            }            switchFreq = lnbFrequency / 1000; //in MHz            pmtPid = dvbsChannel.PmtPid;            break;          case CardType.DvbT:            DVBTChannel dvbtChannel = channel as DVBTChannel;            if (dvbtChannel == null)            {              Log.Log.Error("Channel is not a DVBT channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBTChannel oldChannelt = (DVBTChannel)CurrentChannel;              if (oldChannelt.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbtChannel.Frequency;            bandWidth = dvbtChannel.BandWidth;            pmtPid = dvbtChannel.PmtPid;            break;          case CardType.DvbC:            DVBCChannel dvbcChannel = channel as DVBCChannel;            if (dvbcChannel == null)            {              Log.Log.Error("Channel is not a DVBC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBCChannel oldChannelc = (DVBCChannel)CurrentChannel;              if (oldChannelc.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbcChannel.Frequency;            symbolRate = dvbcChannel.SymbolRate;            switch (dvbcChannel.ModulationType)            {              case ModulationType.Mod16Qam:                modulation = (int)eModulationTAG.QAM_16;                break;              case ModulationType.Mod32Qam:                modulation = (int)eModulationTAG.QAM_32;                break;              case ModulationType.Mod64Qam:                modulation = (int)eModulationTAG.QAM_64;                break;              case ModulationType.Mod128Qam:                modulation = (int)eModulationTAG.QAM_128;                break;              case ModulationType.Mod256Qam:                modulation = (int)eModulationTAG.QAM_256;                break;            }            pmtPid = dvbcChannel.PmtPid;            break;          case CardType.Atsc:            ATSCChannel dvbaChannel = channel as ATSCChannel;            if (dvbaChannel == null)            {              Log.Log.Error("Channel is not a ATSC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              ATSCChannel oldChannela = (ATSCChannel)CurrentChannel;              if (oldChannela.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            //if modulation = 256QAM assume ATSC QAM for HD5000            if (dvbaChannel.ModulationType == ModulationType.Mod256Qam)            {              Log.Log.WriteFile("DVBGraphB2C2:  ATSC Channel:{0} Frequency:{1}"' dvbaChannel.PhysicalChannel'                                dvbaChannel.Frequency);              frequency = (int)dvbaChannel.Frequency;              pmtPid = dvbaChannel.PmtPid;            }            else            {              Log.Log.WriteFile("DVBGraphSkyStar2:  ATSC Channel:{0}"' dvbaChannel.PhysicalChannel);              //#DM B2C2 SDK says ATSC is tuned by frequency. Here we work the OTA frequency by channel number#              int atscfreq = 0;              if (dvbaChannel.PhysicalChannel <= 6)                atscfreq = 45 + (dvbaChannel.PhysicalChannel * 6);              if (dvbaChannel.PhysicalChannel >= 7 && dvbaChannel.PhysicalChannel <= 13)                atscfreq = 177 + ((dvbaChannel.PhysicalChannel - 7) * 6);              if (dvbaChannel.PhysicalChannel >= 14)                atscfreq = 473 + ((dvbaChannel.PhysicalChannel - 14) * 6);              //#DM changed tuning parameter from physical channel to calculated frequency above.              frequency = atscfreq;              Log.Log.WriteFile("ss2:  ATSC Frequency:{0} MHz"' frequency);              pmtPid = dvbaChannel.PmtPid;            }            break;        }
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,BeforeTune,The following statement contains a magic number: switch (_cardType)        {          case CardType.DvbS:            DVBSChannel dvbsChannel = channel as DVBSChannel;            if (dvbsChannel == null)            {              Log.Log.Error("Channel is not a DVBS channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBSChannel oldChannels = (DVBSChannel)CurrentChannel;              if (oldChannels.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbsChannel.Frequency;            symbolRate = dvbsChannel.SymbolRate;            satelliteIndex = dvbsChannel.SatelliteIndex;            bool hiBand = BandTypeConverter.IsHiBand(dvbsChannel' Parameters);            int lof1' lof2' sw;            BandTypeConverter.GetDefaultLnbSetup(Parameters' dvbsChannel.BandType' out lof1' out lof2' out sw);            int lnbFrequency;            if (BandTypeConverter.IsHiBand(dvbsChannel' Parameters))              lnbFrequency = lof2 * 1000;            else              lnbFrequency = lof1 * 1000;            //0=horizontal or left' 1=vertical or right            polarity = 0;            if (dvbsChannel.Polarisation == Polarisation.LinearV)              polarity = 1;            if (dvbsChannel.Polarisation == Polarisation.CircularR)              polarity = 1;            Log.Log.WriteFile("ss2:  Polarity:{0} {1}"' dvbsChannel.Polarisation' polarity);            lnbSelection = LNBSelectionType.Lnb0;            if (dvbsChannel.BandType == BandType.Universal)            {              //only set the LNB (22'33'44) Khz tone when we use ku-band and are in hi-band              switch (lnbKhzTone)              {                case 22:                  lnbSelection = LNBSelectionType.Lnb22kHz;                  break;              }              if (hiBand == false)              {                lnbSelection = LNBSelectionType.Lnb0;              }            }            switch (dvbsChannel.DisEqc)            {              case DisEqcType.None: // none                disType = SS2DisEqcType.None;                break;              case DisEqcType.SimpleA: // Simple A                disType = SS2DisEqcType.Simple_A;                break;              case DisEqcType.SimpleB: // Simple B                disType = SS2DisEqcType.Simple_B;                break;              case DisEqcType.Level1AA: // Level 1 A/A                disType = SS2DisEqcType.Level_1_A_A;                break;              case DisEqcType.Level1BA: // Level 1 B/A                disType = SS2DisEqcType.Level_1_B_A;                break;              case DisEqcType.Level1AB: // Level 1 A/B                disType = SS2DisEqcType.Level_1_A_B;                break;              case DisEqcType.Level1BB: // Level 1 B/B                disType = SS2DisEqcType.Level_1_B_B;                break;            }            switchFreq = lnbFrequency / 1000; //in MHz            pmtPid = dvbsChannel.PmtPid;            break;          case CardType.DvbT:            DVBTChannel dvbtChannel = channel as DVBTChannel;            if (dvbtChannel == null)            {              Log.Log.Error("Channel is not a DVBT channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBTChannel oldChannelt = (DVBTChannel)CurrentChannel;              if (oldChannelt.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbtChannel.Frequency;            bandWidth = dvbtChannel.BandWidth;            pmtPid = dvbtChannel.PmtPid;            break;          case CardType.DvbC:            DVBCChannel dvbcChannel = channel as DVBCChannel;            if (dvbcChannel == null)            {              Log.Log.Error("Channel is not a DVBC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBCChannel oldChannelc = (DVBCChannel)CurrentChannel;              if (oldChannelc.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbcChannel.Frequency;            symbolRate = dvbcChannel.SymbolRate;            switch (dvbcChannel.ModulationType)            {              case ModulationType.Mod16Qam:                modulation = (int)eModulationTAG.QAM_16;                break;              case ModulationType.Mod32Qam:                modulation = (int)eModulationTAG.QAM_32;                break;              case ModulationType.Mod64Qam:                modulation = (int)eModulationTAG.QAM_64;                break;              case ModulationType.Mod128Qam:                modulation = (int)eModulationTAG.QAM_128;                break;              case ModulationType.Mod256Qam:                modulation = (int)eModulationTAG.QAM_256;                break;            }            pmtPid = dvbcChannel.PmtPid;            break;          case CardType.Atsc:            ATSCChannel dvbaChannel = channel as ATSCChannel;            if (dvbaChannel == null)            {              Log.Log.Error("Channel is not a ATSC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              ATSCChannel oldChannela = (ATSCChannel)CurrentChannel;              if (oldChannela.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            //if modulation = 256QAM assume ATSC QAM for HD5000            if (dvbaChannel.ModulationType == ModulationType.Mod256Qam)            {              Log.Log.WriteFile("DVBGraphB2C2:  ATSC Channel:{0} Frequency:{1}"' dvbaChannel.PhysicalChannel'                                dvbaChannel.Frequency);              frequency = (int)dvbaChannel.Frequency;              pmtPid = dvbaChannel.PmtPid;            }            else            {              Log.Log.WriteFile("DVBGraphSkyStar2:  ATSC Channel:{0}"' dvbaChannel.PhysicalChannel);              //#DM B2C2 SDK says ATSC is tuned by frequency. Here we work the OTA frequency by channel number#              int atscfreq = 0;              if (dvbaChannel.PhysicalChannel <= 6)                atscfreq = 45 + (dvbaChannel.PhysicalChannel * 6);              if (dvbaChannel.PhysicalChannel >= 7 && dvbaChannel.PhysicalChannel <= 13)                atscfreq = 177 + ((dvbaChannel.PhysicalChannel - 7) * 6);              if (dvbaChannel.PhysicalChannel >= 14)                atscfreq = 473 + ((dvbaChannel.PhysicalChannel - 14) * 6);              //#DM changed tuning parameter from physical channel to calculated frequency above.              frequency = atscfreq;              Log.Log.WriteFile("ss2:  ATSC Frequency:{0} MHz"' frequency);              pmtPid = dvbaChannel.PmtPid;            }            break;        }
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,BeforeTune,The following statement contains a magic number: switch (_cardType)        {          case CardType.DvbS:            DVBSChannel dvbsChannel = channel as DVBSChannel;            if (dvbsChannel == null)            {              Log.Log.Error("Channel is not a DVBS channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBSChannel oldChannels = (DVBSChannel)CurrentChannel;              if (oldChannels.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbsChannel.Frequency;            symbolRate = dvbsChannel.SymbolRate;            satelliteIndex = dvbsChannel.SatelliteIndex;            bool hiBand = BandTypeConverter.IsHiBand(dvbsChannel' Parameters);            int lof1' lof2' sw;            BandTypeConverter.GetDefaultLnbSetup(Parameters' dvbsChannel.BandType' out lof1' out lof2' out sw);            int lnbFrequency;            if (BandTypeConverter.IsHiBand(dvbsChannel' Parameters))              lnbFrequency = lof2 * 1000;            else              lnbFrequency = lof1 * 1000;            //0=horizontal or left' 1=vertical or right            polarity = 0;            if (dvbsChannel.Polarisation == Polarisation.LinearV)              polarity = 1;            if (dvbsChannel.Polarisation == Polarisation.CircularR)              polarity = 1;            Log.Log.WriteFile("ss2:  Polarity:{0} {1}"' dvbsChannel.Polarisation' polarity);            lnbSelection = LNBSelectionType.Lnb0;            if (dvbsChannel.BandType == BandType.Universal)            {              //only set the LNB (22'33'44) Khz tone when we use ku-band and are in hi-band              switch (lnbKhzTone)              {                case 22:                  lnbSelection = LNBSelectionType.Lnb22kHz;                  break;              }              if (hiBand == false)              {                lnbSelection = LNBSelectionType.Lnb0;              }            }            switch (dvbsChannel.DisEqc)            {              case DisEqcType.None: // none                disType = SS2DisEqcType.None;                break;              case DisEqcType.SimpleA: // Simple A                disType = SS2DisEqcType.Simple_A;                break;              case DisEqcType.SimpleB: // Simple B                disType = SS2DisEqcType.Simple_B;                break;              case DisEqcType.Level1AA: // Level 1 A/A                disType = SS2DisEqcType.Level_1_A_A;                break;              case DisEqcType.Level1BA: // Level 1 B/A                disType = SS2DisEqcType.Level_1_B_A;                break;              case DisEqcType.Level1AB: // Level 1 A/B                disType = SS2DisEqcType.Level_1_A_B;                break;              case DisEqcType.Level1BB: // Level 1 B/B                disType = SS2DisEqcType.Level_1_B_B;                break;            }            switchFreq = lnbFrequency / 1000; //in MHz            pmtPid = dvbsChannel.PmtPid;            break;          case CardType.DvbT:            DVBTChannel dvbtChannel = channel as DVBTChannel;            if (dvbtChannel == null)            {              Log.Log.Error("Channel is not a DVBT channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBTChannel oldChannelt = (DVBTChannel)CurrentChannel;              if (oldChannelt.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbtChannel.Frequency;            bandWidth = dvbtChannel.BandWidth;            pmtPid = dvbtChannel.PmtPid;            break;          case CardType.DvbC:            DVBCChannel dvbcChannel = channel as DVBCChannel;            if (dvbcChannel == null)            {              Log.Log.Error("Channel is not a DVBC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBCChannel oldChannelc = (DVBCChannel)CurrentChannel;              if (oldChannelc.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbcChannel.Frequency;            symbolRate = dvbcChannel.SymbolRate;            switch (dvbcChannel.ModulationType)            {              case ModulationType.Mod16Qam:                modulation = (int)eModulationTAG.QAM_16;                break;              case ModulationType.Mod32Qam:                modulation = (int)eModulationTAG.QAM_32;                break;              case ModulationType.Mod64Qam:                modulation = (int)eModulationTAG.QAM_64;                break;              case ModulationType.Mod128Qam:                modulation = (int)eModulationTAG.QAM_128;                break;              case ModulationType.Mod256Qam:                modulation = (int)eModulationTAG.QAM_256;                break;            }            pmtPid = dvbcChannel.PmtPid;            break;          case CardType.Atsc:            ATSCChannel dvbaChannel = channel as ATSCChannel;            if (dvbaChannel == null)            {              Log.Log.Error("Channel is not a ATSC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              ATSCChannel oldChannela = (ATSCChannel)CurrentChannel;              if (oldChannela.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            //if modulation = 256QAM assume ATSC QAM for HD5000            if (dvbaChannel.ModulationType == ModulationType.Mod256Qam)            {              Log.Log.WriteFile("DVBGraphB2C2:  ATSC Channel:{0} Frequency:{1}"' dvbaChannel.PhysicalChannel'                                dvbaChannel.Frequency);              frequency = (int)dvbaChannel.Frequency;              pmtPid = dvbaChannel.PmtPid;            }            else            {              Log.Log.WriteFile("DVBGraphSkyStar2:  ATSC Channel:{0}"' dvbaChannel.PhysicalChannel);              //#DM B2C2 SDK says ATSC is tuned by frequency. Here we work the OTA frequency by channel number#              int atscfreq = 0;              if (dvbaChannel.PhysicalChannel <= 6)                atscfreq = 45 + (dvbaChannel.PhysicalChannel * 6);              if (dvbaChannel.PhysicalChannel >= 7 && dvbaChannel.PhysicalChannel <= 13)                atscfreq = 177 + ((dvbaChannel.PhysicalChannel - 7) * 6);              if (dvbaChannel.PhysicalChannel >= 14)                atscfreq = 473 + ((dvbaChannel.PhysicalChannel - 14) * 6);              //#DM changed tuning parameter from physical channel to calculated frequency above.              frequency = atscfreq;              Log.Log.WriteFile("ss2:  ATSC Frequency:{0} MHz"' frequency);              pmtPid = dvbaChannel.PmtPid;            }            break;        }
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,BeforeTune,The following statement contains a magic number: switch (_cardType)        {          case CardType.DvbS:            DVBSChannel dvbsChannel = channel as DVBSChannel;            if (dvbsChannel == null)            {              Log.Log.Error("Channel is not a DVBS channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBSChannel oldChannels = (DVBSChannel)CurrentChannel;              if (oldChannels.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbsChannel.Frequency;            symbolRate = dvbsChannel.SymbolRate;            satelliteIndex = dvbsChannel.SatelliteIndex;            bool hiBand = BandTypeConverter.IsHiBand(dvbsChannel' Parameters);            int lof1' lof2' sw;            BandTypeConverter.GetDefaultLnbSetup(Parameters' dvbsChannel.BandType' out lof1' out lof2' out sw);            int lnbFrequency;            if (BandTypeConverter.IsHiBand(dvbsChannel' Parameters))              lnbFrequency = lof2 * 1000;            else              lnbFrequency = lof1 * 1000;            //0=horizontal or left' 1=vertical or right            polarity = 0;            if (dvbsChannel.Polarisation == Polarisation.LinearV)              polarity = 1;            if (dvbsChannel.Polarisation == Polarisation.CircularR)              polarity = 1;            Log.Log.WriteFile("ss2:  Polarity:{0} {1}"' dvbsChannel.Polarisation' polarity);            lnbSelection = LNBSelectionType.Lnb0;            if (dvbsChannel.BandType == BandType.Universal)            {              //only set the LNB (22'33'44) Khz tone when we use ku-band and are in hi-band              switch (lnbKhzTone)              {                case 22:                  lnbSelection = LNBSelectionType.Lnb22kHz;                  break;              }              if (hiBand == false)              {                lnbSelection = LNBSelectionType.Lnb0;              }            }            switch (dvbsChannel.DisEqc)            {              case DisEqcType.None: // none                disType = SS2DisEqcType.None;                break;              case DisEqcType.SimpleA: // Simple A                disType = SS2DisEqcType.Simple_A;                break;              case DisEqcType.SimpleB: // Simple B                disType = SS2DisEqcType.Simple_B;                break;              case DisEqcType.Level1AA: // Level 1 A/A                disType = SS2DisEqcType.Level_1_A_A;                break;              case DisEqcType.Level1BA: // Level 1 B/A                disType = SS2DisEqcType.Level_1_B_A;                break;              case DisEqcType.Level1AB: // Level 1 A/B                disType = SS2DisEqcType.Level_1_A_B;                break;              case DisEqcType.Level1BB: // Level 1 B/B                disType = SS2DisEqcType.Level_1_B_B;                break;            }            switchFreq = lnbFrequency / 1000; //in MHz            pmtPid = dvbsChannel.PmtPid;            break;          case CardType.DvbT:            DVBTChannel dvbtChannel = channel as DVBTChannel;            if (dvbtChannel == null)            {              Log.Log.Error("Channel is not a DVBT channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBTChannel oldChannelt = (DVBTChannel)CurrentChannel;              if (oldChannelt.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbtChannel.Frequency;            bandWidth = dvbtChannel.BandWidth;            pmtPid = dvbtChannel.PmtPid;            break;          case CardType.DvbC:            DVBCChannel dvbcChannel = channel as DVBCChannel;            if (dvbcChannel == null)            {              Log.Log.Error("Channel is not a DVBC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBCChannel oldChannelc = (DVBCChannel)CurrentChannel;              if (oldChannelc.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbcChannel.Frequency;            symbolRate = dvbcChannel.SymbolRate;            switch (dvbcChannel.ModulationType)            {              case ModulationType.Mod16Qam:                modulation = (int)eModulationTAG.QAM_16;                break;              case ModulationType.Mod32Qam:                modulation = (int)eModulationTAG.QAM_32;                break;              case ModulationType.Mod64Qam:                modulation = (int)eModulationTAG.QAM_64;                break;              case ModulationType.Mod128Qam:                modulation = (int)eModulationTAG.QAM_128;                break;              case ModulationType.Mod256Qam:                modulation = (int)eModulationTAG.QAM_256;                break;            }            pmtPid = dvbcChannel.PmtPid;            break;          case CardType.Atsc:            ATSCChannel dvbaChannel = channel as ATSCChannel;            if (dvbaChannel == null)            {              Log.Log.Error("Channel is not a ATSC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              ATSCChannel oldChannela = (ATSCChannel)CurrentChannel;              if (oldChannela.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            //if modulation = 256QAM assume ATSC QAM for HD5000            if (dvbaChannel.ModulationType == ModulationType.Mod256Qam)            {              Log.Log.WriteFile("DVBGraphB2C2:  ATSC Channel:{0} Frequency:{1}"' dvbaChannel.PhysicalChannel'                                dvbaChannel.Frequency);              frequency = (int)dvbaChannel.Frequency;              pmtPid = dvbaChannel.PmtPid;            }            else            {              Log.Log.WriteFile("DVBGraphSkyStar2:  ATSC Channel:{0}"' dvbaChannel.PhysicalChannel);              //#DM B2C2 SDK says ATSC is tuned by frequency. Here we work the OTA frequency by channel number#              int atscfreq = 0;              if (dvbaChannel.PhysicalChannel <= 6)                atscfreq = 45 + (dvbaChannel.PhysicalChannel * 6);              if (dvbaChannel.PhysicalChannel >= 7 && dvbaChannel.PhysicalChannel <= 13)                atscfreq = 177 + ((dvbaChannel.PhysicalChannel - 7) * 6);              if (dvbaChannel.PhysicalChannel >= 14)                atscfreq = 473 + ((dvbaChannel.PhysicalChannel - 14) * 6);              //#DM changed tuning parameter from physical channel to calculated frequency above.              frequency = atscfreq;              Log.Log.WriteFile("ss2:  ATSC Frequency:{0} MHz"' frequency);              pmtPid = dvbaChannel.PmtPid;            }            break;        }
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,BeforeTune,The following statement contains a magic number: switch (_cardType)        {          case CardType.DvbS:            DVBSChannel dvbsChannel = channel as DVBSChannel;            if (dvbsChannel == null)            {              Log.Log.Error("Channel is not a DVBS channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBSChannel oldChannels = (DVBSChannel)CurrentChannel;              if (oldChannels.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbsChannel.Frequency;            symbolRate = dvbsChannel.SymbolRate;            satelliteIndex = dvbsChannel.SatelliteIndex;            bool hiBand = BandTypeConverter.IsHiBand(dvbsChannel' Parameters);            int lof1' lof2' sw;            BandTypeConverter.GetDefaultLnbSetup(Parameters' dvbsChannel.BandType' out lof1' out lof2' out sw);            int lnbFrequency;            if (BandTypeConverter.IsHiBand(dvbsChannel' Parameters))              lnbFrequency = lof2 * 1000;            else              lnbFrequency = lof1 * 1000;            //0=horizontal or left' 1=vertical or right            polarity = 0;            if (dvbsChannel.Polarisation == Polarisation.LinearV)              polarity = 1;            if (dvbsChannel.Polarisation == Polarisation.CircularR)              polarity = 1;            Log.Log.WriteFile("ss2:  Polarity:{0} {1}"' dvbsChannel.Polarisation' polarity);            lnbSelection = LNBSelectionType.Lnb0;            if (dvbsChannel.BandType == BandType.Universal)            {              //only set the LNB (22'33'44) Khz tone when we use ku-band and are in hi-band              switch (lnbKhzTone)              {                case 22:                  lnbSelection = LNBSelectionType.Lnb22kHz;                  break;              }              if (hiBand == false)              {                lnbSelection = LNBSelectionType.Lnb0;              }            }            switch (dvbsChannel.DisEqc)            {              case DisEqcType.None: // none                disType = SS2DisEqcType.None;                break;              case DisEqcType.SimpleA: // Simple A                disType = SS2DisEqcType.Simple_A;                break;              case DisEqcType.SimpleB: // Simple B                disType = SS2DisEqcType.Simple_B;                break;              case DisEqcType.Level1AA: // Level 1 A/A                disType = SS2DisEqcType.Level_1_A_A;                break;              case DisEqcType.Level1BA: // Level 1 B/A                disType = SS2DisEqcType.Level_1_B_A;                break;              case DisEqcType.Level1AB: // Level 1 A/B                disType = SS2DisEqcType.Level_1_A_B;                break;              case DisEqcType.Level1BB: // Level 1 B/B                disType = SS2DisEqcType.Level_1_B_B;                break;            }            switchFreq = lnbFrequency / 1000; //in MHz            pmtPid = dvbsChannel.PmtPid;            break;          case CardType.DvbT:            DVBTChannel dvbtChannel = channel as DVBTChannel;            if (dvbtChannel == null)            {              Log.Log.Error("Channel is not a DVBT channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBTChannel oldChannelt = (DVBTChannel)CurrentChannel;              if (oldChannelt.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbtChannel.Frequency;            bandWidth = dvbtChannel.BandWidth;            pmtPid = dvbtChannel.PmtPid;            break;          case CardType.DvbC:            DVBCChannel dvbcChannel = channel as DVBCChannel;            if (dvbcChannel == null)            {              Log.Log.Error("Channel is not a DVBC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBCChannel oldChannelc = (DVBCChannel)CurrentChannel;              if (oldChannelc.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbcChannel.Frequency;            symbolRate = dvbcChannel.SymbolRate;            switch (dvbcChannel.ModulationType)            {              case ModulationType.Mod16Qam:                modulation = (int)eModulationTAG.QAM_16;                break;              case ModulationType.Mod32Qam:                modulation = (int)eModulationTAG.QAM_32;                break;              case ModulationType.Mod64Qam:                modulation = (int)eModulationTAG.QAM_64;                break;              case ModulationType.Mod128Qam:                modulation = (int)eModulationTAG.QAM_128;                break;              case ModulationType.Mod256Qam:                modulation = (int)eModulationTAG.QAM_256;                break;            }            pmtPid = dvbcChannel.PmtPid;            break;          case CardType.Atsc:            ATSCChannel dvbaChannel = channel as ATSCChannel;            if (dvbaChannel == null)            {              Log.Log.Error("Channel is not a ATSC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              ATSCChannel oldChannela = (ATSCChannel)CurrentChannel;              if (oldChannela.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            //if modulation = 256QAM assume ATSC QAM for HD5000            if (dvbaChannel.ModulationType == ModulationType.Mod256Qam)            {              Log.Log.WriteFile("DVBGraphB2C2:  ATSC Channel:{0} Frequency:{1}"' dvbaChannel.PhysicalChannel'                                dvbaChannel.Frequency);              frequency = (int)dvbaChannel.Frequency;              pmtPid = dvbaChannel.PmtPid;            }            else            {              Log.Log.WriteFile("DVBGraphSkyStar2:  ATSC Channel:{0}"' dvbaChannel.PhysicalChannel);              //#DM B2C2 SDK says ATSC is tuned by frequency. Here we work the OTA frequency by channel number#              int atscfreq = 0;              if (dvbaChannel.PhysicalChannel <= 6)                atscfreq = 45 + (dvbaChannel.PhysicalChannel * 6);              if (dvbaChannel.PhysicalChannel >= 7 && dvbaChannel.PhysicalChannel <= 13)                atscfreq = 177 + ((dvbaChannel.PhysicalChannel - 7) * 6);              if (dvbaChannel.PhysicalChannel >= 14)                atscfreq = 473 + ((dvbaChannel.PhysicalChannel - 14) * 6);              //#DM changed tuning parameter from physical channel to calculated frequency above.              frequency = atscfreq;              Log.Log.WriteFile("ss2:  ATSC Frequency:{0} MHz"' frequency);              pmtPid = dvbaChannel.PmtPid;            }            break;        }
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,BeforeTune,The following statement contains a magic number: switch (_cardType)        {          case CardType.DvbS:            DVBSChannel dvbsChannel = channel as DVBSChannel;            if (dvbsChannel == null)            {              Log.Log.Error("Channel is not a DVBS channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBSChannel oldChannels = (DVBSChannel)CurrentChannel;              if (oldChannels.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbsChannel.Frequency;            symbolRate = dvbsChannel.SymbolRate;            satelliteIndex = dvbsChannel.SatelliteIndex;            bool hiBand = BandTypeConverter.IsHiBand(dvbsChannel' Parameters);            int lof1' lof2' sw;            BandTypeConverter.GetDefaultLnbSetup(Parameters' dvbsChannel.BandType' out lof1' out lof2' out sw);            int lnbFrequency;            if (BandTypeConverter.IsHiBand(dvbsChannel' Parameters))              lnbFrequency = lof2 * 1000;            else              lnbFrequency = lof1 * 1000;            //0=horizontal or left' 1=vertical or right            polarity = 0;            if (dvbsChannel.Polarisation == Polarisation.LinearV)              polarity = 1;            if (dvbsChannel.Polarisation == Polarisation.CircularR)              polarity = 1;            Log.Log.WriteFile("ss2:  Polarity:{0} {1}"' dvbsChannel.Polarisation' polarity);            lnbSelection = LNBSelectionType.Lnb0;            if (dvbsChannel.BandType == BandType.Universal)            {              //only set the LNB (22'33'44) Khz tone when we use ku-band and are in hi-band              switch (lnbKhzTone)              {                case 22:                  lnbSelection = LNBSelectionType.Lnb22kHz;                  break;              }              if (hiBand == false)              {                lnbSelection = LNBSelectionType.Lnb0;              }            }            switch (dvbsChannel.DisEqc)            {              case DisEqcType.None: // none                disType = SS2DisEqcType.None;                break;              case DisEqcType.SimpleA: // Simple A                disType = SS2DisEqcType.Simple_A;                break;              case DisEqcType.SimpleB: // Simple B                disType = SS2DisEqcType.Simple_B;                break;              case DisEqcType.Level1AA: // Level 1 A/A                disType = SS2DisEqcType.Level_1_A_A;                break;              case DisEqcType.Level1BA: // Level 1 B/A                disType = SS2DisEqcType.Level_1_B_A;                break;              case DisEqcType.Level1AB: // Level 1 A/B                disType = SS2DisEqcType.Level_1_A_B;                break;              case DisEqcType.Level1BB: // Level 1 B/B                disType = SS2DisEqcType.Level_1_B_B;                break;            }            switchFreq = lnbFrequency / 1000; //in MHz            pmtPid = dvbsChannel.PmtPid;            break;          case CardType.DvbT:            DVBTChannel dvbtChannel = channel as DVBTChannel;            if (dvbtChannel == null)            {              Log.Log.Error("Channel is not a DVBT channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBTChannel oldChannelt = (DVBTChannel)CurrentChannel;              if (oldChannelt.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbtChannel.Frequency;            bandWidth = dvbtChannel.BandWidth;            pmtPid = dvbtChannel.PmtPid;            break;          case CardType.DvbC:            DVBCChannel dvbcChannel = channel as DVBCChannel;            if (dvbcChannel == null)            {              Log.Log.Error("Channel is not a DVBC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBCChannel oldChannelc = (DVBCChannel)CurrentChannel;              if (oldChannelc.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbcChannel.Frequency;            symbolRate = dvbcChannel.SymbolRate;            switch (dvbcChannel.ModulationType)            {              case ModulationType.Mod16Qam:                modulation = (int)eModulationTAG.QAM_16;                break;              case ModulationType.Mod32Qam:                modulation = (int)eModulationTAG.QAM_32;                break;              case ModulationType.Mod64Qam:                modulation = (int)eModulationTAG.QAM_64;                break;              case ModulationType.Mod128Qam:                modulation = (int)eModulationTAG.QAM_128;                break;              case ModulationType.Mod256Qam:                modulation = (int)eModulationTAG.QAM_256;                break;            }            pmtPid = dvbcChannel.PmtPid;            break;          case CardType.Atsc:            ATSCChannel dvbaChannel = channel as ATSCChannel;            if (dvbaChannel == null)            {              Log.Log.Error("Channel is not a ATSC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              ATSCChannel oldChannela = (ATSCChannel)CurrentChannel;              if (oldChannela.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            //if modulation = 256QAM assume ATSC QAM for HD5000            if (dvbaChannel.ModulationType == ModulationType.Mod256Qam)            {              Log.Log.WriteFile("DVBGraphB2C2:  ATSC Channel:{0} Frequency:{1}"' dvbaChannel.PhysicalChannel'                                dvbaChannel.Frequency);              frequency = (int)dvbaChannel.Frequency;              pmtPid = dvbaChannel.PmtPid;            }            else            {              Log.Log.WriteFile("DVBGraphSkyStar2:  ATSC Channel:{0}"' dvbaChannel.PhysicalChannel);              //#DM B2C2 SDK says ATSC is tuned by frequency. Here we work the OTA frequency by channel number#              int atscfreq = 0;              if (dvbaChannel.PhysicalChannel <= 6)                atscfreq = 45 + (dvbaChannel.PhysicalChannel * 6);              if (dvbaChannel.PhysicalChannel >= 7 && dvbaChannel.PhysicalChannel <= 13)                atscfreq = 177 + ((dvbaChannel.PhysicalChannel - 7) * 6);              if (dvbaChannel.PhysicalChannel >= 14)                atscfreq = 473 + ((dvbaChannel.PhysicalChannel - 14) * 6);              //#DM changed tuning parameter from physical channel to calculated frequency above.              frequency = atscfreq;              Log.Log.WriteFile("ss2:  ATSC Frequency:{0} MHz"' frequency);              pmtPid = dvbaChannel.PmtPid;            }            break;        }
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,BeforeTune,The following statement contains a magic number: switch (_cardType)        {          case CardType.DvbS:            DVBSChannel dvbsChannel = channel as DVBSChannel;            if (dvbsChannel == null)            {              Log.Log.Error("Channel is not a DVBS channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBSChannel oldChannels = (DVBSChannel)CurrentChannel;              if (oldChannels.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbsChannel.Frequency;            symbolRate = dvbsChannel.SymbolRate;            satelliteIndex = dvbsChannel.SatelliteIndex;            bool hiBand = BandTypeConverter.IsHiBand(dvbsChannel' Parameters);            int lof1' lof2' sw;            BandTypeConverter.GetDefaultLnbSetup(Parameters' dvbsChannel.BandType' out lof1' out lof2' out sw);            int lnbFrequency;            if (BandTypeConverter.IsHiBand(dvbsChannel' Parameters))              lnbFrequency = lof2 * 1000;            else              lnbFrequency = lof1 * 1000;            //0=horizontal or left' 1=vertical or right            polarity = 0;            if (dvbsChannel.Polarisation == Polarisation.LinearV)              polarity = 1;            if (dvbsChannel.Polarisation == Polarisation.CircularR)              polarity = 1;            Log.Log.WriteFile("ss2:  Polarity:{0} {1}"' dvbsChannel.Polarisation' polarity);            lnbSelection = LNBSelectionType.Lnb0;            if (dvbsChannel.BandType == BandType.Universal)            {              //only set the LNB (22'33'44) Khz tone when we use ku-band and are in hi-band              switch (lnbKhzTone)              {                case 22:                  lnbSelection = LNBSelectionType.Lnb22kHz;                  break;              }              if (hiBand == false)              {                lnbSelection = LNBSelectionType.Lnb0;              }            }            switch (dvbsChannel.DisEqc)            {              case DisEqcType.None: // none                disType = SS2DisEqcType.None;                break;              case DisEqcType.SimpleA: // Simple A                disType = SS2DisEqcType.Simple_A;                break;              case DisEqcType.SimpleB: // Simple B                disType = SS2DisEqcType.Simple_B;                break;              case DisEqcType.Level1AA: // Level 1 A/A                disType = SS2DisEqcType.Level_1_A_A;                break;              case DisEqcType.Level1BA: // Level 1 B/A                disType = SS2DisEqcType.Level_1_B_A;                break;              case DisEqcType.Level1AB: // Level 1 A/B                disType = SS2DisEqcType.Level_1_A_B;                break;              case DisEqcType.Level1BB: // Level 1 B/B                disType = SS2DisEqcType.Level_1_B_B;                break;            }            switchFreq = lnbFrequency / 1000; //in MHz            pmtPid = dvbsChannel.PmtPid;            break;          case CardType.DvbT:            DVBTChannel dvbtChannel = channel as DVBTChannel;            if (dvbtChannel == null)            {              Log.Log.Error("Channel is not a DVBT channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBTChannel oldChannelt = (DVBTChannel)CurrentChannel;              if (oldChannelt.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbtChannel.Frequency;            bandWidth = dvbtChannel.BandWidth;            pmtPid = dvbtChannel.PmtPid;            break;          case CardType.DvbC:            DVBCChannel dvbcChannel = channel as DVBCChannel;            if (dvbcChannel == null)            {              Log.Log.Error("Channel is not a DVBC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBCChannel oldChannelc = (DVBCChannel)CurrentChannel;              if (oldChannelc.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbcChannel.Frequency;            symbolRate = dvbcChannel.SymbolRate;            switch (dvbcChannel.ModulationType)            {              case ModulationType.Mod16Qam:                modulation = (int)eModulationTAG.QAM_16;                break;              case ModulationType.Mod32Qam:                modulation = (int)eModulationTAG.QAM_32;                break;              case ModulationType.Mod64Qam:                modulation = (int)eModulationTAG.QAM_64;                break;              case ModulationType.Mod128Qam:                modulation = (int)eModulationTAG.QAM_128;                break;              case ModulationType.Mod256Qam:                modulation = (int)eModulationTAG.QAM_256;                break;            }            pmtPid = dvbcChannel.PmtPid;            break;          case CardType.Atsc:            ATSCChannel dvbaChannel = channel as ATSCChannel;            if (dvbaChannel == null)            {              Log.Log.Error("Channel is not a ATSC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              ATSCChannel oldChannela = (ATSCChannel)CurrentChannel;              if (oldChannela.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            //if modulation = 256QAM assume ATSC QAM for HD5000            if (dvbaChannel.ModulationType == ModulationType.Mod256Qam)            {              Log.Log.WriteFile("DVBGraphB2C2:  ATSC Channel:{0} Frequency:{1}"' dvbaChannel.PhysicalChannel'                                dvbaChannel.Frequency);              frequency = (int)dvbaChannel.Frequency;              pmtPid = dvbaChannel.PmtPid;            }            else            {              Log.Log.WriteFile("DVBGraphSkyStar2:  ATSC Channel:{0}"' dvbaChannel.PhysicalChannel);              //#DM B2C2 SDK says ATSC is tuned by frequency. Here we work the OTA frequency by channel number#              int atscfreq = 0;              if (dvbaChannel.PhysicalChannel <= 6)                atscfreq = 45 + (dvbaChannel.PhysicalChannel * 6);              if (dvbaChannel.PhysicalChannel >= 7 && dvbaChannel.PhysicalChannel <= 13)                atscfreq = 177 + ((dvbaChannel.PhysicalChannel - 7) * 6);              if (dvbaChannel.PhysicalChannel >= 14)                atscfreq = 473 + ((dvbaChannel.PhysicalChannel - 14) * 6);              //#DM changed tuning parameter from physical channel to calculated frequency above.              frequency = atscfreq;              Log.Log.WriteFile("ss2:  ATSC Frequency:{0} MHz"' frequency);              pmtPid = dvbaChannel.PmtPid;            }            break;        }
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,BeforeTune,The following statement contains a magic number: switch (_cardType)        {          case CardType.DvbS:            DVBSChannel dvbsChannel = channel as DVBSChannel;            if (dvbsChannel == null)            {              Log.Log.Error("Channel is not a DVBS channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBSChannel oldChannels = (DVBSChannel)CurrentChannel;              if (oldChannels.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbsChannel.Frequency;            symbolRate = dvbsChannel.SymbolRate;            satelliteIndex = dvbsChannel.SatelliteIndex;            bool hiBand = BandTypeConverter.IsHiBand(dvbsChannel' Parameters);            int lof1' lof2' sw;            BandTypeConverter.GetDefaultLnbSetup(Parameters' dvbsChannel.BandType' out lof1' out lof2' out sw);            int lnbFrequency;            if (BandTypeConverter.IsHiBand(dvbsChannel' Parameters))              lnbFrequency = lof2 * 1000;            else              lnbFrequency = lof1 * 1000;            //0=horizontal or left' 1=vertical or right            polarity = 0;            if (dvbsChannel.Polarisation == Polarisation.LinearV)              polarity = 1;            if (dvbsChannel.Polarisation == Polarisation.CircularR)              polarity = 1;            Log.Log.WriteFile("ss2:  Polarity:{0} {1}"' dvbsChannel.Polarisation' polarity);            lnbSelection = LNBSelectionType.Lnb0;            if (dvbsChannel.BandType == BandType.Universal)            {              //only set the LNB (22'33'44) Khz tone when we use ku-band and are in hi-band              switch (lnbKhzTone)              {                case 22:                  lnbSelection = LNBSelectionType.Lnb22kHz;                  break;              }              if (hiBand == false)              {                lnbSelection = LNBSelectionType.Lnb0;              }            }            switch (dvbsChannel.DisEqc)            {              case DisEqcType.None: // none                disType = SS2DisEqcType.None;                break;              case DisEqcType.SimpleA: // Simple A                disType = SS2DisEqcType.Simple_A;                break;              case DisEqcType.SimpleB: // Simple B                disType = SS2DisEqcType.Simple_B;                break;              case DisEqcType.Level1AA: // Level 1 A/A                disType = SS2DisEqcType.Level_1_A_A;                break;              case DisEqcType.Level1BA: // Level 1 B/A                disType = SS2DisEqcType.Level_1_B_A;                break;              case DisEqcType.Level1AB: // Level 1 A/B                disType = SS2DisEqcType.Level_1_A_B;                break;              case DisEqcType.Level1BB: // Level 1 B/B                disType = SS2DisEqcType.Level_1_B_B;                break;            }            switchFreq = lnbFrequency / 1000; //in MHz            pmtPid = dvbsChannel.PmtPid;            break;          case CardType.DvbT:            DVBTChannel dvbtChannel = channel as DVBTChannel;            if (dvbtChannel == null)            {              Log.Log.Error("Channel is not a DVBT channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBTChannel oldChannelt = (DVBTChannel)CurrentChannel;              if (oldChannelt.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbtChannel.Frequency;            bandWidth = dvbtChannel.BandWidth;            pmtPid = dvbtChannel.PmtPid;            break;          case CardType.DvbC:            DVBCChannel dvbcChannel = channel as DVBCChannel;            if (dvbcChannel == null)            {              Log.Log.Error("Channel is not a DVBC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBCChannel oldChannelc = (DVBCChannel)CurrentChannel;              if (oldChannelc.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbcChannel.Frequency;            symbolRate = dvbcChannel.SymbolRate;            switch (dvbcChannel.ModulationType)            {              case ModulationType.Mod16Qam:                modulation = (int)eModulationTAG.QAM_16;                break;              case ModulationType.Mod32Qam:                modulation = (int)eModulationTAG.QAM_32;                break;              case ModulationType.Mod64Qam:                modulation = (int)eModulationTAG.QAM_64;                break;              case ModulationType.Mod128Qam:                modulation = (int)eModulationTAG.QAM_128;                break;              case ModulationType.Mod256Qam:                modulation = (int)eModulationTAG.QAM_256;                break;            }            pmtPid = dvbcChannel.PmtPid;            break;          case CardType.Atsc:            ATSCChannel dvbaChannel = channel as ATSCChannel;            if (dvbaChannel == null)            {              Log.Log.Error("Channel is not a ATSC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              ATSCChannel oldChannela = (ATSCChannel)CurrentChannel;              if (oldChannela.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            //if modulation = 256QAM assume ATSC QAM for HD5000            if (dvbaChannel.ModulationType == ModulationType.Mod256Qam)            {              Log.Log.WriteFile("DVBGraphB2C2:  ATSC Channel:{0} Frequency:{1}"' dvbaChannel.PhysicalChannel'                                dvbaChannel.Frequency);              frequency = (int)dvbaChannel.Frequency;              pmtPid = dvbaChannel.PmtPid;            }            else            {              Log.Log.WriteFile("DVBGraphSkyStar2:  ATSC Channel:{0}"' dvbaChannel.PhysicalChannel);              //#DM B2C2 SDK says ATSC is tuned by frequency. Here we work the OTA frequency by channel number#              int atscfreq = 0;              if (dvbaChannel.PhysicalChannel <= 6)                atscfreq = 45 + (dvbaChannel.PhysicalChannel * 6);              if (dvbaChannel.PhysicalChannel >= 7 && dvbaChannel.PhysicalChannel <= 13)                atscfreq = 177 + ((dvbaChannel.PhysicalChannel - 7) * 6);              if (dvbaChannel.PhysicalChannel >= 14)                atscfreq = 473 + ((dvbaChannel.PhysicalChannel - 14) * 6);              //#DM changed tuning parameter from physical channel to calculated frequency above.              frequency = atscfreq;              Log.Log.WriteFile("ss2:  ATSC Frequency:{0} MHz"' frequency);              pmtPid = dvbaChannel.PmtPid;            }            break;        }
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,BeforeTune,The following statement contains a magic number: switch (_cardType)        {          case CardType.DvbS:            DVBSChannel dvbsChannel = channel as DVBSChannel;            if (dvbsChannel == null)            {              Log.Log.Error("Channel is not a DVBS channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBSChannel oldChannels = (DVBSChannel)CurrentChannel;              if (oldChannels.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbsChannel.Frequency;            symbolRate = dvbsChannel.SymbolRate;            satelliteIndex = dvbsChannel.SatelliteIndex;            bool hiBand = BandTypeConverter.IsHiBand(dvbsChannel' Parameters);            int lof1' lof2' sw;            BandTypeConverter.GetDefaultLnbSetup(Parameters' dvbsChannel.BandType' out lof1' out lof2' out sw);            int lnbFrequency;            if (BandTypeConverter.IsHiBand(dvbsChannel' Parameters))              lnbFrequency = lof2 * 1000;            else              lnbFrequency = lof1 * 1000;            //0=horizontal or left' 1=vertical or right            polarity = 0;            if (dvbsChannel.Polarisation == Polarisation.LinearV)              polarity = 1;            if (dvbsChannel.Polarisation == Polarisation.CircularR)              polarity = 1;            Log.Log.WriteFile("ss2:  Polarity:{0} {1}"' dvbsChannel.Polarisation' polarity);            lnbSelection = LNBSelectionType.Lnb0;            if (dvbsChannel.BandType == BandType.Universal)            {              //only set the LNB (22'33'44) Khz tone when we use ku-band and are in hi-band              switch (lnbKhzTone)              {                case 22:                  lnbSelection = LNBSelectionType.Lnb22kHz;                  break;              }              if (hiBand == false)              {                lnbSelection = LNBSelectionType.Lnb0;              }            }            switch (dvbsChannel.DisEqc)            {              case DisEqcType.None: // none                disType = SS2DisEqcType.None;                break;              case DisEqcType.SimpleA: // Simple A                disType = SS2DisEqcType.Simple_A;                break;              case DisEqcType.SimpleB: // Simple B                disType = SS2DisEqcType.Simple_B;                break;              case DisEqcType.Level1AA: // Level 1 A/A                disType = SS2DisEqcType.Level_1_A_A;                break;              case DisEqcType.Level1BA: // Level 1 B/A                disType = SS2DisEqcType.Level_1_B_A;                break;              case DisEqcType.Level1AB: // Level 1 A/B                disType = SS2DisEqcType.Level_1_A_B;                break;              case DisEqcType.Level1BB: // Level 1 B/B                disType = SS2DisEqcType.Level_1_B_B;                break;            }            switchFreq = lnbFrequency / 1000; //in MHz            pmtPid = dvbsChannel.PmtPid;            break;          case CardType.DvbT:            DVBTChannel dvbtChannel = channel as DVBTChannel;            if (dvbtChannel == null)            {              Log.Log.Error("Channel is not a DVBT channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBTChannel oldChannelt = (DVBTChannel)CurrentChannel;              if (oldChannelt.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbtChannel.Frequency;            bandWidth = dvbtChannel.BandWidth;            pmtPid = dvbtChannel.PmtPid;            break;          case CardType.DvbC:            DVBCChannel dvbcChannel = channel as DVBCChannel;            if (dvbcChannel == null)            {              Log.Log.Error("Channel is not a DVBC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBCChannel oldChannelc = (DVBCChannel)CurrentChannel;              if (oldChannelc.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbcChannel.Frequency;            symbolRate = dvbcChannel.SymbolRate;            switch (dvbcChannel.ModulationType)            {              case ModulationType.Mod16Qam:                modulation = (int)eModulationTAG.QAM_16;                break;              case ModulationType.Mod32Qam:                modulation = (int)eModulationTAG.QAM_32;                break;              case ModulationType.Mod64Qam:                modulation = (int)eModulationTAG.QAM_64;                break;              case ModulationType.Mod128Qam:                modulation = (int)eModulationTAG.QAM_128;                break;              case ModulationType.Mod256Qam:                modulation = (int)eModulationTAG.QAM_256;                break;            }            pmtPid = dvbcChannel.PmtPid;            break;          case CardType.Atsc:            ATSCChannel dvbaChannel = channel as ATSCChannel;            if (dvbaChannel == null)            {              Log.Log.Error("Channel is not a ATSC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              ATSCChannel oldChannela = (ATSCChannel)CurrentChannel;              if (oldChannela.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            //if modulation = 256QAM assume ATSC QAM for HD5000            if (dvbaChannel.ModulationType == ModulationType.Mod256Qam)            {              Log.Log.WriteFile("DVBGraphB2C2:  ATSC Channel:{0} Frequency:{1}"' dvbaChannel.PhysicalChannel'                                dvbaChannel.Frequency);              frequency = (int)dvbaChannel.Frequency;              pmtPid = dvbaChannel.PmtPid;            }            else            {              Log.Log.WriteFile("DVBGraphSkyStar2:  ATSC Channel:{0}"' dvbaChannel.PhysicalChannel);              //#DM B2C2 SDK says ATSC is tuned by frequency. Here we work the OTA frequency by channel number#              int atscfreq = 0;              if (dvbaChannel.PhysicalChannel <= 6)                atscfreq = 45 + (dvbaChannel.PhysicalChannel * 6);              if (dvbaChannel.PhysicalChannel >= 7 && dvbaChannel.PhysicalChannel <= 13)                atscfreq = 177 + ((dvbaChannel.PhysicalChannel - 7) * 6);              if (dvbaChannel.PhysicalChannel >= 14)                atscfreq = 473 + ((dvbaChannel.PhysicalChannel - 14) * 6);              //#DM changed tuning parameter from physical channel to calculated frequency above.              frequency = atscfreq;              Log.Log.WriteFile("ss2:  ATSC Frequency:{0} MHz"' frequency);              pmtPid = dvbaChannel.PmtPid;            }            break;        }
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,BeforeTune,The following statement contains a magic number: switch (_cardType)        {          case CardType.DvbS:            DVBSChannel dvbsChannel = channel as DVBSChannel;            if (dvbsChannel == null)            {              Log.Log.Error("Channel is not a DVBS channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBSChannel oldChannels = (DVBSChannel)CurrentChannel;              if (oldChannels.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbsChannel.Frequency;            symbolRate = dvbsChannel.SymbolRate;            satelliteIndex = dvbsChannel.SatelliteIndex;            bool hiBand = BandTypeConverter.IsHiBand(dvbsChannel' Parameters);            int lof1' lof2' sw;            BandTypeConverter.GetDefaultLnbSetup(Parameters' dvbsChannel.BandType' out lof1' out lof2' out sw);            int lnbFrequency;            if (BandTypeConverter.IsHiBand(dvbsChannel' Parameters))              lnbFrequency = lof2 * 1000;            else              lnbFrequency = lof1 * 1000;            //0=horizontal or left' 1=vertical or right            polarity = 0;            if (dvbsChannel.Polarisation == Polarisation.LinearV)              polarity = 1;            if (dvbsChannel.Polarisation == Polarisation.CircularR)              polarity = 1;            Log.Log.WriteFile("ss2:  Polarity:{0} {1}"' dvbsChannel.Polarisation' polarity);            lnbSelection = LNBSelectionType.Lnb0;            if (dvbsChannel.BandType == BandType.Universal)            {              //only set the LNB (22'33'44) Khz tone when we use ku-band and are in hi-band              switch (lnbKhzTone)              {                case 22:                  lnbSelection = LNBSelectionType.Lnb22kHz;                  break;              }              if (hiBand == false)              {                lnbSelection = LNBSelectionType.Lnb0;              }            }            switch (dvbsChannel.DisEqc)            {              case DisEqcType.None: // none                disType = SS2DisEqcType.None;                break;              case DisEqcType.SimpleA: // Simple A                disType = SS2DisEqcType.Simple_A;                break;              case DisEqcType.SimpleB: // Simple B                disType = SS2DisEqcType.Simple_B;                break;              case DisEqcType.Level1AA: // Level 1 A/A                disType = SS2DisEqcType.Level_1_A_A;                break;              case DisEqcType.Level1BA: // Level 1 B/A                disType = SS2DisEqcType.Level_1_B_A;                break;              case DisEqcType.Level1AB: // Level 1 A/B                disType = SS2DisEqcType.Level_1_A_B;                break;              case DisEqcType.Level1BB: // Level 1 B/B                disType = SS2DisEqcType.Level_1_B_B;                break;            }            switchFreq = lnbFrequency / 1000; //in MHz            pmtPid = dvbsChannel.PmtPid;            break;          case CardType.DvbT:            DVBTChannel dvbtChannel = channel as DVBTChannel;            if (dvbtChannel == null)            {              Log.Log.Error("Channel is not a DVBT channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBTChannel oldChannelt = (DVBTChannel)CurrentChannel;              if (oldChannelt.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbtChannel.Frequency;            bandWidth = dvbtChannel.BandWidth;            pmtPid = dvbtChannel.PmtPid;            break;          case CardType.DvbC:            DVBCChannel dvbcChannel = channel as DVBCChannel;            if (dvbcChannel == null)            {              Log.Log.Error("Channel is not a DVBC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBCChannel oldChannelc = (DVBCChannel)CurrentChannel;              if (oldChannelc.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbcChannel.Frequency;            symbolRate = dvbcChannel.SymbolRate;            switch (dvbcChannel.ModulationType)            {              case ModulationType.Mod16Qam:                modulation = (int)eModulationTAG.QAM_16;                break;              case ModulationType.Mod32Qam:                modulation = (int)eModulationTAG.QAM_32;                break;              case ModulationType.Mod64Qam:                modulation = (int)eModulationTAG.QAM_64;                break;              case ModulationType.Mod128Qam:                modulation = (int)eModulationTAG.QAM_128;                break;              case ModulationType.Mod256Qam:                modulation = (int)eModulationTAG.QAM_256;                break;            }            pmtPid = dvbcChannel.PmtPid;            break;          case CardType.Atsc:            ATSCChannel dvbaChannel = channel as ATSCChannel;            if (dvbaChannel == null)            {              Log.Log.Error("Channel is not a ATSC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              ATSCChannel oldChannela = (ATSCChannel)CurrentChannel;              if (oldChannela.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            //if modulation = 256QAM assume ATSC QAM for HD5000            if (dvbaChannel.ModulationType == ModulationType.Mod256Qam)            {              Log.Log.WriteFile("DVBGraphB2C2:  ATSC Channel:{0} Frequency:{1}"' dvbaChannel.PhysicalChannel'                                dvbaChannel.Frequency);              frequency = (int)dvbaChannel.Frequency;              pmtPid = dvbaChannel.PmtPid;            }            else            {              Log.Log.WriteFile("DVBGraphSkyStar2:  ATSC Channel:{0}"' dvbaChannel.PhysicalChannel);              //#DM B2C2 SDK says ATSC is tuned by frequency. Here we work the OTA frequency by channel number#              int atscfreq = 0;              if (dvbaChannel.PhysicalChannel <= 6)                atscfreq = 45 + (dvbaChannel.PhysicalChannel * 6);              if (dvbaChannel.PhysicalChannel >= 7 && dvbaChannel.PhysicalChannel <= 13)                atscfreq = 177 + ((dvbaChannel.PhysicalChannel - 7) * 6);              if (dvbaChannel.PhysicalChannel >= 14)                atscfreq = 473 + ((dvbaChannel.PhysicalChannel - 14) * 6);              //#DM changed tuning parameter from physical channel to calculated frequency above.              frequency = atscfreq;              Log.Log.WriteFile("ss2:  ATSC Frequency:{0} MHz"' frequency);              pmtPid = dvbaChannel.PmtPid;            }            break;        }
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,BeforeTune,The following statement contains a magic number: switch (_cardType)        {          case CardType.DvbS:            DVBSChannel dvbsChannel = channel as DVBSChannel;            if (dvbsChannel == null)            {              Log.Log.Error("Channel is not a DVBS channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBSChannel oldChannels = (DVBSChannel)CurrentChannel;              if (oldChannels.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbsChannel.Frequency;            symbolRate = dvbsChannel.SymbolRate;            satelliteIndex = dvbsChannel.SatelliteIndex;            bool hiBand = BandTypeConverter.IsHiBand(dvbsChannel' Parameters);            int lof1' lof2' sw;            BandTypeConverter.GetDefaultLnbSetup(Parameters' dvbsChannel.BandType' out lof1' out lof2' out sw);            int lnbFrequency;            if (BandTypeConverter.IsHiBand(dvbsChannel' Parameters))              lnbFrequency = lof2 * 1000;            else              lnbFrequency = lof1 * 1000;            //0=horizontal or left' 1=vertical or right            polarity = 0;            if (dvbsChannel.Polarisation == Polarisation.LinearV)              polarity = 1;            if (dvbsChannel.Polarisation == Polarisation.CircularR)              polarity = 1;            Log.Log.WriteFile("ss2:  Polarity:{0} {1}"' dvbsChannel.Polarisation' polarity);            lnbSelection = LNBSelectionType.Lnb0;            if (dvbsChannel.BandType == BandType.Universal)            {              //only set the LNB (22'33'44) Khz tone when we use ku-band and are in hi-band              switch (lnbKhzTone)              {                case 22:                  lnbSelection = LNBSelectionType.Lnb22kHz;                  break;              }              if (hiBand == false)              {                lnbSelection = LNBSelectionType.Lnb0;              }            }            switch (dvbsChannel.DisEqc)            {              case DisEqcType.None: // none                disType = SS2DisEqcType.None;                break;              case DisEqcType.SimpleA: // Simple A                disType = SS2DisEqcType.Simple_A;                break;              case DisEqcType.SimpleB: // Simple B                disType = SS2DisEqcType.Simple_B;                break;              case DisEqcType.Level1AA: // Level 1 A/A                disType = SS2DisEqcType.Level_1_A_A;                break;              case DisEqcType.Level1BA: // Level 1 B/A                disType = SS2DisEqcType.Level_1_B_A;                break;              case DisEqcType.Level1AB: // Level 1 A/B                disType = SS2DisEqcType.Level_1_A_B;                break;              case DisEqcType.Level1BB: // Level 1 B/B                disType = SS2DisEqcType.Level_1_B_B;                break;            }            switchFreq = lnbFrequency / 1000; //in MHz            pmtPid = dvbsChannel.PmtPid;            break;          case CardType.DvbT:            DVBTChannel dvbtChannel = channel as DVBTChannel;            if (dvbtChannel == null)            {              Log.Log.Error("Channel is not a DVBT channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBTChannel oldChannelt = (DVBTChannel)CurrentChannel;              if (oldChannelt.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbtChannel.Frequency;            bandWidth = dvbtChannel.BandWidth;            pmtPid = dvbtChannel.PmtPid;            break;          case CardType.DvbC:            DVBCChannel dvbcChannel = channel as DVBCChannel;            if (dvbcChannel == null)            {              Log.Log.Error("Channel is not a DVBC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBCChannel oldChannelc = (DVBCChannel)CurrentChannel;              if (oldChannelc.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbcChannel.Frequency;            symbolRate = dvbcChannel.SymbolRate;            switch (dvbcChannel.ModulationType)            {              case ModulationType.Mod16Qam:                modulation = (int)eModulationTAG.QAM_16;                break;              case ModulationType.Mod32Qam:                modulation = (int)eModulationTAG.QAM_32;                break;              case ModulationType.Mod64Qam:                modulation = (int)eModulationTAG.QAM_64;                break;              case ModulationType.Mod128Qam:                modulation = (int)eModulationTAG.QAM_128;                break;              case ModulationType.Mod256Qam:                modulation = (int)eModulationTAG.QAM_256;                break;            }            pmtPid = dvbcChannel.PmtPid;            break;          case CardType.Atsc:            ATSCChannel dvbaChannel = channel as ATSCChannel;            if (dvbaChannel == null)            {              Log.Log.Error("Channel is not a ATSC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              ATSCChannel oldChannela = (ATSCChannel)CurrentChannel;              if (oldChannela.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            //if modulation = 256QAM assume ATSC QAM for HD5000            if (dvbaChannel.ModulationType == ModulationType.Mod256Qam)            {              Log.Log.WriteFile("DVBGraphB2C2:  ATSC Channel:{0} Frequency:{1}"' dvbaChannel.PhysicalChannel'                                dvbaChannel.Frequency);              frequency = (int)dvbaChannel.Frequency;              pmtPid = dvbaChannel.PmtPid;            }            else            {              Log.Log.WriteFile("DVBGraphSkyStar2:  ATSC Channel:{0}"' dvbaChannel.PhysicalChannel);              //#DM B2C2 SDK says ATSC is tuned by frequency. Here we work the OTA frequency by channel number#              int atscfreq = 0;              if (dvbaChannel.PhysicalChannel <= 6)                atscfreq = 45 + (dvbaChannel.PhysicalChannel * 6);              if (dvbaChannel.PhysicalChannel >= 7 && dvbaChannel.PhysicalChannel <= 13)                atscfreq = 177 + ((dvbaChannel.PhysicalChannel - 7) * 6);              if (dvbaChannel.PhysicalChannel >= 14)                atscfreq = 473 + ((dvbaChannel.PhysicalChannel - 14) * 6);              //#DM changed tuning parameter from physical channel to calculated frequency above.              frequency = atscfreq;              Log.Log.WriteFile("ss2:  ATSC Frequency:{0} MHz"' frequency);              pmtPid = dvbaChannel.PmtPid;            }            break;        }
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,BeforeTune,The following statement contains a magic number: frequency /= 1000;
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,BeforeTune,The following statement contains a magic number: frequency > 13000
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,LockInOnSignal,The following statement contains a magic number: System.Threading.Thread.Sleep(20);
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,LockInOnSignal,The following statement contains a magic number: !isLocked && ts.TotalSeconds < 2
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,ConnectInfTeeToSS2,The following statement contains a magic number: IPin pinOut = DsFindPin.ByDirection(_filterB2C2Adapter' PinDirection.Output' 2);
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,UpdateSignalQuality,The following statement contains a magic number: ts.TotalMilliseconds < 5000
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,UpdateSignalQuality,The following statement contains a magic number: level = 100;
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,UpdateSignalQuality,The following statement contains a magic number: level > 100
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,UpdateSignalQuality,The following statement contains a magic number: quality = 100;
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,UpdateSignalQuality,The following statement contains a magic number: quality > 100
Magic Number,TvLibrary.Implementations.DVB,TvCardDVBT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DVBT\TvCardDVBT.cs,CreateTuningSpace,The following statement contains a magic number: ITuningSpace[] spaces = new ITuningSpace[2];
Magic Number,TvLibrary.Implementations.DVB,TvCardDVBT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\DVBT\TvCardDVBT.cs,FilterOutEPGChannel,The following statement contains a magic number: detail.ChannelType == 4
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,PerformInternalNetworkProviderTuning,The following statement contains a magic number: FrequencySettings fSettings = new FrequencySettings                                          {                                            Multiplier = 1000'                                            Frequency = (uint)(dvbtChannel.Frequency)'                                            Bandwidth = (uint)dvbtChannel.BandWidth'                                            Polarity = Polarisation.NotSet'                                            Range = (uint)undefinedValue                                          };
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,PerformInternalNetworkProviderTuning,The following statement contains a magic number: lnbSwitch = 18000;
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,PerformInternalNetworkProviderTuning,The following statement contains a magic number: FrequencySettings fSettings = new FrequencySettings                                          {                                            Multiplier = 1000'                                            Frequency = (uint)dvbsChannel.Frequency'                                            Bandwidth = (uint)undefinedValue'                                            Polarity = dvbsChannel.Polarisation'                                            Range = (uint)undefinedValue                                          };
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,PerformInternalNetworkProviderTuning,The following statement contains a magic number: LnbInfoSettings lSettings = new LnbInfoSettings                                        {                                          LnbSwitchFrequency = (uint)lnbSwitch * 1000'                                          LowOscillator = (uint)lowOsc * 1000'                                          HighOscillator = (uint)hiOsc * 1000                                        };
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,PerformInternalNetworkProviderTuning,The following statement contains a magic number: LnbInfoSettings lSettings = new LnbInfoSettings                                        {                                          LnbSwitchFrequency = (uint)lnbSwitch * 1000'                                          LowOscillator = (uint)lowOsc * 1000'                                          HighOscillator = (uint)hiOsc * 1000                                        };
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,PerformInternalNetworkProviderTuning,The following statement contains a magic number: LnbInfoSettings lSettings = new LnbInfoSettings                                        {                                          LnbSwitchFrequency = (uint)lnbSwitch * 1000'                                          LowOscillator = (uint)lowOsc * 1000'                                          HighOscillator = (uint)hiOsc * 1000                                        };
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,PerformInternalNetworkProviderTuning,The following statement contains a magic number: FrequencySettings fSettings = new FrequencySettings                                          {                                            Multiplier = 1000'                                            Frequency = (uint)dvbcChannel.Frequency'                                            Bandwidth = (uint)undefinedValue'                                            Polarity = Polarisation.NotSet'                                            Range = (uint)undefinedValue                                          };
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,PerformInternalNetworkProviderTuning,The following statement contains a magic number: FrequencySettings fSettings = new FrequencySettings                                            {                                              Multiplier = 1000'                                              Frequency = (uint)atscChannel.Frequency'                                              Bandwidth = (uint)undefinedValue'                                              Polarity = Polarisation.NotSet'                                              Range = (uint)undefinedValue                                            };
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,GetTunerSignalStatistics,The following statement contains a magic number: int[] nodeTypes = new int[33];
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,GetTunerSignalStatistics,The following statement contains a magic number: Guid[] guidInterfaces = new Guid[33];
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,GetTunerSignalStatistics,The following statement contains a magic number: int hr = topology.GetNodeTypes(out nodeTypeCount' 32' nodeTypes);
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,GetTunerSignalStatistics,The following statement contains a magic number: hr = topology.GetNodeInterfaces(nodeTypes[i]' out numberOfInterfaces' 32' guidInterfaces);
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,LockInOnSignal,The following statement contains a magic number: System.Threading.Thread.Sleep(20);
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,PauseGraph,The following statement contains a magic number: ((IMediaControl)_graphBuilder).GetState(10' out state);
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,StopGraph,The following statement contains a magic number: ((IMediaControl)_graphBuilder).GetState(10' out state);
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,UseCaptureFilter,The following statement contains a magic number: AMMediaType[] mediaTypes = new AMMediaType[21];
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,UseCaptureFilter,The following statement contains a magic number: enumMedia.Next(20' mediaTypes' out fetched);
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,AddBdaTransportFiltersToGraph,The following statement contains a magic number: AMMediaType[] mediaTypes = new AMMediaType[2];
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,AddBdaTransportFiltersToGraph,The following statement contains a magic number: IPin[] pins = new IPin[2];
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,Decompose,The following statement contains a magic number: System.Threading.Thread.Sleep(100);
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,Decompose,The following statement contains a magic number: hr = ((IMediaControl)_graphBuilder).GetState(10' out state);
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,Decompose,The following statement contains a magic number: counter >= 30
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,UpdateSignalQuality,The following statement contains a magic number: ts.TotalMilliseconds < 5000
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,getUTC,The following statement contains a magic number: return ((val & 0xF0) >> 4) * 10 + (val & 0xF);
Magic Number,TvLibrary.Implementations.DVB,TvCardDvbBase,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\TvCardDvbBase.cs,getUTC,The following statement contains a magic number: return ((val & 0xF0) >> 4) * 10 + (val & 0xF);
Magic Number,TvLibrary.Implementations.DVB,FilterGraphTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Helper\FilterGraphTools.cs,FindMediaPin,The following statement contains a magic number: IPin[] pins = new IPin[2];
Magic Number,TvLibrary.Implementations.DVB,FilterGraphTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Helper\FilterGraphTools.cs,FindMediaPin,The following statement contains a magic number: AMMediaType[] media = new AMMediaType[2];
Magic Number,TvLibrary.Implementations.DVB,FilterGraphTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Helper\FilterGraphTools.cs,ConnectFilter,The following statement contains a magic number: i <= 10
Magic Number,TvLibrary.Implementations.DVB,FilterGraphTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Helper\FilterGraphTools.cs,ConnectFilter,The following statement contains a magic number: i <= 10
Magic Number,TvLibrary.Implementations.DVB,FilterGraphTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Helper\FilterGraphTools.cs,ConnectFilter,The following statement contains a magic number: i <= 10
Magic Number,TvLibrary.Implementations.DVB,FilterGraphTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Helper\FilterGraphTools.cs,ConnectFilter,The following statement contains a magic number: i <= 10
Magic Number,TvLibrary.Implementations.DVB,FilterGraphTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Helper\FilterGraphTools.cs,ConnectFilter,The following statement contains a magic number: i <= 10
Magic Number,TvLibrary.Implementations.DVB,FilterGraphTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Helper\FilterGraphTools.cs,ConnectFilter,The following statement contains a magic number: i <= 10
Magic Number,TvLibrary.Hardware,TeVii,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\TeVii.cs,SendDiseqCommand,The following statement contains a magic number: cmd |= (byte)((isHorizontal) ? 2 : 0);
Magic Number,TvLibrary.Hardware,TeVii,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\TeVii.cs,SendDiseqCommand,The following statement contains a magic number: cmd |= (byte)((antennaNr - 1) << 2);
Magic Number,TvLibrary.Hardware,TeVii,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\TeVii.cs,SendDiseqCommand,The following statement contains a magic number: byte[] ucMessage = new byte[4];
Magic Number,TvLibrary.Hardware,TeVii,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\TeVii.cs,SendDiseqCommand,The following statement contains a magic number: ucMessage[2] = 0x38;
Magic Number,TvLibrary.Hardware,TeVii,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\TeVii.cs,SendDiseqCommand,The following statement contains a magic number: ucMessage[3] = cmd;
Magic Number,TvLibrary.Hardware,TeVii,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\TeVii.cs,CustomTune,The following statement contains a magic number: lnbFrequency = lof2 * 1000;
Magic Number,TvLibrary.Hardware,TeVii,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\TeVii.cs,CustomTune,The following statement contains a magic number: Log.Log.Debug("TeVii: Start CustomTune F:{0} SR:{1} LOF:{6} P:{2} HI:{3} M:{4} FEC:{5}"'                      (int)satelliteChannel.Frequency'                      satelliteChannel.SymbolRate * 1000'                      Translate(satelliteChannel.Polarisation)'                      hiBand'                      Translate(satelliteChannel.ModulationType)'                      Translate(satelliteChannel.InnerFecRate)'                      lnbFrequency          );
Magic Number,TvLibrary.Hardware,TeVii,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\DisEqC\TeVii.cs,CustomTune,The following statement contains a magic number: int res = TuneTransponder(m_iDeviceIndex'                                  (int)satelliteChannel.Frequency'                                  satelliteChannel.SymbolRate * 1000'                                  lnbFrequency'                                  Translate(satelliteChannel.Polarisation)'                                  hiBand ? 1 : 0'                                  Translate(satelliteChannel.ModulationType)'                                  Translate(satelliteChannel.InnerFecRate)          );
Magic Number,TvLibrary.Implementations.Pbda,TunerPbdaCableCard,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Pbda\TunerPbdaCableCard.cs,CheckCableCardInfo,The following statement contains a magic number: int scAppCount = 32;
Magic Number,TvLibrary.Implementations.Pbda,TunerPbdaCableCard,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Pbda\TunerPbdaCableCard.cs,CheckCableCardInfo,The following statement contains a magic number: int maxAppCount = 32;
Magic Number,TvLibrary.Implementations.Pbda,TunerPbdaCableCard,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Pbda\TunerPbdaCableCard.cs,CheckCableCardInfo,The following statement contains a magic number: SmartCardApplication[] applicationDetails = new SmartCardApplication[33];
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: int caId = ecm.CaId = ((descriptor[off + 2]) << 8) + descriptor[off + 3];
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: int caId = ecm.CaId = ((descriptor[off + 2]) << 8) + descriptor[off + 3];
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: int caId = ecm.CaId = ((descriptor[off + 2]) << 8) + descriptor[off + 3];
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: ecm.Pid = ((descriptor[off + 4] & 0x1f) << 8) + descriptor[off + 5];
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: ecm.Pid = ((descriptor[off + 4] & 0x1f) << 8) + descriptor[off + 5];
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: ecm.Pid = ((descriptor[off + 4] & 0x1f) << 8) + descriptor[off + 5];
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: int count = (len - 2) / 15;
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: int count = (len - 2) / 15;
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: offset = off + i * 15;
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: ecm.Pid = ((descriptor[offset + 4] & 0x1f) << 8) + descriptor[offset + 5];
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: ecm.Pid = ((descriptor[offset + 4] & 0x1f) << 8) + descriptor[offset + 5];
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: ecm.Pid = ((descriptor[offset + 4] & 0x1f) << 8) + descriptor[offset + 5];
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: ecm.ProviderId = ((descriptor[offset + 6]) << 8) + descriptor[offset + 7];
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: ecm.ProviderId = ((descriptor[offset + 6]) << 8) + descriptor[offset + 7];
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: ecm.ProviderId = ((descriptor[offset + 6]) << 8) + descriptor[offset + 7];
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: descriptor[off + 8] == 0xff
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: ecm.CaId == 0x100 && len >= 17
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: ecm.ProviderId = ((descriptor[off + 9]) << 8) + descriptor[off + 10];
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: ecm.ProviderId = ((descriptor[off + 9]) << 8) + descriptor[off + 10];
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: ecm.ProviderId = ((descriptor[off + 9]) << 8) + descriptor[off + 10];
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: descriptor[off + 6] > 0 || descriptor[off + 6] <= 9
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: descriptor[off + 6] > 0 || descriptor[off + 6] <= 9
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: descriptor[off + 6] > 0 || descriptor[off + 6] <= 9
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: descriptor[off + 7] == 0xe0 && descriptor[8] != 0xff
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: descriptor[off + 7] == 0xe0 && descriptor[8] != 0xff
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: ecm.CaId == 0x100 && len >= 8
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: offset = off + 6;
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: ecm.ProviderId = (descriptor[offset + 2] << 16) + (descriptor[offset + 3] << 8) +                                   descriptor[offset + 4];
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: ecm.ProviderId = (descriptor[offset + 2] << 16) + (descriptor[offset + 3] << 8) +                                   descriptor[offset + 4];
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: ecm.ProviderId = (descriptor[offset + 2] << 16) + (descriptor[offset + 3] << 8) +                                   descriptor[offset + 4];
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: ecm.ProviderId = (descriptor[offset + 2] << 16) + (descriptor[offset + 3] << 8) +                                   descriptor[offset + 4];
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: ecm.ProviderId = (descriptor[offset + 2] << 16) + (descriptor[offset + 3] << 8) +                                   descriptor[offset + 4];
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: offset += (tagLen + 2);
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: offset + 2 < descriptor.Length
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,Parse,The following statement contains a magic number: off += (len + 2);
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,CaPmtStruct,The following statement contains a magic number: byte[] data = new byte[1024];
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,CaPmtStruct,The following statement contains a magic number: data[1] = (byte)((ProgramNumber >> 8) & 0xff);
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,CaPmtStruct,The following statement contains a magic number: data[2] = (byte)(ProgramNumber & 0xff);
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,CaPmtStruct,The following statement contains a magic number: data[3] = (byte)((VersionNumber << 1) + CurrentNextIndicator + 0xc0);
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,CaPmtStruct,The following statement contains a magic number: data[4] = (byte)((ProgramInfoLength >> 8) & 0xf);
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,CaPmtStruct,The following statement contains a magic number: data[4] = (byte)((ProgramInfoLength >> 8) & 0xf);
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,CaPmtStruct,The following statement contains a magic number: data[5] = (byte)((ProgramInfoLength & 0xff));
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,CaPmtStruct,The following statement contains a magic number: int offset = 6;
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,CaPmtStruct,The following statement contains a magic number: data[offset++] = (byte)(((pmtEs.ElementaryStreamPID >> 8) & 0x1f) + 0xe0);
Magic Number,TvLibrary.Implementations.DVB.Structures,CaPMT,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\CaPmt.cs,CaPmtStruct,The following statement contains a magic number: data[offset++] = (byte)((pmtEs.ElementaryStreamInfoLength >> 8) & 0xf);
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The following statement contains a magic number: buf.Length < 13
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The following statement contains a magic number: int section_length = ((buf[1] & 0xF) << 8) + buf[2];
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The following statement contains a magic number: int section_length = ((buf[1] & 0xF) << 8) + buf[2];
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The following statement contains a magic number: int programNumber = (buf[3] << 8) + buf[4];
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The following statement contains a magic number: int programNumber = (buf[3] << 8) + buf[4];
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The following statement contains a magic number: int programNumber = (buf[3] << 8) + buf[4];
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The following statement contains a magic number: int version_number = ((buf[5] >> 1) & 0x1F);
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The following statement contains a magic number: int current_next_indicator = buf[5] & 1;
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The following statement contains a magic number: pcrPid = ((buf[8] & 0x1F) << 8) + buf[9];
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The following statement contains a magic number: pcrPid = ((buf[8] & 0x1F) << 8) + buf[9];
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The following statement contains a magic number: pcrPid = ((buf[8] & 0x1F) << 8) + buf[9];
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The following statement contains a magic number: int program_info_length = ((buf[10] & 0xF) << 8) + buf[11];
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The following statement contains a magic number: int program_info_length = ((buf[10] & 0xF) << 8) + buf[11];
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The following statement contains a magic number: int program_info_length = ((buf[10] & 0xF) << 8) + buf[11];
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The following statement contains a magic number: int pointer = 12;
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The following statement contains a magic number: pointer + 2 > buf.Length
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The following statement contains a magic number: x = buf[pointer + 1] + 2;
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The following statement contains a magic number: pointer + 5 > section_length
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The following statement contains a magic number: pidInfo.reserved_1 = (buf[pointer + 1] >> 5) & 7;
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The following statement contains a magic number: pidInfo.reserved_1 = (buf[pointer + 1] >> 5) & 7;
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The following statement contains a magic number: pidInfo.pid = ((buf[pointer + 1] & 0x1F) << 8) + buf[pointer + 2];
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The following statement contains a magic number: pidInfo.pid = ((buf[pointer + 1] & 0x1F) << 8) + buf[pointer + 2];
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The following statement contains a magic number: pidInfo.reserved_2 = (buf[pointer + 3] >> 4) & 0xF;
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The following statement contains a magic number: pidInfo.reserved_2 = (buf[pointer + 3] >> 4) & 0xF;
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The following statement contains a magic number: pidInfo.ES_info_length = ((buf[pointer + 3] & 0xF) << 8) + buf[pointer + 4];
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The following statement contains a magic number: pidInfo.ES_info_length = ((buf[pointer + 3] & 0xF) << 8) + buf[pointer + 4];
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The following statement contains a magic number: pidInfo.ES_info_length = ((buf[pointer + 3] & 0xF) << 8) + buf[pointer + 4];
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The following statement contains a magic number: pointer += 5;
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The following statement contains a magic number: len1 -= 5;
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The following statement contains a magic number: x = buf[pointer + 1] + 2;
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The following statement contains a magic number: len1 > 4
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DVB_GetMPEGISO639Lang,The following statement contains a magic number: int pointer = 2;
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DVB_GetMPEGISO639Lang,The following statement contains a magic number: ISO_639_language_code += System.Text.Encoding.ASCII.GetString(bytes' 0' 3);
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DVB_GetMPEGISO639Lang,The following statement contains a magic number: pointer += 4;
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DVB_GetMPEGISO639Lang,The following statement contains a magic number: len -= 4;
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DVB_SubtitleDescriptior,The following statement contains a magic number: int pointer = 2;
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DVB_SubtitleDescriptior,The following statement contains a magic number: ISO_639_language_code += System.Text.Encoding.ASCII.GetString(bytes' 0' 3);
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DVB_SubtitleDescriptior,The following statement contains a magic number: pointer += 8;
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DVB_SubtitleDescriptior,The following statement contains a magic number: len -= 8;
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DVB_GetTeletextDescriptor,The following statement contains a magic number: b.Length < 2
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DVB_GetTeletextDescriptor,The following statement contains a magic number: int pointer = 2;
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DVB_GetTeletextDescriptor,The following statement contains a magic number: Array.Copy(b' pointer' bytes' 0' 3);
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DVB_GetTeletextDescriptor,The following statement contains a magic number: ISO_639_language_code += System.Text.Encoding.ASCII.GetString(bytes' 0' 3);
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DVB_GetTeletextDescriptor,The following statement contains a magic number: pointer += 5;
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DVB_GetTeletextDescriptor,The following statement contains a magic number: len -= 5;
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DVB_GetTeletextDescriptor,The following statement contains a magic number: len < b.Length + 2
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DVB_GetTeletextDescriptor,The following statement contains a magic number: return ISO_639_language_code.Substring(0' 3);
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DVB_GetTeletextDescriptor,The following statement contains a magic number: ISO_639_language_code.Length >= 3
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodeCat,The following statement contains a magic number: catLen < 7
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodeCat,The following statement contains a magic number: int pos = 8;
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodeCat,The following statement contains a magic number: byte[] data = new byte[2 + descriptorLen];
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodeCat,The following statement contains a magic number: i < 2 + descriptorLen
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodeCat,The following statement contains a magic number: pos += (descriptorLen + 2);
Magic Number,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodeCat,The following statement contains a magic number: pos + 2 < catLen
Magic Number,TvLibrary.Implementations.DVB.Structures,PidInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\PidInfo.cs,AudioPid,The following statement contains a magic number: stream_type = 3;
Magic Number,TvLibrary.Implementations.DVB.Structures,PidInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\PidInfo.cs,AddDescriptorData,The following statement contains a magic number: int descriptor_length = data[1] + 2;
Magic Number,TvLibrary.Implementations.DVB.Structures,PidInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\PidInfo.cs,SubtitlePid,The following statement contains a magic number: stream_type = 5;
Magic Number,TvLibrary.Implementations.DVB.Structures,TSHelperTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\TSHelperTools.cs,GetHeader,The following statement contains a magic number: byte[] data = new byte[8];
Magic Number,TvLibrary.Implementations.DVB.Structures,TSHelperTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\TSHelperTools.cs,GetHeader,The following statement contains a magic number: Marshal.Copy(streamData' data' 0' 8);
Magic Number,TvLibrary.Implementations.DVB.Structures,TSHelperTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\TSHelperTools.cs,GetHeader,The following statement contains a magic number: header.Pid = ((data[1] & 0x1F) << 8) + data[2];
Magic Number,TvLibrary.Implementations.DVB.Structures,TSHelperTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\TSHelperTools.cs,GetHeader,The following statement contains a magic number: header.Pid = ((data[1] & 0x1F) << 8) + data[2];
Magic Number,TvLibrary.Implementations.DVB.Structures,TSHelperTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\TSHelperTools.cs,GetHeader,The following statement contains a magic number: header.TransportScrambling = data[3] & 0xC0;
Magic Number,TvLibrary.Implementations.DVB.Structures,TSHelperTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\TSHelperTools.cs,GetHeader,The following statement contains a magic number: header.AdaptionFieldControl = (data[3] >> 4) & 0x3;
Magic Number,TvLibrary.Implementations.DVB.Structures,TSHelperTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\TSHelperTools.cs,GetHeader,The following statement contains a magic number: header.AdaptionFieldControl = (data[3] >> 4) & 0x3;
Magic Number,TvLibrary.Implementations.DVB.Structures,TSHelperTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\TSHelperTools.cs,GetHeader,The following statement contains a magic number: header.ContinuityCounter = data[3] & 0x0F;
Magic Number,TvLibrary.Implementations.DVB.Structures,TSHelperTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\TSHelperTools.cs,GetHeader,The following statement contains a magic number: header.AdaptionField = data[4];
Magic Number,TvLibrary.Implementations.DVB.Structures,TSHelperTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\TSHelperTools.cs,GetHeader,The following statement contains a magic number: header.TableID = data[5];
Magic Number,TvLibrary.Implementations.DVB.Structures,TSHelperTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\TSHelperTools.cs,GetHeader,The following statement contains a magic number: header.SectionLen = ((data[6] - 0x70) << 8) + data[7];
Magic Number,TvLibrary.Implementations.DVB.Structures,TSHelperTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\TSHelperTools.cs,GetHeader,The following statement contains a magic number: header.SectionLen = ((data[6] - 0x70) << 8) + data[7];
Magic Number,TvLibrary.Implementations.DVB.Structures,TSHelperTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\TSHelperTools.cs,GetHeader,The following statement contains a magic number: header.SectionLen = ((data[6] - 0x70) << 8) + data[7];
Magic Number,TvLibrary.Implementations.DVB.Structures,TSHelperTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\TSHelperTools.cs,GetHeader,The following statement contains a magic number: header.Pid = ((data[1] & 0x1F) << 8) + data[2];
Magic Number,TvLibrary.Implementations.DVB.Structures,TSHelperTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\TSHelperTools.cs,GetHeader,The following statement contains a magic number: header.Pid = ((data[1] & 0x1F) << 8) + data[2];
Magic Number,TvLibrary.Implementations.DVB.Structures,TSHelperTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\TSHelperTools.cs,GetHeader,The following statement contains a magic number: header.TransportScrambling = data[3] & 0xC0;
Magic Number,TvLibrary.Implementations.DVB.Structures,TSHelperTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\TSHelperTools.cs,GetHeader,The following statement contains a magic number: header.AdaptionFieldControl = (data[3] >> 4) & 0x3;
Magic Number,TvLibrary.Implementations.DVB.Structures,TSHelperTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\TSHelperTools.cs,GetHeader,The following statement contains a magic number: header.AdaptionFieldControl = (data[3] >> 4) & 0x3;
Magic Number,TvLibrary.Implementations.DVB.Structures,TSHelperTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\TSHelperTools.cs,GetHeader,The following statement contains a magic number: header.ContinuityCounter = data[3] & 0x0F;
Magic Number,TvLibrary.Implementations.DVB.Structures,TSHelperTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\TSHelperTools.cs,GetHeader,The following statement contains a magic number: header.AdaptionField = data[4];
Magic Number,TvLibrary.Implementations.DVB.Structures,TSHelperTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\TSHelperTools.cs,GetHeader,The following statement contains a magic number: header.TableID = data[5];
Magic Number,TvLibrary.Implementations.DVB.Structures,TSHelperTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\TSHelperTools.cs,GetHeader,The following statement contains a magic number: header.SectionLen = ((data[6] - 0x70) << 8) + data[7];
Magic Number,TvLibrary.Implementations.DVB.Structures,TSHelperTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\TSHelperTools.cs,GetHeader,The following statement contains a magic number: header.SectionLen = ((data[6] - 0x70) << 8) + data[7];
Magic Number,TvLibrary.Implementations.DVB.Structures,TSHelperTools,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\TSHelperTools.cs,GetHeader,The following statement contains a magic number: header.SectionLen = ((data[6] - 0x70) << 8) + data[7];
Magic Number,TvLibrary.Helper,SidHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Helper\SidHelper.cs,GetSidPtr,The following statement contains a magic number: _error != 122
Magic Number,TvLibrary.Helper,SidHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Helper\SidHelper.cs,GetSid,The following statement contains a magic number: _error != 122
Magic Number,TvLibrary.Teletext,DVBTeletext,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\DVBTeletext.cs,SaveData,The following statement contains a magic number: Marshal.Copy((IntPtr)((dataAdd + 4) + (line * 0x2e))' tmpBuffer' 0' 46);
Magic Number,TvLibrary.Teletext,DVBTeletext,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\DVBTeletext.cs,SaveData,The following statement contains a magic number: Marshal.Copy((IntPtr)((dataAdd + 4) + (line * 0x2e))' tmpBuffer' 0' 46);
Magic Number,TvLibrary.Teletext,DVBTeletext,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\DVBTeletext.cs,SaveData,The following statement contains a magic number: byte upper = (byte)((tmpBuffer[b] >> 4) & 0xf);
Magic Number,TvLibrary.Teletext,DVBTeletext,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\DVBTeletext.cs,SaveData,The following statement contains a magic number: tmpBuffer[b - 4] = (byte)((m_lutTable[upper]) | (m_lutTable[lower + 16]));
Magic Number,TvLibrary.Teletext,DVBTeletext,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\DVBTeletext.cs,SaveData,The following statement contains a magic number: tmpBuffer[b - 4] = (byte)((m_lutTable[upper]) | (m_lutTable[lower + 16]));
Magic Number,TvLibrary.Teletext,DVBTeletext,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\DVBTeletext.cs,SaveData,The following statement contains a magic number: b < 46
Magic Number,TvLibrary.Teletext,DVBTeletext,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\DVBTeletext.cs,SaveData,The following statement contains a magic number: line < 4
Magic Number,TvLibrary.Teletext,DVBTeletext,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\DVBTeletext.cs,AddTopTextRow24,The following statement contains a magic number: int maxRows = byPage.Length / 42;
Magic Number,TvLibrary.Teletext,DVBTeletext,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\DVBTeletext.cs,AddTopTextRow24,The following statement contains a magic number: int packetNr = Hamming.GetPacketNumber(row * 42' ref byPage);
Magic Number,TvLibrary.Teletext,DVBTeletext,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\DVBTeletext.cs,AddTopTextRow24,The following statement contains a magic number: offsetRow24 = row * 42;
Magic Number,TvLibrary.Teletext,DVBTeletext,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\DVBTeletext.cs,AddTopTextRow24,The following statement contains a magic number: packetNr == 24 || packetNr < 0
Magic Number,TvLibrary.Teletext,DVBTeletext,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\DVBTeletext.cs,AddTopTextRow24,The following statement contains a magic number: i < 42
Magic Number,TvLibrary.Teletext,FastTextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\FastTextDecoder.cs,Decode,The following statement contains a magic number: int maxRows = pageData.Length / 42;
Magic Number,TvLibrary.Teletext,FastTextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\FastTextDecoder.cs,Decode,The following statement contains a magic number: int packetNumber = Hamming.GetPacketNumber(rowNr * 42' ref pageData);
Magic Number,TvLibrary.Teletext,FastTextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\FastTextDecoder.cs,Decode,The following statement contains a magic number: pageNumber = Hamming.GetPageNumber(rowNr * 42' ref pageData);
Magic Number,TvLibrary.Teletext,FastTextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\FastTextDecoder.cs,Decode,The following statement contains a magic number: DecodePacket27(pageNumber' rowNr * 42' pageData);
Magic Number,TvLibrary.Teletext,FastTextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\FastTextDecoder.cs,Decode,The following statement contains a magic number: packetNumber == 27
Magic Number,TvLibrary.Teletext,FastTextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\FastTextDecoder.cs,DecodePacket27,The following statement contains a magic number: offset += 3;
Magic Number,TvLibrary.Teletext,FastTextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\FastTextDecoder.cs,DecodePacket27,The following statement contains a magic number: byte[] linkData = new byte[6];
Magic Number,TvLibrary.Teletext,FastTextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\FastTextDecoder.cs,DecodePacket27,The following statement contains a magic number: i < 6
Magic Number,TvLibrary.Teletext,FastTextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\FastTextDecoder.cs,DecodePacket27,The following statement contains a magic number: byte m1 = (byte)(linkData[3] >> 3);
Magic Number,TvLibrary.Teletext,FastTextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\FastTextDecoder.cs,DecodePacket27,The following statement contains a magic number: byte m1 = (byte)(linkData[3] >> 3);
Magic Number,TvLibrary.Teletext,FastTextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\FastTextDecoder.cs,DecodePacket27,The following statement contains a magic number: byte m2 = (byte)((linkData[5] & 0x4) >> 2);
Magic Number,TvLibrary.Teletext,FastTextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\FastTextDecoder.cs,DecodePacket27,The following statement contains a magic number: byte m2 = (byte)((linkData[5] & 0x4) >> 2);
Magic Number,TvLibrary.Teletext,FastTextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\FastTextDecoder.cs,DecodePacket27,The following statement contains a magic number: byte m3 = (byte)(linkData[5] >> 3);
Magic Number,TvLibrary.Teletext,FastTextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\FastTextDecoder.cs,DecodePacket27,The following statement contains a magic number: byte m3 = (byte)(linkData[5] >> 3);
Magic Number,TvLibrary.Teletext,FastTextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\FastTextDecoder.cs,DecodePacket27,The following statement contains a magic number: byte m = (byte)((m3 << 2) + (m2 << 1) + m1);
Magic Number,TvLibrary.Teletext,FastTextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\FastTextDecoder.cs,DecodePacket27,The following statement contains a magic number: Magazine == 8
Magic Number,TvLibrary.Teletext,FastTextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\FastTextDecoder.cs,DecodePacket27,The following statement contains a magic number: byte linkMagazine = (byte)(m ^ (Magazine % 8));
Magic Number,TvLibrary.Teletext,FastTextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\FastTextDecoder.cs,DecodePacket27,The following statement contains a magic number: linkMagazine = 8;
Magic Number,TvLibrary.Teletext,FastTextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\FastTextDecoder.cs,DecodePacket27,The following statement contains a magic number: switch (index)          {            case 0:              _redPage = pageNr;              break;            case 1:              _greenPage = pageNr;              break;            case 2:              _yellowPage = pageNr;              break;            case 3:              _bluePage = pageNr;              break;            case 5:              _whitePage = pageNr;              break;          }
Magic Number,TvLibrary.Teletext,FastTextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\FastTextDecoder.cs,DecodePacket27,The following statement contains a magic number: switch (index)          {            case 0:              _redPage = pageNr;              break;            case 1:              _greenPage = pageNr;              break;            case 2:              _yellowPage = pageNr;              break;            case 3:              _bluePage = pageNr;              break;            case 5:              _whitePage = pageNr;              break;          }
Magic Number,TvLibrary.Teletext,FastTextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\FastTextDecoder.cs,DecodePacket27,The following statement contains a magic number: switch (index)          {            case 0:              _redPage = pageNr;              break;            case 1:              _greenPage = pageNr;              break;            case 2:              _yellowPage = pageNr;              break;            case 3:              _bluePage = pageNr;              break;            case 5:              _whitePage = pageNr;              break;          }
Magic Number,TvLibrary.Teletext,FastTextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\FastTextDecoder.cs,DecodePacket27,The following statement contains a magic number: index < 6
Magic Number,TvLibrary.Teletext,FastTextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\FastTextDecoder.cs,IsDecimalPage,The following statement contains a magic number: return ((i & 0x00F) <= 9) && ((i & 0x0F0) <= 0x90);
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\Hamming.cs,GetPacketNumber,The following statement contains a magic number: int packetNumber = (magazine >> 3) + (rowAddress << 1);
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\Hamming.cs,GetPageNumber,The following statement contains a magic number: magazine = 8;
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\Hamming.cs,GetSubPageNumber,The following statement contains a magic number: int subPageNumber = ((Decode[rowData[offset + SUBPAGENUMBER_BYTE4_OFFSET]] & 3) << 12) + //3                            (Decode[rowData[offset + SUBPAGENUMBER_BYTE3_OFFSET]] << 8) + //f                            ((Decode[rowData[offset + SUBPAGENUMBER_BYTE2_OFFSET]] & 7) << 4) + //7                            (Decode[rowData[offset + SUBPAGENUMBER_BYTE1_OFFSET]] & 0xf);
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\Hamming.cs,GetSubPageNumber,The following statement contains a magic number: int subPageNumber = ((Decode[rowData[offset + SUBPAGENUMBER_BYTE4_OFFSET]] & 3) << 12) + //3                            (Decode[rowData[offset + SUBPAGENUMBER_BYTE3_OFFSET]] << 8) + //f                            ((Decode[rowData[offset + SUBPAGENUMBER_BYTE2_OFFSET]] & 7) << 4) + //7                            (Decode[rowData[offset + SUBPAGENUMBER_BYTE1_OFFSET]] & 0xf);
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\Hamming.cs,GetSubPageNumber,The following statement contains a magic number: int subPageNumber = ((Decode[rowData[offset + SUBPAGENUMBER_BYTE4_OFFSET]] & 3) << 12) + //3                            (Decode[rowData[offset + SUBPAGENUMBER_BYTE3_OFFSET]] << 8) + //f                            ((Decode[rowData[offset + SUBPAGENUMBER_BYTE2_OFFSET]] & 7) << 4) + //7                            (Decode[rowData[offset + SUBPAGENUMBER_BYTE1_OFFSET]] & 0xf);
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\Hamming.cs,GetSubPageNumber,The following statement contains a magic number: int subPageNumber = ((Decode[rowData[offset + SUBPAGENUMBER_BYTE4_OFFSET]] & 3) << 12) + //3                            (Decode[rowData[offset + SUBPAGENUMBER_BYTE3_OFFSET]] << 8) + //f                            ((Decode[rowData[offset + SUBPAGENUMBER_BYTE2_OFFSET]] & 7) << 4) + //7                            (Decode[rowData[offset + SUBPAGENUMBER_BYTE1_OFFSET]] & 0xf);
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\Hamming.cs,GetSubPageNumber,The following statement contains a magic number: int subPageNumber = ((Decode[rowData[offset + SUBPAGENUMBER_BYTE4_OFFSET]] & 3) << 12) + //3                            (Decode[rowData[offset + SUBPAGENUMBER_BYTE3_OFFSET]] << 8) + //f                            ((Decode[rowData[offset + SUBPAGENUMBER_BYTE2_OFFSET]] & 7) << 4) + //7                            (Decode[rowData[offset + SUBPAGENUMBER_BYTE1_OFFSET]] & 0xf);
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\Hamming.cs,SetSubPageNumber,The following statement contains a magic number: hexSubPageNr >>= 4;
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\Hamming.cs,SetSubPageNumber,The following statement contains a magic number: hexSubPageNr >>= 4;
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\Hamming.cs,SetSubPageNumber,The following statement contains a magic number: hexSubPageNr >>= 4;
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\Hamming.cs,SetHeader,The following statement contains a magic number: int magazine = (pagenr / 256) & 0x7;
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\Hamming.cs,SetHeader,The following statement contains a magic number: int pageTens = ((pagenr - (magazine * 256)) / 16) & 0xf;
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\Hamming.cs,SetHeader,The following statement contains a magic number: int pageTens = ((pagenr - (magazine * 256)) / 16) & 0xf;
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\Hamming.cs,SetHeader,The following statement contains a magic number: int pageUnits = (pagenr - (magazine * 256) - (pageTens * 16)) & 0xf;
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\Hamming.cs,SetHeader,The following statement contains a magic number: int pageUnits = (pagenr - (magazine * 256) - (pageTens * 16)) & 0xf;
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\Hamming.cs,SetHeader,The following statement contains a magic number: magazine == 8
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\Hamming.cs,SetHeader,The following statement contains a magic number: byData[offset + 8] = Encode[0];
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\Hamming.cs,SetHeader,The following statement contains a magic number: byData[offset + 9] = Encode[0];
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\Hamming.cs,SetHeader,The following statement contains a magic number: magazine = 8;
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\Hamming.cs,SetHeader,The following statement contains a magic number: byData[10] = (byte)('0' + magazine);
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\Hamming.cs,SetHeader,The following statement contains a magic number: byData[11] = (byte)('A' + (pageTens - 10));
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\Hamming.cs,SetHeader,The following statement contains a magic number: byData[11] = (byte)('A' + (pageTens - 10));
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\Hamming.cs,SetHeader,The following statement contains a magic number: pageTens > 9
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\Hamming.cs,SetHeader,The following statement contains a magic number: byData[12] = (byte)('A' + (pageUnits - 10));
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\Hamming.cs,SetHeader,The following statement contains a magic number: byData[12] = (byte)('A' + (pageUnits - 10));
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\Hamming.cs,SetHeader,The following statement contains a magic number: pageUnits > 9
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\Hamming.cs,SetHeader,The following statement contains a magic number: x < 42
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\Hamming.cs,SetPacketNumber,The following statement contains a magic number: iMagazine == 8
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\Hamming.cs,SetPacketNumber,The following statement contains a magic number: byData[offset + 0] = (packetNumber % 2) == 0 ? Encode[iMagazine] : Encode[iMagazine + 8];
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\Hamming.cs,SetPacketNumber,The following statement contains a magic number: byData[offset + 0] = (packetNumber % 2) == 0 ? Encode[iMagazine] : Encode[iMagazine + 8];
Magic Number,TvLibrary.Teletext,Hamming,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\Hamming.cs,SetPacketNumber,The following statement contains a magic number: byData[offset + 1] = Encode[packetNumber / 2];
Magic Number,TvLibrary.Teletext,OddParity,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\OddParity.cs,Initialise,The following statement contains a magic number: m_encode = new byte[128];
Magic Number,TvLibrary.Teletext,OddParity,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\OddParity.cs,Initialise,The following statement contains a magic number: m_decode = new byte[256];
Magic Number,TvLibrary.Teletext,OddParity,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\OddParity.cs,Initialise,The following statement contains a magic number: index < 256
Magic Number,TvLibrary.Teletext,OddParity,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\OddParity.cs,Initialise,The following statement contains a magic number: byte b2 = (byte)((data >> 2) & 1);
Magic Number,TvLibrary.Teletext,OddParity,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\OddParity.cs,Initialise,The following statement contains a magic number: byte b3 = (byte)((data >> 3) & 1);
Magic Number,TvLibrary.Teletext,OddParity,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\OddParity.cs,Initialise,The following statement contains a magic number: byte b4 = (byte)((data >> 4) & 1);
Magic Number,TvLibrary.Teletext,OddParity,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\OddParity.cs,Initialise,The following statement contains a magic number: byte b5 = (byte)((data >> 5) & 1);
Magic Number,TvLibrary.Teletext,OddParity,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\OddParity.cs,Initialise,The following statement contains a magic number: byte b6 = (byte)((data >> 6) & 1);
Magic Number,TvLibrary.Teletext,OddParity,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\OddParity.cs,Initialise,The following statement contains a magic number: byte dataP = (byte)(data | (p << 7));
Magic Number,TvLibrary.Teletext,OddParity,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\OddParity.cs,Initialise,The following statement contains a magic number: data < 128
Magic Number,TvLibrary.Teletext,TeletextPage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPage.cs,GetSubPage,The following statement contains a magic number: byte[] pageChars = new byte[MAX_ROWS * 42];
Magic Number,TvLibrary.Teletext,TeletextPage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPage.cs,GetSubPage,The following statement contains a magic number: Marshal.Copy(_pageCache[subPageNumber]' pageChars' 0' MAX_ROWS * 42);
Magic Number,TvLibrary.Teletext,TeletextPage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPage.cs,SubPageReceived,The following statement contains a magic number: _rotationTime = new TimeSpan(0' 0' 15);
Magic Number,TvLibrary.Teletext,TeletextPage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPage.cs,SubPageReceived,The following statement contains a magic number: RotationTime.TotalSeconds > 15
Magic Number,TvLibrary.Teletext,TeletextPage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPage.cs,PageDiffers,The following statement contains a magic number: int off = row * 42;
Magic Number,TvLibrary.Teletext,TeletextPage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPage.cs,PageDiffers,The following statement contains a magic number: ptr[off + col] != 32 && pageData[off + col] == 32
Magic Number,TvLibrary.Teletext,TeletextPage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPage.cs,PageDiffers,The following statement contains a magic number: ptr[off + col] != 32 && pageData[off + col] == 32
Magic Number,TvLibrary.Teletext,TeletextPage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPage.cs,PageDiffers,The following statement contains a magic number: col < 42
Magic Number,TvLibrary.Teletext,TeletextPage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPage.cs,PageDiffers,The following statement contains a magic number: pageData[off] == 32 && isSet
Magic Number,TvLibrary.Teletext,TeletextPage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPage.cs,PageDiffers,The following statement contains a magic number: off = row * 42;
Magic Number,TvLibrary.Teletext,TeletextPage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPage.cs,PageDiffers,The following statement contains a magic number: col >= 2
Magic Number,TvLibrary.Teletext,TeletextPage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPage.cs,PageDiffers,The following statement contains a magic number: rowNr >= 1 && rowNr <= 24
Magic Number,TvLibrary.Teletext,TeletextPage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPage.cs,PageDiffers,The following statement contains a magic number: col < 42
Magic Number,TvLibrary.Teletext,TeletextPage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPage.cs,PageDiffers,The following statement contains a magic number: row < 31
Magic Number,TvLibrary.Teletext,TeletextPage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPage.cs,UpdatePage,The following statement contains a magic number: int off = row * 42;
Magic Number,TvLibrary.Teletext,TeletextPage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPage.cs,UpdatePage,The following statement contains a magic number: ptr[off + col] = 32;
Magic Number,TvLibrary.Teletext,TeletextPage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPage.cs,UpdatePage,The following statement contains a magic number: ptr[off + col] != 32 && pageData[off + col] == 32
Magic Number,TvLibrary.Teletext,TeletextPage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPage.cs,UpdatePage,The following statement contains a magic number: ptr[off + col] != 32 && pageData[off + col] == 32
Magic Number,TvLibrary.Teletext,TeletextPage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPage.cs,UpdatePage,The following statement contains a magic number: col < 42
Magic Number,TvLibrary.Teletext,TeletextPage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPage.cs,UpdatePage,The following statement contains a magic number: pageData[off] == 32 && isSet
Magic Number,TvLibrary.Teletext,TeletextPage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPage.cs,UpdatePage,The following statement contains a magic number: off = row * 42;
Magic Number,TvLibrary.Teletext,TeletextPage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPage.cs,UpdatePage,The following statement contains a magic number: col >= 2
Magic Number,TvLibrary.Teletext,TeletextPage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPage.cs,UpdatePage,The following statement contains a magic number: rowNr >= 1 && rowNr <= 24
Magic Number,TvLibrary.Teletext,TeletextPage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPage.cs,UpdatePage,The following statement contains a magic number: col < 42
Magic Number,TvLibrary.Teletext,TeletextPage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPage.cs,UpdatePage,The following statement contains a magic number: row < 31
Magic Number,TvLibrary.Teletext,TeletextPage,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPage.cs,AllocPage,The following statement contains a magic number: const int size = MAX_ROWS * 42;
Magic Number,TvLibrary.Teletext,TeletextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextDecoder.cs,TeletextDecoder,The following statement contains a magic number: byte[] page = new byte[2100];
Magic Number,TvLibrary.Teletext,TeletextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextDecoder.cs,TeletextDecoder,The following statement contains a magic number: i < MAX_MAGAZINE + 2
Magic Number,TvLibrary.Teletext,TeletextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextDecoder.cs,Decode,The following statement contains a magic number: int off = startOff + line * 43;
Magic Number,TvLibrary.Teletext,TeletextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextDecoder.cs,Decode,The following statement contains a magic number: char char1 = (char)(rowData[off + 22 + i] & 127);
Magic Number,TvLibrary.Teletext,TeletextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextDecoder.cs,Decode,The following statement contains a magic number: char char1 = (char)(rowData[off + 22 + i] & 127);
Magic Number,TvLibrary.Teletext,TeletextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextDecoder.cs,Decode,The following statement contains a magic number: i < 20
Magic Number,TvLibrary.Teletext,TeletextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextDecoder.cs,Decode,The following statement contains a magic number: packetNumber == 30 && magazine == 0
Magic Number,TvLibrary.Teletext,TeletextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextDecoder.cs,Decode,The following statement contains a magic number: packetNumber < 0 || packetNumber == 25 || packetNumber == 26 || packetNumber > 27
Magic Number,TvLibrary.Teletext,TeletextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextDecoder.cs,Decode,The following statement contains a magic number: packetNumber < 0 || packetNumber == 25 || packetNumber == 26 || packetNumber > 27
Magic Number,TvLibrary.Teletext,TeletextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextDecoder.cs,Decode,The following statement contains a magic number: packetNumber < 0 || packetNumber == 25 || packetNumber == 26 || packetNumber > 27
Magic Number,TvLibrary.Teletext,TeletextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextDecoder.cs,Decode,The following statement contains a magic number: i <= 9
Magic Number,TvLibrary.Teletext,TeletextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextDecoder.cs,Decode,The following statement contains a magic number: int offwp = packetNumber * 42;
Magic Number,TvLibrary.Teletext,TeletextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextDecoder.cs,Decode,The following statement contains a magic number: c < 42
Magic Number,TvLibrary.Teletext,TeletextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextDecoder.cs,UpdatePage,The following statement contains a magic number: _workingPage[magazine][i] = 32;
Magic Number,TvLibrary.Teletext,TeletextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextDecoder.cs,UpdatePage,The following statement contains a magic number: i < 2100
Magic Number,TvLibrary.Teletext,TeletextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextDecoder.cs,IsDecimalPage,The following statement contains a magic number: return ((i & 0x00F) <= 9) && ((i & 0x0F0) <= 0x90);
Magic Number,TvLibrary.Teletext,TeletextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextDecoder.cs,IsDecimalSubPage,The following statement contains a magic number: return ((i & 0x00F) <= 9) && ((i & 0x0F0) <= 0x70);
Magic Number,TvLibrary.Teletext,TeletextPageCache,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageCache.cs,RotationTime,The following statement contains a magic number: return _pageCache[pageNumber] == null ? new TimeSpan(0' 0' 15) : _pageCache[pageNumber].RotationTime;
Magic Number,TvLibrary.Teletext,TeletextPageCache,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageCache.cs,PageReceived,The following statement contains a magic number: ts.TotalSeconds < 10
Magic Number,TvLibrary.Teletext,TeletextPageCache,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageCache.cs,PageReceived,The following statement contains a magic number: ts.TotalSeconds >= 120
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: int[] mosaicY = new int[4];
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: mosaicY[1] = (h + 1) / 3;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: mosaicY[2] = (h * 2 + 1) / 3;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: mosaicY[2] = (h * 2 + 1) / 3;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: mosaicY[2] = (h * 2 + 1) / 3;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: mosaicY[3] = h;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: int bColor = (attrib >> 4) & 0x0F;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: int w1 = w / 2;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: graph.FillRectangle(foreBrush' x + 1' y + mosaicY[y1] + 1' w1 - 2' mosaicY[y1 + 1] - mosaicY[y1] - 2);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: graph.FillRectangle(foreBrush' x + 1' y + mosaicY[y1] + 1' w1 - 2' mosaicY[y1 + 1] - mosaicY[y1] - 2);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: graph.FillRectangle(foreBrush' x + w1 + 1' y + mosaicY[y1] + 1' w2 - 2'                                      mosaicY[y1 + 1] - mosaicY[y1] - 2);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: graph.FillRectangle(foreBrush' x + w1 + 1' y + mosaicY[y1] + 1' w2 - 2'                                      mosaicY[y1 + 1] - mosaicY[y1] - 2);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: chr >>= 2;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: int factor = (attrib & 1 << 10) > 0 ? 2 : 1;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: int factor = (attrib & 1 << 10) > 0 ? 2 : 1;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)                graph.FillRectangle(backBrush' x' y + h' w' h);              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)                graph.FillRectangle(backBrush' x' y + h' w' h);              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)                graph.FillRectangle(backBrush' x' y + h' w' h);              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)                graph.FillRectangle(backBrush' x' y + h' w' h);              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)                graph.FillRectangle(backBrush' x' y + h' w' h);              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)                graph.FillRectangle(backBrush' x' y + h' w' h);              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)                graph.FillRectangle(backBrush' x' y + h' w' h);              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)                graph.FillRectangle(backBrush' x' y + h' w' h);              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)                graph.FillRectangle(backBrush' x' y + h' w' h);              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)                graph.FillRectangle(backBrush' x' y + h' w' h);              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)                graph.FillRectangle(backBrush' x' y + h' w' h);              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)                graph.FillRectangle(backBrush' x' y + h' w' h);              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)                graph.FillRectangle(backBrush' x' y + h' w' h);              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)                graph.FillRectangle(backBrush' x' y + h' w' h);              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)                graph.FillRectangle(backBrush' x' y + h' w' h);              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)                graph.FillRectangle(backBrush' x' y + h' w' h);              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)                graph.FillRectangle(backBrush' x' y + h' w' h);              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: switch (chr)          {            case 0x00:            case 0x20:              graph.FillRectangle(backBrush' x' y' w' h);              if (factor == 2)                graph.FillRectangle(backBrush' x' y + h' w' h);              x += w;              charReady = true;              break;            case 0x23:            case 0x24:              chr2 = m_charTableA[txtLanguage' chr - 0x23];              break;            case 0x40:              chr2 = m_charTableB[txtLanguage];              break;            case 0x5B:            case 0x5C:            case 0x5D:            case 0x5E:            case 0x5F:            case 0x60:              chr2 = m_charTableC[txtLanguage' chr - 0x5B];              break;            case 0x7B:            case 0x7C:            case 0x7D:            case 0x7E:              chr2 = m_charTableD[txtLanguage' chr - 0x7B];              break;            case 0x7F:              graph.FillRectangle(backBrush' x' y' w' factor * h);              graph.FillRectangle(foreBrush' x + (w / 12)' y + factor * (h * 5 / 20)' w * 10 / 12' factor * (h * 11 / 20));              x += w;              charReady = true;              break;            case 0xE0:              graph.FillRectangle(backBrush' x + 1' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE1:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              x += w;              charReady = true;              break;            case 0xE2:              graph.FillRectangle(backBrush' x' y + 1' w - 1' h - 1);              graph.DrawLine(forePen' x' y' x + w' y);              graph.DrawLine(forePen' x + w - 1' y + 1' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE3:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              graph.DrawLine(forePen' x' y' x' y + h);              x += w;              charReady = true;              break;            case 0xE4:              graph.FillRectangle(backBrush' x' y' w - 1' h);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h);              x += w;              charReady = true;              break;            case 0xE5:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x' y' x' y + h - 1);              x += w;              charReady = true;              break;            case 0xE6:              graph.FillRectangle(backBrush' x' y' w' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              x += w;              charReady = true;              break;            case 0xE7:              graph.FillRectangle(backBrush' x' y' w - 1' h - 1);              graph.DrawLine(forePen' x' y + h - 1' x + w' y + h - 1);              graph.DrawLine(forePen' x + w - 1' y' x + w - 1' y + h - 1);              x += w;              charReady = true;              break;            case 0xE8:              graph.FillRectangle(backBrush' x + 1' y' w - 1' h);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + r' y + h - r);              x += w;              charReady = true;              break;            case 0xE9:              graph.FillRectangle(backBrush' x + w / 2' y' (w + 1) / 2' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h);              x += w;              charReady = true;              break;            case 0xEA:              graph.FillRectangle(backBrush' x' y' w' h);              graph.FillRectangle(foreBrush' x' y' w / 2' h / 2);              x += w;              charReady = true;              break;            case 0xEB:              graph.FillRectangle(backBrush' x' y + 1' w' h - 1);              for (int r = 0; r < w / 2; r++)                graph.DrawLine(forePen' x + r' y + r' x + w - r' y + r);              x += w;              charReady = true;              break;            case 0xEC:              graph.FillRectangle(backBrush' x' y + (w / 2)' w' h - (w / 2));              graph.FillRectangle(foreBrush' x' y' w' h / 2);              x += w;              charReady = true;              break;            case 0xED:            case 0xEE:            case 0xEF:            case 0xF0:            case 0xF1:            case 0xF2:            case 0xF3:            case 0xF4:            case 0xF5:            case 0xF6:              chr2 = m_charTableE[chr - 0xED];              break;            default:              chr2 = (char)chr;              break;          }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: PointF xyPos = new PointF((float)x + ((w - ((int)width.Width)) / 2)' y);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: _pageBitmap.SetPixel(x + xpos' y + (ypos * 2)' pixelColor[xpos' ypos]);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: _pageBitmap.SetPixel(x + xpos' y + (ypos * 2) + 1' pixelColor[xpos' ypos]);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: y + (ypos * 2) + 1 < _pageBitmap.Height
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,Render,The following statement contains a magic number: factor == 2
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,GetColor,The following statement contains a magic number: switch (colorNumber)        {          case (int)TextColors.Black:            return Color.Black;          case (int)TextColors.Red:            return Color.Red;          case (int)TextColors.Green:            return Color.FromArgb(0' 255' 0);          case (int)TextColors.Yellow:            return Color.Yellow;          case (int)TextColors.Blue:            return Color.Blue;          case (int)TextColors.Magenta:            return Color.Magenta;          case (int)TextColors.White:            return Color.White;          case (int)TextColors.Cyan:            return Color.Cyan;          case (int)TextColors.Trans1:            return Color.HotPink;          case (int)TextColors.Trans2:            return Color.HotPink;        }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,IsDecimalPage,The following statement contains a magic number: return ((i & 0x00F) <= 9) && ((i & 0x0F0) <= 0x90);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: byte[] pageChars = new byte[31 * 40];
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: byte[] pageChars = new byte[31 * 40];
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: int[] pageAttribs = new int[31 * 40];
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: int[] pageAttribs = new int[31 * 40];
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: rowNr * 42 >= byPage.Length
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: int packetNumber = Hamming.GetPacketNumber(rowNr * 42' ref byPage);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: packetNumber < 0 || packetNumber > 25
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: packetNumber == 25 || packetNumber == 0
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: col >= 10 && packetNumber == 0
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: byte kar = byPage[rowNr * 42 + col];
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: pageChars[packetNumber * 40 + col - 2] = kar;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: pageChars[packetNumber * 40 + col - 2] = kar;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: col < 42
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: packetNumber == 24
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: byte byte1 = Hamming.Decode[byPage[9]];
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: switch (languageCode)        {          case 0:            txtLanguage = 1;            break;          case 1:            txtLanguage = 4;            break;          case 2:            txtLanguage = _isRegionalDK ? 13 : 11;            break;          case 3:            txtLanguage = 5;            break;          case 4:            txtLanguage = 3;            break;          case 5:            txtLanguage = 8;            break;          case 6:            txtLanguage = 0;            break;          default:            txtLanguage = 1;            break;        }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: switch (languageCode)        {          case 0:            txtLanguage = 1;            break;          case 1:            txtLanguage = 4;            break;          case 2:            txtLanguage = _isRegionalDK ? 13 : 11;            break;          case 3:            txtLanguage = 5;            break;          case 4:            txtLanguage = 3;            break;          case 5:            txtLanguage = 8;            break;          case 6:            txtLanguage = 0;            break;          default:            txtLanguage = 1;            break;        }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: switch (languageCode)        {          case 0:            txtLanguage = 1;            break;          case 1:            txtLanguage = 4;            break;          case 2:            txtLanguage = _isRegionalDK ? 13 : 11;            break;          case 3:            txtLanguage = 5;            break;          case 4:            txtLanguage = 3;            break;          case 5:            txtLanguage = 8;            break;          case 6:            txtLanguage = 0;            break;          default:            txtLanguage = 1;            break;        }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: switch (languageCode)        {          case 0:            txtLanguage = 1;            break;          case 1:            txtLanguage = 4;            break;          case 2:            txtLanguage = _isRegionalDK ? 13 : 11;            break;          case 3:            txtLanguage = 5;            break;          case 4:            txtLanguage = 3;            break;          case 5:            txtLanguage = 8;            break;          case 6:            txtLanguage = 0;            break;          default:            txtLanguage = 1;            break;        }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: switch (languageCode)        {          case 0:            txtLanguage = 1;            break;          case 1:            txtLanguage = 4;            break;          case 2:            txtLanguage = _isRegionalDK ? 13 : 11;            break;          case 3:            txtLanguage = 5;            break;          case 4:            txtLanguage = 3;            break;          case 5:            txtLanguage = 8;            break;          case 6:            txtLanguage = 0;            break;          default:            txtLanguage = 1;            break;        }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: switch (languageCode)        {          case 0:            txtLanguage = 1;            break;          case 1:            txtLanguage = 4;            break;          case 2:            txtLanguage = _isRegionalDK ? 13 : 11;            break;          case 3:            txtLanguage = 5;            break;          case 4:            txtLanguage = 3;            break;          case 5:            txtLanguage = 8;            break;          case 6:            txtLanguage = 0;            break;          default:            txtLanguage = 1;            break;        }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: switch (languageCode)        {          case 0:            txtLanguage = 1;            break;          case 1:            txtLanguage = 4;            break;          case 2:            txtLanguage = _isRegionalDK ? 13 : 11;            break;          case 3:            txtLanguage = 5;            break;          case 4:            txtLanguage = 3;            break;          case 5:            txtLanguage = 8;            break;          case 6:            txtLanguage = 0;            break;          default:            txtLanguage = 1;            break;        }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: switch (languageCode)        {          case 0:            txtLanguage = 1;            break;          case 1:            txtLanguage = 4;            break;          case 2:            txtLanguage = _isRegionalDK ? 13 : 11;            break;          case 3:            txtLanguage = 5;            break;          case 4:            txtLanguage = 3;            break;          case 5:            txtLanguage = 8;            break;          case 6:            txtLanguage = 0;            break;          default:            txtLanguage = 1;            break;        }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: switch (languageCode)        {          case 0:            txtLanguage = 1;            break;          case 1:            txtLanguage = 4;            break;          case 2:            txtLanguage = _isRegionalDK ? 13 : 11;            break;          case 3:            txtLanguage = 5;            break;          case 4:            txtLanguage = 3;            break;          case 5:            txtLanguage = 8;            break;          case 6:            txtLanguage = 0;            break;          default:            txtLanguage = 1;            break;        }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: switch (languageCode)        {          case 0:            txtLanguage = 1;            break;          case 1:            txtLanguage = 4;            break;          case 2:            txtLanguage = _isRegionalDK ? 13 : 11;            break;          case 3:            txtLanguage = 5;            break;          case 4:            txtLanguage = 3;            break;          case 5:            txtLanguage = 8;            break;          case 6:            txtLanguage = 0;            break;          default:            txtLanguage = 1;            break;        }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: switch (languageCode)        {          case 0:            txtLanguage = 1;            break;          case 1:            txtLanguage = 4;            break;          case 2:            txtLanguage = _isRegionalDK ? 13 : 11;            break;          case 3:            txtLanguage = 5;            break;          case 4:            txtLanguage = 3;            break;          case 5:            txtLanguage = 8;            break;          case 6:            txtLanguage = 0;            break;          default:            txtLanguage = 1;            break;        }
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: bool displayHeaderAndTopText = !_fullscreenMode || !isBoxed || (_selectedPageText.IndexOf("-") != -1)                                       ||                                       (_selectedPageText.IndexOf("-") == -1 &&                                        !_selectedPageText.Equals(Convert.ToString(mPage' 16)));
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: row == 24 && !row24
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: pageChars[row * 40 + i] = 32;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: pageChars[row * 40 + i] = 32;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: pageAttribs[row * 40 + i] = ((int)TextColors.Trans1 << 4) | ((int)TextColors.White);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: pageAttribs[row * 40 + i] = ((int)TextColors.Trans1 << 4) | ((int)TextColors.White);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: i < 40
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: (row == 0 || row == 24) && !displayHeaderAndTopText
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: row <= 24
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: pageNumber = Convert.ToString(mPage' 16) + "/" + Convert.ToString(sPage' 16);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: pageNumber = Convert.ToString(mPage' 16) + "/" + Convert.ToString(sPage' 16);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: _selectedPageText.Equals(Convert.ToString(mPage' 16))
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: headline += new string((char)32' 32 - headline.Length);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: headline += new string((char)32' 32 - headline.Length);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: pageAttribs[i] = ((int)TextColors.Black << 4) | lineColor;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: i < 11
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: pageAttribs[i] = ((int)TextColors.Black << 4) | ((int)TextColors.White);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: i < 40
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: int width = _pageRenderWidth / 40;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: int height = (_pageRenderHeight - 2) / 25;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: int height = (_pageRenderHeight - 2) / 25;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: float nPercentage = ((float)_percentageOfMaximumHeight / 100);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: fntSize -= 0.1f;
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: !displayHeaderAndTopText && row == 24
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: Render(_renderGraphics' pageChars[row * 40 + col]' pageAttribs[row * 40 + col]' ref x' ref y' width'                       height' txtLanguage);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: Render(_renderGraphics' pageChars[row * 40 + col]' pageAttribs[row * 40 + col]' ref x' ref y' width'                       height' txtLanguage);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: col < 40
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: y += height + (row == 23 ? 2 : 0);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: y += height + (row == 23 ? 2 : 0);
Magic Number,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following statement contains a magic number: row < 25
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,ConvertToHex,The following statement contains a magic number: int mag = number / 100;
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,ConvertToHex,The following statement contains a magic number: number -= (mag * 100);
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,ConvertToHex,The following statement contains a magic number: int tens = (number / 10);
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,ConvertToHex,The following statement contains a magic number: int units = (number % 10);
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,Decode,The following statement contains a magic number: Hamming.SetPacketNumber(0' ref _row24' pageNumber' 24);
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,Decode,The following statement contains a magic number: int spaces = 40 - (nextGroup.Length + nextBlock.Length + 3 + 3 + 4);
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,Decode,The following statement contains a magic number: int spaces = 40 - (nextGroup.Length + nextBlock.Length + 3 + 3 + 4);
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,Decode,The following statement contains a magic number: int spaces = 40 - (nextGroup.Length + nextBlock.Length + 3 + 3 + 4);
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,Decode,The following statement contains a magic number: int spaces = 40 - (nextGroup.Length + nextBlock.Length + 3 + 3 + 4);
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,Decode,The following statement contains a magic number: spaces /= 3;
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,Decode,The following statement contains a magic number: _row24[2 + i] = (byte)line[i];
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,Decode,The following statement contains a magic number: i < line.Length && i <= 40
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,GetPageLinks,The following statement contains a magic number: int decimalPage = mag * 100 + tens * 10 + units;
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,GetPageLinks,The following statement contains a magic number: int decimalPage = mag * 100 + tens * 10 + units;
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,GetPageLinks,The following statement contains a magic number: page > 100
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,GetPageLinks,The following statement contains a magic number: page > 100
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,GetPageLinks,The following statement contains a magic number: page <= 899
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,GetPageLinks,The following statement contains a magic number: page <= 899
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,GetPageLinks,The following statement contains a magic number: page <= 899
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,Clear,The following statement contains a magic number: _row24[x] = 32;
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,Clear,The following statement contains a magic number: _pageType = new int[900];
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,Clear,The following statement contains a magic number: _pageSubCount = new int[900];
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,Clear,The following statement contains a magic number: _pageDescription = new string[900];
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeBasicPage,The following statement contains a magic number: int row = ((pageNr - 100) / 40) + 1;
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeBasicPage,The following statement contains a magic number: int row = ((pageNr - 100) / 40) + 1;
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeBasicPage,The following statement contains a magic number: int col = ((pageNr - 100) % 40) + 2;
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeBasicPage,The following statement contains a magic number: int col = ((pageNr - 100) % 40) + 2;
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeBasicPage,The following statement contains a magic number: int col = ((pageNr - 100) % 40) + 2;
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeBasicPage,The following statement contains a magic number: byte data = Hamming.Decode[basicPage[row * 42 + col]];
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeBasicPage,The following statement contains a magic number: pageNr <= 899
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeMultiPage,The following statement contains a magic number: int row = ((pageNr - 100) / 40) + 1;
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeMultiPage,The following statement contains a magic number: int row = ((pageNr - 100) / 40) + 1;
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeMultiPage,The following statement contains a magic number: int col = ((pageNr - 100) % 40) + 2;
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeMultiPage,The following statement contains a magic number: int col = ((pageNr - 100) % 40) + 2;
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeMultiPage,The following statement contains a magic number: int col = ((pageNr - 100) % 40) + 2;
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeMultiPage,The following statement contains a magic number: byte data = Hamming.Decode[multiPage[row * 42 + col]];
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeMultiPage,The following statement contains a magic number: pageNr <= 899
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeAdditionalPages,The following statement contains a magic number: int row = 1 + (lineCounter / 2);
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeAdditionalPages,The following statement contains a magic number: int col = (20 * (lineCounter % 2));
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeAdditionalPages,The following statement contains a magic number: int col = (20 * (lineCounter % 2));
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeAdditionalPages,The following statement contains a magic number: byte magazine = Hamming.Decode[additionalPage[row * 42 + 2 + col]];
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeAdditionalPages,The following statement contains a magic number: byte magazine = Hamming.Decode[additionalPage[row * 42 + 2 + col]];
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeAdditionalPages,The following statement contains a magic number: byte pageTens = Hamming.Decode[additionalPage[row * 42 + 3 + col]];
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeAdditionalPages,The following statement contains a magic number: byte pageTens = Hamming.Decode[additionalPage[row * 42 + 3 + col]];
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeAdditionalPages,The following statement contains a magic number: byte pageUnits = Hamming.Decode[additionalPage[row * 42 + 4 + col]];
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeAdditionalPages,The following statement contains a magic number: byte pageUnits = Hamming.Decode[additionalPage[row * 42 + 4 + col]];
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeAdditionalPages,The following statement contains a magic number: row = 1 + (lineCounter / 2);
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeAdditionalPages,The following statement contains a magic number: col = 9 + i + (20 * (lineCounter % 2));
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeAdditionalPages,The following statement contains a magic number: col = 9 + i + (20 * (lineCounter % 2));
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeAdditionalPages,The following statement contains a magic number: col = 9 + i + (20 * (lineCounter % 2));
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeAdditionalPages,The following statement contains a magic number: description += (char)(additionalPage[row * 42 + col] & 0x7f);
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeAdditionalPages,The following statement contains a magic number: i < 12
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeAdditionalPages,The following statement contains a magic number: magazine = 8;
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeAdditionalPages,The following statement contains a magic number: int pageNo = magazine * 100 + pageTens * 10 + pageUnits;
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeAdditionalPages,The following statement contains a magic number: int pageNo = magazine * 100 + pageTens * 10 + pageUnits;
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeAdditionalPages,The following statement contains a magic number: pageNo >= 100 && pageNo <= 899
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeAdditionalPages,The following statement contains a magic number: pageNo >= 100 && pageNo <= 899
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeAdditionalPages,The following statement contains a magic number: pageUnits >= 0x0 && pageUnits <= 9
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeAdditionalPages,The following statement contains a magic number: pageTens >= 0x0 && pageTens <= 9
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeAdditionalPages,The following statement contains a magic number: magazine >= 0 && magazine <= 7
Magic Number,TvLibrary.Teletext,ToptextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\ToptextDecoder.cs,DecodeAdditionalPages,The following statement contains a magic number: lineCounter >= 43
Missing Default,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CheckCapabilities,The following switch statement is missing a default case: switch (connectorType)          {            case PhysicalConnectorType.Audio_Tuner:              _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);              break;            case PhysicalConnectorType.Video_Tuner:              _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);              _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);              break;            case PhysicalConnectorType.Audio_Line:              audioLine++;              switch (audioLine)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_SPDIFDigital:              audioSPDIF++;              switch (audioSPDIF)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AUX:              audioAux++;              switch (audioAux)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                  break;              }              break;            case PhysicalConnectorType.Audio_AESDigital:              audioAes++;              switch (audioAes)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                  break;              }              break;            case PhysicalConnectorType.Video_Composite:              videoCvbsNr++;              switch (videoCvbsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SVideo:              videoSvhsNr++;              switch (videoSvhsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_RGB:              videoRgbNr++;              switch (videoRgbNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_YRYBY:              videoYrYbYNr++;              switch (videoYrYbYNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                  break;              }              break;            case PhysicalConnectorType.Video_SerialDigital:              videoHdmiNr++;              switch (videoHdmiNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                  break;              }              break;          }
Missing Default,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CheckCapabilities,The following switch statement is missing a default case: switch (audioLine)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                  break;              }
Missing Default,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CheckCapabilities,The following switch statement is missing a default case: switch (audioSPDIF)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                  break;              }
Missing Default,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CheckCapabilities,The following switch statement is missing a default case: switch (audioAux)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                  break;              }
Missing Default,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CheckCapabilities,The following switch statement is missing a default case: switch (audioAes)              {                case 1:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                  break;                case 2:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                  break;                case 3:                  _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                  break;              }
Missing Default,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CheckCapabilities,The following switch statement is missing a default case: switch (videoCvbsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                  break;              }
Missing Default,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CheckCapabilities,The following switch statement is missing a default case: switch (videoSvhsNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                  break;              }
Missing Default,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CheckCapabilities,The following switch statement is missing a default case: switch (videoRgbNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                  break;              }
Missing Default,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CheckCapabilities,The following switch statement is missing a default case: switch (videoYrYbYNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                  break;              }
Missing Default,TvLibrary.Implementations.Analog.Components,Crossbar,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Components\Crossbar.cs,CheckCapabilities,The following switch statement is missing a default case: switch (videoHdmiNr)              {                case 1:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                  break;                case 2:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                  break;                case 3:                  _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                  _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                  break;              }
Missing Default,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,CheckCapabilities,The following switch statement is missing a default case: switch (connectorType)            {              case PhysicalConnectorType.Audio_Tuner:                _audioPinMap.Add(AnalogChannel.AudioInputType.Tuner' i);                break;              case PhysicalConnectorType.Video_Tuner:                _videoPinMap.Add(AnalogChannel.VideoInputType.Tuner' i);                _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.Tuner' relatedPinIndex);                break;              case PhysicalConnectorType.Audio_Line:                audioLine++;                switch (audioLine)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_SPDIFDigital:                audioSPDIF++;                switch (audioSPDIF)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AUX:                audioAux++;                switch (audioAux)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                    break;                }                break;              case PhysicalConnectorType.Audio_AESDigital:                audioAes++;                switch (audioAes)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                    break;                }                break;              case PhysicalConnectorType.Video_Composite:                videoCvbsNr++;                switch (videoCvbsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SVideo:                videoSvhsNr++;                switch (videoSvhsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_RGB:                videoRgbNr++;                switch (videoRgbNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_YRYBY:                videoYrYbYNr++;                switch (videoYrYbYNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                    break;                }                break;              case PhysicalConnectorType.Video_SerialDigital:              case PhysicalConnectorType.Video_ParallelDigital:                videoHdmiNr++;                switch (videoHdmiNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                    break;                }                break;            }
Missing Default,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,CheckCapabilities,The following switch statement is missing a default case: switch (audioLine)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.LineInput3' i);                    break;                }
Missing Default,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,CheckCapabilities,The following switch statement is missing a default case: switch (audioSPDIF)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.SPDIFInput3' i);                    break;                }
Missing Default,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,CheckCapabilities,The following switch statement is missing a default case: switch (audioAux)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AUXInput3' i);                    break;                }
Missing Default,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,CheckCapabilities,The following switch statement is missing a default case: switch (audioAes)                {                  case 1:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput1' i);                    break;                  case 2:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput2' i);                    break;                  case 3:                    _audioPinMap.Add(AnalogChannel.AudioInputType.AesInput3' i);                    break;                }
Missing Default,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,CheckCapabilities,The following switch statement is missing a default case: switch (videoCvbsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.VideoInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.VideoInput3' relatedPinIndex);                    break;                }
Missing Default,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,CheckCapabilities,The following switch statement is missing a default case: switch (videoSvhsNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.SvhsInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.SvhsInput3' relatedPinIndex);                    break;                }
Missing Default,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,CheckCapabilities,The following switch statement is missing a default case: switch (videoRgbNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.RgbInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.RgbInput3' relatedPinIndex);                    break;                }
Missing Default,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,CheckCapabilities,The following switch statement is missing a default case: switch (videoYrYbYNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.YRYBYInput3' relatedPinIndex);                    break;                }
Missing Default,TvLibrary.Implementations.Analog,TvCardHDPVR,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Analog\Graphs\HDPVR\TVCardHDPVR.cs,CheckCapabilities,The following switch statement is missing a default case: switch (videoHdmiNr)                {                  case 1:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput1' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput1' relatedPinIndex);                    break;                  case 2:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput2' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput2' relatedPinIndex);                    break;                  case 3:                    _videoPinMap.Add(AnalogChannel.VideoInputType.HdmiInput3' i);                    _videoPinRelatedAudioMap.Add(AnalogChannel.VideoInputType.HdmiInput3' relatedPinIndex);                    break;                }
Missing Default,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following switch statement is missing a default case: switch (section[pointer] & 0x0f)        {          case 0:            innerCodingMode = BinaryConvolutionCodeRate.Rate5_11;            break;          case 1:            innerCodingMode = BinaryConvolutionCodeRate.Rate1_2;            break;          case 3:            innerCodingMode = BinaryConvolutionCodeRate.Rate3_5;            break;          case 5:            innerCodingMode = BinaryConvolutionCodeRate.Rate2_3;            break;          case 7:            innerCodingMode = BinaryConvolutionCodeRate.Rate3_4;            break;          case 8:            innerCodingMode = BinaryConvolutionCodeRate.Rate4_5;            break;          case 9:            innerCodingMode = BinaryConvolutionCodeRate.Rate5_6;            break;          case 11:            innerCodingMode = BinaryConvolutionCodeRate.Rate7_8;            break;          case 15:            // concatenated coding not used            innerCodingMode = BinaryConvolutionCodeRate.RateNotSet;            break;        }
Missing Default,TvLibrary.Implementations.Dri.Parser,NitParser,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\Parser\NitParser.cs,DecodeModulationMode,The following switch statement is missing a default case: switch (section[pointer] & 0x1f)        {          case 1:            modulationFormat = ModulationType.ModQpsk;            break;          case 2:            modulationFormat = ModulationType.ModBpsk;            break;          case 3:            modulationFormat = ModulationType.ModOqpsk;            break;          case 4:            modulationFormat = ModulationType.Mod8Vsb;            break;          case 5:            modulationFormat = ModulationType.Mod16Vsb;            break;          case 6:            modulationFormat = ModulationType.Mod16Qam;            break;          case 7:            modulationFormat = ModulationType.Mod32Qam;            break;          case 8:            modulationFormat = ModulationType.Mod64Qam;            break;          case 9:            modulationFormat = ModulationType.Mod80Qam;            break;          case 10:            modulationFormat = ModulationType.Mod96Qam;            break;          case 11:            modulationFormat = ModulationType.Mod112Qam;            break;          case 12:            modulationFormat = ModulationType.Mod128Qam;            break;          case 13:            modulationFormat = ModulationType.Mod160Qam;            break;          case 14:            modulationFormat = ModulationType.Mod192Qam;            break;          case 15:            modulationFormat = ModulationType.Mod224Qam;            break;          case 16:            modulationFormat = ModulationType.Mod256Qam;            break;          case 17:            modulationFormat = ModulationType.Mod320Qam;            break;          case 18:            modulationFormat = ModulationType.Mod384Qam;            break;          case 19:            modulationFormat = ModulationType.Mod448Qam;            break;          case 20:            modulationFormat = ModulationType.Mod512Qam;            break;          case 21:            modulationFormat = ModulationType.Mod640Qam;            break;          case 22:            modulationFormat = ModulationType.Mod768Qam;            break;          case 23:            modulationFormat = ModulationType.Mod896Qam;            break;          case 24:            modulationFormat = ModulationType.Mod1024Qam;            break;        }
Missing Default,TvLibrary.Implementations.Dri,ScannerDri,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\Dri\ScannerDri.cs,OnTableSection,The following switch statement is missing a default case: switch (_scanStage)          {            case ScanStage.Mgt:              if (tableId == 0xc7)              {                _mgtParser.Decode(section);              }              break;            case ScanStage.Nit:              if (tableId == 0xc2)              {                _nitParser.Decode(section);              }              break;            case ScanStage.Ntt:              if (tableId == 0xc3)              {                _nttParser.Decode(section);              }              break;            case ScanStage.Vct:              if (tableId == 0xc8 || tableId == 0xc9)              {                _lvctParser.Decode(section);              }              else if (tableId == 0xc4)              {                _svctParser.Decode(section);              }              break;          }
Missing Default,TvLibrary.Implementations.DVB,Twinhan,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\ConditionalAccess\TwinHan\Twinhan.cs,CiMenuHandler,The following switch statement is missing a default case: switch (MMI.Type)                  {                    case 0:                      m_ciMenuCallback.OnCiCloseDisplay(0);                      break;                    case 1:                      if (m_ciMenuCallback != null)                      {                        m_ciMenuCallback.OnCiMenu(MMI.Header' MMI.SubHeader' MMI.BottomLine' MMI.ItemCount);                        for (int m = 0; m < MMI.ItemCount; m++)                        {                          // choice number start with 0                          m_ciMenuCallback.OnCiMenuChoice(m' MMI.MenuItems[m].MenuItem);                        }                      }                      break;                    case 3:                      if (MMI.EnqFlag != 0)                      {                        if (m_ciMenuCallback != null)                        {                          m_ciMenuCallback.OnCiRequest((MMI.Blind_Answer == 1)' (uint)MMI.Answer_Text_Length' MMI.Prompt);                        }                      }                      break;                  }
Missing Default,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,BeforeTune,The following switch statement is missing a default case: switch (_cardType)        {          case CardType.DvbS:            DVBSChannel dvbsChannel = channel as DVBSChannel;            if (dvbsChannel == null)            {              Log.Log.Error("Channel is not a DVBS channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBSChannel oldChannels = (DVBSChannel)CurrentChannel;              if (oldChannels.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbsChannel.Frequency;            symbolRate = dvbsChannel.SymbolRate;            satelliteIndex = dvbsChannel.SatelliteIndex;            bool hiBand = BandTypeConverter.IsHiBand(dvbsChannel' Parameters);            int lof1' lof2' sw;            BandTypeConverter.GetDefaultLnbSetup(Parameters' dvbsChannel.BandType' out lof1' out lof2' out sw);            int lnbFrequency;            if (BandTypeConverter.IsHiBand(dvbsChannel' Parameters))              lnbFrequency = lof2 * 1000;            else              lnbFrequency = lof1 * 1000;            //0=horizontal or left' 1=vertical or right            polarity = 0;            if (dvbsChannel.Polarisation == Polarisation.LinearV)              polarity = 1;            if (dvbsChannel.Polarisation == Polarisation.CircularR)              polarity = 1;            Log.Log.WriteFile("ss2:  Polarity:{0} {1}"' dvbsChannel.Polarisation' polarity);            lnbSelection = LNBSelectionType.Lnb0;            if (dvbsChannel.BandType == BandType.Universal)            {              //only set the LNB (22'33'44) Khz tone when we use ku-band and are in hi-band              switch (lnbKhzTone)              {                case 22:                  lnbSelection = LNBSelectionType.Lnb22kHz;                  break;              }              if (hiBand == false)              {                lnbSelection = LNBSelectionType.Lnb0;              }            }            switch (dvbsChannel.DisEqc)            {              case DisEqcType.None: // none                disType = SS2DisEqcType.None;                break;              case DisEqcType.SimpleA: // Simple A                disType = SS2DisEqcType.Simple_A;                break;              case DisEqcType.SimpleB: // Simple B                disType = SS2DisEqcType.Simple_B;                break;              case DisEqcType.Level1AA: // Level 1 A/A                disType = SS2DisEqcType.Level_1_A_A;                break;              case DisEqcType.Level1BA: // Level 1 B/A                disType = SS2DisEqcType.Level_1_B_A;                break;              case DisEqcType.Level1AB: // Level 1 A/B                disType = SS2DisEqcType.Level_1_A_B;                break;              case DisEqcType.Level1BB: // Level 1 B/B                disType = SS2DisEqcType.Level_1_B_B;                break;            }            switchFreq = lnbFrequency / 1000; //in MHz            pmtPid = dvbsChannel.PmtPid;            break;          case CardType.DvbT:            DVBTChannel dvbtChannel = channel as DVBTChannel;            if (dvbtChannel == null)            {              Log.Log.Error("Channel is not a DVBT channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBTChannel oldChannelt = (DVBTChannel)CurrentChannel;              if (oldChannelt.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbtChannel.Frequency;            bandWidth = dvbtChannel.BandWidth;            pmtPid = dvbtChannel.PmtPid;            break;          case CardType.DvbC:            DVBCChannel dvbcChannel = channel as DVBCChannel;            if (dvbcChannel == null)            {              Log.Log.Error("Channel is not a DVBC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              DVBCChannel oldChannelc = (DVBCChannel)CurrentChannel;              if (oldChannelc.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            frequency = (int)dvbcChannel.Frequency;            symbolRate = dvbcChannel.SymbolRate;            switch (dvbcChannel.ModulationType)            {              case ModulationType.Mod16Qam:                modulation = (int)eModulationTAG.QAM_16;                break;              case ModulationType.Mod32Qam:                modulation = (int)eModulationTAG.QAM_32;                break;              case ModulationType.Mod64Qam:                modulation = (int)eModulationTAG.QAM_64;                break;              case ModulationType.Mod128Qam:                modulation = (int)eModulationTAG.QAM_128;                break;              case ModulationType.Mod256Qam:                modulation = (int)eModulationTAG.QAM_256;                break;            }            pmtPid = dvbcChannel.PmtPid;            break;          case CardType.Atsc:            ATSCChannel dvbaChannel = channel as ATSCChannel;            if (dvbaChannel == null)            {              Log.Log.Error("Channel is not a ATSC channel!!! {0}"' channel.GetType().ToString());              return false;            }            if (CurrentChannel != null)            {              ATSCChannel oldChannela = (ATSCChannel)CurrentChannel;              if (oldChannela.Equals(channel))              {                //@FIX this fails for back-2-back recordings                //Log.Log.WriteFile("ss2:already tuned on this channel");                //return _mapSubChannels[0];              }            }            //if modulation = 256QAM assume ATSC QAM for HD5000            if (dvbaChannel.ModulationType == ModulationType.Mod256Qam)            {              Log.Log.WriteFile("DVBGraphB2C2:  ATSC Channel:{0} Frequency:{1}"' dvbaChannel.PhysicalChannel'                                dvbaChannel.Frequency);              frequency = (int)dvbaChannel.Frequency;              pmtPid = dvbaChannel.PmtPid;            }            else            {              Log.Log.WriteFile("DVBGraphSkyStar2:  ATSC Channel:{0}"' dvbaChannel.PhysicalChannel);              //#DM B2C2 SDK says ATSC is tuned by frequency. Here we work the OTA frequency by channel number#              int atscfreq = 0;              if (dvbaChannel.PhysicalChannel <= 6)                atscfreq = 45 + (dvbaChannel.PhysicalChannel * 6);              if (dvbaChannel.PhysicalChannel >= 7 && dvbaChannel.PhysicalChannel <= 13)                atscfreq = 177 + ((dvbaChannel.PhysicalChannel - 7) * 6);              if (dvbaChannel.PhysicalChannel >= 14)                atscfreq = 473 + ((dvbaChannel.PhysicalChannel - 14) * 6);              //#DM changed tuning parameter from physical channel to calculated frequency above.              frequency = atscfreq;              Log.Log.WriteFile("ss2:  ATSC Frequency:{0} MHz"' frequency);              pmtPid = dvbaChannel.PmtPid;            }            break;        }
Missing Default,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,BeforeTune,The following switch statement is missing a default case: switch (lnbKhzTone)              {                case 22:                  lnbSelection = LNBSelectionType.Lnb22kHz;                  break;              }
Missing Default,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,BeforeTune,The following switch statement is missing a default case: switch (dvbsChannel.DisEqc)            {              case DisEqcType.None: // none                disType = SS2DisEqcType.None;                break;              case DisEqcType.SimpleA: // Simple A                disType = SS2DisEqcType.Simple_A;                break;              case DisEqcType.SimpleB: // Simple B                disType = SS2DisEqcType.Simple_B;                break;              case DisEqcType.Level1AA: // Level 1 A/A                disType = SS2DisEqcType.Level_1_A_A;                break;              case DisEqcType.Level1BA: // Level 1 B/A                disType = SS2DisEqcType.Level_1_B_A;                break;              case DisEqcType.Level1AB: // Level 1 A/B                disType = SS2DisEqcType.Level_1_A_B;                break;              case DisEqcType.Level1BB: // Level 1 B/B                disType = SS2DisEqcType.Level_1_B_B;                break;            }
Missing Default,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,BeforeTune,The following switch statement is missing a default case: switch (dvbcChannel.ModulationType)            {              case ModulationType.Mod16Qam:                modulation = (int)eModulationTAG.QAM_16;                break;              case ModulationType.Mod32Qam:                modulation = (int)eModulationTAG.QAM_32;                break;              case ModulationType.Mod64Qam:                modulation = (int)eModulationTAG.QAM_64;                break;              case ModulationType.Mod128Qam:                modulation = (int)eModulationTAG.QAM_128;                break;              case ModulationType.Mod256Qam:                modulation = (int)eModulationTAG.QAM_256;                break;            }
Missing Default,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,BeforeTune,The following switch statement is missing a default case: switch (_cardType)        {          case CardType.DvbC:            Log.Log.WriteFile("ss2:  SymbolRate:{0} KS/s"' symbolRate);            hr = _interfaceB2C2TunerCtrl.SetSymbolRate(symbolRate);            if (hr != 0)            {              Log.Log.Error("ss2:SetSymbolRate() failed:0x{0:X}"' hr);              return false;            }            Log.Log.WriteFile("ss2:  Modulation:{0}"' ((eModulationTAG)modulation));            hr = _interfaceB2C2TunerCtrl.SetModulation(modulation);            if (hr != 0)            {              Log.Log.Error("ss2:SetModulation() failed:0x{0:X}"' hr);              return false;            }            break;          case CardType.DvbT:            Log.Log.WriteFile("ss2:  GuardInterval:auto");            hr = _interfaceB2C2TunerCtrl.SetGuardInterval((int)GuardIntervalType.Interval_Auto);            if (hr != 0)            {              Log.Log.Error("ss2:SetGuardInterval() failed:0x{0:X}"' hr);              return false;            }            Log.Log.WriteFile("ss2:  Bandwidth:{0} MHz"' bandWidth);            //hr = _interfaceB2C2TunerCtrl.SetBandwidth((int)dvbtChannel.BandWidth);            // Set Channel Bandwidth (NOTE: Temporarily use polarity function to avoid having to             // change SDK interface for SetBandwidth)            // from Technisat SDK 03/2006            hr = _interfaceB2C2TunerCtrl.SetPolarity(bandWidth);            if (hr != 0)            {              Log.Log.Error("ss2:SetBandwidth() failed:0x{0:X}"' hr);              return false;            }            break;          case CardType.DvbS:            Log.Log.WriteFile("ss2:  SymbolRate:{0} KS/s"' symbolRate);            hr = _interfaceB2C2TunerCtrl.SetSymbolRate(symbolRate);            if (hr != 0)            {              Log.Log.Error("ss2:SetSymbolRate() failed:0x{0:X}"' hr);              return false;            }            Log.Log.WriteFile("ss2:  Fec:{0} {1}"' ((FecType)fec)' fec);            hr = _interfaceB2C2TunerCtrl.SetFec(fec);            if (hr != 0)            {              Log.Log.Error("ss2:SetFec() failed:0x{0:X}"' hr);              return false;            }            hr = _interfaceB2C2TunerCtrl.SetPolarity(polarity);            if (hr != 0)            {              Log.Log.Error("ss2:SetPolarity() failed:0x{0:X}"' hr);              return false;            }            Log.Log.WriteFile("ss2:  Lnb:{0}"' lnbSelection);            hr = _interfaceB2C2TunerCtrl.SetLnbKHz((int)lnbSelection);            if (hr != 0)            {              Log.Log.Error("ss2:SetLnbKHz() failed:0x{0:X}"' hr);              return false;            }            Log.Log.WriteFile("ss2:  Diseqc:{0} {1}"' disType' disType);            hr = _interfaceB2C2TunerCtrl.SetDiseqc((int)disType);            if (hr != 0)            {              Log.Log.Error("ss2:SetDiseqc() failed:0x{0:X}"' hr);              return false;            }            Log.Log.WriteFile("ss2:  LNBFrequency:{0} MHz"' switchFreq);            hr = _interfaceB2C2TunerCtrl.SetLnbFrequency(switchFreq);            if (hr != 0)            {              Log.Log.Error("ss2:SetLnbFrequency() failed:0x{0:X}"' hr);              return false;            }            if (_useDISEqCMotor)            {              if (satelliteIndex > 0)              {                DisEqcGotoPosition((byte)satelliteIndex);              }            }            break;        }
Missing Default,TvLibrary.Implementations.DVB,TvCardDvbSS2,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Graphs\SS2\TvCardDvbSS2.cs,GetTunerCapabilities,The following switch statement is missing a default case: switch (tc.eModulation)        {          case TunerType.ttSat:            Log.Log.WriteFile("ss2: Card type = DVBS");            _cardType = CardType.DvbS;            break;          case TunerType.ttCable:            Log.Log.WriteFile("ss2: Card type = DVBC");            _cardType = CardType.DvbC;            break;          case TunerType.ttTerrestrial:            Log.Log.WriteFile("ss2: Card type = DVBT");            _cardType = CardType.DvbT;            break;          case TunerType.ttATSC:            Log.Log.WriteFile("ss2: Card type = ATSC");            _cardType = CardType.Atsc;            break;          case TunerType.ttUnknown:            Log.Log.WriteFile("ss2: Card type = unknown?");            _cardType = CardType.DvbS;            break;        }
Missing Default,TvLibrary.Implementations.DVB.Structures,ChannelInfo,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Implementations\DVB\Structures\ChannelInfo.cs,DecodePmt,The following switch statement is missing a default case: switch (pidInfo.stream_type)          {            case 0x1b: //H.264              pidInfo.isVideo = true;              break;            case 0x24: //HEVC              pidInfo.isVideo = true;              break;            case 0x10: //MPEG4 ISO/IEC 14496-2              pidInfo.isVideo = true;              break;            case 0x1: //MPEG-1 VIDEO ISO/IEC 11172               pidInfo.isVideo = true;              break;            case 0x2:              //MPEG-2 VIDEO ITU-T Rec. H.262 | ISO/IEC 13818-2 Video or ISO/IEC 11172-2 constrained parameter video stream              pidInfo.isVideo = true;              break;            case 0x3: //MPEG-1 AUDIO ISO/IEC 11172               pidInfo.isAudio = true;              pidInfo.isAC3Audio = false;              pidInfo.isEAC3Audio = false;              break;            case 0x4: //MPEG-3 AUDIO ISO/IEC 13818-3               pidInfo.isAudio = true;              pidInfo.isAC3Audio = false;              pidInfo.isEAC3Audio = false;              break;            case 0x81: //AC3 AUDIO              pidInfo.isAudio = false;              pidInfo.isAC3Audio = true;              break;            case 0x0f: //AAC AUDIO              pidInfo.isAudio = true;              pidInfo.isAC3Audio = false;              pidInfo.isEAC3Audio = false;              break;            case 0x11: //LATM AAC AUDIO              pidInfo.isAudio = true;              pidInfo.isAC3Audio = false;              pidInfo.isEAC3Audio = false;              break;          }
Missing Default,TvLibrary.Teletext,FastTextDecoder,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\FastTextDecoder.cs,DecodePacket27,The following switch statement is missing a default case: switch (index)          {            case 0:              _redPage = pageNr;              break;            case 1:              _greenPage = pageNr;              break;            case 2:              _yellowPage = pageNr;              break;            case 3:              _bluePage = pageNr;              break;            case 5:              _whitePage = pageNr;              break;          }
Missing Default,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,GetColor,The following switch statement is missing a default case: switch (colorNumber)        {          case (int)TextColors.Black:            return Color.Black;          case (int)TextColors.Red:            return Color.Red;          case (int)TextColors.Green:            return Color.FromArgb(0' 255' 0);          case (int)TextColors.Yellow:            return Color.Yellow;          case (int)TextColors.Blue:            return Color.Blue;          case (int)TextColors.Magenta:            return Color.Magenta;          case (int)TextColors.White:            return Color.White;          case (int)TextColors.Cyan:            return Color.Cyan;          case (int)TextColors.Trans1:            return Color.HotPink;          case (int)TextColors.Trans2:            return Color.HotPink;        }
Missing Default,TvLibrary.Teletext,TeletextPageRenderer,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\TvEngine3\TVLibrary\TVLibrary\Teletext\Implementations\TeletextPageRenderer.cs,RenderPage,The following switch statement is missing a default case: switch (pageChars[index])                {                  case (int)Attributes.AlphaBlack:                    foreground = (int)TextColors.Black;                    charset = 0;                    break;                    case (int)Attributes.AlphaRed:                    foreground = (int)TextColors.Red;                    charset = 0;                    break;                    case (int)Attributes.AlphaGreen:                    foreground = (int)TextColors.Green;                    charset = 0;                    break;                    case (int)Attributes.AlphaYellow:                    foreground = (int)TextColors.Yellow;                    charset = 0;                    break;                    case (int)Attributes.AlphaBlue:                    foreground = (int)TextColors.Blue;                    charset = 0;                    break;                    case (int)Attributes.AlphaMagenta:                    foreground = (int)TextColors.Magenta;                    charset = 0;                    break;                    case (int)Attributes.AlphaCyan:                    foreground = (int)TextColors.Cyan;                    charset = 0;                    break;                    case (int)Attributes.AlphaWhite:                    foreground = (int)TextColors.White;                    charset = 0;                    break;                    case (int)Attributes.Flash:                    break;                    case (int)Attributes.Steady:                    break;                    case (int)Attributes.EndBox:                    if (isBoxed)                    {                      if (_fullscreenMode)                      {                        foreground = (int)TextColors.Trans1;                        background = (int)TextColors.Trans1;                      }                      else                      {                        foreground = (int)TextColors.Black;                        background = (int)TextColors.Black;                      }                    }                    break;                    case (int)Attributes.StartBox:                    if (isBoxed)                    {                      // Clear everything until this position in the line                      if (col > 0)                        for (int loop1 = 0; loop1 < col; loop1++)                          pageChars[(row * 40) + loop1] = 32;                      // Clear also the page attributes                      for (int clear = 0; clear < col; clear++)                      {                        if (_fullscreenMode)                        {                          pageAttribs[row * 40 + clear] = doubleheight << 10 | charset << 8 | (int)TextColors.Trans1 << 4 |                                                          (int)TextColors.Trans1;                        }                        else                        {                          pageAttribs[row * 40 + clear] = doubleheight << 10 | charset << 8 | (int)TextColors.Black << 4 |                                                          (int)TextColors.Black;                        }                      }                      // Set the standard background color                      if (background == (int)TextColors.Trans1)                      {                        background = (int)TextColors.Black;                      }                    }                    break;                    case (int)Attributes.NormalSize:                    doubleheight = 0;                    pageAttribs[index] = (doubleheight << 10 | charset << 8 | background << 4 | foreground);                    break;                    case (int)Attributes.DoubleHeight:                    if (row < 23)                      doubleheight = 1;                    break;                    case (int)Attributes.MosaicBlack:                    foreground = (int)TextColors.Black;                    charset = 1 + mosaictype;                    break;                    case (int)Attributes.MosaicRed:                    foreground = (int)TextColors.Red;                    charset = 1 + mosaictype;                    break;                    case (int)Attributes.MosaicGreen:                    foreground = (int)TextColors.Green;                    charset = 1 + mosaictype;                    break;                    case (int)Attributes.MosaicYellow:                    foreground = (int)TextColors.Yellow;                    charset = 1 + mosaictype;                    break;                    case (int)Attributes.MosaicBlue:                    foreground = (int)TextColors.Blue;                    charset = 1 + mosaictype;                    break;                    case (int)Attributes.MosaicMagenta:                    foreground = (int)TextColors.Magenta;                    charset = 1 + mosaictype;                    break;                    case (int)Attributes.MosaicCyan:                    foreground = (int)TextColors.Cyan;                    charset = 1 + mosaictype;                    break;                    case (int)Attributes.MosaicWhite:                    foreground = (int)TextColors.White;                    charset = 1 + mosaictype;                    break;                    case (int)Attributes.Conceal:                    if (_hiddenMode == false)                    {                      foreground = background;                      pageAttribs[index] = (doubleheight << 10 | charset << 8 | background << 4 | foreground);                    }                    break;                    case (int)Attributes.ContiguousMosaic:                    mosaictype = 0;                    if (charset > 0)                    {                      charset = 1;                      pageAttribs[index] = (doubleheight << 10 | charset << 8 | background << 4 | foreground);                    }                    break;                    case (int)Attributes.SeparatedMosaic:                    mosaictype = 1;                    if (charset > 0)                    {                      charset = 2;                      pageAttribs[index] = (doubleheight << 10 | charset << 8 | background << 4 | foreground);                    }                    break;                    case (int)Attributes.Esc:                    break;                    case (int)Attributes.BlackBackground:                    background = (int)TextColors.Black;                    pageAttribs[index] = (doubleheight << 10 | charset << 8 | background << 4 | foreground);                    break;                    case (int)Attributes.NewBackground:                    background = foreground;                    pageAttribs[index] = (doubleheight << 10 | charset << 8 | background << 4 | foreground);                    break;                    case (int)Attributes.HoldMosaic:                    hold = 1;                    break;                    case (int)Attributes.ReleaseMosaic:                    hold = 2;                    break;                }
