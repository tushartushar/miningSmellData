Implementation smell,Namespace,Class,File,Method,Description
Long Method,MediaPortal.GUI.Music,GUICoverArtGrabberProgress,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUICoverArtGrabberProgress.cs,GetCoverArtList,The method has 140 lines of code.
Long Method,MediaPortal.GUI.Music,GUICoverArtGrabberProgress,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUICoverArtGrabberProgress.cs,GetCoverArt,The method has 148 lines of code.
Long Method,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,LoadDirectory,The method has 159 lines of code.
Long Method,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The method has 337 lines of code.
Long Method,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,GetCDInfo,The method has 145 lines of code.
Long Method,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,OnRetrieveCoverArt,The method has 147 lines of code.
Long Method,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,OnShowContextMenu,The method has 105 lines of code.
Long Method,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,LoadDirectory,The method has 201 lines of code.
Long Method,MediaPortal.GUI.Music,GUIMusicOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicOverlay.cs,PostRender,The method has 102 lines of code.
Long Method,MediaPortal.GUI.Music,GUIMusicOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicOverlay.cs,SetCurrentSkinProperties,The method has 137 lines of code.
Complex Method,MediaPortal.GUI.Music,FolderSetting,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\FolderSetting.cs,UpdateFolders,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Music,GUICoverArtGrabberProgress,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUICoverArtGrabberProgress.cs,GetCoverArtList,Cyclomatic complexity of the method is 24
Complex Method,MediaPortal.GUI.Music,GUICoverArtGrabberProgress,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUICoverArtGrabberProgress.cs,GetCoverArt,Cyclomatic complexity of the method is 15
Complex Method,MediaPortal.GUI.Music,GUICoverArtGrabberProgress,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUICoverArtGrabberProgress.cs,ShowResultsDialog,Cyclomatic complexity of the method is 11
Complex Method,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,GUIWindowManager_OnNewMessage,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,DeleteItem,Cyclomatic complexity of the method is 10
Complex Method,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,AddItem,Cyclomatic complexity of the method is 13
Complex Method,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,LoadSettings,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnAction,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnMessage,Cyclomatic complexity of the method is 21
Complex Method,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,Cyclomatic complexity of the method is 61
Complex Method,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnClick,Cyclomatic complexity of the method is 10
Complex Method,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,LoadFolderSettings,Cyclomatic complexity of the method is 9
Complex Method,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,KeepVirtualDirectory,Cyclomatic complexity of the method is 11
Complex Method,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,GetTagInfo,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,AddFolderToPlaylist,Cyclomatic complexity of the method is 10
Complex Method,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,GetCDInfo,Cyclomatic complexity of the method is 17
Complex Method,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,OnPageLoad,Cyclomatic complexity of the method is 14
Complex Method,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,OnRetrieveCoverArt,Cyclomatic complexity of the method is 25
Complex Method,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,OnShowContextMenu,Cyclomatic complexity of the method is 20
Complex Method,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,LoadDirectory,Cyclomatic complexity of the method is 26
Complex Method,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,SetSortLabel,Cyclomatic complexity of the method is 14
Complex Method,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,GetSongsForFolder,Cyclomatic complexity of the method is 12
Complex Method,MediaPortal.GUI.Music,GUIMusicOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicOverlay.cs,DoesPostRender,Cyclomatic complexity of the method is 13
Complex Method,MediaPortal.GUI.Music,GUIMusicOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicOverlay.cs,PostRender,Cyclomatic complexity of the method is 21
Complex Method,MediaPortal.GUI.Music,GUIMusicOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicOverlay.cs,SetCurrentSkinProperties,Cyclomatic complexity of the method is 8
Complex Method,MediaPortal.GUI.Music,MusicFolderWatcherHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\MusicsFolderWatcherHelper.cs,ProcessEvents,Cyclomatic complexity of the method is 13
Complex Method,MediaPortal.GUI.Video,GUIMusicFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFullscreen.cs,OnAction,Cyclomatic complexity of the method is 14
Long Parameter List,MediaPortal.GUI.Music,GUICoverArtGrabberProgress,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUICoverArtGrabberProgress.cs,GetCoverArtList,The method has 5 parameters. Parameters: folderPath' albumCount' curCount' skipIfCoverartExist' songs
Long Identifier,MediaPortal.GUI.Music,GUICoverArtGrabberProgress,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUICoverArtGrabberProgress.cs,,The length of the parameter SearchFolderProgressFormatString is 32.
Long Statement,MediaPortal.GUI.Music,FolderSetting,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\FolderSetting.cs,UpdateFolders,The length of the statement  "          FolderSettings.AddFolderSetting(strPathList[iRow] as string' "MusicFiles"' typeof(GUIMusicFiles.MapSettings)' mapSettings); " is 123.
Long Statement,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,LoadSettings,The length of the statement  "        currentSortMethod = (MusicSort.SortMethod)xmlreader.GetValueAsInt(SerializeName' "sortmethod"' (int)MusicSort.SortMethod.Name);" is 127.
Long Statement,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,WakeUpSrv,The length of the statement  "          Log.Debug("WakeUpSrv: FolderName = {0}' ShareName = {1}' WOL enabled = {2}"' newFolderName' _virtualDirectory.GetShare(newFolderName).Name' wakeOnLanEnabled); " is 158.
Long Statement,MediaPortal.GUI.Music,GUIMusicOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicOverlay.cs,PostRender,The length of the statement  "          //SetVideoWindow(new Rectangle(_videoWindow.XPosition' _videoWindow.YPosition' _videoWindow.Width' _videoWindow.Height)); " is 121.
Complex Conditional,MediaPortal.GUI.Music,GUICoverArtGrabberProgress,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUICoverArtGrabberProgress.cs,Reset,The conditional expression  "SearchFolderProgressFormatString.Length == 0            || SearchFolderProgressFormatString.IndexOf("{0}") == -1            || SearchFolderProgressFormatString.IndexOf("{1}") == -1            || SearchFolderProgressFormatString.IndexOf("{2}") == -1"  is complex.
Complex Conditional,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,GUIWindowManager_OnNewAction,The conditional expression  "AntiRepeatActive() || item == null || item.Label == ".." || IsShare(item) || IsDVD(item.Path)"  is complex.
Complex Conditional,MediaPortal.GUI.Music,GUIMusicOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicOverlay.cs,DoesPostRender,The conditional expression  "!g_Player.Playing ||            g_Player.IsVideo || g_Player.IsDVD || g_Player.IsTVRecording || g_Player.IsTV ||            (!g_Player.IsRadio && !g_Player.IsMusic)"  is complex.
Complex Conditional,MediaPortal.GUI.Music,GUIMusicOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicOverlay.cs,OnPlaylistChanged,The conditional expression  "(_playlistIsCurrent && nPlayList == PlayListType.PLAYLIST_MUSIC) ||            (!_playlistIsCurrent && nPlayList == PlayListType.PLAYLIST_MUSIC_TEMP) ||            (nPlayList == PlayListType.PLAYLIST_LAST_FM)"  is complex.
Empty Catch Block,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,WakeUpSrv,The method has an empty catch block.
Empty Catch Block,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,GetCDATrackNumber,The method has an empty catch block.
Magic Number,MediaPortal.GUI.Music,GUICoverArtGrabberProgress,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUICoverArtGrabberProgress.cs,Reset,The following statement contains a magic number: SearchFolderProgressFormatString = GUILocalizeStrings.Get(4504);
Magic Number,MediaPortal.GUI.Music,GUICoverArtGrabberProgress,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUICoverArtGrabberProgress.cs,Reset,The following statement contains a magic number: SearchFolderNameFormatString = GUILocalizeStrings.Get(4505);
Magic Number,MediaPortal.GUI.Music,GUICoverArtGrabberProgress,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUICoverArtGrabberProgress.cs,Reset,The following statement contains a magic number: GrabbingAlbumNameFormatString = GUILocalizeStrings.Get(4522);
Magic Number,MediaPortal.GUI.Music,GUICoverArtGrabberProgress,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUICoverArtGrabberProgress.cs,Reset,The following statement contains a magic number: string cancelBtnText = GUILocalizeStrings.Get(4517);
Magic Number,MediaPortal.GUI.Music,GUICoverArtGrabberProgress,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUICoverArtGrabberProgress.cs,EnableControls,The following statement contains a magic number: string cancelBtnText = GUILocalizeStrings.Get(4517);
Magic Number,MediaPortal.GUI.Music,GUICoverArtGrabberProgress,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUICoverArtGrabberProgress.cs,OnMessage,The following statement contains a magic number: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            base.OnMessage(message);            GUIPropertyManager.SetProperty("#currentmodule"' GUILocalizeStrings.Get(4514));            return true;            //break;            default:            return base.OnMessage(message);        }
Magic Number,MediaPortal.GUI.Music,GUICoverArtGrabberProgress,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUICoverArtGrabberProgress.cs,OnFindCoverArtDone,The following statement contains a magic number: string progressText = string.Format("{0}% -- Done"' 100);
Magic Number,MediaPortal.GUI.Music,GUICoverArtGrabberProgress,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUICoverArtGrabberProgress.cs,OnFindCoverArtDone,The following statement contains a magic number: SetCurrentCoverArtProgressLabel(progressText' 100);
Magic Number,MediaPortal.GUI.Music,GUICoverArtGrabberProgress,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUICoverArtGrabberProgress.cs,OnFindCoverArtDone,The following statement contains a magic number: progCurrent.Percentage = 100;
Magic Number,MediaPortal.GUI.Music,GUICoverArtGrabberProgress,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUICoverArtGrabberProgress.cs,OnFindCoverArtProgress,The following statement contains a magic number: albumName = GUILocalizeStrings.Get(4506);
Magic Number,MediaPortal.GUI.Music,GUICoverArtGrabberProgress,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUICoverArtGrabberProgress.cs,UpdateAlbumScanProgress,The following statement contains a magic number: int progPrecent = (int)(((float)curCount / (float)albumCount) * 100f);
Magic Number,MediaPortal.GUI.Music,GUICoverArtGrabberProgress,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUICoverArtGrabberProgress.cs,ShowWaitCursorAsync,The following statement contains a magic number: Thread.Sleep(800);
Magic Number,MediaPortal.GUI.Music,GUICoverArtGrabberProgress,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUICoverArtGrabberProgress.cs,GetCoverArt,The following statement contains a magic number: string status = GUILocalizeStrings.Get(4503);
Magic Number,MediaPortal.GUI.Music,GUICoverArtGrabberProgress,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUICoverArtGrabberProgress.cs,ShowResultsDialog,The following statement contains a magic number: line1Text = GUILocalizeStrings.Get(4507);
Magic Number,MediaPortal.GUI.Music,GUICoverArtGrabberProgress,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUICoverArtGrabberProgress.cs,ShowResultsDialog,The following statement contains a magic number: string caption = GUILocalizeStrings.Get(4511);
Magic Number,MediaPortal.GUI.Music,GUICoverArtGrabberProgress,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUICoverArtGrabberProgress.cs,ShowResultsDialog,The following statement contains a magic number: dlg.SetLine(2' line2Text);
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,GUIWindowManager_OnNewMessage,The following statement contains a magic number: switch (message.Message)       {         case GUIMessage.MessageType.GUI_MSG_AUTOPLAY_VOLUME:           if (message.Param1 == (int)Ripper.AutoPlay.MediaType.AUDIO)           {             if (message.Param2 == (int)Ripper.AutoPlay.MediaSubType.AUDIO_CD ||                 message.Param2 == (int)Ripper.AutoPlay.MediaSubType.FILES)               PlayCD(message.Label);           }           break;          case GUIMessage.MessageType.GUI_MSG_VOLUME_REMOVED:           MusicCD = null;           if (g_Player.Playing && g_Player.IsMusic &&               message.Label.Equals(g_Player.CurrentFile.Substring(0' 2)' StringComparison.InvariantCultureIgnoreCase))           {             Log.Info("GUIMusicFiles: Stop since media is ejected");             g_Player.Stop();             playlistPlayer.GetPlaylist(PlayListType.PLAYLIST_MUSIC_TEMP).Clear();             playlistPlayer.GetPlaylist(PlayListType.PLAYLIST_MUSIC).Clear();           }           if (GUIWindowManager.ActiveWindow == GetID)           {             if (Util.Utils.IsDVD(currentFolder))             {               currentFolder = string.Empty;               LoadDirectory(currentFolder);             }           }           break;          case GUIMessage.MessageType.GUI_MSG_ONRESUME:            using (Settings xmlreader = new MPSettings())            {              if (!xmlreader.GetValueAsBool("general"' "showlastactivemodule"' false))              {                currentFolder = string.Empty;              }            }            Log.Debug("{0}:{1}"' SerializeName' message.Message);           break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,LoadSettings,The following statement contains a magic number: _wolTimeout = xmlreader.GetValueAsInt("WOL"' "WolTimeout"' 10);
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnAction,The following statement contains a magic number: item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnPageLoad,The following statement contains a magic number: pDlgOK.SetHeading(315);
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnPageLoad,The following statement contains a magic number: pDlgOK.SetLine(2' GUILocalizeStrings.Get(190010' new object[] { GUILocalizeStrings.Get(2) }));
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnPageLoad,The following statement contains a magic number: pDlgOK.SetLine(2' GUILocalizeStrings.Get(190010' new object[] { GUILocalizeStrings.Get(2) }));
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnPageLoad,The following statement contains a magic number: pDlgOK.SetLine(2' GUILocalizeStrings.Get(190010' new object[] { GUILocalizeStrings.Get(2) }));
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnPageLoad,The following statement contains a magic number: pDlgOK.SetHeading(315);
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnPageLoad,The following statement contains a magic number: pDlgOK.SetLine(2' GUILocalizeStrings.Get(190010' new object[] { GUILocalizeStrings.Get(190011) }));
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnPageLoad,The following statement contains a magic number: pDlgOK.SetLine(2' GUILocalizeStrings.Get(190010' new object[] { GUILocalizeStrings.Get(190011) }));
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnPageLoad,The following statement contains a magic number: pDlgOK.SetLine(2' GUILocalizeStrings.Get(190010' new object[] { GUILocalizeStrings.Get(190011) }));
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,WakeUpSrv,The following statement contains a magic number: serverName == _prevServerName && _wolResendTime * 60 > ts.TotalSeconds
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnMessage,The following statement contains a magic number: switch (message.Message)       {         case GUIMessage.MessageType.GUI_MSG_PLAY_AUDIO_CD:           PlayCD(message.Label);           break;          case GUIMessage.MessageType.GUI_MSG_FILE_DOWNLOADING:           facadeLayout.OnMessage(message);           break;          case GUIMessage.MessageType.GUI_MSG_FILE_DOWNLOADED:           facadeLayout.OnMessage(message);           break;            case GUIMessage.MessageType.GUI_MSG_MUSICFILE_CREATED:            AddItem(message.Label' -1);            break;            case GUIMessage.MessageType.GUI_MSG_MUSICFILE_DELETED:            DeleteItem(message.Label);            SelectCurrentItem();            break;            case GUIMessage.MessageType.GUI_MSG_MUSICFILE_RENAMED:            ReplaceItem(message.Label2' message.Label);            SelectCurrentItem();            break;            case GUIMessage.MessageType.GUI_MSG_MUSICDIRECTORY_CREATED:            AddItem(message.Label' -1);            break;            case GUIMessage.MessageType.GUI_MSG_MUSICDIRECTORY_DELETED:            DeleteItem(message.Label);            SelectCurrentItem();            break;            case GUIMessage.MessageType.GUI_MSG_MUSICDIRECTORY_RENAMED:            ReplaceItem(message.Label2' message.Label);            SelectCurrentItem();            break;          case GUIMessage.MessageType.GUI_MSG_SHOW_DIRECTORY:           currentFolder = message.Label;           LoadDirectory(currentFolder);           break;          case GUIMessage.MessageType.GUI_MSG_ADD_REMOVABLE_DRIVE:           if (_switchRemovableDrives)           {             currentFolder = message.Label;             if (!Util.Utils.IsRemovable(message.Label))             {               _virtualDirectory.AddRemovableDrive(message.Label' message.Label2);             }           }           if (_removableDrivesHandlerThread != null)            {              _removableDrivesHandlerThread.Join();            }           RemovableDrivesHandler.ListRemovableDrives(_virtualDirectory.GetDirectoryExt(string.Empty));           LoadDirectory(currentFolder);           break;         case GUIMessage.MessageType.GUI_MSG_REMOVE_REMOVABLE_DRIVE:           if (!Util.Utils.IsRemovable(message.Label))           {             _virtualDirectory.Remove(message.Label);           }           if (currentFolder.Contains(message.Label))           {             currentFolder = string.Empty;           }           LoadDirectory(currentFolder);           break;          case GUIMessage.MessageType.GUI_MSG_VOLUME_INSERTED:         case GUIMessage.MessageType.GUI_MSG_VOLUME_REMOVED:           if (currentFolder == string.Empty || currentFolder.Substring(0' 2) == message.Label)           {             currentFolder = string.Empty;             LoadDirectory(currentFolder);           }           break;          case GUIMessage.MessageType.GUI_MSG_LAYOUT_CHANGED:           FolderSetting folderSettingL = new FolderSetting();           folderSettingL.UpdateFolders(-1' CurrentSortAsc' (int)CurrentLayout);           break;          case GUIMessage.MessageType.GUI_MSG_SORT_CHANGED:           FolderSetting folderSettingS = new FolderSetting();           folderSettingS.UpdateFolders((int)CurrentSortMethod' CurrentSortAsc' -1);           break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: dlg.SetHeading(498);
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(868);
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1299);
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnFindCoverArt,The following statement contains a magic number: pDlgOK.SetHeading(703);
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnFindCoverArt,The following statement contains a magic number: pDlgOK.SetLine(1' 703);
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnFindCoverArt,The following statement contains a magic number: pDlgOK.SetLine(2' string.Empty);
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnFindCoverArt,The following statement contains a magic number: items.Count < 2
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnInfo,The following statement contains a magic number: items.Count < 2
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,ReorgStatusChange,The following statement contains a magic number: e.progress < 100
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,IsCD,The following statement contains a magic number: string rootDir = path.Substring(0' 2);
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,IsDVD,The following statement contains a magic number: string rootDir = path.Substring(0' 2);
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,AddSelectionToCurrentPlaylist,The following statement contains a magic number: IsCD(selectedItem.Path) && selectedItem.Path.Length == 2
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,PlayCD,The following statement contains a magic number: (Util.Utils.GetDriveType(c + ":") & 5) == 5
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,PlayCD,The following statement contains a magic number: (Util.Utils.GetDriveType(c + ":") & 5) == 5
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,GetCDInfo,The following statement contains a magic number: pDlgOK.SetHeading(703);
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,GetCDInfo,The following statement contains a magic number: pDlgOK.SetLine(1' 703);
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,GetCDInfo,The following statement contains a magic number: pDlgOK.SetLine(2' string.Empty);
Magic Number,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,GetHome,The following statement contains a magic number: strButtonText = GUILocalizeStrings.Get(2);
Magic Number,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,OnClicked,The following statement contains a magic number: GUIWindowManager.ActivateWindow(30885);
Magic Number,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,OnShowContextMenu,The following statement contains a magic number: dlg.SetHeading(498);
Magic Number,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(4552);
Magic Number,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(4551);
Magic Number,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1225);
Magic Number,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(1226);
Magic Number,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(926);
Magic Number,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(4521);
Magic Number,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(4553);
Magic Number,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(930);
Magic Number,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(931);
Magic Number,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,OnShowContextMenu,The following statement contains a magic number: dlg.AddLocalizedString(718);
Magic Number,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 4521: // Show album info           OnInfo(itemNo);           break;          case 4552: // Play now (clear playlist' play' and jump to Now playing)           AddSelectionToCurrentPlaylist(true' false);           break;          case 4551: // Play next (insert after current song)           InsertSelectionToPlaylist(false);           break;          case 1225: // queue item at end of current playlist           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // queue all items at end of current playlist           AddSelectionToCurrentPlaylist(false' true);           break;          case 926:  // add to playlist           AddSelectionToPlaylist();           break;            //case 136: // show playlist         case 4553: // show playlist           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;         case 930: // add to favorites           AddSongToFavorites(item);           break;         case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;         case 718: // Clear top 100           m_database.ResetTop100();           LoadDirectory("db_view");           break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 4521: // Show album info           OnInfo(itemNo);           break;          case 4552: // Play now (clear playlist' play' and jump to Now playing)           AddSelectionToCurrentPlaylist(true' false);           break;          case 4551: // Play next (insert after current song)           InsertSelectionToPlaylist(false);           break;          case 1225: // queue item at end of current playlist           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // queue all items at end of current playlist           AddSelectionToCurrentPlaylist(false' true);           break;          case 926:  // add to playlist           AddSelectionToPlaylist();           break;            //case 136: // show playlist         case 4553: // show playlist           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;         case 930: // add to favorites           AddSongToFavorites(item);           break;         case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;         case 718: // Clear top 100           m_database.ResetTop100();           LoadDirectory("db_view");           break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 4521: // Show album info           OnInfo(itemNo);           break;          case 4552: // Play now (clear playlist' play' and jump to Now playing)           AddSelectionToCurrentPlaylist(true' false);           break;          case 4551: // Play next (insert after current song)           InsertSelectionToPlaylist(false);           break;          case 1225: // queue item at end of current playlist           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // queue all items at end of current playlist           AddSelectionToCurrentPlaylist(false' true);           break;          case 926:  // add to playlist           AddSelectionToPlaylist();           break;            //case 136: // show playlist         case 4553: // show playlist           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;         case 930: // add to favorites           AddSongToFavorites(item);           break;         case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;         case 718: // Clear top 100           m_database.ResetTop100();           LoadDirectory("db_view");           break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 4521: // Show album info           OnInfo(itemNo);           break;          case 4552: // Play now (clear playlist' play' and jump to Now playing)           AddSelectionToCurrentPlaylist(true' false);           break;          case 4551: // Play next (insert after current song)           InsertSelectionToPlaylist(false);           break;          case 1225: // queue item at end of current playlist           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // queue all items at end of current playlist           AddSelectionToCurrentPlaylist(false' true);           break;          case 926:  // add to playlist           AddSelectionToPlaylist();           break;            //case 136: // show playlist         case 4553: // show playlist           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;         case 930: // add to favorites           AddSongToFavorites(item);           break;         case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;         case 718: // Clear top 100           m_database.ResetTop100();           LoadDirectory("db_view");           break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 4521: // Show album info           OnInfo(itemNo);           break;          case 4552: // Play now (clear playlist' play' and jump to Now playing)           AddSelectionToCurrentPlaylist(true' false);           break;          case 4551: // Play next (insert after current song)           InsertSelectionToPlaylist(false);           break;          case 1225: // queue item at end of current playlist           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // queue all items at end of current playlist           AddSelectionToCurrentPlaylist(false' true);           break;          case 926:  // add to playlist           AddSelectionToPlaylist();           break;            //case 136: // show playlist         case 4553: // show playlist           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;         case 930: // add to favorites           AddSongToFavorites(item);           break;         case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;         case 718: // Clear top 100           m_database.ResetTop100();           LoadDirectory("db_view");           break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 4521: // Show album info           OnInfo(itemNo);           break;          case 4552: // Play now (clear playlist' play' and jump to Now playing)           AddSelectionToCurrentPlaylist(true' false);           break;          case 4551: // Play next (insert after current song)           InsertSelectionToPlaylist(false);           break;          case 1225: // queue item at end of current playlist           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // queue all items at end of current playlist           AddSelectionToCurrentPlaylist(false' true);           break;          case 926:  // add to playlist           AddSelectionToPlaylist();           break;            //case 136: // show playlist         case 4553: // show playlist           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;         case 930: // add to favorites           AddSongToFavorites(item);           break;         case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;         case 718: // Clear top 100           m_database.ResetTop100();           LoadDirectory("db_view");           break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 4521: // Show album info           OnInfo(itemNo);           break;          case 4552: // Play now (clear playlist' play' and jump to Now playing)           AddSelectionToCurrentPlaylist(true' false);           break;          case 4551: // Play next (insert after current song)           InsertSelectionToPlaylist(false);           break;          case 1225: // queue item at end of current playlist           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // queue all items at end of current playlist           AddSelectionToCurrentPlaylist(false' true);           break;          case 926:  // add to playlist           AddSelectionToPlaylist();           break;            //case 136: // show playlist         case 4553: // show playlist           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;         case 930: // add to favorites           AddSongToFavorites(item);           break;         case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;         case 718: // Clear top 100           m_database.ResetTop100();           LoadDirectory("db_view");           break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 4521: // Show album info           OnInfo(itemNo);           break;          case 4552: // Play now (clear playlist' play' and jump to Now playing)           AddSelectionToCurrentPlaylist(true' false);           break;          case 4551: // Play next (insert after current song)           InsertSelectionToPlaylist(false);           break;          case 1225: // queue item at end of current playlist           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // queue all items at end of current playlist           AddSelectionToCurrentPlaylist(false' true);           break;          case 926:  // add to playlist           AddSelectionToPlaylist();           break;            //case 136: // show playlist         case 4553: // show playlist           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;         case 930: // add to favorites           AddSongToFavorites(item);           break;         case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;         case 718: // Clear top 100           m_database.ResetTop100();           LoadDirectory("db_view");           break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 4521: // Show album info           OnInfo(itemNo);           break;          case 4552: // Play now (clear playlist' play' and jump to Now playing)           AddSelectionToCurrentPlaylist(true' false);           break;          case 4551: // Play next (insert after current song)           InsertSelectionToPlaylist(false);           break;          case 1225: // queue item at end of current playlist           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // queue all items at end of current playlist           AddSelectionToCurrentPlaylist(false' true);           break;          case 926:  // add to playlist           AddSelectionToPlaylist();           break;            //case 136: // show playlist         case 4553: // show playlist           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;         case 930: // add to favorites           AddSongToFavorites(item);           break;         case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;         case 718: // Clear top 100           m_database.ResetTop100();           LoadDirectory("db_view");           break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,OnShowContextMenu,The following statement contains a magic number: switch (dlg.SelectedId)       {         case 4521: // Show album info           OnInfo(itemNo);           break;          case 4552: // Play now (clear playlist' play' and jump to Now playing)           AddSelectionToCurrentPlaylist(true' false);           break;          case 4551: // Play next (insert after current song)           InsertSelectionToPlaylist(false);           break;          case 1225: // queue item at end of current playlist           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // queue all items at end of current playlist           AddSelectionToCurrentPlaylist(false' true);           break;          case 926:  // add to playlist           AddSelectionToPlaylist();           break;            //case 136: // show playlist         case 4553: // show playlist           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;         case 930: // add to favorites           AddSongToFavorites(item);           break;         case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;         case 718: // Clear top 100           m_database.ResetTop100();           LoadDirectory("db_view");           break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,SetSortLabel,The following statement contains a magic number: switch (CurrentSortMethod)       {         case MusicSort.SortMethod.Date:           item.Label2 = tag.DateTimeModified.ToShortDateString();           break;         case MusicSort.SortMethod.Artist:           if (CurrentLevelWhere != "artist")           {             item.Label2 = tag.Artist;           }           break;         case MusicSort.SortMethod.Album:           if (CurrentLevelWhere != "album")           {             item.Label2 = tag.Album;           }           break;         case MusicSort.SortMethod.Rating:           if (CurrentLevelWhere != "rating")           {             item.Label2 = tag.Rating > 0 ? tag.Rating.ToString() : string.Empty;           }           break;         case MusicSort.SortMethod.AlbumArtist:           if (CurrentLevelWhere != "albumartist")           {             item.Label2 = tag.AlbumArtist;           }           break;         case MusicSort.SortMethod.Year:           if (CurrentLevelWhere != "year")           {             item.Label2 = tag.Year >= 1900 ? tag.Year.ToString() : string.Empty;           }           break;         case MusicSort.SortMethod.DiscID:           item.Label = tag.Album;           item.Label2 = tag.DiscID > 0 ? tag.DiscID.ToString() : string.Empty;           break;         default:           item.Label2 = string.Empty;           break;       }
Magic Number,MediaPortal.GUI.Music,GUIMusicOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicOverlay.cs,PostRender,The following statement contains a magic number: iLayer != 2
Magic Number,MediaPortal.GUI.Music,GUIMusicOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicOverlay.cs,PostRender,The following statement contains a magic number: int hh = (int)(lPTS1 / 3600) % 100;
Magic Number,MediaPortal.GUI.Music,GUIMusicOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicOverlay.cs,PostRender,The following statement contains a magic number: int hh = (int)(lPTS1 / 3600) % 100;
Magic Number,MediaPortal.GUI.Music,GUIMusicOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicOverlay.cs,PostRender,The following statement contains a magic number: int mm = (int)((lPTS1 / 60) % 60);
Magic Number,MediaPortal.GUI.Music,GUIMusicOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicOverlay.cs,PostRender,The following statement contains a magic number: int mm = (int)((lPTS1 / 60) % 60);
Magic Number,MediaPortal.GUI.Music,GUIMusicOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicOverlay.cs,PostRender,The following statement contains a magic number: int ss = (int)((lPTS1 / 1) % 60);
Magic Number,MediaPortal.GUI.Music,GUIMusicOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicOverlay.cs,PostRender,The following statement contains a magic number: hh == 0 && mm == 0 && ss < 5
Magic Number,MediaPortal.GUI.Music,GUIMusicOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicOverlay.cs,SetCurrentSkinProperties,The following statement contains a magic number: string strYear = tag.Year <= 1900 ? string.Empty : tag.Year.ToString();
Magic Number,MediaPortal.GUI.Music,GUIMusicOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicOverlay.cs,SetCurrentSkinProperties,The following statement contains a magic number: string strRating = (Convert.ToDecimal(2 * tag.Rating + 1)).ToString();
Magic Number,MediaPortal.GUI.Music,GUIMusicOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicOverlay.cs,SetNextSkinProperties,The following statement contains a magic number: string strYear = tag.Year <= 1900 ? string.Empty : tag.Year.ToString();
Magic Number,MediaPortal.GUI.Music,GUIMusicOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicOverlay.cs,SetNextSkinProperties,The following statement contains a magic number: string strRating = (Convert.ToDecimal(2 * tag.Rating + 1)).ToString();
Magic Number,MediaPortal.GUI.Music,GUIMusicOverlay,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicOverlay.cs,RenderLayer,The following statement contains a magic number: PostRender(timePassed' 2);
Magic Number,MediaPortal.GUI.Music,MusicFolderWatcherHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\MusicsFolderWatcherHelper.cs,WatchFolders,The following statement contains a magic number: _Events = ArrayList.Synchronized(new ArrayList(64));
Magic Number,MediaPortal.GUI.Video,GUIMusicFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {            ////case Action.ActionType.ACTION_PREV_ITEM:            ////    {            ////        //g_playlistPlayer.PlayPrevious();            ////    }            ////    break;              ////case Action.ActionType.ACTION_NEXT_ITEM:            ////    {            ////        //g_playlistPlayer.PlayNext();            ////    }            ////    break;            case Action.ActionType.ACTION_PREVIOUS_MENU:          case Action.ActionType.ACTION_MOUSE_CLICK:          case Action.ActionType.ACTION_SHOW_GUI:            {              GUIGraphicsContext.IsFullScreenVideo = false;              GUIWindowManager.ShowPreviousWindow();              return;            }            case Action.ActionType.ACTION_MOVE_DOWN:          case Action.ActionType.ACTION_BIG_STEP_BACK:            {              double currentpos = g_Player.CurrentPosition;              double duration = g_Player.Duration;              double percent = (currentpos / duration) * 100d;              percent -= 10d;                if (percent < 0)              {                percent = 0;              }                g_Player.SeekAsolutePercentage((int)percent);              return;            }            case Action.ActionType.ACTION_MOVE_UP:          case Action.ActionType.ACTION_BIG_STEP_FORWARD:            {              double currentpos = g_Player.CurrentPosition;              double duration = g_Player.Duration;              double percent = (currentpos / duration) * 100d;              percent += 10d;                if (percent > 100d)              {                percent = 100d;              }                g_Player.SeekAsolutePercentage((int)percent);              return;            }            case Action.ActionType.ACTION_STOP:            {              Log.Info("GUIMusicFullscreen:stop");              g_Player.Stop();              GUIWindowManager.ShowPreviousWindow();            }            break;            case Action.ActionType.ACTION_SMALL_STEP_BACK:            {              if (g_Player.CanSeek)              {                // seek back 5 sec                double dPos = g_Player.CurrentPosition;                  if (dPos > 5)                {                  g_Player.SeekAbsolute(dPos - 5.0d);                }              }            }            break;            case Action.ActionType.ACTION_SMALL_STEP_FORWARD:            {              if (g_Player.CanSeek)              {                // seek forward 5 sec                double dPos = g_Player.Duration - g_Player.CurrentPosition;                  if (dPos > 5)                {                  g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);                }              }            }            break;            case Action.ActionType.ACTION_PLAY:          case Action.ActionType.ACTION_MUSIC_PLAY:            {              g_Player.StepNow();              g_Player.Speed = 1;                if (g_Player.Paused)              {                g_Player.Pause();              }            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIMusicFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {            ////case Action.ActionType.ACTION_PREV_ITEM:            ////    {            ////        //g_playlistPlayer.PlayPrevious();            ////    }            ////    break;              ////case Action.ActionType.ACTION_NEXT_ITEM:            ////    {            ////        //g_playlistPlayer.PlayNext();            ////    }            ////    break;            case Action.ActionType.ACTION_PREVIOUS_MENU:          case Action.ActionType.ACTION_MOUSE_CLICK:          case Action.ActionType.ACTION_SHOW_GUI:            {              GUIGraphicsContext.IsFullScreenVideo = false;              GUIWindowManager.ShowPreviousWindow();              return;            }            case Action.ActionType.ACTION_MOVE_DOWN:          case Action.ActionType.ACTION_BIG_STEP_BACK:            {              double currentpos = g_Player.CurrentPosition;              double duration = g_Player.Duration;              double percent = (currentpos / duration) * 100d;              percent -= 10d;                if (percent < 0)              {                percent = 0;              }                g_Player.SeekAsolutePercentage((int)percent);              return;            }            case Action.ActionType.ACTION_MOVE_UP:          case Action.ActionType.ACTION_BIG_STEP_FORWARD:            {              double currentpos = g_Player.CurrentPosition;              double duration = g_Player.Duration;              double percent = (currentpos / duration) * 100d;              percent += 10d;                if (percent > 100d)              {                percent = 100d;              }                g_Player.SeekAsolutePercentage((int)percent);              return;            }            case Action.ActionType.ACTION_STOP:            {              Log.Info("GUIMusicFullscreen:stop");              g_Player.Stop();              GUIWindowManager.ShowPreviousWindow();            }            break;            case Action.ActionType.ACTION_SMALL_STEP_BACK:            {              if (g_Player.CanSeek)              {                // seek back 5 sec                double dPos = g_Player.CurrentPosition;                  if (dPos > 5)                {                  g_Player.SeekAbsolute(dPos - 5.0d);                }              }            }            break;            case Action.ActionType.ACTION_SMALL_STEP_FORWARD:            {              if (g_Player.CanSeek)              {                // seek forward 5 sec                double dPos = g_Player.Duration - g_Player.CurrentPosition;                  if (dPos > 5)                {                  g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);                }              }            }            break;            case Action.ActionType.ACTION_PLAY:          case Action.ActionType.ACTION_MUSIC_PLAY:            {              g_Player.StepNow();              g_Player.Speed = 1;                if (g_Player.Paused)              {                g_Player.Pause();              }            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIMusicFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {            ////case Action.ActionType.ACTION_PREV_ITEM:            ////    {            ////        //g_playlistPlayer.PlayPrevious();            ////    }            ////    break;              ////case Action.ActionType.ACTION_NEXT_ITEM:            ////    {            ////        //g_playlistPlayer.PlayNext();            ////    }            ////    break;            case Action.ActionType.ACTION_PREVIOUS_MENU:          case Action.ActionType.ACTION_MOUSE_CLICK:          case Action.ActionType.ACTION_SHOW_GUI:            {              GUIGraphicsContext.IsFullScreenVideo = false;              GUIWindowManager.ShowPreviousWindow();              return;            }            case Action.ActionType.ACTION_MOVE_DOWN:          case Action.ActionType.ACTION_BIG_STEP_BACK:            {              double currentpos = g_Player.CurrentPosition;              double duration = g_Player.Duration;              double percent = (currentpos / duration) * 100d;              percent -= 10d;                if (percent < 0)              {                percent = 0;              }                g_Player.SeekAsolutePercentage((int)percent);              return;            }            case Action.ActionType.ACTION_MOVE_UP:          case Action.ActionType.ACTION_BIG_STEP_FORWARD:            {              double currentpos = g_Player.CurrentPosition;              double duration = g_Player.Duration;              double percent = (currentpos / duration) * 100d;              percent += 10d;                if (percent > 100d)              {                percent = 100d;              }                g_Player.SeekAsolutePercentage((int)percent);              return;            }            case Action.ActionType.ACTION_STOP:            {              Log.Info("GUIMusicFullscreen:stop");              g_Player.Stop();              GUIWindowManager.ShowPreviousWindow();            }            break;            case Action.ActionType.ACTION_SMALL_STEP_BACK:            {              if (g_Player.CanSeek)              {                // seek back 5 sec                double dPos = g_Player.CurrentPosition;                  if (dPos > 5)                {                  g_Player.SeekAbsolute(dPos - 5.0d);                }              }            }            break;            case Action.ActionType.ACTION_SMALL_STEP_FORWARD:            {              if (g_Player.CanSeek)              {                // seek forward 5 sec                double dPos = g_Player.Duration - g_Player.CurrentPosition;                  if (dPos > 5)                {                  g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);                }              }            }            break;            case Action.ActionType.ACTION_PLAY:          case Action.ActionType.ACTION_MUSIC_PLAY:            {              g_Player.StepNow();              g_Player.Speed = 1;                if (g_Player.Paused)              {                g_Player.Pause();              }            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIMusicFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {            ////case Action.ActionType.ACTION_PREV_ITEM:            ////    {            ////        //g_playlistPlayer.PlayPrevious();            ////    }            ////    break;              ////case Action.ActionType.ACTION_NEXT_ITEM:            ////    {            ////        //g_playlistPlayer.PlayNext();            ////    }            ////    break;            case Action.ActionType.ACTION_PREVIOUS_MENU:          case Action.ActionType.ACTION_MOUSE_CLICK:          case Action.ActionType.ACTION_SHOW_GUI:            {              GUIGraphicsContext.IsFullScreenVideo = false;              GUIWindowManager.ShowPreviousWindow();              return;            }            case Action.ActionType.ACTION_MOVE_DOWN:          case Action.ActionType.ACTION_BIG_STEP_BACK:            {              double currentpos = g_Player.CurrentPosition;              double duration = g_Player.Duration;              double percent = (currentpos / duration) * 100d;              percent -= 10d;                if (percent < 0)              {                percent = 0;              }                g_Player.SeekAsolutePercentage((int)percent);              return;            }            case Action.ActionType.ACTION_MOVE_UP:          case Action.ActionType.ACTION_BIG_STEP_FORWARD:            {              double currentpos = g_Player.CurrentPosition;              double duration = g_Player.Duration;              double percent = (currentpos / duration) * 100d;              percent += 10d;                if (percent > 100d)              {                percent = 100d;              }                g_Player.SeekAsolutePercentage((int)percent);              return;            }            case Action.ActionType.ACTION_STOP:            {              Log.Info("GUIMusicFullscreen:stop");              g_Player.Stop();              GUIWindowManager.ShowPreviousWindow();            }            break;            case Action.ActionType.ACTION_SMALL_STEP_BACK:            {              if (g_Player.CanSeek)              {                // seek back 5 sec                double dPos = g_Player.CurrentPosition;                  if (dPos > 5)                {                  g_Player.SeekAbsolute(dPos - 5.0d);                }              }            }            break;            case Action.ActionType.ACTION_SMALL_STEP_FORWARD:            {              if (g_Player.CanSeek)              {                // seek forward 5 sec                double dPos = g_Player.Duration - g_Player.CurrentPosition;                  if (dPos > 5)                {                  g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);                }              }            }            break;            case Action.ActionType.ACTION_PLAY:          case Action.ActionType.ACTION_MUSIC_PLAY:            {              g_Player.StepNow();              g_Player.Speed = 1;                if (g_Player.Paused)              {                g_Player.Pause();              }            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIMusicFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {            ////case Action.ActionType.ACTION_PREV_ITEM:            ////    {            ////        //g_playlistPlayer.PlayPrevious();            ////    }            ////    break;              ////case Action.ActionType.ACTION_NEXT_ITEM:            ////    {            ////        //g_playlistPlayer.PlayNext();            ////    }            ////    break;            case Action.ActionType.ACTION_PREVIOUS_MENU:          case Action.ActionType.ACTION_MOUSE_CLICK:          case Action.ActionType.ACTION_SHOW_GUI:            {              GUIGraphicsContext.IsFullScreenVideo = false;              GUIWindowManager.ShowPreviousWindow();              return;            }            case Action.ActionType.ACTION_MOVE_DOWN:          case Action.ActionType.ACTION_BIG_STEP_BACK:            {              double currentpos = g_Player.CurrentPosition;              double duration = g_Player.Duration;              double percent = (currentpos / duration) * 100d;              percent -= 10d;                if (percent < 0)              {                percent = 0;              }                g_Player.SeekAsolutePercentage((int)percent);              return;            }            case Action.ActionType.ACTION_MOVE_UP:          case Action.ActionType.ACTION_BIG_STEP_FORWARD:            {              double currentpos = g_Player.CurrentPosition;              double duration = g_Player.Duration;              double percent = (currentpos / duration) * 100d;              percent += 10d;                if (percent > 100d)              {                percent = 100d;              }                g_Player.SeekAsolutePercentage((int)percent);              return;            }            case Action.ActionType.ACTION_STOP:            {              Log.Info("GUIMusicFullscreen:stop");              g_Player.Stop();              GUIWindowManager.ShowPreviousWindow();            }            break;            case Action.ActionType.ACTION_SMALL_STEP_BACK:            {              if (g_Player.CanSeek)              {                // seek back 5 sec                double dPos = g_Player.CurrentPosition;                  if (dPos > 5)                {                  g_Player.SeekAbsolute(dPos - 5.0d);                }              }            }            break;            case Action.ActionType.ACTION_SMALL_STEP_FORWARD:            {              if (g_Player.CanSeek)              {                // seek forward 5 sec                double dPos = g_Player.Duration - g_Player.CurrentPosition;                  if (dPos > 5)                {                  g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);                }              }            }            break;            case Action.ActionType.ACTION_PLAY:          case Action.ActionType.ACTION_MUSIC_PLAY:            {              g_Player.StepNow();              g_Player.Speed = 1;                if (g_Player.Paused)              {                g_Player.Pause();              }            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIMusicFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {            ////case Action.ActionType.ACTION_PREV_ITEM:            ////    {            ////        //g_playlistPlayer.PlayPrevious();            ////    }            ////    break;              ////case Action.ActionType.ACTION_NEXT_ITEM:            ////    {            ////        //g_playlistPlayer.PlayNext();            ////    }            ////    break;            case Action.ActionType.ACTION_PREVIOUS_MENU:          case Action.ActionType.ACTION_MOUSE_CLICK:          case Action.ActionType.ACTION_SHOW_GUI:            {              GUIGraphicsContext.IsFullScreenVideo = false;              GUIWindowManager.ShowPreviousWindow();              return;            }            case Action.ActionType.ACTION_MOVE_DOWN:          case Action.ActionType.ACTION_BIG_STEP_BACK:            {              double currentpos = g_Player.CurrentPosition;              double duration = g_Player.Duration;              double percent = (currentpos / duration) * 100d;              percent -= 10d;                if (percent < 0)              {                percent = 0;              }                g_Player.SeekAsolutePercentage((int)percent);              return;            }            case Action.ActionType.ACTION_MOVE_UP:          case Action.ActionType.ACTION_BIG_STEP_FORWARD:            {              double currentpos = g_Player.CurrentPosition;              double duration = g_Player.Duration;              double percent = (currentpos / duration) * 100d;              percent += 10d;                if (percent > 100d)              {                percent = 100d;              }                g_Player.SeekAsolutePercentage((int)percent);              return;            }            case Action.ActionType.ACTION_STOP:            {              Log.Info("GUIMusicFullscreen:stop");              g_Player.Stop();              GUIWindowManager.ShowPreviousWindow();            }            break;            case Action.ActionType.ACTION_SMALL_STEP_BACK:            {              if (g_Player.CanSeek)              {                // seek back 5 sec                double dPos = g_Player.CurrentPosition;                  if (dPos > 5)                {                  g_Player.SeekAbsolute(dPos - 5.0d);                }              }            }            break;            case Action.ActionType.ACTION_SMALL_STEP_FORWARD:            {              if (g_Player.CanSeek)              {                // seek forward 5 sec                double dPos = g_Player.Duration - g_Player.CurrentPosition;                  if (dPos > 5)                {                  g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);                }              }            }            break;            case Action.ActionType.ACTION_PLAY:          case Action.ActionType.ACTION_MUSIC_PLAY:            {              g_Player.StepNow();              g_Player.Speed = 1;                if (g_Player.Paused)              {                g_Player.Pause();              }            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIMusicFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {            ////case Action.ActionType.ACTION_PREV_ITEM:            ////    {            ////        //g_playlistPlayer.PlayPrevious();            ////    }            ////    break;              ////case Action.ActionType.ACTION_NEXT_ITEM:            ////    {            ////        //g_playlistPlayer.PlayNext();            ////    }            ////    break;            case Action.ActionType.ACTION_PREVIOUS_MENU:          case Action.ActionType.ACTION_MOUSE_CLICK:          case Action.ActionType.ACTION_SHOW_GUI:            {              GUIGraphicsContext.IsFullScreenVideo = false;              GUIWindowManager.ShowPreviousWindow();              return;            }            case Action.ActionType.ACTION_MOVE_DOWN:          case Action.ActionType.ACTION_BIG_STEP_BACK:            {              double currentpos = g_Player.CurrentPosition;              double duration = g_Player.Duration;              double percent = (currentpos / duration) * 100d;              percent -= 10d;                if (percent < 0)              {                percent = 0;              }                g_Player.SeekAsolutePercentage((int)percent);              return;            }            case Action.ActionType.ACTION_MOVE_UP:          case Action.ActionType.ACTION_BIG_STEP_FORWARD:            {              double currentpos = g_Player.CurrentPosition;              double duration = g_Player.Duration;              double percent = (currentpos / duration) * 100d;              percent += 10d;                if (percent > 100d)              {                percent = 100d;              }                g_Player.SeekAsolutePercentage((int)percent);              return;            }            case Action.ActionType.ACTION_STOP:            {              Log.Info("GUIMusicFullscreen:stop");              g_Player.Stop();              GUIWindowManager.ShowPreviousWindow();            }            break;            case Action.ActionType.ACTION_SMALL_STEP_BACK:            {              if (g_Player.CanSeek)              {                // seek back 5 sec                double dPos = g_Player.CurrentPosition;                  if (dPos > 5)                {                  g_Player.SeekAbsolute(dPos - 5.0d);                }              }            }            break;            case Action.ActionType.ACTION_SMALL_STEP_FORWARD:            {              if (g_Player.CanSeek)              {                // seek forward 5 sec                double dPos = g_Player.Duration - g_Player.CurrentPosition;                  if (dPos > 5)                {                  g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);                }              }            }            break;            case Action.ActionType.ACTION_PLAY:          case Action.ActionType.ACTION_MUSIC_PLAY:            {              g_Player.StepNow();              g_Player.Speed = 1;                if (g_Player.Paused)              {                g_Player.Pause();              }            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIMusicFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {            ////case Action.ActionType.ACTION_PREV_ITEM:            ////    {            ////        //g_playlistPlayer.PlayPrevious();            ////    }            ////    break;              ////case Action.ActionType.ACTION_NEXT_ITEM:            ////    {            ////        //g_playlistPlayer.PlayNext();            ////    }            ////    break;            case Action.ActionType.ACTION_PREVIOUS_MENU:          case Action.ActionType.ACTION_MOUSE_CLICK:          case Action.ActionType.ACTION_SHOW_GUI:            {              GUIGraphicsContext.IsFullScreenVideo = false;              GUIWindowManager.ShowPreviousWindow();              return;            }            case Action.ActionType.ACTION_MOVE_DOWN:          case Action.ActionType.ACTION_BIG_STEP_BACK:            {              double currentpos = g_Player.CurrentPosition;              double duration = g_Player.Duration;              double percent = (currentpos / duration) * 100d;              percent -= 10d;                if (percent < 0)              {                percent = 0;              }                g_Player.SeekAsolutePercentage((int)percent);              return;            }            case Action.ActionType.ACTION_MOVE_UP:          case Action.ActionType.ACTION_BIG_STEP_FORWARD:            {              double currentpos = g_Player.CurrentPosition;              double duration = g_Player.Duration;              double percent = (currentpos / duration) * 100d;              percent += 10d;                if (percent > 100d)              {                percent = 100d;              }                g_Player.SeekAsolutePercentage((int)percent);              return;            }            case Action.ActionType.ACTION_STOP:            {              Log.Info("GUIMusicFullscreen:stop");              g_Player.Stop();              GUIWindowManager.ShowPreviousWindow();            }            break;            case Action.ActionType.ACTION_SMALL_STEP_BACK:            {              if (g_Player.CanSeek)              {                // seek back 5 sec                double dPos = g_Player.CurrentPosition;                  if (dPos > 5)                {                  g_Player.SeekAbsolute(dPos - 5.0d);                }              }            }            break;            case Action.ActionType.ACTION_SMALL_STEP_FORWARD:            {              if (g_Player.CanSeek)              {                // seek forward 5 sec                double dPos = g_Player.Duration - g_Player.CurrentPosition;                  if (dPos > 5)                {                  g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);                }              }            }            break;            case Action.ActionType.ACTION_PLAY:          case Action.ActionType.ACTION_MUSIC_PLAY:            {              g_Player.StepNow();              g_Player.Speed = 1;                if (g_Player.Paused)              {                g_Player.Pause();              }            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIMusicFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {            ////case Action.ActionType.ACTION_PREV_ITEM:            ////    {            ////        //g_playlistPlayer.PlayPrevious();            ////    }            ////    break;              ////case Action.ActionType.ACTION_NEXT_ITEM:            ////    {            ////        //g_playlistPlayer.PlayNext();            ////    }            ////    break;            case Action.ActionType.ACTION_PREVIOUS_MENU:          case Action.ActionType.ACTION_MOUSE_CLICK:          case Action.ActionType.ACTION_SHOW_GUI:            {              GUIGraphicsContext.IsFullScreenVideo = false;              GUIWindowManager.ShowPreviousWindow();              return;            }            case Action.ActionType.ACTION_MOVE_DOWN:          case Action.ActionType.ACTION_BIG_STEP_BACK:            {              double currentpos = g_Player.CurrentPosition;              double duration = g_Player.Duration;              double percent = (currentpos / duration) * 100d;              percent -= 10d;                if (percent < 0)              {                percent = 0;              }                g_Player.SeekAsolutePercentage((int)percent);              return;            }            case Action.ActionType.ACTION_MOVE_UP:          case Action.ActionType.ACTION_BIG_STEP_FORWARD:            {              double currentpos = g_Player.CurrentPosition;              double duration = g_Player.Duration;              double percent = (currentpos / duration) * 100d;              percent += 10d;                if (percent > 100d)              {                percent = 100d;              }                g_Player.SeekAsolutePercentage((int)percent);              return;            }            case Action.ActionType.ACTION_STOP:            {              Log.Info("GUIMusicFullscreen:stop");              g_Player.Stop();              GUIWindowManager.ShowPreviousWindow();            }            break;            case Action.ActionType.ACTION_SMALL_STEP_BACK:            {              if (g_Player.CanSeek)              {                // seek back 5 sec                double dPos = g_Player.CurrentPosition;                  if (dPos > 5)                {                  g_Player.SeekAbsolute(dPos - 5.0d);                }              }            }            break;            case Action.ActionType.ACTION_SMALL_STEP_FORWARD:            {              if (g_Player.CanSeek)              {                // seek forward 5 sec                double dPos = g_Player.Duration - g_Player.CurrentPosition;                  if (dPos > 5)                {                  g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);                }              }            }            break;            case Action.ActionType.ACTION_PLAY:          case Action.ActionType.ACTION_MUSIC_PLAY:            {              g_Player.StepNow();              g_Player.Speed = 1;                if (g_Player.Paused)              {                g_Player.Pause();              }            }            break;        }
Magic Number,MediaPortal.GUI.Video,GUIMusicFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFullscreen.cs,OnAction,The following statement contains a magic number: switch (action.wID)        {            ////case Action.ActionType.ACTION_PREV_ITEM:            ////    {            ////        //g_playlistPlayer.PlayPrevious();            ////    }            ////    break;              ////case Action.ActionType.ACTION_NEXT_ITEM:            ////    {            ////        //g_playlistPlayer.PlayNext();            ////    }            ////    break;            case Action.ActionType.ACTION_PREVIOUS_MENU:          case Action.ActionType.ACTION_MOUSE_CLICK:          case Action.ActionType.ACTION_SHOW_GUI:            {              GUIGraphicsContext.IsFullScreenVideo = false;              GUIWindowManager.ShowPreviousWindow();              return;            }            case Action.ActionType.ACTION_MOVE_DOWN:          case Action.ActionType.ACTION_BIG_STEP_BACK:            {              double currentpos = g_Player.CurrentPosition;              double duration = g_Player.Duration;              double percent = (currentpos / duration) * 100d;              percent -= 10d;                if (percent < 0)              {                percent = 0;              }                g_Player.SeekAsolutePercentage((int)percent);              return;            }            case Action.ActionType.ACTION_MOVE_UP:          case Action.ActionType.ACTION_BIG_STEP_FORWARD:            {              double currentpos = g_Player.CurrentPosition;              double duration = g_Player.Duration;              double percent = (currentpos / duration) * 100d;              percent += 10d;                if (percent > 100d)              {                percent = 100d;              }                g_Player.SeekAsolutePercentage((int)percent);              return;            }            case Action.ActionType.ACTION_STOP:            {              Log.Info("GUIMusicFullscreen:stop");              g_Player.Stop();              GUIWindowManager.ShowPreviousWindow();            }            break;            case Action.ActionType.ACTION_SMALL_STEP_BACK:            {              if (g_Player.CanSeek)              {                // seek back 5 sec                double dPos = g_Player.CurrentPosition;                  if (dPos > 5)                {                  g_Player.SeekAbsolute(dPos - 5.0d);                }              }            }            break;            case Action.ActionType.ACTION_SMALL_STEP_FORWARD:            {              if (g_Player.CanSeek)              {                // seek forward 5 sec                double dPos = g_Player.Duration - g_Player.CurrentPosition;                  if (dPos > 5)                {                  g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);                }              }            }            break;            case Action.ActionType.ACTION_PLAY:          case Action.ActionType.ACTION_MUSIC_PLAY:            {              g_Player.StepNow();              g_Player.Speed = 1;                if (g_Player.Paused)              {                g_Player.Pause();              }            }            break;        }
Missing Default,MediaPortal.GUI.Music,GUICoverArtGrabberProgress,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUICoverArtGrabberProgress.cs,OnClicked,The following switch statement is missing a default case: switch (controlId)        {          case (int)ControlIDs.BTN_CANCEL:            {              Close();              break;            }            case (int)ControlIDs.BTN_START:            {              GetCoverArt();              break;            }            case (int)ControlIDs.CHECK_SAVE_TO_ALBUM_FOLDER:            {              _SaveImageToAlbumFolder = checkSaveInAlbumFolder.Selected;              break;            }            case (int)ControlIDs.CHECK_SAVE_TO_THUMBS_FOLDER:            {              _SaveImageToThumbsFolder = checkSaveInThumbsFolder.Selected;              break;            }            case (int)ControlIDs.CHECK_SKIP_IF_EXISTS:            {              _SkipIfCoverArtExists = checkSkipExisting.Selected;              break;            }        }
Missing Default,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,GUIWindowManager_OnNewMessage,The following switch statement is missing a default case: switch (message.Message)       {         case GUIMessage.MessageType.GUI_MSG_AUTOPLAY_VOLUME:           if (message.Param1 == (int)Ripper.AutoPlay.MediaType.AUDIO)           {             if (message.Param2 == (int)Ripper.AutoPlay.MediaSubType.AUDIO_CD ||                 message.Param2 == (int)Ripper.AutoPlay.MediaSubType.FILES)               PlayCD(message.Label);           }           break;          case GUIMessage.MessageType.GUI_MSG_VOLUME_REMOVED:           MusicCD = null;           if (g_Player.Playing && g_Player.IsMusic &&               message.Label.Equals(g_Player.CurrentFile.Substring(0' 2)' StringComparison.InvariantCultureIgnoreCase))           {             Log.Info("GUIMusicFiles: Stop since media is ejected");             g_Player.Stop();             playlistPlayer.GetPlaylist(PlayListType.PLAYLIST_MUSIC_TEMP).Clear();             playlistPlayer.GetPlaylist(PlayListType.PLAYLIST_MUSIC).Clear();           }           if (GUIWindowManager.ActiveWindow == GetID)           {             if (Util.Utils.IsDVD(currentFolder))             {               currentFolder = string.Empty;               LoadDirectory(currentFolder);             }           }           break;          case GUIMessage.MessageType.GUI_MSG_ONRESUME:            using (Settings xmlreader = new MPSettings())            {              if (!xmlreader.GetValueAsBool("general"' "showlastactivemodule"' false))              {                currentFolder = string.Empty;              }            }            Log.Debug("{0}:{1}"' SerializeName' message.Message);           break;       }
Missing Default,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)       {         case GUIMessage.MessageType.GUI_MSG_PLAY_AUDIO_CD:           PlayCD(message.Label);           break;          case GUIMessage.MessageType.GUI_MSG_FILE_DOWNLOADING:           facadeLayout.OnMessage(message);           break;          case GUIMessage.MessageType.GUI_MSG_FILE_DOWNLOADED:           facadeLayout.OnMessage(message);           break;            case GUIMessage.MessageType.GUI_MSG_MUSICFILE_CREATED:            AddItem(message.Label' -1);            break;            case GUIMessage.MessageType.GUI_MSG_MUSICFILE_DELETED:            DeleteItem(message.Label);            SelectCurrentItem();            break;            case GUIMessage.MessageType.GUI_MSG_MUSICFILE_RENAMED:            ReplaceItem(message.Label2' message.Label);            SelectCurrentItem();            break;            case GUIMessage.MessageType.GUI_MSG_MUSICDIRECTORY_CREATED:            AddItem(message.Label' -1);            break;            case GUIMessage.MessageType.GUI_MSG_MUSICDIRECTORY_DELETED:            DeleteItem(message.Label);            SelectCurrentItem();            break;            case GUIMessage.MessageType.GUI_MSG_MUSICDIRECTORY_RENAMED:            ReplaceItem(message.Label2' message.Label);            SelectCurrentItem();            break;          case GUIMessage.MessageType.GUI_MSG_SHOW_DIRECTORY:           currentFolder = message.Label;           LoadDirectory(currentFolder);           break;          case GUIMessage.MessageType.GUI_MSG_ADD_REMOVABLE_DRIVE:           if (_switchRemovableDrives)           {             currentFolder = message.Label;             if (!Util.Utils.IsRemovable(message.Label))             {               _virtualDirectory.AddRemovableDrive(message.Label' message.Label2);             }           }           if (_removableDrivesHandlerThread != null)            {              _removableDrivesHandlerThread.Join();            }           RemovableDrivesHandler.ListRemovableDrives(_virtualDirectory.GetDirectoryExt(string.Empty));           LoadDirectory(currentFolder);           break;         case GUIMessage.MessageType.GUI_MSG_REMOVE_REMOVABLE_DRIVE:           if (!Util.Utils.IsRemovable(message.Label))           {             _virtualDirectory.Remove(message.Label);           }           if (currentFolder.Contains(message.Label))           {             currentFolder = string.Empty;           }           LoadDirectory(currentFolder);           break;          case GUIMessage.MessageType.GUI_MSG_VOLUME_INSERTED:         case GUIMessage.MessageType.GUI_MSG_VOLUME_REMOVED:           if (currentFolder == string.Empty || currentFolder.Substring(0' 2) == message.Label)           {             currentFolder = string.Empty;             LoadDirectory(currentFolder);           }           break;          case GUIMessage.MessageType.GUI_MSG_LAYOUT_CHANGED:           FolderSetting folderSettingL = new FolderSetting();           folderSettingL.UpdateFolders(-1' CurrentSortAsc' (int)CurrentLayout);           break;          case GUIMessage.MessageType.GUI_MSG_SORT_CHANGED:           FolderSetting folderSettingS = new FolderSetting();           folderSettingS.UpdateFolders((int)CurrentSortMethod' CurrentSortAsc' -1);           break;       }
Missing Default,MediaPortal.GUI.Music,GUIMusicFiles,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFiles.cs,OnShowContextMenu,The following switch statement is missing a default case: switch (dlg.SelectedId)       {         case 928: // find coverart           OnFindCoverArt(itemNo);           break;          case 4521: // Show album info           OnInfo(itemNo);           break;          case 1225: // Queue item           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // Queue all items           AddSelectionToCurrentPlaylist(false' true);           break;          case 4551: // Play next           InsertSelectionToPlaylist(false);           break;          case 4552: // Play now           AddSelectionToCurrentPlaylist(true' false);           break;          case 926: // add to playlist           AddSelectionToPlaylist();           break;          case 136: // show playlist           _selectedItem = facadeLayout.SelectedListItemIndex;           SaveFolderSettings(currentFolder);           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;          case 607: // Load (only CDROM)           if (item != null)            {              Util.Utils.CloseCDROM(Path.GetPathRoot(item.Path));            }           break;          case 654: // Eject           if (item == null || item.Path == null || Util.Utils.getDriveType(item.Path) != 5)           {             Util.Utils.EjectCDROM();           }           else           {             Util.Utils.EjectCDROM(Path.GetPathRoot(item.Path));           }           LoadDirectory(string.Empty);           break;          case 930: // add to favorites           AddSongToFavorites(item);           break;          case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;          case 102:           OnScan();           break;          case 500: // File menu           {             // get pincode             if (_fileMenuPinCode != string.Empty)             {               string strUserCode = string.Empty;               if (GetUserPasswordString(ref strUserCode) && strUserCode == _fileMenuPinCode)               {                 OnShowFileMenu();               }             }             else             {               OnShowFileMenu();             }           }           break;          case 1100: // Import CD           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_DISC' 0' 0));           break;          case 1101: // Import seltected track           // Stop playback before importing           if (g_Player.Playing)           {             g_Player.Stop();           }            OnAction(new Action(Action.ActionType.ACTION_IMPORT_TRACK' 0' 0));           break;          case 1102: // Cancel CD import           OnAction(new Action(Action.ActionType.ACTION_CANCEL_IMPORT' 0' 0));           break;          case 751: // Show all songs from this artist           {             string artist = GUIPropertyManager.GetProperty("#Play.Current.Artist");             int viewNr = -1;             for (int x = 0; x < handler.Views.Count; ++x)             {               ViewDefinition view = (ViewDefinition)handler.Views[x];               if (view.Name.ToLowerInvariant().IndexOf("artist"' StringComparison.Ordinal) >= 0)               {                 viewNr = x;               }             }             if (viewNr < 0)             {               return;             }             ViewDefinition selectedView = (ViewDefinition)handler.Views[viewNr];             handler.CurrentView = selectedView.Name;             MusicState.View = selectedView.Name;             GUIMusicGenres.SelectArtist(artist);             int nNewWindow = (int)Window.WINDOW_MUSIC_GENRE;             if (GetID != nNewWindow)             {               MusicState.StartWindow = nNewWindow;               if (nNewWindow != GetID)               {                 GUIWindowManager.ReplaceWindow(nNewWindow);               }             }             else             {               LoadDirectory(string.Empty);               if (facadeLayout.Count <= 0)               {                 GUIControl.FocusControl(GetID' btnLayouts.GetID);               }             }           }            break;         case 831:           string message = string.Empty;            if (item != null && (Util.Utils.IsUsbHdd(item.Path) || Util.Utils.IsRemovableUsbDisk(item.Path)))           {           if (!RemovableDriveHelper.EjectDrive(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           }           else if (item != null && !RemovableDriveHelper.EjectMedia(item.Path' out message))           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(832));             pDlgOK.SetLine(2' string.Empty);             pDlgOK.SetLine(3' message);             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           else           {             GUIDialogOK pDlgOK = (GUIDialogOK)GUIWindowManager.GetWindow((int)Window.WINDOW_DIALOG_OK);             pDlgOK.SetHeading(831);             pDlgOK.SetLine(1' GUILocalizeStrings.Get(833));             pDlgOK.DoModal(GUIWindowManager.ActiveWindow);           }           break;            case 868: // Reset V.directory            {              ResetShares();                if (_virtualDirectory.DefaultShare != null && _virtualDirectory.DefaultShare.Path != string.Empty)              {                LoadDirectory(_virtualDirectory.DefaultShare.Path);              }              else              {                LoadDirectory(string.Empty);              }            }            break;            case 1299: // Refresh current directory            {              if (facadeLayout.ListLayout.ListItems.Count > 0 && !string.IsNullOrEmpty(currentFolder))              {                facadeLayout.SelectedListItemIndex = 0;                LoadDirectory(currentFolder);              }            }            break;       }
Missing Default,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,OnShowContextMenu,The following switch statement is missing a default case: switch (dlg.SelectedId)       {         case 4521: // Show album info           OnInfo(itemNo);           break;          case 4552: // Play now (clear playlist' play' and jump to Now playing)           AddSelectionToCurrentPlaylist(true' false);           break;          case 4551: // Play next (insert after current song)           InsertSelectionToPlaylist(false);           break;          case 1225: // queue item at end of current playlist           AddSelectionToCurrentPlaylist(false' false);           break;          case 1226: // queue all items at end of current playlist           AddSelectionToCurrentPlaylist(false' true);           break;          case 926:  // add to playlist           AddSelectionToPlaylist();           break;            //case 136: // show playlist         case 4553: // show playlist           GUIWindowManager.ActivateWindow((int)Window.WINDOW_MUSIC_PLAYLIST);           break;         case 930: // add to favorites           AddSongToFavorites(item);           break;         case 931: // Rating           OnSetRating(facadeLayout.SelectedListItemIndex);           break;         case 718: // Clear top 100           m_database.ResetTop100();           LoadDirectory("db_view");           break;       }
Missing Default,MediaPortal.GUI.Music,GUIMusicGenres,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicGenres.cs,OnThreadMessage,The following switch statement is missing a default case: switch (message.Message)       {         case GUIMessage.MessageType.GUI_MSG_PLAYING_10SEC:           if (GUIWindowManager.ActiveWindow == GetID)           {             // SV             //if (handler != null && handler.CurrentView == "Top100") return;           }           string strFile = message.Label;           if (strFile.StartsWith(@"http://") || strFile.StartsWith(@"https://"))           {             break; // Don't try increasing the Top100 for streams           }           if (Util.Utils.IsAudio(strFile))           {             MusicDatabase dbs = MusicDatabase.Instance;             dbs.IncrTop100CounterByFileName(strFile);           }           break;       }
Missing Default,MediaPortal.GUI.Music,MusicFolderWatcherHelper,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\MusicsFolderWatcherHelper.cs,ProcessEvents,The following switch statement is missing a default case: switch (currentEvent.Type)                  {                      #region file events handlers                      // Create Music                    case FolderWatcherEvent.EventType.Create:                    case FolderWatcherEvent.EventType.Change:                    {                      AddMusic(currentEvent.FileName);                      break;                    }                      // Delete Music                    case FolderWatcherEvent.EventType.Delete:                      {                        DeleteMusic(currentEvent.FileName);                        break;                      }                      // Rename Music                    case FolderWatcherEvent.EventType.Rename:                      {                        RenameMusic(currentEvent.OldFileName' currentEvent.FileName);                        break;                      }                        #endregion                      #region directory events handlers                      // Create directory                    case FolderWatcherEvent.EventType.CreateDirectory:                      {                        AddMusicDirectory(currentEvent.FileName);                        break;                      }                      // Delete directory                    case FolderWatcherEvent.EventType.DeleteDirectory:                      {                        DeleteMusicDirectory(currentEvent.FileName);                        break;                      }                      // Rename directory                    case FolderWatcherEvent.EventType.RenameDirectory:                      {                        RenameMusicDirectory(currentEvent.OldFileName' currentEvent.FileName);                        break;                      }                        #endregion                    }
Missing Default,MediaPortal.GUI.Video,GUIMusicFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFullscreen.cs,OnAction,The following switch statement is missing a default case: switch (action.wID)        {            ////case Action.ActionType.ACTION_PREV_ITEM:            ////    {            ////        //g_playlistPlayer.PlayPrevious();            ////    }            ////    break;              ////case Action.ActionType.ACTION_NEXT_ITEM:            ////    {            ////        //g_playlistPlayer.PlayNext();            ////    }            ////    break;            case Action.ActionType.ACTION_PREVIOUS_MENU:          case Action.ActionType.ACTION_MOUSE_CLICK:          case Action.ActionType.ACTION_SHOW_GUI:            {              GUIGraphicsContext.IsFullScreenVideo = false;              GUIWindowManager.ShowPreviousWindow();              return;            }            case Action.ActionType.ACTION_MOVE_DOWN:          case Action.ActionType.ACTION_BIG_STEP_BACK:            {              double currentpos = g_Player.CurrentPosition;              double duration = g_Player.Duration;              double percent = (currentpos / duration) * 100d;              percent -= 10d;                if (percent < 0)              {                percent = 0;              }                g_Player.SeekAsolutePercentage((int)percent);              return;            }            case Action.ActionType.ACTION_MOVE_UP:          case Action.ActionType.ACTION_BIG_STEP_FORWARD:            {              double currentpos = g_Player.CurrentPosition;              double duration = g_Player.Duration;              double percent = (currentpos / duration) * 100d;              percent += 10d;                if (percent > 100d)              {                percent = 100d;              }                g_Player.SeekAsolutePercentage((int)percent);              return;            }            case Action.ActionType.ACTION_STOP:            {              Log.Info("GUIMusicFullscreen:stop");              g_Player.Stop();              GUIWindowManager.ShowPreviousWindow();            }            break;            case Action.ActionType.ACTION_SMALL_STEP_BACK:            {              if (g_Player.CanSeek)              {                // seek back 5 sec                double dPos = g_Player.CurrentPosition;                  if (dPos > 5)                {                  g_Player.SeekAbsolute(dPos - 5.0d);                }              }            }            break;            case Action.ActionType.ACTION_SMALL_STEP_FORWARD:            {              if (g_Player.CanSeek)              {                // seek forward 5 sec                double dPos = g_Player.Duration - g_Player.CurrentPosition;                  if (dPos > 5)                {                  g_Player.SeekAbsolute(g_Player.CurrentPosition + 5.0d);                }              }            }            break;            case Action.ActionType.ACTION_PLAY:          case Action.ActionType.ACTION_MUSIC_PLAY:            {              g_Player.StepNow();              g_Player.Speed = 1;                if (g_Player.Paused)              {                g_Player.Pause();              }            }            break;        }
Missing Default,MediaPortal.GUI.Video,GUIMusicFullscreen,D:\research\architectureSmells\repos\MediaPortal_MediaPortal-1\mediaportal\WindowPlugins\GUIMusic\GUIMusicFullscreen.cs,OnMessage,The following switch statement is missing a default case: switch (message.Message)        {          case GUIMessage.MessageType.GUI_MSG_WINDOW_INIT:            {              base.OnMessage(message);              GUIGraphicsContext.IsFullScreenVideo = true;              GUILayerManager.RegisterLayer(this' GUILayerManager.LayerType.Osd);              return true;            }            case GUIMessage.MessageType.GUI_MSG_WINDOW_DEINIT:            {              base.OnMessage(message);              GUILayerManager.UnRegisterLayer(this);              GUIGraphicsContext.IsFullScreenVideo = false;              return true;            }        }
