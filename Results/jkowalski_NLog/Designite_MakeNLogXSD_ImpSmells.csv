Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MakeNLogXSD,Program,F:\newReposMay17\jkowalski_NLog\tools\MakeNLogXSD\Program.cs,Main,Cyclomatic complexity of the method is 17
Complex Method,MakeNLogXSD,XsdFileGenerator,F:\newReposMay17\jkowalski_NLog\tools\MakeNLogXSD\XsdFileGenerator.cs,ProcessApiFile,Cyclomatic complexity of the method is 20
Complex Method,MakeNLogXSD,XsdFileGenerator,F:\newReposMay17\jkowalski_NLog\tools\MakeNLogXSD\XsdFileGenerator.cs,GetXsdType,Cyclomatic complexity of the method is 14
Long Statement,MakeNLogXSD,XsdFileGenerator,F:\newReposMay17\jkowalski_NLog\tools\MakeNLogXSD\XsdFileGenerator.cs,ProcessApiFile,The length of the statement  "		var typeElement = new XElement (xsd + "complexType"' new XAttribute ("name"' (string)type.Attribute ("name"))' new XElement (xsd + "complexContent"' new XElement (xsd + "extension"' new XAttribute ("base"' baseType)' new XElement (xsd + "choice"' new XAttribute ("minOccurs"' "0")' new XAttribute ("maxOccurs"' "unbounded")' GetPropertyElements (type))' GetAttributeElements (type)))); " is 385.
Long Statement,MakeNLogXSD,XsdFileGenerator,F:\newReposMay17\jkowalski_NLog\tools\MakeNLogXSD\XsdFileGenerator.cs,ProcessApiFile,The length of the statement  "				typesGoHere.AddBeforeSelf (new XElement (xsd + "complexType"' new XAttribute ("name"' collectionElementType)' new XElement (xsd + "choice"' new XAttribute ("minOccurs"' "0")' new XAttribute ("maxOccurs"' "unbounded")' GetPropertyElements (elementType))' GetAttributeElements (elementType))); " is 291.
Long Statement,MakeNLogXSD,XsdFileGenerator,F:\newReposMay17\jkowalski_NLog\tools\MakeNLogXSD\XsdFileGenerator.cs,ProcessApiFile,The length of the statement  "			filtersGoHere.AddBeforeSelf (new XElement (xsd + "element"' new XAttribute ("name"' typeName)' new XAttribute ("type"' typeName))); " is 131.
Long Statement,MakeNLogXSD,XsdFileGenerator,F:\newReposMay17\jkowalski_NLog\tools\MakeNLogXSD\XsdFileGenerator.cs,GetAttributeElement,The length of the statement  "	var result = new XElement (xsd + "attribute"' new XAttribute ("name"' (string)propertyElement.Attribute ("camelName"))); " is 120.
Long Statement,MakeNLogXSD,XsdFileGenerator,F:\newReposMay17\jkowalski_NLog\tools\MakeNLogXSD\XsdFileGenerator.cs,GenerateEnumType,The length of the statement  "	var enumerationValues = enumProperty.Elements ("enum").Select (c => new XElement (xsd + "enumeration"' new XAttribute ("value"' (string)c.Attribute ("name")))); " is 160.
Long Statement,MakeNLogXSD,XsdFileGenerator,F:\newReposMay17\jkowalski_NLog\tools\MakeNLogXSD\XsdFileGenerator.cs,GenerateEnumType,The length of the statement  "	return new XElement (xsd + "simpleType"' new XAttribute ("name"' (string)enumProperty.Attribute ("enumType"))' new XElement (xsd + "restriction"' new XAttribute ("base"' "xs:string")' enumerationValues)); " is 204.
Long Statement,MakeNLogXSD,XsdFileGenerator,F:\newReposMay17\jkowalski_NLog\tools\MakeNLogXSD\XsdFileGenerator.cs,GetPropertyElement,The length of the statement  "	var result = new XElement (xsd + "element"' new XAttribute ("name"' (string)propertyElement.Attribute ("camelName"))' new XAttribute ("minOccurs"' "0")); " is 153.
Missing Default,MakeNLogXSD,XsdFileGenerator,F:\newReposMay17\jkowalski_NLog\tools\MakeNLogXSD\XsdFileGenerator.cs,ProcessApiFile,The following switch statement is missing a default case: switch ((string)type.Attribute ("kind")) {  case "target":  	baseType = "Target";  	if ((string)type.Attribute ("iswrapper") == "1") {  		baseType = "WrapperTargetBase";  	}  	if ((string)type.Attribute ("iscompound") == "1") {  		baseType = "CompoundTargetBase";  	}  	break;  case "filter":  	baseType = "Filter";  	break;  case "layout":  	baseType = "Layout";  	break;  }  
