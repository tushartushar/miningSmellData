Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SilverlightConsoleRunner,ConsoleRunner,F:\newReposMay17\jkowalski_NLog\tools\SilverlightConsoleRunner\ConsoleRunner.cs,Run,Cyclomatic complexity of the method is 23
Complex Method,SilverlightConsoleRunner,ConsoleRunner,F:\newReposMay17\jkowalski_NLog\tools\SilverlightConsoleRunner\ConsoleRunner.cs,OnTestMethodCompleted,Cyclomatic complexity of the method is 12
Complex Method,SilverlightConsoleRunner,Program,F:\newReposMay17\jkowalski_NLog\tools\SilverlightConsoleRunner\Program.cs,Main,Cyclomatic complexity of the method is 14
Long Statement,SilverlightConsoleRunner,ConsoleRunner,F:\newReposMay17\jkowalski_NLog\tools\SilverlightConsoleRunner\ConsoleRunner.cs,Run,The length of the statement  "		this.Log (string.Format (CultureInfo.InvariantCulture' "Passed: {0} Failed: {1} Pass Rate: {2}%"' this.PassedCount' this.FailedCount' Math.Round (100.0 * this.PassedCount / (this.PassedCount + this.FailedCount + this.OtherCount)' 2))); " is 235.
Magic Number,SilverlightConsoleRunner,ConsoleRunner,F:\newReposMay17\jkowalski_NLog\tools\SilverlightConsoleRunner\ConsoleRunner.cs,Run,The following statement contains a magic number: using (var httpServer = new MicroHttpServer ()) {  	httpServer.AddHandler ("/Completed"' OnTestCompleted);  	httpServer.AddHandler ("/TestMethodCompleted"' OnTestMethodCompleted);  	switch (SilverlightVersion) {  	case "SL2":  		httpServer.AddResourceHandler ("/Silverlight.js"' "text/plain"' typeof(ConsoleRunner)' "Silverlight2.js");  		httpServer.AddResourceHandler ("/XapHost.html"' "text/html"' typeof(ConsoleRunner)' "XapHost2.html");  		break;  	case "SL3":  		httpServer.AddResourceHandler ("/Silverlight.js"' "text/plain"' typeof(ConsoleRunner)' "Silverlight3.js");  		httpServer.AddResourceHandler ("/XapHost.html"' "text/html"' typeof(ConsoleRunner)' "XapHost3.html");  		break;  	case "SL4":  		httpServer.AddResourceHandler ("/Silverlight.js"' "text/plain"' typeof(ConsoleRunner)' "Silverlight4.js");  		httpServer.AddResourceHandler ("/XapHost.html"' "text/html"' typeof(ConsoleRunner)' "XapHost4.html");  		break;  	case "WP7":  	case "WP71":  		break;  	default:  		throw new NotSupportedException ("Unsupported silverlight version: '" + SilverlightVersion + "'");  	}  	httpServer.AddFileHandler ("/xapfile.xap"' "application/x-silverlight-app"' this.XapFile);  	httpServer.Start ();  	if (this.SilverlightVersion.StartsWith ("SL")) {  		using (var form = new RunnerForm ()) {  			form.Url = "http://localhost:" + httpServer.ListenPort + "/XapHost.html";  			this.currentForm = form;  			this.ResetTimer ();  			form.ShowDialog ();  			this.currentForm = null;  		}  	} else if (this.SilverlightVersion.StartsWith ("WP")) {  		XapRunner.RunXap (this.XapFile' this.IconFile' this.AppGuid' this.DevicePlatformName' this.DeviceName);  		this.ResetTimer ();  	} else {  		throw new NotImplementedException ();  	}  	this.finished.WaitOne ();  	this.Log (string.Format (CultureInfo.InvariantCulture' "Passed: {0} Failed: {1} Pass Rate: {2}%"' this.PassedCount' this.FailedCount' Math.Round (100.0 * this.PassedCount / (this.PassedCount + this.FailedCount + this.OtherCount)' 2)));  }  
Magic Number,SilverlightConsoleRunner,ConsoleRunner,F:\newReposMay17\jkowalski_NLog\tools\SilverlightConsoleRunner\ConsoleRunner.cs,Run,The following statement contains a magic number: using (var httpServer = new MicroHttpServer ()) {  	httpServer.AddHandler ("/Completed"' OnTestCompleted);  	httpServer.AddHandler ("/TestMethodCompleted"' OnTestMethodCompleted);  	switch (SilverlightVersion) {  	case "SL2":  		httpServer.AddResourceHandler ("/Silverlight.js"' "text/plain"' typeof(ConsoleRunner)' "Silverlight2.js");  		httpServer.AddResourceHandler ("/XapHost.html"' "text/html"' typeof(ConsoleRunner)' "XapHost2.html");  		break;  	case "SL3":  		httpServer.AddResourceHandler ("/Silverlight.js"' "text/plain"' typeof(ConsoleRunner)' "Silverlight3.js");  		httpServer.AddResourceHandler ("/XapHost.html"' "text/html"' typeof(ConsoleRunner)' "XapHost3.html");  		break;  	case "SL4":  		httpServer.AddResourceHandler ("/Silverlight.js"' "text/plain"' typeof(ConsoleRunner)' "Silverlight4.js");  		httpServer.AddResourceHandler ("/XapHost.html"' "text/html"' typeof(ConsoleRunner)' "XapHost4.html");  		break;  	case "WP7":  	case "WP71":  		break;  	default:  		throw new NotSupportedException ("Unsupported silverlight version: '" + SilverlightVersion + "'");  	}  	httpServer.AddFileHandler ("/xapfile.xap"' "application/x-silverlight-app"' this.XapFile);  	httpServer.Start ();  	if (this.SilverlightVersion.StartsWith ("SL")) {  		using (var form = new RunnerForm ()) {  			form.Url = "http://localhost:" + httpServer.ListenPort + "/XapHost.html";  			this.currentForm = form;  			this.ResetTimer ();  			form.ShowDialog ();  			this.currentForm = null;  		}  	} else if (this.SilverlightVersion.StartsWith ("WP")) {  		XapRunner.RunXap (this.XapFile' this.IconFile' this.AppGuid' this.DevicePlatformName' this.DeviceName);  		this.ResetTimer ();  	} else {  		throw new NotImplementedException ();  	}  	this.finished.WaitOne ();  	this.Log (string.Format (CultureInfo.InvariantCulture' "Passed: {0} Failed: {1} Pass Rate: {2}%"' this.PassedCount' this.FailedCount' Math.Round (100.0 * this.PassedCount / (this.PassedCount + this.FailedCount + this.OtherCount)' 2)));  }  
Magic Number,SilverlightConsoleRunner,ConsoleRunner,F:\newReposMay17\jkowalski_NLog\tools\SilverlightConsoleRunner\ConsoleRunner.cs,Run,The following statement contains a magic number: this.Log (string.Format (CultureInfo.InvariantCulture' "Passed: {0} Failed: {1} Pass Rate: {2}%"' this.PassedCount' this.FailedCount' Math.Round (100.0 * this.PassedCount / (this.PassedCount + this.FailedCount + this.OtherCount)' 2)));  
Magic Number,SilverlightConsoleRunner,ConsoleRunner,F:\newReposMay17\jkowalski_NLog\tools\SilverlightConsoleRunner\ConsoleRunner.cs,Run,The following statement contains a magic number: this.Log (string.Format (CultureInfo.InvariantCulture' "Passed: {0} Failed: {1} Pass Rate: {2}%"' this.PassedCount' this.FailedCount' Math.Round (100.0 * this.PassedCount / (this.PassedCount + this.FailedCount + this.OtherCount)' 2)));  
Magic Number,SilverlightConsoleRunner,ConsoleRunner,F:\newReposMay17\jkowalski_NLog\tools\SilverlightConsoleRunner\ConsoleRunner.cs,ResetTimer,The following statement contains a magic number: this.timer.Change (180000' Timeout.Infinite);  
Magic Number,SilverlightConsoleRunner,ConsoleRunner,F:\newReposMay17\jkowalski_NLog\tools\SilverlightConsoleRunner\ConsoleRunner.cs,OnTestMethodCompleted,The following statement contains a magic number: this.Log (result.PadRight (10));  
Magic Number,SilverlightConsoleRunner,MicroHttpServer,F:\newReposMay17\jkowalski_NLog\tools\SilverlightConsoleRunner\MicroHttpServer.cs,MicroHttpServer,The following statement contains a magic number: this.ListenPort = 17788;  
Magic Number,SilverlightConsoleRunner,MicroHttpServer,F:\newReposMay17\jkowalski_NLog\tools\SilverlightConsoleRunner\MicroHttpServer.cs,OnNewRequest,The following statement contains a magic number: foreach (var d in handlers) {  	var m = d.Key.Match (context.Request.Url.LocalPath);  	if (m.Success) {  		try {  			d.Value (context);  			context.Response.OutputStream.Close ();  		} catch (Exception ex) {  			context.Response.StatusCode = 500;  			context.Response.ContentType = "text/plain";  			using (var sw = new StreamWriter (context.Response.OutputStream)) {  				sw.WriteLine ("ERROR: {0}"' ex);  			}  		}  		return;  	}  }  
Magic Number,SilverlightConsoleRunner,MicroHttpServer,F:\newReposMay17\jkowalski_NLog\tools\SilverlightConsoleRunner\MicroHttpServer.cs,OnNewRequest,The following statement contains a magic number: if (m.Success) {  	try {  		d.Value (context);  		context.Response.OutputStream.Close ();  	} catch (Exception ex) {  		context.Response.StatusCode = 500;  		context.Response.ContentType = "text/plain";  		using (var sw = new StreamWriter (context.Response.OutputStream)) {  			sw.WriteLine ("ERROR: {0}"' ex);  		}  	}  	return;  }  
Magic Number,SilverlightConsoleRunner,MicroHttpServer,F:\newReposMay17\jkowalski_NLog\tools\SilverlightConsoleRunner\MicroHttpServer.cs,OnNewRequest,The following statement contains a magic number: try {  	d.Value (context);  	context.Response.OutputStream.Close ();  } catch (Exception ex) {  	context.Response.StatusCode = 500;  	context.Response.ContentType = "text/plain";  	using (var sw = new StreamWriter (context.Response.OutputStream)) {  		sw.WriteLine ("ERROR: {0}"' ex);  	}  }  
Magic Number,SilverlightConsoleRunner,MicroHttpServer,F:\newReposMay17\jkowalski_NLog\tools\SilverlightConsoleRunner\MicroHttpServer.cs,OnNewRequest,The following statement contains a magic number: context.Response.StatusCode = 500;  
Magic Number,SilverlightConsoleRunner,MicroHttpServer,F:\newReposMay17\jkowalski_NLog\tools\SilverlightConsoleRunner\MicroHttpServer.cs,OnNewRequest,The following statement contains a magic number: context.Response.StatusCode = 404;  
Magic Number,SilverlightConsoleRunner,Program,F:\newReposMay17\jkowalski_NLog\tools\SilverlightConsoleRunner\Program.cs,Main,The following statement contains a magic number: try {  	if (args.Length < 2) {  		Console.WriteLine ("Usage: SilverlightConsoleRunner testfile.xap [SL2|SL3|SL4|WP7|WP71] [-log logfile.log]");  		return 1;  	}  	string xapFile = args [0];  	var runner = new ConsoleRunner () {  		XapFile = xapFile'  		SilverlightVersion = args [1]'  	};  	string logfile = "UnitTests.log";  	for (int i = 2; i < args.Length; ++i) {  		switch (args [i]) {  		case "-log":  			logfile = args [++i];  			break;  		case "-guid":  			runner.AppGuid = new Guid (args [++i]);  			break;  		case "-icon":  			runner.IconFile = args [++i];  			break;  		}  	}  	Console.WriteLine ("Running tests in '{0}'"' Path.GetFullPath (runner.XapFile));  	Console.WriteLine ("Silverlight version: '{0}'"' runner.SilverlightVersion);  	Console.WriteLine ("Log file: '{0}'"' Path.GetFullPath (logfile));  	using (var log = new StreamWriter (logfile)) {  		runner.LogWriter = log;  		runner.Run ();  	}  	return runner.FailedCount + runner.OtherCount;  } catch (Exception ex) {  	Console.WriteLine ("ERROR: {0}"' ex);  	return 1;  }  
Magic Number,SilverlightConsoleRunner,Program,F:\newReposMay17\jkowalski_NLog\tools\SilverlightConsoleRunner\Program.cs,Main,The following statement contains a magic number: try {  	if (args.Length < 2) {  		Console.WriteLine ("Usage: SilverlightConsoleRunner testfile.xap [SL2|SL3|SL4|WP7|WP71] [-log logfile.log]");  		return 1;  	}  	string xapFile = args [0];  	var runner = new ConsoleRunner () {  		XapFile = xapFile'  		SilverlightVersion = args [1]'  	};  	string logfile = "UnitTests.log";  	for (int i = 2; i < args.Length; ++i) {  		switch (args [i]) {  		case "-log":  			logfile = args [++i];  			break;  		case "-guid":  			runner.AppGuid = new Guid (args [++i]);  			break;  		case "-icon":  			runner.IconFile = args [++i];  			break;  		}  	}  	Console.WriteLine ("Running tests in '{0}'"' Path.GetFullPath (runner.XapFile));  	Console.WriteLine ("Silverlight version: '{0}'"' runner.SilverlightVersion);  	Console.WriteLine ("Log file: '{0}'"' Path.GetFullPath (logfile));  	using (var log = new StreamWriter (logfile)) {  		runner.LogWriter = log;  		runner.Run ();  	}  	return runner.FailedCount + runner.OtherCount;  } catch (Exception ex) {  	Console.WriteLine ("ERROR: {0}"' ex);  	return 1;  }  
Magic Number,SilverlightConsoleRunner,Program,F:\newReposMay17\jkowalski_NLog\tools\SilverlightConsoleRunner\Program.cs,Main,The following statement contains a magic number: if (args.Length < 2) {  	Console.WriteLine ("Usage: SilverlightConsoleRunner testfile.xap [SL2|SL3|SL4|WP7|WP71] [-log logfile.log]");  	return 1;  }  
Magic Number,SilverlightConsoleRunner,Program,F:\newReposMay17\jkowalski_NLog\tools\SilverlightConsoleRunner\Program.cs,Main,The following statement contains a magic number: for (int i = 2; i < args.Length; ++i) {  	switch (args [i]) {  	case "-log":  		logfile = args [++i];  		break;  	case "-guid":  		runner.AppGuid = new Guid (args [++i]);  		break;  	case "-icon":  		runner.IconFile = args [++i];  		break;  	}  }  
Magic Number,SilverlightConsoleRunner,RunnerForm,F:\newReposMay17\jkowalski_NLog\tools\SilverlightConsoleRunner\RunnerForm.cs,InitializeComponent,The following statement contains a magic number: this.webBrowser1.MinimumSize = new System.Drawing.Size (20' 20);  
Magic Number,SilverlightConsoleRunner,RunnerForm,F:\newReposMay17\jkowalski_NLog\tools\SilverlightConsoleRunner\RunnerForm.cs,InitializeComponent,The following statement contains a magic number: this.webBrowser1.MinimumSize = new System.Drawing.Size (20' 20);  
Magic Number,SilverlightConsoleRunner,RunnerForm,F:\newReposMay17\jkowalski_NLog\tools\SilverlightConsoleRunner\RunnerForm.cs,InitializeComponent,The following statement contains a magic number: this.webBrowser1.Size = new System.Drawing.Size (799' 317);  
Magic Number,SilverlightConsoleRunner,RunnerForm,F:\newReposMay17\jkowalski_NLog\tools\SilverlightConsoleRunner\RunnerForm.cs,InitializeComponent,The following statement contains a magic number: this.webBrowser1.Size = new System.Drawing.Size (799' 317);  
Magic Number,SilverlightConsoleRunner,RunnerForm,F:\newReposMay17\jkowalski_NLog\tools\SilverlightConsoleRunner\RunnerForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (799' 317);  
Magic Number,SilverlightConsoleRunner,RunnerForm,F:\newReposMay17\jkowalski_NLog\tools\SilverlightConsoleRunner\RunnerForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (799' 317);  
Missing Default,SilverlightConsoleRunner,Program,F:\newReposMay17\jkowalski_NLog\tools\SilverlightConsoleRunner\Program.cs,Main,The following switch statement is missing a default case: switch (args [i]) {  case "-log":  	logfile = args [++i];  	break;  case "-guid":  	runner.AppGuid = new Guid (args [++i]);  	break;  case "-icon":  	runner.IconFile = args [++i];  	break;  }  
