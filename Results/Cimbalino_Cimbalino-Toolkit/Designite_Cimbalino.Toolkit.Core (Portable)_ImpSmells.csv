Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Cimbalino.Toolkit.Services,LauncherServiceAppInfo,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Services\LauncherServiceAppInfo.cs,LauncherServiceAppInfo,The method has 5 parameters. Parameters: id' appUserModelId' packageFamilyName' displayName' description
Long Parameter List,Cimbalino.Toolkit.Services,NavigationServiceNavigatingCancelEventArgs,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Services\NavigationServiceNavigatingCancelEventArgs.cs,NavigationServiceNavigatingCancelEventArgs,The method has 5 parameters. Parameters: navigationMode' sourcePageType' parameter' uri' isCancelable
Long Parameter List,Cimbalino.Toolkit.Services,IEmailComposeService,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Services\IEmailComposeService.cs,ShowAsync,The method has 5 parameters. Parameters: to' cc' bcc' subject' body
Long Parameter List,Cimbalino.Toolkit.Services,LocationServicePosition,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Services\LocationServicePosition.cs,LocationServicePosition,The method has 8 parameters. Parameters: timestamp' latitude' longitude' accuracy' altitude' altitudeAccuracy' heading' speed
Long Statement,Cimbalino.Toolkit.Extensions,UriExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Extensions\UriExtensions.cs,QueryString,The length of the statement  "                .Select(x => new KeyValuePair<string' string>(WebUtility.UrlDecode(x[0])' x.Length == 2 && !string.IsNullOrEmpty(x[1]) ? WebUtility.UrlDecode(x[1]) : null)); " is 157.
Long Statement,Cimbalino.Toolkit.Services,LocationServicePosition,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Services\LocationServicePosition.cs,GetDistanceTo,The length of the statement  "            var r0 = Math.Pow(Math.Sin(deltaLatitude / 2)' 2) + (Math.Pow(Math.Sin(deltaLongitude / 2)' 2) * Math.Cos(latitude0) * Math.Cos(latitude1)); " is 140.
Empty Catch Block,Cimbalino.Toolkit.Extensions,WebRequestExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Extensions\WebRequestExtensions.cs,SetNoCacheHeaders,The method has an empty catch block.
Empty Catch Block,Cimbalino.Toolkit.Helpers,ObservableTaskBase<T>,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Helpers\ObservableTaskBase.cs,AwaitTask,The method has an empty catch block.
Magic Number,Cimbalino.Toolkit.Compression,Adler32,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Compression\Adler32.generated.cs,Update,The following statement contains a magic number: uint s2 = (uint)((adler >> 16) & 0xffff);
Magic Number,Cimbalino.Toolkit.Compression,Adler32,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Compression\Adler32.generated.cs,Update,The following statement contains a magic number: while (len > 0)              {                  int k = len < NMAX ? len : NMAX;                  len -= k;                  while (k >= 16)                  {                      //s1 += (buf[index++] & 0xff); s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      k -= 16;                  }                  if (k != 0)                  {                      do                      {                          s1 += buf[index++];                          s2 += s1;                      }                      while (--k != 0);                  }                  s1 %= BASE;                  s2 %= BASE;              }
Magic Number,Cimbalino.Toolkit.Compression,Adler32,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Compression\Adler32.generated.cs,Update,The following statement contains a magic number: while (len > 0)              {                  int k = len < NMAX ? len : NMAX;                  len -= k;                  while (k >= 16)                  {                      //s1 += (buf[index++] & 0xff); s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      k -= 16;                  }                  if (k != 0)                  {                      do                      {                          s1 += buf[index++];                          s2 += s1;                      }                      while (--k != 0);                  }                  s1 %= BASE;                  s2 %= BASE;              }
Magic Number,Cimbalino.Toolkit.Compression,Adler32,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Compression\Adler32.generated.cs,Update,The following statement contains a magic number: return (uint)((s2 << 16) | s1);
Magic Number,Cimbalino.Toolkit.Compression,Crc32,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Compression\Crc32.generated.cs,Update,The following statement contains a magic number: while (--length >= 0)              {                  crc = CrcTable[(crc ^ buffer[offset++]) & 0xFF] ^ (crc >> 8);              }
Magic Number,Cimbalino.Toolkit.Extensions,IntExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Extensions\IntExtensions.cs,IsPrime,The following statement contains a magic number: if (input <= 3)              {                  return input > 1;              }
Magic Number,Cimbalino.Toolkit.Extensions,IntExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Extensions\IntExtensions.cs,IsPrime,The following statement contains a magic number: if (input % 2 == 0 || input % 3 == 0)              {                  return false;              }
Magic Number,Cimbalino.Toolkit.Extensions,IntExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Extensions\IntExtensions.cs,IsPrime,The following statement contains a magic number: if (input % 2 == 0 || input % 3 == 0)              {                  return false;              }
Magic Number,Cimbalino.Toolkit.Extensions,IntExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Extensions\IntExtensions.cs,IsPrime,The following statement contains a magic number: for (var divider = 5; divider * divider <= input; divider += 6)              {                  if (input % divider == 0 || input % (divider + 2) == 0)                  {                      return false;                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,IntExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Extensions\IntExtensions.cs,IsPrime,The following statement contains a magic number: for (var divider = 5; divider * divider <= input; divider += 6)              {                  if (input % divider == 0 || input % (divider + 2) == 0)                  {                      return false;                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,IntExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Extensions\IntExtensions.cs,IsPrime,The following statement contains a magic number: for (var divider = 5; divider * divider <= input; divider += 6)              {                  if (input % divider == 0 || input % (divider + 2) == 0)                  {                      return false;                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,IntExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Extensions\IntExtensions.cs,PrimeFactors,The following statement contains a magic number: while (input > 1)              {                  var factor = 1;                    if (input % 2 == 0)                  {                      factor = 2;                  }                  else if (input % 3 == 0)                  {                      factor = 3;                  }                  else                  {                      for (var divider = 5; divider <= input; divider += 6)                      {                          if (input % divider == 0)                          {                              factor = divider;                                break;                          }                            if (input % (divider + 2) == 0)                          {                              factor = divider + 2;                                break;                          }                      }                  }                    if (factor != 1)                  {                      yield return factor;                        input = input / factor;                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,IntExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Extensions\IntExtensions.cs,PrimeFactors,The following statement contains a magic number: while (input > 1)              {                  var factor = 1;                    if (input % 2 == 0)                  {                      factor = 2;                  }                  else if (input % 3 == 0)                  {                      factor = 3;                  }                  else                  {                      for (var divider = 5; divider <= input; divider += 6)                      {                          if (input % divider == 0)                          {                              factor = divider;                                break;                          }                            if (input % (divider + 2) == 0)                          {                              factor = divider + 2;                                break;                          }                      }                  }                    if (factor != 1)                  {                      yield return factor;                        input = input / factor;                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,IntExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Extensions\IntExtensions.cs,PrimeFactors,The following statement contains a magic number: while (input > 1)              {                  var factor = 1;                    if (input % 2 == 0)                  {                      factor = 2;                  }                  else if (input % 3 == 0)                  {                      factor = 3;                  }                  else                  {                      for (var divider = 5; divider <= input; divider += 6)                      {                          if (input % divider == 0)                          {                              factor = divider;                                break;                          }                            if (input % (divider + 2) == 0)                          {                              factor = divider + 2;                                break;                          }                      }                  }                    if (factor != 1)                  {                      yield return factor;                        input = input / factor;                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,IntExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Extensions\IntExtensions.cs,PrimeFactors,The following statement contains a magic number: while (input > 1)              {                  var factor = 1;                    if (input % 2 == 0)                  {                      factor = 2;                  }                  else if (input % 3 == 0)                  {                      factor = 3;                  }                  else                  {                      for (var divider = 5; divider <= input; divider += 6)                      {                          if (input % divider == 0)                          {                              factor = divider;                                break;                          }                            if (input % (divider + 2) == 0)                          {                              factor = divider + 2;                                break;                          }                      }                  }                    if (factor != 1)                  {                      yield return factor;                        input = input / factor;                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,IntExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Extensions\IntExtensions.cs,PrimeFactors,The following statement contains a magic number: while (input > 1)              {                  var factor = 1;                    if (input % 2 == 0)                  {                      factor = 2;                  }                  else if (input % 3 == 0)                  {                      factor = 3;                  }                  else                  {                      for (var divider = 5; divider <= input; divider += 6)                      {                          if (input % divider == 0)                          {                              factor = divider;                                break;                          }                            if (input % (divider + 2) == 0)                          {                              factor = divider + 2;                                break;                          }                      }                  }                    if (factor != 1)                  {                      yield return factor;                        input = input / factor;                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,IntExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Extensions\IntExtensions.cs,PrimeFactors,The following statement contains a magic number: while (input > 1)              {                  var factor = 1;                    if (input % 2 == 0)                  {                      factor = 2;                  }                  else if (input % 3 == 0)                  {                      factor = 3;                  }                  else                  {                      for (var divider = 5; divider <= input; divider += 6)                      {                          if (input % divider == 0)                          {                              factor = divider;                                break;                          }                            if (input % (divider + 2) == 0)                          {                              factor = divider + 2;                                break;                          }                      }                  }                    if (factor != 1)                  {                      yield return factor;                        input = input / factor;                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,IntExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Extensions\IntExtensions.cs,PrimeFactors,The following statement contains a magic number: while (input > 1)              {                  var factor = 1;                    if (input % 2 == 0)                  {                      factor = 2;                  }                  else if (input % 3 == 0)                  {                      factor = 3;                  }                  else                  {                      for (var divider = 5; divider <= input; divider += 6)                      {                          if (input % divider == 0)                          {                              factor = divider;                                break;                          }                            if (input % (divider + 2) == 0)                          {                              factor = divider + 2;                                break;                          }                      }                  }                    if (factor != 1)                  {                      yield return factor;                        input = input / factor;                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,IntExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Extensions\IntExtensions.cs,PrimeFactors,The following statement contains a magic number: while (input > 1)              {                  var factor = 1;                    if (input % 2 == 0)                  {                      factor = 2;                  }                  else if (input % 3 == 0)                  {                      factor = 3;                  }                  else                  {                      for (var divider = 5; divider <= input; divider += 6)                      {                          if (input % divider == 0)                          {                              factor = divider;                                break;                          }                            if (input % (divider + 2) == 0)                          {                              factor = divider + 2;                                break;                          }                      }                  }                    if (factor != 1)                  {                      yield return factor;                        input = input / factor;                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,UriExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Extensions\UriExtensions.cs,QueryString,The following statement contains a magic number: return query.Split('&')                  .Where(x => !string.IsNullOrEmpty(x))                  .Select(x => x.Split('='))                  .Select(x => new KeyValuePair<string' string>(WebUtility.UrlDecode(x[0])' x.Length == 2 && !string.IsNullOrEmpty(x[1]) ? WebUtility.UrlDecode(x[1]) : null));
Magic Number,Cimbalino.Toolkit.Extensions,XmlReaderExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Extensions\XmlReaderExtensions.cs,ReadElementContentAsUrn,The following statement contains a magic number: return id != null && id.StartsWith("urn:uuid:") ? id.Substring(9) : id;
Magic Number,Cimbalino.Toolkit.Services,LocationServicePosition,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Services\LocationServicePosition.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return (Latitude.GetHashCode() * 397) ^ Longitude.GetHashCode();              }
Magic Number,Cimbalino.Toolkit.Services,LocationServicePosition,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Services\LocationServicePosition.cs,GetDistanceTo,The following statement contains a magic number: var r0 = Math.Pow(Math.Sin(deltaLatitude / 2)' 2) + (Math.Pow(Math.Sin(deltaLongitude / 2)' 2) * Math.Cos(latitude0) * Math.Cos(latitude1));
Magic Number,Cimbalino.Toolkit.Services,LocationServicePosition,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Services\LocationServicePosition.cs,GetDistanceTo,The following statement contains a magic number: var r0 = Math.Pow(Math.Sin(deltaLatitude / 2)' 2) + (Math.Pow(Math.Sin(deltaLongitude / 2)' 2) * Math.Cos(latitude0) * Math.Cos(latitude1));
Magic Number,Cimbalino.Toolkit.Services,LocationServicePosition,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Services\LocationServicePosition.cs,GetDistanceTo,The following statement contains a magic number: var r0 = Math.Pow(Math.Sin(deltaLatitude / 2)' 2) + (Math.Pow(Math.Sin(deltaLongitude / 2)' 2) * Math.Cos(latitude0) * Math.Cos(latitude1));
Magic Number,Cimbalino.Toolkit.Services,LocationServicePosition,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Services\LocationServicePosition.cs,GetDistanceTo,The following statement contains a magic number: var r0 = Math.Pow(Math.Sin(deltaLatitude / 2)' 2) + (Math.Pow(Math.Sin(deltaLongitude / 2)' 2) * Math.Cos(latitude0) * Math.Cos(latitude1));
Magic Number,Cimbalino.Toolkit.Services,LocationServicePosition,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Services\LocationServicePosition.cs,GetDistanceTo,The following statement contains a magic number: var r1 = 2 * Math.Atan2(Math.Sqrt(r0)' Math.Sqrt(1 - r0));
Magic Number,Cimbalino.Toolkit.Services,LocationServicePosition,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Services\LocationServicePosition.cs,GetDistanceTo,The following statement contains a magic number: return 6376500 * r1;
