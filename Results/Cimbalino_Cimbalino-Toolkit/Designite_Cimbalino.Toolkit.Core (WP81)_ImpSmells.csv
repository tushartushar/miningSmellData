Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Cimbalino.Toolkit.Services,IEmailComposeService,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\services\IEmailComposeService.cs,ShowAsync,The method has 5 parameters. Parameters: to' cc' bcc' subject' body
Long Parameter List,Cimbalino.Toolkit.Services,LauncherServiceAppInfo,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\services\LauncherServiceAppInfo.cs,LauncherServiceAppInfo,The method has 5 parameters. Parameters: id' appUserModelId' packageFamilyName' displayName' description
Long Parameter List,Cimbalino.Toolkit.Services,LocationServicePosition,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\services\LocationServicePosition.cs,LocationServicePosition,The method has 8 parameters. Parameters: timestamp' latitude' longitude' accuracy' altitude' altitudeAccuracy' heading' speed
Long Parameter List,Cimbalino.Toolkit.Services,NavigationServiceNavigatingCancelEventArgs,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (Portable)\Services\NavigationServiceNavigatingCancelEventArgs.cs,NavigationServiceNavigatingCancelEventArgs,The method has 5 parameters. Parameters: navigationMode' sourcePageType' parameter' uri' isCancelable
Long Parameter List,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashFinalBlock,The method has 5 parameters. Parameters: input' ibStart' cbSize' ABCD' len
Long Parameter List,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,r1,The method has 7 parameters. Parameters: a' b' c' d' x' s' t
Long Parameter List,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,r2,The method has 7 parameters. Parameters: a' b' c' d' x' s' t
Long Parameter List,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,r3,The method has 7 parameters. Parameters: a' b' c' d' x' s' t
Long Parameter List,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,r4,The method has 7 parameters. Parameters: a' b' c' d' x' s' t
Long Identifier,Cimbalino.Toolkit.Services,ApplicationSettingsService,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\services\ApplicationSettingsService.cs,,The length of the parameter LocalSettingsServiceHandlerStatic is 33.
Long Identifier,Cimbalino.Toolkit.Services,ApplicationSettingsService,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\services\ApplicationSettingsService.cs,,The length of the parameter RoamingSettingsServiceHandlerStatic is 35.
Long Identifier,Cimbalino.Toolkit.Services,ApplicationSettingsService,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\services\ApplicationSettingsService.cs,,The length of the parameter LegacySettingsServiceHandlerStatic is 34.
Long Identifier,Cimbalino.Toolkit.Services,StorageService,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\services\StorageService.cs,,The length of the parameter LocalStorageServiceHandlerStatic is 32.
Long Identifier,Cimbalino.Toolkit.Services,StorageService,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\services\StorageService.cs,,The length of the parameter PackageStorageServiceHandlerStatic is 34.
Long Identifier,Cimbalino.Toolkit.Services,StorageService,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\services\StorageService.cs,,The length of the parameter RoamingStorageServiceHandlerStatic is 34.
Long Identifier,Cimbalino.Toolkit.Services,StorageService,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\services\StorageService.cs,,The length of the parameter TemporaryStorageServiceHandlerStatic is 36.
Long Identifier,Cimbalino.Toolkit.Services,StorageService,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\services\StorageService.cs,,The length of the parameter LocalCacheStorageServiceHandlerStatic is 37.
Long Statement,Cimbalino.Toolkit.Extensions,UriExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\extensions\UriExtensions.cs,QueryString,The length of the statement  "                .Select(x => new KeyValuePair<string' string>(WebUtility.UrlDecode(x[0])' x.Length == 2 && !string.IsNullOrEmpty(x[1]) ? WebUtility.UrlDecode(x[1]) : null)); " is 157.
Long Statement,Cimbalino.Toolkit.Extensions,WriteableBitmapExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\extensions\WriteableBitmapExtensions.cs,WriteDataChunks,The length of the statement  "            using (var chunkedStream = new ChunkedStream(MaximumChunkSize' data => WriteChunk(outputStream' PngChunkTypeData' data))) " is 121.
Long Statement,Cimbalino.Toolkit.Services,LocationServicePosition,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\services\LocationServicePosition.cs,GetDistanceTo,The length of the statement  "            var r0 = Math.Pow(Math.Sin(deltaLatitude / 2)' 2) + (Math.Pow(Math.Sin(deltaLongitude / 2)' 2) * Math.Cos(latitude0) * Math.Cos(latitude1)); " is 140.
Long Statement,Cimbalino.Toolkit.Services,LocationService,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\services\LocationService.cs,GetPositionAsync,The length of the statement  "            var completedTask = await Task.WhenAny(getGeopositionAsyncTask' Task.Delay((int)timeout.TotalMilliseconds + 500' cancellationToken)).ConfigureAwait(false); " is 155.
Long Statement,Cimbalino.Toolkit.Services,LockScreenService,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\services\LockScreenService.cs,SetLockScreenAsync,The length of the statement  "            using (var fileStream = await StorageService.LocalStorageServiceHandlerStatic.CreateFileAsync(LockScreenFile).ConfigureAwait(false)) " is 132.
Long Statement,Cimbalino.Toolkit.Services,LockScreenService,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\services\LockScreenService.cs,RequestAccessAsync,The length of the statement  "            return ExceptionHelper.ThrowNotSupported<Task<LockScreenServiceRequestResult>>("To use this method' add Cimbalino.Toolkit assembly to the project and use the LockScreenWithRequestService instead. This method can't be called from a Background Agent."); " is 251.
Long Statement,Cimbalino.Toolkit.Services,NavigationServiceExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\Services\NavigationServiceExtensions.cs,ToNavigationServiceNavigationEventArgs,The length of the statement  "            return new NavigationServiceNavigationEventArgs(navigationEventArgs.NavigationMode.ToNavigationServiceNavigationMode()' null' null' navigationEventArgs.Uri); " is 157.
Long Statement,Cimbalino.Toolkit.Services,NavigationServiceExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\Services\NavigationServiceExtensions.cs,ToNavigationServiceNavigationEventArgs,The length of the statement  "            return new NavigationServiceNavigationEventArgs(navigationEventArgs.NavigationMode.ToNavigationServiceNavigationMode()' navigationEventArgs.SourcePageType' navigationEventArgs.Parameter' navigationEventArgs.Uri); " is 212.
Long Statement,Cimbalino.Toolkit.Services,NavigationServiceExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\Services\NavigationServiceExtensions.cs,ToNavigationServiceNavigatingCancelEventArgs,The length of the statement  "            return new NavigationServiceNavigatingCancelEventArgs(navigatingCancelEventArgs.NavigationMode.ToNavigationServiceNavigationMode()' null' null' navigatingCancelEventArgs.Uri' navigatingCancelEventArgs.IsCancelable); " is 215.
Long Statement,Cimbalino.Toolkit.Services,NavigationServiceExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\Services\NavigationServiceExtensions.cs,ToNavigationServiceNavigatingCancelEventArgs,The length of the statement  "            return new NavigationServiceNavigatingCancelEventArgs(navigatingCancelEventArgs.NavigationMode.ToNavigationServiceNavigationMode()' navigatingCancelEventArgs.SourcePageType' navigatingCancelEventArgs.Parameter' null' true); " is 223.
Long Statement,Cimbalino.Toolkit.Services,StorageServiceHandler,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\services\StorageServiceHandler.cs,AppendAllText,The length of the statement  "            using (var fileStream = await StorageFolder.OpenStreamForWriteAsync(path' CreationCollisionOption.OpenIfExists).ConfigureAwait(false)) " is 134.
Long Statement,Cimbalino.Toolkit.Services,StorageServiceHandler,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\services\StorageServiceHandler.cs,AppendAllText,The length of the statement  "            using (var fileStream = await StorageFolder.OpenStreamForWriteAsync(path' CreationCollisionOption.OpenIfExists).ConfigureAwait(false)) " is 134.
Long Statement,Cimbalino.Toolkit.Services,StorageServiceHandler,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\services\StorageServiceHandler.cs,AppendAllLines,The length of the statement  "            using (var fileStream = await StorageFolder.OpenStreamForWriteAsync(path' CreationCollisionOption.OpenIfExists).ConfigureAwait(false)) " is 134.
Long Statement,Cimbalino.Toolkit.Services,StorageServiceHandler,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\services\StorageServiceHandler.cs,AppendAllLines,The length of the statement  "            using (var fileStream = await StorageFolder.OpenStreamForWriteAsync(path' CreationCollisionOption.OpenIfExists).ConfigureAwait(false)) " is 134.
Long Statement,Cimbalino.Toolkit.Services,WindowsPhoneStoreService,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\services\WindowsPhoneStoreService.cs,GetAppInformationAsync,The length of the statement  "            return Task.Factory.FromAsync<WindowsPhoneStoreServiceAppNode>(request.BeginGetResponse' WebRequestEndGetResponse' request); " is 124.
Long Statement,Cimbalino.Toolkit.Services,WindowsPhoneStoreService,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\services\WindowsPhoneStoreService.cs,CreateWebRequest,The length of the statement  "            var url = string.Format("http://marketplaceedgeservice.windowsphone.com/v9/catalog/apps/{0}?os=8.1.0.0&cc={1}&oc=&lang={2}​"' " is 125.
Long Statement,Cimbalino.Toolkit.Services,WindowsPhoneStoreService,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\services\WindowsPhoneStoreService.cs,WebRequestEndGetResponse,The length of the statement  "                    using (var reader = XmlReader.Create(outputStream' new XmlReaderSettings { IgnoreWhitespace = true' IgnoreComments = true })) " is 125.
Long Statement,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHash,The length of the statement  "                throw new System.ArgumentNullException("encoding"' "Unable to calculate hash over a string without a default encoding. Consider using the GetHash(string) overload to use UTF8 Encoding"); " is 186.
Long Statement,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashString,The length of the statement  "                throw new System.ArgumentNullException("encoding"' "Unable to calculate hash over a string without a default encoding. Consider using the GetHashString(string) overload to use UTF8 Encoding"); " is 192.
Long Statement,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashFinalBlock,The length of the statement  "            //Padding is a single bit 1' followed by the number of 0s required to make size congruent to 448 modulo 512. Step 1 of RFC 1321   " is 127.
Long Statement,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashFinalBlock,The length of the statement  "            //The CLR ensures that our buffer is 0-assigned' we don't need to explicitly set it. This is why it ends up being quicker to just " is 129.
Long Statement,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashFinalBlock,The length of the statement  "                //Create an entirely new chunk due to the 0-assigned trick mentioned above' to avoid an extra function call clearing the array " is 126.
Virtual Method Call from Constructor,Cimbalino.Toolkit.Services,NetworkInformationService,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\services\NetworkInformationService.cs,NetworkInformationService,The constructor "NetworkInformationService" calls a virtual method "RaiseNetworkStatusChanged".
Empty Catch Block,Cimbalino.Toolkit.Extensions,WebRequestExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\extensions\WebRequestExtensions.cs,SetNoCacheHeaders,The method has an empty catch block.
Empty Catch Block,Cimbalino.Toolkit.Helpers,ObservableTaskBase<T>,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\helpers\ObservableTaskBase.cs,AwaitTask,The method has an empty catch block.
Magic Number,Cimbalino.Toolkit.Compression,Adler32,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\compression\Adler32.generated.cs,Update,The following statement contains a magic number: uint s2 = (uint)((adler >> 16) & 0xffff);
Magic Number,Cimbalino.Toolkit.Compression,Adler32,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\compression\Adler32.generated.cs,Update,The following statement contains a magic number: while (len > 0)              {                  int k = len < NMAX ? len : NMAX;                  len -= k;                  while (k >= 16)                  {                      //s1 += (buf[index++] & 0xff); s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      k -= 16;                  }                  if (k != 0)                  {                      do                      {                          s1 += buf[index++];                          s2 += s1;                      }                      while (--k != 0);                  }                  s1 %= BASE;                  s2 %= BASE;              }
Magic Number,Cimbalino.Toolkit.Compression,Adler32,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\compression\Adler32.generated.cs,Update,The following statement contains a magic number: while (len > 0)              {                  int k = len < NMAX ? len : NMAX;                  len -= k;                  while (k >= 16)                  {                      //s1 += (buf[index++] & 0xff); s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      s1 += buf[index++]; s2 += s1;                      k -= 16;                  }                  if (k != 0)                  {                      do                      {                          s1 += buf[index++];                          s2 += s1;                      }                      while (--k != 0);                  }                  s1 %= BASE;                  s2 %= BASE;              }
Magic Number,Cimbalino.Toolkit.Compression,Adler32,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\compression\Adler32.generated.cs,Update,The following statement contains a magic number: return (uint)((s2 << 16) | s1);
Magic Number,Cimbalino.Toolkit.Compression,Crc32,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\compression\Crc32.generated.cs,Update,The following statement contains a magic number: while (--length >= 0)              {                  crc = CrcTable[(crc ^ buffer[offset++]) & 0xFF] ^ (crc >> 8);              }
Magic Number,Cimbalino.Toolkit.Compression,ZlibStream,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\compression\ZlibStream.cs,WriteHeader,The following statement contains a magic number: _stream.Write(new byte[] { 0x58' 0x85 }' 0' 2);
Magic Number,Cimbalino.Toolkit.Compression,ZlibStream,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\compression\ZlibStream.cs,WriteFooter,The following statement contains a magic number: _stream.Write(data' 0' 4);
Magic Number,Cimbalino.Toolkit.Extensions,IntExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\extensions\IntExtensions.cs,IsPrime,The following statement contains a magic number: if (input <= 3)              {                  return input > 1;              }
Magic Number,Cimbalino.Toolkit.Extensions,IntExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\extensions\IntExtensions.cs,IsPrime,The following statement contains a magic number: if (input % 2 == 0 || input % 3 == 0)              {                  return false;              }
Magic Number,Cimbalino.Toolkit.Extensions,IntExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\extensions\IntExtensions.cs,IsPrime,The following statement contains a magic number: if (input % 2 == 0 || input % 3 == 0)              {                  return false;              }
Magic Number,Cimbalino.Toolkit.Extensions,IntExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\extensions\IntExtensions.cs,IsPrime,The following statement contains a magic number: for (var divider = 5; divider * divider <= input; divider += 6)              {                  if (input % divider == 0 || input % (divider + 2) == 0)                  {                      return false;                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,IntExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\extensions\IntExtensions.cs,IsPrime,The following statement contains a magic number: for (var divider = 5; divider * divider <= input; divider += 6)              {                  if (input % divider == 0 || input % (divider + 2) == 0)                  {                      return false;                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,IntExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\extensions\IntExtensions.cs,IsPrime,The following statement contains a magic number: for (var divider = 5; divider * divider <= input; divider += 6)              {                  if (input % divider == 0 || input % (divider + 2) == 0)                  {                      return false;                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,IntExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\extensions\IntExtensions.cs,PrimeFactors,The following statement contains a magic number: while (input > 1)              {                  var factor = 1;                    if (input % 2 == 0)                  {                      factor = 2;                  }                  else if (input % 3 == 0)                  {                      factor = 3;                  }                  else                  {                      for (var divider = 5; divider <= input; divider += 6)                      {                          if (input % divider == 0)                          {                              factor = divider;                                break;                          }                            if (input % (divider + 2) == 0)                          {                              factor = divider + 2;                                break;                          }                      }                  }                    if (factor != 1)                  {                      yield return factor;                        input = input / factor;                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,IntExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\extensions\IntExtensions.cs,PrimeFactors,The following statement contains a magic number: while (input > 1)              {                  var factor = 1;                    if (input % 2 == 0)                  {                      factor = 2;                  }                  else if (input % 3 == 0)                  {                      factor = 3;                  }                  else                  {                      for (var divider = 5; divider <= input; divider += 6)                      {                          if (input % divider == 0)                          {                              factor = divider;                                break;                          }                            if (input % (divider + 2) == 0)                          {                              factor = divider + 2;                                break;                          }                      }                  }                    if (factor != 1)                  {                      yield return factor;                        input = input / factor;                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,IntExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\extensions\IntExtensions.cs,PrimeFactors,The following statement contains a magic number: while (input > 1)              {                  var factor = 1;                    if (input % 2 == 0)                  {                      factor = 2;                  }                  else if (input % 3 == 0)                  {                      factor = 3;                  }                  else                  {                      for (var divider = 5; divider <= input; divider += 6)                      {                          if (input % divider == 0)                          {                              factor = divider;                                break;                          }                            if (input % (divider + 2) == 0)                          {                              factor = divider + 2;                                break;                          }                      }                  }                    if (factor != 1)                  {                      yield return factor;                        input = input / factor;                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,IntExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\extensions\IntExtensions.cs,PrimeFactors,The following statement contains a magic number: while (input > 1)              {                  var factor = 1;                    if (input % 2 == 0)                  {                      factor = 2;                  }                  else if (input % 3 == 0)                  {                      factor = 3;                  }                  else                  {                      for (var divider = 5; divider <= input; divider += 6)                      {                          if (input % divider == 0)                          {                              factor = divider;                                break;                          }                            if (input % (divider + 2) == 0)                          {                              factor = divider + 2;                                break;                          }                      }                  }                    if (factor != 1)                  {                      yield return factor;                        input = input / factor;                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,IntExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\extensions\IntExtensions.cs,PrimeFactors,The following statement contains a magic number: while (input > 1)              {                  var factor = 1;                    if (input % 2 == 0)                  {                      factor = 2;                  }                  else if (input % 3 == 0)                  {                      factor = 3;                  }                  else                  {                      for (var divider = 5; divider <= input; divider += 6)                      {                          if (input % divider == 0)                          {                              factor = divider;                                break;                          }                            if (input % (divider + 2) == 0)                          {                              factor = divider + 2;                                break;                          }                      }                  }                    if (factor != 1)                  {                      yield return factor;                        input = input / factor;                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,IntExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\extensions\IntExtensions.cs,PrimeFactors,The following statement contains a magic number: while (input > 1)              {                  var factor = 1;                    if (input % 2 == 0)                  {                      factor = 2;                  }                  else if (input % 3 == 0)                  {                      factor = 3;                  }                  else                  {                      for (var divider = 5; divider <= input; divider += 6)                      {                          if (input % divider == 0)                          {                              factor = divider;                                break;                          }                            if (input % (divider + 2) == 0)                          {                              factor = divider + 2;                                break;                          }                      }                  }                    if (factor != 1)                  {                      yield return factor;                        input = input / factor;                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,IntExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\extensions\IntExtensions.cs,PrimeFactors,The following statement contains a magic number: while (input > 1)              {                  var factor = 1;                    if (input % 2 == 0)                  {                      factor = 2;                  }                  else if (input % 3 == 0)                  {                      factor = 3;                  }                  else                  {                      for (var divider = 5; divider <= input; divider += 6)                      {                          if (input % divider == 0)                          {                              factor = divider;                                break;                          }                            if (input % (divider + 2) == 0)                          {                              factor = divider + 2;                                break;                          }                      }                  }                    if (factor != 1)                  {                      yield return factor;                        input = input / factor;                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,IntExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\extensions\IntExtensions.cs,PrimeFactors,The following statement contains a magic number: while (input > 1)              {                  var factor = 1;                    if (input % 2 == 0)                  {                      factor = 2;                  }                  else if (input % 3 == 0)                  {                      factor = 3;                  }                  else                  {                      for (var divider = 5; divider <= input; divider += 6)                      {                          if (input % divider == 0)                          {                              factor = divider;                                break;                          }                            if (input % (divider + 2) == 0)                          {                              factor = divider + 2;                                break;                          }                      }                  }                    if (factor != 1)                  {                      yield return factor;                        input = input / factor;                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,UriExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\extensions\UriExtensions.cs,QueryString,The following statement contains a magic number: return query.Split('&')                  .Where(x => !string.IsNullOrEmpty(x))                  .Select(x => x.Split('='))                  .Select(x => new KeyValuePair<string' string>(WebUtility.UrlDecode(x[0])' x.Length == 2 && !string.IsNullOrEmpty(x[1]) ? WebUtility.UrlDecode(x[1]) : null));
Magic Number,Cimbalino.Toolkit.Extensions,XmlReaderExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\extensions\XmlReaderExtensions.cs,ReadElementContentAsUrn,The following statement contains a magic number: return id != null && id.StartsWith("urn:uuid:") ? id.Substring(9) : id;
Magic Number,Cimbalino.Toolkit.Extensions,WriteableBitmapExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\extensions\WriteableBitmapExtensions.cs,WriteHeader,The following statement contains a magic number: outputStream.Write(new byte[] { 0x89' 0x50' 0x4E' 0x47' 0x0D' 0x0A' 0x1A' 0x0A }' 0' 8);
Magic Number,Cimbalino.Toolkit.Extensions,WriteableBitmapExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\extensions\WriteableBitmapExtensions.cs,WriteDataChunks,The following statement contains a magic number: using (var chunkedStream = new ChunkedStream(MaximumChunkSize' data => WriteChunk(outputStream' PngChunkTypeData' data)))              {                  using (var zlibStream = new ZlibStream(chunkedStream' CompressionLevel.Optimal' true))                  {                      var pixels = writeableBitmap.Pixels;                      var width = writeableBitmap.PixelWidth;                      var height = writeableBitmap.PixelHeight;                      var index = 0;                        var dataRowLength = width * 4;                      var dataRow = new byte[dataRowLength];                        for (var y = 0; y < height; y++)                      {                          zlibStream.WriteByte(0);                            for (var x = 0; x < width; x++)                          {                              var color = pixels[index++];                                var alpha = (byte)(color >> 24);                                int alphaInt = alpha;                                if (alphaInt == 0)                              {                                  alphaInt = 1;                              }                                alphaInt = (255 << 8) / alphaInt;                                var dataRowOffset = x * 4;                                dataRow[dataRowOffset] = (byte)((((color >> 16) & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 1] = (byte)((((color >> 8) & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 2] = (byte)(((color & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 3] = alpha;                          }                            zlibStream.Write(dataRow' 0' dataRowLength);                      }                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,WriteableBitmapExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\extensions\WriteableBitmapExtensions.cs,WriteDataChunks,The following statement contains a magic number: using (var chunkedStream = new ChunkedStream(MaximumChunkSize' data => WriteChunk(outputStream' PngChunkTypeData' data)))              {                  using (var zlibStream = new ZlibStream(chunkedStream' CompressionLevel.Optimal' true))                  {                      var pixels = writeableBitmap.Pixels;                      var width = writeableBitmap.PixelWidth;                      var height = writeableBitmap.PixelHeight;                      var index = 0;                        var dataRowLength = width * 4;                      var dataRow = new byte[dataRowLength];                        for (var y = 0; y < height; y++)                      {                          zlibStream.WriteByte(0);                            for (var x = 0; x < width; x++)                          {                              var color = pixels[index++];                                var alpha = (byte)(color >> 24);                                int alphaInt = alpha;                                if (alphaInt == 0)                              {                                  alphaInt = 1;                              }                                alphaInt = (255 << 8) / alphaInt;                                var dataRowOffset = x * 4;                                dataRow[dataRowOffset] = (byte)((((color >> 16) & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 1] = (byte)((((color >> 8) & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 2] = (byte)(((color & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 3] = alpha;                          }                            zlibStream.Write(dataRow' 0' dataRowLength);                      }                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,WriteableBitmapExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\extensions\WriteableBitmapExtensions.cs,WriteDataChunks,The following statement contains a magic number: using (var chunkedStream = new ChunkedStream(MaximumChunkSize' data => WriteChunk(outputStream' PngChunkTypeData' data)))              {                  using (var zlibStream = new ZlibStream(chunkedStream' CompressionLevel.Optimal' true))                  {                      var pixels = writeableBitmap.Pixels;                      var width = writeableBitmap.PixelWidth;                      var height = writeableBitmap.PixelHeight;                      var index = 0;                        var dataRowLength = width * 4;                      var dataRow = new byte[dataRowLength];                        for (var y = 0; y < height; y++)                      {                          zlibStream.WriteByte(0);                            for (var x = 0; x < width; x++)                          {                              var color = pixels[index++];                                var alpha = (byte)(color >> 24);                                int alphaInt = alpha;                                if (alphaInt == 0)                              {                                  alphaInt = 1;                              }                                alphaInt = (255 << 8) / alphaInt;                                var dataRowOffset = x * 4;                                dataRow[dataRowOffset] = (byte)((((color >> 16) & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 1] = (byte)((((color >> 8) & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 2] = (byte)(((color & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 3] = alpha;                          }                            zlibStream.Write(dataRow' 0' dataRowLength);                      }                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,WriteableBitmapExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\extensions\WriteableBitmapExtensions.cs,WriteDataChunks,The following statement contains a magic number: using (var chunkedStream = new ChunkedStream(MaximumChunkSize' data => WriteChunk(outputStream' PngChunkTypeData' data)))              {                  using (var zlibStream = new ZlibStream(chunkedStream' CompressionLevel.Optimal' true))                  {                      var pixels = writeableBitmap.Pixels;                      var width = writeableBitmap.PixelWidth;                      var height = writeableBitmap.PixelHeight;                      var index = 0;                        var dataRowLength = width * 4;                      var dataRow = new byte[dataRowLength];                        for (var y = 0; y < height; y++)                      {                          zlibStream.WriteByte(0);                            for (var x = 0; x < width; x++)                          {                              var color = pixels[index++];                                var alpha = (byte)(color >> 24);                                int alphaInt = alpha;                                if (alphaInt == 0)                              {                                  alphaInt = 1;                              }                                alphaInt = (255 << 8) / alphaInt;                                var dataRowOffset = x * 4;                                dataRow[dataRowOffset] = (byte)((((color >> 16) & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 1] = (byte)((((color >> 8) & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 2] = (byte)(((color & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 3] = alpha;                          }                            zlibStream.Write(dataRow' 0' dataRowLength);                      }                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,WriteableBitmapExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\extensions\WriteableBitmapExtensions.cs,WriteDataChunks,The following statement contains a magic number: using (var chunkedStream = new ChunkedStream(MaximumChunkSize' data => WriteChunk(outputStream' PngChunkTypeData' data)))              {                  using (var zlibStream = new ZlibStream(chunkedStream' CompressionLevel.Optimal' true))                  {                      var pixels = writeableBitmap.Pixels;                      var width = writeableBitmap.PixelWidth;                      var height = writeableBitmap.PixelHeight;                      var index = 0;                        var dataRowLength = width * 4;                      var dataRow = new byte[dataRowLength];                        for (var y = 0; y < height; y++)                      {                          zlibStream.WriteByte(0);                            for (var x = 0; x < width; x++)                          {                              var color = pixels[index++];                                var alpha = (byte)(color >> 24);                                int alphaInt = alpha;                                if (alphaInt == 0)                              {                                  alphaInt = 1;                              }                                alphaInt = (255 << 8) / alphaInt;                                var dataRowOffset = x * 4;                                dataRow[dataRowOffset] = (byte)((((color >> 16) & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 1] = (byte)((((color >> 8) & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 2] = (byte)(((color & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 3] = alpha;                          }                            zlibStream.Write(dataRow' 0' dataRowLength);                      }                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,WriteableBitmapExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\extensions\WriteableBitmapExtensions.cs,WriteDataChunks,The following statement contains a magic number: using (var chunkedStream = new ChunkedStream(MaximumChunkSize' data => WriteChunk(outputStream' PngChunkTypeData' data)))              {                  using (var zlibStream = new ZlibStream(chunkedStream' CompressionLevel.Optimal' true))                  {                      var pixels = writeableBitmap.Pixels;                      var width = writeableBitmap.PixelWidth;                      var height = writeableBitmap.PixelHeight;                      var index = 0;                        var dataRowLength = width * 4;                      var dataRow = new byte[dataRowLength];                        for (var y = 0; y < height; y++)                      {                          zlibStream.WriteByte(0);                            for (var x = 0; x < width; x++)                          {                              var color = pixels[index++];                                var alpha = (byte)(color >> 24);                                int alphaInt = alpha;                                if (alphaInt == 0)                              {                                  alphaInt = 1;                              }                                alphaInt = (255 << 8) / alphaInt;                                var dataRowOffset = x * 4;                                dataRow[dataRowOffset] = (byte)((((color >> 16) & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 1] = (byte)((((color >> 8) & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 2] = (byte)(((color & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 3] = alpha;                          }                            zlibStream.Write(dataRow' 0' dataRowLength);                      }                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,WriteableBitmapExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\extensions\WriteableBitmapExtensions.cs,WriteDataChunks,The following statement contains a magic number: using (var chunkedStream = new ChunkedStream(MaximumChunkSize' data => WriteChunk(outputStream' PngChunkTypeData' data)))              {                  using (var zlibStream = new ZlibStream(chunkedStream' CompressionLevel.Optimal' true))                  {                      var pixels = writeableBitmap.Pixels;                      var width = writeableBitmap.PixelWidth;                      var height = writeableBitmap.PixelHeight;                      var index = 0;                        var dataRowLength = width * 4;                      var dataRow = new byte[dataRowLength];                        for (var y = 0; y < height; y++)                      {                          zlibStream.WriteByte(0);                            for (var x = 0; x < width; x++)                          {                              var color = pixels[index++];                                var alpha = (byte)(color >> 24);                                int alphaInt = alpha;                                if (alphaInt == 0)                              {                                  alphaInt = 1;                              }                                alphaInt = (255 << 8) / alphaInt;                                var dataRowOffset = x * 4;                                dataRow[dataRowOffset] = (byte)((((color >> 16) & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 1] = (byte)((((color >> 8) & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 2] = (byte)(((color & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 3] = alpha;                          }                            zlibStream.Write(dataRow' 0' dataRowLength);                      }                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,WriteableBitmapExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\extensions\WriteableBitmapExtensions.cs,WriteDataChunks,The following statement contains a magic number: using (var chunkedStream = new ChunkedStream(MaximumChunkSize' data => WriteChunk(outputStream' PngChunkTypeData' data)))              {                  using (var zlibStream = new ZlibStream(chunkedStream' CompressionLevel.Optimal' true))                  {                      var pixels = writeableBitmap.Pixels;                      var width = writeableBitmap.PixelWidth;                      var height = writeableBitmap.PixelHeight;                      var index = 0;                        var dataRowLength = width * 4;                      var dataRow = new byte[dataRowLength];                        for (var y = 0; y < height; y++)                      {                          zlibStream.WriteByte(0);                            for (var x = 0; x < width; x++)                          {                              var color = pixels[index++];                                var alpha = (byte)(color >> 24);                                int alphaInt = alpha;                                if (alphaInt == 0)                              {                                  alphaInt = 1;                              }                                alphaInt = (255 << 8) / alphaInt;                                var dataRowOffset = x * 4;                                dataRow[dataRowOffset] = (byte)((((color >> 16) & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 1] = (byte)((((color >> 8) & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 2] = (byte)(((color & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 3] = alpha;                          }                            zlibStream.Write(dataRow' 0' dataRowLength);                      }                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,WriteableBitmapExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\extensions\WriteableBitmapExtensions.cs,WriteDataChunks,The following statement contains a magic number: using (var chunkedStream = new ChunkedStream(MaximumChunkSize' data => WriteChunk(outputStream' PngChunkTypeData' data)))              {                  using (var zlibStream = new ZlibStream(chunkedStream' CompressionLevel.Optimal' true))                  {                      var pixels = writeableBitmap.Pixels;                      var width = writeableBitmap.PixelWidth;                      var height = writeableBitmap.PixelHeight;                      var index = 0;                        var dataRowLength = width * 4;                      var dataRow = new byte[dataRowLength];                        for (var y = 0; y < height; y++)                      {                          zlibStream.WriteByte(0);                            for (var x = 0; x < width; x++)                          {                              var color = pixels[index++];                                var alpha = (byte)(color >> 24);                                int alphaInt = alpha;                                if (alphaInt == 0)                              {                                  alphaInt = 1;                              }                                alphaInt = (255 << 8) / alphaInt;                                var dataRowOffset = x * 4;                                dataRow[dataRowOffset] = (byte)((((color >> 16) & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 1] = (byte)((((color >> 8) & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 2] = (byte)(((color & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 3] = alpha;                          }                            zlibStream.Write(dataRow' 0' dataRowLength);                      }                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,WriteableBitmapExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\extensions\WriteableBitmapExtensions.cs,WriteDataChunks,The following statement contains a magic number: using (var chunkedStream = new ChunkedStream(MaximumChunkSize' data => WriteChunk(outputStream' PngChunkTypeData' data)))              {                  using (var zlibStream = new ZlibStream(chunkedStream' CompressionLevel.Optimal' true))                  {                      var pixels = writeableBitmap.Pixels;                      var width = writeableBitmap.PixelWidth;                      var height = writeableBitmap.PixelHeight;                      var index = 0;                        var dataRowLength = width * 4;                      var dataRow = new byte[dataRowLength];                        for (var y = 0; y < height; y++)                      {                          zlibStream.WriteByte(0);                            for (var x = 0; x < width; x++)                          {                              var color = pixels[index++];                                var alpha = (byte)(color >> 24);                                int alphaInt = alpha;                                if (alphaInt == 0)                              {                                  alphaInt = 1;                              }                                alphaInt = (255 << 8) / alphaInt;                                var dataRowOffset = x * 4;                                dataRow[dataRowOffset] = (byte)((((color >> 16) & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 1] = (byte)((((color >> 8) & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 2] = (byte)(((color & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 3] = alpha;                          }                            zlibStream.Write(dataRow' 0' dataRowLength);                      }                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,WriteableBitmapExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\extensions\WriteableBitmapExtensions.cs,WriteDataChunks,The following statement contains a magic number: using (var chunkedStream = new ChunkedStream(MaximumChunkSize' data => WriteChunk(outputStream' PngChunkTypeData' data)))              {                  using (var zlibStream = new ZlibStream(chunkedStream' CompressionLevel.Optimal' true))                  {                      var pixels = writeableBitmap.Pixels;                      var width = writeableBitmap.PixelWidth;                      var height = writeableBitmap.PixelHeight;                      var index = 0;                        var dataRowLength = width * 4;                      var dataRow = new byte[dataRowLength];                        for (var y = 0; y < height; y++)                      {                          zlibStream.WriteByte(0);                            for (var x = 0; x < width; x++)                          {                              var color = pixels[index++];                                var alpha = (byte)(color >> 24);                                int alphaInt = alpha;                                if (alphaInt == 0)                              {                                  alphaInt = 1;                              }                                alphaInt = (255 << 8) / alphaInt;                                var dataRowOffset = x * 4;                                dataRow[dataRowOffset] = (byte)((((color >> 16) & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 1] = (byte)((((color >> 8) & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 2] = (byte)(((color & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 3] = alpha;                          }                            zlibStream.Write(dataRow' 0' dataRowLength);                      }                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,WriteableBitmapExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\extensions\WriteableBitmapExtensions.cs,WriteDataChunks,The following statement contains a magic number: using (var chunkedStream = new ChunkedStream(MaximumChunkSize' data => WriteChunk(outputStream' PngChunkTypeData' data)))              {                  using (var zlibStream = new ZlibStream(chunkedStream' CompressionLevel.Optimal' true))                  {                      var pixels = writeableBitmap.Pixels;                      var width = writeableBitmap.PixelWidth;                      var height = writeableBitmap.PixelHeight;                      var index = 0;                        var dataRowLength = width * 4;                      var dataRow = new byte[dataRowLength];                        for (var y = 0; y < height; y++)                      {                          zlibStream.WriteByte(0);                            for (var x = 0; x < width; x++)                          {                              var color = pixels[index++];                                var alpha = (byte)(color >> 24);                                int alphaInt = alpha;                                if (alphaInt == 0)                              {                                  alphaInt = 1;                              }                                alphaInt = (255 << 8) / alphaInt;                                var dataRowOffset = x * 4;                                dataRow[dataRowOffset] = (byte)((((color >> 16) & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 1] = (byte)((((color >> 8) & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 2] = (byte)(((color & 0xFF) * alphaInt) >> 8);                              dataRow[dataRowOffset + 3] = alpha;                          }                            zlibStream.Write(dataRow' 0' dataRowLength);                      }                  }              }
Magic Number,Cimbalino.Toolkit.Extensions,WriteableBitmapExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\extensions\WriteableBitmapExtensions.cs,WriteChunk,The following statement contains a magic number: outputStream.Write(CreateChunkFromInt(length)' 0' 4);
Magic Number,Cimbalino.Toolkit.Extensions,WriteableBitmapExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\extensions\WriteableBitmapExtensions.cs,WriteChunk,The following statement contains a magic number: outputStream.Write(typeData' 0' 4);
Magic Number,Cimbalino.Toolkit.Extensions,WriteableBitmapExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\extensions\WriteableBitmapExtensions.cs,WriteChunk,The following statement contains a magic number: var crc = Crc32.Update(0' typeData' 0' 4);
Magic Number,Cimbalino.Toolkit.Extensions,WriteableBitmapExtensions,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\extensions\WriteableBitmapExtensions.cs,WriteChunk,The following statement contains a magic number: outputStream.Write(CreateChunkFromUint(crc)' 0' 4);
Magic Number,Cimbalino.Toolkit.Services,LocationServicePosition,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\services\LocationServicePosition.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return (Latitude.GetHashCode() * 397) ^ Longitude.GetHashCode();              }
Magic Number,Cimbalino.Toolkit.Services,LocationServicePosition,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\services\LocationServicePosition.cs,GetDistanceTo,The following statement contains a magic number: var r0 = Math.Pow(Math.Sin(deltaLatitude / 2)' 2) + (Math.Pow(Math.Sin(deltaLongitude / 2)' 2) * Math.Cos(latitude0) * Math.Cos(latitude1));
Magic Number,Cimbalino.Toolkit.Services,LocationServicePosition,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\services\LocationServicePosition.cs,GetDistanceTo,The following statement contains a magic number: var r0 = Math.Pow(Math.Sin(deltaLatitude / 2)' 2) + (Math.Pow(Math.Sin(deltaLongitude / 2)' 2) * Math.Cos(latitude0) * Math.Cos(latitude1));
Magic Number,Cimbalino.Toolkit.Services,LocationServicePosition,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\services\LocationServicePosition.cs,GetDistanceTo,The following statement contains a magic number: var r0 = Math.Pow(Math.Sin(deltaLatitude / 2)' 2) + (Math.Pow(Math.Sin(deltaLongitude / 2)' 2) * Math.Cos(latitude0) * Math.Cos(latitude1));
Magic Number,Cimbalino.Toolkit.Services,LocationServicePosition,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\services\LocationServicePosition.cs,GetDistanceTo,The following statement contains a magic number: var r0 = Math.Pow(Math.Sin(deltaLatitude / 2)' 2) + (Math.Pow(Math.Sin(deltaLongitude / 2)' 2) * Math.Cos(latitude0) * Math.Cos(latitude1));
Magic Number,Cimbalino.Toolkit.Services,LocationServicePosition,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\services\LocationServicePosition.cs,GetDistanceTo,The following statement contains a magic number: var r1 = 2 * Math.Atan2(Math.Sqrt(r0)' Math.Sqrt(1 - r0));
Magic Number,Cimbalino.Toolkit.Services,LocationServicePosition,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (portable)\services\LocationServicePosition.cs,GetDistanceTo,The following statement contains a magic number: return 6376500 * r1;
Magic Number,Cimbalino.Toolkit.Services,LocationService,C:\repos\Cimbalino_Cimbalino-Toolkit\src\cimbalino.toolkit.core (wp8)\services\LocationService.cs,GetPositionAsync,The following statement contains a magic number: var completedTask = await Task.WhenAny(getGeopositionAsyncTask' Task.Delay((int)timeout.TotalMilliseconds + 500' cancellationToken)).ConfigureAwait(false);
Magic Number,System.Security.Cryptography,HMACMD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\HMACMD5.Generated.cs,UpdateIOPadBuffers,The following statement contains a magic number: for (int i = 0; i < BLOCK_SIZE; i++)              {                  this.m_inner[i] = 54;                  this.m_outer[i] = 92;              }
Magic Number,System.Security.Cryptography,HMACMD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\HMACMD5.Generated.cs,UpdateIOPadBuffers,The following statement contains a magic number: for (int i = 0; i < BLOCK_SIZE; i++)              {                  this.m_inner[i] = 54;                  this.m_outer[i] = 92;              }
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHash,The following statement contains a magic number: while (startIndex <= input.Length - 64)              {                  MD5.GetHashBlock(input' ref abcd' startIndex);                  startIndex += 64;              }
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHash,The following statement contains a magic number: while (startIndex <= input.Length - 64)              {                  MD5.GetHashBlock(input' ref abcd' startIndex);                  startIndex += 64;              }
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHash,The following statement contains a magic number: return MD5.GetHashFinalBlock(input' startIndex' input.Length - startIndex' abcd' (Int64)input.Length * 8);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashFinalBlock,The following statement contains a magic number: byte[] working = new byte[64];
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashFinalBlock,The following statement contains a magic number: if (cbSize < 56)              {                  Array.Copy(length' 0' working' 56' 8);                  GetHashBlock(working' ref ABCD' 0);              }              else  //We need an aditional chunk to store the length              {                  GetHashBlock(working' ref ABCD' 0);                  //Create an entirely new chunk due to the 0-assigned trick mentioned above' to avoid an extra function call clearing the array                  working = new byte[64];                  Array.Copy(length' 0' working' 56' 8);                  GetHashBlock(working' ref ABCD' 0);              }
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashFinalBlock,The following statement contains a magic number: if (cbSize < 56)              {                  Array.Copy(length' 0' working' 56' 8);                  GetHashBlock(working' ref ABCD' 0);              }              else  //We need an aditional chunk to store the length              {                  GetHashBlock(working' ref ABCD' 0);                  //Create an entirely new chunk due to the 0-assigned trick mentioned above' to avoid an extra function call clearing the array                  working = new byte[64];                  Array.Copy(length' 0' working' 56' 8);                  GetHashBlock(working' ref ABCD' 0);              }
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashFinalBlock,The following statement contains a magic number: if (cbSize < 56)              {                  Array.Copy(length' 0' working' 56' 8);                  GetHashBlock(working' ref ABCD' 0);              }              else  //We need an aditional chunk to store the length              {                  GetHashBlock(working' ref ABCD' 0);                  //Create an entirely new chunk due to the 0-assigned trick mentioned above' to avoid an extra function call clearing the array                  working = new byte[64];                  Array.Copy(length' 0' working' 56' 8);                  GetHashBlock(working' ref ABCD' 0);              }
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashFinalBlock,The following statement contains a magic number: if (cbSize < 56)              {                  Array.Copy(length' 0' working' 56' 8);                  GetHashBlock(working' ref ABCD' 0);              }              else  //We need an aditional chunk to store the length              {                  GetHashBlock(working' ref ABCD' 0);                  //Create an entirely new chunk due to the 0-assigned trick mentioned above' to avoid an extra function call clearing the array                  working = new byte[64];                  Array.Copy(length' 0' working' 56' 8);                  GetHashBlock(working' ref ABCD' 0);              }
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashFinalBlock,The following statement contains a magic number: if (cbSize < 56)              {                  Array.Copy(length' 0' working' 56' 8);                  GetHashBlock(working' ref ABCD' 0);              }              else  //We need an aditional chunk to store the length              {                  GetHashBlock(working' ref ABCD' 0);                  //Create an entirely new chunk due to the 0-assigned trick mentioned above' to avoid an extra function call clearing the array                  working = new byte[64];                  Array.Copy(length' 0' working' 56' 8);                  GetHashBlock(working' ref ABCD' 0);              }
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashFinalBlock,The following statement contains a magic number: if (cbSize < 56)              {                  Array.Copy(length' 0' working' 56' 8);                  GetHashBlock(working' ref ABCD' 0);              }              else  //We need an aditional chunk to store the length              {                  GetHashBlock(working' ref ABCD' 0);                  //Create an entirely new chunk due to the 0-assigned trick mentioned above' to avoid an extra function call clearing the array                  working = new byte[64];                  Array.Copy(length' 0' working' 56' 8);                  GetHashBlock(working' ref ABCD' 0);              }
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashFinalBlock,The following statement contains a magic number: byte[] output = new byte[16];
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashFinalBlock,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(ABCD.A)' 0' output' 0' 4);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashFinalBlock,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(ABCD.B)' 0' output' 4' 4);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashFinalBlock,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(ABCD.B)' 0' output' 4' 4);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashFinalBlock,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(ABCD.C)' 0' output' 8' 4);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashFinalBlock,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(ABCD.C)' 0' output' 8' 4);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashFinalBlock,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(ABCD.D)' 0' output' 12' 4);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashFinalBlock,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(ABCD.D)' 0' output' 12' 4);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: a = r1(a' b' c' d' temp[0]' 7' 0xd76aa478);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: d = r1(d' a' b' c' temp[1]' 12' 0xe8c7b756);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: c = r1(c' d' a' b' temp[2]' 17' 0x242070db);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: c = r1(c' d' a' b' temp[2]' 17' 0x242070db);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: b = r1(b' c' d' a' temp[3]' 22' 0xc1bdceee);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: b = r1(b' c' d' a' temp[3]' 22' 0xc1bdceee);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: a = r1(a' b' c' d' temp[4]' 7' 0xf57c0faf);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: a = r1(a' b' c' d' temp[4]' 7' 0xf57c0faf);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: d = r1(d' a' b' c' temp[5]' 12' 0x4787c62a);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: d = r1(d' a' b' c' temp[5]' 12' 0x4787c62a);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: c = r1(c' d' a' b' temp[6]' 17' 0xa8304613);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: c = r1(c' d' a' b' temp[6]' 17' 0xa8304613);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: b = r1(b' c' d' a' temp[7]' 22' 0xfd469501);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: b = r1(b' c' d' a' temp[7]' 22' 0xfd469501);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: a = r1(a' b' c' d' temp[8]' 7' 0x698098d8);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: a = r1(a' b' c' d' temp[8]' 7' 0x698098d8);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: d = r1(d' a' b' c' temp[9]' 12' 0x8b44f7af);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: d = r1(d' a' b' c' temp[9]' 12' 0x8b44f7af);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: c = r1(c' d' a' b' temp[10]' 17' 0xffff5bb1);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: c = r1(c' d' a' b' temp[10]' 17' 0xffff5bb1);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: b = r1(b' c' d' a' temp[11]' 22' 0x895cd7be);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: b = r1(b' c' d' a' temp[11]' 22' 0x895cd7be);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: a = r1(a' b' c' d' temp[12]' 7' 0x6b901122);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: a = r1(a' b' c' d' temp[12]' 7' 0x6b901122);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: d = r1(d' a' b' c' temp[13]' 12' 0xfd987193);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: d = r1(d' a' b' c' temp[13]' 12' 0xfd987193);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: c = r1(c' d' a' b' temp[14]' 17' 0xa679438e);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: c = r1(c' d' a' b' temp[14]' 17' 0xa679438e);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: b = r1(b' c' d' a' temp[15]' 22' 0x49b40821);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: b = r1(b' c' d' a' temp[15]' 22' 0x49b40821);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: a = r2(a' b' c' d' temp[1]' 5' 0xf61e2562);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: d = r2(d' a' b' c' temp[6]' 9' 0xc040b340);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: d = r2(d' a' b' c' temp[6]' 9' 0xc040b340);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: c = r2(c' d' a' b' temp[11]' 14' 0x265e5a51);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: c = r2(c' d' a' b' temp[11]' 14' 0x265e5a51);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: b = r2(b' c' d' a' temp[0]' 20' 0xe9b6c7aa);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: a = r2(a' b' c' d' temp[5]' 5' 0xd62f105d);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: a = r2(a' b' c' d' temp[5]' 5' 0xd62f105d);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: d = r2(d' a' b' c' temp[10]' 9' 0x02441453);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: d = r2(d' a' b' c' temp[10]' 9' 0x02441453);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: c = r2(c' d' a' b' temp[15]' 14' 0xd8a1e681);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: c = r2(c' d' a' b' temp[15]' 14' 0xd8a1e681);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: b = r2(b' c' d' a' temp[4]' 20' 0xe7d3fbc8);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: b = r2(b' c' d' a' temp[4]' 20' 0xe7d3fbc8);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: a = r2(a' b' c' d' temp[9]' 5' 0x21e1cde6);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: a = r2(a' b' c' d' temp[9]' 5' 0x21e1cde6);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: d = r2(d' a' b' c' temp[14]' 9' 0xc33707d6);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: d = r2(d' a' b' c' temp[14]' 9' 0xc33707d6);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: c = r2(c' d' a' b' temp[3]' 14' 0xf4d50d87);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: c = r2(c' d' a' b' temp[3]' 14' 0xf4d50d87);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: b = r2(b' c' d' a' temp[8]' 20' 0x455a14ed);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: b = r2(b' c' d' a' temp[8]' 20' 0x455a14ed);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: a = r2(a' b' c' d' temp[13]' 5' 0xa9e3e905);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: a = r2(a' b' c' d' temp[13]' 5' 0xa9e3e905);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: d = r2(d' a' b' c' temp[2]' 9' 0xfcefa3f8);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: d = r2(d' a' b' c' temp[2]' 9' 0xfcefa3f8);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: c = r2(c' d' a' b' temp[7]' 14' 0x676f02d9);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: c = r2(c' d' a' b' temp[7]' 14' 0x676f02d9);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: b = r2(b' c' d' a' temp[12]' 20' 0x8d2a4c8a);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: b = r2(b' c' d' a' temp[12]' 20' 0x8d2a4c8a);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: a = r3(a' b' c' d' temp[5]' 4' 0xfffa3942);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: a = r3(a' b' c' d' temp[5]' 4' 0xfffa3942);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: d = r3(d' a' b' c' temp[8]' 11' 0x8771f681);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: d = r3(d' a' b' c' temp[8]' 11' 0x8771f681);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: c = r3(c' d' a' b' temp[11]' 16' 0x6d9d6122);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: c = r3(c' d' a' b' temp[11]' 16' 0x6d9d6122);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: b = r3(b' c' d' a' temp[14]' 23' 0xfde5380c);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: b = r3(b' c' d' a' temp[14]' 23' 0xfde5380c);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: a = r3(a' b' c' d' temp[1]' 4' 0xa4beea44);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: d = r3(d' a' b' c' temp[4]' 11' 0x4bdecfa9);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: d = r3(d' a' b' c' temp[4]' 11' 0x4bdecfa9);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: c = r3(c' d' a' b' temp[7]' 16' 0xf6bb4b60);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: c = r3(c' d' a' b' temp[7]' 16' 0xf6bb4b60);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: b = r3(b' c' d' a' temp[10]' 23' 0xbebfbc70);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: b = r3(b' c' d' a' temp[10]' 23' 0xbebfbc70);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: a = r3(a' b' c' d' temp[13]' 4' 0x289b7ec6);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: a = r3(a' b' c' d' temp[13]' 4' 0x289b7ec6);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: d = r3(d' a' b' c' temp[0]' 11' 0xeaa127fa);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: c = r3(c' d' a' b' temp[3]' 16' 0xd4ef3085);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: c = r3(c' d' a' b' temp[3]' 16' 0xd4ef3085);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: b = r3(b' c' d' a' temp[6]' 23' 0x04881d05);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: b = r3(b' c' d' a' temp[6]' 23' 0x04881d05);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: a = r3(a' b' c' d' temp[9]' 4' 0xd9d4d039);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: a = r3(a' b' c' d' temp[9]' 4' 0xd9d4d039);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: d = r3(d' a' b' c' temp[12]' 11' 0xe6db99e5);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: d = r3(d' a' b' c' temp[12]' 11' 0xe6db99e5);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: c = r3(c' d' a' b' temp[15]' 16' 0x1fa27cf8);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: c = r3(c' d' a' b' temp[15]' 16' 0x1fa27cf8);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: b = r3(b' c' d' a' temp[2]' 23' 0xc4ac5665);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: b = r3(b' c' d' a' temp[2]' 23' 0xc4ac5665);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: a = r4(a' b' c' d' temp[0]' 6' 0xf4292244);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: d = r4(d' a' b' c' temp[7]' 10' 0x432aff97);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: d = r4(d' a' b' c' temp[7]' 10' 0x432aff97);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: c = r4(c' d' a' b' temp[14]' 15' 0xab9423a7);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: c = r4(c' d' a' b' temp[14]' 15' 0xab9423a7);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: b = r4(b' c' d' a' temp[5]' 21' 0xfc93a039);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: b = r4(b' c' d' a' temp[5]' 21' 0xfc93a039);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: a = r4(a' b' c' d' temp[12]' 6' 0x655b59c3);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: a = r4(a' b' c' d' temp[12]' 6' 0x655b59c3);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: d = r4(d' a' b' c' temp[3]' 10' 0x8f0ccc92);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: d = r4(d' a' b' c' temp[3]' 10' 0x8f0ccc92);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: c = r4(c' d' a' b' temp[10]' 15' 0xffeff47d);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: c = r4(c' d' a' b' temp[10]' 15' 0xffeff47d);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: b = r4(b' c' d' a' temp[1]' 21' 0x85845dd1);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: a = r4(a' b' c' d' temp[8]' 6' 0x6fa87e4f);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: a = r4(a' b' c' d' temp[8]' 6' 0x6fa87e4f);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: d = r4(d' a' b' c' temp[15]' 10' 0xfe2ce6e0);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: d = r4(d' a' b' c' temp[15]' 10' 0xfe2ce6e0);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: c = r4(c' d' a' b' temp[6]' 15' 0xa3014314);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: c = r4(c' d' a' b' temp[6]' 15' 0xa3014314);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: b = r4(b' c' d' a' temp[13]' 21' 0x4e0811a1);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: b = r4(b' c' d' a' temp[13]' 21' 0x4e0811a1);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: a = r4(a' b' c' d' temp[4]' 6' 0xf7537e82);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: a = r4(a' b' c' d' temp[4]' 6' 0xf7537e82);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: d = r4(d' a' b' c' temp[11]' 10' 0xbd3af235);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: d = r4(d' a' b' c' temp[11]' 10' 0xbd3af235);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: c = r4(c' d' a' b' temp[2]' 15' 0x2ad7d2bb);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: c = r4(c' d' a' b' temp[2]' 15' 0x2ad7d2bb);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: b = r4(b' c' d' a' temp[9]' 21' 0xeb86d391);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,GetHashBlock,The following statement contains a magic number: b = r4(b' c' d' a' temp[9]' 21' 0xeb86d391);
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,LSR,The following statement contains a magic number: return ((i << s) | (i >> (32 - s)));
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,Converter,The following statement contains a magic number: uint[] result = new uint[16];
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,Converter,The following statement contains a magic number: for (int i = 0; i < 16; i++)              {                  result[i] = (uint)input[ibStart + i * 4];                  result[i] += (uint)input[ibStart + i * 4 + 1] << 8;                  result[i] += (uint)input[ibStart + i * 4 + 2] << 16;                  result[i] += (uint)input[ibStart + i * 4 + 3] << 24;              }
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,Converter,The following statement contains a magic number: for (int i = 0; i < 16; i++)              {                  result[i] = (uint)input[ibStart + i * 4];                  result[i] += (uint)input[ibStart + i * 4 + 1] << 8;                  result[i] += (uint)input[ibStart + i * 4 + 2] << 16;                  result[i] += (uint)input[ibStart + i * 4 + 3] << 24;              }
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,Converter,The following statement contains a magic number: for (int i = 0; i < 16; i++)              {                  result[i] = (uint)input[ibStart + i * 4];                  result[i] += (uint)input[ibStart + i * 4 + 1] << 8;                  result[i] += (uint)input[ibStart + i * 4 + 2] << 16;                  result[i] += (uint)input[ibStart + i * 4 + 3] << 24;              }
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,Converter,The following statement contains a magic number: for (int i = 0; i < 16; i++)              {                  result[i] = (uint)input[ibStart + i * 4];                  result[i] += (uint)input[ibStart + i * 4 + 1] << 8;                  result[i] += (uint)input[ibStart + i * 4 + 2] << 16;                  result[i] += (uint)input[ibStart + i * 4 + 3] << 24;              }
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,Converter,The following statement contains a magic number: for (int i = 0; i < 16; i++)              {                  result[i] = (uint)input[ibStart + i * 4];                  result[i] += (uint)input[ibStart + i * 4 + 1] << 8;                  result[i] += (uint)input[ibStart + i * 4 + 2] << 16;                  result[i] += (uint)input[ibStart + i * 4 + 3] << 24;              }
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,Converter,The following statement contains a magic number: for (int i = 0; i < 16; i++)              {                  result[i] = (uint)input[ibStart + i * 4];                  result[i] += (uint)input[ibStart + i * 4 + 1] << 8;                  result[i] += (uint)input[ibStart + i * 4 + 2] << 16;                  result[i] += (uint)input[ibStart + i * 4 + 3] << 24;              }
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,Converter,The following statement contains a magic number: for (int i = 0; i < 16; i++)              {                  result[i] = (uint)input[ibStart + i * 4];                  result[i] += (uint)input[ibStart + i * 4 + 1] << 8;                  result[i] += (uint)input[ibStart + i * 4 + 2] << 16;                  result[i] += (uint)input[ibStart + i * 4 + 3] << 24;              }
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,Converter,The following statement contains a magic number: for (int i = 0; i < 16; i++)              {                  result[i] = (uint)input[ibStart + i * 4];                  result[i] += (uint)input[ibStart + i * 4 + 1] << 8;                  result[i] += (uint)input[ibStart + i * 4 + 2] << 16;                  result[i] += (uint)input[ibStart + i * 4 + 3] << 24;              }
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,Converter,The following statement contains a magic number: for (int i = 0; i < 16; i++)              {                  result[i] = (uint)input[ibStart + i * 4];                  result[i] += (uint)input[ibStart + i * 4 + 1] << 8;                  result[i] += (uint)input[ibStart + i * 4 + 2] << 16;                  result[i] += (uint)input[ibStart + i * 4 + 3] << 24;              }
Magic Number,System.Security.Cryptography,MD5,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5.Generated.cs,Converter,The following statement contains a magic number: for (int i = 0; i < 16; i++)              {                  result[i] = (uint)input[ibStart + i * 4];                  result[i] += (uint)input[ibStart + i * 4 + 1] << 8;                  result[i] += (uint)input[ibStart + i * 4 + 2] << 16;                  result[i] += (uint)input[ibStart + i * 4 + 3] << 24;              }
Magic Number,System.Security.Cryptography,MD5Managed,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5Managed.Generated.cs,Initialize,The following statement contains a magic number: _data = new byte[64];
Magic Number,System.Security.Cryptography,MD5Managed,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5Managed.Generated.cs,HashCore,The following statement contains a magic number: if (totalArrayLength >= 64)              {                  Array.Copy(array' startIndex' _data' _dataSize' 64 - _dataSize);                  // Process message of 64 bytes (512 bits)                  MD5.GetHashBlock(_data' ref _abcd' 0);                  startIndex += 64 - _dataSize;                  totalArrayLength -= 64;                  while (totalArrayLength >= 64)                  {                      Array.Copy(array' startIndex' _data' 0' 64);                      MD5.GetHashBlock(array' ref _abcd' startIndex);                      totalArrayLength -= 64;                      startIndex += 64;                  }                  _dataSize = totalArrayLength;                  Array.Copy(array' startIndex' _data' 0' totalArrayLength);              }              else              {                  Array.Copy(array' startIndex' _data' _dataSize' cbSize);                  _dataSize = totalArrayLength;              }
Magic Number,System.Security.Cryptography,MD5Managed,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5Managed.Generated.cs,HashCore,The following statement contains a magic number: if (totalArrayLength >= 64)              {                  Array.Copy(array' startIndex' _data' _dataSize' 64 - _dataSize);                  // Process message of 64 bytes (512 bits)                  MD5.GetHashBlock(_data' ref _abcd' 0);                  startIndex += 64 - _dataSize;                  totalArrayLength -= 64;                  while (totalArrayLength >= 64)                  {                      Array.Copy(array' startIndex' _data' 0' 64);                      MD5.GetHashBlock(array' ref _abcd' startIndex);                      totalArrayLength -= 64;                      startIndex += 64;                  }                  _dataSize = totalArrayLength;                  Array.Copy(array' startIndex' _data' 0' totalArrayLength);              }              else              {                  Array.Copy(array' startIndex' _data' _dataSize' cbSize);                  _dataSize = totalArrayLength;              }
Magic Number,System.Security.Cryptography,MD5Managed,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5Managed.Generated.cs,HashCore,The following statement contains a magic number: if (totalArrayLength >= 64)              {                  Array.Copy(array' startIndex' _data' _dataSize' 64 - _dataSize);                  // Process message of 64 bytes (512 bits)                  MD5.GetHashBlock(_data' ref _abcd' 0);                  startIndex += 64 - _dataSize;                  totalArrayLength -= 64;                  while (totalArrayLength >= 64)                  {                      Array.Copy(array' startIndex' _data' 0' 64);                      MD5.GetHashBlock(array' ref _abcd' startIndex);                      totalArrayLength -= 64;                      startIndex += 64;                  }                  _dataSize = totalArrayLength;                  Array.Copy(array' startIndex' _data' 0' totalArrayLength);              }              else              {                  Array.Copy(array' startIndex' _data' _dataSize' cbSize);                  _dataSize = totalArrayLength;              }
Magic Number,System.Security.Cryptography,MD5Managed,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5Managed.Generated.cs,HashCore,The following statement contains a magic number: if (totalArrayLength >= 64)              {                  Array.Copy(array' startIndex' _data' _dataSize' 64 - _dataSize);                  // Process message of 64 bytes (512 bits)                  MD5.GetHashBlock(_data' ref _abcd' 0);                  startIndex += 64 - _dataSize;                  totalArrayLength -= 64;                  while (totalArrayLength >= 64)                  {                      Array.Copy(array' startIndex' _data' 0' 64);                      MD5.GetHashBlock(array' ref _abcd' startIndex);                      totalArrayLength -= 64;                      startIndex += 64;                  }                  _dataSize = totalArrayLength;                  Array.Copy(array' startIndex' _data' 0' totalArrayLength);              }              else              {                  Array.Copy(array' startIndex' _data' _dataSize' cbSize);                  _dataSize = totalArrayLength;              }
Magic Number,System.Security.Cryptography,MD5Managed,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5Managed.Generated.cs,HashCore,The following statement contains a magic number: if (totalArrayLength >= 64)              {                  Array.Copy(array' startIndex' _data' _dataSize' 64 - _dataSize);                  // Process message of 64 bytes (512 bits)                  MD5.GetHashBlock(_data' ref _abcd' 0);                  startIndex += 64 - _dataSize;                  totalArrayLength -= 64;                  while (totalArrayLength >= 64)                  {                      Array.Copy(array' startIndex' _data' 0' 64);                      MD5.GetHashBlock(array' ref _abcd' startIndex);                      totalArrayLength -= 64;                      startIndex += 64;                  }                  _dataSize = totalArrayLength;                  Array.Copy(array' startIndex' _data' 0' totalArrayLength);              }              else              {                  Array.Copy(array' startIndex' _data' _dataSize' cbSize);                  _dataSize = totalArrayLength;              }
Magic Number,System.Security.Cryptography,MD5Managed,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5Managed.Generated.cs,HashCore,The following statement contains a magic number: if (totalArrayLength >= 64)              {                  Array.Copy(array' startIndex' _data' _dataSize' 64 - _dataSize);                  // Process message of 64 bytes (512 bits)                  MD5.GetHashBlock(_data' ref _abcd' 0);                  startIndex += 64 - _dataSize;                  totalArrayLength -= 64;                  while (totalArrayLength >= 64)                  {                      Array.Copy(array' startIndex' _data' 0' 64);                      MD5.GetHashBlock(array' ref _abcd' startIndex);                      totalArrayLength -= 64;                      startIndex += 64;                  }                  _dataSize = totalArrayLength;                  Array.Copy(array' startIndex' _data' 0' totalArrayLength);              }              else              {                  Array.Copy(array' startIndex' _data' _dataSize' cbSize);                  _dataSize = totalArrayLength;              }
Magic Number,System.Security.Cryptography,MD5Managed,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5Managed.Generated.cs,HashCore,The following statement contains a magic number: if (totalArrayLength >= 64)              {                  Array.Copy(array' startIndex' _data' _dataSize' 64 - _dataSize);                  // Process message of 64 bytes (512 bits)                  MD5.GetHashBlock(_data' ref _abcd' 0);                  startIndex += 64 - _dataSize;                  totalArrayLength -= 64;                  while (totalArrayLength >= 64)                  {                      Array.Copy(array' startIndex' _data' 0' 64);                      MD5.GetHashBlock(array' ref _abcd' startIndex);                      totalArrayLength -= 64;                      startIndex += 64;                  }                  _dataSize = totalArrayLength;                  Array.Copy(array' startIndex' _data' 0' totalArrayLength);              }              else              {                  Array.Copy(array' startIndex' _data' _dataSize' cbSize);                  _dataSize = totalArrayLength;              }
Magic Number,System.Security.Cryptography,MD5Managed,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5Managed.Generated.cs,HashCore,The following statement contains a magic number: if (totalArrayLength >= 64)              {                  Array.Copy(array' startIndex' _data' _dataSize' 64 - _dataSize);                  // Process message of 64 bytes (512 bits)                  MD5.GetHashBlock(_data' ref _abcd' 0);                  startIndex += 64 - _dataSize;                  totalArrayLength -= 64;                  while (totalArrayLength >= 64)                  {                      Array.Copy(array' startIndex' _data' 0' 64);                      MD5.GetHashBlock(array' ref _abcd' startIndex);                      totalArrayLength -= 64;                      startIndex += 64;                  }                  _dataSize = totalArrayLength;                  Array.Copy(array' startIndex' _data' 0' totalArrayLength);              }              else              {                  Array.Copy(array' startIndex' _data' _dataSize' cbSize);                  _dataSize = totalArrayLength;              }
Magic Number,System.Security.Cryptography,MD5Managed,C:\repos\Cimbalino_Cimbalino-Toolkit\src\Cimbalino.Toolkit.Core (WP8)\System\Security\Cryptography\MD5Managed.Generated.cs,HashFinal,The following statement contains a magic number: base.HashValue = MD5.GetHashFinalBlock(_data' 0' _dataSize' _abcd' _totalLength * 8);
