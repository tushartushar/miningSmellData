Implementation smell,Namespace,Class,File,Method,Description
Long Method,Oxage,Program,C:\repos\papnkukn_spwf01sx\wifi\Program.cs,Main,The method has 132 lines of code.
Complex Method,Oxage,Program,C:\repos\papnkukn_spwf01sx\wifi\Program.cs,Main,Cyclomatic complexity of the method is 84
Complex Method,Oxage,SPWF01Sx,C:\repos\papnkukn_spwf01sx\wifi\SPWF01Sx\SPWF01Sx.cs,Write,Cyclomatic complexity of the method is 8
Long Statement,Oxage,SPWF01Sx,C:\repos\papnkukn_spwf01sx\wifi\SPWF01Sx\SPWF01Sx.cs,Scan,The length of the statement  "	var regex = new Regex (@"\s*FOUND:\s*BSS\s(?<bss>[0-9A-F:]+)\s+CHAN:\s*(?<chan>[0-9]+)\s+RSSI:\s*(?<rssi>[0-9\-]+)\s+SSID:\s*'(?<ssid>.*?)'\s+CAPS:\s*(?<caps>[0-9]+)\s+WPA:\s*(?<wpa>[0-9]+)\s+WPA2:\s*(?<wpa2>[0-9]+)"' RegexOptions.Compiled); " is 241.
Magic Number,Oxage,Program,C:\repos\papnkukn_spwf01sx\wifi\Program.cs,Main,The following statement contains a magic number: if (args == null || args.Length < 2 || args [0] == "--help") {  	Console.WriteLine ("Usage:");  	Console.WriteLine ("  spwf [port] [baud]");  	Console.WriteLine ();  	Console.WriteLine ("Examples:");  	Console.WriteLine ("  spwf COM1 115200");  	Console.WriteLine ();  	Console.WriteLine ("Notes:");  	Console.WriteLine ("  SPWF defaults: 115200 8N1");  	return;  }  
Magic Number,Oxage,Program,C:\repos\papnkukn_spwf01sx\wifi\Program.cs,Main,The following statement contains a magic number: while (running) {  	try {  		while (Console.KeyAvailable) {  			ConsoleKeyInfo key = Console.ReadKey ();  			switch (key.Key) {  			case ConsoleKey.Escape:  				running = false;  				break;  			case ConsoleKey.Enter:  				break;  			case ConsoleKey.F1:  				driver.Test ();  				break;  			case ConsoleKey.F2:  				driver.Scan ();  				break;  			case ConsoleKey.F3:  				driver.Reset ();  				break;  			case ConsoleKey.F4:  				driver.SetWifiState (true);  				break;  			case ConsoleKey.F5:  				driver.SetWifiState (false);  				break;  			case ConsoleKey.F6:  				driver.Ping ("192.168.1.1");  				break;  			case ConsoleKey.F7:  				string ip = driver.GetConfig ("ip_ipaddr");  				string gw = driver.GetConfig ("ip_gw");  				//string host = driver.GetConfig(WifiConfig.ip_hostname);  				//string version = driver.GetConfig(WifiConfig.version);  				//string bssid = driver.GetConfig(WifiConfig.wifi_bssid);  				//var state = (WifiState)driver.GetConfig<int>(WifiConfig.wifi_state);  				break;  			case ConsoleKey.F8:  				driver.PrintConfig ();  				break;  			case ConsoleKey.D0:  				driver.SetConfig ("wifi_mode"' 0);  				break;  			case ConsoleKey.D1:  				driver.SetConfig ("wifi_mode"' 1);  				break;  			case ConsoleKey.D2:  				driver.SetConfig ("wifi_mode"' 2);  				break;  			case ConsoleKey.A:  				driver.SetSSID ("spwf");  				break;  			case ConsoleKey.S:  				driver.SetSSID ("demo");  				//driver.SetConfig("wifi_mode"' "1"); //1 for STA (client station)  				driver.SetWifiState (true);  				driver.SetConfig ("wifi_auth_type"' "0");  				//1 for shared key  				driver.SetConfig ("wifi_priv_mode"' "2");  				//2 for WPA/WPA2  				driver.SetConfig ("wifi_wpa_psk_text"' "demodemo");  				driver.SetConfig ("ip_use_dhcp"' "1");  				driver.SaveSettings ();  				driver.Reset ();  				break;  			case ConsoleKey.R:  				driver.Roam ();  				break;  			case ConsoleKey.E:  				//Toggle echo to console  				bool echo = (driver.GetConfig ("localecho1") == "1");  				driver.SetConfig ("localecho1"' echo ? "0" : "1");  				driver.SetConfig ("localecho2"' echo ? "0" : "1");  				driver.SetConfig ("localecho3"' echo ? "0" : "1");  				break;  			case ConsoleKey.G:  				driver.GetConfig ("wifi_state");  				break;  			//Procedure by the documentation  			case ConsoleKey.P:  				driver.SetConfig ("wifi_mode"' "0");  				driver.SaveSettings ();  				driver.Reset ();  				break;  			case ConsoleKey.O:  				driver.SetConfig ("wifi_priv_mode"' "0");  				driver.SetConfig ("ip_use_dhcp"' "1");  				driver.SetSSID ("ExampleSSID");  				driver.SetConfig ("wifi_mode"' "1");  				driver.SaveSettings ();  				driver.Reset ();  				break;  			default:  				break;  			}  		}  	}  	catch (Exception ex) {  		Console.WriteLine (ex.Message);  	}  	Thread.Sleep (1);  }  
Magic Number,Oxage,Program,C:\repos\papnkukn_spwf01sx\wifi\Program.cs,Main,The following statement contains a magic number: try {  	while (Console.KeyAvailable) {  		ConsoleKeyInfo key = Console.ReadKey ();  		switch (key.Key) {  		case ConsoleKey.Escape:  			running = false;  			break;  		case ConsoleKey.Enter:  			break;  		case ConsoleKey.F1:  			driver.Test ();  			break;  		case ConsoleKey.F2:  			driver.Scan ();  			break;  		case ConsoleKey.F3:  			driver.Reset ();  			break;  		case ConsoleKey.F4:  			driver.SetWifiState (true);  			break;  		case ConsoleKey.F5:  			driver.SetWifiState (false);  			break;  		case ConsoleKey.F6:  			driver.Ping ("192.168.1.1");  			break;  		case ConsoleKey.F7:  			string ip = driver.GetConfig ("ip_ipaddr");  			string gw = driver.GetConfig ("ip_gw");  			//string host = driver.GetConfig(WifiConfig.ip_hostname);  			//string version = driver.GetConfig(WifiConfig.version);  			//string bssid = driver.GetConfig(WifiConfig.wifi_bssid);  			//var state = (WifiState)driver.GetConfig<int>(WifiConfig.wifi_state);  			break;  		case ConsoleKey.F8:  			driver.PrintConfig ();  			break;  		case ConsoleKey.D0:  			driver.SetConfig ("wifi_mode"' 0);  			break;  		case ConsoleKey.D1:  			driver.SetConfig ("wifi_mode"' 1);  			break;  		case ConsoleKey.D2:  			driver.SetConfig ("wifi_mode"' 2);  			break;  		case ConsoleKey.A:  			driver.SetSSID ("spwf");  			break;  		case ConsoleKey.S:  			driver.SetSSID ("demo");  			//driver.SetConfig("wifi_mode"' "1"); //1 for STA (client station)  			driver.SetWifiState (true);  			driver.SetConfig ("wifi_auth_type"' "0");  			//1 for shared key  			driver.SetConfig ("wifi_priv_mode"' "2");  			//2 for WPA/WPA2  			driver.SetConfig ("wifi_wpa_psk_text"' "demodemo");  			driver.SetConfig ("ip_use_dhcp"' "1");  			driver.SaveSettings ();  			driver.Reset ();  			break;  		case ConsoleKey.R:  			driver.Roam ();  			break;  		case ConsoleKey.E:  			//Toggle echo to console  			bool echo = (driver.GetConfig ("localecho1") == "1");  			driver.SetConfig ("localecho1"' echo ? "0" : "1");  			driver.SetConfig ("localecho2"' echo ? "0" : "1");  			driver.SetConfig ("localecho3"' echo ? "0" : "1");  			break;  		case ConsoleKey.G:  			driver.GetConfig ("wifi_state");  			break;  		//Procedure by the documentation  		case ConsoleKey.P:  			driver.SetConfig ("wifi_mode"' "0");  			driver.SaveSettings ();  			driver.Reset ();  			break;  		case ConsoleKey.O:  			driver.SetConfig ("wifi_priv_mode"' "0");  			driver.SetConfig ("ip_use_dhcp"' "1");  			driver.SetSSID ("ExampleSSID");  			driver.SetConfig ("wifi_mode"' "1");  			driver.SaveSettings ();  			driver.Reset ();  			break;  		default:  			break;  		}  	}  }  catch (Exception ex) {  	Console.WriteLine (ex.Message);  }  
Magic Number,Oxage,Program,C:\repos\papnkukn_spwf01sx\wifi\Program.cs,Main,The following statement contains a magic number: while (Console.KeyAvailable) {  	ConsoleKeyInfo key = Console.ReadKey ();  	switch (key.Key) {  	case ConsoleKey.Escape:  		running = false;  		break;  	case ConsoleKey.Enter:  		break;  	case ConsoleKey.F1:  		driver.Test ();  		break;  	case ConsoleKey.F2:  		driver.Scan ();  		break;  	case ConsoleKey.F3:  		driver.Reset ();  		break;  	case ConsoleKey.F4:  		driver.SetWifiState (true);  		break;  	case ConsoleKey.F5:  		driver.SetWifiState (false);  		break;  	case ConsoleKey.F6:  		driver.Ping ("192.168.1.1");  		break;  	case ConsoleKey.F7:  		string ip = driver.GetConfig ("ip_ipaddr");  		string gw = driver.GetConfig ("ip_gw");  		//string host = driver.GetConfig(WifiConfig.ip_hostname);  		//string version = driver.GetConfig(WifiConfig.version);  		//string bssid = driver.GetConfig(WifiConfig.wifi_bssid);  		//var state = (WifiState)driver.GetConfig<int>(WifiConfig.wifi_state);  		break;  	case ConsoleKey.F8:  		driver.PrintConfig ();  		break;  	case ConsoleKey.D0:  		driver.SetConfig ("wifi_mode"' 0);  		break;  	case ConsoleKey.D1:  		driver.SetConfig ("wifi_mode"' 1);  		break;  	case ConsoleKey.D2:  		driver.SetConfig ("wifi_mode"' 2);  		break;  	case ConsoleKey.A:  		driver.SetSSID ("spwf");  		break;  	case ConsoleKey.S:  		driver.SetSSID ("demo");  		//driver.SetConfig("wifi_mode"' "1"); //1 for STA (client station)  		driver.SetWifiState (true);  		driver.SetConfig ("wifi_auth_type"' "0");  		//1 for shared key  		driver.SetConfig ("wifi_priv_mode"' "2");  		//2 for WPA/WPA2  		driver.SetConfig ("wifi_wpa_psk_text"' "demodemo");  		driver.SetConfig ("ip_use_dhcp"' "1");  		driver.SaveSettings ();  		driver.Reset ();  		break;  	case ConsoleKey.R:  		driver.Roam ();  		break;  	case ConsoleKey.E:  		//Toggle echo to console  		bool echo = (driver.GetConfig ("localecho1") == "1");  		driver.SetConfig ("localecho1"' echo ? "0" : "1");  		driver.SetConfig ("localecho2"' echo ? "0" : "1");  		driver.SetConfig ("localecho3"' echo ? "0" : "1");  		break;  	case ConsoleKey.G:  		driver.GetConfig ("wifi_state");  		break;  	//Procedure by the documentation  	case ConsoleKey.P:  		driver.SetConfig ("wifi_mode"' "0");  		driver.SaveSettings ();  		driver.Reset ();  		break;  	case ConsoleKey.O:  		driver.SetConfig ("wifi_priv_mode"' "0");  		driver.SetConfig ("ip_use_dhcp"' "1");  		driver.SetSSID ("ExampleSSID");  		driver.SetConfig ("wifi_mode"' "1");  		driver.SaveSettings ();  		driver.Reset ();  		break;  	default:  		break;  	}  }  
Magic Number,Oxage,Program,C:\repos\papnkukn_spwf01sx\wifi\Program.cs,Main,The following statement contains a magic number: switch (key.Key) {  case ConsoleKey.Escape:  	running = false;  	break;  case ConsoleKey.Enter:  	break;  case ConsoleKey.F1:  	driver.Test ();  	break;  case ConsoleKey.F2:  	driver.Scan ();  	break;  case ConsoleKey.F3:  	driver.Reset ();  	break;  case ConsoleKey.F4:  	driver.SetWifiState (true);  	break;  case ConsoleKey.F5:  	driver.SetWifiState (false);  	break;  case ConsoleKey.F6:  	driver.Ping ("192.168.1.1");  	break;  case ConsoleKey.F7:  	string ip = driver.GetConfig ("ip_ipaddr");  	string gw = driver.GetConfig ("ip_gw");  	//string host = driver.GetConfig(WifiConfig.ip_hostname);  	//string version = driver.GetConfig(WifiConfig.version);  	//string bssid = driver.GetConfig(WifiConfig.wifi_bssid);  	//var state = (WifiState)driver.GetConfig<int>(WifiConfig.wifi_state);  	break;  case ConsoleKey.F8:  	driver.PrintConfig ();  	break;  case ConsoleKey.D0:  	driver.SetConfig ("wifi_mode"' 0);  	break;  case ConsoleKey.D1:  	driver.SetConfig ("wifi_mode"' 1);  	break;  case ConsoleKey.D2:  	driver.SetConfig ("wifi_mode"' 2);  	break;  case ConsoleKey.A:  	driver.SetSSID ("spwf");  	break;  case ConsoleKey.S:  	driver.SetSSID ("demo");  	//driver.SetConfig("wifi_mode"' "1"); //1 for STA (client station)  	driver.SetWifiState (true);  	driver.SetConfig ("wifi_auth_type"' "0");  	//1 for shared key  	driver.SetConfig ("wifi_priv_mode"' "2");  	//2 for WPA/WPA2  	driver.SetConfig ("wifi_wpa_psk_text"' "demodemo");  	driver.SetConfig ("ip_use_dhcp"' "1");  	driver.SaveSettings ();  	driver.Reset ();  	break;  case ConsoleKey.R:  	driver.Roam ();  	break;  case ConsoleKey.E:  	//Toggle echo to console  	bool echo = (driver.GetConfig ("localecho1") == "1");  	driver.SetConfig ("localecho1"' echo ? "0" : "1");  	driver.SetConfig ("localecho2"' echo ? "0" : "1");  	driver.SetConfig ("localecho3"' echo ? "0" : "1");  	break;  case ConsoleKey.G:  	driver.GetConfig ("wifi_state");  	break;  //Procedure by the documentation  case ConsoleKey.P:  	driver.SetConfig ("wifi_mode"' "0");  	driver.SaveSettings ();  	driver.Reset ();  	break;  case ConsoleKey.O:  	driver.SetConfig ("wifi_priv_mode"' "0");  	driver.SetConfig ("ip_use_dhcp"' "1");  	driver.SetSSID ("ExampleSSID");  	driver.SetConfig ("wifi_mode"' "1");  	driver.SaveSettings ();  	driver.Reset ();  	break;  default:  	break;  }  
Magic Number,Oxage,Program,C:\repos\papnkukn_spwf01sx\wifi\Program.cs,Main,The following statement contains a magic number: driver.SetConfig ("wifi_mode"' 2);  
Magic Number,Oxage,SPWF01Sx,C:\repos\papnkukn_spwf01sx\wifi\SPWF01Sx\SPWF01Sx.cs,SPWF01Sx,The following statement contains a magic number: this.Timeout = 2000;  
Magic Number,Oxage,SPWF01Sx,C:\repos\papnkukn_spwf01sx\wifi\SPWF01Sx\SPWF01Sx.cs,WriteAsync,The following statement contains a magic number: if (command.Length > 127 + 2)//2 for AT prefix   {  	//AT + 127 chars according to the documentation  	throw new ArgumentException ("Maximum command length is 127 chars!"' "command");  }  
Magic Number,Oxage,SPWF01Sx,C:\repos\papnkukn_spwf01sx\wifi\SPWF01Sx\SPWF01Sx.cs,WriteAsync,The following statement contains a magic number: if (command.Length > 127 + 2)//2 for AT prefix   {  	//AT + 127 chars according to the documentation  	throw new ArgumentException ("Maximum command length is 127 chars!"' "command");  }  
Magic Number,Oxage,SPWF01Sx,C:\repos\papnkukn_spwf01sx\wifi\SPWF01Sx\SPWF01Sx.cs,Write,The following statement contains a magic number: try {  	//Wait for response  	int timeout = this.Timeout;  	bool reading = true;  	while (reading && timeout > 0) {  		while (com.BytesToRead > 0) {  			const int length = 1024;  			byte[] buffer = new byte[length];  			int size = com.Read (buffer' 0' length);  			string output = Encoding.UTF8.GetString (buffer' 0' size);  			if (this.Debug) {  				Console.Write (output);  			}  			builder.Append (output);  			//Check if completed  			//<cr><lf><responsecode><cr><lf>  			//OK  			//ERROR: <descriptive text>  			string response = builder.ToString ();  			var match = reResponse.Match (response);  			if (match.Success) {  				reading = false;  				string code = match.Groups ["code"].Value;  				string message = match.Groups ["message"].Value;  				if (code == "ERROR") {  					throw new WifiException (message);  				}  				break;  			}  		}  		Thread.Sleep (1);  		timeout--;  	}  	if (timeout == 0) {  		//No response from the module...  		throw new TimeoutException ("Read timeout expired!");  	}  }  catch (Exception ex) {  	throw ex;  }  finally {  	//Listen loop can continue now  	wait = false;  }  
Magic Number,Oxage,SPWF01Sx,C:\repos\papnkukn_spwf01sx\wifi\SPWF01Sx\SPWF01Sx.cs,Write,The following statement contains a magic number: while (reading && timeout > 0) {  	while (com.BytesToRead > 0) {  		const int length = 1024;  		byte[] buffer = new byte[length];  		int size = com.Read (buffer' 0' length);  		string output = Encoding.UTF8.GetString (buffer' 0' size);  		if (this.Debug) {  			Console.Write (output);  		}  		builder.Append (output);  		//Check if completed  		//<cr><lf><responsecode><cr><lf>  		//OK  		//ERROR: <descriptive text>  		string response = builder.ToString ();  		var match = reResponse.Match (response);  		if (match.Success) {  			reading = false;  			string code = match.Groups ["code"].Value;  			string message = match.Groups ["message"].Value;  			if (code == "ERROR") {  				throw new WifiException (message);  			}  			break;  		}  	}  	Thread.Sleep (1);  	timeout--;  }  
Magic Number,Oxage,SPWF01Sx,C:\repos\papnkukn_spwf01sx\wifi\SPWF01Sx\SPWF01Sx.cs,Write,The following statement contains a magic number: while (com.BytesToRead > 0) {  	const int length = 1024;  	byte[] buffer = new byte[length];  	int size = com.Read (buffer' 0' length);  	string output = Encoding.UTF8.GetString (buffer' 0' size);  	if (this.Debug) {  		Console.Write (output);  	}  	builder.Append (output);  	//Check if completed  	//<cr><lf><responsecode><cr><lf>  	//OK  	//ERROR: <descriptive text>  	string response = builder.ToString ();  	var match = reResponse.Match (response);  	if (match.Success) {  		reading = false;  		string code = match.Groups ["code"].Value;  		string message = match.Groups ["message"].Value;  		if (code == "ERROR") {  			throw new WifiException (message);  		}  		break;  	}  }  
Magic Number,Oxage,SPWF01Sx,C:\repos\papnkukn_spwf01sx\wifi\SPWF01Sx\SPWF01Sx.cs,Listen,The following statement contains a magic number: while (true) {  	if (!wait) {  		while (com != null && com.IsOpen && com.BytesToRead > 0) {  			const int length = 1024;  			byte[] buffer = new byte[length];  			int size = com.Read (buffer' 0' length);  			//Decode the message  			string output = Encoding.UTF8.GetString (buffer' 0' size);  			builder.Append (output);  			if (this.Debug) {  				Console.Write (output);  			}  			//Parse async data  			string response = builder.ToString ();  			var match = reAsync.Match (response);  			if (match.Success) {  				int number = int.Parse (match.Groups ["num"].Value);  				string message = match.Groups ["message"].Value;  				OnAsyncResponse (number' message);  				builder = new StringBuilder ();  			}  		}  	}  	Thread.Sleep (10);  }  
Magic Number,Oxage,SPWF01Sx,C:\repos\papnkukn_spwf01sx\wifi\SPWF01Sx\SPWF01Sx.cs,Listen,The following statement contains a magic number: while (true) {  	if (!wait) {  		while (com != null && com.IsOpen && com.BytesToRead > 0) {  			const int length = 1024;  			byte[] buffer = new byte[length];  			int size = com.Read (buffer' 0' length);  			//Decode the message  			string output = Encoding.UTF8.GetString (buffer' 0' size);  			builder.Append (output);  			if (this.Debug) {  				Console.Write (output);  			}  			//Parse async data  			string response = builder.ToString ();  			var match = reAsync.Match (response);  			if (match.Success) {  				int number = int.Parse (match.Groups ["num"].Value);  				string message = match.Groups ["message"].Value;  				OnAsyncResponse (number' message);  				builder = new StringBuilder ();  			}  		}  	}  	Thread.Sleep (10);  }  
Magic Number,Oxage,SPWF01Sx,C:\repos\papnkukn_spwf01sx\wifi\SPWF01Sx\SPWF01Sx.cs,Listen,The following statement contains a magic number: if (!wait) {  	while (com != null && com.IsOpen && com.BytesToRead > 0) {  		const int length = 1024;  		byte[] buffer = new byte[length];  		int size = com.Read (buffer' 0' length);  		//Decode the message  		string output = Encoding.UTF8.GetString (buffer' 0' size);  		builder.Append (output);  		if (this.Debug) {  			Console.Write (output);  		}  		//Parse async data  		string response = builder.ToString ();  		var match = reAsync.Match (response);  		if (match.Success) {  			int number = int.Parse (match.Groups ["num"].Value);  			string message = match.Groups ["message"].Value;  			OnAsyncResponse (number' message);  			builder = new StringBuilder ();  		}  	}  }  
Magic Number,Oxage,SPWF01Sx,C:\repos\papnkukn_spwf01sx\wifi\SPWF01Sx\SPWF01Sx.cs,Listen,The following statement contains a magic number: while (com != null && com.IsOpen && com.BytesToRead > 0) {  	const int length = 1024;  	byte[] buffer = new byte[length];  	int size = com.Read (buffer' 0' length);  	//Decode the message  	string output = Encoding.UTF8.GetString (buffer' 0' size);  	builder.Append (output);  	if (this.Debug) {  		Console.Write (output);  	}  	//Parse async data  	string response = builder.ToString ();  	var match = reAsync.Match (response);  	if (match.Success) {  		int number = int.Parse (match.Groups ["num"].Value);  		string message = match.Groups ["message"].Value;  		OnAsyncResponse (number' message);  		builder = new StringBuilder ();  	}  }  
Magic Number,Oxage,SPWF01Sx,C:\repos\papnkukn_spwf01sx\wifi\SPWF01Sx\SPWF01Sx.cs,Listen,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,Oxage,SPWF01Sx,C:\repos\papnkukn_spwf01sx\wifi\SPWF01Sx\SPWF01Sx.cs,Open,The following statement contains a magic number: com.ReadTimeout = 1000;  
Magic Number,Oxage,SPWF01Sx,C:\repos\papnkukn_spwf01sx\wifi\SPWF01Sx\SPWF01Sx.cs,Open,The following statement contains a magic number: com.WriteTimeout = 1000;  
Magic Number,Oxage,SPWF01Sx,C:\repos\papnkukn_spwf01sx\wifi\SPWF01Sx\SPWF01Sx.cs,SetSSID,The following statement contains a magic number: if (ssid.Length > 32) {  	throw new ArgumentException ("SSID must be 1-32 chars in length!");  }  
