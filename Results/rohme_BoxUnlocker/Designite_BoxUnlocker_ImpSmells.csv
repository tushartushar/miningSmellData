Implementation smell,Namespace,Class,File,Method,Description
Long Method,BoxUnlocker.Models,Box,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Box.cs,NarrowingValidNumbers,The method has 101 lines of code.
Complex Method,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,Cyclomatic complexity of the method is 22
Complex Method,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenFieldBox,Cyclomatic complexity of the method is 12
Complex Method,BoxUnlocker.Models,Box,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Box.cs,GetInitValidNumbers,Cyclomatic complexity of the method is 10
Complex Method,BoxUnlocker.Models,Box,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Box.cs,AddHint,Cyclomatic complexity of the method is 9
Complex Method,BoxUnlocker.Models,Box,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Box.cs,NarrowingValidNumbers,Cyclomatic complexity of the method is 60
Complex Method,BoxUnlocker.Models,Settings,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Settings.cs,Save,Cyclomatic complexity of the method is 8
Long Statement,BoxUnlocker,App,C:\repos\rohme_BoxUnlocker\BoxUnlocker\App.xaml.cs,Application_Startup,The length of the statement  "	logger.InfoFormat ("{0} {1} 起動 ========================="' ver.ProductName' string.Format ("Ver{0}.{1}.{2}"' ver.ProductMajorPart' ver.ProductMinorPart' ver.ProductBuildPart)); " is 176.
Long Statement,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,Monitoring,The length of the statement  "				if (settings.MonitoringField && pol.Api.Target.TargetName == Constants.BoxNameTreasureCasket && EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.BoxQuestionWhatWillYouDo)) { " is 200.
Long Statement,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,Monitoring,The length of the statement  "				else if (settings.MonitoringMum && pol.Api.Target.TargetName == Constants.MumNpcName && pol.Api.Player.Zone == Zone.WesternAdoulin) { " is 133.
Long Statement,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The length of the statement  "					if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) { " is 214.
Long Statement,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The length of the statement  "					else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) { " is 213.
Long Statement,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The length of the statement  "				else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDoWithRemain)) { " is 123.
Long Statement,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The length of the statement  "					if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) { " is 214.
Long Statement,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The length of the statement  "					else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) { " is 213.
Long Statement,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenFieldBox,The length of the statement  "					else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.BoxQuestionWhatWillYouDoWithRemain)) { " is 123.
Long Statement,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenFieldBox,The length of the statement  "							var val = EliteAPIWrapper.Utils.RegexUtil.GetMatchValue (pol.Api.Dialog.Question' Constants.BoxQuestionWhatWillYouDoWithRemain); " is 128.
Long Statement,BoxUnlocker.Models,Box,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Box.cs,NarrowingValidNumbers,The length of the statement  "			if (!(v.ToString ().Substring (dig' 1) == iHintValue [1] || v.ToString ().Substring (dig' 1) == iHintValue [2] || v.ToString ().Substring (dig' 1) == iHintValue [3])) " is 166.
Long Statement,BoxUnlocker.Models,Settings,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Settings.cs,Load,The length of the statement  "		this.MonitoringField = iniHandler.GetBool (Constants.IniSection' Constants.IniKeyMonitoringField' Constants.IniDefaultMonitoringField); " is 135.
Long Statement,BoxUnlocker.Models,Settings,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Settings.cs,Load,The length of the statement  "		this.MonitoringMum = iniHandler.GetBool (Constants.IniSection' Constants.IniKeyMonitoringMum' Constants.IniDefaultMonitoringMum); " is 129.
Long Statement,BoxUnlocker.Models,Settings,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Settings.cs,Load,The length of the statement  "		this.MumBoxType = (MumType)iniHandler.GetInt (Constants.IniSection' Constants.IniKeyMumBoxType' (int)Constants.IniDefaultMumBoxType); " is 133.
Long Statement,BoxUnlocker.Models,Settings,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Settings.cs,Load,The length of the statement  "		this.MumMaxCount = iniHandler.GetInt (Constants.IniSection' Constants.IniKeyMumMaxCount' Constants.IniDefaultMumMaxCount); " is 122.
Long Statement,BoxUnlocker.ViewModels,MainViewModel,C:\repos\rohme_BoxUnlocker\BoxUnlocker\ViewModels\MainViewModel.cs,Initialize,The length of the statement  "	ApplicationVersion = string.Format ("Ver{0}.{1}.{2}"' ver.ProductMajorPart' ver.ProductMinorPart' ver.ProductBuildPart); " is 120.
Complex Conditional,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The conditional expression  "settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100"  is complex.
Complex Conditional,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The conditional expression  "settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500"  is complex.
Complex Conditional,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The conditional expression  "settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100"  is complex.
Complex Conditional,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The conditional expression  "settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500"  is complex.
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: try {  	targetBoxType = BoxType.Mum;  	this.TargetBoxName = TypeMaps.BoxTypeMap [targetBoxType];  	SetStatusText ("MUM箱を開けます");  	this.Box.ResetBox ();  	SetViewData ();  	Operation operation = new Operation ();  	this.MumRemainCount = settings.MumMaxCount;  	while (!this.IsCancelling) {  		if (pol.Api.Menu.IsMenuOpen) {  			// どうする？  			if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDo)) {  				if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  					pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  					// 同盟戦績で挑戦する  				}  				else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  					pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  					// ギルで挑戦する  				}  			}  			// 難易度を選択してください((.*):([0-9]*))  			if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionSelectLevel)) {  				if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Bayld20)  					pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  				// ピジョン  				else if (settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Bayld40)  					pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  				// ハニムーナー  				else if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  					pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  				// シル  				else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  					pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  				// プリーミアム  				else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  					pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  				// シャーク  			}  			// ^どうする？（残り([0-9]*)回）$  			else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDoWithRemain)) {  				// 箱の初期化  				if (operation.OperationType != OperationType.GetHints && operation.OperationType != OperationType.InputNumber) {  					operation = this.Box.StartUnlockMumBox (settings.MumBoxType);  					SetViewData ();  				}  				// 箱の操作  				if (!DoOperation (BoxType.Mum' ref operation)) {  					return false;  				}  				if (operation.OperationType == OperationType.Success)  					SetStatusText ("箱空け成功");  				else if (operation.OperationType == OperationType.Failed)  					SetStatusText ("箱空け失敗");  			}  			// ^もう1度やりますか？(.*)$  			else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionTryAgain)) {  				// 挑戦回数の判定  				this.MumRemainCount--;  				if (this.MumRemainCount <= 0) {  					pol.Api.Dialog.SetDialogIndex (0' true' settings.BaseWait);  					// あきらめる  					SetStatusText ("規定回数に達したので、MUM箱空けを終了しました。");  					break;  				}  				if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  					pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  					// 部屋縷度で再挑戦する  				}  				else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  					pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  					// ギルで再挑戦する  				}  			}  		}  		Thread.Sleep (settings.BaseWait);  	}  	return true;  }  catch (Exception e) {  	logger.Error (e.Message' e);  	return false;  }  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: try {  	targetBoxType = BoxType.Mum;  	this.TargetBoxName = TypeMaps.BoxTypeMap [targetBoxType];  	SetStatusText ("MUM箱を開けます");  	this.Box.ResetBox ();  	SetViewData ();  	Operation operation = new Operation ();  	this.MumRemainCount = settings.MumMaxCount;  	while (!this.IsCancelling) {  		if (pol.Api.Menu.IsMenuOpen) {  			// どうする？  			if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDo)) {  				if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  					pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  					// 同盟戦績で挑戦する  				}  				else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  					pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  					// ギルで挑戦する  				}  			}  			// 難易度を選択してください((.*):([0-9]*))  			if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionSelectLevel)) {  				if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Bayld20)  					pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  				// ピジョン  				else if (settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Bayld40)  					pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  				// ハニムーナー  				else if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  					pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  				// シル  				else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  					pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  				// プリーミアム  				else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  					pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  				// シャーク  			}  			// ^どうする？（残り([0-9]*)回）$  			else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDoWithRemain)) {  				// 箱の初期化  				if (operation.OperationType != OperationType.GetHints && operation.OperationType != OperationType.InputNumber) {  					operation = this.Box.StartUnlockMumBox (settings.MumBoxType);  					SetViewData ();  				}  				// 箱の操作  				if (!DoOperation (BoxType.Mum' ref operation)) {  					return false;  				}  				if (operation.OperationType == OperationType.Success)  					SetStatusText ("箱空け成功");  				else if (operation.OperationType == OperationType.Failed)  					SetStatusText ("箱空け失敗");  			}  			// ^もう1度やりますか？(.*)$  			else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionTryAgain)) {  				// 挑戦回数の判定  				this.MumRemainCount--;  				if (this.MumRemainCount <= 0) {  					pol.Api.Dialog.SetDialogIndex (0' true' settings.BaseWait);  					// あきらめる  					SetStatusText ("規定回数に達したので、MUM箱空けを終了しました。");  					break;  				}  				if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  					pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  					// 部屋縷度で再挑戦する  				}  				else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  					pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  					// ギルで再挑戦する  				}  			}  		}  		Thread.Sleep (settings.BaseWait);  	}  	return true;  }  catch (Exception e) {  	logger.Error (e.Message' e);  	return false;  }  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: try {  	targetBoxType = BoxType.Mum;  	this.TargetBoxName = TypeMaps.BoxTypeMap [targetBoxType];  	SetStatusText ("MUM箱を開けます");  	this.Box.ResetBox ();  	SetViewData ();  	Operation operation = new Operation ();  	this.MumRemainCount = settings.MumMaxCount;  	while (!this.IsCancelling) {  		if (pol.Api.Menu.IsMenuOpen) {  			// どうする？  			if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDo)) {  				if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  					pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  					// 同盟戦績で挑戦する  				}  				else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  					pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  					// ギルで挑戦する  				}  			}  			// 難易度を選択してください((.*):([0-9]*))  			if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionSelectLevel)) {  				if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Bayld20)  					pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  				// ピジョン  				else if (settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Bayld40)  					pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  				// ハニムーナー  				else if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  					pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  				// シル  				else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  					pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  				// プリーミアム  				else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  					pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  				// シャーク  			}  			// ^どうする？（残り([0-9]*)回）$  			else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDoWithRemain)) {  				// 箱の初期化  				if (operation.OperationType != OperationType.GetHints && operation.OperationType != OperationType.InputNumber) {  					operation = this.Box.StartUnlockMumBox (settings.MumBoxType);  					SetViewData ();  				}  				// 箱の操作  				if (!DoOperation (BoxType.Mum' ref operation)) {  					return false;  				}  				if (operation.OperationType == OperationType.Success)  					SetStatusText ("箱空け成功");  				else if (operation.OperationType == OperationType.Failed)  					SetStatusText ("箱空け失敗");  			}  			// ^もう1度やりますか？(.*)$  			else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionTryAgain)) {  				// 挑戦回数の判定  				this.MumRemainCount--;  				if (this.MumRemainCount <= 0) {  					pol.Api.Dialog.SetDialogIndex (0' true' settings.BaseWait);  					// あきらめる  					SetStatusText ("規定回数に達したので、MUM箱空けを終了しました。");  					break;  				}  				if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  					pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  					// 部屋縷度で再挑戦する  				}  				else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  					pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  					// ギルで再挑戦する  				}  			}  		}  		Thread.Sleep (settings.BaseWait);  	}  	return true;  }  catch (Exception e) {  	logger.Error (e.Message' e);  	return false;  }  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: try {  	targetBoxType = BoxType.Mum;  	this.TargetBoxName = TypeMaps.BoxTypeMap [targetBoxType];  	SetStatusText ("MUM箱を開けます");  	this.Box.ResetBox ();  	SetViewData ();  	Operation operation = new Operation ();  	this.MumRemainCount = settings.MumMaxCount;  	while (!this.IsCancelling) {  		if (pol.Api.Menu.IsMenuOpen) {  			// どうする？  			if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDo)) {  				if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  					pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  					// 同盟戦績で挑戦する  				}  				else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  					pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  					// ギルで挑戦する  				}  			}  			// 難易度を選択してください((.*):([0-9]*))  			if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionSelectLevel)) {  				if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Bayld20)  					pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  				// ピジョン  				else if (settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Bayld40)  					pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  				// ハニムーナー  				else if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  					pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  				// シル  				else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  					pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  				// プリーミアム  				else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  					pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  				// シャーク  			}  			// ^どうする？（残り([0-9]*)回）$  			else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDoWithRemain)) {  				// 箱の初期化  				if (operation.OperationType != OperationType.GetHints && operation.OperationType != OperationType.InputNumber) {  					operation = this.Box.StartUnlockMumBox (settings.MumBoxType);  					SetViewData ();  				}  				// 箱の操作  				if (!DoOperation (BoxType.Mum' ref operation)) {  					return false;  				}  				if (operation.OperationType == OperationType.Success)  					SetStatusText ("箱空け成功");  				else if (operation.OperationType == OperationType.Failed)  					SetStatusText ("箱空け失敗");  			}  			// ^もう1度やりますか？(.*)$  			else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionTryAgain)) {  				// 挑戦回数の判定  				this.MumRemainCount--;  				if (this.MumRemainCount <= 0) {  					pol.Api.Dialog.SetDialogIndex (0' true' settings.BaseWait);  					// あきらめる  					SetStatusText ("規定回数に達したので、MUM箱空けを終了しました。");  					break;  				}  				if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  					pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  					// 部屋縷度で再挑戦する  				}  				else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  					pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  					// ギルで再挑戦する  				}  			}  		}  		Thread.Sleep (settings.BaseWait);  	}  	return true;  }  catch (Exception e) {  	logger.Error (e.Message' e);  	return false;  }  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: try {  	targetBoxType = BoxType.Mum;  	this.TargetBoxName = TypeMaps.BoxTypeMap [targetBoxType];  	SetStatusText ("MUM箱を開けます");  	this.Box.ResetBox ();  	SetViewData ();  	Operation operation = new Operation ();  	this.MumRemainCount = settings.MumMaxCount;  	while (!this.IsCancelling) {  		if (pol.Api.Menu.IsMenuOpen) {  			// どうする？  			if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDo)) {  				if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  					pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  					// 同盟戦績で挑戦する  				}  				else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  					pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  					// ギルで挑戦する  				}  			}  			// 難易度を選択してください((.*):([0-9]*))  			if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionSelectLevel)) {  				if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Bayld20)  					pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  				// ピジョン  				else if (settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Bayld40)  					pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  				// ハニムーナー  				else if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  					pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  				// シル  				else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  					pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  				// プリーミアム  				else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  					pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  				// シャーク  			}  			// ^どうする？（残り([0-9]*)回）$  			else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDoWithRemain)) {  				// 箱の初期化  				if (operation.OperationType != OperationType.GetHints && operation.OperationType != OperationType.InputNumber) {  					operation = this.Box.StartUnlockMumBox (settings.MumBoxType);  					SetViewData ();  				}  				// 箱の操作  				if (!DoOperation (BoxType.Mum' ref operation)) {  					return false;  				}  				if (operation.OperationType == OperationType.Success)  					SetStatusText ("箱空け成功");  				else if (operation.OperationType == OperationType.Failed)  					SetStatusText ("箱空け失敗");  			}  			// ^もう1度やりますか？(.*)$  			else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionTryAgain)) {  				// 挑戦回数の判定  				this.MumRemainCount--;  				if (this.MumRemainCount <= 0) {  					pol.Api.Dialog.SetDialogIndex (0' true' settings.BaseWait);  					// あきらめる  					SetStatusText ("規定回数に達したので、MUM箱空けを終了しました。");  					break;  				}  				if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  					pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  					// 部屋縷度で再挑戦する  				}  				else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  					pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  					// ギルで再挑戦する  				}  			}  		}  		Thread.Sleep (settings.BaseWait);  	}  	return true;  }  catch (Exception e) {  	logger.Error (e.Message' e);  	return false;  }  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: try {  	targetBoxType = BoxType.Mum;  	this.TargetBoxName = TypeMaps.BoxTypeMap [targetBoxType];  	SetStatusText ("MUM箱を開けます");  	this.Box.ResetBox ();  	SetViewData ();  	Operation operation = new Operation ();  	this.MumRemainCount = settings.MumMaxCount;  	while (!this.IsCancelling) {  		if (pol.Api.Menu.IsMenuOpen) {  			// どうする？  			if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDo)) {  				if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  					pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  					// 同盟戦績で挑戦する  				}  				else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  					pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  					// ギルで挑戦する  				}  			}  			// 難易度を選択してください((.*):([0-9]*))  			if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionSelectLevel)) {  				if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Bayld20)  					pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  				// ピジョン  				else if (settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Bayld40)  					pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  				// ハニムーナー  				else if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  					pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  				// シル  				else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  					pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  				// プリーミアム  				else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  					pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  				// シャーク  			}  			// ^どうする？（残り([0-9]*)回）$  			else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDoWithRemain)) {  				// 箱の初期化  				if (operation.OperationType != OperationType.GetHints && operation.OperationType != OperationType.InputNumber) {  					operation = this.Box.StartUnlockMumBox (settings.MumBoxType);  					SetViewData ();  				}  				// 箱の操作  				if (!DoOperation (BoxType.Mum' ref operation)) {  					return false;  				}  				if (operation.OperationType == OperationType.Success)  					SetStatusText ("箱空け成功");  				else if (operation.OperationType == OperationType.Failed)  					SetStatusText ("箱空け失敗");  			}  			// ^もう1度やりますか？(.*)$  			else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionTryAgain)) {  				// 挑戦回数の判定  				this.MumRemainCount--;  				if (this.MumRemainCount <= 0) {  					pol.Api.Dialog.SetDialogIndex (0' true' settings.BaseWait);  					// あきらめる  					SetStatusText ("規定回数に達したので、MUM箱空けを終了しました。");  					break;  				}  				if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  					pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  					// 部屋縷度で再挑戦する  				}  				else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  					pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  					// ギルで再挑戦する  				}  			}  		}  		Thread.Sleep (settings.BaseWait);  	}  	return true;  }  catch (Exception e) {  	logger.Error (e.Message' e);  	return false;  }  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: while (!this.IsCancelling) {  	if (pol.Api.Menu.IsMenuOpen) {  		// どうする？  		if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDo)) {  			if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  				pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  				// 同盟戦績で挑戦する  			}  			else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  				pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  				// ギルで挑戦する  			}  		}  		// 難易度を選択してください((.*):([0-9]*))  		if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionSelectLevel)) {  			if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Bayld20)  				pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  			// ピジョン  			else if (settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Bayld40)  				pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  			// ハニムーナー  			else if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  				pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  			// シル  			else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  				pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  			// プリーミアム  			else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  				pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  			// シャーク  		}  		// ^どうする？（残り([0-9]*)回）$  		else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDoWithRemain)) {  			// 箱の初期化  			if (operation.OperationType != OperationType.GetHints && operation.OperationType != OperationType.InputNumber) {  				operation = this.Box.StartUnlockMumBox (settings.MumBoxType);  				SetViewData ();  			}  			// 箱の操作  			if (!DoOperation (BoxType.Mum' ref operation)) {  				return false;  			}  			if (operation.OperationType == OperationType.Success)  				SetStatusText ("箱空け成功");  			else if (operation.OperationType == OperationType.Failed)  				SetStatusText ("箱空け失敗");  		}  		// ^もう1度やりますか？(.*)$  		else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionTryAgain)) {  			// 挑戦回数の判定  			this.MumRemainCount--;  			if (this.MumRemainCount <= 0) {  				pol.Api.Dialog.SetDialogIndex (0' true' settings.BaseWait);  				// あきらめる  				SetStatusText ("規定回数に達したので、MUM箱空けを終了しました。");  				break;  			}  			if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  				pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  				// 部屋縷度で再挑戦する  			}  			else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  				pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  				// ギルで再挑戦する  			}  		}  	}  	Thread.Sleep (settings.BaseWait);  }  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: while (!this.IsCancelling) {  	if (pol.Api.Menu.IsMenuOpen) {  		// どうする？  		if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDo)) {  			if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  				pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  				// 同盟戦績で挑戦する  			}  			else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  				pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  				// ギルで挑戦する  			}  		}  		// 難易度を選択してください((.*):([0-9]*))  		if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionSelectLevel)) {  			if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Bayld20)  				pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  			// ピジョン  			else if (settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Bayld40)  				pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  			// ハニムーナー  			else if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  				pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  			// シル  			else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  				pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  			// プリーミアム  			else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  				pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  			// シャーク  		}  		// ^どうする？（残り([0-9]*)回）$  		else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDoWithRemain)) {  			// 箱の初期化  			if (operation.OperationType != OperationType.GetHints && operation.OperationType != OperationType.InputNumber) {  				operation = this.Box.StartUnlockMumBox (settings.MumBoxType);  				SetViewData ();  			}  			// 箱の操作  			if (!DoOperation (BoxType.Mum' ref operation)) {  				return false;  			}  			if (operation.OperationType == OperationType.Success)  				SetStatusText ("箱空け成功");  			else if (operation.OperationType == OperationType.Failed)  				SetStatusText ("箱空け失敗");  		}  		// ^もう1度やりますか？(.*)$  		else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionTryAgain)) {  			// 挑戦回数の判定  			this.MumRemainCount--;  			if (this.MumRemainCount <= 0) {  				pol.Api.Dialog.SetDialogIndex (0' true' settings.BaseWait);  				// あきらめる  				SetStatusText ("規定回数に達したので、MUM箱空けを終了しました。");  				break;  			}  			if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  				pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  				// 部屋縷度で再挑戦する  			}  			else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  				pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  				// ギルで再挑戦する  			}  		}  	}  	Thread.Sleep (settings.BaseWait);  }  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: while (!this.IsCancelling) {  	if (pol.Api.Menu.IsMenuOpen) {  		// どうする？  		if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDo)) {  			if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  				pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  				// 同盟戦績で挑戦する  			}  			else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  				pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  				// ギルで挑戦する  			}  		}  		// 難易度を選択してください((.*):([0-9]*))  		if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionSelectLevel)) {  			if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Bayld20)  				pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  			// ピジョン  			else if (settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Bayld40)  				pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  			// ハニムーナー  			else if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  				pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  			// シル  			else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  				pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  			// プリーミアム  			else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  				pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  			// シャーク  		}  		// ^どうする？（残り([0-9]*)回）$  		else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDoWithRemain)) {  			// 箱の初期化  			if (operation.OperationType != OperationType.GetHints && operation.OperationType != OperationType.InputNumber) {  				operation = this.Box.StartUnlockMumBox (settings.MumBoxType);  				SetViewData ();  			}  			// 箱の操作  			if (!DoOperation (BoxType.Mum' ref operation)) {  				return false;  			}  			if (operation.OperationType == OperationType.Success)  				SetStatusText ("箱空け成功");  			else if (operation.OperationType == OperationType.Failed)  				SetStatusText ("箱空け失敗");  		}  		// ^もう1度やりますか？(.*)$  		else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionTryAgain)) {  			// 挑戦回数の判定  			this.MumRemainCount--;  			if (this.MumRemainCount <= 0) {  				pol.Api.Dialog.SetDialogIndex (0' true' settings.BaseWait);  				// あきらめる  				SetStatusText ("規定回数に達したので、MUM箱空けを終了しました。");  				break;  			}  			if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  				pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  				// 部屋縷度で再挑戦する  			}  			else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  				pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  				// ギルで再挑戦する  			}  		}  	}  	Thread.Sleep (settings.BaseWait);  }  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: while (!this.IsCancelling) {  	if (pol.Api.Menu.IsMenuOpen) {  		// どうする？  		if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDo)) {  			if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  				pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  				// 同盟戦績で挑戦する  			}  			else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  				pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  				// ギルで挑戦する  			}  		}  		// 難易度を選択してください((.*):([0-9]*))  		if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionSelectLevel)) {  			if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Bayld20)  				pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  			// ピジョン  			else if (settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Bayld40)  				pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  			// ハニムーナー  			else if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  				pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  			// シル  			else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  				pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  			// プリーミアム  			else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  				pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  			// シャーク  		}  		// ^どうする？（残り([0-9]*)回）$  		else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDoWithRemain)) {  			// 箱の初期化  			if (operation.OperationType != OperationType.GetHints && operation.OperationType != OperationType.InputNumber) {  				operation = this.Box.StartUnlockMumBox (settings.MumBoxType);  				SetViewData ();  			}  			// 箱の操作  			if (!DoOperation (BoxType.Mum' ref operation)) {  				return false;  			}  			if (operation.OperationType == OperationType.Success)  				SetStatusText ("箱空け成功");  			else if (operation.OperationType == OperationType.Failed)  				SetStatusText ("箱空け失敗");  		}  		// ^もう1度やりますか？(.*)$  		else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionTryAgain)) {  			// 挑戦回数の判定  			this.MumRemainCount--;  			if (this.MumRemainCount <= 0) {  				pol.Api.Dialog.SetDialogIndex (0' true' settings.BaseWait);  				// あきらめる  				SetStatusText ("規定回数に達したので、MUM箱空けを終了しました。");  				break;  			}  			if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  				pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  				// 部屋縷度で再挑戦する  			}  			else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  				pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  				// ギルで再挑戦する  			}  		}  	}  	Thread.Sleep (settings.BaseWait);  }  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: while (!this.IsCancelling) {  	if (pol.Api.Menu.IsMenuOpen) {  		// どうする？  		if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDo)) {  			if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  				pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  				// 同盟戦績で挑戦する  			}  			else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  				pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  				// ギルで挑戦する  			}  		}  		// 難易度を選択してください((.*):([0-9]*))  		if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionSelectLevel)) {  			if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Bayld20)  				pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  			// ピジョン  			else if (settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Bayld40)  				pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  			// ハニムーナー  			else if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  				pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  			// シル  			else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  				pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  			// プリーミアム  			else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  				pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  			// シャーク  		}  		// ^どうする？（残り([0-9]*)回）$  		else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDoWithRemain)) {  			// 箱の初期化  			if (operation.OperationType != OperationType.GetHints && operation.OperationType != OperationType.InputNumber) {  				operation = this.Box.StartUnlockMumBox (settings.MumBoxType);  				SetViewData ();  			}  			// 箱の操作  			if (!DoOperation (BoxType.Mum' ref operation)) {  				return false;  			}  			if (operation.OperationType == OperationType.Success)  				SetStatusText ("箱空け成功");  			else if (operation.OperationType == OperationType.Failed)  				SetStatusText ("箱空け失敗");  		}  		// ^もう1度やりますか？(.*)$  		else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionTryAgain)) {  			// 挑戦回数の判定  			this.MumRemainCount--;  			if (this.MumRemainCount <= 0) {  				pol.Api.Dialog.SetDialogIndex (0' true' settings.BaseWait);  				// あきらめる  				SetStatusText ("規定回数に達したので、MUM箱空けを終了しました。");  				break;  			}  			if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  				pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  				// 部屋縷度で再挑戦する  			}  			else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  				pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  				// ギルで再挑戦する  			}  		}  	}  	Thread.Sleep (settings.BaseWait);  }  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: while (!this.IsCancelling) {  	if (pol.Api.Menu.IsMenuOpen) {  		// どうする？  		if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDo)) {  			if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  				pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  				// 同盟戦績で挑戦する  			}  			else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  				pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  				// ギルで挑戦する  			}  		}  		// 難易度を選択してください((.*):([0-9]*))  		if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionSelectLevel)) {  			if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Bayld20)  				pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  			// ピジョン  			else if (settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Bayld40)  				pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  			// ハニムーナー  			else if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  				pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  			// シル  			else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  				pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  			// プリーミアム  			else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  				pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  			// シャーク  		}  		// ^どうする？（残り([0-9]*)回）$  		else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDoWithRemain)) {  			// 箱の初期化  			if (operation.OperationType != OperationType.GetHints && operation.OperationType != OperationType.InputNumber) {  				operation = this.Box.StartUnlockMumBox (settings.MumBoxType);  				SetViewData ();  			}  			// 箱の操作  			if (!DoOperation (BoxType.Mum' ref operation)) {  				return false;  			}  			if (operation.OperationType == OperationType.Success)  				SetStatusText ("箱空け成功");  			else if (operation.OperationType == OperationType.Failed)  				SetStatusText ("箱空け失敗");  		}  		// ^もう1度やりますか？(.*)$  		else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionTryAgain)) {  			// 挑戦回数の判定  			this.MumRemainCount--;  			if (this.MumRemainCount <= 0) {  				pol.Api.Dialog.SetDialogIndex (0' true' settings.BaseWait);  				// あきらめる  				SetStatusText ("規定回数に達したので、MUM箱空けを終了しました。");  				break;  			}  			if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  				pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  				// 部屋縷度で再挑戦する  			}  			else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  				pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  				// ギルで再挑戦する  			}  		}  	}  	Thread.Sleep (settings.BaseWait);  }  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: if (pol.Api.Menu.IsMenuOpen) {  	// どうする？  	if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDo)) {  		if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  			pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  			// 同盟戦績で挑戦する  		}  		else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  			pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  			// ギルで挑戦する  		}  	}  	// 難易度を選択してください((.*):([0-9]*))  	if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionSelectLevel)) {  		if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Bayld20)  			pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  		// ピジョン  		else if (settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Bayld40)  			pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  		// ハニムーナー  		else if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  			pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  		// シル  		else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  			pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  		// プリーミアム  		else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  			pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  		// シャーク  	}  	// ^どうする？（残り([0-9]*)回）$  	else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDoWithRemain)) {  		// 箱の初期化  		if (operation.OperationType != OperationType.GetHints && operation.OperationType != OperationType.InputNumber) {  			operation = this.Box.StartUnlockMumBox (settings.MumBoxType);  			SetViewData ();  		}  		// 箱の操作  		if (!DoOperation (BoxType.Mum' ref operation)) {  			return false;  		}  		if (operation.OperationType == OperationType.Success)  			SetStatusText ("箱空け成功");  		else if (operation.OperationType == OperationType.Failed)  			SetStatusText ("箱空け失敗");  	}  	// ^もう1度やりますか？(.*)$  	else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionTryAgain)) {  		// 挑戦回数の判定  		this.MumRemainCount--;  		if (this.MumRemainCount <= 0) {  			pol.Api.Dialog.SetDialogIndex (0' true' settings.BaseWait);  			// あきらめる  			SetStatusText ("規定回数に達したので、MUM箱空けを終了しました。");  			break;  		}  		if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  			pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  			// 部屋縷度で再挑戦する  		}  		else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  			pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  			// ギルで再挑戦する  		}  	}  }  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: if (pol.Api.Menu.IsMenuOpen) {  	// どうする？  	if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDo)) {  		if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  			pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  			// 同盟戦績で挑戦する  		}  		else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  			pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  			// ギルで挑戦する  		}  	}  	// 難易度を選択してください((.*):([0-9]*))  	if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionSelectLevel)) {  		if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Bayld20)  			pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  		// ピジョン  		else if (settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Bayld40)  			pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  		// ハニムーナー  		else if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  			pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  		// シル  		else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  			pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  		// プリーミアム  		else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  			pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  		// シャーク  	}  	// ^どうする？（残り([0-9]*)回）$  	else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDoWithRemain)) {  		// 箱の初期化  		if (operation.OperationType != OperationType.GetHints && operation.OperationType != OperationType.InputNumber) {  			operation = this.Box.StartUnlockMumBox (settings.MumBoxType);  			SetViewData ();  		}  		// 箱の操作  		if (!DoOperation (BoxType.Mum' ref operation)) {  			return false;  		}  		if (operation.OperationType == OperationType.Success)  			SetStatusText ("箱空け成功");  		else if (operation.OperationType == OperationType.Failed)  			SetStatusText ("箱空け失敗");  	}  	// ^もう1度やりますか？(.*)$  	else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionTryAgain)) {  		// 挑戦回数の判定  		this.MumRemainCount--;  		if (this.MumRemainCount <= 0) {  			pol.Api.Dialog.SetDialogIndex (0' true' settings.BaseWait);  			// あきらめる  			SetStatusText ("規定回数に達したので、MUM箱空けを終了しました。");  			break;  		}  		if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  			pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  			// 部屋縷度で再挑戦する  		}  		else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  			pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  			// ギルで再挑戦する  		}  	}  }  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: if (pol.Api.Menu.IsMenuOpen) {  	// どうする？  	if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDo)) {  		if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  			pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  			// 同盟戦績で挑戦する  		}  		else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  			pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  			// ギルで挑戦する  		}  	}  	// 難易度を選択してください((.*):([0-9]*))  	if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionSelectLevel)) {  		if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Bayld20)  			pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  		// ピジョン  		else if (settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Bayld40)  			pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  		// ハニムーナー  		else if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  			pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  		// シル  		else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  			pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  		// プリーミアム  		else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  			pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  		// シャーク  	}  	// ^どうする？（残り([0-9]*)回）$  	else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDoWithRemain)) {  		// 箱の初期化  		if (operation.OperationType != OperationType.GetHints && operation.OperationType != OperationType.InputNumber) {  			operation = this.Box.StartUnlockMumBox (settings.MumBoxType);  			SetViewData ();  		}  		// 箱の操作  		if (!DoOperation (BoxType.Mum' ref operation)) {  			return false;  		}  		if (operation.OperationType == OperationType.Success)  			SetStatusText ("箱空け成功");  		else if (operation.OperationType == OperationType.Failed)  			SetStatusText ("箱空け失敗");  	}  	// ^もう1度やりますか？(.*)$  	else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionTryAgain)) {  		// 挑戦回数の判定  		this.MumRemainCount--;  		if (this.MumRemainCount <= 0) {  			pol.Api.Dialog.SetDialogIndex (0' true' settings.BaseWait);  			// あきらめる  			SetStatusText ("規定回数に達したので、MUM箱空けを終了しました。");  			break;  		}  		if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  			pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  			// 部屋縷度で再挑戦する  		}  		else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  			pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  			// ギルで再挑戦する  		}  	}  }  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: if (pol.Api.Menu.IsMenuOpen) {  	// どうする？  	if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDo)) {  		if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  			pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  			// 同盟戦績で挑戦する  		}  		else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  			pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  			// ギルで挑戦する  		}  	}  	// 難易度を選択してください((.*):([0-9]*))  	if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionSelectLevel)) {  		if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Bayld20)  			pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  		// ピジョン  		else if (settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Bayld40)  			pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  		// ハニムーナー  		else if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  			pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  		// シル  		else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  			pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  		// プリーミアム  		else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  			pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  		// シャーク  	}  	// ^どうする？（残り([0-9]*)回）$  	else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDoWithRemain)) {  		// 箱の初期化  		if (operation.OperationType != OperationType.GetHints && operation.OperationType != OperationType.InputNumber) {  			operation = this.Box.StartUnlockMumBox (settings.MumBoxType);  			SetViewData ();  		}  		// 箱の操作  		if (!DoOperation (BoxType.Mum' ref operation)) {  			return false;  		}  		if (operation.OperationType == OperationType.Success)  			SetStatusText ("箱空け成功");  		else if (operation.OperationType == OperationType.Failed)  			SetStatusText ("箱空け失敗");  	}  	// ^もう1度やりますか？(.*)$  	else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionTryAgain)) {  		// 挑戦回数の判定  		this.MumRemainCount--;  		if (this.MumRemainCount <= 0) {  			pol.Api.Dialog.SetDialogIndex (0' true' settings.BaseWait);  			// あきらめる  			SetStatusText ("規定回数に達したので、MUM箱空けを終了しました。");  			break;  		}  		if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  			pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  			// 部屋縷度で再挑戦する  		}  		else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  			pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  			// ギルで再挑戦する  		}  	}  }  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: if (pol.Api.Menu.IsMenuOpen) {  	// どうする？  	if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDo)) {  		if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  			pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  			// 同盟戦績で挑戦する  		}  		else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  			pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  			// ギルで挑戦する  		}  	}  	// 難易度を選択してください((.*):([0-9]*))  	if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionSelectLevel)) {  		if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Bayld20)  			pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  		// ピジョン  		else if (settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Bayld40)  			pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  		// ハニムーナー  		else if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  			pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  		// シル  		else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  			pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  		// プリーミアム  		else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  			pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  		// シャーク  	}  	// ^どうする？（残り([0-9]*)回）$  	else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDoWithRemain)) {  		// 箱の初期化  		if (operation.OperationType != OperationType.GetHints && operation.OperationType != OperationType.InputNumber) {  			operation = this.Box.StartUnlockMumBox (settings.MumBoxType);  			SetViewData ();  		}  		// 箱の操作  		if (!DoOperation (BoxType.Mum' ref operation)) {  			return false;  		}  		if (operation.OperationType == OperationType.Success)  			SetStatusText ("箱空け成功");  		else if (operation.OperationType == OperationType.Failed)  			SetStatusText ("箱空け失敗");  	}  	// ^もう1度やりますか？(.*)$  	else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionTryAgain)) {  		// 挑戦回数の判定  		this.MumRemainCount--;  		if (this.MumRemainCount <= 0) {  			pol.Api.Dialog.SetDialogIndex (0' true' settings.BaseWait);  			// あきらめる  			SetStatusText ("規定回数に達したので、MUM箱空けを終了しました。");  			break;  		}  		if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  			pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  			// 部屋縷度で再挑戦する  		}  		else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  			pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  			// ギルで再挑戦する  		}  	}  }  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: if (pol.Api.Menu.IsMenuOpen) {  	// どうする？  	if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDo)) {  		if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  			pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  			// 同盟戦績で挑戦する  		}  		else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  			pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  			// ギルで挑戦する  		}  	}  	// 難易度を選択してください((.*):([0-9]*))  	if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionSelectLevel)) {  		if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Bayld20)  			pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  		// ピジョン  		else if (settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Bayld40)  			pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  		// ハニムーナー  		else if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  			pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  		// シル  		else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  			pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  		// プリーミアム  		else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  			pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  		// シャーク  	}  	// ^どうする？（残り([0-9]*)回）$  	else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDoWithRemain)) {  		// 箱の初期化  		if (operation.OperationType != OperationType.GetHints && operation.OperationType != OperationType.InputNumber) {  			operation = this.Box.StartUnlockMumBox (settings.MumBoxType);  			SetViewData ();  		}  		// 箱の操作  		if (!DoOperation (BoxType.Mum' ref operation)) {  			return false;  		}  		if (operation.OperationType == OperationType.Success)  			SetStatusText ("箱空け成功");  		else if (operation.OperationType == OperationType.Failed)  			SetStatusText ("箱空け失敗");  	}  	// ^もう1度やりますか？(.*)$  	else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionTryAgain)) {  		// 挑戦回数の判定  		this.MumRemainCount--;  		if (this.MumRemainCount <= 0) {  			pol.Api.Dialog.SetDialogIndex (0' true' settings.BaseWait);  			// あきらめる  			SetStatusText ("規定回数に達したので、MUM箱空けを終了しました。");  			break;  		}  		if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  			pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  			// 部屋縷度で再挑戦する  		}  		else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  			pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  			// ギルで再挑戦する  		}  	}  }  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDo)) {  	if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  		pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  		// 同盟戦績で挑戦する  	}  	else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  		pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  		// ギルで挑戦する  	}  }  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  	pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  	// 同盟戦績で挑戦する  }  else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  	pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  	// ギルで挑戦する  }  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  	pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  	// ギルで挑戦する  }  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionSelectLevel)) {  	if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Bayld20)  		pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  	// ピジョン  	else if (settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Bayld40)  		pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  	// ハニムーナー  	else if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  		pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  	// シル  	else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  		pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  	// プリーミアム  	else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  		pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  	// シャーク  }  // ^どうする？（残り([0-9]*)回）$  else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDoWithRemain)) {  	// 箱の初期化  	if (operation.OperationType != OperationType.GetHints && operation.OperationType != OperationType.InputNumber) {  		operation = this.Box.StartUnlockMumBox (settings.MumBoxType);  		SetViewData ();  	}  	// 箱の操作  	if (!DoOperation (BoxType.Mum' ref operation)) {  		return false;  	}  	if (operation.OperationType == OperationType.Success)  		SetStatusText ("箱空け成功");  	else if (operation.OperationType == OperationType.Failed)  		SetStatusText ("箱空け失敗");  }  // ^もう1度やりますか？(.*)$  else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionTryAgain)) {  	// 挑戦回数の判定  	this.MumRemainCount--;  	if (this.MumRemainCount <= 0) {  		pol.Api.Dialog.SetDialogIndex (0' true' settings.BaseWait);  		// あきらめる  		SetStatusText ("規定回数に達したので、MUM箱空けを終了しました。");  		break;  	}  	if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  		pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  		// 部屋縷度で再挑戦する  	}  	else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  		pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  		// ギルで再挑戦する  	}  }  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionSelectLevel)) {  	if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Bayld20)  		pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  	// ピジョン  	else if (settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Bayld40)  		pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  	// ハニムーナー  	else if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  		pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  	// シル  	else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  		pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  	// プリーミアム  	else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  		pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  	// シャーク  }  // ^どうする？（残り([0-9]*)回）$  else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDoWithRemain)) {  	// 箱の初期化  	if (operation.OperationType != OperationType.GetHints && operation.OperationType != OperationType.InputNumber) {  		operation = this.Box.StartUnlockMumBox (settings.MumBoxType);  		SetViewData ();  	}  	// 箱の操作  	if (!DoOperation (BoxType.Mum' ref operation)) {  		return false;  	}  	if (operation.OperationType == OperationType.Success)  		SetStatusText ("箱空け成功");  	else if (operation.OperationType == OperationType.Failed)  		SetStatusText ("箱空け失敗");  }  // ^もう1度やりますか？(.*)$  else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionTryAgain)) {  	// 挑戦回数の判定  	this.MumRemainCount--;  	if (this.MumRemainCount <= 0) {  		pol.Api.Dialog.SetDialogIndex (0' true' settings.BaseWait);  		// あきらめる  		SetStatusText ("規定回数に達したので、MUM箱空けを終了しました。");  		break;  	}  	if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  		pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  		// 部屋縷度で再挑戦する  	}  	else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  		pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  		// ギルで再挑戦する  	}  }  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionSelectLevel)) {  	if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Bayld20)  		pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  	// ピジョン  	else if (settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Bayld40)  		pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  	// ハニムーナー  	else if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  		pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  	// シル  	else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  		pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  	// プリーミアム  	else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  		pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  	// シャーク  }  // ^どうする？（残り([0-9]*)回）$  else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDoWithRemain)) {  	// 箱の初期化  	if (operation.OperationType != OperationType.GetHints && operation.OperationType != OperationType.InputNumber) {  		operation = this.Box.StartUnlockMumBox (settings.MumBoxType);  		SetViewData ();  	}  	// 箱の操作  	if (!DoOperation (BoxType.Mum' ref operation)) {  		return false;  	}  	if (operation.OperationType == OperationType.Success)  		SetStatusText ("箱空け成功");  	else if (operation.OperationType == OperationType.Failed)  		SetStatusText ("箱空け失敗");  }  // ^もう1度やりますか？(.*)$  else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionTryAgain)) {  	// 挑戦回数の判定  	this.MumRemainCount--;  	if (this.MumRemainCount <= 0) {  		pol.Api.Dialog.SetDialogIndex (0' true' settings.BaseWait);  		// あきらめる  		SetStatusText ("規定回数に達したので、MUM箱空けを終了しました。");  		break;  	}  	if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  		pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  		// 部屋縷度で再挑戦する  	}  	else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  		pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  		// ギルで再挑戦する  	}  }  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionSelectLevel)) {  	if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Bayld20)  		pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  	// ピジョン  	else if (settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Bayld40)  		pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  	// ハニムーナー  	else if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  		pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  	// シル  	else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  		pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  	// プリーミアム  	else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  		pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  	// シャーク  }  // ^どうする？（残り([0-9]*)回）$  else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDoWithRemain)) {  	// 箱の初期化  	if (operation.OperationType != OperationType.GetHints && operation.OperationType != OperationType.InputNumber) {  		operation = this.Box.StartUnlockMumBox (settings.MumBoxType);  		SetViewData ();  	}  	// 箱の操作  	if (!DoOperation (BoxType.Mum' ref operation)) {  		return false;  	}  	if (operation.OperationType == OperationType.Success)  		SetStatusText ("箱空け成功");  	else if (operation.OperationType == OperationType.Failed)  		SetStatusText ("箱空け失敗");  }  // ^もう1度やりますか？(.*)$  else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionTryAgain)) {  	// 挑戦回数の判定  	this.MumRemainCount--;  	if (this.MumRemainCount <= 0) {  		pol.Api.Dialog.SetDialogIndex (0' true' settings.BaseWait);  		// あきらめる  		SetStatusText ("規定回数に達したので、MUM箱空けを終了しました。");  		break;  	}  	if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  		pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  		// 部屋縷度で再挑戦する  	}  	else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  		pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  		// ギルで再挑戦する  	}  }  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionSelectLevel)) {  	if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Bayld20)  		pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  	// ピジョン  	else if (settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Bayld40)  		pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  	// ハニムーナー  	else if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  		pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  	// シル  	else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  		pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  	// プリーミアム  	else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  		pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  	// シャーク  }  // ^どうする？（残り([0-9]*)回）$  else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDoWithRemain)) {  	// 箱の初期化  	if (operation.OperationType != OperationType.GetHints && operation.OperationType != OperationType.InputNumber) {  		operation = this.Box.StartUnlockMumBox (settings.MumBoxType);  		SetViewData ();  	}  	// 箱の操作  	if (!DoOperation (BoxType.Mum' ref operation)) {  		return false;  	}  	if (operation.OperationType == OperationType.Success)  		SetStatusText ("箱空け成功");  	else if (operation.OperationType == OperationType.Failed)  		SetStatusText ("箱空け失敗");  }  // ^もう1度やりますか？(.*)$  else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionTryAgain)) {  	// 挑戦回数の判定  	this.MumRemainCount--;  	if (this.MumRemainCount <= 0) {  		pol.Api.Dialog.SetDialogIndex (0' true' settings.BaseWait);  		// あきらめる  		SetStatusText ("規定回数に達したので、MUM箱空けを終了しました。");  		break;  	}  	if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  		pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  		// 部屋縷度で再挑戦する  	}  	else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  		pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  		// ギルで再挑戦する  	}  }  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Bayld20)  	pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  // ピジョン  else if (settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Bayld40)  	pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  // ハニムーナー  else if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  	pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  // シル  else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  	pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  // プリーミアム  else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  	pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Bayld20)  	pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  // ピジョン  else if (settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Bayld40)  	pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  // ハニムーナー  else if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  	pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  // シル  else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  	pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  // プリーミアム  else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  	pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Bayld20)  	pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  // ピジョン  else if (settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Bayld40)  	pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  // ハニムーナー  else if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  	pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  // シル  else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  	pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  // プリーミアム  else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  	pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Bayld20)  	pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  // ピジョン  else if (settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Bayld40)  	pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  // ハニムーナー  else if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  	pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  // シル  else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  	pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  // プリーミアム  else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  	pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: if (settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Bayld40)  	pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  // ハニムーナー  else if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  	pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  // シル  else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  	pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  // プリーミアム  else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  	pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: if (settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Bayld40)  	pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  // ハニムーナー  else if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  	pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  // シル  else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  	pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  // プリーミアム  else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  	pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: if (settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Bayld40)  	pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  // ハニムーナー  else if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  	pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  // シル  else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  	pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  // プリーミアム  else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  	pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: if (settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Bayld40)  	pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  // ハニムーナー  else if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  	pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  // シル  else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  	pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  // プリーミアム  else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  	pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  	pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  // シル  else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  	pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  // プリーミアム  else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  	pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  	pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  // シル  else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  	pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  // プリーミアム  else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  	pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: if (settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Bayld60)  	pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  // シル  else if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  	pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  // プリーミアム  else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  	pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: pol.Api.Dialog.SetDialogIndex (3' true' settings.BaseWait);  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  	pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  // プリーミアム  else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  	pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: if (settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Bayld80)  	pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  // プリーミアム  else if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  	pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: pol.Api.Dialog.SetDialogIndex (4' true' settings.BaseWait);  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: if (settings.MumBoxType == MumType.Gil500 || settings.MumBoxType == MumType.Bayld100)  	pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: pol.Api.Dialog.SetDialogIndex (5' true' settings.BaseWait);  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionWhatWillYouDoWithRemain)) {  	// 箱の初期化  	if (operation.OperationType != OperationType.GetHints && operation.OperationType != OperationType.InputNumber) {  		operation = this.Box.StartUnlockMumBox (settings.MumBoxType);  		SetViewData ();  	}  	// 箱の操作  	if (!DoOperation (BoxType.Mum' ref operation)) {  		return false;  	}  	if (operation.OperationType == OperationType.Success)  		SetStatusText ("箱空け成功");  	else if (operation.OperationType == OperationType.Failed)  		SetStatusText ("箱空け失敗");  }  // ^もう1度やりますか？(.*)$  else if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionTryAgain)) {  	// 挑戦回数の判定  	this.MumRemainCount--;  	if (this.MumRemainCount <= 0) {  		pol.Api.Dialog.SetDialogIndex (0' true' settings.BaseWait);  		// あきらめる  		SetStatusText ("規定回数に達したので、MUM箱空けを終了しました。");  		break;  	}  	if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  		pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  		// 部屋縷度で再挑戦する  	}  	else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  		pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  		// ギルで再挑戦する  	}  }  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: if (EliteAPIWrapper.Utils.RegexUtil.IsMatch (pol.Api.Dialog.Question' Constants.MumQuestionTryAgain)) {  	// 挑戦回数の判定  	this.MumRemainCount--;  	if (this.MumRemainCount <= 0) {  		pol.Api.Dialog.SetDialogIndex (0' true' settings.BaseWait);  		// あきらめる  		SetStatusText ("規定回数に達したので、MUM箱空けを終了しました。");  		break;  	}  	if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  		pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  		// 部屋縷度で再挑戦する  	}  	else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  		pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  		// ギルで再挑戦する  	}  }  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: if (settings.MumBoxType == MumType.Bayld20 || settings.MumBoxType == MumType.Bayld40 || settings.MumBoxType == MumType.Bayld60 || settings.MumBoxType == MumType.Bayld80 || settings.MumBoxType == MumType.Bayld100) {  	pol.Api.Dialog.SetDialogIndex (1' true' settings.BaseWait);  	// 部屋縷度で再挑戦する  }  else if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  	pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  	// ギルで再挑戦する  }  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: if (settings.MumBoxType == MumType.Gil100 || settings.MumBoxType == MumType.Gil200 || settings.MumBoxType == MumType.Gil300 || settings.MumBoxType == MumType.Gil400 || settings.MumBoxType == MumType.Gil500) {  	pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  	// ギルで再挑戦する  }  
Magic Number,BoxUnlocker.Models,Unlocker,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Unlocker.cs,OpenMumBox,The following statement contains a magic number: pol.Api.Dialog.SetDialogIndex (2' true' settings.BaseWait);  
Magic Number,BoxUnlocker.Models,Box,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Box.cs,GetInitValidNumbers,The following statement contains a magic number: if (iBoxType == BoxType.Field) {  	from = 10;  	to = 99;  }  else if (iBoxType == BoxType.Mum) {  	from = MumConfigMap [iMumType [0]].NumberFrom;  	to = MumConfigMap [iMumType [0]].NumberTo;  }  
Magic Number,BoxUnlocker.Models,Box,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Box.cs,GetInitValidNumbers,The following statement contains a magic number: if (iBoxType == BoxType.Field) {  	from = 10;  	to = 99;  }  else if (iBoxType == BoxType.Mum) {  	from = MumConfigMap [iMumType [0]].NumberFrom;  	to = MumConfigMap [iMumType [0]].NumberTo;  }  
Magic Number,BoxUnlocker.Models,Box,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Box.cs,GetInitValidNumbers,The following statement contains a magic number: from = 10;  
Magic Number,BoxUnlocker.Models,Box,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Box.cs,GetInitValidNumbers,The following statement contains a magic number: to = 99;  
Magic Number,BoxUnlocker.Models,Box,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Box.cs,GetNextOperation,The following statement contains a magic number: for (int i = 1; i <= remainCount; i++) {  	if (i == 1)  		inputOnlyOkCount = 1;  	else  		inputOnlyOkCount = inputOnlyOkCount * 2 + 1;  }  
Magic Number,BoxUnlocker.Models,Box,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Box.cs,GetNextOperation,The following statement contains a magic number: if (i == 1)  	inputOnlyOkCount = 1;  else  	inputOnlyOkCount = inputOnlyOkCount * 2 + 1;  
Magic Number,BoxUnlocker.Models,Box,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Box.cs,GetNextOperation,The following statement contains a magic number: inputOnlyOkCount = inputOnlyOkCount * 2 + 1;  
Magic Number,BoxUnlocker.Models,Box,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Box.cs,NarrowingValidNumbers,The following statement contains a magic number: foreach (var v in this.ValidNumbers) {  	switch (iHintType) {  	case HintType.None:  		// ヒントでは無かった時用  		return false;  	case HintType.Higher:  		// カギの数字は([0-9]*)より大きいようだ……。  		if (iHintValue.Count != 1)  			return false;  		if (lastOperationType == OperationType.InputNumber) {  			if (!(v > int.Parse (iHintValue [0])))  				validNumbers.Remove (v);  		}  		else {  			if (!(v >= int.Parse (iHintValue [0])))  				validNumbers.Remove (v);  		}  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.Lower:  		// カギの数字は([0-9]*)より小さいようだ……。  		if (iHintValue.Count != 1)  			return false;  		if (lastOperationType == OperationType.InputNumber) {  			if (!(v < int.Parse (iHintValue [0])))  				validNumbers.Remove (v);  		}  		else {  			if (!(v <= int.Parse (iHintValue [0])))  				validNumbers.Remove (v);  		}  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.Between:  		// カギの数字は([0-9]*)より大きく、([0-9]*)より小さいようだ……。  		if (iHintValue.Count != 2)  			return false;  		if (!(v >= int.Parse (iHintValue [0]) && v <= int.Parse (iHintValue [1])))  			validNumbers.Remove (v);  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.OneOfThem:  		// カギの数字の([0-9])桁目は([0-9])か([0-9])か([0-9])のどれかのようだ……。  		if (iHintValue.Count != 4)  			return false;  		dig = (iHintValue [0] == "1") ? 1 : 0;  		if (!(v.ToString ().Substring (dig' 1) == iHintValue [1] || v.ToString ().Substring (dig' 1) == iHintValue [2] || v.ToString ().Substring (dig' 1) == iHintValue [3]))  			validNumbers.Remove (v);  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.Either:  		// カギの2桁の数字のどちらかは([0-9])のようだ……。  		if (iHintValue.Count != 1)  			return false;  		if (!(v.ToString ().IndexOf (iHintValue [0]) >= 0))  			validNumbers.Remove (v);  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.Even:  		// カギの数字の([0-9])桁目は偶数のようだ……。  		if (iHintValue.Count != 1)  			return false;  		dig = (iHintValue [0] == "1") ? 1 : 0;  		if (!(int.Parse (v.ToString ().Substring (dig' 1)) % 2 == 0))  			validNumbers.Remove (v);  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.Odd:  		// カギの数字の([0-9])桁目は奇数のようだ……。  		if (iHintValue.Count != 1)  			return false;  		dig = (iHintValue [0] == "1") ? 1 : 0;  		if (!(int.Parse (v.ToString ().Substring (dig' 1)) % 2 == 1))  			validNumbers.Remove (v);  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.NoHint:  		// 何も分からなかった……。  		break;  	case HintType.Success:  		// (.*)は、開錠に成功した！  		break;  	case HintType.Failed:  		// (.*)は、開錠に失敗した……。  		break;  	default:  		return false;  	}  }  
Magic Number,BoxUnlocker.Models,Box,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Box.cs,NarrowingValidNumbers,The following statement contains a magic number: foreach (var v in this.ValidNumbers) {  	switch (iHintType) {  	case HintType.None:  		// ヒントでは無かった時用  		return false;  	case HintType.Higher:  		// カギの数字は([0-9]*)より大きいようだ……。  		if (iHintValue.Count != 1)  			return false;  		if (lastOperationType == OperationType.InputNumber) {  			if (!(v > int.Parse (iHintValue [0])))  				validNumbers.Remove (v);  		}  		else {  			if (!(v >= int.Parse (iHintValue [0])))  				validNumbers.Remove (v);  		}  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.Lower:  		// カギの数字は([0-9]*)より小さいようだ……。  		if (iHintValue.Count != 1)  			return false;  		if (lastOperationType == OperationType.InputNumber) {  			if (!(v < int.Parse (iHintValue [0])))  				validNumbers.Remove (v);  		}  		else {  			if (!(v <= int.Parse (iHintValue [0])))  				validNumbers.Remove (v);  		}  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.Between:  		// カギの数字は([0-9]*)より大きく、([0-9]*)より小さいようだ……。  		if (iHintValue.Count != 2)  			return false;  		if (!(v >= int.Parse (iHintValue [0]) && v <= int.Parse (iHintValue [1])))  			validNumbers.Remove (v);  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.OneOfThem:  		// カギの数字の([0-9])桁目は([0-9])か([0-9])か([0-9])のどれかのようだ……。  		if (iHintValue.Count != 4)  			return false;  		dig = (iHintValue [0] == "1") ? 1 : 0;  		if (!(v.ToString ().Substring (dig' 1) == iHintValue [1] || v.ToString ().Substring (dig' 1) == iHintValue [2] || v.ToString ().Substring (dig' 1) == iHintValue [3]))  			validNumbers.Remove (v);  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.Either:  		// カギの2桁の数字のどちらかは([0-9])のようだ……。  		if (iHintValue.Count != 1)  			return false;  		if (!(v.ToString ().IndexOf (iHintValue [0]) >= 0))  			validNumbers.Remove (v);  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.Even:  		// カギの数字の([0-9])桁目は偶数のようだ……。  		if (iHintValue.Count != 1)  			return false;  		dig = (iHintValue [0] == "1") ? 1 : 0;  		if (!(int.Parse (v.ToString ().Substring (dig' 1)) % 2 == 0))  			validNumbers.Remove (v);  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.Odd:  		// カギの数字の([0-9])桁目は奇数のようだ……。  		if (iHintValue.Count != 1)  			return false;  		dig = (iHintValue [0] == "1") ? 1 : 0;  		if (!(int.Parse (v.ToString ().Substring (dig' 1)) % 2 == 1))  			validNumbers.Remove (v);  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.NoHint:  		// 何も分からなかった……。  		break;  	case HintType.Success:  		// (.*)は、開錠に成功した！  		break;  	case HintType.Failed:  		// (.*)は、開錠に失敗した……。  		break;  	default:  		return false;  	}  }  
Magic Number,BoxUnlocker.Models,Box,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Box.cs,NarrowingValidNumbers,The following statement contains a magic number: foreach (var v in this.ValidNumbers) {  	switch (iHintType) {  	case HintType.None:  		// ヒントでは無かった時用  		return false;  	case HintType.Higher:  		// カギの数字は([0-9]*)より大きいようだ……。  		if (iHintValue.Count != 1)  			return false;  		if (lastOperationType == OperationType.InputNumber) {  			if (!(v > int.Parse (iHintValue [0])))  				validNumbers.Remove (v);  		}  		else {  			if (!(v >= int.Parse (iHintValue [0])))  				validNumbers.Remove (v);  		}  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.Lower:  		// カギの数字は([0-9]*)より小さいようだ……。  		if (iHintValue.Count != 1)  			return false;  		if (lastOperationType == OperationType.InputNumber) {  			if (!(v < int.Parse (iHintValue [0])))  				validNumbers.Remove (v);  		}  		else {  			if (!(v <= int.Parse (iHintValue [0])))  				validNumbers.Remove (v);  		}  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.Between:  		// カギの数字は([0-9]*)より大きく、([0-9]*)より小さいようだ……。  		if (iHintValue.Count != 2)  			return false;  		if (!(v >= int.Parse (iHintValue [0]) && v <= int.Parse (iHintValue [1])))  			validNumbers.Remove (v);  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.OneOfThem:  		// カギの数字の([0-9])桁目は([0-9])か([0-9])か([0-9])のどれかのようだ……。  		if (iHintValue.Count != 4)  			return false;  		dig = (iHintValue [0] == "1") ? 1 : 0;  		if (!(v.ToString ().Substring (dig' 1) == iHintValue [1] || v.ToString ().Substring (dig' 1) == iHintValue [2] || v.ToString ().Substring (dig' 1) == iHintValue [3]))  			validNumbers.Remove (v);  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.Either:  		// カギの2桁の数字のどちらかは([0-9])のようだ……。  		if (iHintValue.Count != 1)  			return false;  		if (!(v.ToString ().IndexOf (iHintValue [0]) >= 0))  			validNumbers.Remove (v);  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.Even:  		// カギの数字の([0-9])桁目は偶数のようだ……。  		if (iHintValue.Count != 1)  			return false;  		dig = (iHintValue [0] == "1") ? 1 : 0;  		if (!(int.Parse (v.ToString ().Substring (dig' 1)) % 2 == 0))  			validNumbers.Remove (v);  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.Odd:  		// カギの数字の([0-9])桁目は奇数のようだ……。  		if (iHintValue.Count != 1)  			return false;  		dig = (iHintValue [0] == "1") ? 1 : 0;  		if (!(int.Parse (v.ToString ().Substring (dig' 1)) % 2 == 1))  			validNumbers.Remove (v);  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.NoHint:  		// 何も分からなかった……。  		break;  	case HintType.Success:  		// (.*)は、開錠に成功した！  		break;  	case HintType.Failed:  		// (.*)は、開錠に失敗した……。  		break;  	default:  		return false;  	}  }  
Magic Number,BoxUnlocker.Models,Box,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Box.cs,NarrowingValidNumbers,The following statement contains a magic number: foreach (var v in this.ValidNumbers) {  	switch (iHintType) {  	case HintType.None:  		// ヒントでは無かった時用  		return false;  	case HintType.Higher:  		// カギの数字は([0-9]*)より大きいようだ……。  		if (iHintValue.Count != 1)  			return false;  		if (lastOperationType == OperationType.InputNumber) {  			if (!(v > int.Parse (iHintValue [0])))  				validNumbers.Remove (v);  		}  		else {  			if (!(v >= int.Parse (iHintValue [0])))  				validNumbers.Remove (v);  		}  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.Lower:  		// カギの数字は([0-9]*)より小さいようだ……。  		if (iHintValue.Count != 1)  			return false;  		if (lastOperationType == OperationType.InputNumber) {  			if (!(v < int.Parse (iHintValue [0])))  				validNumbers.Remove (v);  		}  		else {  			if (!(v <= int.Parse (iHintValue [0])))  				validNumbers.Remove (v);  		}  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.Between:  		// カギの数字は([0-9]*)より大きく、([0-9]*)より小さいようだ……。  		if (iHintValue.Count != 2)  			return false;  		if (!(v >= int.Parse (iHintValue [0]) && v <= int.Parse (iHintValue [1])))  			validNumbers.Remove (v);  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.OneOfThem:  		// カギの数字の([0-9])桁目は([0-9])か([0-9])か([0-9])のどれかのようだ……。  		if (iHintValue.Count != 4)  			return false;  		dig = (iHintValue [0] == "1") ? 1 : 0;  		if (!(v.ToString ().Substring (dig' 1) == iHintValue [1] || v.ToString ().Substring (dig' 1) == iHintValue [2] || v.ToString ().Substring (dig' 1) == iHintValue [3]))  			validNumbers.Remove (v);  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.Either:  		// カギの2桁の数字のどちらかは([0-9])のようだ……。  		if (iHintValue.Count != 1)  			return false;  		if (!(v.ToString ().IndexOf (iHintValue [0]) >= 0))  			validNumbers.Remove (v);  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.Even:  		// カギの数字の([0-9])桁目は偶数のようだ……。  		if (iHintValue.Count != 1)  			return false;  		dig = (iHintValue [0] == "1") ? 1 : 0;  		if (!(int.Parse (v.ToString ().Substring (dig' 1)) % 2 == 0))  			validNumbers.Remove (v);  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.Odd:  		// カギの数字の([0-9])桁目は奇数のようだ……。  		if (iHintValue.Count != 1)  			return false;  		dig = (iHintValue [0] == "1") ? 1 : 0;  		if (!(int.Parse (v.ToString ().Substring (dig' 1)) % 2 == 1))  			validNumbers.Remove (v);  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.NoHint:  		// 何も分からなかった……。  		break;  	case HintType.Success:  		// (.*)は、開錠に成功した！  		break;  	case HintType.Failed:  		// (.*)は、開錠に失敗した……。  		break;  	default:  		return false;  	}  }  
Magic Number,BoxUnlocker.Models,Box,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Box.cs,NarrowingValidNumbers,The following statement contains a magic number: foreach (var v in this.ValidNumbers) {  	switch (iHintType) {  	case HintType.None:  		// ヒントでは無かった時用  		return false;  	case HintType.Higher:  		// カギの数字は([0-9]*)より大きいようだ……。  		if (iHintValue.Count != 1)  			return false;  		if (lastOperationType == OperationType.InputNumber) {  			if (!(v > int.Parse (iHintValue [0])))  				validNumbers.Remove (v);  		}  		else {  			if (!(v >= int.Parse (iHintValue [0])))  				validNumbers.Remove (v);  		}  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.Lower:  		// カギの数字は([0-9]*)より小さいようだ……。  		if (iHintValue.Count != 1)  			return false;  		if (lastOperationType == OperationType.InputNumber) {  			if (!(v < int.Parse (iHintValue [0])))  				validNumbers.Remove (v);  		}  		else {  			if (!(v <= int.Parse (iHintValue [0])))  				validNumbers.Remove (v);  		}  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.Between:  		// カギの数字は([0-9]*)より大きく、([0-9]*)より小さいようだ……。  		if (iHintValue.Count != 2)  			return false;  		if (!(v >= int.Parse (iHintValue [0]) && v <= int.Parse (iHintValue [1])))  			validNumbers.Remove (v);  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.OneOfThem:  		// カギの数字の([0-9])桁目は([0-9])か([0-9])か([0-9])のどれかのようだ……。  		if (iHintValue.Count != 4)  			return false;  		dig = (iHintValue [0] == "1") ? 1 : 0;  		if (!(v.ToString ().Substring (dig' 1) == iHintValue [1] || v.ToString ().Substring (dig' 1) == iHintValue [2] || v.ToString ().Substring (dig' 1) == iHintValue [3]))  			validNumbers.Remove (v);  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.Either:  		// カギの2桁の数字のどちらかは([0-9])のようだ……。  		if (iHintValue.Count != 1)  			return false;  		if (!(v.ToString ().IndexOf (iHintValue [0]) >= 0))  			validNumbers.Remove (v);  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.Even:  		// カギの数字の([0-9])桁目は偶数のようだ……。  		if (iHintValue.Count != 1)  			return false;  		dig = (iHintValue [0] == "1") ? 1 : 0;  		if (!(int.Parse (v.ToString ().Substring (dig' 1)) % 2 == 0))  			validNumbers.Remove (v);  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.Odd:  		// カギの数字の([0-9])桁目は奇数のようだ……。  		if (iHintValue.Count != 1)  			return false;  		dig = (iHintValue [0] == "1") ? 1 : 0;  		if (!(int.Parse (v.ToString ().Substring (dig' 1)) % 2 == 1))  			validNumbers.Remove (v);  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.NoHint:  		// 何も分からなかった……。  		break;  	case HintType.Success:  		// (.*)は、開錠に成功した！  		break;  	case HintType.Failed:  		// (.*)は、開錠に失敗した……。  		break;  	default:  		return false;  	}  }  
Magic Number,BoxUnlocker.Models,Box,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Box.cs,NarrowingValidNumbers,The following statement contains a magic number: foreach (var v in this.ValidNumbers) {  	switch (iHintType) {  	case HintType.None:  		// ヒントでは無かった時用  		return false;  	case HintType.Higher:  		// カギの数字は([0-9]*)より大きいようだ……。  		if (iHintValue.Count != 1)  			return false;  		if (lastOperationType == OperationType.InputNumber) {  			if (!(v > int.Parse (iHintValue [0])))  				validNumbers.Remove (v);  		}  		else {  			if (!(v >= int.Parse (iHintValue [0])))  				validNumbers.Remove (v);  		}  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.Lower:  		// カギの数字は([0-9]*)より小さいようだ……。  		if (iHintValue.Count != 1)  			return false;  		if (lastOperationType == OperationType.InputNumber) {  			if (!(v < int.Parse (iHintValue [0])))  				validNumbers.Remove (v);  		}  		else {  			if (!(v <= int.Parse (iHintValue [0])))  				validNumbers.Remove (v);  		}  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.Between:  		// カギの数字は([0-9]*)より大きく、([0-9]*)より小さいようだ……。  		if (iHintValue.Count != 2)  			return false;  		if (!(v >= int.Parse (iHintValue [0]) && v <= int.Parse (iHintValue [1])))  			validNumbers.Remove (v);  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.OneOfThem:  		// カギの数字の([0-9])桁目は([0-9])か([0-9])か([0-9])のどれかのようだ……。  		if (iHintValue.Count != 4)  			return false;  		dig = (iHintValue [0] == "1") ? 1 : 0;  		if (!(v.ToString ().Substring (dig' 1) == iHintValue [1] || v.ToString ().Substring (dig' 1) == iHintValue [2] || v.ToString ().Substring (dig' 1) == iHintValue [3]))  			validNumbers.Remove (v);  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.Either:  		// カギの2桁の数字のどちらかは([0-9])のようだ……。  		if (iHintValue.Count != 1)  			return false;  		if (!(v.ToString ().IndexOf (iHintValue [0]) >= 0))  			validNumbers.Remove (v);  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.Even:  		// カギの数字の([0-9])桁目は偶数のようだ……。  		if (iHintValue.Count != 1)  			return false;  		dig = (iHintValue [0] == "1") ? 1 : 0;  		if (!(int.Parse (v.ToString ().Substring (dig' 1)) % 2 == 0))  			validNumbers.Remove (v);  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.Odd:  		// カギの数字の([0-9])桁目は奇数のようだ……。  		if (iHintValue.Count != 1)  			return false;  		dig = (iHintValue [0] == "1") ? 1 : 0;  		if (!(int.Parse (v.ToString ().Substring (dig' 1)) % 2 == 1))  			validNumbers.Remove (v);  		RaisePropertyChanged ("ValidNumbersForDisplay");  		break;  	case HintType.NoHint:  		// 何も分からなかった……。  		break;  	case HintType.Success:  		// (.*)は、開錠に成功した！  		break;  	case HintType.Failed:  		// (.*)は、開錠に失敗した……。  		break;  	default:  		return false;  	}  }  
Magic Number,BoxUnlocker.Models,Box,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Box.cs,NarrowingValidNumbers,The following statement contains a magic number: switch (iHintType) {  case HintType.None:  	// ヒントでは無かった時用  	return false;  case HintType.Higher:  	// カギの数字は([0-9]*)より大きいようだ……。  	if (iHintValue.Count != 1)  		return false;  	if (lastOperationType == OperationType.InputNumber) {  		if (!(v > int.Parse (iHintValue [0])))  			validNumbers.Remove (v);  	}  	else {  		if (!(v >= int.Parse (iHintValue [0])))  			validNumbers.Remove (v);  	}  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.Lower:  	// カギの数字は([0-9]*)より小さいようだ……。  	if (iHintValue.Count != 1)  		return false;  	if (lastOperationType == OperationType.InputNumber) {  		if (!(v < int.Parse (iHintValue [0])))  			validNumbers.Remove (v);  	}  	else {  		if (!(v <= int.Parse (iHintValue [0])))  			validNumbers.Remove (v);  	}  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.Between:  	// カギの数字は([0-9]*)より大きく、([0-9]*)より小さいようだ……。  	if (iHintValue.Count != 2)  		return false;  	if (!(v >= int.Parse (iHintValue [0]) && v <= int.Parse (iHintValue [1])))  		validNumbers.Remove (v);  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.OneOfThem:  	// カギの数字の([0-9])桁目は([0-9])か([0-9])か([0-9])のどれかのようだ……。  	if (iHintValue.Count != 4)  		return false;  	dig = (iHintValue [0] == "1") ? 1 : 0;  	if (!(v.ToString ().Substring (dig' 1) == iHintValue [1] || v.ToString ().Substring (dig' 1) == iHintValue [2] || v.ToString ().Substring (dig' 1) == iHintValue [3]))  		validNumbers.Remove (v);  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.Either:  	// カギの2桁の数字のどちらかは([0-9])のようだ……。  	if (iHintValue.Count != 1)  		return false;  	if (!(v.ToString ().IndexOf (iHintValue [0]) >= 0))  		validNumbers.Remove (v);  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.Even:  	// カギの数字の([0-9])桁目は偶数のようだ……。  	if (iHintValue.Count != 1)  		return false;  	dig = (iHintValue [0] == "1") ? 1 : 0;  	if (!(int.Parse (v.ToString ().Substring (dig' 1)) % 2 == 0))  		validNumbers.Remove (v);  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.Odd:  	// カギの数字の([0-9])桁目は奇数のようだ……。  	if (iHintValue.Count != 1)  		return false;  	dig = (iHintValue [0] == "1") ? 1 : 0;  	if (!(int.Parse (v.ToString ().Substring (dig' 1)) % 2 == 1))  		validNumbers.Remove (v);  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.NoHint:  	// 何も分からなかった……。  	break;  case HintType.Success:  	// (.*)は、開錠に成功した！  	break;  case HintType.Failed:  	// (.*)は、開錠に失敗した……。  	break;  default:  	return false;  }  
Magic Number,BoxUnlocker.Models,Box,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Box.cs,NarrowingValidNumbers,The following statement contains a magic number: switch (iHintType) {  case HintType.None:  	// ヒントでは無かった時用  	return false;  case HintType.Higher:  	// カギの数字は([0-9]*)より大きいようだ……。  	if (iHintValue.Count != 1)  		return false;  	if (lastOperationType == OperationType.InputNumber) {  		if (!(v > int.Parse (iHintValue [0])))  			validNumbers.Remove (v);  	}  	else {  		if (!(v >= int.Parse (iHintValue [0])))  			validNumbers.Remove (v);  	}  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.Lower:  	// カギの数字は([0-9]*)より小さいようだ……。  	if (iHintValue.Count != 1)  		return false;  	if (lastOperationType == OperationType.InputNumber) {  		if (!(v < int.Parse (iHintValue [0])))  			validNumbers.Remove (v);  	}  	else {  		if (!(v <= int.Parse (iHintValue [0])))  			validNumbers.Remove (v);  	}  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.Between:  	// カギの数字は([0-9]*)より大きく、([0-9]*)より小さいようだ……。  	if (iHintValue.Count != 2)  		return false;  	if (!(v >= int.Parse (iHintValue [0]) && v <= int.Parse (iHintValue [1])))  		validNumbers.Remove (v);  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.OneOfThem:  	// カギの数字の([0-9])桁目は([0-9])か([0-9])か([0-9])のどれかのようだ……。  	if (iHintValue.Count != 4)  		return false;  	dig = (iHintValue [0] == "1") ? 1 : 0;  	if (!(v.ToString ().Substring (dig' 1) == iHintValue [1] || v.ToString ().Substring (dig' 1) == iHintValue [2] || v.ToString ().Substring (dig' 1) == iHintValue [3]))  		validNumbers.Remove (v);  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.Either:  	// カギの2桁の数字のどちらかは([0-9])のようだ……。  	if (iHintValue.Count != 1)  		return false;  	if (!(v.ToString ().IndexOf (iHintValue [0]) >= 0))  		validNumbers.Remove (v);  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.Even:  	// カギの数字の([0-9])桁目は偶数のようだ……。  	if (iHintValue.Count != 1)  		return false;  	dig = (iHintValue [0] == "1") ? 1 : 0;  	if (!(int.Parse (v.ToString ().Substring (dig' 1)) % 2 == 0))  		validNumbers.Remove (v);  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.Odd:  	// カギの数字の([0-9])桁目は奇数のようだ……。  	if (iHintValue.Count != 1)  		return false;  	dig = (iHintValue [0] == "1") ? 1 : 0;  	if (!(int.Parse (v.ToString ().Substring (dig' 1)) % 2 == 1))  		validNumbers.Remove (v);  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.NoHint:  	// 何も分からなかった……。  	break;  case HintType.Success:  	// (.*)は、開錠に成功した！  	break;  case HintType.Failed:  	// (.*)は、開錠に失敗した……。  	break;  default:  	return false;  }  
Magic Number,BoxUnlocker.Models,Box,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Box.cs,NarrowingValidNumbers,The following statement contains a magic number: switch (iHintType) {  case HintType.None:  	// ヒントでは無かった時用  	return false;  case HintType.Higher:  	// カギの数字は([0-9]*)より大きいようだ……。  	if (iHintValue.Count != 1)  		return false;  	if (lastOperationType == OperationType.InputNumber) {  		if (!(v > int.Parse (iHintValue [0])))  			validNumbers.Remove (v);  	}  	else {  		if (!(v >= int.Parse (iHintValue [0])))  			validNumbers.Remove (v);  	}  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.Lower:  	// カギの数字は([0-9]*)より小さいようだ……。  	if (iHintValue.Count != 1)  		return false;  	if (lastOperationType == OperationType.InputNumber) {  		if (!(v < int.Parse (iHintValue [0])))  			validNumbers.Remove (v);  	}  	else {  		if (!(v <= int.Parse (iHintValue [0])))  			validNumbers.Remove (v);  	}  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.Between:  	// カギの数字は([0-9]*)より大きく、([0-9]*)より小さいようだ……。  	if (iHintValue.Count != 2)  		return false;  	if (!(v >= int.Parse (iHintValue [0]) && v <= int.Parse (iHintValue [1])))  		validNumbers.Remove (v);  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.OneOfThem:  	// カギの数字の([0-9])桁目は([0-9])か([0-9])か([0-9])のどれかのようだ……。  	if (iHintValue.Count != 4)  		return false;  	dig = (iHintValue [0] == "1") ? 1 : 0;  	if (!(v.ToString ().Substring (dig' 1) == iHintValue [1] || v.ToString ().Substring (dig' 1) == iHintValue [2] || v.ToString ().Substring (dig' 1) == iHintValue [3]))  		validNumbers.Remove (v);  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.Either:  	// カギの2桁の数字のどちらかは([0-9])のようだ……。  	if (iHintValue.Count != 1)  		return false;  	if (!(v.ToString ().IndexOf (iHintValue [0]) >= 0))  		validNumbers.Remove (v);  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.Even:  	// カギの数字の([0-9])桁目は偶数のようだ……。  	if (iHintValue.Count != 1)  		return false;  	dig = (iHintValue [0] == "1") ? 1 : 0;  	if (!(int.Parse (v.ToString ().Substring (dig' 1)) % 2 == 0))  		validNumbers.Remove (v);  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.Odd:  	// カギの数字の([0-9])桁目は奇数のようだ……。  	if (iHintValue.Count != 1)  		return false;  	dig = (iHintValue [0] == "1") ? 1 : 0;  	if (!(int.Parse (v.ToString ().Substring (dig' 1)) % 2 == 1))  		validNumbers.Remove (v);  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.NoHint:  	// 何も分からなかった……。  	break;  case HintType.Success:  	// (.*)は、開錠に成功した！  	break;  case HintType.Failed:  	// (.*)は、開錠に失敗した……。  	break;  default:  	return false;  }  
Magic Number,BoxUnlocker.Models,Box,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Box.cs,NarrowingValidNumbers,The following statement contains a magic number: switch (iHintType) {  case HintType.None:  	// ヒントでは無かった時用  	return false;  case HintType.Higher:  	// カギの数字は([0-9]*)より大きいようだ……。  	if (iHintValue.Count != 1)  		return false;  	if (lastOperationType == OperationType.InputNumber) {  		if (!(v > int.Parse (iHintValue [0])))  			validNumbers.Remove (v);  	}  	else {  		if (!(v >= int.Parse (iHintValue [0])))  			validNumbers.Remove (v);  	}  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.Lower:  	// カギの数字は([0-9]*)より小さいようだ……。  	if (iHintValue.Count != 1)  		return false;  	if (lastOperationType == OperationType.InputNumber) {  		if (!(v < int.Parse (iHintValue [0])))  			validNumbers.Remove (v);  	}  	else {  		if (!(v <= int.Parse (iHintValue [0])))  			validNumbers.Remove (v);  	}  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.Between:  	// カギの数字は([0-9]*)より大きく、([0-9]*)より小さいようだ……。  	if (iHintValue.Count != 2)  		return false;  	if (!(v >= int.Parse (iHintValue [0]) && v <= int.Parse (iHintValue [1])))  		validNumbers.Remove (v);  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.OneOfThem:  	// カギの数字の([0-9])桁目は([0-9])か([0-9])か([0-9])のどれかのようだ……。  	if (iHintValue.Count != 4)  		return false;  	dig = (iHintValue [0] == "1") ? 1 : 0;  	if (!(v.ToString ().Substring (dig' 1) == iHintValue [1] || v.ToString ().Substring (dig' 1) == iHintValue [2] || v.ToString ().Substring (dig' 1) == iHintValue [3]))  		validNumbers.Remove (v);  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.Either:  	// カギの2桁の数字のどちらかは([0-9])のようだ……。  	if (iHintValue.Count != 1)  		return false;  	if (!(v.ToString ().IndexOf (iHintValue [0]) >= 0))  		validNumbers.Remove (v);  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.Even:  	// カギの数字の([0-9])桁目は偶数のようだ……。  	if (iHintValue.Count != 1)  		return false;  	dig = (iHintValue [0] == "1") ? 1 : 0;  	if (!(int.Parse (v.ToString ().Substring (dig' 1)) % 2 == 0))  		validNumbers.Remove (v);  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.Odd:  	// カギの数字の([0-9])桁目は奇数のようだ……。  	if (iHintValue.Count != 1)  		return false;  	dig = (iHintValue [0] == "1") ? 1 : 0;  	if (!(int.Parse (v.ToString ().Substring (dig' 1)) % 2 == 1))  		validNumbers.Remove (v);  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.NoHint:  	// 何も分からなかった……。  	break;  case HintType.Success:  	// (.*)は、開錠に成功した！  	break;  case HintType.Failed:  	// (.*)は、開錠に失敗した……。  	break;  default:  	return false;  }  
Magic Number,BoxUnlocker.Models,Box,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Box.cs,NarrowingValidNumbers,The following statement contains a magic number: switch (iHintType) {  case HintType.None:  	// ヒントでは無かった時用  	return false;  case HintType.Higher:  	// カギの数字は([0-9]*)より大きいようだ……。  	if (iHintValue.Count != 1)  		return false;  	if (lastOperationType == OperationType.InputNumber) {  		if (!(v > int.Parse (iHintValue [0])))  			validNumbers.Remove (v);  	}  	else {  		if (!(v >= int.Parse (iHintValue [0])))  			validNumbers.Remove (v);  	}  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.Lower:  	// カギの数字は([0-9]*)より小さいようだ……。  	if (iHintValue.Count != 1)  		return false;  	if (lastOperationType == OperationType.InputNumber) {  		if (!(v < int.Parse (iHintValue [0])))  			validNumbers.Remove (v);  	}  	else {  		if (!(v <= int.Parse (iHintValue [0])))  			validNumbers.Remove (v);  	}  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.Between:  	// カギの数字は([0-9]*)より大きく、([0-9]*)より小さいようだ……。  	if (iHintValue.Count != 2)  		return false;  	if (!(v >= int.Parse (iHintValue [0]) && v <= int.Parse (iHintValue [1])))  		validNumbers.Remove (v);  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.OneOfThem:  	// カギの数字の([0-9])桁目は([0-9])か([0-9])か([0-9])のどれかのようだ……。  	if (iHintValue.Count != 4)  		return false;  	dig = (iHintValue [0] == "1") ? 1 : 0;  	if (!(v.ToString ().Substring (dig' 1) == iHintValue [1] || v.ToString ().Substring (dig' 1) == iHintValue [2] || v.ToString ().Substring (dig' 1) == iHintValue [3]))  		validNumbers.Remove (v);  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.Either:  	// カギの2桁の数字のどちらかは([0-9])のようだ……。  	if (iHintValue.Count != 1)  		return false;  	if (!(v.ToString ().IndexOf (iHintValue [0]) >= 0))  		validNumbers.Remove (v);  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.Even:  	// カギの数字の([0-9])桁目は偶数のようだ……。  	if (iHintValue.Count != 1)  		return false;  	dig = (iHintValue [0] == "1") ? 1 : 0;  	if (!(int.Parse (v.ToString ().Substring (dig' 1)) % 2 == 0))  		validNumbers.Remove (v);  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.Odd:  	// カギの数字の([0-9])桁目は奇数のようだ……。  	if (iHintValue.Count != 1)  		return false;  	dig = (iHintValue [0] == "1") ? 1 : 0;  	if (!(int.Parse (v.ToString ().Substring (dig' 1)) % 2 == 1))  		validNumbers.Remove (v);  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.NoHint:  	// 何も分からなかった……。  	break;  case HintType.Success:  	// (.*)は、開錠に成功した！  	break;  case HintType.Failed:  	// (.*)は、開錠に失敗した……。  	break;  default:  	return false;  }  
Magic Number,BoxUnlocker.Models,Box,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Box.cs,NarrowingValidNumbers,The following statement contains a magic number: switch (iHintType) {  case HintType.None:  	// ヒントでは無かった時用  	return false;  case HintType.Higher:  	// カギの数字は([0-9]*)より大きいようだ……。  	if (iHintValue.Count != 1)  		return false;  	if (lastOperationType == OperationType.InputNumber) {  		if (!(v > int.Parse (iHintValue [0])))  			validNumbers.Remove (v);  	}  	else {  		if (!(v >= int.Parse (iHintValue [0])))  			validNumbers.Remove (v);  	}  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.Lower:  	// カギの数字は([0-9]*)より小さいようだ……。  	if (iHintValue.Count != 1)  		return false;  	if (lastOperationType == OperationType.InputNumber) {  		if (!(v < int.Parse (iHintValue [0])))  			validNumbers.Remove (v);  	}  	else {  		if (!(v <= int.Parse (iHintValue [0])))  			validNumbers.Remove (v);  	}  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.Between:  	// カギの数字は([0-9]*)より大きく、([0-9]*)より小さいようだ……。  	if (iHintValue.Count != 2)  		return false;  	if (!(v >= int.Parse (iHintValue [0]) && v <= int.Parse (iHintValue [1])))  		validNumbers.Remove (v);  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.OneOfThem:  	// カギの数字の([0-9])桁目は([0-9])か([0-9])か([0-9])のどれかのようだ……。  	if (iHintValue.Count != 4)  		return false;  	dig = (iHintValue [0] == "1") ? 1 : 0;  	if (!(v.ToString ().Substring (dig' 1) == iHintValue [1] || v.ToString ().Substring (dig' 1) == iHintValue [2] || v.ToString ().Substring (dig' 1) == iHintValue [3]))  		validNumbers.Remove (v);  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.Either:  	// カギの2桁の数字のどちらかは([0-9])のようだ……。  	if (iHintValue.Count != 1)  		return false;  	if (!(v.ToString ().IndexOf (iHintValue [0]) >= 0))  		validNumbers.Remove (v);  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.Even:  	// カギの数字の([0-9])桁目は偶数のようだ……。  	if (iHintValue.Count != 1)  		return false;  	dig = (iHintValue [0] == "1") ? 1 : 0;  	if (!(int.Parse (v.ToString ().Substring (dig' 1)) % 2 == 0))  		validNumbers.Remove (v);  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.Odd:  	// カギの数字の([0-9])桁目は奇数のようだ……。  	if (iHintValue.Count != 1)  		return false;  	dig = (iHintValue [0] == "1") ? 1 : 0;  	if (!(int.Parse (v.ToString ().Substring (dig' 1)) % 2 == 1))  		validNumbers.Remove (v);  	RaisePropertyChanged ("ValidNumbersForDisplay");  	break;  case HintType.NoHint:  	// 何も分からなかった……。  	break;  case HintType.Success:  	// (.*)は、開錠に成功した！  	break;  case HintType.Failed:  	// (.*)は、開錠に失敗した……。  	break;  default:  	return false;  }  
Magic Number,BoxUnlocker.Models,Box,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Box.cs,NarrowingValidNumbers,The following statement contains a magic number: if (iHintValue.Count != 2)  	return false;  
Magic Number,BoxUnlocker.Models,Box,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Box.cs,NarrowingValidNumbers,The following statement contains a magic number: if (iHintValue.Count != 4)  	return false;  
Magic Number,BoxUnlocker.Models,Box,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Box.cs,NarrowingValidNumbers,The following statement contains a magic number: if (!(v.ToString ().Substring (dig' 1) == iHintValue [1] || v.ToString ().Substring (dig' 1) == iHintValue [2] || v.ToString ().Substring (dig' 1) == iHintValue [3]))  	validNumbers.Remove (v);  
Magic Number,BoxUnlocker.Models,Box,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Box.cs,NarrowingValidNumbers,The following statement contains a magic number: if (!(v.ToString ().Substring (dig' 1) == iHintValue [1] || v.ToString ().Substring (dig' 1) == iHintValue [2] || v.ToString ().Substring (dig' 1) == iHintValue [3]))  	validNumbers.Remove (v);  
Magic Number,BoxUnlocker.Models,Box,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Box.cs,NarrowingValidNumbers,The following statement contains a magic number: if (!(int.Parse (v.ToString ().Substring (dig' 1)) % 2 == 0))  	validNumbers.Remove (v);  
Magic Number,BoxUnlocker.Models,Box,C:\repos\rohme_BoxUnlocker\BoxUnlocker\Models\Box.cs,NarrowingValidNumbers,The following statement contains a magic number: if (!(int.Parse (v.ToString ().Substring (dig' 1)) % 2 == 1))  	validNumbers.Remove (v);  
