Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Tavis.UriTemplates,UriTemplate,D:\research\architectureSmells\repos1\tavis-software_Tavis.UriTemplates\src\UriTemplates\UriTemplate.cs,ResolveResult,Cyclomatic complexity of the method is 8
Complex Method,Tavis.UriTemplates,UriTemplate,D:\research\architectureSmells\repos1\tavis-software_Tavis.UriTemplates\src\UriTemplates\UriTemplate.cs,ProcessExpression,Cyclomatic complexity of the method is 12
Complex Method,Tavis.UriTemplates,UriTemplate,D:\research\architectureSmells\repos1\tavis-software_Tavis.UriTemplates\src\UriTemplates\UriTemplate.cs,ProcessVariable,Cyclomatic complexity of the method is 14
Complex Method,Tavis.UriTemplates,UriTemplate,D:\research\architectureSmells\repos1\tavis-software_Tavis.UriTemplates\src\UriTemplates\UriTemplate.cs,GetExpression,Cyclomatic complexity of the method is 10
Long Statement,Tavis.UriTemplates,UriTemplate,D:\research\architectureSmells\repos1\tavis-software_Tavis.UriTemplates\src\UriTemplates\UriTemplate.cs,CreateMatchingRegex,The length of the statement  "                    var paramNames = m.Groups["lvar"].Captures.Cast<Capture>().Where(c => !string.IsNullOrEmpty(c.Value)).Select(c => c.Value).ToList(); " is 132.
Long Statement,Tavis.UriTemplates,UriTemplate,D:\research\architectureSmells\repos1\tavis-software_Tavis.UriTemplates\src\UriTemplates\UriTemplate.cs,CreateMatchingRegex2,The length of the statement  "                var paramNames = m.Groups["lvar"].Captures.Cast<Capture>().Where(c => !string.IsNullOrEmpty(c.Value)).Select(c => c.Value).ToList(); " is 132.
Long Statement,Tavis.UriTemplates,UriExtensions,D:\research\architectureSmells\repos1\tavis-software_Tavis.UriTemplates\src\UriTemplates\UriTemplateExtensions.cs,GetQueryStringParameters,The length of the statement  "            var reg = new Regex(@"([-A-Za-z0-9._~]*)=([^&]*)&?");		// Unreserved characters: http://tools.ietf.org/html/rfc3986#section-2.3 " is 127.
Complex Conditional,Tavis.UriTemplates,Result,D:\research\architectureSmells\repos1\tavis-software_Tavis.UriTemplates\src\UriTemplates\Result.cs,Encode,The conditional expression  "(c >= 'A' && c <= 'z')   //Alpha                      || (c >= '0' && c <= '9')  // Digit                      || _UriUnreservedSymbols.IndexOf(c) != -1  // Unreserved symbols  - These should never be percent encoded                      || (allowReserved && _UriReservedSymbols.IndexOf(c) != -1)"  is complex.
Complex Conditional,Tavis.UriTemplates,UriTemplate,D:\research\architectureSmells\repos1\tavis-software_Tavis.UriTemplates\src\UriTemplates\UriTemplate.cs,ProcessVariable,The conditional expression  "!_Parameters.ContainsKey(varname)                      || _Parameters[varname] == null                      || (_Parameters[varname] is IList && ((IList) _Parameters[varname]).Count == 0)                      || (_Parameters[varname] is IDictionary && ((IDictionary) _Parameters[varname]).Count == 0)"  is complex.
Magic Number,Tavis.UriTemplates,Result,D:\research\architectureSmells\repos1\tavis-software_Tavis.UriTemplates\src\UriTemplates\Result.cs,HexEscape,The following statement contains a magic number: var esc = new char[3];
Magic Number,Tavis.UriTemplates,Result,D:\research\architectureSmells\repos1\tavis-software_Tavis.UriTemplates\src\UriTemplates\Result.cs,HexEscape,The following statement contains a magic number: esc[1] = HexDigits[((i & 240) >> 4)];
Magic Number,Tavis.UriTemplates,Result,D:\research\architectureSmells\repos1\tavis-software_Tavis.UriTemplates\src\UriTemplates\Result.cs,HexEscape,The following statement contains a magic number: esc[1] = HexDigits[((i & 240) >> 4)];
Magic Number,Tavis.UriTemplates,Result,D:\research\architectureSmells\repos1\tavis-software_Tavis.UriTemplates\src\UriTemplates\Result.cs,HexEscape,The following statement contains a magic number: esc[2] = HexDigits[(i & 15)];
Magic Number,Tavis.UriTemplates,Result,D:\research\architectureSmells\repos1\tavis-software_Tavis.UriTemplates\src\UriTemplates\Result.cs,HexEscape,The following statement contains a magic number: esc[2] = HexDigits[(i & 15)];
Magic Number,Tavis.UriTemplates,Result,D:\research\architectureSmells\repos1\tavis-software_Tavis.UriTemplates\src\UriTemplates\Result.cs,HexEscape,The following statement contains a magic number: var esc = new char[3];
Magic Number,Tavis.UriTemplates,Result,D:\research\architectureSmells\repos1\tavis-software_Tavis.UriTemplates\src\UriTemplates\Result.cs,HexEscape,The following statement contains a magic number: esc[1] = HexDigits[(((int) c & 240) >> 4)];
Magic Number,Tavis.UriTemplates,Result,D:\research\architectureSmells\repos1\tavis-software_Tavis.UriTemplates\src\UriTemplates\Result.cs,HexEscape,The following statement contains a magic number: esc[1] = HexDigits[(((int) c & 240) >> 4)];
Magic Number,Tavis.UriTemplates,Result,D:\research\architectureSmells\repos1\tavis-software_Tavis.UriTemplates\src\UriTemplates\Result.cs,HexEscape,The following statement contains a magic number: esc[2] = HexDigits[((int) c & 15)];
Magic Number,Tavis.UriTemplates,Result,D:\research\architectureSmells\repos1\tavis-software_Tavis.UriTemplates\src\UriTemplates\Result.cs,HexEscape,The following statement contains a magic number: esc[2] = HexDigits[((int) c & 15)];
Magic Number,Tavis.UriTemplates,UriExtensions,D:\research\architectureSmells\repos1\tavis-software_Tavis.UriTemplates\src\UriTemplates\UriTemplateExtensions.cs,GetQueryStringParameters,The following statement contains a magic number: string value = m.Groups[2].Value;
Missing Default,Tavis.UriTemplates,UriTemplate,D:\research\architectureSmells\repos1\tavis-software_Tavis.UriTemplates\src\UriTemplates\UriTemplate.cs,ResolveResult,The following switch statement is missing a default case: switch (currentState)                      {                          case States.CopyingLiterals:                              if (character == '{')                              {                                  currentState = States.ParsingExpression;                                  currentExpression = new StringBuilder();                              }                              else if (character == '}')                              {                                  throw new ArgumentException("Malformed template' unexpected } : " + result.ToString());                              }                              else                              {                                  result.Append(character);                              }                              break;                          case States.ParsingExpression:                              if (character == '}')                              {                                  ProcessExpression(currentExpression' result);                                    currentState = States.CopyingLiterals;                              }                              else                              {                                  currentExpression.Append(character);                              }                                break;                      }
