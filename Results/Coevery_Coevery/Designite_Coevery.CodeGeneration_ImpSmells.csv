Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Coevery.CodeGeneration.Services,CodeGenerationCommandInterpreter,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.CodeGeneration\Services\CodeGenerationCommandInterpreter.cs,Visit,Cyclomatic complexity of the method is 12
Long Parameter List,Coevery.CodeGeneration.Commands,CodeGenerationCommands,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.CodeGeneration\Commands\CodeGenerationCommands.cs,CreateThemeFromTemplates,The method has 5 parameters. Parameters: output' themeName' baseTheme' projectGuid' includeInSolution
Long Parameter List,Coevery.CodeGeneration.Commands,CodeGenerationCommands,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.CodeGeneration\Commands\CodeGenerationCommands.cs,AddToSolution,The method has 5 parameters. Parameters: output' projectName' projectGuid' containingFolder' solutionFolderGuid
Long Statement,Coevery.CodeGeneration.Commands,CodeGenerationCommands,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.CodeGeneration\Commands\CodeGenerationCommands.cs,CreateDataMigration,The length of the statement  "            ExtensionDescriptor extensionDescriptor = _extensionManager.AvailableExtensions().FirstOrDefault(extension => DefaultExtensionTypes.IsModule(extension.ExtensionType) && " is 168.
Long Statement,Coevery.CodeGeneration.Commands,CodeGenerationCommands,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.CodeGeneration\Commands\CodeGenerationCommands.cs,CreateDataMigration,The length of the statement  "            string moduleCsProjPath = HostingEnvironment.MapPath(string.Format("~/Modules/{0}/{0}.csproj"' extensionDescriptor.Id)); " is 120.
Long Statement,Coevery.CodeGeneration.Commands,CodeGenerationCommands,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.CodeGeneration\Commands\CodeGenerationCommands.cs,CreateDataMigration,The length of the statement  "                string itemGroupReference = string.Format("</ItemGroup>\r\n  <ItemGroup>\r\n    <Compile Include=\"{0}\" />\r\n  "' "Migrations.cs"); " is 133.
Long Statement,Coevery.CodeGeneration.Commands,CodeGenerationCommands,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.CodeGeneration\Commands\CodeGenerationCommands.cs,CreateModule,The length of the statement  "            if ( _extensionManager.AvailableExtensions().Any(extension => String.Equals(moduleName' extension.Name' StringComparison.OrdinalIgnoreCase)) ) { " is 144.
Long Statement,Coevery.CodeGeneration.Commands,CodeGenerationCommands,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.CodeGeneration\Commands\CodeGenerationCommands.cs,CreateTheme,The length of the statement  "            if (_extensionManager.AvailableExtensions().Any(extension => String.Equals(themeName' extension.Id' StringComparison.OrdinalIgnoreCase))) { " is 139.
Long Statement,Coevery.CodeGeneration.Commands,CodeGenerationCommands,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.CodeGeneration\Commands\CodeGenerationCommands.cs,CreateController,The length of the statement  "            ExtensionDescriptor extensionDescriptor = _extensionManager.AvailableExtensions().FirstOrDefault(extension => DefaultExtensionTypes.IsModule(extension.ExtensionType) && " is 168.
Long Statement,Coevery.CodeGeneration.Commands,CodeGenerationCommands,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.CodeGeneration\Commands\CodeGenerationCommands.cs,CreateController,The length of the statement  "                Context.Output.WriteLine(T("Creating Controller {0} failed: target Module {1} could not be found."' controllerName' moduleName)); " is 129.
Long Statement,Coevery.CodeGeneration.Commands,CodeGenerationCommands,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.CodeGeneration\Commands\CodeGenerationCommands.cs,CreateController,The length of the statement  "            string moduleCsProjPath = HostingEnvironment.MapPath(string.Format("~/Modules/{0}/{0}.csproj"' extensionDescriptor.Id)); " is 120.
Long Statement,Coevery.CodeGeneration.Commands,CodeGenerationCommands,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.CodeGeneration\Commands\CodeGenerationCommands.cs,CreateController,The length of the statement  "                string compileReference = string.Format("<Compile Include=\"{0}\" />\r\n    "' "Controllers\\" + controllerName + ".cs"); " is 121.
Long Statement,Coevery.CodeGeneration.Commands,CodeGenerationCommands,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.CodeGeneration\Commands\CodeGenerationCommands.cs,CreateController,The length of the statement  "                string itemGroupReference = string.Format("</ItemGroup>\r\n  <ItemGroup>\r\n    <Compile Include=\"{0}\" />\r\n  "' "Controllers\\" + controllerName + ".cs"); " is 158.
Long Statement,Coevery.CodeGeneration.Commands,CodeGenerationCommands,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.CodeGeneration\Commands\CodeGenerationCommands.cs,CreateFilesFromTemplates,The length of the statement  "            File.WriteAllText(modulePath + "Scripts\\Web.config"' File.ReadAllText(_codeGenTemplatePath + "StaticFilesWebConfig.txt")); " is 123.
Long Statement,Coevery.CodeGeneration.Commands,CodeGenerationCommands,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.CodeGeneration\Commands\CodeGenerationCommands.cs,CreateFilesFromTemplates,The length of the statement  "            File.WriteAllText(modulePath + "Styles\\Web.config"' File.ReadAllText(_codeGenTemplatePath + "StaticFilesWebConfig.txt")); " is 122.
Long Statement,Coevery.CodeGeneration.Commands,CodeGenerationCommands,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.CodeGeneration\Commands\CodeGenerationCommands.cs,CreateThemeFromTemplates,The length of the statement  "            File.WriteAllText(themePath + "Scripts\\Web.config"' File.ReadAllText(_codeGenTemplatePath + "StaticFilesWebConfig.txt")); " is 122.
Long Statement,Coevery.CodeGeneration.Commands,CodeGenerationCommands,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.CodeGeneration\Commands\CodeGenerationCommands.cs,CreateThemeFromTemplates,The length of the statement  "            File.WriteAllText(themePath + "Styles\\Web.config"' File.ReadAllText(_codeGenTemplatePath + "StaticFilesWebConfig.txt")); " is 121.
Long Statement,Coevery.CodeGeneration.Commands,CodeGenerationCommands,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.CodeGeneration\Commands\CodeGenerationCommands.cs,CreateThemeFromTemplates,The length of the statement  "            File.WriteAllText(themePath + "Content\\Web.config"' File.ReadAllText(_codeGenTemplatePath + "StaticFilesWebConfig.txt")); " is 122.
Long Statement,Coevery.CodeGeneration.Commands,CodeGenerationCommands,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.CodeGeneration\Commands\CodeGenerationCommands.cs,AddToSolution,The length of the statement  "                    var projectReference = string.Format("EndProject\r\nProject(\"{{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}}\") = \"{0}\"' \"Coevery.Web\\{2}\\{0}\\{0}.csproj\"' \"{{{1}}}\"\r\n"' projectName' projectGuid' containingFolder); " is 218.
Long Statement,Coevery.CodeGeneration.Commands,CodeGenerationCommands,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.CodeGeneration\Commands\CodeGenerationCommands.cs,AddToSolution,The length of the statement  "                    var projectConfiguationPlatforms = string.Format("GlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{{{0}}}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{{{0}}}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{{{0}}}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{{{0}}}.Release|Any CPU.Build.0 = Release|Any CPU\r\n"' projectGuid); " is 353.
Long Statement,Coevery.CodeGeneration.Commands,CodeGenerationCommands,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.CodeGeneration\Commands\CodeGenerationCommands.cs,AddToSolution,The length of the statement  "                    solutionText = solutionText.Insert(solutionText.LastIndexOf("EndProject\r\n")' projectReference).Replace("GlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n"' projectConfiguationPlatforms); " is 202.
Long Statement,Coevery.CodeGeneration.Commands,CodeGenerationCommands,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.CodeGeneration\Commands\CodeGenerationCommands.cs,AddToSolution,The length of the statement  "                    solutionText = solutionText.Insert(solutionText.LastIndexOf("EndGlobalSection")' "\t{" + projectGuid + "} = {" + solutionFolderGuid + "}\r\n\t"); " is 145.
Long Statement,Coevery.CodeGeneration.Commands,CodeGenerationCommands,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.CodeGeneration\Commands\CodeGenerationCommands.cs,TouchSolution,The length of the statement  "                output.WriteLine(T("An unexpected error occured while trying to refresh the Visual Studio solution. Please reload it.")); " is 121.
Long Statement,Coevery.CodeGeneration.Services,CodeGenerationCommandInterpreter,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.CodeGeneration\Services\CodeGenerationCommandInterpreter.cs,Visit,The length of the statement  "                _output.WriteLine("\t\t\t\t.Column(\"{0}\"' DbType.{1}{2})"' field' type' options.Any() ? "' column => column." + string.Join("."' options) : string.Empty); " is 156.
Magic Number,Coevery.CodeGeneration.Services,CodeGenerationCommandInterpreter,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.CodeGeneration\Services\CodeGenerationCommandInterpreter.cs,Visit,The following statement contains a magic number: foreach ( var createColumn in command.TableCommands.OfType<CreateColumnCommand>() ) {                  if(createColumn.ColumnName == "Id" && matchContentPartRecord) {                      continue;                  }                    if(createColumn.ColumnName == "ContentItemRecord_id" && matchContentPartVersionRecord) {                      continue;                  }                    var type = createColumn.DbType.ToString();                  var field = createColumn.ColumnName;                  var options = new List<string>();                    if ( createColumn.IsPrimaryKey ) {                      options.Add("PrimaryKey()");                  }                    if ( createColumn.IsIdentity ) {                      options.Add("Identity()");                  }                    if ( createColumn.IsUnique ) {                      options.Add("Unique()");                  }                    if ( createColumn.IsNotNull ) {                      options.Add("NotNull()");                  }                    if ( createColumn.Length.HasValue ) {                      if ( createColumn.Length == 10000 ) {                          options.Add("Unlimited()");                      }                      else {                          options.Add(string.Format("WithLength({0})"' createColumn.Length));                      }                  }                    if ( createColumn.Precision > 0 ) {                      options.Add(string.Format("WithPrecision({0})"' createColumn.Precision));                      options.Add(string.Format("WithScale({0})"' createColumn.Scale));                  }                    _output.WriteLine("\t\t\t\t.Column(\"{0}\"' DbType.{1}{2})"' field' type' options.Any() ? "' column => column." + string.Join("."' options) : string.Empty);              }
