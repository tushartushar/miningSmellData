Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Coevery.Tokens.Providers,ContentTokens,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\ContentTokens.cs,Describe,The length of the statement  "                        partContext.Token(tokenName' T("{0} {1}"' typePart.PartDefinition.Name' field.Name)' T("The content of the {0} field."' partField.DisplayName)' field.Name); " is 156.
Long Statement,Coevery.Tokens.Providers,ContentTokens,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\ContentTokens.cs,Evaluate,The length of the statement  "                .Token("Identity"' content => content != null ? _contentManager.GetItemMetadata(content).Identity.ToString() : String.Empty) " is 124.
Long Statement,Coevery.Tokens.Providers,ContentTokens,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\ContentTokens.cs,Evaluate,The length of the statement  "                .Token("Fields"' def => string.Join("' "' def.Parts.SelectMany(x => x.PartDefinition.Fields.Select(x2 => x2.FieldDefinition.Name + " " + x.PartDefinition.Name + "." + x2.Name)).ToArray())); " is 189.
Long Statement,Coevery.Tokens.Providers,RequestTokens,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\RequestTokens.cs,Evaluate,The length of the statement  "                    token => token.StartsWith("QueryString:"' StringComparison.OrdinalIgnoreCase) ? token.Substring("QueryString:".Length) : null' " is 126.
Long Statement,Coevery.Tokens.Providers,DateTokens,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\DateTokens.cs,Describe,The length of the statement  "                .Token("Format:*"' T("Format:<date format>")' T("Optional format specifier (e.g. yyyy/MM/dd). See format strings at <a target=\"_blank\" href=\"http://msdn.microsoft.com/en-us/library/az4se3k1.aspx\">Standard Formats</a> and <a target=\"_blank\" href=\"http://msdn.microsoft.com/en-us/library/8kb3ddd4.aspx\">Custom Formats</a>")' "DateTime"); " is 343.
Long Statement,Coevery.Tokens.Providers,DateTokens,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\DateTokens.cs,Evaluate,The length of the statement  "                    (token' d) => d.ToString(_dateTimeLocalization.ShortDateFormat.Text + " " + _dateTimeLocalization.ShortTimeFormat.Text' _cultureInfo.Value)) " is 140.
Long Statement,Coevery.Tokens.Providers,TextTokens,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\TextTokens.cs,Describe,The length of the statement  "                .Token("Limit:*"' T("Limit:<text length>['<ellipsis>]")' T("Limit text to specified length and append an optional ellipsis text.")) " is 131.
Long Statement,Coevery.Tokens.Providers,TextTokens,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\TextTokens.cs,Describe,The length of the statement  "                .Token("Format:*"' T("Format:<text format>")' T("Optional format specifier (e.g. foo{0}bar). See format strings at <a target=\"_blank\" href=\"http://msdn.microsoft.com/en-us/library/az4se3k1.aspx\">Standard Formats</a> and <a target=\"_blank\" href=\"http://msdn.microsoft.com/en-us/library/8kb3ddd4.aspx\">Custom Formats</a>")' "DateTime") " is 341.
Long Statement,Coevery.Tokens.Providers,TextTokens,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\TextTokens.cs,Describe,The length of the statement  "                .Token("TrimEnd:*"' T("TrimEnd:<chars|number>")' T("Trims the specified characters or number of them from the end of the string.")' "Text") " is 139.
Long Statement,Coevery.Tokens.Providers,TextTokens,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\TextTokens.cs,Evaluate,The length of the statement  "                .Token(token => token.StartsWith("TrimEnd:"' StringComparison.OrdinalIgnoreCase) ? token.Substring("TrimEnd:".Length) : null' TrimEnd) " is 134.
Long Statement,Coevery.Tokens.Implementation,Tokenizer,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Implementation\Tokenizer.cs,Evaluate,The length of the statement  "                .SelectMany(grouping => _tokenManager.Evaluate(grouping.Key' grouping.ToDictionary(item => item.Item2' item => item.Item3)' data)) " is 130.
Long Statement,Coevery.Tokens.Implementation,Tokenizer,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Implementation\Tokenizer.cs,Replace,The length of the statement  "                (current' replacement) => current.Replace((hashMode ? "#{" : "{") + replacement.Key + "}"' (options.Encoding ?? ReplaceOptions.NoEncode)(replacement.Key' replacement.Value))); " is 175.
Long Statement,Coevery.Tokens.Implementation,EvaluateForImpl<TData>,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Implementation\TokenManager.cs,Chain,The length of the statement  "                    var subValues = _context._manager.Evaluate(chainTarget' subTokens' new Dictionary<string' object> { { chainTarget' chainValue(_data) } }); " is 138.
Long Statement,Coevery.Tokens.Implementation,DescribeForImpl,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Implementation\TokenManager.cs,Token,The length of the statement  "                _tokens.Add(new TokenDescriptor { Token = token' Name = name' Description = description' Target = _target' ChainTarget = chainTarget }); " is 136.
Complex Conditional,Coevery.Tokens.Implementation,Tokenizer,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Implementation\Tokenizer.cs,Parse,The conditional expression  "hashMode && c == '#'                           && i + 1 < text.Length && text[i + 1] == '{'                          && (i + 2 > text.Length || text[i + 2] != '{')"  is complex.
Magic Number,Coevery.Tokens.Providers,DateTokens,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\DateTokens.cs,DateTimeRelative,The following statement contains a magic number: if (time.TotalDays > 7)                  return dateTimeUtc.ToString(T("'on' MMM d yyyy 'at' h:mm tt").ToString()' _cultureInfo.Value);
Magic Number,Coevery.Tokens.Providers,DateTokens,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\DateTokens.cs,DateTimeRelative,The following statement contains a magic number: if (time.TotalHours > 24)                  return T.Plural("1 day ago"' "{0} days ago"' time.Days).ToString();
Magic Number,Coevery.Tokens.Providers,DateTokens,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\DateTokens.cs,DateTimeRelative,The following statement contains a magic number: if (time.TotalMinutes > 60)                  return T.Plural("1 hour ago"' "{0} hours ago"' time.Hours).ToString();
Magic Number,Coevery.Tokens.Providers,DateTokens,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\DateTokens.cs,DateTimeRelative,The following statement contains a magic number: if (time.TotalSeconds > 60)                  return T.Plural("1 minute ago"' "{0} minutes ago"' time.Minutes).ToString();
Magic Number,Coevery.Tokens.Providers,DateTokens,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\DateTokens.cs,DateTimeRelative,The following statement contains a magic number: if (time.TotalSeconds > 10)                  return T.Plural("1 second ago"' "{0} seconds ago"' time.Seconds).ToString();
Magic Number,Coevery.Tokens.Implementation,Tokenizer,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Implementation\Tokenizer.cs,Parse,The following statement contains a magic number: if (!String.IsNullOrEmpty(text)) {                  var inToken = false;                  var tokenStart = 0;                  for (var i = 0; i < text.Length; i++) {                      var c = text[i];                        if (c == '{') {                          if (i + 1 < text.Length && text[i + 1] == '{') {                              text = text.Substring(0' i) + text.Substring(i + 1);                              continue;                          }                      }                      else if (c == '}' && !(inToken)) {                          if (i + 1 < text.Length && text[i + 1] == '}') {                              text = text.Substring(0' i) + text.Substring(i + 1);                              continue;                          }                      }                        if (inToken) {                          if (c == '}') {                              inToken = false;                              var token = text.Substring(tokenStart + 1' i - tokenStart - 1);                              tokens.Add(token);                          }                      }                      else if (!hashMode && c == '{') {                          inToken = true;                          tokenStart = i;                      }                      else if (hashMode && c == '#'                           && i + 1 < text.Length && text[i + 1] == '{'                          && (i + 2 > text.Length || text[i + 2] != '{') ) {                          inToken = true;                          tokenStart = i+1;                      }                  }              }
Magic Number,Coevery.Tokens.Implementation,Tokenizer,C:\repos\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Implementation\Tokenizer.cs,Parse,The following statement contains a magic number: if (!String.IsNullOrEmpty(text)) {                  var inToken = false;                  var tokenStart = 0;                  for (var i = 0; i < text.Length; i++) {                      var c = text[i];                        if (c == '{') {                          if (i + 1 < text.Length && text[i + 1] == '{') {                              text = text.Substring(0' i) + text.Substring(i + 1);                              continue;                          }                      }                      else if (c == '}' && !(inToken)) {                          if (i + 1 < text.Length && text[i + 1] == '}') {                              text = text.Substring(0' i) + text.Substring(i + 1);                              continue;                          }                      }                        if (inToken) {                          if (c == '}') {                              inToken = false;                              var token = text.Substring(tokenStart + 1' i - tokenStart - 1);                              tokens.Add(token);                          }                      }                      else if (!hashMode && c == '{') {                          inToken = true;                          tokenStart = i;                      }                      else if (hashMode && c == '#'                           && i + 1 < text.Length && text[i + 1] == '{'                          && (i + 2 > text.Length || text[i + 2] != '{') ) {                          inToken = true;                          tokenStart = i+1;                      }                  }              }
