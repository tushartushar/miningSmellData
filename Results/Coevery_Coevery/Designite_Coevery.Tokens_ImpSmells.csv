Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Coevery.Tokens.Implementation,Tokenizer,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Implementation\Tokenizer.cs,Parse,Cyclomatic complexity of the method is 11
Long Statement,Coevery.Tokens.Providers,ContentTokens,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\ContentTokens.cs,Describe,The length of the statement  "	context.For ("Content"' T ("Content Items")' T ("Content Items")).Token ("Id"' T ("Content Id")' T ("Numeric primary key value of content.")).Token ("Author"' T ("Content Author")' T ("Person in charge of the content.")' "User").Token ("Date"' T ("Content Date")' T ("Date the content was created.")' "DateTime").Token ("Identity"' T ("Identity")' T ("Identity of the content.")).Token ("ContentType"' T ("Content Type")' T ("The name of the item Content Type.")' "TypeDefinition").Token ("DisplayText"' T ("Display Text")' T ("Title of the content.")' "Text").Token ("DisplayUrl"' T ("Display Url")' T ("Url to display the content.")' "Url").Token ("EditUrl"' T ("Edit Url")' T ("Url to edit the content.")' "Url").Token ("Container"' T ("Container")' T ("The container Content Item.")' "Content").Token ("Body"' T ("Body")' T ("The body text of the content item.")' "Content"); " is 879.
Long Statement,Coevery.Tokens.Providers,ContentTokens,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\ContentTokens.cs,Describe,The length of the statement  "				partContext.Token (tokenName' T ("{0} {1}"' typePart.PartDefinition.Name' field.Name)' T ("The content of the {0} field."' partField.DisplayName)' field.Name); " is 159.
Long Statement,Coevery.Tokens.Providers,ContentTokens,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\ContentTokens.cs,Describe,The length of the statement  "	context.For ("TextField"' T ("Text Field")' T ("Tokens for Text Fields")).Token ("Length"' T ("Length")' T ("The length of the field.")); " is 137.
Long Statement,Coevery.Tokens.Providers,ContentTokens,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\ContentTokens.cs,Describe,The length of the statement  "	context.For ("TypeDefinition"' T ("Type Definition")' T ("Tokens for Content Types")).Token ("Name"' T ("Name")' T ("Name of the content type.")).Token ("DisplayName"' T ("Display Name")' T ("Display name of the content type.")' "Text").Token ("Parts"' T ("Parts")' T ("List of the attached part names.")).Token ("Fields"' T ("Fields")' T ("Fields for each of the attached parts. For example' Fields.Page.Approved.")); " is 418.
Long Statement,Coevery.Tokens.Providers,ContentTokens,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\ContentTokens.cs,Evaluate,The length of the statement  "	context.For<IContent> ("Content").Token ("Id"' content => content != null ? content.Id : 0).Token ("Author"' AuthorName).Chain ("Author"' "User"' content => content != null ? content.As<ICommonPart> ().Owner : null).Token ("Date"' Date).Chain ("Date"' "Date"' Date).Token ("Identity"' content => content != null ? _contentManager.GetItemMetadata (content).Identity.ToString () : String.Empty).Token ("ContentType"' content => content != null ? content.ContentItem.TypeDefinition.DisplayName : String.Empty).Chain ("ContentType"' "TypeDefinition"' content => content != null ? content.ContentItem.TypeDefinition : null).Token ("DisplayText"' DisplayText).Chain ("DisplayText"' "Text"' DisplayText).Token ("DisplayUrl"' DisplayUrl).Chain ("DisplayUrl"' "Url"' DisplayUrl).Token ("EditUrl"' EditUrl).Chain ("EditUrl"' "Url"' EditUrl).Token ("Container"' content => DisplayText (Container (content))).Chain ("Container"' "Content"' Container).Token ("Body"' Body).Chain ("Body"' "Text"' Body); " is 989.
Long Statement,Coevery.Tokens.Providers,ContentTokens,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\ContentTokens.cs,Evaluate,The length of the statement  "					forContent.Token (tokenName' content => Convert.ToString (LookupField (content' part.PartDefinition.Name' field.Name).Storage.Get<object> ())); " is 143.
Long Statement,Coevery.Tokens.Providers,ContentTokens,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\ContentTokens.cs,Evaluate,The length of the statement  "					forContent.Chain (tokenName' partField.FieldDefinition.Name' content => LookupField (content' part.PartDefinition.Name' field.Name)); " is 133.
Long Statement,Coevery.Tokens.Providers,ContentTokens,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\ContentTokens.cs,Evaluate,The length of the statement  "	context.For<string> ("Url").Token ("Absolute"' url => _urlHelper.MakeAbsolute (url)).Chain ("Absolute"' "Text"' url => _urlHelper.MakeAbsolute (url)); " is 150.
Long Statement,Coevery.Tokens.Providers,ContentTokens,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\ContentTokens.cs,Evaluate,The length of the statement  "	context.For<ContentTypeDefinition> ("TypeDefinition").Token ("Name"' def => def.Name).Token ("DisplayName"' def => def.DisplayName).Chain ("DisplayName"' "Text"' def => def.DisplayName).Token ("Parts"' def => string.Join ("' "' def.Parts.Select (x => x.PartDefinition.Name).ToArray ())).Token ("Fields"' def => string.Join ("' "' def.Parts.SelectMany (x => x.PartDefinition.Fields.Select (x2 => x2.FieldDefinition.Name + " " + x.PartDefinition.Name + "." + x2.Name)).ToArray ())); " is 480.
Long Statement,Coevery.Tokens.Providers,ContentTokens,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\ContentTokens.cs,LookupField,The length of the statement  "	return content.ContentItem.Parts.Where (part => part.PartDefinition.Name == partName).SelectMany (part => part.Fields.Where (field => field.Name == fieldName)).SingleOrDefault (); " is 179.
Long Statement,Coevery.Tokens.Providers,RequestTokens,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\RequestTokens.cs,Describe,The length of the statement  "	context.For ("Request"' T ("Http Request")' T ("Current Http Request tokens.")).Token ("QueryString:*"' T ("QueryString:<element>")' T ("The Query String value for the specified element.")).Token ("Form:*"' T ("Form:<element>")' T ("The Form value for the specified element.")); " is 278.
Long Statement,Coevery.Tokens.Providers,RequestTokens,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\RequestTokens.cs,Evaluate,The length of the statement  "	context.For ("Request"' _workContextAccessor.GetContext ().HttpContext.Request).Token (token => token.StartsWith ("QueryString:"' StringComparison.OrdinalIgnoreCase) ? token.Substring ("QueryString:".Length) : null' (token' request) => request.QueryString.Get (token)).Token (token => token.StartsWith ("Form:"' StringComparison.OrdinalIgnoreCase) ? token.Substring ("Form:".Length) : null' (token' request) => request.Form.Get (token)); " is 437.
Long Statement,Coevery.Tokens.Providers,DateTokens,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\DateTokens.cs,Describe,The length of the statement  "	context.For ("Date"' T ("Date/time")' T ("Current date/time tokens")).Token ("Since"' T ("Since")' T ("Relative to the current date/time.")' "Date").Token ("Local"' T ("Local")' T ("Based on the configured time zone.")' "Date").Token ("ShortDate"' T ("Short Date")' T ("Short date format.")).Token ("ShortTime"' T ("Short Time")' T ("Short time format.")).Token ("Long"' T ("Long Date and Time")' T ("Long date and time format.")).Token ("Format:*"' T ("Format:<date format>")' T ("Optional format specifier (e.g. yyyy/MM/dd). See format strings at <a target=\"_blank\" href=\"http://msdn.microsoft.com/en-us/library/az4se3k1.aspx\">Standard Formats</a> and <a target=\"_blank\" href=\"http://msdn.microsoft.com/en-us/library/8kb3ddd4.aspx\">Custom Formats</a>")' "DateTime"); " is 776.
Long Statement,Coevery.Tokens.Providers,DateTokens,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\DateTokens.cs,Evaluate,The length of the statement  "	.Token ("Local"' d => TimeZoneInfo.ConvertTimeFromUtc (d' _timeZone.Value)).Chain ("Local"' "Date"' d => TimeZoneInfo.ConvertTimeFromUtc (d' _timeZone.Value))// {Date.ShortDate} " is 177.
Long Statement,Coevery.Tokens.Providers,DateTokens,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\DateTokens.cs,Evaluate,The length of the statement  "	.Token ("ShortDate"' d => d.ToString (_dateTimeLocalization.ShortDateFormat.Text' _cultureInfo.Value))// {Date.ShortTime} " is 121.
Long Statement,Coevery.Tokens.Providers,DateTokens,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\DateTokens.cs,Evaluate,The length of the statement  "	.Token (token => token == String.Empty ? String.Empty : null' (token' d) => d.ToString (_dateTimeLocalization.ShortDateFormat.Text + " " + _dateTimeLocalization.ShortTimeFormat.Text' _cultureInfo.Value))// {Date.Format:<formatstring>} " is 234.
Long Statement,Coevery.Tokens.Providers,DateTokens,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\DateTokens.cs,Evaluate,The length of the statement  "	.Token (token => token.StartsWith ("Format:"' StringComparison.OrdinalIgnoreCase) ? token.Substring ("Format:".Length) : null' (token' d) => d.ToString (token' _cultureInfo.Value)); " is 181.
Long Statement,Coevery.Tokens.Providers,TextTokens,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\TextTokens.cs,Describe,The length of the statement  "	context.For ("Text"' T ("Text")' T ("Tokens for text strings")).Token ("Limit:*"' T ("Limit:<text length>['<ellipsis>]")' T ("Limit text to specified length and append an optional ellipsis text.")).Token ("Format:*"' T ("Format:<text format>")' T ("Optional format specifier (e.g. foo{0}bar). See format strings at <a target=\"_blank\" href=\"http://msdn.microsoft.com/en-us/library/az4se3k1.aspx\">Standard Formats</a> and <a target=\"_blank\" href=\"http://msdn.microsoft.com/en-us/library/8kb3ddd4.aspx\">Custom Formats</a>")' "DateTime").Token ("TrimEnd:*"' T ("TrimEnd:<chars|number>")' T ("Trims the specified characters or number of them from the end of the string.")' "Text").Token ("UrlEncode"' T ("Url Encode")' T ("Encodes a URL string.")' "Text").Token ("HtmlEncode"' T ("Html Encode")' T ("Encodes an HTML string.")' "Text").Token ("LineEncode"' T ("Line Encode")' T ("Replaces new lines with <br /> tags.")); " is 922.
Long Statement,Coevery.Tokens.Providers,TextTokens,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\TextTokens.cs,Evaluate,The length of the statement  "	token => token == String.Empty ? String.Empty : null' (token' d) => d.ToString ()).Token (// {Text.Limit:<length>['<ellipsis>]} " is 127.
Long Statement,Coevery.Tokens.Providers,TextTokens,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\TextTokens.cs,Evaluate,The length of the statement  "	.Token (token => token.StartsWith ("Format:"' StringComparison.OrdinalIgnoreCase) ? token.Substring ("Format:".Length) : null' (token' d) => String.Format (d' token)).Token (token => token.StartsWith ("TrimEnd:"' StringComparison.OrdinalIgnoreCase) ? token.Substring ("TrimEnd:".Length) : null' TrimEnd).Token ("UrlEncode"' HttpUtility.UrlEncode).Token ("HtmlEncode"' HttpUtility.HtmlEncode).Token ("LineEncode"' text => text.Replace (System.Environment.NewLine' "<br />")); " is 474.
Long Statement,Coevery.Tokens.Providers,UserTokens,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\UserTokens.cs,Describe,The length of the statement  "	context.For ("User"' T ("User")' T ("User tokens")).Token ("Name"' T ("Name")' T ("Username")).Token ("Email"' T ("Email")' T ("Email Address")).Token ("Id"' T ("Id")' T ("User Id")).Token ("Content"' T ("Content")' T ("The user's content item")); " is 247.
Long Statement,Coevery.Tokens.Providers,UserTokens,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\UserTokens.cs,Evaluate,The length of the statement  "	context.For ("User"' () => _coeveryServices.WorkContext.CurrentUser ?? _anonymousUser).Token ("Name"' u => u.UserName).Token ("Email"' u => u.Email).Token ("Id"' u => u.Id).Chain ("Content"' "Content"' u => u.ContentItem); " is 222.
Long Statement,Coevery.Tokens.Implementation,Tokenizer,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Implementation\Tokenizer.cs,Evaluate,The length of the statement  "	return distinctTokens.Select (Split).GroupBy (item => item.Item1).SelectMany (grouping => _tokenManager.Evaluate (grouping.Key' grouping.ToDictionary (item => item.Item2' item => item.Item3)' data)).Aggregate (replacements' (agg' kv) => { " is 238.
Long Statement,Coevery.Tokens.Implementation,Tokenizer,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Implementation\Tokenizer.cs,Replace,The length of the statement  "	return replacements.Aggregate (tokenset.Item1' (current' replacement) => current.Replace ((hashMode ? "#{" : "{") + replacement.Key + "}"' (options.Encoding ?? ReplaceOptions.NoEncode) (replacement.Key' replacement.Value))); " is 224.
Long Statement,Coevery.Tokens.Implementation,Tokenizer,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Implementation\Tokenizer.cs,Parse,The length of the statement  "			} else if (hashMode && c == '#' && i + 1 < text.Length && text [i + 1] == '{' && (i + 2 > text.Length || text [i + 2] != '{')) { " is 128.
Complex Conditional,Coevery.Tokens.Implementation,Tokenizer,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Implementation\Tokenizer.cs,Parse,The conditional expression  "hashMode && c == '#' && i + 1 < text.Length && text [i + 1] == '{' && (i + 2 > text.Length || text [i + 2] != '{')"  is complex.
Magic Number,Coevery.Tokens.Providers,DateTokens,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\DateTokens.cs,DateTimeRelative,The following statement contains a magic number: if (time.TotalDays > 7)  	return dateTimeUtc.ToString (T ("'on' MMM d yyyy 'at' h:mm tt").ToString ()' _cultureInfo.Value);  
Magic Number,Coevery.Tokens.Providers,DateTokens,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\DateTokens.cs,DateTimeRelative,The following statement contains a magic number: if (time.TotalHours > 24)  	return T.Plural ("1 day ago"' "{0} days ago"' time.Days).ToString ();  
Magic Number,Coevery.Tokens.Providers,DateTokens,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\DateTokens.cs,DateTimeRelative,The following statement contains a magic number: if (time.TotalMinutes > 60)  	return T.Plural ("1 hour ago"' "{0} hours ago"' time.Hours).ToString ();  
Magic Number,Coevery.Tokens.Providers,DateTokens,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\DateTokens.cs,DateTimeRelative,The following statement contains a magic number: if (time.TotalSeconds > 60)  	return T.Plural ("1 minute ago"' "{0} minutes ago"' time.Minutes).ToString ();  
Magic Number,Coevery.Tokens.Providers,DateTokens,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Providers\DateTokens.cs,DateTimeRelative,The following statement contains a magic number: if (time.TotalSeconds > 10)  	return T.Plural ("1 second ago"' "{0} seconds ago"' time.Seconds).ToString ();  
Magic Number,Coevery.Tokens.Implementation,Tokenizer,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Implementation\Tokenizer.cs,Parse,The following statement contains a magic number: if (!String.IsNullOrEmpty (text)) {  	var inToken = false;  	var tokenStart = 0;  	for (var i = 0; i < text.Length; i++) {  		var c = text [i];  		if (c == '{') {  			if (i + 1 < text.Length && text [i + 1] == '{') {  				text = text.Substring (0' i) + text.Substring (i + 1);  				continue;  			}  		} else if (c == '}' && !(inToken)) {  			if (i + 1 < text.Length && text [i + 1] == '}') {  				text = text.Substring (0' i) + text.Substring (i + 1);  				continue;  			}  		}  		if (inToken) {  			if (c == '}') {  				inToken = false;  				var token = text.Substring (tokenStart + 1' i - tokenStart - 1);  				tokens.Add (token);  			}  		} else if (!hashMode && c == '{') {  			inToken = true;  			tokenStart = i;  		} else if (hashMode && c == '#' && i + 1 < text.Length && text [i + 1] == '{' && (i + 2 > text.Length || text [i + 2] != '{')) {  			inToken = true;  			tokenStart = i + 1;  		}  	}  }  
Magic Number,Coevery.Tokens.Implementation,Tokenizer,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Implementation\Tokenizer.cs,Parse,The following statement contains a magic number: if (!String.IsNullOrEmpty (text)) {  	var inToken = false;  	var tokenStart = 0;  	for (var i = 0; i < text.Length; i++) {  		var c = text [i];  		if (c == '{') {  			if (i + 1 < text.Length && text [i + 1] == '{') {  				text = text.Substring (0' i) + text.Substring (i + 1);  				continue;  			}  		} else if (c == '}' && !(inToken)) {  			if (i + 1 < text.Length && text [i + 1] == '}') {  				text = text.Substring (0' i) + text.Substring (i + 1);  				continue;  			}  		}  		if (inToken) {  			if (c == '}') {  				inToken = false;  				var token = text.Substring (tokenStart + 1' i - tokenStart - 1);  				tokens.Add (token);  			}  		} else if (!hashMode && c == '{') {  			inToken = true;  			tokenStart = i;  		} else if (hashMode && c == '#' && i + 1 < text.Length && text [i + 1] == '{' && (i + 2 > text.Length || text [i + 2] != '{')) {  			inToken = true;  			tokenStart = i + 1;  		}  	}  }  
Magic Number,Coevery.Tokens.Implementation,Tokenizer,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Implementation\Tokenizer.cs,Parse,The following statement contains a magic number: for (var i = 0; i < text.Length; i++) {  	var c = text [i];  	if (c == '{') {  		if (i + 1 < text.Length && text [i + 1] == '{') {  			text = text.Substring (0' i) + text.Substring (i + 1);  			continue;  		}  	} else if (c == '}' && !(inToken)) {  		if (i + 1 < text.Length && text [i + 1] == '}') {  			text = text.Substring (0' i) + text.Substring (i + 1);  			continue;  		}  	}  	if (inToken) {  		if (c == '}') {  			inToken = false;  			var token = text.Substring (tokenStart + 1' i - tokenStart - 1);  			tokens.Add (token);  		}  	} else if (!hashMode && c == '{') {  		inToken = true;  		tokenStart = i;  	} else if (hashMode && c == '#' && i + 1 < text.Length && text [i + 1] == '{' && (i + 2 > text.Length || text [i + 2] != '{')) {  		inToken = true;  		tokenStart = i + 1;  	}  }  
Magic Number,Coevery.Tokens.Implementation,Tokenizer,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Implementation\Tokenizer.cs,Parse,The following statement contains a magic number: for (var i = 0; i < text.Length; i++) {  	var c = text [i];  	if (c == '{') {  		if (i + 1 < text.Length && text [i + 1] == '{') {  			text = text.Substring (0' i) + text.Substring (i + 1);  			continue;  		}  	} else if (c == '}' && !(inToken)) {  		if (i + 1 < text.Length && text [i + 1] == '}') {  			text = text.Substring (0' i) + text.Substring (i + 1);  			continue;  		}  	}  	if (inToken) {  		if (c == '}') {  			inToken = false;  			var token = text.Substring (tokenStart + 1' i - tokenStart - 1);  			tokens.Add (token);  		}  	} else if (!hashMode && c == '{') {  		inToken = true;  		tokenStart = i;  	} else if (hashMode && c == '#' && i + 1 < text.Length && text [i + 1] == '{' && (i + 2 > text.Length || text [i + 2] != '{')) {  		inToken = true;  		tokenStart = i + 1;  	}  }  
Magic Number,Coevery.Tokens.Implementation,Tokenizer,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Implementation\Tokenizer.cs,Parse,The following statement contains a magic number: if (inToken) {  	if (c == '}') {  		inToken = false;  		var token = text.Substring (tokenStart + 1' i - tokenStart - 1);  		tokens.Add (token);  	}  } else if (!hashMode && c == '{') {  	inToken = true;  	tokenStart = i;  } else if (hashMode && c == '#' && i + 1 < text.Length && text [i + 1] == '{' && (i + 2 > text.Length || text [i + 2] != '{')) {  	inToken = true;  	tokenStart = i + 1;  }  
Magic Number,Coevery.Tokens.Implementation,Tokenizer,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Implementation\Tokenizer.cs,Parse,The following statement contains a magic number: if (inToken) {  	if (c == '}') {  		inToken = false;  		var token = text.Substring (tokenStart + 1' i - tokenStart - 1);  		tokens.Add (token);  	}  } else if (!hashMode && c == '{') {  	inToken = true;  	tokenStart = i;  } else if (hashMode && c == '#' && i + 1 < text.Length && text [i + 1] == '{' && (i + 2 > text.Length || text [i + 2] != '{')) {  	inToken = true;  	tokenStart = i + 1;  }  
Magic Number,Coevery.Tokens.Implementation,Tokenizer,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Implementation\Tokenizer.cs,Parse,The following statement contains a magic number: if (!hashMode && c == '{') {  	inToken = true;  	tokenStart = i;  } else if (hashMode && c == '#' && i + 1 < text.Length && text [i + 1] == '{' && (i + 2 > text.Length || text [i + 2] != '{')) {  	inToken = true;  	tokenStart = i + 1;  }  
Magic Number,Coevery.Tokens.Implementation,Tokenizer,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Implementation\Tokenizer.cs,Parse,The following statement contains a magic number: if (!hashMode && c == '{') {  	inToken = true;  	tokenStart = i;  } else if (hashMode && c == '#' && i + 1 < text.Length && text [i + 1] == '{' && (i + 2 > text.Length || text [i + 2] != '{')) {  	inToken = true;  	tokenStart = i + 1;  }  
Magic Number,Coevery.Tokens.Implementation,Tokenizer,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Implementation\Tokenizer.cs,Parse,The following statement contains a magic number: if (hashMode && c == '#' && i + 1 < text.Length && text [i + 1] == '{' && (i + 2 > text.Length || text [i + 2] != '{')) {  	inToken = true;  	tokenStart = i + 1;  }  
Magic Number,Coevery.Tokens.Implementation,Tokenizer,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Tokens\Implementation\Tokenizer.cs,Parse,The following statement contains a magic number: if (hashMode && c == '#' && i + 1 < text.Length && text [i + 1] == '{' && (i + 2 > text.Length || text [i + 2] != '{')) {  	inToken = true;  	tokenStart = i + 1;  }  
