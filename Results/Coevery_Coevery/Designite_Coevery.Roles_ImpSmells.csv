Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Coevery.Roles.Services,RolesBasedAuthorizationService,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Roles\Services\RolesBasedAuthorizationService.cs,TryCheckAccess,Cyclomatic complexity of the method is 14
Long Parameter List,Coevery.Roles.Drivers,UserTaskDriver,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Roles\Drivers\UserTaskDriver.cs,UserTaskDriver,The method has 5 parameters.
Long Parameter List,Coevery.Roles.Drivers,UserRolesPartDriver,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Roles\Drivers\UserRolesPartDriver.cs,UserRolesPartDriver,The method has 5 parameters.
Long Parameter List,Coevery.Roles.Services,RoleService,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Roles\Services\RoleService.cs,RoleService,The method has 6 parameters.
Long Identifier,Coevery.Roles.Services,RolesBasedAuthorizationService,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Roles\Services\RolesBasedAuthorizationService.cs,RolesBasedAuthorizationService,The length of the parameter authorizationServiceEventHandler is 32.
Long Statement,Coevery.Roles.Controllers,SystemAdminController,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Roles\Controllers\SystemAdminController.cs,Edit,The length of the statement  "	model.EffectivePermissions = model.RoleCategoryPermissions.SelectMany (group => group.Value).Where (permission => _authorizationService.TryCheckAccess (permission' simulation' null)).Select (permission => permission.Name).Distinct ().ToList (); " is 244.
Long Statement,Coevery.Roles.Controllers,RoleController,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Roles\Controllers\RoleController.cs,Delete,The length of the statement  "		return Request.CreateErrorResponse (HttpStatusCode.NonAuthoritativeInformation' T ("Not authorized to manage roles").Text); " is 123.
Long Statement,Coevery.Roles.Drivers,UserTaskDriver,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Roles\Drivers\UserTaskDriver.cs,Editor,The length of the statement  "			var awaiting = _awaitingActivityRepository.Table.Where (x => x.WorkflowRecord.ContentItemRecord == part.ContentItem.Record && x.ActivityRecord.Name == "UserTask").ToList (); " is 173.
Long Statement,Coevery.Roles.Drivers,UserTaskDriver,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Roles\Drivers\UserTaskDriver.cs,Editor,The length of the statement  "		var awaiting = _awaitingActivityRepository.Table.Where (x => x.WorkflowRecord.ContentItemRecord == part.ContentItem.Record && x.ActivityRecord.Name == "UserTask").ToList (); " is 173.
Long Statement,Coevery.Roles.Drivers,UserRolesPartDriver,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Roles\Drivers\UserRolesPartDriver.cs,Editor,The length of the statement  "	if (!_authorizationService.TryCheckAccess (StandardPermissions.SiteOwner' _authenticationService.GetAuthenticatedUser ()' userRolesPart)) " is 137.
Long Statement,Coevery.Roles.Drivers,UserRolesPartDriver,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Roles\Drivers\UserRolesPartDriver.cs,Editor,The length of the statement  "	if (!_authorizationService.TryCheckAccess (StandardPermissions.SiteOwner' _authenticationService.GetAuthenticatedUser ()' userRolesPart)) " is 137.
Long Statement,Coevery.Roles.Drivers,UserRolesPartDriver,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Roles\Drivers\UserRolesPartDriver.cs,Editor,The length of the statement  "	return ContentShape ("Parts_Roles_UserRoles_Edit"' () => shapeHelper.EditorTemplate (TemplateName: TemplateName' Model: model' Prefix: Prefix)); " is 144.
Long Statement,Coevery.Roles.Forms,SelectRolesForms,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Roles\Forms\SelectRolesForms.cs,Describe,The length of the statement  "		var f = Shape.Form (Id: "AnyOfRoles"' _Parts: Shape.SelectList (Id: "role"' Name: "Roles"' Title: T ("Roles")' Description: T ("Select some roles.")' Size: 10' Multiple: true)); " is 177.
Long Statement,Coevery.Roles.Forms,UserTaskForms,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Roles\Forms\UserTaskForms.cs,Describe,The length of the statement  "		var f = Shape.Form (Id: "AnyOfRoles"' _Parts: Shape.SelectList (Id: "role"' Name: "Roles"' Title: T ("Roles")' Description: T ("Select some roles.")' Size: 10' Multiple: true)' _Message: Shape.Textbox (Id: "actions"' Name: "Actions"' Title: T ("Available actions.")' Description: T ("A comma separated list of actions.")' Classes: new[] { " is 338.
Long Statement,Coevery.Roles.ImportExport,RolesExportEventHandler,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Roles\ImportExport\RolesExportEventHandler.cs,Exported,The length of the statement  "		root.Add (new XElement ("Role"' new XAttribute ("Name"' role.Name)' new XAttribute ("Permissions"' string.Join ("'"' role.RolesPermissions.Select (rolePermission => rolePermission.Permission.Name))))); " is 201.
Long Statement,Coevery.Roles.ImportExport,RolesRecipeHandler,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Roles\ImportExport\RolesRecipeHandler.cs,ExecuteRecipeStep,The length of the statement  "		var permissionsValid = permissions.Where (permission => installedPermissions.Any (x => x.Name == permission)).ToList (); " is 120.
Long Statement,Coevery.Roles.ImportExport,RolesRecipeHandler,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Roles\ImportExport\RolesRecipeHandler.cs,ExecuteRecipeStep,The length of the statement  "		_roleService.UpdateRole (role.Id' role.Name' permissionsValid.Union (role.RolesPermissions.Select (p => p.Permission.Name))); " is 125.
Long Statement,Coevery.Roles,RolesDataMigration,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Roles\Migrations.cs,Create,The length of the statement  "	SchemaBuilder.CreateTable ("PermissionRecord"' table => table.Column<int> ("Id"' column => column.PrimaryKey ().Identity ()).Column<string> ("Name").Column<string> ("FeatureName").Column<string> ("Description")); " is 212.
Long Statement,Coevery.Roles,RolesDataMigration,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Roles\Migrations.cs,Create,The length of the statement  "	SchemaBuilder.CreateTable ("RoleRecord"' table => table.Column<int> ("Id"' column => column.PrimaryKey ().Identity ()).Column<string> ("Name")); " is 144.
Long Statement,Coevery.Roles,RolesDataMigration,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Roles\Migrations.cs,Create,The length of the statement  "	SchemaBuilder.CreateTable ("RolesPermissionsRecord"' table => table.Column<int> ("Id"' column => column.PrimaryKey ().Identity ()).Column<int> ("Role_id").Column<int> ("Permission_id").Column<int> ("RoleRecord_Id")); " is 216.
Long Statement,Coevery.Roles,RolesDataMigration,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Roles\Migrations.cs,Create,The length of the statement  "	SchemaBuilder.CreateTable ("UserRolesPartRecord"' table => table.Column<int> ("Id"' column => column.PrimaryKey ().Identity ()).Column<int> ("UserId").Column<int> ("Role_id")); " is 176.
Long Statement,Coevery.Roles.Services,RolesBasedAuthorizationService,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Roles\Services\RolesBasedAuthorizationService.cs,TryCheckAccess,The length of the statement  "			if (!String.IsNullOrEmpty (_workContextAccessor.GetContext ().CurrentSite.SuperUser) && String.Equals (context.User.UserName' _workContextAccessor.GetContext ().CurrentSite.SuperUser' StringComparison.Ordinal)) { " is 212.
Long Statement,Coevery.Roles.Services,RolesBasedAuthorizationService,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Roles\Services\RolesBasedAuthorizationService.cs,TryCheckAccess,The length of the statement  "					if (grantingNames.Any (grantingName => String.Equals (possessedName' grantingName' StringComparison.OrdinalIgnoreCase))) { " is 122.
Long Statement,Coevery.Roles.Services,RoleService,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Roles\Services\RoleService.cs,GetFeatureName,The length of the statement  "	throw new ArgumentException (T ("Permission {0} was not found in any of the installed modules."' permissionName).ToString ()); " is 126.
Long Statement,Coevery.Roles.Services,RoleService,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Roles\Services\RoleService.cs,GetPermissionDescription,The length of the statement  "	throw new ArgumentException (T ("Permission {0} was not found in any of the installed modules."' permissionName).ToString ()); " is 126.
Magic Number,Coevery.Roles,RolesDataMigration,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Roles\Migrations.cs,Create,The following statement contains a magic number: return 2;  
Magic Number,Coevery.Roles,RolesDataMigration,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Roles\Migrations.cs,UpdateFrom1,The following statement contains a magic number: return 2;  
Magic Number,Coevery.Roles.Services,RolesBasedAuthorizationService,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Roles\Services\RolesBasedAuthorizationService.cs,TryCheckAccess,The following statement contains a magic number: for (var adjustmentLimiter = 0; adjustmentLimiter != 3; ++adjustmentLimiter) {  	if (!context.Granted && context.User != null) {  		if (!String.IsNullOrEmpty (_workContextAccessor.GetContext ().CurrentSite.SuperUser) && String.Equals (context.User.UserName' _workContextAccessor.GetContext ().CurrentSite.SuperUser' StringComparison.Ordinal)) {  			context.Granted = true;  		}  	}  	if (!context.Granted) {  		// determine which set of permissions would satisfy the access check  		var grantingNames = PermissionNames (context.Permission' Enumerable.Empty<string> ()).Distinct ().ToArray ();  		// determine what set of roles should be examined by the access check  		IEnumerable<string> rolesToExamine;  		if (context.User == null) {  			rolesToExamine = AnonymousRole;  		} else if (context.User.Has<IUserRoles> ()) {  			// the current user is not null' so get his roles and add "Authenticated" to it  			rolesToExamine = context.User.As<IUserRoles> ().Roles;  			// when it is a simulated anonymous user in the admin  			if (!rolesToExamine.Contains (AnonymousRole [0])) {  				rolesToExamine = rolesToExamine.Concat (AuthenticatedRole);  			}  		} else {  			// the user is not null and has no specific role' then it's just "Authenticated"  			rolesToExamine = AuthenticatedRole;  		}  		foreach (var role in rolesToExamine) {  			foreach (var permissionName in _roleService.GetPermissionsForRoleByName (role)) {  				string possessedName = permissionName;  				if (grantingNames.Any (grantingName => String.Equals (possessedName' grantingName' StringComparison.OrdinalIgnoreCase))) {  					context.Granted = true;  				}  				if (context.Granted)  					break;  			}  			if (context.Granted)  				break;  		}  	}  	context.Adjusted = false;  	_authorizationServiceEventHandler.Adjust (context);  	if (!context.Adjusted)  		break;  }  
