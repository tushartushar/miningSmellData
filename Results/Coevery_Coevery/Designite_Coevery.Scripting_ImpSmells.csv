Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Coevery.Scripting.Compiler,InterpreterVisitor,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Scripting\Compiler\InterpreterVisitor.cs,VisitBinary,Cyclomatic complexity of the method is 16
Complex Method,Coevery.Scripting.Compiler,Parser,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Scripting\Compiler\Parser.cs,ParsePrimaryExpression,Cyclomatic complexity of the method is 9
Complex Method,Coevery.Scripting.Compiler,Parser,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Scripting\Compiler\Parser.cs,ParseMethodCallExpression,Cyclomatic complexity of the method is 15
Complex Method,Coevery.Scripting.Compiler,Parser,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Scripting\Compiler\Parser.cs,IsValidMethodArgumentToken,Cyclomatic complexity of the method is 13
Complex Method,Coevery.Scripting.Compiler,Tokenizer,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Scripting\Compiler\Tokenizer.cs,NextToken,Cyclomatic complexity of the method is 26
Complex Method,Coevery.Scripting.Compiler,Tokenizer,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Scripting\Compiler\Tokenizer.cs,CreateIdentiferOrKeyword,Cyclomatic complexity of the method is 8
Complex Method,Coevery.Scripting.Compiler,Tokenizer,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Scripting\Compiler\Tokenizer.cs,LexSingleQuotedStringLiteral,Cyclomatic complexity of the method is 13
Long Statement,Coevery.Scripting.Compiler,PrimitiveType,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Scripting\Compiler\PrimitiveType.cs,InstanceFor,The length of the statement  "	throw new InvalidOperationException (string.Format ("Scripting engine internal error: no primitive type for value '{0}'"' value)); " is 130.
Long Statement,Coevery.Scripting.Compiler,InterpreterVisitor,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Scripting\Compiler\InterpreterVisitor.cs,VisitUnary,The length of the statement  "		throw new InvalidOperationException (string.Format ("Internal error: unary operator '{0}' is not supported."' node.Token.Kind)); " is 128.
Long Statement,Coevery.Scripting.Compiler,InterpreterVisitor,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Scripting\Compiler\InterpreterVisitor.cs,VisitBinary,The length of the statement  "		return EvaluateArithmetic (left' right' (a' b) => b.Int32Value == 0 ? Error ("Attempted to divide by zero.") : Result (a.Int32Value / b.Int32Value)); " is 149.
Long Statement,Coevery.Scripting.Compiler,InterpreterVisitor,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Scripting\Compiler\InterpreterVisitor.cs,VisitBinary,The length of the statement  "		throw new InvalidOperationException (string.Format ("Internal error: binary operator '{0}' is not supported."' node.Token.Kind)); " is 129.
Long Statement,Coevery.Scripting.Compiler,InterpreterVisitor,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Scripting\Compiler\InterpreterVisitor.cs,VisitMethodCall,The length of the statement  "	return Result (_context.MethodInvocationCallback ((string)node.Target.Value' arguments.Select (arg => arg.Value).ToList ())); " is 125.
Long Statement,Coevery.Scripting.Compiler,Parser,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Scripting\Compiler\Parser.cs,ParseComparisonExpression,The length of the statement  "	var token = IsMatch (TokenKind.LessThan' TokenKind.LessThanEqual) ?? IsMatch (TokenKind.GreaterThan' TokenKind.GreaterThanEqual); " is 129.
Long Statement,Coevery.Scripting.Compiler,Token,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Scripting\Compiler\Token.cs,ToString,The length of the statement  "	return Value == null ? String.Format ("Token '{0}' at position {1}"' Kind' Position) : String.Format ("Token '{0}' ({1}) at position {2}"' Kind' Value' Position); " is 162.
Long Statement,Coevery.Scripting.Rules,ConditionActions,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Scripting\Rules\ConditionActions.cs,Describe,The length of the statement  "	describe.For ("Condition"' T ("Conditions")' T ("Conditions")).Element ("ScriptCondition"' T ("Script condition")' T ("Evaluates a boolean using a scripting engine.")' (Func<dynamic' bool>)Evaluate' display' "ScriptCondition"); " is 227.
Long Statement,Coevery.Scripting.Rules,ConditionForms,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Scripting\Rules\ConditionForms.cs,Describe,The length of the statement  "	Func<IShapeFactory' dynamic> form = shape => Shape.Form (Id: "ScriptCondition"' _Description: Shape.Textbox (Id: "description"' Name: "description"' Title: T ("Description")' Description: T ("Message that will be displayed in the Actions list.")' Classes: new[] { " is 263.
Long Statement,Coevery.Scripting.Rules,ConditionForms,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Scripting\Rules\ConditionForms.cs,Describe,The length of the statement  "	})' _Condition: Shape.TextArea (Id: "condition"' Name: "condition"' Title: T ("Condition")' Description: T ("Enter a valid boolean expression to evaluate.")' Classes: new[] { " is 174.
Missing Default,Coevery.Scripting.Compiler,Parser,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Scripting\Compiler\Parser.cs,ParseMethodCallExpression,The following switch statement is missing a default case: switch (_lexer.Token ().Kind) {  case TokenKind.And:  case TokenKind.Or:  case TokenKind.Not:  	endOfMethodCall = true;  	break;  }  
Missing Default,Coevery.Scripting.Compiler,Tokenizer,F:\newReposMay17\Coevery_Coevery\src\Coevery.Web\Modules\Coevery.Scripting\Compiler\Tokenizer.cs,NextToken,The following switch statement is missing a default case: switch (ch) {  case '(':  	NextCharacter ();  	return CreateToken (TokenKind.OpenParen);  case ')':  	NextCharacter ();  	return CreateToken (TokenKind.CloseParen);  case ''':  	NextCharacter ();  	return CreateToken (TokenKind.Comma);  case '+':  	NextCharacter ();  	return CreateToken (TokenKind.Plus);  case '-':  	NextCharacter ();  	return CreateToken (TokenKind.Minus);  case '*':  	NextCharacter ();  	return CreateToken (TokenKind.Mul);  case '/':  	NextCharacter ();  	return CreateToken (TokenKind.Div);  case '"':  	return LexStringLiteral ();  case '\'':  	return LexSingleQuotedStringLiteral ();  case '!':  	return LexNotSign ();  case '|':  	return LexOrSign ();  case '&':  	return LexAndSign ();  case '=':  	return LexEqual ();  case '<':  	return LexLessThan ();  case '>':  	return LexGreaterThan ();  }  
