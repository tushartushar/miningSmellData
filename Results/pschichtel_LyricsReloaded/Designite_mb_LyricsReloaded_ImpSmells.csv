Implementation smell,Namespace,Class,File,Method,Description
Long Method,CubeIsland.LyricsReloaded.Provider,ProviderManager,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Provider\ProviderManager.cs,loadProvider,The method has 195 lines of code.
Complex Method,CubeIsland.LyricsReloaded.Provider,ProviderManager,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Provider\ProviderManager.cs,loadProvider,Cyclomatic complexity of the method is 19
Long Parameter List,CubeIsland.LyricsReloaded.Provider,Provider,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Provider\Provider.cs,Provider,The method has 9 parameters. Parameters: lyricsReloaded' name' quality' variables' postFilters' validations' headers' loader' rateLimit
Long Parameter List,MusicBeePlugin,Plugin,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Plugin.cs,RetrieveLyrics,The method has 6 parameters. Parameters: source' artist' title' album' preferSynced' providerName
Long Identifier,MusicBeePlugin,MusicBeeApiInterface,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\MusicBeeInterface.cs,,The length of the parameter Setting_GetPersistentStoragePath is 32.
Long Identifier,MusicBeePlugin,MusicBeeApiInterface,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\MusicBeeInterface.cs,,The length of the parameter Setting_IsWindowBordersSkinned is 30.
Long Identifier,MusicBeePlugin,MusicBeeApiInterface,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\MusicBeeInterface.cs,,The length of the parameter NowPlayingList_QueryGetNextFile is 31.
Long Identifier,MusicBeePlugin,MusicBeeApiInterface,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\MusicBeeInterface.cs,,The length of the parameter NowPlayingList_PlayLibraryShuffled is 34.
Long Identifier,MusicBeePlugin,MusicBeeApiInterface,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\MusicBeeInterface.cs,,The length of the parameter NowPlayingList_QueryGetAllFiles is 31.
Long Identifier,MusicBeePlugin,MusicBeeApiInterface,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\MusicBeeInterface.cs,,The length of the parameter NowPlayingList_GetCurrentIndex is 30.
Long Identifier,MusicBeePlugin,MusicBeeApiInterface,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\MusicBeeInterface.cs,,The length of the parameter NowPlayingList_GetFileProperty is 30.
Long Identifier,MusicBeePlugin,MusicBeeApiInterface,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\MusicBeeInterface.cs,,The length of the parameter NowPlayingList_IsAnyPriorTracks is 31.
Long Identifier,MusicBeePlugin,MusicBeeApiInterface,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\MusicBeeInterface.cs,,The length of the parameter NowPlayingList_IsAnyFollowingTracks is 35.
Long Identifier,MusicBeePlugin,MusicBeeApiInterface,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\MusicBeeInterface.cs,,The length of the parameter Player_GetStopAfterCurrentEnabled is 33.
Long Identifier,MusicBeePlugin,MusicBeeApiInterface,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\MusicBeeInterface.cs,,The length of the parameter NowPlaying_GetDownloadedArtwork is 31.
Long Identifier,MusicBeePlugin,MusicBeeApiInterface,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\MusicBeeInterface.cs,,The length of the parameter NowPlaying_GetDownloadedLyrics is 30.
Long Identifier,MusicBeePlugin,MusicBeeApiInterface,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\MusicBeeInterface.cs,,The length of the parameter MB_CreateParameterisedBackgroundTask is 36.
Long Identifier,MusicBeePlugin,MusicBeeApiInterface,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\MusicBeeInterface.cs,,The length of the parameter Library_QueryGetLookupTableValue is 32.
Long Identifier,MusicBeePlugin,MusicBeeApiInterface,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\MusicBeeInterface.cs,,The length of the parameter Library_GetArtistPicture_Managed is 32.
Long Statement,CubeIsland.LyricsReloaded,LyricsReloaded,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\LyricsReloaded.cs,checkForNewVersion,The length of the statement  "                    WebResponse respone = cl.get("https://raw.githubusercontent.com/pschichtel/LyricsReloaded/stable/LyricsReloaded/Properties/AssemblyInfo.cs"); " is 141.
Long Statement,CubeIsland.LyricsReloaded,LyricsReloaded,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\LyricsReloaded.cs,checkForNewVersion,The length of the statement  "                            Regex versionRegex = new Regex("AssemblyVersion\\(\"(?<version>[^\\s\\*]+)\"\\)"' RegexOptions.Compiled | RegexOptions.Singleline); " is 131.
Long Statement,CubeIsland.LyricsReloaded,LyricsReloaded,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\LyricsReloaded.cs,loadDefaultConfiguration,The length of the statement  "            foreach (PropertyInfo propInfo in typeof (Properties.Resources).GetProperties(BindingFlags.Public | BindingFlags.Static)) " is 121.
Long Statement,CubeIsland.LyricsReloaded,Logger,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Logger.cs,write,The length of the statement  "            writer.WriteLine(DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss") + " [" + type.ToUpper() + "] " + string.Format(message' args)); " is 125.
Long Statement,CubeIsland.LyricsReloaded,WebClient,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\WebClient.cs,executeRequest,The length of the statement  "                    encoding = Encoding.GetEncoding(response.CharacterSet); // the response encoding specified by the server. this should be enough " is 127.
Long Statement,CubeIsland.LyricsReloaded.Filters,RegexReplacer,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Filters\Filter.cs,filter,The length of the statement  "                throw new InvalidConfigurationException("The regex filter needs at least 2 arguments: regex' <pattern>' <replacement>[' <options>]"); " is 133.
Long Statement,CubeIsland.LyricsReloaded.Filters,BrokenCharFixer,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Filters\Filter.cs,filter,The length of the statement  "                throw new InvalidConfigurationException("The fix_broken_chars filter needs 2 arguments: fix_broken_chars' <first char>' <encoding>"); " is 133.
Long Statement,CubeIsland.LyricsReloaded.Provider,ProviderManager,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Provider\ProviderManager.cs,loadProvider,The length of the statement  "                            node = (variableConfig.Children.ContainsKey(Node.Variables.FILTERS) ? variableConfig.Children[Node.Variables.FILTERS] : null); " is 126.
Long Statement,CubeIsland.LyricsReloaded.Provider,ProviderManager,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Provider\ProviderManager.cs,loadProvider,The length of the statement  "            Provider provider = new Provider(lyricsReloaded' name' quality' variables' postFilters' validations' headers' loader' rateLimit); " is 129.
Long Statement,MusicBeePlugin,Plugin,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Plugin.cs,RetrieveLyrics,The length of the statement  "            lyricsReloaded.getLogger().debug("Lyrics request: {0} - {1} - {2} - {3} - {4}"' source' artist' title' album' providerName); " is 124.
Complex Conditional,CubeIsland.LyricsReloaded.Filters,NonAsciiStripper,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Filters\Filter.cs,strip,The conditional expression  "(c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')"  is complex.
Empty Catch Block,CubeIsland.LyricsReloaded,Logger,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Logger.cs,close,The method has an empty catch block.
Empty Catch Block,CubeIsland.LyricsReloaded,WebClient,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\WebClient.cs,executeRequest,The method has an empty catch block.
Magic Number,CubeIsland.LyricsReloaded,LyricsReloaded,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\LyricsReloaded.cs,checkForNewVersion,The following statement contains a magic number: Thread updateChecker = new Thread(() => {                  WebClient cl = new WebClient(lr' 5000);                  try                  {                      bool result = false;                      WebResponse respone = cl.get("https://raw.githubusercontent.com/pschichtel/LyricsReloaded/stable/LyricsReloaded/Properties/AssemblyInfo.cs");                      if (respone != null)                      {                          String content = respone.getContent();                          if (!String.IsNullOrWhiteSpace(content))                          {                              Regex versionRegex = new Regex("AssemblyVersion\\(\"(?<version>[^\\s\\*]+)\"\\)"' RegexOptions.Compiled | RegexOptions.Singleline);                              Match match = versionRegex.Match(content);                              if (match.Success)                              {                                  Version remote = Version.Parse(match.Groups["version"].Value);                                  result = remote.CompareTo(local) > 0;                              }                          }                        }                        callback(result);                  }                  catch (Exception e)                  {                      lr.logger.error("Failed to check for updates: {0}"' e.Message);                  }              }) {                  IsBackground = true'                  Name = "LyricsReloaded - Version Check"              };
Magic Number,CubeIsland.LyricsReloaded,WebClient,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\WebClient.cs,executeRequest,The following statement contains a magic number: using (response)              {                  if (response.CharacterSet != null)                  {                      encoding = Encoding.GetEncoding(response.CharacterSet); // the response encoding specified by the server. this should be enough                  }                    Stream responsesStream = response.GetResponseStream();                  if (responsesStream != null)                  {                      responsesStream.ReadTimeout = timeout;                      if (String.Compare(response.ContentEncoding' "gzip"' StringComparison.OrdinalIgnoreCase) == 0)                      {                          // gzip compression detected' wrap the stream with a decompressing gzip stream                          lyricsReloaded.getLogger().debug("gzip compression detected");                          responsesStream = new GZipStream(responsesStream' CompressionMode.Decompress);                      }                      MemoryStream content = new MemoryStream();                      const int bufferSize = 4096;                      byte[] buffer = new byte[bufferSize];                      int bytesRead;                        do                      {                          bytesRead = responsesStream.Read(buffer' 0' bufferSize);                          if (bytesRead <= 0)                          {                              break;                          }                          content.Write(buffer' 0' bytesRead);                      }                      while (bytesRead > 0);                      responsesStream.Close();                        contentString = encoding.GetString(content.GetBuffer()); // decode the data with the currently known encoding                      Match match = ENCODING_REGEX.Match(contentString); // search for a encoding specified in the content                      if (match.Success)                      {                          try                          {                              Encoding tmp = Encoding.GetEncoding(match.Groups[1].ToString()); // try to get a encoding from the name                              if (!encoding.Equals(tmp))                              {                                  encoding = tmp;                                  contentString = encoding.GetString(content.GetBuffer()); // decode again with the newly found encoding                              }                          }                          catch (ArgumentException)                          {}                      }                      content.Close();                  }                  webResponse = new WebResponse(contentString' encoding' response.Headers);              }
Magic Number,CubeIsland.LyricsReloaded.Filters,RegexReplacer,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Filters\Filter.cs,filter,The following statement contains a magic number: if (args.Length < 2)              {                  throw new InvalidConfigurationException("The regex filter needs at least 2 arguments: regex' <pattern>' <replacement>[' <options>]");              }
Magic Number,CubeIsland.LyricsReloaded.Filters,RegexReplacer,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Filters\Filter.cs,filter,The following statement contains a magic number: if (args.Length > 2)              {                  optionString = args[2];              }
Magic Number,CubeIsland.LyricsReloaded.Filters,RegexReplacer,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Filters\Filter.cs,filter,The following statement contains a magic number: if (args.Length > 2)              {                  optionString = args[2];              }
Magic Number,CubeIsland.LyricsReloaded.Filters,ReplaceFilter,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Filters\Filter.cs,filter,The following statement contains a magic number: if (args.Length < 2)              {                  throw new InvalidConfigurationException("The replace filter requires 2 parameters: replace' <search>' <replacement>");              }
Magic Number,CubeIsland.LyricsReloaded.Filters,BrokenCharFixer,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Filters\Filter.cs,filter,The following statement contains a magic number: if (args.Length < 2 || args[0].Length == 0)              {                  throw new InvalidConfigurationException("The fix_broken_chars filter needs 2 arguments: fix_broken_chars' <first char>' <encoding>");              }
Magic Number,CubeIsland.LyricsReloaded.Provider,ProviderManager,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Provider\ProviderManager.cs,loadProvider,The following statement contains a magic number: ushort quality = 50;
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: long periodLength = 1000 * 60 * 60;
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: long periodLength = 1000 * 60 * 60;
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: long periodLength = 1000 * 60 * 60;
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: if (parts.Length > 1)              {                  switch (parts[1].Trim().ToLower())                  {                      case "second":                          periodLength = 1000L;                          break;                      case "minute":                          periodLength = 1000L * 60;                          break;                      case "hour":                          periodLength = 1000L * 60 * 60;                          break;                      case "day":                          periodLength = 1000L * 60 * 60 * 24;                          break;                      case "week":                          periodLength = 1000L * 60 * 60 * 24 * 7;                          break;                      case "month":                          periodLength = 1000L * 60 * 60 * 24 * 30;                          break;                  }              }
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: if (parts.Length > 1)              {                  switch (parts[1].Trim().ToLower())                  {                      case "second":                          periodLength = 1000L;                          break;                      case "minute":                          periodLength = 1000L * 60;                          break;                      case "hour":                          periodLength = 1000L * 60 * 60;                          break;                      case "day":                          periodLength = 1000L * 60 * 60 * 24;                          break;                      case "week":                          periodLength = 1000L * 60 * 60 * 24 * 7;                          break;                      case "month":                          periodLength = 1000L * 60 * 60 * 24 * 30;                          break;                  }              }
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: if (parts.Length > 1)              {                  switch (parts[1].Trim().ToLower())                  {                      case "second":                          periodLength = 1000L;                          break;                      case "minute":                          periodLength = 1000L * 60;                          break;                      case "hour":                          periodLength = 1000L * 60 * 60;                          break;                      case "day":                          periodLength = 1000L * 60 * 60 * 24;                          break;                      case "week":                          periodLength = 1000L * 60 * 60 * 24 * 7;                          break;                      case "month":                          periodLength = 1000L * 60 * 60 * 24 * 30;                          break;                  }              }
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: if (parts.Length > 1)              {                  switch (parts[1].Trim().ToLower())                  {                      case "second":                          periodLength = 1000L;                          break;                      case "minute":                          periodLength = 1000L * 60;                          break;                      case "hour":                          periodLength = 1000L * 60 * 60;                          break;                      case "day":                          periodLength = 1000L * 60 * 60 * 24;                          break;                      case "week":                          periodLength = 1000L * 60 * 60 * 24 * 7;                          break;                      case "month":                          periodLength = 1000L * 60 * 60 * 24 * 30;                          break;                  }              }
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: if (parts.Length > 1)              {                  switch (parts[1].Trim().ToLower())                  {                      case "second":                          periodLength = 1000L;                          break;                      case "minute":                          periodLength = 1000L * 60;                          break;                      case "hour":                          periodLength = 1000L * 60 * 60;                          break;                      case "day":                          periodLength = 1000L * 60 * 60 * 24;                          break;                      case "week":                          periodLength = 1000L * 60 * 60 * 24 * 7;                          break;                      case "month":                          periodLength = 1000L * 60 * 60 * 24 * 30;                          break;                  }              }
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: if (parts.Length > 1)              {                  switch (parts[1].Trim().ToLower())                  {                      case "second":                          periodLength = 1000L;                          break;                      case "minute":                          periodLength = 1000L * 60;                          break;                      case "hour":                          periodLength = 1000L * 60 * 60;                          break;                      case "day":                          periodLength = 1000L * 60 * 60 * 24;                          break;                      case "week":                          periodLength = 1000L * 60 * 60 * 24 * 7;                          break;                      case "month":                          periodLength = 1000L * 60 * 60 * 24 * 30;                          break;                  }              }
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: if (parts.Length > 1)              {                  switch (parts[1].Trim().ToLower())                  {                      case "second":                          periodLength = 1000L;                          break;                      case "minute":                          periodLength = 1000L * 60;                          break;                      case "hour":                          periodLength = 1000L * 60 * 60;                          break;                      case "day":                          periodLength = 1000L * 60 * 60 * 24;                          break;                      case "week":                          periodLength = 1000L * 60 * 60 * 24 * 7;                          break;                      case "month":                          periodLength = 1000L * 60 * 60 * 24 * 30;                          break;                  }              }
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: if (parts.Length > 1)              {                  switch (parts[1].Trim().ToLower())                  {                      case "second":                          periodLength = 1000L;                          break;                      case "minute":                          periodLength = 1000L * 60;                          break;                      case "hour":                          periodLength = 1000L * 60 * 60;                          break;                      case "day":                          periodLength = 1000L * 60 * 60 * 24;                          break;                      case "week":                          periodLength = 1000L * 60 * 60 * 24 * 7;                          break;                      case "month":                          periodLength = 1000L * 60 * 60 * 24 * 30;                          break;                  }              }
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: if (parts.Length > 1)              {                  switch (parts[1].Trim().ToLower())                  {                      case "second":                          periodLength = 1000L;                          break;                      case "minute":                          periodLength = 1000L * 60;                          break;                      case "hour":                          periodLength = 1000L * 60 * 60;                          break;                      case "day":                          periodLength = 1000L * 60 * 60 * 24;                          break;                      case "week":                          periodLength = 1000L * 60 * 60 * 24 * 7;                          break;                      case "month":                          periodLength = 1000L * 60 * 60 * 24 * 30;                          break;                  }              }
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: if (parts.Length > 1)              {                  switch (parts[1].Trim().ToLower())                  {                      case "second":                          periodLength = 1000L;                          break;                      case "minute":                          periodLength = 1000L * 60;                          break;                      case "hour":                          periodLength = 1000L * 60 * 60;                          break;                      case "day":                          periodLength = 1000L * 60 * 60 * 24;                          break;                      case "week":                          periodLength = 1000L * 60 * 60 * 24 * 7;                          break;                      case "month":                          periodLength = 1000L * 60 * 60 * 24 * 30;                          break;                  }              }
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: if (parts.Length > 1)              {                  switch (parts[1].Trim().ToLower())                  {                      case "second":                          periodLength = 1000L;                          break;                      case "minute":                          periodLength = 1000L * 60;                          break;                      case "hour":                          periodLength = 1000L * 60 * 60;                          break;                      case "day":                          periodLength = 1000L * 60 * 60 * 24;                          break;                      case "week":                          periodLength = 1000L * 60 * 60 * 24 * 7;                          break;                      case "month":                          periodLength = 1000L * 60 * 60 * 24 * 30;                          break;                  }              }
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: if (parts.Length > 1)              {                  switch (parts[1].Trim().ToLower())                  {                      case "second":                          periodLength = 1000L;                          break;                      case "minute":                          periodLength = 1000L * 60;                          break;                      case "hour":                          periodLength = 1000L * 60 * 60;                          break;                      case "day":                          periodLength = 1000L * 60 * 60 * 24;                          break;                      case "week":                          periodLength = 1000L * 60 * 60 * 24 * 7;                          break;                      case "month":                          periodLength = 1000L * 60 * 60 * 24 * 30;                          break;                  }              }
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: if (parts.Length > 1)              {                  switch (parts[1].Trim().ToLower())                  {                      case "second":                          periodLength = 1000L;                          break;                      case "minute":                          periodLength = 1000L * 60;                          break;                      case "hour":                          periodLength = 1000L * 60 * 60;                          break;                      case "day":                          periodLength = 1000L * 60 * 60 * 24;                          break;                      case "week":                          periodLength = 1000L * 60 * 60 * 24 * 7;                          break;                      case "month":                          periodLength = 1000L * 60 * 60 * 24 * 30;                          break;                  }              }
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: if (parts.Length > 1)              {                  switch (parts[1].Trim().ToLower())                  {                      case "second":                          periodLength = 1000L;                          break;                      case "minute":                          periodLength = 1000L * 60;                          break;                      case "hour":                          periodLength = 1000L * 60 * 60;                          break;                      case "day":                          periodLength = 1000L * 60 * 60 * 24;                          break;                      case "week":                          periodLength = 1000L * 60 * 60 * 24 * 7;                          break;                      case "month":                          periodLength = 1000L * 60 * 60 * 24 * 30;                          break;                  }              }
Magic Number,CubeIsland.LyricsReloaded.Validation,ValidationCollection,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Validation\ValidationCollection.cs,parseFilterNode,The following statement contains a magic number: if (spaceIndex == 3 && name.Substring(0' 3).Equals("not"' StringComparison.OrdinalIgnoreCase))              {                  inverted = true;                  name = name.Substring(4).Trim();              }
Magic Number,CubeIsland.LyricsReloaded.Validation,ValidationCollection,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Validation\ValidationCollection.cs,parseFilterNode,The following statement contains a magic number: if (spaceIndex == 3 && name.Substring(0' 3).Equals("not"' StringComparison.OrdinalIgnoreCase))              {                  inverted = true;                  name = name.Substring(4).Trim();              }
Magic Number,CubeIsland.LyricsReloaded.Validation,ValidationCollection,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Validation\ValidationCollection.cs,parseFilterNode,The following statement contains a magic number: if (spaceIndex == 3 && name.Substring(0' 3).Equals("not"' StringComparison.OrdinalIgnoreCase))              {                  inverted = true;                  name = name.Substring(4).Trim();              }
Magic Number,CubeIsland.LyricsReloaded.Validation,MatchesValidator,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Validation\Validator.cs,validate,The following statement contains a magic number: if (args.Length > 1)              {                  options = Pattern.regexOptionsFromString(args[2].Trim());              }
Magic Number,CubeIsland.LyricsReloaded.Provider.Loader,StaticLoaderFactory,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Provider\Loader\StaticLoader.cs,StaticLoaderFactory,The following statement contains a magic number: webClient = new WebClient(lyricsReloaded' 5000);
Magic Number,MusicBeePlugin,Plugin,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Plugin.cs,Initialise,The following statement contains a magic number: info.MinInterfaceVersion = 20;
Magic Number,MusicBeePlugin,Plugin,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Plugin.cs,Initialise,The following statement contains a magic number: info.MinApiRevision = 25;
Magic Number,MusicBeePlugin,Plugin,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Plugin.cs,ReceiveNotification,The following statement contains a magic number: switch (type)              {                  case NotificationType.PluginStartup:                      String proxySetting = musicBee.Setting_GetWebProxy();                      if (!string.IsNullOrEmpty(proxySetting))                      {                          lyricsReloaded.getLogger().debug("Proxy setting found");                          string[] raw = proxySetting.Split(Convert.ToChar(0));                          WebProxy proxy = new WebProxy(raw[0]);                          if (raw.Length >= 3)                          {                              lyricsReloaded.getLogger().debug("Proxy credentials found");                              proxy.Credentials = new NetworkCredential(raw[1]' raw[2]);                          }                          lyricsReloaded.setProxy(proxy);                      }                        lyricsReloaded.checkForNewVersion(newAvailable => {                          if (newAvailable)                          {                              MessageBox.Show("A new version is available!"' "LyricsReloaded!");                          }                      });                        break;              }
Magic Number,MusicBeePlugin,Plugin,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Plugin.cs,ReceiveNotification,The following statement contains a magic number: switch (type)              {                  case NotificationType.PluginStartup:                      String proxySetting = musicBee.Setting_GetWebProxy();                      if (!string.IsNullOrEmpty(proxySetting))                      {                          lyricsReloaded.getLogger().debug("Proxy setting found");                          string[] raw = proxySetting.Split(Convert.ToChar(0));                          WebProxy proxy = new WebProxy(raw[0]);                          if (raw.Length >= 3)                          {                              lyricsReloaded.getLogger().debug("Proxy credentials found");                              proxy.Credentials = new NetworkCredential(raw[1]' raw[2]);                          }                          lyricsReloaded.setProxy(proxy);                      }                        lyricsReloaded.checkForNewVersion(newAvailable => {                          if (newAvailable)                          {                              MessageBox.Show("A new version is available!"' "LyricsReloaded!");                          }                      });                        break;              }
Magic Number,MusicBeePlugin,MusicBeeApiInterface,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\MusicBeeInterface.cs,Initialise,The following statement contains a magic number: CopyMemory(ref this' apiInterfacePtr' 4);
Magic Number,MusicBeePlugin,MusicBeeApiInterface,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\MusicBeeInterface.cs,Initialise,The following statement contains a magic number: if (MusicBeeVersion == MusicBeeVersion.v2_0)                      // MusicBee version 2.0 - Api methods > revision 25 are not available                      CopyMemory(ref this' apiInterfacePtr' 456);                  else                      CopyMemory(ref this' apiInterfacePtr' Marshal.SizeOf(this));
Missing Default,CubeIsland.LyricsReloaded.Provider,Provider,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Provider\Provider.cs,getLyrics,The following switch statement is missing a default case: switch (var.getType())                  {                      case Variable.Type.ARTIST:                          variableValues.Add(entry.Key' var.process(artist' Encoding.UTF8));                          break;                      case Variable.Type.TITLE:                          variableValues.Add(entry.Key' var.process(title' Encoding.UTF8));                          break;                      case Variable.Type.ALBUM:                          variableValues.Add(entry.Key' var.process(album' Encoding.UTF8));                          break;                  }
Missing Default,CubeIsland.LyricsReloaded.Provider,RateLimit,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following switch statement is missing a default case: switch (parts[1].Trim().ToLower())                  {                      case "second":                          periodLength = 1000L;                          break;                      case "minute":                          periodLength = 1000L * 60;                          break;                      case "hour":                          periodLength = 1000L * 60 * 60;                          break;                      case "day":                          periodLength = 1000L * 60 * 60 * 24;                          break;                      case "week":                          periodLength = 1000L * 60 * 60 * 24 * 7;                          break;                      case "month":                          periodLength = 1000L * 60 * 60 * 24 * 30;                          break;                  }
Missing Default,MusicBeePlugin,Plugin,C:\repos\pschichtel_LyricsReloaded\LyricsReloaded\Plugin.cs,ReceiveNotification,The following switch statement is missing a default case: switch (type)              {                  case NotificationType.PluginStartup:                      String proxySetting = musicBee.Setting_GetWebProxy();                      if (!string.IsNullOrEmpty(proxySetting))                      {                          lyricsReloaded.getLogger().debug("Proxy setting found");                          string[] raw = proxySetting.Split(Convert.ToChar(0));                          WebProxy proxy = new WebProxy(raw[0]);                          if (raw.Length >= 3)                          {                              lyricsReloaded.getLogger().debug("Proxy credentials found");                              proxy.Credentials = new NetworkCredential(raw[1]' raw[2]);                          }                          lyricsReloaded.setProxy(proxy);                      }                        lyricsReloaded.checkForNewVersion(newAvailable => {                          if (newAvailable)                          {                              MessageBox.Show("A new version is available!"' "LyricsReloaded!");                          }                      });                        break;              }
