Implementation smell,Namespace,Class,File,Method,Description
Long Method,CubeIsland.LyricsReloaded,WebClient,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\WebClient.cs,executeRequest,The method has 75 lines of code.
Long Method,CubeIsland.LyricsReloaded.Provider,ProviderManager,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\ProviderManager.cs,loadProvider,The method has 142 lines of code.
Complex Method,CubeIsland.LyricsReloaded,WebClient,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\WebClient.cs,executeRequest,Cyclomatic complexity of the method is 14
Complex Method,CubeIsland.LyricsReloaded.Filters,FilterCollection,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Filters\FilterCollection.cs,parseFilterNode,Cyclomatic complexity of the method is 9
Complex Method,CubeIsland.LyricsReloaded.Provider,Provider,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\Provider.cs,getLyrics,Cyclomatic complexity of the method is 13
Complex Method,CubeIsland.LyricsReloaded.Provider,ProviderManager,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\ProviderManager.cs,loadProvider,Cyclomatic complexity of the method is 28
Complex Method,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,Cyclomatic complexity of the method is 20
Complex Method,CubeIsland.LyricsReloaded.Validation,ValidationCollection,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Validation\ValidationCollection.cs,parseFilterNode,Cyclomatic complexity of the method is 10
Complex Method,CubeIsland.LyricsReloaded.Provider.Loader,Pattern,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\Loader\StaticLoader.cs,regexFromYamlNode,Cyclomatic complexity of the method is 9
Complex Method,MusicBeePlugin,Plugin,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Plugin.cs,ReceiveNotification,Cyclomatic complexity of the method is 7
Long Parameter List,CubeIsland.LyricsReloaded.Provider,Provider,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\Provider.cs,Provider,The method has 9 parameters.
Long Parameter List,CubeIsland.LyricsReloaded.Provider.Loader,StaticLoader,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\Loader\StaticLoader.cs,StaticLoader,The method has 4 parameters.
Long Parameter List,MusicBeePlugin,Plugin,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Plugin.cs,RetrieveLyrics,The method has 6 parameters.
Long Statement,CubeIsland.LyricsReloaded,LyricsReloaded,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\LyricsReloaded.cs,checkForNewVersion,The length of the statement  "			WebResponse respone = cl.get ("https://raw.githubusercontent.com/pschichtel/LyricsReloaded/stable/LyricsReloaded/Properties/AssemblyInfo.cs"); " is 142.
Long Statement,CubeIsland.LyricsReloaded,LyricsReloaded,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\LyricsReloaded.cs,checkForNewVersion,The length of the statement  "					Regex versionRegex = new Regex ("AssemblyVersion\\(\"(?<version>[^\\s\\*]+)\"\\)"' RegexOptions.Compiled | RegexOptions.Singleline); " is 132.
Long Statement,CubeIsland.LyricsReloaded,LyricsReloaded,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\LyricsReloaded.cs,loadDefaultConfiguration,The length of the statement  "	foreach (PropertyInfo propInfo in typeof(Properties.Resources).GetProperties (BindingFlags.Public | BindingFlags.Static)) { " is 123.
Long Statement,CubeIsland.LyricsReloaded,Logger,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Logger.cs,write,The length of the statement  "	writer.WriteLine (DateTime.Now.ToString ("dd/MM/yyyy hh:mm:ss") + " [" + type.ToUpper () + "] " + string.Format (message' args)); " is 129.
Long Statement,CubeIsland.LyricsReloaded,WebClient,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\WebClient.cs,generateQueryString,The length of the statement  "		queryString.Append (HttpUtility.UrlEncode (it.Current.Key' Encoding.UTF8)).Append ('=').Append (HttpUtility.UrlEncode (it.Current.Value' Encoding.UTF8)); " is 153.
Long Statement,CubeIsland.LyricsReloaded,WebClient,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\WebClient.cs,generateQueryString,The length of the statement  "			queryString.Append ('&').Append (HttpUtility.UrlEncode (it.Current.Key' Encoding.UTF8)).Append ('=').Append (HttpUtility.UrlEncode (it.Current.Value' Encoding.UTF8)); " is 166.
Long Statement,CubeIsland.LyricsReloaded.Filters,RegexReplacer,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Filters\Filter.cs,filter,The length of the statement  "		throw new InvalidConfigurationException ("The regex filter needs at least 2 arguments: regex' <pattern>' <replacement>[' <options>]"); " is 134.
Long Statement,CubeIsland.LyricsReloaded.Filters,BrokenCharFixer,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Filters\Filter.cs,filter,The length of the statement  "		throw new InvalidConfigurationException ("The fix_broken_chars filter needs 2 arguments: fix_broken_chars' <first char>' <encoding>"); " is 134.
Long Statement,CubeIsland.LyricsReloaded.Provider,ProviderManager,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\ProviderManager.cs,loadProvider,The length of the statement  "					node = (variableConfig.Children.ContainsKey (Node.Variables.FILTERS) ? variableConfig.Children [Node.Variables.FILTERS] : null); " is 128.
Long Statement,CubeIsland.LyricsReloaded.Provider,ProviderManager,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\ProviderManager.cs,loadProvider,The length of the statement  "	Provider provider = new Provider (lyricsReloaded' name' quality' variables' postFilters' validations' headers' loader' rateLimit); " is 130.
Long Statement,MusicBeePlugin,Plugin,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Plugin.cs,Initialise,The length of the statement  "		MessageBox.Show ("An error occurred during plugin startup' send this file to the developer:\n\n" + lyricsReloaded.getLogger ().getFileInfo ().FullName); " is 152.
Long Statement,MusicBeePlugin,Plugin,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Plugin.cs,RetrieveLyrics,The length of the statement  "	lyricsReloaded.getLogger ().debug ("Lyrics request: {0} - {1} - {2} - {3} - {4}"' source' artist' title' album' providerName); " is 126.
Complex Conditional,CubeIsland.LyricsReloaded.Filters,NonAsciiStripper,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Filters\Filter.cs,strip,The conditional expression  "(c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')"  is complex.
Empty Catch Block,CubeIsland.LyricsReloaded,Logger,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Logger.cs,close,The method has an empty catch block.
Empty Catch Block,CubeIsland.LyricsReloaded,WebClient,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\WebClient.cs,executeRequest,The method has an empty catch block.
Magic Number,CubeIsland.LyricsReloaded,WebClient,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\WebClient.cs,executeRequest,The following statement contains a magic number: using (response) {  	if (response.CharacterSet != null) {  		encoding = Encoding.GetEncoding (response.CharacterSet);  		// the response encoding specified by the server. this should be enough  	}  	Stream responsesStream = response.GetResponseStream ();  	if (responsesStream != null) {  		responsesStream.ReadTimeout = timeout;  		if (String.Compare (response.ContentEncoding' "gzip"' StringComparison.OrdinalIgnoreCase) == 0) {  			// gzip compression detected' wrap the stream with a decompressing gzip stream  			lyricsReloaded.getLogger ().debug ("gzip compression detected");  			responsesStream = new GZipStream (responsesStream' CompressionMode.Decompress);  		}  		MemoryStream content = new MemoryStream ();  		const int bufferSize = 4096;  		byte[] buffer = new byte[bufferSize];  		int bytesRead;  		do {  			bytesRead = responsesStream.Read (buffer' 0' bufferSize);  			if (bytesRead <= 0) {  				break;  			}  			content.Write (buffer' 0' bytesRead);  		} while (bytesRead > 0);  		responsesStream.Close ();  		contentString = encoding.GetString (content.GetBuffer ());  		// decode the data with the currently known encoding  		Match match = ENCODING_REGEX.Match (contentString);  		// search for a encoding specified in the content  		if (match.Success) {  			try {  				Encoding tmp = Encoding.GetEncoding (match.Groups [1].ToString ());  				// try to get a encoding from the name  				if (!encoding.Equals (tmp)) {  					encoding = tmp;  					contentString = encoding.GetString (content.GetBuffer ());  					// decode again with the newly found encoding  				}  			} catch (ArgumentException) {  			}  		}  		content.Close ();  	}  	webResponse = new WebResponse (contentString' encoding' response.Headers);  }  
Magic Number,CubeIsland.LyricsReloaded,WebClient,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\WebClient.cs,executeRequest,The following statement contains a magic number: if (responsesStream != null) {  	responsesStream.ReadTimeout = timeout;  	if (String.Compare (response.ContentEncoding' "gzip"' StringComparison.OrdinalIgnoreCase) == 0) {  		// gzip compression detected' wrap the stream with a decompressing gzip stream  		lyricsReloaded.getLogger ().debug ("gzip compression detected");  		responsesStream = new GZipStream (responsesStream' CompressionMode.Decompress);  	}  	MemoryStream content = new MemoryStream ();  	const int bufferSize = 4096;  	byte[] buffer = new byte[bufferSize];  	int bytesRead;  	do {  		bytesRead = responsesStream.Read (buffer' 0' bufferSize);  		if (bytesRead <= 0) {  			break;  		}  		content.Write (buffer' 0' bytesRead);  	} while (bytesRead > 0);  	responsesStream.Close ();  	contentString = encoding.GetString (content.GetBuffer ());  	// decode the data with the currently known encoding  	Match match = ENCODING_REGEX.Match (contentString);  	// search for a encoding specified in the content  	if (match.Success) {  		try {  			Encoding tmp = Encoding.GetEncoding (match.Groups [1].ToString ());  			// try to get a encoding from the name  			if (!encoding.Equals (tmp)) {  				encoding = tmp;  				contentString = encoding.GetString (content.GetBuffer ());  				// decode again with the newly found encoding  			}  		} catch (ArgumentException) {  		}  	}  	content.Close ();  }  
Magic Number,CubeIsland.LyricsReloaded.Filters,RegexReplacer,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Filters\Filter.cs,filter,The following statement contains a magic number: if (args.Length < 2) {  	throw new InvalidConfigurationException ("The regex filter needs at least 2 arguments: regex' <pattern>' <replacement>[' <options>]");  }  
Magic Number,CubeIsland.LyricsReloaded.Filters,RegexReplacer,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Filters\Filter.cs,filter,The following statement contains a magic number: if (args.Length > 2) {  	optionString = args [2];  }  
Magic Number,CubeIsland.LyricsReloaded.Filters,RegexReplacer,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Filters\Filter.cs,filter,The following statement contains a magic number: if (args.Length > 2) {  	optionString = args [2];  }  
Magic Number,CubeIsland.LyricsReloaded.Filters,RegexReplacer,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Filters\Filter.cs,filter,The following statement contains a magic number: optionString = args [2];  
Magic Number,CubeIsland.LyricsReloaded.Filters,ReplaceFilter,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Filters\Filter.cs,filter,The following statement contains a magic number: if (args.Length < 2) {  	throw new InvalidConfigurationException ("The replace filter requires 2 parameters: replace' <search>' <replacement>");  }  
Magic Number,CubeIsland.LyricsReloaded.Filters,BrokenCharFixer,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Filters\Filter.cs,filter,The following statement contains a magic number: if (args.Length < 2 || args [0].Length == 0) {  	throw new InvalidConfigurationException ("The fix_broken_chars filter needs 2 arguments: fix_broken_chars' <first char>' <encoding>");  }  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: if (parts.Length > 1) {  	switch (parts [1].Trim ().ToLower ()) {  	case "second":  		periodLength = 1000L;  		break;  	case "minute":  		periodLength = 1000L * 60;  		break;  	case "hour":  		periodLength = 1000L * 60 * 60;  		break;  	case "day":  		periodLength = 1000L * 60 * 60 * 24;  		break;  	case "week":  		periodLength = 1000L * 60 * 60 * 24 * 7;  		break;  	case "month":  		periodLength = 1000L * 60 * 60 * 24 * 30;  		break;  	}  }  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: if (parts.Length > 1) {  	switch (parts [1].Trim ().ToLower ()) {  	case "second":  		periodLength = 1000L;  		break;  	case "minute":  		periodLength = 1000L * 60;  		break;  	case "hour":  		periodLength = 1000L * 60 * 60;  		break;  	case "day":  		periodLength = 1000L * 60 * 60 * 24;  		break;  	case "week":  		periodLength = 1000L * 60 * 60 * 24 * 7;  		break;  	case "month":  		periodLength = 1000L * 60 * 60 * 24 * 30;  		break;  	}  }  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: if (parts.Length > 1) {  	switch (parts [1].Trim ().ToLower ()) {  	case "second":  		periodLength = 1000L;  		break;  	case "minute":  		periodLength = 1000L * 60;  		break;  	case "hour":  		periodLength = 1000L * 60 * 60;  		break;  	case "day":  		periodLength = 1000L * 60 * 60 * 24;  		break;  	case "week":  		periodLength = 1000L * 60 * 60 * 24 * 7;  		break;  	case "month":  		periodLength = 1000L * 60 * 60 * 24 * 30;  		break;  	}  }  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: if (parts.Length > 1) {  	switch (parts [1].Trim ().ToLower ()) {  	case "second":  		periodLength = 1000L;  		break;  	case "minute":  		periodLength = 1000L * 60;  		break;  	case "hour":  		periodLength = 1000L * 60 * 60;  		break;  	case "day":  		periodLength = 1000L * 60 * 60 * 24;  		break;  	case "week":  		periodLength = 1000L * 60 * 60 * 24 * 7;  		break;  	case "month":  		periodLength = 1000L * 60 * 60 * 24 * 30;  		break;  	}  }  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: if (parts.Length > 1) {  	switch (parts [1].Trim ().ToLower ()) {  	case "second":  		periodLength = 1000L;  		break;  	case "minute":  		periodLength = 1000L * 60;  		break;  	case "hour":  		periodLength = 1000L * 60 * 60;  		break;  	case "day":  		periodLength = 1000L * 60 * 60 * 24;  		break;  	case "week":  		periodLength = 1000L * 60 * 60 * 24 * 7;  		break;  	case "month":  		periodLength = 1000L * 60 * 60 * 24 * 30;  		break;  	}  }  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: if (parts.Length > 1) {  	switch (parts [1].Trim ().ToLower ()) {  	case "second":  		periodLength = 1000L;  		break;  	case "minute":  		periodLength = 1000L * 60;  		break;  	case "hour":  		periodLength = 1000L * 60 * 60;  		break;  	case "day":  		periodLength = 1000L * 60 * 60 * 24;  		break;  	case "week":  		periodLength = 1000L * 60 * 60 * 24 * 7;  		break;  	case "month":  		periodLength = 1000L * 60 * 60 * 24 * 30;  		break;  	}  }  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: if (parts.Length > 1) {  	switch (parts [1].Trim ().ToLower ()) {  	case "second":  		periodLength = 1000L;  		break;  	case "minute":  		periodLength = 1000L * 60;  		break;  	case "hour":  		periodLength = 1000L * 60 * 60;  		break;  	case "day":  		periodLength = 1000L * 60 * 60 * 24;  		break;  	case "week":  		periodLength = 1000L * 60 * 60 * 24 * 7;  		break;  	case "month":  		periodLength = 1000L * 60 * 60 * 24 * 30;  		break;  	}  }  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: if (parts.Length > 1) {  	switch (parts [1].Trim ().ToLower ()) {  	case "second":  		periodLength = 1000L;  		break;  	case "minute":  		periodLength = 1000L * 60;  		break;  	case "hour":  		periodLength = 1000L * 60 * 60;  		break;  	case "day":  		periodLength = 1000L * 60 * 60 * 24;  		break;  	case "week":  		periodLength = 1000L * 60 * 60 * 24 * 7;  		break;  	case "month":  		periodLength = 1000L * 60 * 60 * 24 * 30;  		break;  	}  }  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: if (parts.Length > 1) {  	switch (parts [1].Trim ().ToLower ()) {  	case "second":  		periodLength = 1000L;  		break;  	case "minute":  		periodLength = 1000L * 60;  		break;  	case "hour":  		periodLength = 1000L * 60 * 60;  		break;  	case "day":  		periodLength = 1000L * 60 * 60 * 24;  		break;  	case "week":  		periodLength = 1000L * 60 * 60 * 24 * 7;  		break;  	case "month":  		periodLength = 1000L * 60 * 60 * 24 * 30;  		break;  	}  }  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: if (parts.Length > 1) {  	switch (parts [1].Trim ().ToLower ()) {  	case "second":  		periodLength = 1000L;  		break;  	case "minute":  		periodLength = 1000L * 60;  		break;  	case "hour":  		periodLength = 1000L * 60 * 60;  		break;  	case "day":  		periodLength = 1000L * 60 * 60 * 24;  		break;  	case "week":  		periodLength = 1000L * 60 * 60 * 24 * 7;  		break;  	case "month":  		periodLength = 1000L * 60 * 60 * 24 * 30;  		break;  	}  }  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: if (parts.Length > 1) {  	switch (parts [1].Trim ().ToLower ()) {  	case "second":  		periodLength = 1000L;  		break;  	case "minute":  		periodLength = 1000L * 60;  		break;  	case "hour":  		periodLength = 1000L * 60 * 60;  		break;  	case "day":  		periodLength = 1000L * 60 * 60 * 24;  		break;  	case "week":  		periodLength = 1000L * 60 * 60 * 24 * 7;  		break;  	case "month":  		periodLength = 1000L * 60 * 60 * 24 * 30;  		break;  	}  }  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: if (parts.Length > 1) {  	switch (parts [1].Trim ().ToLower ()) {  	case "second":  		periodLength = 1000L;  		break;  	case "minute":  		periodLength = 1000L * 60;  		break;  	case "hour":  		periodLength = 1000L * 60 * 60;  		break;  	case "day":  		periodLength = 1000L * 60 * 60 * 24;  		break;  	case "week":  		periodLength = 1000L * 60 * 60 * 24 * 7;  		break;  	case "month":  		periodLength = 1000L * 60 * 60 * 24 * 30;  		break;  	}  }  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: if (parts.Length > 1) {  	switch (parts [1].Trim ().ToLower ()) {  	case "second":  		periodLength = 1000L;  		break;  	case "minute":  		periodLength = 1000L * 60;  		break;  	case "hour":  		periodLength = 1000L * 60 * 60;  		break;  	case "day":  		periodLength = 1000L * 60 * 60 * 24;  		break;  	case "week":  		periodLength = 1000L * 60 * 60 * 24 * 7;  		break;  	case "month":  		periodLength = 1000L * 60 * 60 * 24 * 30;  		break;  	}  }  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: if (parts.Length > 1) {  	switch (parts [1].Trim ().ToLower ()) {  	case "second":  		periodLength = 1000L;  		break;  	case "minute":  		periodLength = 1000L * 60;  		break;  	case "hour":  		periodLength = 1000L * 60 * 60;  		break;  	case "day":  		periodLength = 1000L * 60 * 60 * 24;  		break;  	case "week":  		periodLength = 1000L * 60 * 60 * 24 * 7;  		break;  	case "month":  		periodLength = 1000L * 60 * 60 * 24 * 30;  		break;  	}  }  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: switch (parts [1].Trim ().ToLower ()) {  case "second":  	periodLength = 1000L;  	break;  case "minute":  	periodLength = 1000L * 60;  	break;  case "hour":  	periodLength = 1000L * 60 * 60;  	break;  case "day":  	periodLength = 1000L * 60 * 60 * 24;  	break;  case "week":  	periodLength = 1000L * 60 * 60 * 24 * 7;  	break;  case "month":  	periodLength = 1000L * 60 * 60 * 24 * 30;  	break;  }  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: switch (parts [1].Trim ().ToLower ()) {  case "second":  	periodLength = 1000L;  	break;  case "minute":  	periodLength = 1000L * 60;  	break;  case "hour":  	periodLength = 1000L * 60 * 60;  	break;  case "day":  	periodLength = 1000L * 60 * 60 * 24;  	break;  case "week":  	periodLength = 1000L * 60 * 60 * 24 * 7;  	break;  case "month":  	periodLength = 1000L * 60 * 60 * 24 * 30;  	break;  }  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: switch (parts [1].Trim ().ToLower ()) {  case "second":  	periodLength = 1000L;  	break;  case "minute":  	periodLength = 1000L * 60;  	break;  case "hour":  	periodLength = 1000L * 60 * 60;  	break;  case "day":  	periodLength = 1000L * 60 * 60 * 24;  	break;  case "week":  	periodLength = 1000L * 60 * 60 * 24 * 7;  	break;  case "month":  	periodLength = 1000L * 60 * 60 * 24 * 30;  	break;  }  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: switch (parts [1].Trim ().ToLower ()) {  case "second":  	periodLength = 1000L;  	break;  case "minute":  	periodLength = 1000L * 60;  	break;  case "hour":  	periodLength = 1000L * 60 * 60;  	break;  case "day":  	periodLength = 1000L * 60 * 60 * 24;  	break;  case "week":  	periodLength = 1000L * 60 * 60 * 24 * 7;  	break;  case "month":  	periodLength = 1000L * 60 * 60 * 24 * 30;  	break;  }  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: switch (parts [1].Trim ().ToLower ()) {  case "second":  	periodLength = 1000L;  	break;  case "minute":  	periodLength = 1000L * 60;  	break;  case "hour":  	periodLength = 1000L * 60 * 60;  	break;  case "day":  	periodLength = 1000L * 60 * 60 * 24;  	break;  case "week":  	periodLength = 1000L * 60 * 60 * 24 * 7;  	break;  case "month":  	periodLength = 1000L * 60 * 60 * 24 * 30;  	break;  }  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: switch (parts [1].Trim ().ToLower ()) {  case "second":  	periodLength = 1000L;  	break;  case "minute":  	periodLength = 1000L * 60;  	break;  case "hour":  	periodLength = 1000L * 60 * 60;  	break;  case "day":  	periodLength = 1000L * 60 * 60 * 24;  	break;  case "week":  	periodLength = 1000L * 60 * 60 * 24 * 7;  	break;  case "month":  	periodLength = 1000L * 60 * 60 * 24 * 30;  	break;  }  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: switch (parts [1].Trim ().ToLower ()) {  case "second":  	periodLength = 1000L;  	break;  case "minute":  	periodLength = 1000L * 60;  	break;  case "hour":  	periodLength = 1000L * 60 * 60;  	break;  case "day":  	periodLength = 1000L * 60 * 60 * 24;  	break;  case "week":  	periodLength = 1000L * 60 * 60 * 24 * 7;  	break;  case "month":  	periodLength = 1000L * 60 * 60 * 24 * 30;  	break;  }  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: switch (parts [1].Trim ().ToLower ()) {  case "second":  	periodLength = 1000L;  	break;  case "minute":  	periodLength = 1000L * 60;  	break;  case "hour":  	periodLength = 1000L * 60 * 60;  	break;  case "day":  	periodLength = 1000L * 60 * 60 * 24;  	break;  case "week":  	periodLength = 1000L * 60 * 60 * 24 * 7;  	break;  case "month":  	periodLength = 1000L * 60 * 60 * 24 * 30;  	break;  }  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: switch (parts [1].Trim ().ToLower ()) {  case "second":  	periodLength = 1000L;  	break;  case "minute":  	periodLength = 1000L * 60;  	break;  case "hour":  	periodLength = 1000L * 60 * 60;  	break;  case "day":  	periodLength = 1000L * 60 * 60 * 24;  	break;  case "week":  	periodLength = 1000L * 60 * 60 * 24 * 7;  	break;  case "month":  	periodLength = 1000L * 60 * 60 * 24 * 30;  	break;  }  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: switch (parts [1].Trim ().ToLower ()) {  case "second":  	periodLength = 1000L;  	break;  case "minute":  	periodLength = 1000L * 60;  	break;  case "hour":  	periodLength = 1000L * 60 * 60;  	break;  case "day":  	periodLength = 1000L * 60 * 60 * 24;  	break;  case "week":  	periodLength = 1000L * 60 * 60 * 24 * 7;  	break;  case "month":  	periodLength = 1000L * 60 * 60 * 24 * 30;  	break;  }  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: switch (parts [1].Trim ().ToLower ()) {  case "second":  	periodLength = 1000L;  	break;  case "minute":  	periodLength = 1000L * 60;  	break;  case "hour":  	periodLength = 1000L * 60 * 60;  	break;  case "day":  	periodLength = 1000L * 60 * 60 * 24;  	break;  case "week":  	periodLength = 1000L * 60 * 60 * 24 * 7;  	break;  case "month":  	periodLength = 1000L * 60 * 60 * 24 * 30;  	break;  }  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: switch (parts [1].Trim ().ToLower ()) {  case "second":  	periodLength = 1000L;  	break;  case "minute":  	periodLength = 1000L * 60;  	break;  case "hour":  	periodLength = 1000L * 60 * 60;  	break;  case "day":  	periodLength = 1000L * 60 * 60 * 24;  	break;  case "week":  	periodLength = 1000L * 60 * 60 * 24 * 7;  	break;  case "month":  	periodLength = 1000L * 60 * 60 * 24 * 30;  	break;  }  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: switch (parts [1].Trim ().ToLower ()) {  case "second":  	periodLength = 1000L;  	break;  case "minute":  	periodLength = 1000L * 60;  	break;  case "hour":  	periodLength = 1000L * 60 * 60;  	break;  case "day":  	periodLength = 1000L * 60 * 60 * 24;  	break;  case "week":  	periodLength = 1000L * 60 * 60 * 24 * 7;  	break;  case "month":  	periodLength = 1000L * 60 * 60 * 24 * 30;  	break;  }  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: switch (parts [1].Trim ().ToLower ()) {  case "second":  	periodLength = 1000L;  	break;  case "minute":  	periodLength = 1000L * 60;  	break;  case "hour":  	periodLength = 1000L * 60 * 60;  	break;  case "day":  	periodLength = 1000L * 60 * 60 * 24;  	break;  case "week":  	periodLength = 1000L * 60 * 60 * 24 * 7;  	break;  case "month":  	periodLength = 1000L * 60 * 60 * 24 * 30;  	break;  }  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: periodLength = 1000L * 60;  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: periodLength = 1000L * 60 * 60;  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: periodLength = 1000L * 60 * 60;  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: periodLength = 1000L * 60 * 60 * 24;  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: periodLength = 1000L * 60 * 60 * 24;  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: periodLength = 1000L * 60 * 60 * 24;  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: periodLength = 1000L * 60 * 60 * 24 * 7;  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: periodLength = 1000L * 60 * 60 * 24 * 7;  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: periodLength = 1000L * 60 * 60 * 24 * 7;  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: periodLength = 1000L * 60 * 60 * 24 * 7;  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: periodLength = 1000L * 60 * 60 * 24 * 30;  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: periodLength = 1000L * 60 * 60 * 24 * 30;  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: periodLength = 1000L * 60 * 60 * 24 * 30;  
Magic Number,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following statement contains a magic number: periodLength = 1000L * 60 * 60 * 24 * 30;  
Magic Number,CubeIsland.LyricsReloaded.Validation,ValidationCollection,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Validation\ValidationCollection.cs,parseFilterNode,The following statement contains a magic number: if (spaceIndex == 3 && name.Substring (0' 3).Equals ("not"' StringComparison.OrdinalIgnoreCase)) {  	inverted = true;  	name = name.Substring (4).Trim ();  }  
Magic Number,CubeIsland.LyricsReloaded.Validation,ValidationCollection,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Validation\ValidationCollection.cs,parseFilterNode,The following statement contains a magic number: if (spaceIndex == 3 && name.Substring (0' 3).Equals ("not"' StringComparison.OrdinalIgnoreCase)) {  	inverted = true;  	name = name.Substring (4).Trim ();  }  
Magic Number,CubeIsland.LyricsReloaded.Validation,ValidationCollection,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Validation\ValidationCollection.cs,parseFilterNode,The following statement contains a magic number: if (spaceIndex == 3 && name.Substring (0' 3).Equals ("not"' StringComparison.OrdinalIgnoreCase)) {  	inverted = true;  	name = name.Substring (4).Trim ();  }  
Magic Number,CubeIsland.LyricsReloaded.Validation,ValidationCollection,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Validation\ValidationCollection.cs,parseFilterNode,The following statement contains a magic number: name = name.Substring (4).Trim ();  
Magic Number,CubeIsland.LyricsReloaded.Validation,MatchesValidator,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Validation\Validator.cs,validate,The following statement contains a magic number: if (args.Length > 1) {  	options = Pattern.regexOptionsFromString (args [2].Trim ());  }  
Magic Number,CubeIsland.LyricsReloaded.Validation,MatchesValidator,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Validation\Validator.cs,validate,The following statement contains a magic number: options = Pattern.regexOptionsFromString (args [2].Trim ());  
Magic Number,CubeIsland.LyricsReloaded.Provider.Loader,StaticLoaderFactory,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\Loader\StaticLoader.cs,StaticLoaderFactory,The following statement contains a magic number: webClient = new WebClient (lyricsReloaded' 5000);  
Magic Number,MusicBeePlugin,Plugin,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Plugin.cs,Initialise,The following statement contains a magic number: info.MinInterfaceVersion = 20;  
Magic Number,MusicBeePlugin,Plugin,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Plugin.cs,Initialise,The following statement contains a magic number: info.MinApiRevision = 25;  
Magic Number,MusicBeePlugin,Plugin,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Plugin.cs,ReceiveNotification,The following statement contains a magic number: switch (type) {  case NotificationType.PluginStartup:  	String proxySetting = musicBee.Setting_GetWebProxy ();  	if (!string.IsNullOrEmpty (proxySetting)) {  		lyricsReloaded.getLogger ().debug ("Proxy setting found");  		string[] raw = proxySetting.Split (Convert.ToChar (0));  		WebProxy proxy = new WebProxy (raw [0]);  		if (raw.Length >= 3) {  			lyricsReloaded.getLogger ().debug ("Proxy credentials found");  			proxy.Credentials = new NetworkCredential (raw [1]' raw [2]);  		}  		lyricsReloaded.setProxy (proxy);  	}  	lyricsReloaded.checkForNewVersion (newAvailable => {  		if (newAvailable) {  			MessageBox.Show ("A new version is available!"' "LyricsReloaded!");  		}  	});  	break;  }  
Magic Number,MusicBeePlugin,Plugin,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Plugin.cs,ReceiveNotification,The following statement contains a magic number: switch (type) {  case NotificationType.PluginStartup:  	String proxySetting = musicBee.Setting_GetWebProxy ();  	if (!string.IsNullOrEmpty (proxySetting)) {  		lyricsReloaded.getLogger ().debug ("Proxy setting found");  		string[] raw = proxySetting.Split (Convert.ToChar (0));  		WebProxy proxy = new WebProxy (raw [0]);  		if (raw.Length >= 3) {  			lyricsReloaded.getLogger ().debug ("Proxy credentials found");  			proxy.Credentials = new NetworkCredential (raw [1]' raw [2]);  		}  		lyricsReloaded.setProxy (proxy);  	}  	lyricsReloaded.checkForNewVersion (newAvailable => {  		if (newAvailable) {  			MessageBox.Show ("A new version is available!"' "LyricsReloaded!");  		}  	});  	break;  }  
Magic Number,MusicBeePlugin,Plugin,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Plugin.cs,ReceiveNotification,The following statement contains a magic number: if (!string.IsNullOrEmpty (proxySetting)) {  	lyricsReloaded.getLogger ().debug ("Proxy setting found");  	string[] raw = proxySetting.Split (Convert.ToChar (0));  	WebProxy proxy = new WebProxy (raw [0]);  	if (raw.Length >= 3) {  		lyricsReloaded.getLogger ().debug ("Proxy credentials found");  		proxy.Credentials = new NetworkCredential (raw [1]' raw [2]);  	}  	lyricsReloaded.setProxy (proxy);  }  
Magic Number,MusicBeePlugin,Plugin,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Plugin.cs,ReceiveNotification,The following statement contains a magic number: if (!string.IsNullOrEmpty (proxySetting)) {  	lyricsReloaded.getLogger ().debug ("Proxy setting found");  	string[] raw = proxySetting.Split (Convert.ToChar (0));  	WebProxy proxy = new WebProxy (raw [0]);  	if (raw.Length >= 3) {  		lyricsReloaded.getLogger ().debug ("Proxy credentials found");  		proxy.Credentials = new NetworkCredential (raw [1]' raw [2]);  	}  	lyricsReloaded.setProxy (proxy);  }  
Magic Number,MusicBeePlugin,Plugin,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Plugin.cs,ReceiveNotification,The following statement contains a magic number: if (raw.Length >= 3) {  	lyricsReloaded.getLogger ().debug ("Proxy credentials found");  	proxy.Credentials = new NetworkCredential (raw [1]' raw [2]);  }  
Magic Number,MusicBeePlugin,Plugin,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Plugin.cs,ReceiveNotification,The following statement contains a magic number: if (raw.Length >= 3) {  	lyricsReloaded.getLogger ().debug ("Proxy credentials found");  	proxy.Credentials = new NetworkCredential (raw [1]' raw [2]);  }  
Magic Number,MusicBeePlugin,Plugin,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Plugin.cs,ReceiveNotification,The following statement contains a magic number: proxy.Credentials = new NetworkCredential (raw [1]' raw [2]);  
Missing Default,CubeIsland.LyricsReloaded.Provider,Provider,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\Provider.cs,getLyrics,The following switch statement is missing a default case: switch (var.getType ()) {  case Variable.Type.ARTIST:  	variableValues.Add (entry.Key' var.process (artist' Encoding.UTF8));  	break;  case Variable.Type.TITLE:  	variableValues.Add (entry.Key' var.process (title' Encoding.UTF8));  	break;  case Variable.Type.ALBUM:  	variableValues.Add (entry.Key' var.process (album' Encoding.UTF8));  	break;  }  
Missing Default,CubeIsland.LyricsReloaded.Provider,RateLimit,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Provider\RateLimit.cs,parse,The following switch statement is missing a default case: switch (parts [1].Trim ().ToLower ()) {  case "second":  	periodLength = 1000L;  	break;  case "minute":  	periodLength = 1000L * 60;  	break;  case "hour":  	periodLength = 1000L * 60 * 60;  	break;  case "day":  	periodLength = 1000L * 60 * 60 * 24;  	break;  case "week":  	periodLength = 1000L * 60 * 60 * 24 * 7;  	break;  case "month":  	periodLength = 1000L * 60 * 60 * 24 * 30;  	break;  }  
Missing Default,MusicBeePlugin,Plugin,D:\newReposJune17\pschichtel_LyricsReloaded\LyricsReloaded\Plugin.cs,ReceiveNotification,The following switch statement is missing a default case: switch (type) {  case NotificationType.PluginStartup:  	String proxySetting = musicBee.Setting_GetWebProxy ();  	if (!string.IsNullOrEmpty (proxySetting)) {  		lyricsReloaded.getLogger ().debug ("Proxy setting found");  		string[] raw = proxySetting.Split (Convert.ToChar (0));  		WebProxy proxy = new WebProxy (raw [0]);  		if (raw.Length >= 3) {  			lyricsReloaded.getLogger ().debug ("Proxy credentials found");  			proxy.Credentials = new NetworkCredential (raw [1]' raw [2]);  		}  		lyricsReloaded.setProxy (proxy);  	}  	lyricsReloaded.checkForNewVersion (newAvailable => {  		if (newAvailable) {  			MessageBox.Show ("A new version is available!"' "LyricsReloaded!");  		}  	});  	break;  }  
