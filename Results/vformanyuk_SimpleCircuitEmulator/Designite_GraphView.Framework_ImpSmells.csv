Implementation smell,Namespace,Class,File,Method,Description
Long Method,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,OnPreviewMouseUp,The method has 115 lines of code.
Complex Method,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,OnPreviewMouseMove,Cyclomatic complexity of the method is 12
Complex Method,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,OnPreviewMouseUp,Cyclomatic complexity of the method is 18
Complex Method,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,ChildNodes_CollectionChanged,Cyclomatic complexity of the method is 14
Complex Method,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,Connections_CollectionChanged,Cyclomatic complexity of the method is 8
Long Parameter List,GraphView.Framework,Extensions,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Extensions.cs,AreaHitTest,The method has 7 parameters.
Long Parameter List,GraphView.Framework,Extensions,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Extensions.cs,AreaHitTest,The method has 5 parameters.
Long Parameter List,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,OnPreviewMouseUp,The method has 6 parameters.
Long Statement,GraphView.Framework,Extensions,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Extensions.cs,AreaHitTest,The length of the statement  "	var hitTestParams = new GeometryHitTestParameters (new RectangleGeometry (new Rect (startPoint' new Size (width' height)))); " is 124.
Long Statement,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,OnPreviewMouseDown,The length of the statement  "			if (connector.ConnectionPoint.IsConnected && (Keyboard.IsKeyDown (Key.LeftCtrl) || Keyboard.IsKeyDown (Key.RightCtrl))) { " is 121.
Long Statement,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,OnPreviewMouseDown,The length of the statement  "				var connections = m_connections.Where (c => c.Value.Source.Equals (connector) || c.Value.Destination.Equals (connector)).ToList (); " is 131.
Long Statement,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,OnPreviewMouseDown,The length of the statement  "			var virtualConnectionContainer = new ConnectionContainerControl (sourceConnector' virtualConnector' virtualConnection' false); " is 126.
Long Statement,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,OnPreviewMouseMove,The length of the statement  "		if (m_hittestElement == null && (Math.Abs (m_currentPosition.X - m_originPoint.X) >= SystemParameters.MinimumHorizontalDragDistance || Math.Abs (m_currentPosition.Y - m_originPoint.Y) >= SystemParameters.MinimumVerticalDragDistance)) { " is 235.
Long Statement,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,OnPreviewMouseUp,The length of the statement  "				var newConnection = m_diagram.ConnectionsFactory.CreateConnection (point.SourceConnectionPoint' hittest.ConnectionPoint); " is 121.
Long Statement,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,OnPreviewMouseUp,The length of the statement  "				var sourceToMiddle = m_diagram.ConnectionsFactory.CreateConnection (connectionContext.StartPoint' middleConnector.ConnectionPoint); " is 131.
Long Statement,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,OnPreviewMouseUp,The length of the statement  "				var middleToTarget = m_diagram.ConnectionsFactory.CreateConnection (middleConnector.ConnectionPoint' connectionContext.EndPoint); " is 129.
Long Statement,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,OnPreviewMouseUp,The length of the statement  "				var newConnection = m_diagram.ConnectionsFactory.CreateConnection (point.SourceConnectionPoint' middleConnector.ConnectionPoint); " is 129.
Long Statement,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,OnPreviewMouseUp,The length of the statement  "					var connectionContainer = new ConnectionContainerControl (point.SourceConnectorControl' middleConnector' newConnection); " is 120.
Long Statement,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,OnPreviewMouseUp,The length of the statement  "			var elements = this.AreaHitTest<NodeContainerControl> (startPoint' selectionRect.ActualWidth' selectionRect.ActualHeight); " is 122.
Long Statement,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,OnPreviewMouseUp,The length of the statement  "		Math.Abs (m_currentPosition.X - m_originPoint.X) <= SystemParameters.MinimumHorizontalDragDistance && Math.Abs (m_currentPosition.Y - m_originPoint.Y) <= SystemParameters.MinimumVerticalDragDistance) { " is 201.
Long Statement,GraphView.Framework.Converters,OffsetConverter,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Converters\OffsetConverter.cs,Convert,The length of the statement  "	if (value != null && parameter != null && double.TryParse (value.ToString ()' out val) && double.TryParse (parameter.ToString ()' out offset)) { " is 144.
Complex Conditional,GraphView.Framework.Converters,OffsetConverter,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Converters\OffsetConverter.cs,Convert,The conditional expression  "value != null && parameter != null && double.TryParse (value.ToString ()' out val) && double.TryParse (parameter.ToString ()' out offset)"  is complex.
Magic Number,GraphView.Framework.Controls,ConnectorControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\ConnectorControl.cs,ConnectorControl_Loaded,The following statement contains a magic number: m_currentControlOffest = new Point (offset.X + ActualWidth / 2' offset.Y + ActualHeight / 2);  
Magic Number,GraphView.Framework.Controls,ConnectorControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\ConnectorControl.cs,ConnectorControl_Loaded,The following statement contains a magic number: m_currentControlOffest = new Point (offset.X + ActualWidth / 2' offset.Y + ActualHeight / 2);  
Magic Number,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,OnPreviewMouseMove,The following statement contains a magic number: if (Mouse.LeftButton == MouseButtonState.Pressed) {  	var node = m_hittestElement as NodeContainerControl;  	if (node != null) {  		node.X += position.X - m_currentPosition.X;  		node.Y += position.Y - m_currentPosition.Y;  		if (node.Node.IsSelected) {  			foreach (var selectedNode in m_selectedNodes.Where (n => n != node.Node)) {  				selectedNode.X += position.X - m_currentPosition.X;  				selectedNode.Y += position.Y - m_currentPosition.Y;  			}  		}  	}  	var virtualPoint = m_hittestElement as VirtualConnectionPoint;  	if (virtualPoint != null) {  		virtualPoint.X += position.X - m_currentPosition.X;  		virtualPoint.Y += position.Y - m_currentPosition.Y;  		var hittest = this.AreaHitTest<ConnectorControl> (m_currentPosition' Constants.VirtualPointXOffset - 5);  		if (hittest != null) {  			Mouse.SetCursor (hittest.ConnectionPoint.CanConnect (virtualPoint.SourceConnectionPoint) ? Cursors.Hand : Cursors.No);  		}  		var noneVirtualConnection = this.HitTest<ConnectionContainerControl> (new Point (virtualPoint.X' virtualPoint.Y));  		if (noneVirtualConnection != null) {  			Mouse.SetCursor (Cursors.Hand);  		}  	}  	var rectangle = m_hittestElement as SelectionRect;  	if (rectangle != null)// update rectangle width/height  	 {  		if (rectangle.SelectionStartPoint.X < position.X) {  			Canvas.SetLeft (rectangle' rectangle.SelectionStartPoint.X);  			rectangle.Width = position.X - rectangle.SelectionStartPoint.X;  		}  		else {  			Canvas.SetLeft (rectangle' position.X);  			rectangle.Width = rectangle.SelectionStartPoint.X - position.X;  		}  		if (rectangle.SelectionStartPoint.Y < position.Y) {  			Canvas.SetTop (rectangle' rectangle.SelectionStartPoint.Y);  			rectangle.Height = position.Y - rectangle.SelectionStartPoint.Y;  		}  		else {  			Canvas.SetTop (rectangle' position.Y);  			rectangle.Height = rectangle.SelectionStartPoint.Y - position.Y;  		}  	}  	// if no node selected and drag sitance riched add Selection Rectangle  	if (m_hittestElement == null && (Math.Abs (m_currentPosition.X - m_originPoint.X) >= SystemParameters.MinimumHorizontalDragDistance || Math.Abs (m_currentPosition.Y - m_originPoint.Y) >= SystemParameters.MinimumVerticalDragDistance)) {  		m_hittestElement = new SelectionRect (m_currentPosition.X' m_currentPosition.Y);  		Children.Add ((UIElement)m_hittestElement);  		m_hittestElement.CaptureMouse ();  	}  }  
Magic Number,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,OnPreviewMouseMove,The following statement contains a magic number: if (virtualPoint != null) {  	virtualPoint.X += position.X - m_currentPosition.X;  	virtualPoint.Y += position.Y - m_currentPosition.Y;  	var hittest = this.AreaHitTest<ConnectorControl> (m_currentPosition' Constants.VirtualPointXOffset - 5);  	if (hittest != null) {  		Mouse.SetCursor (hittest.ConnectionPoint.CanConnect (virtualPoint.SourceConnectionPoint) ? Cursors.Hand : Cursors.No);  	}  	var noneVirtualConnection = this.HitTest<ConnectionContainerControl> (new Point (virtualPoint.X' virtualPoint.Y));  	if (noneVirtualConnection != null) {  		Mouse.SetCursor (Cursors.Hand);  	}  }  
Magic Number,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,OnPreviewMouseUp,The following statement contains a magic number: if (m_hittestElement != null) {  	m_hittestElement.ReleaseMouseCapture ();  	var point = m_hittestElement as VirtualConnectionPoint;  	if (point != null) {  		var hittest = this.AreaHitTest<ConnectorControl> (m_currentPosition' Constants.VirtualPointXOffset - 5);  		if (hittest != null && hittest.ConnectionPoint.CanConnect (point.SourceConnectionPoint)) {  			// if captured element is VirtualConnector and hittest element is ConnectionPoint - create connection  			var newConnection = m_diagram.ConnectionsFactory.CreateConnection (point.SourceConnectionPoint' hittest.ConnectionPoint);  			if (newConnection != null) {  				m_diagram.Connections.Add (newConnection);  				// add connection contrainer control to canvas  				var connectionContainer = new ConnectionContainerControl (point.SourceConnectorControl' hittest' newConnection);  				m_connections.Add (newConnection' connectionContainer);  				Children.Add (connectionContainer);  			}  		}  		var noneVirtualConnection = this.HitTest<ConnectionContainerControl> (m_currentPosition);  		if (noneVirtualConnection != null) {  			var oldSource = noneVirtualConnection.Source;  			var oldDestination = noneVirtualConnection.Destination;  			var connectionContext = noneVirtualConnection.Connection;  			ConnectorControl middleConnector = new ConnectorControl {  				X = m_currentPosition.X'  				Y = m_currentPosition.Y'  				Width = 10'  				Height = 10'  				ConnectionPoint = Activator.CreateInstance (noneVirtualConnection.Connection.StartPoint.GetType ()) as IConnectionPoint  			};  			Canvas.SetLeft (middleConnector' middleConnector.X - middleConnector.Width / 2);  			Canvas.SetTop (middleConnector' middleConnector.Y - middleConnector.Height / 2);  			Children.Remove (m_connections [connectionContext]);  			m_connections.Remove (connectionContext);  			Children.Add (middleConnector);  			var sourceToMiddle = m_diagram.ConnectionsFactory.CreateConnection (connectionContext.StartPoint' middleConnector.ConnectionPoint);  			var middleToTarget = m_diagram.ConnectionsFactory.CreateConnection (middleConnector.ConnectionPoint' connectionContext.EndPoint);  			m_diagram.Connections.Add (sourceToMiddle);  			m_diagram.Connections.Add (middleToTarget);  			var sourceToMiddleContainer = new ConnectionContainerControl (oldSource' middleConnector' sourceToMiddle);  			m_connections.Add (sourceToMiddle' sourceToMiddleContainer);  			Children.Add (sourceToMiddleContainer);  			var middleToTargetContainer = new ConnectionContainerControl (middleConnector' oldDestination' middleToTarget);  			m_connections.Add (middleToTarget' middleToTargetContainer);  			Children.Add (middleToTargetContainer);  			// add connection from original node to middle connection point  			var newConnection = m_diagram.ConnectionsFactory.CreateConnection (point.SourceConnectionPoint' middleConnector.ConnectionPoint);  			if (newConnection != null) {  				m_diagram.Connections.Add (newConnection);  				var connectionContainer = new ConnectionContainerControl (point.SourceConnectorControl' middleConnector' newConnection);  				m_connections.Add (newConnection' connectionContainer);  				Children.Add (connectionContainer);  			}  		}  		// remove virtual connection and point  		Children.Remove (point);  		var virtualConnection = m_connections.Keys.FirstOrDefault (k => k is VirtualConnection);  		if (virtualConnection != null) {  			Children.Remove (m_connections [virtualConnection]);  			m_connections.Remove (virtualConnection);  		}  	}  	var selectionRect = m_hittestElement as SelectionRect;  	if (selectionRect != null)// mass selection  	 {  		double selectionStartX = m_currentPosition.X;  		double selectionStartY = m_currentPosition.Y;  		if (selectionRect.SelectionStartPoint.X < selectionStartX) {  			selectionStartX = selectionRect.SelectionStartPoint.X;  		}  		if (selectionRect.SelectionStartPoint.Y < selectionStartY) {  			selectionStartY = selectionRect.SelectionStartPoint.Y;  		}  		var startPoint = new Point (selectionStartX' selectionStartY);  		// find elements under selection rect  		var elements = this.AreaHitTest<NodeContainerControl> (startPoint' selectionRect.ActualWidth' selectionRect.ActualHeight);  		foreach (var coveredNode in elements.Select (n => n.Node)) {  			ToggleSelection (coveredNode' true);  		}  		// remove selection rectangle  		Children.Remove (selectionRect);  	}  	var node = m_hittestElement as NodeContainerControl;  	if (node != null && // single node selection  	Math.Abs (m_currentPosition.X - m_originPoint.X) <= SystemParameters.MinimumHorizontalDragDistance && Math.Abs (m_currentPosition.Y - m_originPoint.Y) <= SystemParameters.MinimumVerticalDragDistance) {  		if (m_selectedNodes.Count >= 1)// after mass selection remove selection from nodes other that clicked one  		 {  			var removeSelection = m_selectedNodes.Where (n => !n.Equals (node.Node)).ToList ();  			foreach (var selectedNode in removeSelection) {  				ToggleSelection (selectedNode' false);  			}  			ToggleSelection (node.Node' true);  		}  		else {  			ToggleSelection (node.Node' !node.Node.IsSelected);  		}  	}  	var connectionCtrl = m_hittestElement as ConnectionContainerControl;  	if (connectionCtrl != null)// connections selection  	 {  		var connections = m_connections.Where (c => c.Value.Equals (connectionCtrl)).Select (c => c.Key);  		foreach (var connection in connections) {  			connection.IsSelected = !connection.IsSelected;  		}  	}  }  else {  	// click on canvas clears selection  	foreach (var selectedNode in m_selectedNodes) {  		selectedNode.IsSelected = false;  	}  	m_selectedNodes.Clear ();  }  
Magic Number,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,OnPreviewMouseUp,The following statement contains a magic number: if (m_hittestElement != null) {  	m_hittestElement.ReleaseMouseCapture ();  	var point = m_hittestElement as VirtualConnectionPoint;  	if (point != null) {  		var hittest = this.AreaHitTest<ConnectorControl> (m_currentPosition' Constants.VirtualPointXOffset - 5);  		if (hittest != null && hittest.ConnectionPoint.CanConnect (point.SourceConnectionPoint)) {  			// if captured element is VirtualConnector and hittest element is ConnectionPoint - create connection  			var newConnection = m_diagram.ConnectionsFactory.CreateConnection (point.SourceConnectionPoint' hittest.ConnectionPoint);  			if (newConnection != null) {  				m_diagram.Connections.Add (newConnection);  				// add connection contrainer control to canvas  				var connectionContainer = new ConnectionContainerControl (point.SourceConnectorControl' hittest' newConnection);  				m_connections.Add (newConnection' connectionContainer);  				Children.Add (connectionContainer);  			}  		}  		var noneVirtualConnection = this.HitTest<ConnectionContainerControl> (m_currentPosition);  		if (noneVirtualConnection != null) {  			var oldSource = noneVirtualConnection.Source;  			var oldDestination = noneVirtualConnection.Destination;  			var connectionContext = noneVirtualConnection.Connection;  			ConnectorControl middleConnector = new ConnectorControl {  				X = m_currentPosition.X'  				Y = m_currentPosition.Y'  				Width = 10'  				Height = 10'  				ConnectionPoint = Activator.CreateInstance (noneVirtualConnection.Connection.StartPoint.GetType ()) as IConnectionPoint  			};  			Canvas.SetLeft (middleConnector' middleConnector.X - middleConnector.Width / 2);  			Canvas.SetTop (middleConnector' middleConnector.Y - middleConnector.Height / 2);  			Children.Remove (m_connections [connectionContext]);  			m_connections.Remove (connectionContext);  			Children.Add (middleConnector);  			var sourceToMiddle = m_diagram.ConnectionsFactory.CreateConnection (connectionContext.StartPoint' middleConnector.ConnectionPoint);  			var middleToTarget = m_diagram.ConnectionsFactory.CreateConnection (middleConnector.ConnectionPoint' connectionContext.EndPoint);  			m_diagram.Connections.Add (sourceToMiddle);  			m_diagram.Connections.Add (middleToTarget);  			var sourceToMiddleContainer = new ConnectionContainerControl (oldSource' middleConnector' sourceToMiddle);  			m_connections.Add (sourceToMiddle' sourceToMiddleContainer);  			Children.Add (sourceToMiddleContainer);  			var middleToTargetContainer = new ConnectionContainerControl (middleConnector' oldDestination' middleToTarget);  			m_connections.Add (middleToTarget' middleToTargetContainer);  			Children.Add (middleToTargetContainer);  			// add connection from original node to middle connection point  			var newConnection = m_diagram.ConnectionsFactory.CreateConnection (point.SourceConnectionPoint' middleConnector.ConnectionPoint);  			if (newConnection != null) {  				m_diagram.Connections.Add (newConnection);  				var connectionContainer = new ConnectionContainerControl (point.SourceConnectorControl' middleConnector' newConnection);  				m_connections.Add (newConnection' connectionContainer);  				Children.Add (connectionContainer);  			}  		}  		// remove virtual connection and point  		Children.Remove (point);  		var virtualConnection = m_connections.Keys.FirstOrDefault (k => k is VirtualConnection);  		if (virtualConnection != null) {  			Children.Remove (m_connections [virtualConnection]);  			m_connections.Remove (virtualConnection);  		}  	}  	var selectionRect = m_hittestElement as SelectionRect;  	if (selectionRect != null)// mass selection  	 {  		double selectionStartX = m_currentPosition.X;  		double selectionStartY = m_currentPosition.Y;  		if (selectionRect.SelectionStartPoint.X < selectionStartX) {  			selectionStartX = selectionRect.SelectionStartPoint.X;  		}  		if (selectionRect.SelectionStartPoint.Y < selectionStartY) {  			selectionStartY = selectionRect.SelectionStartPoint.Y;  		}  		var startPoint = new Point (selectionStartX' selectionStartY);  		// find elements under selection rect  		var elements = this.AreaHitTest<NodeContainerControl> (startPoint' selectionRect.ActualWidth' selectionRect.ActualHeight);  		foreach (var coveredNode in elements.Select (n => n.Node)) {  			ToggleSelection (coveredNode' true);  		}  		// remove selection rectangle  		Children.Remove (selectionRect);  	}  	var node = m_hittestElement as NodeContainerControl;  	if (node != null && // single node selection  	Math.Abs (m_currentPosition.X - m_originPoint.X) <= SystemParameters.MinimumHorizontalDragDistance && Math.Abs (m_currentPosition.Y - m_originPoint.Y) <= SystemParameters.MinimumVerticalDragDistance) {  		if (m_selectedNodes.Count >= 1)// after mass selection remove selection from nodes other that clicked one  		 {  			var removeSelection = m_selectedNodes.Where (n => !n.Equals (node.Node)).ToList ();  			foreach (var selectedNode in removeSelection) {  				ToggleSelection (selectedNode' false);  			}  			ToggleSelection (node.Node' true);  		}  		else {  			ToggleSelection (node.Node' !node.Node.IsSelected);  		}  	}  	var connectionCtrl = m_hittestElement as ConnectionContainerControl;  	if (connectionCtrl != null)// connections selection  	 {  		var connections = m_connections.Where (c => c.Value.Equals (connectionCtrl)).Select (c => c.Key);  		foreach (var connection in connections) {  			connection.IsSelected = !connection.IsSelected;  		}  	}  }  else {  	// click on canvas clears selection  	foreach (var selectedNode in m_selectedNodes) {  		selectedNode.IsSelected = false;  	}  	m_selectedNodes.Clear ();  }  
Magic Number,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,OnPreviewMouseUp,The following statement contains a magic number: if (m_hittestElement != null) {  	m_hittestElement.ReleaseMouseCapture ();  	var point = m_hittestElement as VirtualConnectionPoint;  	if (point != null) {  		var hittest = this.AreaHitTest<ConnectorControl> (m_currentPosition' Constants.VirtualPointXOffset - 5);  		if (hittest != null && hittest.ConnectionPoint.CanConnect (point.SourceConnectionPoint)) {  			// if captured element is VirtualConnector and hittest element is ConnectionPoint - create connection  			var newConnection = m_diagram.ConnectionsFactory.CreateConnection (point.SourceConnectionPoint' hittest.ConnectionPoint);  			if (newConnection != null) {  				m_diagram.Connections.Add (newConnection);  				// add connection contrainer control to canvas  				var connectionContainer = new ConnectionContainerControl (point.SourceConnectorControl' hittest' newConnection);  				m_connections.Add (newConnection' connectionContainer);  				Children.Add (connectionContainer);  			}  		}  		var noneVirtualConnection = this.HitTest<ConnectionContainerControl> (m_currentPosition);  		if (noneVirtualConnection != null) {  			var oldSource = noneVirtualConnection.Source;  			var oldDestination = noneVirtualConnection.Destination;  			var connectionContext = noneVirtualConnection.Connection;  			ConnectorControl middleConnector = new ConnectorControl {  				X = m_currentPosition.X'  				Y = m_currentPosition.Y'  				Width = 10'  				Height = 10'  				ConnectionPoint = Activator.CreateInstance (noneVirtualConnection.Connection.StartPoint.GetType ()) as IConnectionPoint  			};  			Canvas.SetLeft (middleConnector' middleConnector.X - middleConnector.Width / 2);  			Canvas.SetTop (middleConnector' middleConnector.Y - middleConnector.Height / 2);  			Children.Remove (m_connections [connectionContext]);  			m_connections.Remove (connectionContext);  			Children.Add (middleConnector);  			var sourceToMiddle = m_diagram.ConnectionsFactory.CreateConnection (connectionContext.StartPoint' middleConnector.ConnectionPoint);  			var middleToTarget = m_diagram.ConnectionsFactory.CreateConnection (middleConnector.ConnectionPoint' connectionContext.EndPoint);  			m_diagram.Connections.Add (sourceToMiddle);  			m_diagram.Connections.Add (middleToTarget);  			var sourceToMiddleContainer = new ConnectionContainerControl (oldSource' middleConnector' sourceToMiddle);  			m_connections.Add (sourceToMiddle' sourceToMiddleContainer);  			Children.Add (sourceToMiddleContainer);  			var middleToTargetContainer = new ConnectionContainerControl (middleConnector' oldDestination' middleToTarget);  			m_connections.Add (middleToTarget' middleToTargetContainer);  			Children.Add (middleToTargetContainer);  			// add connection from original node to middle connection point  			var newConnection = m_diagram.ConnectionsFactory.CreateConnection (point.SourceConnectionPoint' middleConnector.ConnectionPoint);  			if (newConnection != null) {  				m_diagram.Connections.Add (newConnection);  				var connectionContainer = new ConnectionContainerControl (point.SourceConnectorControl' middleConnector' newConnection);  				m_connections.Add (newConnection' connectionContainer);  				Children.Add (connectionContainer);  			}  		}  		// remove virtual connection and point  		Children.Remove (point);  		var virtualConnection = m_connections.Keys.FirstOrDefault (k => k is VirtualConnection);  		if (virtualConnection != null) {  			Children.Remove (m_connections [virtualConnection]);  			m_connections.Remove (virtualConnection);  		}  	}  	var selectionRect = m_hittestElement as SelectionRect;  	if (selectionRect != null)// mass selection  	 {  		double selectionStartX = m_currentPosition.X;  		double selectionStartY = m_currentPosition.Y;  		if (selectionRect.SelectionStartPoint.X < selectionStartX) {  			selectionStartX = selectionRect.SelectionStartPoint.X;  		}  		if (selectionRect.SelectionStartPoint.Y < selectionStartY) {  			selectionStartY = selectionRect.SelectionStartPoint.Y;  		}  		var startPoint = new Point (selectionStartX' selectionStartY);  		// find elements under selection rect  		var elements = this.AreaHitTest<NodeContainerControl> (startPoint' selectionRect.ActualWidth' selectionRect.ActualHeight);  		foreach (var coveredNode in elements.Select (n => n.Node)) {  			ToggleSelection (coveredNode' true);  		}  		// remove selection rectangle  		Children.Remove (selectionRect);  	}  	var node = m_hittestElement as NodeContainerControl;  	if (node != null && // single node selection  	Math.Abs (m_currentPosition.X - m_originPoint.X) <= SystemParameters.MinimumHorizontalDragDistance && Math.Abs (m_currentPosition.Y - m_originPoint.Y) <= SystemParameters.MinimumVerticalDragDistance) {  		if (m_selectedNodes.Count >= 1)// after mass selection remove selection from nodes other that clicked one  		 {  			var removeSelection = m_selectedNodes.Where (n => !n.Equals (node.Node)).ToList ();  			foreach (var selectedNode in removeSelection) {  				ToggleSelection (selectedNode' false);  			}  			ToggleSelection (node.Node' true);  		}  		else {  			ToggleSelection (node.Node' !node.Node.IsSelected);  		}  	}  	var connectionCtrl = m_hittestElement as ConnectionContainerControl;  	if (connectionCtrl != null)// connections selection  	 {  		var connections = m_connections.Where (c => c.Value.Equals (connectionCtrl)).Select (c => c.Key);  		foreach (var connection in connections) {  			connection.IsSelected = !connection.IsSelected;  		}  	}  }  else {  	// click on canvas clears selection  	foreach (var selectedNode in m_selectedNodes) {  		selectedNode.IsSelected = false;  	}  	m_selectedNodes.Clear ();  }  
Magic Number,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,OnPreviewMouseUp,The following statement contains a magic number: if (m_hittestElement != null) {  	m_hittestElement.ReleaseMouseCapture ();  	var point = m_hittestElement as VirtualConnectionPoint;  	if (point != null) {  		var hittest = this.AreaHitTest<ConnectorControl> (m_currentPosition' Constants.VirtualPointXOffset - 5);  		if (hittest != null && hittest.ConnectionPoint.CanConnect (point.SourceConnectionPoint)) {  			// if captured element is VirtualConnector and hittest element is ConnectionPoint - create connection  			var newConnection = m_diagram.ConnectionsFactory.CreateConnection (point.SourceConnectionPoint' hittest.ConnectionPoint);  			if (newConnection != null) {  				m_diagram.Connections.Add (newConnection);  				// add connection contrainer control to canvas  				var connectionContainer = new ConnectionContainerControl (point.SourceConnectorControl' hittest' newConnection);  				m_connections.Add (newConnection' connectionContainer);  				Children.Add (connectionContainer);  			}  		}  		var noneVirtualConnection = this.HitTest<ConnectionContainerControl> (m_currentPosition);  		if (noneVirtualConnection != null) {  			var oldSource = noneVirtualConnection.Source;  			var oldDestination = noneVirtualConnection.Destination;  			var connectionContext = noneVirtualConnection.Connection;  			ConnectorControl middleConnector = new ConnectorControl {  				X = m_currentPosition.X'  				Y = m_currentPosition.Y'  				Width = 10'  				Height = 10'  				ConnectionPoint = Activator.CreateInstance (noneVirtualConnection.Connection.StartPoint.GetType ()) as IConnectionPoint  			};  			Canvas.SetLeft (middleConnector' middleConnector.X - middleConnector.Width / 2);  			Canvas.SetTop (middleConnector' middleConnector.Y - middleConnector.Height / 2);  			Children.Remove (m_connections [connectionContext]);  			m_connections.Remove (connectionContext);  			Children.Add (middleConnector);  			var sourceToMiddle = m_diagram.ConnectionsFactory.CreateConnection (connectionContext.StartPoint' middleConnector.ConnectionPoint);  			var middleToTarget = m_diagram.ConnectionsFactory.CreateConnection (middleConnector.ConnectionPoint' connectionContext.EndPoint);  			m_diagram.Connections.Add (sourceToMiddle);  			m_diagram.Connections.Add (middleToTarget);  			var sourceToMiddleContainer = new ConnectionContainerControl (oldSource' middleConnector' sourceToMiddle);  			m_connections.Add (sourceToMiddle' sourceToMiddleContainer);  			Children.Add (sourceToMiddleContainer);  			var middleToTargetContainer = new ConnectionContainerControl (middleConnector' oldDestination' middleToTarget);  			m_connections.Add (middleToTarget' middleToTargetContainer);  			Children.Add (middleToTargetContainer);  			// add connection from original node to middle connection point  			var newConnection = m_diagram.ConnectionsFactory.CreateConnection (point.SourceConnectionPoint' middleConnector.ConnectionPoint);  			if (newConnection != null) {  				m_diagram.Connections.Add (newConnection);  				var connectionContainer = new ConnectionContainerControl (point.SourceConnectorControl' middleConnector' newConnection);  				m_connections.Add (newConnection' connectionContainer);  				Children.Add (connectionContainer);  			}  		}  		// remove virtual connection and point  		Children.Remove (point);  		var virtualConnection = m_connections.Keys.FirstOrDefault (k => k is VirtualConnection);  		if (virtualConnection != null) {  			Children.Remove (m_connections [virtualConnection]);  			m_connections.Remove (virtualConnection);  		}  	}  	var selectionRect = m_hittestElement as SelectionRect;  	if (selectionRect != null)// mass selection  	 {  		double selectionStartX = m_currentPosition.X;  		double selectionStartY = m_currentPosition.Y;  		if (selectionRect.SelectionStartPoint.X < selectionStartX) {  			selectionStartX = selectionRect.SelectionStartPoint.X;  		}  		if (selectionRect.SelectionStartPoint.Y < selectionStartY) {  			selectionStartY = selectionRect.SelectionStartPoint.Y;  		}  		var startPoint = new Point (selectionStartX' selectionStartY);  		// find elements under selection rect  		var elements = this.AreaHitTest<NodeContainerControl> (startPoint' selectionRect.ActualWidth' selectionRect.ActualHeight);  		foreach (var coveredNode in elements.Select (n => n.Node)) {  			ToggleSelection (coveredNode' true);  		}  		// remove selection rectangle  		Children.Remove (selectionRect);  	}  	var node = m_hittestElement as NodeContainerControl;  	if (node != null && // single node selection  	Math.Abs (m_currentPosition.X - m_originPoint.X) <= SystemParameters.MinimumHorizontalDragDistance && Math.Abs (m_currentPosition.Y - m_originPoint.Y) <= SystemParameters.MinimumVerticalDragDistance) {  		if (m_selectedNodes.Count >= 1)// after mass selection remove selection from nodes other that clicked one  		 {  			var removeSelection = m_selectedNodes.Where (n => !n.Equals (node.Node)).ToList ();  			foreach (var selectedNode in removeSelection) {  				ToggleSelection (selectedNode' false);  			}  			ToggleSelection (node.Node' true);  		}  		else {  			ToggleSelection (node.Node' !node.Node.IsSelected);  		}  	}  	var connectionCtrl = m_hittestElement as ConnectionContainerControl;  	if (connectionCtrl != null)// connections selection  	 {  		var connections = m_connections.Where (c => c.Value.Equals (connectionCtrl)).Select (c => c.Key);  		foreach (var connection in connections) {  			connection.IsSelected = !connection.IsSelected;  		}  	}  }  else {  	// click on canvas clears selection  	foreach (var selectedNode in m_selectedNodes) {  		selectedNode.IsSelected = false;  	}  	m_selectedNodes.Clear ();  }  
Magic Number,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,OnPreviewMouseUp,The following statement contains a magic number: if (m_hittestElement != null) {  	m_hittestElement.ReleaseMouseCapture ();  	var point = m_hittestElement as VirtualConnectionPoint;  	if (point != null) {  		var hittest = this.AreaHitTest<ConnectorControl> (m_currentPosition' Constants.VirtualPointXOffset - 5);  		if (hittest != null && hittest.ConnectionPoint.CanConnect (point.SourceConnectionPoint)) {  			// if captured element is VirtualConnector and hittest element is ConnectionPoint - create connection  			var newConnection = m_diagram.ConnectionsFactory.CreateConnection (point.SourceConnectionPoint' hittest.ConnectionPoint);  			if (newConnection != null) {  				m_diagram.Connections.Add (newConnection);  				// add connection contrainer control to canvas  				var connectionContainer = new ConnectionContainerControl (point.SourceConnectorControl' hittest' newConnection);  				m_connections.Add (newConnection' connectionContainer);  				Children.Add (connectionContainer);  			}  		}  		var noneVirtualConnection = this.HitTest<ConnectionContainerControl> (m_currentPosition);  		if (noneVirtualConnection != null) {  			var oldSource = noneVirtualConnection.Source;  			var oldDestination = noneVirtualConnection.Destination;  			var connectionContext = noneVirtualConnection.Connection;  			ConnectorControl middleConnector = new ConnectorControl {  				X = m_currentPosition.X'  				Y = m_currentPosition.Y'  				Width = 10'  				Height = 10'  				ConnectionPoint = Activator.CreateInstance (noneVirtualConnection.Connection.StartPoint.GetType ()) as IConnectionPoint  			};  			Canvas.SetLeft (middleConnector' middleConnector.X - middleConnector.Width / 2);  			Canvas.SetTop (middleConnector' middleConnector.Y - middleConnector.Height / 2);  			Children.Remove (m_connections [connectionContext]);  			m_connections.Remove (connectionContext);  			Children.Add (middleConnector);  			var sourceToMiddle = m_diagram.ConnectionsFactory.CreateConnection (connectionContext.StartPoint' middleConnector.ConnectionPoint);  			var middleToTarget = m_diagram.ConnectionsFactory.CreateConnection (middleConnector.ConnectionPoint' connectionContext.EndPoint);  			m_diagram.Connections.Add (sourceToMiddle);  			m_diagram.Connections.Add (middleToTarget);  			var sourceToMiddleContainer = new ConnectionContainerControl (oldSource' middleConnector' sourceToMiddle);  			m_connections.Add (sourceToMiddle' sourceToMiddleContainer);  			Children.Add (sourceToMiddleContainer);  			var middleToTargetContainer = new ConnectionContainerControl (middleConnector' oldDestination' middleToTarget);  			m_connections.Add (middleToTarget' middleToTargetContainer);  			Children.Add (middleToTargetContainer);  			// add connection from original node to middle connection point  			var newConnection = m_diagram.ConnectionsFactory.CreateConnection (point.SourceConnectionPoint' middleConnector.ConnectionPoint);  			if (newConnection != null) {  				m_diagram.Connections.Add (newConnection);  				var connectionContainer = new ConnectionContainerControl (point.SourceConnectorControl' middleConnector' newConnection);  				m_connections.Add (newConnection' connectionContainer);  				Children.Add (connectionContainer);  			}  		}  		// remove virtual connection and point  		Children.Remove (point);  		var virtualConnection = m_connections.Keys.FirstOrDefault (k => k is VirtualConnection);  		if (virtualConnection != null) {  			Children.Remove (m_connections [virtualConnection]);  			m_connections.Remove (virtualConnection);  		}  	}  	var selectionRect = m_hittestElement as SelectionRect;  	if (selectionRect != null)// mass selection  	 {  		double selectionStartX = m_currentPosition.X;  		double selectionStartY = m_currentPosition.Y;  		if (selectionRect.SelectionStartPoint.X < selectionStartX) {  			selectionStartX = selectionRect.SelectionStartPoint.X;  		}  		if (selectionRect.SelectionStartPoint.Y < selectionStartY) {  			selectionStartY = selectionRect.SelectionStartPoint.Y;  		}  		var startPoint = new Point (selectionStartX' selectionStartY);  		// find elements under selection rect  		var elements = this.AreaHitTest<NodeContainerControl> (startPoint' selectionRect.ActualWidth' selectionRect.ActualHeight);  		foreach (var coveredNode in elements.Select (n => n.Node)) {  			ToggleSelection (coveredNode' true);  		}  		// remove selection rectangle  		Children.Remove (selectionRect);  	}  	var node = m_hittestElement as NodeContainerControl;  	if (node != null && // single node selection  	Math.Abs (m_currentPosition.X - m_originPoint.X) <= SystemParameters.MinimumHorizontalDragDistance && Math.Abs (m_currentPosition.Y - m_originPoint.Y) <= SystemParameters.MinimumVerticalDragDistance) {  		if (m_selectedNodes.Count >= 1)// after mass selection remove selection from nodes other that clicked one  		 {  			var removeSelection = m_selectedNodes.Where (n => !n.Equals (node.Node)).ToList ();  			foreach (var selectedNode in removeSelection) {  				ToggleSelection (selectedNode' false);  			}  			ToggleSelection (node.Node' true);  		}  		else {  			ToggleSelection (node.Node' !node.Node.IsSelected);  		}  	}  	var connectionCtrl = m_hittestElement as ConnectionContainerControl;  	if (connectionCtrl != null)// connections selection  	 {  		var connections = m_connections.Where (c => c.Value.Equals (connectionCtrl)).Select (c => c.Key);  		foreach (var connection in connections) {  			connection.IsSelected = !connection.IsSelected;  		}  	}  }  else {  	// click on canvas clears selection  	foreach (var selectedNode in m_selectedNodes) {  		selectedNode.IsSelected = false;  	}  	m_selectedNodes.Clear ();  }  
Magic Number,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,OnPreviewMouseUp,The following statement contains a magic number: if (point != null) {  	var hittest = this.AreaHitTest<ConnectorControl> (m_currentPosition' Constants.VirtualPointXOffset - 5);  	if (hittest != null && hittest.ConnectionPoint.CanConnect (point.SourceConnectionPoint)) {  		// if captured element is VirtualConnector and hittest element is ConnectionPoint - create connection  		var newConnection = m_diagram.ConnectionsFactory.CreateConnection (point.SourceConnectionPoint' hittest.ConnectionPoint);  		if (newConnection != null) {  			m_diagram.Connections.Add (newConnection);  			// add connection contrainer control to canvas  			var connectionContainer = new ConnectionContainerControl (point.SourceConnectorControl' hittest' newConnection);  			m_connections.Add (newConnection' connectionContainer);  			Children.Add (connectionContainer);  		}  	}  	var noneVirtualConnection = this.HitTest<ConnectionContainerControl> (m_currentPosition);  	if (noneVirtualConnection != null) {  		var oldSource = noneVirtualConnection.Source;  		var oldDestination = noneVirtualConnection.Destination;  		var connectionContext = noneVirtualConnection.Connection;  		ConnectorControl middleConnector = new ConnectorControl {  			X = m_currentPosition.X'  			Y = m_currentPosition.Y'  			Width = 10'  			Height = 10'  			ConnectionPoint = Activator.CreateInstance (noneVirtualConnection.Connection.StartPoint.GetType ()) as IConnectionPoint  		};  		Canvas.SetLeft (middleConnector' middleConnector.X - middleConnector.Width / 2);  		Canvas.SetTop (middleConnector' middleConnector.Y - middleConnector.Height / 2);  		Children.Remove (m_connections [connectionContext]);  		m_connections.Remove (connectionContext);  		Children.Add (middleConnector);  		var sourceToMiddle = m_diagram.ConnectionsFactory.CreateConnection (connectionContext.StartPoint' middleConnector.ConnectionPoint);  		var middleToTarget = m_diagram.ConnectionsFactory.CreateConnection (middleConnector.ConnectionPoint' connectionContext.EndPoint);  		m_diagram.Connections.Add (sourceToMiddle);  		m_diagram.Connections.Add (middleToTarget);  		var sourceToMiddleContainer = new ConnectionContainerControl (oldSource' middleConnector' sourceToMiddle);  		m_connections.Add (sourceToMiddle' sourceToMiddleContainer);  		Children.Add (sourceToMiddleContainer);  		var middleToTargetContainer = new ConnectionContainerControl (middleConnector' oldDestination' middleToTarget);  		m_connections.Add (middleToTarget' middleToTargetContainer);  		Children.Add (middleToTargetContainer);  		// add connection from original node to middle connection point  		var newConnection = m_diagram.ConnectionsFactory.CreateConnection (point.SourceConnectionPoint' middleConnector.ConnectionPoint);  		if (newConnection != null) {  			m_diagram.Connections.Add (newConnection);  			var connectionContainer = new ConnectionContainerControl (point.SourceConnectorControl' middleConnector' newConnection);  			m_connections.Add (newConnection' connectionContainer);  			Children.Add (connectionContainer);  		}  	}  	// remove virtual connection and point  	Children.Remove (point);  	var virtualConnection = m_connections.Keys.FirstOrDefault (k => k is VirtualConnection);  	if (virtualConnection != null) {  		Children.Remove (m_connections [virtualConnection]);  		m_connections.Remove (virtualConnection);  	}  }  
Magic Number,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,OnPreviewMouseUp,The following statement contains a magic number: if (point != null) {  	var hittest = this.AreaHitTest<ConnectorControl> (m_currentPosition' Constants.VirtualPointXOffset - 5);  	if (hittest != null && hittest.ConnectionPoint.CanConnect (point.SourceConnectionPoint)) {  		// if captured element is VirtualConnector and hittest element is ConnectionPoint - create connection  		var newConnection = m_diagram.ConnectionsFactory.CreateConnection (point.SourceConnectionPoint' hittest.ConnectionPoint);  		if (newConnection != null) {  			m_diagram.Connections.Add (newConnection);  			// add connection contrainer control to canvas  			var connectionContainer = new ConnectionContainerControl (point.SourceConnectorControl' hittest' newConnection);  			m_connections.Add (newConnection' connectionContainer);  			Children.Add (connectionContainer);  		}  	}  	var noneVirtualConnection = this.HitTest<ConnectionContainerControl> (m_currentPosition);  	if (noneVirtualConnection != null) {  		var oldSource = noneVirtualConnection.Source;  		var oldDestination = noneVirtualConnection.Destination;  		var connectionContext = noneVirtualConnection.Connection;  		ConnectorControl middleConnector = new ConnectorControl {  			X = m_currentPosition.X'  			Y = m_currentPosition.Y'  			Width = 10'  			Height = 10'  			ConnectionPoint = Activator.CreateInstance (noneVirtualConnection.Connection.StartPoint.GetType ()) as IConnectionPoint  		};  		Canvas.SetLeft (middleConnector' middleConnector.X - middleConnector.Width / 2);  		Canvas.SetTop (middleConnector' middleConnector.Y - middleConnector.Height / 2);  		Children.Remove (m_connections [connectionContext]);  		m_connections.Remove (connectionContext);  		Children.Add (middleConnector);  		var sourceToMiddle = m_diagram.ConnectionsFactory.CreateConnection (connectionContext.StartPoint' middleConnector.ConnectionPoint);  		var middleToTarget = m_diagram.ConnectionsFactory.CreateConnection (middleConnector.ConnectionPoint' connectionContext.EndPoint);  		m_diagram.Connections.Add (sourceToMiddle);  		m_diagram.Connections.Add (middleToTarget);  		var sourceToMiddleContainer = new ConnectionContainerControl (oldSource' middleConnector' sourceToMiddle);  		m_connections.Add (sourceToMiddle' sourceToMiddleContainer);  		Children.Add (sourceToMiddleContainer);  		var middleToTargetContainer = new ConnectionContainerControl (middleConnector' oldDestination' middleToTarget);  		m_connections.Add (middleToTarget' middleToTargetContainer);  		Children.Add (middleToTargetContainer);  		// add connection from original node to middle connection point  		var newConnection = m_diagram.ConnectionsFactory.CreateConnection (point.SourceConnectionPoint' middleConnector.ConnectionPoint);  		if (newConnection != null) {  			m_diagram.Connections.Add (newConnection);  			var connectionContainer = new ConnectionContainerControl (point.SourceConnectorControl' middleConnector' newConnection);  			m_connections.Add (newConnection' connectionContainer);  			Children.Add (connectionContainer);  		}  	}  	// remove virtual connection and point  	Children.Remove (point);  	var virtualConnection = m_connections.Keys.FirstOrDefault (k => k is VirtualConnection);  	if (virtualConnection != null) {  		Children.Remove (m_connections [virtualConnection]);  		m_connections.Remove (virtualConnection);  	}  }  
Magic Number,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,OnPreviewMouseUp,The following statement contains a magic number: if (point != null) {  	var hittest = this.AreaHitTest<ConnectorControl> (m_currentPosition' Constants.VirtualPointXOffset - 5);  	if (hittest != null && hittest.ConnectionPoint.CanConnect (point.SourceConnectionPoint)) {  		// if captured element is VirtualConnector and hittest element is ConnectionPoint - create connection  		var newConnection = m_diagram.ConnectionsFactory.CreateConnection (point.SourceConnectionPoint' hittest.ConnectionPoint);  		if (newConnection != null) {  			m_diagram.Connections.Add (newConnection);  			// add connection contrainer control to canvas  			var connectionContainer = new ConnectionContainerControl (point.SourceConnectorControl' hittest' newConnection);  			m_connections.Add (newConnection' connectionContainer);  			Children.Add (connectionContainer);  		}  	}  	var noneVirtualConnection = this.HitTest<ConnectionContainerControl> (m_currentPosition);  	if (noneVirtualConnection != null) {  		var oldSource = noneVirtualConnection.Source;  		var oldDestination = noneVirtualConnection.Destination;  		var connectionContext = noneVirtualConnection.Connection;  		ConnectorControl middleConnector = new ConnectorControl {  			X = m_currentPosition.X'  			Y = m_currentPosition.Y'  			Width = 10'  			Height = 10'  			ConnectionPoint = Activator.CreateInstance (noneVirtualConnection.Connection.StartPoint.GetType ()) as IConnectionPoint  		};  		Canvas.SetLeft (middleConnector' middleConnector.X - middleConnector.Width / 2);  		Canvas.SetTop (middleConnector' middleConnector.Y - middleConnector.Height / 2);  		Children.Remove (m_connections [connectionContext]);  		m_connections.Remove (connectionContext);  		Children.Add (middleConnector);  		var sourceToMiddle = m_diagram.ConnectionsFactory.CreateConnection (connectionContext.StartPoint' middleConnector.ConnectionPoint);  		var middleToTarget = m_diagram.ConnectionsFactory.CreateConnection (middleConnector.ConnectionPoint' connectionContext.EndPoint);  		m_diagram.Connections.Add (sourceToMiddle);  		m_diagram.Connections.Add (middleToTarget);  		var sourceToMiddleContainer = new ConnectionContainerControl (oldSource' middleConnector' sourceToMiddle);  		m_connections.Add (sourceToMiddle' sourceToMiddleContainer);  		Children.Add (sourceToMiddleContainer);  		var middleToTargetContainer = new ConnectionContainerControl (middleConnector' oldDestination' middleToTarget);  		m_connections.Add (middleToTarget' middleToTargetContainer);  		Children.Add (middleToTargetContainer);  		// add connection from original node to middle connection point  		var newConnection = m_diagram.ConnectionsFactory.CreateConnection (point.SourceConnectionPoint' middleConnector.ConnectionPoint);  		if (newConnection != null) {  			m_diagram.Connections.Add (newConnection);  			var connectionContainer = new ConnectionContainerControl (point.SourceConnectorControl' middleConnector' newConnection);  			m_connections.Add (newConnection' connectionContainer);  			Children.Add (connectionContainer);  		}  	}  	// remove virtual connection and point  	Children.Remove (point);  	var virtualConnection = m_connections.Keys.FirstOrDefault (k => k is VirtualConnection);  	if (virtualConnection != null) {  		Children.Remove (m_connections [virtualConnection]);  		m_connections.Remove (virtualConnection);  	}  }  
Magic Number,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,OnPreviewMouseUp,The following statement contains a magic number: if (point != null) {  	var hittest = this.AreaHitTest<ConnectorControl> (m_currentPosition' Constants.VirtualPointXOffset - 5);  	if (hittest != null && hittest.ConnectionPoint.CanConnect (point.SourceConnectionPoint)) {  		// if captured element is VirtualConnector and hittest element is ConnectionPoint - create connection  		var newConnection = m_diagram.ConnectionsFactory.CreateConnection (point.SourceConnectionPoint' hittest.ConnectionPoint);  		if (newConnection != null) {  			m_diagram.Connections.Add (newConnection);  			// add connection contrainer control to canvas  			var connectionContainer = new ConnectionContainerControl (point.SourceConnectorControl' hittest' newConnection);  			m_connections.Add (newConnection' connectionContainer);  			Children.Add (connectionContainer);  		}  	}  	var noneVirtualConnection = this.HitTest<ConnectionContainerControl> (m_currentPosition);  	if (noneVirtualConnection != null) {  		var oldSource = noneVirtualConnection.Source;  		var oldDestination = noneVirtualConnection.Destination;  		var connectionContext = noneVirtualConnection.Connection;  		ConnectorControl middleConnector = new ConnectorControl {  			X = m_currentPosition.X'  			Y = m_currentPosition.Y'  			Width = 10'  			Height = 10'  			ConnectionPoint = Activator.CreateInstance (noneVirtualConnection.Connection.StartPoint.GetType ()) as IConnectionPoint  		};  		Canvas.SetLeft (middleConnector' middleConnector.X - middleConnector.Width / 2);  		Canvas.SetTop (middleConnector' middleConnector.Y - middleConnector.Height / 2);  		Children.Remove (m_connections [connectionContext]);  		m_connections.Remove (connectionContext);  		Children.Add (middleConnector);  		var sourceToMiddle = m_diagram.ConnectionsFactory.CreateConnection (connectionContext.StartPoint' middleConnector.ConnectionPoint);  		var middleToTarget = m_diagram.ConnectionsFactory.CreateConnection (middleConnector.ConnectionPoint' connectionContext.EndPoint);  		m_diagram.Connections.Add (sourceToMiddle);  		m_diagram.Connections.Add (middleToTarget);  		var sourceToMiddleContainer = new ConnectionContainerControl (oldSource' middleConnector' sourceToMiddle);  		m_connections.Add (sourceToMiddle' sourceToMiddleContainer);  		Children.Add (sourceToMiddleContainer);  		var middleToTargetContainer = new ConnectionContainerControl (middleConnector' oldDestination' middleToTarget);  		m_connections.Add (middleToTarget' middleToTargetContainer);  		Children.Add (middleToTargetContainer);  		// add connection from original node to middle connection point  		var newConnection = m_diagram.ConnectionsFactory.CreateConnection (point.SourceConnectionPoint' middleConnector.ConnectionPoint);  		if (newConnection != null) {  			m_diagram.Connections.Add (newConnection);  			var connectionContainer = new ConnectionContainerControl (point.SourceConnectorControl' middleConnector' newConnection);  			m_connections.Add (newConnection' connectionContainer);  			Children.Add (connectionContainer);  		}  	}  	// remove virtual connection and point  	Children.Remove (point);  	var virtualConnection = m_connections.Keys.FirstOrDefault (k => k is VirtualConnection);  	if (virtualConnection != null) {  		Children.Remove (m_connections [virtualConnection]);  		m_connections.Remove (virtualConnection);  	}  }  
Magic Number,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,OnPreviewMouseUp,The following statement contains a magic number: if (point != null) {  	var hittest = this.AreaHitTest<ConnectorControl> (m_currentPosition' Constants.VirtualPointXOffset - 5);  	if (hittest != null && hittest.ConnectionPoint.CanConnect (point.SourceConnectionPoint)) {  		// if captured element is VirtualConnector and hittest element is ConnectionPoint - create connection  		var newConnection = m_diagram.ConnectionsFactory.CreateConnection (point.SourceConnectionPoint' hittest.ConnectionPoint);  		if (newConnection != null) {  			m_diagram.Connections.Add (newConnection);  			// add connection contrainer control to canvas  			var connectionContainer = new ConnectionContainerControl (point.SourceConnectorControl' hittest' newConnection);  			m_connections.Add (newConnection' connectionContainer);  			Children.Add (connectionContainer);  		}  	}  	var noneVirtualConnection = this.HitTest<ConnectionContainerControl> (m_currentPosition);  	if (noneVirtualConnection != null) {  		var oldSource = noneVirtualConnection.Source;  		var oldDestination = noneVirtualConnection.Destination;  		var connectionContext = noneVirtualConnection.Connection;  		ConnectorControl middleConnector = new ConnectorControl {  			X = m_currentPosition.X'  			Y = m_currentPosition.Y'  			Width = 10'  			Height = 10'  			ConnectionPoint = Activator.CreateInstance (noneVirtualConnection.Connection.StartPoint.GetType ()) as IConnectionPoint  		};  		Canvas.SetLeft (middleConnector' middleConnector.X - middleConnector.Width / 2);  		Canvas.SetTop (middleConnector' middleConnector.Y - middleConnector.Height / 2);  		Children.Remove (m_connections [connectionContext]);  		m_connections.Remove (connectionContext);  		Children.Add (middleConnector);  		var sourceToMiddle = m_diagram.ConnectionsFactory.CreateConnection (connectionContext.StartPoint' middleConnector.ConnectionPoint);  		var middleToTarget = m_diagram.ConnectionsFactory.CreateConnection (middleConnector.ConnectionPoint' connectionContext.EndPoint);  		m_diagram.Connections.Add (sourceToMiddle);  		m_diagram.Connections.Add (middleToTarget);  		var sourceToMiddleContainer = new ConnectionContainerControl (oldSource' middleConnector' sourceToMiddle);  		m_connections.Add (sourceToMiddle' sourceToMiddleContainer);  		Children.Add (sourceToMiddleContainer);  		var middleToTargetContainer = new ConnectionContainerControl (middleConnector' oldDestination' middleToTarget);  		m_connections.Add (middleToTarget' middleToTargetContainer);  		Children.Add (middleToTargetContainer);  		// add connection from original node to middle connection point  		var newConnection = m_diagram.ConnectionsFactory.CreateConnection (point.SourceConnectionPoint' middleConnector.ConnectionPoint);  		if (newConnection != null) {  			m_diagram.Connections.Add (newConnection);  			var connectionContainer = new ConnectionContainerControl (point.SourceConnectorControl' middleConnector' newConnection);  			m_connections.Add (newConnection' connectionContainer);  			Children.Add (connectionContainer);  		}  	}  	// remove virtual connection and point  	Children.Remove (point);  	var virtualConnection = m_connections.Keys.FirstOrDefault (k => k is VirtualConnection);  	if (virtualConnection != null) {  		Children.Remove (m_connections [virtualConnection]);  		m_connections.Remove (virtualConnection);  	}  }  
Magic Number,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,OnPreviewMouseUp,The following statement contains a magic number: if (noneVirtualConnection != null) {  	var oldSource = noneVirtualConnection.Source;  	var oldDestination = noneVirtualConnection.Destination;  	var connectionContext = noneVirtualConnection.Connection;  	ConnectorControl middleConnector = new ConnectorControl {  		X = m_currentPosition.X'  		Y = m_currentPosition.Y'  		Width = 10'  		Height = 10'  		ConnectionPoint = Activator.CreateInstance (noneVirtualConnection.Connection.StartPoint.GetType ()) as IConnectionPoint  	};  	Canvas.SetLeft (middleConnector' middleConnector.X - middleConnector.Width / 2);  	Canvas.SetTop (middleConnector' middleConnector.Y - middleConnector.Height / 2);  	Children.Remove (m_connections [connectionContext]);  	m_connections.Remove (connectionContext);  	Children.Add (middleConnector);  	var sourceToMiddle = m_diagram.ConnectionsFactory.CreateConnection (connectionContext.StartPoint' middleConnector.ConnectionPoint);  	var middleToTarget = m_diagram.ConnectionsFactory.CreateConnection (middleConnector.ConnectionPoint' connectionContext.EndPoint);  	m_diagram.Connections.Add (sourceToMiddle);  	m_diagram.Connections.Add (middleToTarget);  	var sourceToMiddleContainer = new ConnectionContainerControl (oldSource' middleConnector' sourceToMiddle);  	m_connections.Add (sourceToMiddle' sourceToMiddleContainer);  	Children.Add (sourceToMiddleContainer);  	var middleToTargetContainer = new ConnectionContainerControl (middleConnector' oldDestination' middleToTarget);  	m_connections.Add (middleToTarget' middleToTargetContainer);  	Children.Add (middleToTargetContainer);  	// add connection from original node to middle connection point  	var newConnection = m_diagram.ConnectionsFactory.CreateConnection (point.SourceConnectionPoint' middleConnector.ConnectionPoint);  	if (newConnection != null) {  		m_diagram.Connections.Add (newConnection);  		var connectionContainer = new ConnectionContainerControl (point.SourceConnectorControl' middleConnector' newConnection);  		m_connections.Add (newConnection' connectionContainer);  		Children.Add (connectionContainer);  	}  }  
Magic Number,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,OnPreviewMouseUp,The following statement contains a magic number: if (noneVirtualConnection != null) {  	var oldSource = noneVirtualConnection.Source;  	var oldDestination = noneVirtualConnection.Destination;  	var connectionContext = noneVirtualConnection.Connection;  	ConnectorControl middleConnector = new ConnectorControl {  		X = m_currentPosition.X'  		Y = m_currentPosition.Y'  		Width = 10'  		Height = 10'  		ConnectionPoint = Activator.CreateInstance (noneVirtualConnection.Connection.StartPoint.GetType ()) as IConnectionPoint  	};  	Canvas.SetLeft (middleConnector' middleConnector.X - middleConnector.Width / 2);  	Canvas.SetTop (middleConnector' middleConnector.Y - middleConnector.Height / 2);  	Children.Remove (m_connections [connectionContext]);  	m_connections.Remove (connectionContext);  	Children.Add (middleConnector);  	var sourceToMiddle = m_diagram.ConnectionsFactory.CreateConnection (connectionContext.StartPoint' middleConnector.ConnectionPoint);  	var middleToTarget = m_diagram.ConnectionsFactory.CreateConnection (middleConnector.ConnectionPoint' connectionContext.EndPoint);  	m_diagram.Connections.Add (sourceToMiddle);  	m_diagram.Connections.Add (middleToTarget);  	var sourceToMiddleContainer = new ConnectionContainerControl (oldSource' middleConnector' sourceToMiddle);  	m_connections.Add (sourceToMiddle' sourceToMiddleContainer);  	Children.Add (sourceToMiddleContainer);  	var middleToTargetContainer = new ConnectionContainerControl (middleConnector' oldDestination' middleToTarget);  	m_connections.Add (middleToTarget' middleToTargetContainer);  	Children.Add (middleToTargetContainer);  	// add connection from original node to middle connection point  	var newConnection = m_diagram.ConnectionsFactory.CreateConnection (point.SourceConnectionPoint' middleConnector.ConnectionPoint);  	if (newConnection != null) {  		m_diagram.Connections.Add (newConnection);  		var connectionContainer = new ConnectionContainerControl (point.SourceConnectorControl' middleConnector' newConnection);  		m_connections.Add (newConnection' connectionContainer);  		Children.Add (connectionContainer);  	}  }  
Magic Number,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,OnPreviewMouseUp,The following statement contains a magic number: if (noneVirtualConnection != null) {  	var oldSource = noneVirtualConnection.Source;  	var oldDestination = noneVirtualConnection.Destination;  	var connectionContext = noneVirtualConnection.Connection;  	ConnectorControl middleConnector = new ConnectorControl {  		X = m_currentPosition.X'  		Y = m_currentPosition.Y'  		Width = 10'  		Height = 10'  		ConnectionPoint = Activator.CreateInstance (noneVirtualConnection.Connection.StartPoint.GetType ()) as IConnectionPoint  	};  	Canvas.SetLeft (middleConnector' middleConnector.X - middleConnector.Width / 2);  	Canvas.SetTop (middleConnector' middleConnector.Y - middleConnector.Height / 2);  	Children.Remove (m_connections [connectionContext]);  	m_connections.Remove (connectionContext);  	Children.Add (middleConnector);  	var sourceToMiddle = m_diagram.ConnectionsFactory.CreateConnection (connectionContext.StartPoint' middleConnector.ConnectionPoint);  	var middleToTarget = m_diagram.ConnectionsFactory.CreateConnection (middleConnector.ConnectionPoint' connectionContext.EndPoint);  	m_diagram.Connections.Add (sourceToMiddle);  	m_diagram.Connections.Add (middleToTarget);  	var sourceToMiddleContainer = new ConnectionContainerControl (oldSource' middleConnector' sourceToMiddle);  	m_connections.Add (sourceToMiddle' sourceToMiddleContainer);  	Children.Add (sourceToMiddleContainer);  	var middleToTargetContainer = new ConnectionContainerControl (middleConnector' oldDestination' middleToTarget);  	m_connections.Add (middleToTarget' middleToTargetContainer);  	Children.Add (middleToTargetContainer);  	// add connection from original node to middle connection point  	var newConnection = m_diagram.ConnectionsFactory.CreateConnection (point.SourceConnectionPoint' middleConnector.ConnectionPoint);  	if (newConnection != null) {  		m_diagram.Connections.Add (newConnection);  		var connectionContainer = new ConnectionContainerControl (point.SourceConnectorControl' middleConnector' newConnection);  		m_connections.Add (newConnection' connectionContainer);  		Children.Add (connectionContainer);  	}  }  
Magic Number,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,OnPreviewMouseUp,The following statement contains a magic number: if (noneVirtualConnection != null) {  	var oldSource = noneVirtualConnection.Source;  	var oldDestination = noneVirtualConnection.Destination;  	var connectionContext = noneVirtualConnection.Connection;  	ConnectorControl middleConnector = new ConnectorControl {  		X = m_currentPosition.X'  		Y = m_currentPosition.Y'  		Width = 10'  		Height = 10'  		ConnectionPoint = Activator.CreateInstance (noneVirtualConnection.Connection.StartPoint.GetType ()) as IConnectionPoint  	};  	Canvas.SetLeft (middleConnector' middleConnector.X - middleConnector.Width / 2);  	Canvas.SetTop (middleConnector' middleConnector.Y - middleConnector.Height / 2);  	Children.Remove (m_connections [connectionContext]);  	m_connections.Remove (connectionContext);  	Children.Add (middleConnector);  	var sourceToMiddle = m_diagram.ConnectionsFactory.CreateConnection (connectionContext.StartPoint' middleConnector.ConnectionPoint);  	var middleToTarget = m_diagram.ConnectionsFactory.CreateConnection (middleConnector.ConnectionPoint' connectionContext.EndPoint);  	m_diagram.Connections.Add (sourceToMiddle);  	m_diagram.Connections.Add (middleToTarget);  	var sourceToMiddleContainer = new ConnectionContainerControl (oldSource' middleConnector' sourceToMiddle);  	m_connections.Add (sourceToMiddle' sourceToMiddleContainer);  	Children.Add (sourceToMiddleContainer);  	var middleToTargetContainer = new ConnectionContainerControl (middleConnector' oldDestination' middleToTarget);  	m_connections.Add (middleToTarget' middleToTargetContainer);  	Children.Add (middleToTargetContainer);  	// add connection from original node to middle connection point  	var newConnection = m_diagram.ConnectionsFactory.CreateConnection (point.SourceConnectionPoint' middleConnector.ConnectionPoint);  	if (newConnection != null) {  		m_diagram.Connections.Add (newConnection);  		var connectionContainer = new ConnectionContainerControl (point.SourceConnectorControl' middleConnector' newConnection);  		m_connections.Add (newConnection' connectionContainer);  		Children.Add (connectionContainer);  	}  }  
Magic Number,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,OnPreviewMouseUp,The following statement contains a magic number: Canvas.SetLeft (middleConnector' middleConnector.X - middleConnector.Width / 2);  
Magic Number,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,OnPreviewMouseUp,The following statement contains a magic number: Canvas.SetTop (middleConnector' middleConnector.Y - middleConnector.Height / 2);  
Magic Number,GraphView.Framework.Routers,DirectLineRouter,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Routers\DirectLineRouter.cs,CalculateGeometry,The following statement contains a magic number: return new[] {  	start'  	new Point ((start.X + end.X) / 2' (start.Y + end.Y) / 2)'  	end  };  
Magic Number,GraphView.Framework.Routers,DirectLineRouter,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Routers\DirectLineRouter.cs,CalculateGeometry,The following statement contains a magic number: return new[] {  	start'  	new Point ((start.X + end.X) / 2' (start.Y + end.Y) / 2)'  	end  };  
Missing Default,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,ChildNodes_CollectionChanged,The following switch statement is missing a default case: switch (e.Action) {  case NotifyCollectionChangedAction.Add:  	foreach (var node in e.NewItems.OfType<INode> ()) {  		var control = new NodeContainerControl (node);  		m_nodesSet.Add (node' control);  		Children.Add (control);  	}  	break;  case NotifyCollectionChangedAction.Remove:  	var toRemove = m_nodesSet.Where (n => e.OldItems.Contains (n.Key)).ToList ();  	foreach (var pair in toRemove) {  		m_nodesSet.Remove (pair.Key);  		Children.Remove (pair.Value);  	}  	break;  case NotifyCollectionChangedAction.Reset:  	Children.Clear ();  	m_nodesSet.Clear ();  	m_selectedNodes.Clear ();  	break;  }  
Missing Default,GraphView.Framework.Controls,DiagramCanvasControl,C:\repos\vformanyuk_SimpleCircuitEmulator\GraphView.Framework\Controls\DiagramCanvasControl.cs,Connections_CollectionChanged,The following switch statement is missing a default case: switch (e.Action) {  case NotifyCollectionChangedAction.Add:  	foreach (var connection in e.NewItems.OfType<IConnection> ()) {  		connection.StartPoint.IsConnected = true;  		connection.EndPoint.IsConnected = true;  	}  	break;  case NotifyCollectionChangedAction.Remove:  	foreach (var connection in e.OldItems.OfType<IConnection> ()) {  		connection.StartPoint.IsConnected = false;  		connection.EndPoint.IsConnected = false;  		var control = m_connections [connection];  		Children.Remove (control);  		m_connections.Remove (connection);  	}  	break;  }  
