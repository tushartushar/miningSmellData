Implementation smell,Namespace,Class,File,Method,Description
Long Method,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,CalculateValueIncrement,The method has 165 lines of code.
Complex Method,StockTraderRI.ChartControls,ChartLines,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ChartLines.cs,OnRender,Cyclomatic complexity of the method is 16
Complex Method,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,CalculateValueIncrement,Cyclomatic complexity of the method is 32
Complex Method,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeHorizontalLabels,Cyclomatic complexity of the method is 8
Complex Method,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeVerticalLabels,Cyclomatic complexity of the method is 8
Complex Method,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,EnumerateDrawingGroup,Cyclomatic complexity of the method is 9
Complex Method,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,FindOppositePoint,Cyclomatic complexity of the method is 8
Long Statement,StockTraderRI.ChartControls,ChartLines,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ChartLines.cs,OnRender,The length of the statement  "				drawingContext.DrawLine (ReferenceLinePen' new Point (0' VerticalAxisTickPositions [i])' new Point (RenderSize.Width' VerticalAxisTickPositions [i])); " is 150.
Long Statement,StockTraderRI.ChartControls,ChartLines,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ChartLines.cs,OnRender,The length of the statement  "				drawingContext.DrawLine (ReferenceLinePen' new Point (VerticalAxis - TickMarksLength / 2' VerticalAxisTickPositions [i])' new Point (VerticalAxis + TickMarksLength / 2' VerticalAxisTickPositions [i])); " is 201.
Long Statement,StockTraderRI.ChartControls,ChartLines,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ChartLines.cs,OnRender,The length of the statement  "				drawingContext.DrawLine (ReferenceLinePen' new Point (HorizontalAxisTickPositions [i]' 0)' new Point (HorizontalAxisTickPositions [i]' RenderSize.Height)); " is 155.
Long Statement,StockTraderRI.ChartControls,ChartLines,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ChartLines.cs,OnRender,The length of the statement  "				drawingContext.DrawLine (ReferenceLinePen' new Point (HorizontalAxisTickPositions [i]' HorizontalAxis - TickMarksLength / 2)' new Point (HorizontalAxisTickPositions [i]' HorizontalAxis + TickMarksLength / 2)); " is 209.
Long Statement,StockTraderRI.ChartControls,ChartLines,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ChartLines.cs,OnRender,The length of the statement  "	drawingContext.DrawLine (ReferenceLinePen' new Point (0' HorizontalAxis)' new Point (RenderSize.Width' HorizontalAxis)); " is 120.
Long Statement,StockTraderRI.ChartControls,ChartLines,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ChartLines.cs,OnVerticalAxisTickValuesChanged,The length of the statement  "		obj.VerticalAxisTickPositions.CollectionChanged += new NotifyCollectionChangedEventHandler (obj.VerticalAxisTickPositions_CollectionChanged); " is 141.
Long Statement,StockTraderRI.ChartControls,ClipWedge,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ClipWedge.cs,GetClipGeometry,The length of the statement  "	clipGC.ArcTo (rt.Transform (LineToPoint)' new Size (v.Length' v.Length)' WedgeAngle' isLargeArc' SweepDirection.Clockwise' false' true); " is 136.
Long Statement,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,OnDataValuesChanged,The length of the statement  "		((INotifyCollectionChanged)p.DataValues).CollectionChanged += new NotifyCollectionChangedEventHandler (p.Axis2Panel_CollectionChanged); " is 135.
Long Statement,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,GenerateItemsSource,The length of the statement  "			tempItemsSource.Add (((double)(_startingIncrement + (_numReferenceLines - 1 - referenceLinesCreated) * _valueIncrement)).ToString ()); " is 134.
Long Statement,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,MeasureOverride,The length of the statement  "		_largestLabelSize.Height = _largestLabelSize.Height > tempInternalChildren [i].DesiredSize.Height ? _largestLabelSize.Height : tempInternalChildren [i].DesiredSize.Height; " is 171.
Long Statement,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,MeasureOverride,The length of the statement  "		_largestLabelSize.Width = _largestLabelSize.Width > tempInternalChildren [i].DesiredSize.Width ? _largestLabelSize.Width : tempInternalChildren [i].DesiredSize.Width; " is 166.
Long Statement,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The length of the statement  "			_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Width - 2 * rectWidth) / rectWidth)); " is 125.
Long Statement,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The length of the statement  "		r = new Rect (constraint.Width - rectWidth' (start_height - count * increments - rectHeight / 2)' rectWidth' rectHeight); " is 121.
Long Statement,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The length of the statement  "			_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Height - 2 * rectHeight) / rectHeight)); " is 128.
Long Statement,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The length of the statement  "					r = new Rect (constraint.Width - rectWidth' (start_height - (i - 1) * increments - rectHeight / 2)' rectWidth' rectHeight); " is 123.
Long Statement,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,IsWithinRange,The length of the statement  "	if ((Math.Abs (numerator) / (1 * Math.Pow (10' exponent))) >= lowRange && (Math.Abs (numerator) / (1 * Math.Pow (10' exponent))) <= highRange) { " is 144.
Long Statement,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,IsWithinRange,The length of the statement  "	if ((Math.Abs (numerator) / (2 * Math.Pow (10' exponent))) >= lowRange && (Math.Abs (numerator) / (2 * Math.Pow (10' exponent))) <= highRange) { " is 144.
Long Statement,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,IsWithinRange,The length of the statement  "	if ((Math.Abs (numerator) / (5 * Math.Pow (10' exponent))) >= lowRange && (Math.Abs (numerator) / (5 * Math.Pow (10' exponent))) <= highRange) { " is 144.
Long Statement,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,MeasureOverride,The length of the statement  "		_largestLabelSize.Height = _largestLabelSize.Height > tempInternalChildren [i].DesiredSize.Height ? _largestLabelSize.Height : tempInternalChildren [i].DesiredSize.Height; " is 171.
Long Statement,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,MeasureOverride,The length of the statement  "		_largestLabelSize.Width = _largestLabelSize.Width > tempInternalChildren [i].DesiredSize.Width ? _largestLabelSize.Width : tempInternalChildren [i].DesiredSize.Width; " is 166.
Long Statement,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeVerticalLabels,The length of the statement  "			Rect r = new Rect (0' i * sections + sections / 2 - rectHeight / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height); " is 149.
Long Statement,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeVerticalLabels,The length of the statement  "				Rect r = new Rect (0' i * sections + sections / 2 - rectHeight / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height); " is 149.
Long Statement,StockTraderRI.ChartControls,LabelExtractor,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\LabelExtractor.cs,OnItemsChanged,The length of the statement  "		((INotifyCollectionChanged)oldItems).CollectionChanged -= new NotifyCollectionChangedEventHandler (v.OnLabelsCollectionChanged); " is 128.
Long Statement,StockTraderRI.ChartControls,LabelExtractor,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\LabelExtractor.cs,OnItemsChanged,The length of the statement  "		((INotifyCollectionChanged)v.Items).CollectionChanged += new NotifyCollectionChangedEventHandler (v.OnLabelsCollectionChanged); " is 127.
Long Statement,StockTraderRI.ChartControls,LineChartPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\LineChartPanel.cs,OnValuesChanged,The length of the statement  "		((INotifyCollectionChanged)oldItems).CollectionChanged -= new NotifyCollectionChangedEventHandler (v.LineChartPanel_CollectionChanged); " is 135.
Long Statement,StockTraderRI.ChartControls,LineChartPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\LineChartPanel.cs,CreateLineCurveGeometry,The length of the statement  "	pathFigure.StartPoint = (Point)GeometryOperation.ComputeIntersectionPoint ((FrameworkElement)InternalChildren [0]' (FrameworkElement)InternalChildren [1]); " is 155.
Long Statement,StockTraderRI.ChartControls,LineChartPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\LineChartPanel.cs,CreateLineCurveGeometry,The length of the statement  "		pls.Points.Add (GeometryOperation.ComputeIntersectionPoint ((FrameworkElement)InternalChildren [i]' ((FrameworkElement)InternalChildren [i - 1]))); " is 147.
Long Statement,StockTraderRI.ChartControls,LineChartPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\LineChartPanel.cs,CreateLineCurveGeometry,The length of the statement  "		pathFigure.Segments.Add (new LineSegment (new Point (_childrenPositions [_childrenPositions.Count - 1].X' GetHorizontalAxis (this))' false)); " is 141.
Long Statement,StockTraderRI.ChartControls,LineChartPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\LineChartPanel.cs,CreateAreaCurveGeometry,The length of the statement  "		pathFigure.Segments.Add (new LineSegment (new Point (_childrenPositions [_childrenPositions.Count - 1].X' GetHorizontalAxis (this))' false)); " is 141.
Long Statement,StockTraderRI.ChartControls,LineChartPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\LineChartPanel.cs,ArrangeOverride,The length of the statement  "		Rect r = new Rect (position.X - InternalChildren [i].DesiredSize.Width / 2' position.Y - InternalChildren [i].DesiredSize.Height / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height); " is 215.
Long Statement,StockTraderRI.ChartControls,ValueExtractor,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ValueExtractor.cs,OnItemsChanged,The length of the statement  "		((INotifyCollectionChanged)oldItems).CollectionChanged -= new NotifyCollectionChangedEventHandler (v.OnItemsCollectionChanged); " is 127.
Long Statement,StockTraderRI.ChartControls,ValueExtractor,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ValueExtractor.cs,OnItemsChanged,The length of the statement  "		((INotifyCollectionChanged)v.Items).CollectionChanged += new NotifyCollectionChangedEventHandler (v.OnItemsCollectionChanged); " is 126.
Complex Conditional,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,CalculateValueIncrement,The conditional expression  "allPositiveValues && (low < (high / 2)) || (allNegativeValues && high > (low / 2))"  is complex.
Magic Number,StockTraderRI.ChartControls,ChartLines,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ChartLines.cs,OnRender,The following statement contains a magic number: if (VerticalAxisTickPositions != null) {  	if (DrawVerticalAxisReferenceLines) {  		for (int i = 0; i < VerticalAxisTickPositions.Count; i++)  			drawingContext.DrawLine (ReferenceLinePen' new Point (0' VerticalAxisTickPositions [i])' new Point (RenderSize.Width' VerticalAxisTickPositions [i]));  	}  	else if (DrawVerticalAxisTickMarks) {  		for (int i = 0; i < VerticalAxisTickPositions.Count; i++)  			drawingContext.DrawLine (ReferenceLinePen' new Point (VerticalAxis - TickMarksLength / 2' VerticalAxisTickPositions [i])' new Point (VerticalAxis + TickMarksLength / 2' VerticalAxisTickPositions [i]));  	}  }  
Magic Number,StockTraderRI.ChartControls,ChartLines,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ChartLines.cs,OnRender,The following statement contains a magic number: if (VerticalAxisTickPositions != null) {  	if (DrawVerticalAxisReferenceLines) {  		for (int i = 0; i < VerticalAxisTickPositions.Count; i++)  			drawingContext.DrawLine (ReferenceLinePen' new Point (0' VerticalAxisTickPositions [i])' new Point (RenderSize.Width' VerticalAxisTickPositions [i]));  	}  	else if (DrawVerticalAxisTickMarks) {  		for (int i = 0; i < VerticalAxisTickPositions.Count; i++)  			drawingContext.DrawLine (ReferenceLinePen' new Point (VerticalAxis - TickMarksLength / 2' VerticalAxisTickPositions [i])' new Point (VerticalAxis + TickMarksLength / 2' VerticalAxisTickPositions [i]));  	}  }  
Magic Number,StockTraderRI.ChartControls,ChartLines,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ChartLines.cs,OnRender,The following statement contains a magic number: if (DrawVerticalAxisReferenceLines) {  	for (int i = 0; i < VerticalAxisTickPositions.Count; i++)  		drawingContext.DrawLine (ReferenceLinePen' new Point (0' VerticalAxisTickPositions [i])' new Point (RenderSize.Width' VerticalAxisTickPositions [i]));  }  else if (DrawVerticalAxisTickMarks) {  	for (int i = 0; i < VerticalAxisTickPositions.Count; i++)  		drawingContext.DrawLine (ReferenceLinePen' new Point (VerticalAxis - TickMarksLength / 2' VerticalAxisTickPositions [i])' new Point (VerticalAxis + TickMarksLength / 2' VerticalAxisTickPositions [i]));  }  
Magic Number,StockTraderRI.ChartControls,ChartLines,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ChartLines.cs,OnRender,The following statement contains a magic number: if (DrawVerticalAxisReferenceLines) {  	for (int i = 0; i < VerticalAxisTickPositions.Count; i++)  		drawingContext.DrawLine (ReferenceLinePen' new Point (0' VerticalAxisTickPositions [i])' new Point (RenderSize.Width' VerticalAxisTickPositions [i]));  }  else if (DrawVerticalAxisTickMarks) {  	for (int i = 0; i < VerticalAxisTickPositions.Count; i++)  		drawingContext.DrawLine (ReferenceLinePen' new Point (VerticalAxis - TickMarksLength / 2' VerticalAxisTickPositions [i])' new Point (VerticalAxis + TickMarksLength / 2' VerticalAxisTickPositions [i]));  }  
Magic Number,StockTraderRI.ChartControls,ChartLines,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ChartLines.cs,OnRender,The following statement contains a magic number: if (DrawVerticalAxisTickMarks) {  	for (int i = 0; i < VerticalAxisTickPositions.Count; i++)  		drawingContext.DrawLine (ReferenceLinePen' new Point (VerticalAxis - TickMarksLength / 2' VerticalAxisTickPositions [i])' new Point (VerticalAxis + TickMarksLength / 2' VerticalAxisTickPositions [i]));  }  
Magic Number,StockTraderRI.ChartControls,ChartLines,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ChartLines.cs,OnRender,The following statement contains a magic number: if (DrawVerticalAxisTickMarks) {  	for (int i = 0; i < VerticalAxisTickPositions.Count; i++)  		drawingContext.DrawLine (ReferenceLinePen' new Point (VerticalAxis - TickMarksLength / 2' VerticalAxisTickPositions [i])' new Point (VerticalAxis + TickMarksLength / 2' VerticalAxisTickPositions [i]));  }  
Magic Number,StockTraderRI.ChartControls,ChartLines,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ChartLines.cs,OnRender,The following statement contains a magic number: for (int i = 0; i < VerticalAxisTickPositions.Count; i++)  	drawingContext.DrawLine (ReferenceLinePen' new Point (VerticalAxis - TickMarksLength / 2' VerticalAxisTickPositions [i])' new Point (VerticalAxis + TickMarksLength / 2' VerticalAxisTickPositions [i]));  
Magic Number,StockTraderRI.ChartControls,ChartLines,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ChartLines.cs,OnRender,The following statement contains a magic number: for (int i = 0; i < VerticalAxisTickPositions.Count; i++)  	drawingContext.DrawLine (ReferenceLinePen' new Point (VerticalAxis - TickMarksLength / 2' VerticalAxisTickPositions [i])' new Point (VerticalAxis + TickMarksLength / 2' VerticalAxisTickPositions [i]));  
Magic Number,StockTraderRI.ChartControls,ChartLines,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ChartLines.cs,OnRender,The following statement contains a magic number: drawingContext.DrawLine (ReferenceLinePen' new Point (VerticalAxis - TickMarksLength / 2' VerticalAxisTickPositions [i])' new Point (VerticalAxis + TickMarksLength / 2' VerticalAxisTickPositions [i]));  
Magic Number,StockTraderRI.ChartControls,ChartLines,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ChartLines.cs,OnRender,The following statement contains a magic number: drawingContext.DrawLine (ReferenceLinePen' new Point (VerticalAxis - TickMarksLength / 2' VerticalAxisTickPositions [i])' new Point (VerticalAxis + TickMarksLength / 2' VerticalAxisTickPositions [i]));  
Magic Number,StockTraderRI.ChartControls,ChartLines,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ChartLines.cs,OnRender,The following statement contains a magic number: if (HorizontalAxisTickPositions != null) {  	if (DrawHorizontalAxisReferenceLines) {  		for (int i = 0; i < HorizontalAxisTickPositions.Count; i++)  			drawingContext.DrawLine (ReferenceLinePen' new Point (HorizontalAxisTickPositions [i]' 0)' new Point (HorizontalAxisTickPositions [i]' RenderSize.Height));  	}  	else if (DrawHorizontalAxisTickMarks) {  		for (int i = 0; i < HorizontalAxisTickPositions.Count; i++)  			drawingContext.DrawLine (ReferenceLinePen' new Point (HorizontalAxisTickPositions [i]' HorizontalAxis - TickMarksLength / 2)' new Point (HorizontalAxisTickPositions [i]' HorizontalAxis + TickMarksLength / 2));  	}  }  
Magic Number,StockTraderRI.ChartControls,ChartLines,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ChartLines.cs,OnRender,The following statement contains a magic number: if (HorizontalAxisTickPositions != null) {  	if (DrawHorizontalAxisReferenceLines) {  		for (int i = 0; i < HorizontalAxisTickPositions.Count; i++)  			drawingContext.DrawLine (ReferenceLinePen' new Point (HorizontalAxisTickPositions [i]' 0)' new Point (HorizontalAxisTickPositions [i]' RenderSize.Height));  	}  	else if (DrawHorizontalAxisTickMarks) {  		for (int i = 0; i < HorizontalAxisTickPositions.Count; i++)  			drawingContext.DrawLine (ReferenceLinePen' new Point (HorizontalAxisTickPositions [i]' HorizontalAxis - TickMarksLength / 2)' new Point (HorizontalAxisTickPositions [i]' HorizontalAxis + TickMarksLength / 2));  	}  }  
Magic Number,StockTraderRI.ChartControls,ChartLines,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ChartLines.cs,OnRender,The following statement contains a magic number: if (DrawHorizontalAxisReferenceLines) {  	for (int i = 0; i < HorizontalAxisTickPositions.Count; i++)  		drawingContext.DrawLine (ReferenceLinePen' new Point (HorizontalAxisTickPositions [i]' 0)' new Point (HorizontalAxisTickPositions [i]' RenderSize.Height));  }  else if (DrawHorizontalAxisTickMarks) {  	for (int i = 0; i < HorizontalAxisTickPositions.Count; i++)  		drawingContext.DrawLine (ReferenceLinePen' new Point (HorizontalAxisTickPositions [i]' HorizontalAxis - TickMarksLength / 2)' new Point (HorizontalAxisTickPositions [i]' HorizontalAxis + TickMarksLength / 2));  }  
Magic Number,StockTraderRI.ChartControls,ChartLines,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ChartLines.cs,OnRender,The following statement contains a magic number: if (DrawHorizontalAxisReferenceLines) {  	for (int i = 0; i < HorizontalAxisTickPositions.Count; i++)  		drawingContext.DrawLine (ReferenceLinePen' new Point (HorizontalAxisTickPositions [i]' 0)' new Point (HorizontalAxisTickPositions [i]' RenderSize.Height));  }  else if (DrawHorizontalAxisTickMarks) {  	for (int i = 0; i < HorizontalAxisTickPositions.Count; i++)  		drawingContext.DrawLine (ReferenceLinePen' new Point (HorizontalAxisTickPositions [i]' HorizontalAxis - TickMarksLength / 2)' new Point (HorizontalAxisTickPositions [i]' HorizontalAxis + TickMarksLength / 2));  }  
Magic Number,StockTraderRI.ChartControls,ChartLines,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ChartLines.cs,OnRender,The following statement contains a magic number: if (DrawHorizontalAxisTickMarks) {  	for (int i = 0; i < HorizontalAxisTickPositions.Count; i++)  		drawingContext.DrawLine (ReferenceLinePen' new Point (HorizontalAxisTickPositions [i]' HorizontalAxis - TickMarksLength / 2)' new Point (HorizontalAxisTickPositions [i]' HorizontalAxis + TickMarksLength / 2));  }  
Magic Number,StockTraderRI.ChartControls,ChartLines,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ChartLines.cs,OnRender,The following statement contains a magic number: if (DrawHorizontalAxisTickMarks) {  	for (int i = 0; i < HorizontalAxisTickPositions.Count; i++)  		drawingContext.DrawLine (ReferenceLinePen' new Point (HorizontalAxisTickPositions [i]' HorizontalAxis - TickMarksLength / 2)' new Point (HorizontalAxisTickPositions [i]' HorizontalAxis + TickMarksLength / 2));  }  
Magic Number,StockTraderRI.ChartControls,ChartLines,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ChartLines.cs,OnRender,The following statement contains a magic number: for (int i = 0; i < HorizontalAxisTickPositions.Count; i++)  	drawingContext.DrawLine (ReferenceLinePen' new Point (HorizontalAxisTickPositions [i]' HorizontalAxis - TickMarksLength / 2)' new Point (HorizontalAxisTickPositions [i]' HorizontalAxis + TickMarksLength / 2));  
Magic Number,StockTraderRI.ChartControls,ChartLines,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ChartLines.cs,OnRender,The following statement contains a magic number: for (int i = 0; i < HorizontalAxisTickPositions.Count; i++)  	drawingContext.DrawLine (ReferenceLinePen' new Point (HorizontalAxisTickPositions [i]' HorizontalAxis - TickMarksLength / 2)' new Point (HorizontalAxisTickPositions [i]' HorizontalAxis + TickMarksLength / 2));  
Magic Number,StockTraderRI.ChartControls,ChartLines,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ChartLines.cs,OnRender,The following statement contains a magic number: drawingContext.DrawLine (ReferenceLinePen' new Point (HorizontalAxisTickPositions [i]' HorizontalAxis - TickMarksLength / 2)' new Point (HorizontalAxisTickPositions [i]' HorizontalAxis + TickMarksLength / 2));  
Magic Number,StockTraderRI.ChartControls,ChartLines,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ChartLines.cs,OnRender,The following statement contains a magic number: drawingContext.DrawLine (ReferenceLinePen' new Point (HorizontalAxisTickPositions [i]' HorizontalAxis - TickMarksLength / 2)' new Point (HorizontalAxisTickPositions [i]' HorizontalAxis + TickMarksLength / 2));  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if (start_width > end_width) {  	tempTickPositions.Clear ();  	Rect r = new Rect (start_width - rectWidth / 2' 0' rectWidth' rectHeight);  	InternalChildren [0].Arrange (r);  	tempTickPositions.Add (start_width);  	int count = InternalChildren.Count - 1;  	r = new Rect (start_width - count * increments - rectWidth / 2' 0' rectWidth' rectHeight);  	InternalChildren [count].Arrange (r);  	tempTickPositions.Add (start_width - count * increments);  	if (constraint.Width > 3 * rectWidth) {  		_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Width - 2 * rectWidth) / rectWidth));  		if ((InternalChildren.Count - 2) != 2.0)  			_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  		_canDisplayAllLabels = true;  		if (_skipFactor > 1) {  			_canDisplayAllLabels = false;  		}  		for (int i = 2; i <= InternalChildren.Count - 1; i++) {  			tempTickPositions.Add (start_width - (i - 1) * increments);  			if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  				r = new Rect (start_width - (i - 1) * increments - rectWidth / 2' 0' rectWidth' rectHeight);  				InternalChildren [i - 1].Arrange (r);  			}  			else {  				InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  			}  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if (start_width > end_width) {  	tempTickPositions.Clear ();  	Rect r = new Rect (start_width - rectWidth / 2' 0' rectWidth' rectHeight);  	InternalChildren [0].Arrange (r);  	tempTickPositions.Add (start_width);  	int count = InternalChildren.Count - 1;  	r = new Rect (start_width - count * increments - rectWidth / 2' 0' rectWidth' rectHeight);  	InternalChildren [count].Arrange (r);  	tempTickPositions.Add (start_width - count * increments);  	if (constraint.Width > 3 * rectWidth) {  		_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Width - 2 * rectWidth) / rectWidth));  		if ((InternalChildren.Count - 2) != 2.0)  			_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  		_canDisplayAllLabels = true;  		if (_skipFactor > 1) {  			_canDisplayAllLabels = false;  		}  		for (int i = 2; i <= InternalChildren.Count - 1; i++) {  			tempTickPositions.Add (start_width - (i - 1) * increments);  			if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  				r = new Rect (start_width - (i - 1) * increments - rectWidth / 2' 0' rectWidth' rectHeight);  				InternalChildren [i - 1].Arrange (r);  			}  			else {  				InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  			}  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if (start_width > end_width) {  	tempTickPositions.Clear ();  	Rect r = new Rect (start_width - rectWidth / 2' 0' rectWidth' rectHeight);  	InternalChildren [0].Arrange (r);  	tempTickPositions.Add (start_width);  	int count = InternalChildren.Count - 1;  	r = new Rect (start_width - count * increments - rectWidth / 2' 0' rectWidth' rectHeight);  	InternalChildren [count].Arrange (r);  	tempTickPositions.Add (start_width - count * increments);  	if (constraint.Width > 3 * rectWidth) {  		_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Width - 2 * rectWidth) / rectWidth));  		if ((InternalChildren.Count - 2) != 2.0)  			_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  		_canDisplayAllLabels = true;  		if (_skipFactor > 1) {  			_canDisplayAllLabels = false;  		}  		for (int i = 2; i <= InternalChildren.Count - 1; i++) {  			tempTickPositions.Add (start_width - (i - 1) * increments);  			if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  				r = new Rect (start_width - (i - 1) * increments - rectWidth / 2' 0' rectWidth' rectHeight);  				InternalChildren [i - 1].Arrange (r);  			}  			else {  				InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  			}  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if (start_width > end_width) {  	tempTickPositions.Clear ();  	Rect r = new Rect (start_width - rectWidth / 2' 0' rectWidth' rectHeight);  	InternalChildren [0].Arrange (r);  	tempTickPositions.Add (start_width);  	int count = InternalChildren.Count - 1;  	r = new Rect (start_width - count * increments - rectWidth / 2' 0' rectWidth' rectHeight);  	InternalChildren [count].Arrange (r);  	tempTickPositions.Add (start_width - count * increments);  	if (constraint.Width > 3 * rectWidth) {  		_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Width - 2 * rectWidth) / rectWidth));  		if ((InternalChildren.Count - 2) != 2.0)  			_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  		_canDisplayAllLabels = true;  		if (_skipFactor > 1) {  			_canDisplayAllLabels = false;  		}  		for (int i = 2; i <= InternalChildren.Count - 1; i++) {  			tempTickPositions.Add (start_width - (i - 1) * increments);  			if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  				r = new Rect (start_width - (i - 1) * increments - rectWidth / 2' 0' rectWidth' rectHeight);  				InternalChildren [i - 1].Arrange (r);  			}  			else {  				InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  			}  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if (start_width > end_width) {  	tempTickPositions.Clear ();  	Rect r = new Rect (start_width - rectWidth / 2' 0' rectWidth' rectHeight);  	InternalChildren [0].Arrange (r);  	tempTickPositions.Add (start_width);  	int count = InternalChildren.Count - 1;  	r = new Rect (start_width - count * increments - rectWidth / 2' 0' rectWidth' rectHeight);  	InternalChildren [count].Arrange (r);  	tempTickPositions.Add (start_width - count * increments);  	if (constraint.Width > 3 * rectWidth) {  		_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Width - 2 * rectWidth) / rectWidth));  		if ((InternalChildren.Count - 2) != 2.0)  			_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  		_canDisplayAllLabels = true;  		if (_skipFactor > 1) {  			_canDisplayAllLabels = false;  		}  		for (int i = 2; i <= InternalChildren.Count - 1; i++) {  			tempTickPositions.Add (start_width - (i - 1) * increments);  			if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  				r = new Rect (start_width - (i - 1) * increments - rectWidth / 2' 0' rectWidth' rectHeight);  				InternalChildren [i - 1].Arrange (r);  			}  			else {  				InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  			}  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if (start_width > end_width) {  	tempTickPositions.Clear ();  	Rect r = new Rect (start_width - rectWidth / 2' 0' rectWidth' rectHeight);  	InternalChildren [0].Arrange (r);  	tempTickPositions.Add (start_width);  	int count = InternalChildren.Count - 1;  	r = new Rect (start_width - count * increments - rectWidth / 2' 0' rectWidth' rectHeight);  	InternalChildren [count].Arrange (r);  	tempTickPositions.Add (start_width - count * increments);  	if (constraint.Width > 3 * rectWidth) {  		_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Width - 2 * rectWidth) / rectWidth));  		if ((InternalChildren.Count - 2) != 2.0)  			_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  		_canDisplayAllLabels = true;  		if (_skipFactor > 1) {  			_canDisplayAllLabels = false;  		}  		for (int i = 2; i <= InternalChildren.Count - 1; i++) {  			tempTickPositions.Add (start_width - (i - 1) * increments);  			if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  				r = new Rect (start_width - (i - 1) * increments - rectWidth / 2' 0' rectWidth' rectHeight);  				InternalChildren [i - 1].Arrange (r);  			}  			else {  				InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  			}  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if (start_width > end_width) {  	tempTickPositions.Clear ();  	Rect r = new Rect (start_width - rectWidth / 2' 0' rectWidth' rectHeight);  	InternalChildren [0].Arrange (r);  	tempTickPositions.Add (start_width);  	int count = InternalChildren.Count - 1;  	r = new Rect (start_width - count * increments - rectWidth / 2' 0' rectWidth' rectHeight);  	InternalChildren [count].Arrange (r);  	tempTickPositions.Add (start_width - count * increments);  	if (constraint.Width > 3 * rectWidth) {  		_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Width - 2 * rectWidth) / rectWidth));  		if ((InternalChildren.Count - 2) != 2.0)  			_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  		_canDisplayAllLabels = true;  		if (_skipFactor > 1) {  			_canDisplayAllLabels = false;  		}  		for (int i = 2; i <= InternalChildren.Count - 1; i++) {  			tempTickPositions.Add (start_width - (i - 1) * increments);  			if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  				r = new Rect (start_width - (i - 1) * increments - rectWidth / 2' 0' rectWidth' rectHeight);  				InternalChildren [i - 1].Arrange (r);  			}  			else {  				InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  			}  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if (start_width > end_width) {  	tempTickPositions.Clear ();  	Rect r = new Rect (start_width - rectWidth / 2' 0' rectWidth' rectHeight);  	InternalChildren [0].Arrange (r);  	tempTickPositions.Add (start_width);  	int count = InternalChildren.Count - 1;  	r = new Rect (start_width - count * increments - rectWidth / 2' 0' rectWidth' rectHeight);  	InternalChildren [count].Arrange (r);  	tempTickPositions.Add (start_width - count * increments);  	if (constraint.Width > 3 * rectWidth) {  		_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Width - 2 * rectWidth) / rectWidth));  		if ((InternalChildren.Count - 2) != 2.0)  			_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  		_canDisplayAllLabels = true;  		if (_skipFactor > 1) {  			_canDisplayAllLabels = false;  		}  		for (int i = 2; i <= InternalChildren.Count - 1; i++) {  			tempTickPositions.Add (start_width - (i - 1) * increments);  			if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  				r = new Rect (start_width - (i - 1) * increments - rectWidth / 2' 0' rectWidth' rectHeight);  				InternalChildren [i - 1].Arrange (r);  			}  			else {  				InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  			}  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if (start_width > end_width) {  	tempTickPositions.Clear ();  	Rect r = new Rect (start_width - rectWidth / 2' 0' rectWidth' rectHeight);  	InternalChildren [0].Arrange (r);  	tempTickPositions.Add (start_width);  	int count = InternalChildren.Count - 1;  	r = new Rect (start_width - count * increments - rectWidth / 2' 0' rectWidth' rectHeight);  	InternalChildren [count].Arrange (r);  	tempTickPositions.Add (start_width - count * increments);  	if (constraint.Width > 3 * rectWidth) {  		_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Width - 2 * rectWidth) / rectWidth));  		if ((InternalChildren.Count - 2) != 2.0)  			_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  		_canDisplayAllLabels = true;  		if (_skipFactor > 1) {  			_canDisplayAllLabels = false;  		}  		for (int i = 2; i <= InternalChildren.Count - 1; i++) {  			tempTickPositions.Add (start_width - (i - 1) * increments);  			if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  				r = new Rect (start_width - (i - 1) * increments - rectWidth / 2' 0' rectWidth' rectHeight);  				InternalChildren [i - 1].Arrange (r);  			}  			else {  				InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  			}  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if (start_width > end_width) {  	tempTickPositions.Clear ();  	Rect r = new Rect (start_width - rectWidth / 2' 0' rectWidth' rectHeight);  	InternalChildren [0].Arrange (r);  	tempTickPositions.Add (start_width);  	int count = InternalChildren.Count - 1;  	r = new Rect (start_width - count * increments - rectWidth / 2' 0' rectWidth' rectHeight);  	InternalChildren [count].Arrange (r);  	tempTickPositions.Add (start_width - count * increments);  	if (constraint.Width > 3 * rectWidth) {  		_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Width - 2 * rectWidth) / rectWidth));  		if ((InternalChildren.Count - 2) != 2.0)  			_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  		_canDisplayAllLabels = true;  		if (_skipFactor > 1) {  			_canDisplayAllLabels = false;  		}  		for (int i = 2; i <= InternalChildren.Count - 1; i++) {  			tempTickPositions.Add (start_width - (i - 1) * increments);  			if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  				r = new Rect (start_width - (i - 1) * increments - rectWidth / 2' 0' rectWidth' rectHeight);  				InternalChildren [i - 1].Arrange (r);  			}  			else {  				InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  			}  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if (start_width > end_width) {  	tempTickPositions.Clear ();  	Rect r = new Rect (start_width - rectWidth / 2' 0' rectWidth' rectHeight);  	InternalChildren [0].Arrange (r);  	tempTickPositions.Add (start_width);  	int count = InternalChildren.Count - 1;  	r = new Rect (start_width - count * increments - rectWidth / 2' 0' rectWidth' rectHeight);  	InternalChildren [count].Arrange (r);  	tempTickPositions.Add (start_width - count * increments);  	if (constraint.Width > 3 * rectWidth) {  		_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Width - 2 * rectWidth) / rectWidth));  		if ((InternalChildren.Count - 2) != 2.0)  			_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  		_canDisplayAllLabels = true;  		if (_skipFactor > 1) {  			_canDisplayAllLabels = false;  		}  		for (int i = 2; i <= InternalChildren.Count - 1; i++) {  			tempTickPositions.Add (start_width - (i - 1) * increments);  			if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  				r = new Rect (start_width - (i - 1) * increments - rectWidth / 2' 0' rectWidth' rectHeight);  				InternalChildren [i - 1].Arrange (r);  			}  			else {  				InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  			}  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: r = new Rect (start_width - count * increments - rectWidth / 2' 0' rectWidth' rectHeight);  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if (constraint.Width > 3 * rectWidth) {  	_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Width - 2 * rectWidth) / rectWidth));  	if ((InternalChildren.Count - 2) != 2.0)  		_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  	_canDisplayAllLabels = true;  	if (_skipFactor > 1) {  		_canDisplayAllLabels = false;  	}  	for (int i = 2; i <= InternalChildren.Count - 1; i++) {  		tempTickPositions.Add (start_width - (i - 1) * increments);  		if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  			r = new Rect (start_width - (i - 1) * increments - rectWidth / 2' 0' rectWidth' rectHeight);  			InternalChildren [i - 1].Arrange (r);  		}  		else {  			InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if (constraint.Width > 3 * rectWidth) {  	_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Width - 2 * rectWidth) / rectWidth));  	if ((InternalChildren.Count - 2) != 2.0)  		_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  	_canDisplayAllLabels = true;  	if (_skipFactor > 1) {  		_canDisplayAllLabels = false;  	}  	for (int i = 2; i <= InternalChildren.Count - 1; i++) {  		tempTickPositions.Add (start_width - (i - 1) * increments);  		if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  			r = new Rect (start_width - (i - 1) * increments - rectWidth / 2' 0' rectWidth' rectHeight);  			InternalChildren [i - 1].Arrange (r);  		}  		else {  			InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if (constraint.Width > 3 * rectWidth) {  	_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Width - 2 * rectWidth) / rectWidth));  	if ((InternalChildren.Count - 2) != 2.0)  		_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  	_canDisplayAllLabels = true;  	if (_skipFactor > 1) {  		_canDisplayAllLabels = false;  	}  	for (int i = 2; i <= InternalChildren.Count - 1; i++) {  		tempTickPositions.Add (start_width - (i - 1) * increments);  		if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  			r = new Rect (start_width - (i - 1) * increments - rectWidth / 2' 0' rectWidth' rectHeight);  			InternalChildren [i - 1].Arrange (r);  		}  		else {  			InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if (constraint.Width > 3 * rectWidth) {  	_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Width - 2 * rectWidth) / rectWidth));  	if ((InternalChildren.Count - 2) != 2.0)  		_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  	_canDisplayAllLabels = true;  	if (_skipFactor > 1) {  		_canDisplayAllLabels = false;  	}  	for (int i = 2; i <= InternalChildren.Count - 1; i++) {  		tempTickPositions.Add (start_width - (i - 1) * increments);  		if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  			r = new Rect (start_width - (i - 1) * increments - rectWidth / 2' 0' rectWidth' rectHeight);  			InternalChildren [i - 1].Arrange (r);  		}  		else {  			InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if (constraint.Width > 3 * rectWidth) {  	_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Width - 2 * rectWidth) / rectWidth));  	if ((InternalChildren.Count - 2) != 2.0)  		_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  	_canDisplayAllLabels = true;  	if (_skipFactor > 1) {  		_canDisplayAllLabels = false;  	}  	for (int i = 2; i <= InternalChildren.Count - 1; i++) {  		tempTickPositions.Add (start_width - (i - 1) * increments);  		if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  			r = new Rect (start_width - (i - 1) * increments - rectWidth / 2' 0' rectWidth' rectHeight);  			InternalChildren [i - 1].Arrange (r);  		}  		else {  			InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if (constraint.Width > 3 * rectWidth) {  	_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Width - 2 * rectWidth) / rectWidth));  	if ((InternalChildren.Count - 2) != 2.0)  		_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  	_canDisplayAllLabels = true;  	if (_skipFactor > 1) {  		_canDisplayAllLabels = false;  	}  	for (int i = 2; i <= InternalChildren.Count - 1; i++) {  		tempTickPositions.Add (start_width - (i - 1) * increments);  		if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  			r = new Rect (start_width - (i - 1) * increments - rectWidth / 2' 0' rectWidth' rectHeight);  			InternalChildren [i - 1].Arrange (r);  		}  		else {  			InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if (constraint.Width > 3 * rectWidth) {  	_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Width - 2 * rectWidth) / rectWidth));  	if ((InternalChildren.Count - 2) != 2.0)  		_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  	_canDisplayAllLabels = true;  	if (_skipFactor > 1) {  		_canDisplayAllLabels = false;  	}  	for (int i = 2; i <= InternalChildren.Count - 1; i++) {  		tempTickPositions.Add (start_width - (i - 1) * increments);  		if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  			r = new Rect (start_width - (i - 1) * increments - rectWidth / 2' 0' rectWidth' rectHeight);  			InternalChildren [i - 1].Arrange (r);  		}  		else {  			InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if (constraint.Width > 3 * rectWidth) {  	_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Width - 2 * rectWidth) / rectWidth));  	if ((InternalChildren.Count - 2) != 2.0)  		_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  	_canDisplayAllLabels = true;  	if (_skipFactor > 1) {  		_canDisplayAllLabels = false;  	}  	for (int i = 2; i <= InternalChildren.Count - 1; i++) {  		tempTickPositions.Add (start_width - (i - 1) * increments);  		if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  			r = new Rect (start_width - (i - 1) * increments - rectWidth / 2' 0' rectWidth' rectHeight);  			InternalChildren [i - 1].Arrange (r);  		}  		else {  			InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if (constraint.Width > 3 * rectWidth) {  	_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Width - 2 * rectWidth) / rectWidth));  	if ((InternalChildren.Count - 2) != 2.0)  		_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  	_canDisplayAllLabels = true;  	if (_skipFactor > 1) {  		_canDisplayAllLabels = false;  	}  	for (int i = 2; i <= InternalChildren.Count - 1; i++) {  		tempTickPositions.Add (start_width - (i - 1) * increments);  		if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  			r = new Rect (start_width - (i - 1) * increments - rectWidth / 2' 0' rectWidth' rectHeight);  			InternalChildren [i - 1].Arrange (r);  		}  		else {  			InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: _skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Width - 2 * rectWidth) / rectWidth));  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: _skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Width - 2 * rectWidth) / rectWidth));  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if ((InternalChildren.Count - 2) != 2.0)  	_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if ((InternalChildren.Count - 2) != 2.0)  	_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if ((InternalChildren.Count - 2) != 2.0)  	_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if ((InternalChildren.Count - 2) != 2.0)  	_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: _skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: _skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: for (int i = 2; i <= InternalChildren.Count - 1; i++) {  	tempTickPositions.Add (start_width - (i - 1) * increments);  	if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  		r = new Rect (start_width - (i - 1) * increments - rectWidth / 2' 0' rectWidth' rectHeight);  		InternalChildren [i - 1].Arrange (r);  	}  	else {  		InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: for (int i = 2; i <= InternalChildren.Count - 1; i++) {  	tempTickPositions.Add (start_width - (i - 1) * increments);  	if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  		r = new Rect (start_width - (i - 1) * increments - rectWidth / 2' 0' rectWidth' rectHeight);  		InternalChildren [i - 1].Arrange (r);  	}  	else {  		InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  	r = new Rect (start_width - (i - 1) * increments - rectWidth / 2' 0' rectWidth' rectHeight);  	InternalChildren [i - 1].Arrange (r);  }  else {  	InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: r = new Rect (start_width - (i - 1) * increments - rectWidth / 2' 0' rectWidth' rectHeight);  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if (start_height > end_height) {  	tempTickPositions.Clear ();  	Rect r = new Rect (constraint.Width - rectWidth' (start_height - rectHeight / 2)' rectWidth' rectHeight);  	InternalChildren [0].Arrange (r);  	tempTickPositions.Add (start_height);  	int count = InternalChildren.Count - 1;  	r = new Rect (constraint.Width - rectWidth' (start_height - count * increments - rectHeight / 2)' rectWidth' rectHeight);  	InternalChildren [count].Arrange (r);  	tempTickPositions.Add (start_height - count * increments);  	if (constraint.Height > 3 * rectHeight) {  		_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Height - 2 * rectHeight) / rectHeight));  		if ((InternalChildren.Count - 2) != 2.0)  			_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  		_canDisplayAllLabels = true;  		if (_skipFactor > 1) {  			_canDisplayAllLabels = false;  		}  		for (int i = 2; i <= InternalChildren.Count - 1; i++) {  			tempTickPositions.Add (start_height - (i - 1) * increments);  			if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  				r = new Rect (constraint.Width - rectWidth' (start_height - (i - 1) * increments - rectHeight / 2)' rectWidth' rectHeight);  				InternalChildren [i - 1].Arrange (r);  			}  			else {  				InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  			}  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if (start_height > end_height) {  	tempTickPositions.Clear ();  	Rect r = new Rect (constraint.Width - rectWidth' (start_height - rectHeight / 2)' rectWidth' rectHeight);  	InternalChildren [0].Arrange (r);  	tempTickPositions.Add (start_height);  	int count = InternalChildren.Count - 1;  	r = new Rect (constraint.Width - rectWidth' (start_height - count * increments - rectHeight / 2)' rectWidth' rectHeight);  	InternalChildren [count].Arrange (r);  	tempTickPositions.Add (start_height - count * increments);  	if (constraint.Height > 3 * rectHeight) {  		_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Height - 2 * rectHeight) / rectHeight));  		if ((InternalChildren.Count - 2) != 2.0)  			_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  		_canDisplayAllLabels = true;  		if (_skipFactor > 1) {  			_canDisplayAllLabels = false;  		}  		for (int i = 2; i <= InternalChildren.Count - 1; i++) {  			tempTickPositions.Add (start_height - (i - 1) * increments);  			if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  				r = new Rect (constraint.Width - rectWidth' (start_height - (i - 1) * increments - rectHeight / 2)' rectWidth' rectHeight);  				InternalChildren [i - 1].Arrange (r);  			}  			else {  				InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  			}  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if (start_height > end_height) {  	tempTickPositions.Clear ();  	Rect r = new Rect (constraint.Width - rectWidth' (start_height - rectHeight / 2)' rectWidth' rectHeight);  	InternalChildren [0].Arrange (r);  	tempTickPositions.Add (start_height);  	int count = InternalChildren.Count - 1;  	r = new Rect (constraint.Width - rectWidth' (start_height - count * increments - rectHeight / 2)' rectWidth' rectHeight);  	InternalChildren [count].Arrange (r);  	tempTickPositions.Add (start_height - count * increments);  	if (constraint.Height > 3 * rectHeight) {  		_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Height - 2 * rectHeight) / rectHeight));  		if ((InternalChildren.Count - 2) != 2.0)  			_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  		_canDisplayAllLabels = true;  		if (_skipFactor > 1) {  			_canDisplayAllLabels = false;  		}  		for (int i = 2; i <= InternalChildren.Count - 1; i++) {  			tempTickPositions.Add (start_height - (i - 1) * increments);  			if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  				r = new Rect (constraint.Width - rectWidth' (start_height - (i - 1) * increments - rectHeight / 2)' rectWidth' rectHeight);  				InternalChildren [i - 1].Arrange (r);  			}  			else {  				InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  			}  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if (start_height > end_height) {  	tempTickPositions.Clear ();  	Rect r = new Rect (constraint.Width - rectWidth' (start_height - rectHeight / 2)' rectWidth' rectHeight);  	InternalChildren [0].Arrange (r);  	tempTickPositions.Add (start_height);  	int count = InternalChildren.Count - 1;  	r = new Rect (constraint.Width - rectWidth' (start_height - count * increments - rectHeight / 2)' rectWidth' rectHeight);  	InternalChildren [count].Arrange (r);  	tempTickPositions.Add (start_height - count * increments);  	if (constraint.Height > 3 * rectHeight) {  		_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Height - 2 * rectHeight) / rectHeight));  		if ((InternalChildren.Count - 2) != 2.0)  			_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  		_canDisplayAllLabels = true;  		if (_skipFactor > 1) {  			_canDisplayAllLabels = false;  		}  		for (int i = 2; i <= InternalChildren.Count - 1; i++) {  			tempTickPositions.Add (start_height - (i - 1) * increments);  			if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  				r = new Rect (constraint.Width - rectWidth' (start_height - (i - 1) * increments - rectHeight / 2)' rectWidth' rectHeight);  				InternalChildren [i - 1].Arrange (r);  			}  			else {  				InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  			}  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if (start_height > end_height) {  	tempTickPositions.Clear ();  	Rect r = new Rect (constraint.Width - rectWidth' (start_height - rectHeight / 2)' rectWidth' rectHeight);  	InternalChildren [0].Arrange (r);  	tempTickPositions.Add (start_height);  	int count = InternalChildren.Count - 1;  	r = new Rect (constraint.Width - rectWidth' (start_height - count * increments - rectHeight / 2)' rectWidth' rectHeight);  	InternalChildren [count].Arrange (r);  	tempTickPositions.Add (start_height - count * increments);  	if (constraint.Height > 3 * rectHeight) {  		_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Height - 2 * rectHeight) / rectHeight));  		if ((InternalChildren.Count - 2) != 2.0)  			_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  		_canDisplayAllLabels = true;  		if (_skipFactor > 1) {  			_canDisplayAllLabels = false;  		}  		for (int i = 2; i <= InternalChildren.Count - 1; i++) {  			tempTickPositions.Add (start_height - (i - 1) * increments);  			if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  				r = new Rect (constraint.Width - rectWidth' (start_height - (i - 1) * increments - rectHeight / 2)' rectWidth' rectHeight);  				InternalChildren [i - 1].Arrange (r);  			}  			else {  				InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  			}  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if (start_height > end_height) {  	tempTickPositions.Clear ();  	Rect r = new Rect (constraint.Width - rectWidth' (start_height - rectHeight / 2)' rectWidth' rectHeight);  	InternalChildren [0].Arrange (r);  	tempTickPositions.Add (start_height);  	int count = InternalChildren.Count - 1;  	r = new Rect (constraint.Width - rectWidth' (start_height - count * increments - rectHeight / 2)' rectWidth' rectHeight);  	InternalChildren [count].Arrange (r);  	tempTickPositions.Add (start_height - count * increments);  	if (constraint.Height > 3 * rectHeight) {  		_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Height - 2 * rectHeight) / rectHeight));  		if ((InternalChildren.Count - 2) != 2.0)  			_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  		_canDisplayAllLabels = true;  		if (_skipFactor > 1) {  			_canDisplayAllLabels = false;  		}  		for (int i = 2; i <= InternalChildren.Count - 1; i++) {  			tempTickPositions.Add (start_height - (i - 1) * increments);  			if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  				r = new Rect (constraint.Width - rectWidth' (start_height - (i - 1) * increments - rectHeight / 2)' rectWidth' rectHeight);  				InternalChildren [i - 1].Arrange (r);  			}  			else {  				InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  			}  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if (start_height > end_height) {  	tempTickPositions.Clear ();  	Rect r = new Rect (constraint.Width - rectWidth' (start_height - rectHeight / 2)' rectWidth' rectHeight);  	InternalChildren [0].Arrange (r);  	tempTickPositions.Add (start_height);  	int count = InternalChildren.Count - 1;  	r = new Rect (constraint.Width - rectWidth' (start_height - count * increments - rectHeight / 2)' rectWidth' rectHeight);  	InternalChildren [count].Arrange (r);  	tempTickPositions.Add (start_height - count * increments);  	if (constraint.Height > 3 * rectHeight) {  		_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Height - 2 * rectHeight) / rectHeight));  		if ((InternalChildren.Count - 2) != 2.0)  			_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  		_canDisplayAllLabels = true;  		if (_skipFactor > 1) {  			_canDisplayAllLabels = false;  		}  		for (int i = 2; i <= InternalChildren.Count - 1; i++) {  			tempTickPositions.Add (start_height - (i - 1) * increments);  			if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  				r = new Rect (constraint.Width - rectWidth' (start_height - (i - 1) * increments - rectHeight / 2)' rectWidth' rectHeight);  				InternalChildren [i - 1].Arrange (r);  			}  			else {  				InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  			}  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if (start_height > end_height) {  	tempTickPositions.Clear ();  	Rect r = new Rect (constraint.Width - rectWidth' (start_height - rectHeight / 2)' rectWidth' rectHeight);  	InternalChildren [0].Arrange (r);  	tempTickPositions.Add (start_height);  	int count = InternalChildren.Count - 1;  	r = new Rect (constraint.Width - rectWidth' (start_height - count * increments - rectHeight / 2)' rectWidth' rectHeight);  	InternalChildren [count].Arrange (r);  	tempTickPositions.Add (start_height - count * increments);  	if (constraint.Height > 3 * rectHeight) {  		_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Height - 2 * rectHeight) / rectHeight));  		if ((InternalChildren.Count - 2) != 2.0)  			_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  		_canDisplayAllLabels = true;  		if (_skipFactor > 1) {  			_canDisplayAllLabels = false;  		}  		for (int i = 2; i <= InternalChildren.Count - 1; i++) {  			tempTickPositions.Add (start_height - (i - 1) * increments);  			if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  				r = new Rect (constraint.Width - rectWidth' (start_height - (i - 1) * increments - rectHeight / 2)' rectWidth' rectHeight);  				InternalChildren [i - 1].Arrange (r);  			}  			else {  				InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  			}  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if (start_height > end_height) {  	tempTickPositions.Clear ();  	Rect r = new Rect (constraint.Width - rectWidth' (start_height - rectHeight / 2)' rectWidth' rectHeight);  	InternalChildren [0].Arrange (r);  	tempTickPositions.Add (start_height);  	int count = InternalChildren.Count - 1;  	r = new Rect (constraint.Width - rectWidth' (start_height - count * increments - rectHeight / 2)' rectWidth' rectHeight);  	InternalChildren [count].Arrange (r);  	tempTickPositions.Add (start_height - count * increments);  	if (constraint.Height > 3 * rectHeight) {  		_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Height - 2 * rectHeight) / rectHeight));  		if ((InternalChildren.Count - 2) != 2.0)  			_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  		_canDisplayAllLabels = true;  		if (_skipFactor > 1) {  			_canDisplayAllLabels = false;  		}  		for (int i = 2; i <= InternalChildren.Count - 1; i++) {  			tempTickPositions.Add (start_height - (i - 1) * increments);  			if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  				r = new Rect (constraint.Width - rectWidth' (start_height - (i - 1) * increments - rectHeight / 2)' rectWidth' rectHeight);  				InternalChildren [i - 1].Arrange (r);  			}  			else {  				InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  			}  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if (start_height > end_height) {  	tempTickPositions.Clear ();  	Rect r = new Rect (constraint.Width - rectWidth' (start_height - rectHeight / 2)' rectWidth' rectHeight);  	InternalChildren [0].Arrange (r);  	tempTickPositions.Add (start_height);  	int count = InternalChildren.Count - 1;  	r = new Rect (constraint.Width - rectWidth' (start_height - count * increments - rectHeight / 2)' rectWidth' rectHeight);  	InternalChildren [count].Arrange (r);  	tempTickPositions.Add (start_height - count * increments);  	if (constraint.Height > 3 * rectHeight) {  		_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Height - 2 * rectHeight) / rectHeight));  		if ((InternalChildren.Count - 2) != 2.0)  			_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  		_canDisplayAllLabels = true;  		if (_skipFactor > 1) {  			_canDisplayAllLabels = false;  		}  		for (int i = 2; i <= InternalChildren.Count - 1; i++) {  			tempTickPositions.Add (start_height - (i - 1) * increments);  			if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  				r = new Rect (constraint.Width - rectWidth' (start_height - (i - 1) * increments - rectHeight / 2)' rectWidth' rectHeight);  				InternalChildren [i - 1].Arrange (r);  			}  			else {  				InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  			}  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if (start_height > end_height) {  	tempTickPositions.Clear ();  	Rect r = new Rect (constraint.Width - rectWidth' (start_height - rectHeight / 2)' rectWidth' rectHeight);  	InternalChildren [0].Arrange (r);  	tempTickPositions.Add (start_height);  	int count = InternalChildren.Count - 1;  	r = new Rect (constraint.Width - rectWidth' (start_height - count * increments - rectHeight / 2)' rectWidth' rectHeight);  	InternalChildren [count].Arrange (r);  	tempTickPositions.Add (start_height - count * increments);  	if (constraint.Height > 3 * rectHeight) {  		_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Height - 2 * rectHeight) / rectHeight));  		if ((InternalChildren.Count - 2) != 2.0)  			_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  		_canDisplayAllLabels = true;  		if (_skipFactor > 1) {  			_canDisplayAllLabels = false;  		}  		for (int i = 2; i <= InternalChildren.Count - 1; i++) {  			tempTickPositions.Add (start_height - (i - 1) * increments);  			if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  				r = new Rect (constraint.Width - rectWidth' (start_height - (i - 1) * increments - rectHeight / 2)' rectWidth' rectHeight);  				InternalChildren [i - 1].Arrange (r);  			}  			else {  				InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  			}  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: r = new Rect (constraint.Width - rectWidth' (start_height - count * increments - rectHeight / 2)' rectWidth' rectHeight);  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if (constraint.Height > 3 * rectHeight) {  	_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Height - 2 * rectHeight) / rectHeight));  	if ((InternalChildren.Count - 2) != 2.0)  		_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  	_canDisplayAllLabels = true;  	if (_skipFactor > 1) {  		_canDisplayAllLabels = false;  	}  	for (int i = 2; i <= InternalChildren.Count - 1; i++) {  		tempTickPositions.Add (start_height - (i - 1) * increments);  		if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  			r = new Rect (constraint.Width - rectWidth' (start_height - (i - 1) * increments - rectHeight / 2)' rectWidth' rectHeight);  			InternalChildren [i - 1].Arrange (r);  		}  		else {  			InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if (constraint.Height > 3 * rectHeight) {  	_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Height - 2 * rectHeight) / rectHeight));  	if ((InternalChildren.Count - 2) != 2.0)  		_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  	_canDisplayAllLabels = true;  	if (_skipFactor > 1) {  		_canDisplayAllLabels = false;  	}  	for (int i = 2; i <= InternalChildren.Count - 1; i++) {  		tempTickPositions.Add (start_height - (i - 1) * increments);  		if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  			r = new Rect (constraint.Width - rectWidth' (start_height - (i - 1) * increments - rectHeight / 2)' rectWidth' rectHeight);  			InternalChildren [i - 1].Arrange (r);  		}  		else {  			InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if (constraint.Height > 3 * rectHeight) {  	_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Height - 2 * rectHeight) / rectHeight));  	if ((InternalChildren.Count - 2) != 2.0)  		_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  	_canDisplayAllLabels = true;  	if (_skipFactor > 1) {  		_canDisplayAllLabels = false;  	}  	for (int i = 2; i <= InternalChildren.Count - 1; i++) {  		tempTickPositions.Add (start_height - (i - 1) * increments);  		if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  			r = new Rect (constraint.Width - rectWidth' (start_height - (i - 1) * increments - rectHeight / 2)' rectWidth' rectHeight);  			InternalChildren [i - 1].Arrange (r);  		}  		else {  			InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if (constraint.Height > 3 * rectHeight) {  	_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Height - 2 * rectHeight) / rectHeight));  	if ((InternalChildren.Count - 2) != 2.0)  		_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  	_canDisplayAllLabels = true;  	if (_skipFactor > 1) {  		_canDisplayAllLabels = false;  	}  	for (int i = 2; i <= InternalChildren.Count - 1; i++) {  		tempTickPositions.Add (start_height - (i - 1) * increments);  		if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  			r = new Rect (constraint.Width - rectWidth' (start_height - (i - 1) * increments - rectHeight / 2)' rectWidth' rectHeight);  			InternalChildren [i - 1].Arrange (r);  		}  		else {  			InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if (constraint.Height > 3 * rectHeight) {  	_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Height - 2 * rectHeight) / rectHeight));  	if ((InternalChildren.Count - 2) != 2.0)  		_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  	_canDisplayAllLabels = true;  	if (_skipFactor > 1) {  		_canDisplayAllLabels = false;  	}  	for (int i = 2; i <= InternalChildren.Count - 1; i++) {  		tempTickPositions.Add (start_height - (i - 1) * increments);  		if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  			r = new Rect (constraint.Width - rectWidth' (start_height - (i - 1) * increments - rectHeight / 2)' rectWidth' rectHeight);  			InternalChildren [i - 1].Arrange (r);  		}  		else {  			InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if (constraint.Height > 3 * rectHeight) {  	_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Height - 2 * rectHeight) / rectHeight));  	if ((InternalChildren.Count - 2) != 2.0)  		_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  	_canDisplayAllLabels = true;  	if (_skipFactor > 1) {  		_canDisplayAllLabels = false;  	}  	for (int i = 2; i <= InternalChildren.Count - 1; i++) {  		tempTickPositions.Add (start_height - (i - 1) * increments);  		if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  			r = new Rect (constraint.Width - rectWidth' (start_height - (i - 1) * increments - rectHeight / 2)' rectWidth' rectHeight);  			InternalChildren [i - 1].Arrange (r);  		}  		else {  			InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if (constraint.Height > 3 * rectHeight) {  	_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Height - 2 * rectHeight) / rectHeight));  	if ((InternalChildren.Count - 2) != 2.0)  		_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  	_canDisplayAllLabels = true;  	if (_skipFactor > 1) {  		_canDisplayAllLabels = false;  	}  	for (int i = 2; i <= InternalChildren.Count - 1; i++) {  		tempTickPositions.Add (start_height - (i - 1) * increments);  		if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  			r = new Rect (constraint.Width - rectWidth' (start_height - (i - 1) * increments - rectHeight / 2)' rectWidth' rectHeight);  			InternalChildren [i - 1].Arrange (r);  		}  		else {  			InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if (constraint.Height > 3 * rectHeight) {  	_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Height - 2 * rectHeight) / rectHeight));  	if ((InternalChildren.Count - 2) != 2.0)  		_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  	_canDisplayAllLabels = true;  	if (_skipFactor > 1) {  		_canDisplayAllLabels = false;  	}  	for (int i = 2; i <= InternalChildren.Count - 1; i++) {  		tempTickPositions.Add (start_height - (i - 1) * increments);  		if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  			r = new Rect (constraint.Width - rectWidth' (start_height - (i - 1) * increments - rectHeight / 2)' rectWidth' rectHeight);  			InternalChildren [i - 1].Arrange (r);  		}  		else {  			InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if (constraint.Height > 3 * rectHeight) {  	_skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Height - 2 * rectHeight) / rectHeight));  	if ((InternalChildren.Count - 2) != 2.0)  		_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  	_canDisplayAllLabels = true;  	if (_skipFactor > 1) {  		_canDisplayAllLabels = false;  	}  	for (int i = 2; i <= InternalChildren.Count - 1; i++) {  		tempTickPositions.Add (start_height - (i - 1) * increments);  		if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  			r = new Rect (constraint.Width - rectWidth' (start_height - (i - 1) * increments - rectHeight / 2)' rectWidth' rectHeight);  			InternalChildren [i - 1].Arrange (r);  		}  		else {  			InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: _skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Height - 2 * rectHeight) / rectHeight));  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: _skipFactor = (int)Math.Ceiling ((InternalChildren.Count - 2) / Math.Floor ((constraint.Height - 2 * rectHeight) / rectHeight));  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if ((InternalChildren.Count - 2) != 2.0)  	_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if ((InternalChildren.Count - 2) != 2.0)  	_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if ((InternalChildren.Count - 2) != 2.0)  	_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if ((InternalChildren.Count - 2) != 2.0)  	_skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: _skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: _skipFactor = Math.Min (_skipFactor' (int)Math.Ceiling ((double)(InternalChildren.Count - 2.0) / 2.0));  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: for (int i = 2; i <= InternalChildren.Count - 1; i++) {  	tempTickPositions.Add (start_height - (i - 1) * increments);  	if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  		r = new Rect (constraint.Width - rectWidth' (start_height - (i - 1) * increments - rectHeight / 2)' rectWidth' rectHeight);  		InternalChildren [i - 1].Arrange (r);  	}  	else {  		InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: for (int i = 2; i <= InternalChildren.Count - 1; i++) {  	tempTickPositions.Add (start_height - (i - 1) * increments);  	if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  		r = new Rect (constraint.Width - rectWidth' (start_height - (i - 1) * increments - rectHeight / 2)' rectWidth' rectHeight);  		InternalChildren [i - 1].Arrange (r);  	}  	else {  		InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if (_canDisplayAllLabels || (i + 1) % _skipFactor == 0) {  	r = new Rect (constraint.Width - rectWidth' (start_height - (i - 1) * increments - rectHeight / 2)' rectWidth' rectHeight);  	InternalChildren [i - 1].Arrange (r);  }  else {  	InternalChildren [i - 1].Arrange (new Rect (0' 0' 0' 0));  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: r = new Rect (constraint.Width - rectWidth' (start_height - (i - 1) * increments - rectHeight / 2)' rectWidth' rectHeight);  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,CalculateYOutputValues,The following statement contains a magic number: if (Orientation.Equals (Orientation.Vertical)) {  	start_val = constraint.Height - _largestLabelSize.Height / 2;  	lowPixel = start_val - (InternalChildren.Count - 1) * pixelIncrement;  	highPixel = start_val;  }  else {  	start_val = constraint.Width - _largestLabelSize.Width / 2;  	lowPixel = start_val - (InternalChildren.Count - 1) * pixelIncrement;  	highPixel = start_val;  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,CalculateYOutputValues,The following statement contains a magic number: if (Orientation.Equals (Orientation.Vertical)) {  	start_val = constraint.Height - _largestLabelSize.Height / 2;  	lowPixel = start_val - (InternalChildren.Count - 1) * pixelIncrement;  	highPixel = start_val;  }  else {  	start_val = constraint.Width - _largestLabelSize.Width / 2;  	lowPixel = start_val - (InternalChildren.Count - 1) * pixelIncrement;  	highPixel = start_val;  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,CalculateYOutputValues,The following statement contains a magic number: start_val = constraint.Height - _largestLabelSize.Height / 2;  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,CalculateYOutputValues,The following statement contains a magic number: start_val = constraint.Width - _largestLabelSize.Width / 2;  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,CalculateValueIncrement,The following statement contains a magic number: if (allPositiveValues && (low < (high / 2)) || (allNegativeValues && high > (low / 2))) {  	_startsAtZero = true;  	startsAtZero = true;  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,CalculateValueIncrement,The following statement contains a magic number: if (allPositiveValues && (low < (high / 2)) || (allNegativeValues && high > (low / 2))) {  	_startsAtZero = true;  	startsAtZero = true;  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,CalculateValueIncrement,The following statement contains a magic number: if (!allNegativeValues) {  	if (startsAtZero) {  		int exp = 0;  		while (true) {  			multiplier = IsWithinRange (high' exp' size);  			if (multiplier != -1) {  				break;  			}  			multiplier = IsWithinRange (high' (-1 * exp)' size);  			if (multiplier != -1) {  				exp = -1 * exp;  				break;  			}  			exp++;  		}  		increment_value = multiplier * Math.Pow (10' exp);  	}  	else {  		int exp = 0;  		while (true) {  			multiplier = IsWithinRange ((high - low)' exp' size);  			if (multiplier != -1) {  				break;  			}  			multiplier = IsWithinRange ((high - low)' (-1 * exp)' size);  			if (multiplier != -1) {  				exp = -1 * exp;  				break;  			}  			if (high == low) {  				increment_value = high;  				_valueIncrement = increment_value;  				_numReferenceLines = 1;  				break;  			}  			exp++;  		}  		if (increment_value == 0) {  			increment_value = multiplier * Math.Pow (10' exp);  		}  	}  }  else {  	if (startsAtZero) {  		int exp = 0;  		while (true) {  			multiplier = IsWithinRange (low' exp' size);  			if (multiplier != -1) {  				break;  			}  			multiplier = IsWithinRange (low' (-1 * exp)' size);  			if (multiplier != -1) {  				exp = -1 * exp;  				break;  			}  			exp++;  		}  		increment_value = multiplier * Math.Pow (10' exp);  	}  	else {  		int exp = 0;  		if (low - high == 0.0)  			increment_value = 1.0;  		else {  			while (true) {  				multiplier = IsWithinRange ((low - high)' exp' size);  				if (multiplier != -1) {  					break;  				}  				multiplier = IsWithinRange ((low - high)' (-1 * exp)' size);  				if (multiplier != -1) {  					exp = -1 * exp;  					break;  				}  				exp++;  			}  			increment_value = multiplier * Math.Pow (10' exp);  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,CalculateValueIncrement,The following statement contains a magic number: if (!allNegativeValues) {  	if (startsAtZero) {  		int exp = 0;  		while (true) {  			multiplier = IsWithinRange (high' exp' size);  			if (multiplier != -1) {  				break;  			}  			multiplier = IsWithinRange (high' (-1 * exp)' size);  			if (multiplier != -1) {  				exp = -1 * exp;  				break;  			}  			exp++;  		}  		increment_value = multiplier * Math.Pow (10' exp);  	}  	else {  		int exp = 0;  		while (true) {  			multiplier = IsWithinRange ((high - low)' exp' size);  			if (multiplier != -1) {  				break;  			}  			multiplier = IsWithinRange ((high - low)' (-1 * exp)' size);  			if (multiplier != -1) {  				exp = -1 * exp;  				break;  			}  			if (high == low) {  				increment_value = high;  				_valueIncrement = increment_value;  				_numReferenceLines = 1;  				break;  			}  			exp++;  		}  		if (increment_value == 0) {  			increment_value = multiplier * Math.Pow (10' exp);  		}  	}  }  else {  	if (startsAtZero) {  		int exp = 0;  		while (true) {  			multiplier = IsWithinRange (low' exp' size);  			if (multiplier != -1) {  				break;  			}  			multiplier = IsWithinRange (low' (-1 * exp)' size);  			if (multiplier != -1) {  				exp = -1 * exp;  				break;  			}  			exp++;  		}  		increment_value = multiplier * Math.Pow (10' exp);  	}  	else {  		int exp = 0;  		if (low - high == 0.0)  			increment_value = 1.0;  		else {  			while (true) {  				multiplier = IsWithinRange ((low - high)' exp' size);  				if (multiplier != -1) {  					break;  				}  				multiplier = IsWithinRange ((low - high)' (-1 * exp)' size);  				if (multiplier != -1) {  					exp = -1 * exp;  					break;  				}  				exp++;  			}  			increment_value = multiplier * Math.Pow (10' exp);  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,CalculateValueIncrement,The following statement contains a magic number: if (!allNegativeValues) {  	if (startsAtZero) {  		int exp = 0;  		while (true) {  			multiplier = IsWithinRange (high' exp' size);  			if (multiplier != -1) {  				break;  			}  			multiplier = IsWithinRange (high' (-1 * exp)' size);  			if (multiplier != -1) {  				exp = -1 * exp;  				break;  			}  			exp++;  		}  		increment_value = multiplier * Math.Pow (10' exp);  	}  	else {  		int exp = 0;  		while (true) {  			multiplier = IsWithinRange ((high - low)' exp' size);  			if (multiplier != -1) {  				break;  			}  			multiplier = IsWithinRange ((high - low)' (-1 * exp)' size);  			if (multiplier != -1) {  				exp = -1 * exp;  				break;  			}  			if (high == low) {  				increment_value = high;  				_valueIncrement = increment_value;  				_numReferenceLines = 1;  				break;  			}  			exp++;  		}  		if (increment_value == 0) {  			increment_value = multiplier * Math.Pow (10' exp);  		}  	}  }  else {  	if (startsAtZero) {  		int exp = 0;  		while (true) {  			multiplier = IsWithinRange (low' exp' size);  			if (multiplier != -1) {  				break;  			}  			multiplier = IsWithinRange (low' (-1 * exp)' size);  			if (multiplier != -1) {  				exp = -1 * exp;  				break;  			}  			exp++;  		}  		increment_value = multiplier * Math.Pow (10' exp);  	}  	else {  		int exp = 0;  		if (low - high == 0.0)  			increment_value = 1.0;  		else {  			while (true) {  				multiplier = IsWithinRange ((low - high)' exp' size);  				if (multiplier != -1) {  					break;  				}  				multiplier = IsWithinRange ((low - high)' (-1 * exp)' size);  				if (multiplier != -1) {  					exp = -1 * exp;  					break;  				}  				exp++;  			}  			increment_value = multiplier * Math.Pow (10' exp);  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,CalculateValueIncrement,The following statement contains a magic number: if (!allNegativeValues) {  	if (startsAtZero) {  		int exp = 0;  		while (true) {  			multiplier = IsWithinRange (high' exp' size);  			if (multiplier != -1) {  				break;  			}  			multiplier = IsWithinRange (high' (-1 * exp)' size);  			if (multiplier != -1) {  				exp = -1 * exp;  				break;  			}  			exp++;  		}  		increment_value = multiplier * Math.Pow (10' exp);  	}  	else {  		int exp = 0;  		while (true) {  			multiplier = IsWithinRange ((high - low)' exp' size);  			if (multiplier != -1) {  				break;  			}  			multiplier = IsWithinRange ((high - low)' (-1 * exp)' size);  			if (multiplier != -1) {  				exp = -1 * exp;  				break;  			}  			if (high == low) {  				increment_value = high;  				_valueIncrement = increment_value;  				_numReferenceLines = 1;  				break;  			}  			exp++;  		}  		if (increment_value == 0) {  			increment_value = multiplier * Math.Pow (10' exp);  		}  	}  }  else {  	if (startsAtZero) {  		int exp = 0;  		while (true) {  			multiplier = IsWithinRange (low' exp' size);  			if (multiplier != -1) {  				break;  			}  			multiplier = IsWithinRange (low' (-1 * exp)' size);  			if (multiplier != -1) {  				exp = -1 * exp;  				break;  			}  			exp++;  		}  		increment_value = multiplier * Math.Pow (10' exp);  	}  	else {  		int exp = 0;  		if (low - high == 0.0)  			increment_value = 1.0;  		else {  			while (true) {  				multiplier = IsWithinRange ((low - high)' exp' size);  				if (multiplier != -1) {  					break;  				}  				multiplier = IsWithinRange ((low - high)' (-1 * exp)' size);  				if (multiplier != -1) {  					exp = -1 * exp;  					break;  				}  				exp++;  			}  			increment_value = multiplier * Math.Pow (10' exp);  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,CalculateValueIncrement,The following statement contains a magic number: if (startsAtZero) {  	int exp = 0;  	while (true) {  		multiplier = IsWithinRange (high' exp' size);  		if (multiplier != -1) {  			break;  		}  		multiplier = IsWithinRange (high' (-1 * exp)' size);  		if (multiplier != -1) {  			exp = -1 * exp;  			break;  		}  		exp++;  	}  	increment_value = multiplier * Math.Pow (10' exp);  }  else {  	int exp = 0;  	while (true) {  		multiplier = IsWithinRange ((high - low)' exp' size);  		if (multiplier != -1) {  			break;  		}  		multiplier = IsWithinRange ((high - low)' (-1 * exp)' size);  		if (multiplier != -1) {  			exp = -1 * exp;  			break;  		}  		if (high == low) {  			increment_value = high;  			_valueIncrement = increment_value;  			_numReferenceLines = 1;  			break;  		}  		exp++;  	}  	if (increment_value == 0) {  		increment_value = multiplier * Math.Pow (10' exp);  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,CalculateValueIncrement,The following statement contains a magic number: if (startsAtZero) {  	int exp = 0;  	while (true) {  		multiplier = IsWithinRange (high' exp' size);  		if (multiplier != -1) {  			break;  		}  		multiplier = IsWithinRange (high' (-1 * exp)' size);  		if (multiplier != -1) {  			exp = -1 * exp;  			break;  		}  		exp++;  	}  	increment_value = multiplier * Math.Pow (10' exp);  }  else {  	int exp = 0;  	while (true) {  		multiplier = IsWithinRange ((high - low)' exp' size);  		if (multiplier != -1) {  			break;  		}  		multiplier = IsWithinRange ((high - low)' (-1 * exp)' size);  		if (multiplier != -1) {  			exp = -1 * exp;  			break;  		}  		if (high == low) {  			increment_value = high;  			_valueIncrement = increment_value;  			_numReferenceLines = 1;  			break;  		}  		exp++;  	}  	if (increment_value == 0) {  		increment_value = multiplier * Math.Pow (10' exp);  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,CalculateValueIncrement,The following statement contains a magic number: increment_value = multiplier * Math.Pow (10' exp);  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,CalculateValueIncrement,The following statement contains a magic number: if (increment_value == 0) {  	increment_value = multiplier * Math.Pow (10' exp);  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,CalculateValueIncrement,The following statement contains a magic number: increment_value = multiplier * Math.Pow (10' exp);  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,CalculateValueIncrement,The following statement contains a magic number: if (startsAtZero) {  	int exp = 0;  	while (true) {  		multiplier = IsWithinRange (low' exp' size);  		if (multiplier != -1) {  			break;  		}  		multiplier = IsWithinRange (low' (-1 * exp)' size);  		if (multiplier != -1) {  			exp = -1 * exp;  			break;  		}  		exp++;  	}  	increment_value = multiplier * Math.Pow (10' exp);  }  else {  	int exp = 0;  	if (low - high == 0.0)  		increment_value = 1.0;  	else {  		while (true) {  			multiplier = IsWithinRange ((low - high)' exp' size);  			if (multiplier != -1) {  				break;  			}  			multiplier = IsWithinRange ((low - high)' (-1 * exp)' size);  			if (multiplier != -1) {  				exp = -1 * exp;  				break;  			}  			exp++;  		}  		increment_value = multiplier * Math.Pow (10' exp);  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,CalculateValueIncrement,The following statement contains a magic number: if (startsAtZero) {  	int exp = 0;  	while (true) {  		multiplier = IsWithinRange (low' exp' size);  		if (multiplier != -1) {  			break;  		}  		multiplier = IsWithinRange (low' (-1 * exp)' size);  		if (multiplier != -1) {  			exp = -1 * exp;  			break;  		}  		exp++;  	}  	increment_value = multiplier * Math.Pow (10' exp);  }  else {  	int exp = 0;  	if (low - high == 0.0)  		increment_value = 1.0;  	else {  		while (true) {  			multiplier = IsWithinRange ((low - high)' exp' size);  			if (multiplier != -1) {  				break;  			}  			multiplier = IsWithinRange ((low - high)' (-1 * exp)' size);  			if (multiplier != -1) {  				exp = -1 * exp;  				break;  			}  			exp++;  		}  		increment_value = multiplier * Math.Pow (10' exp);  	}  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,CalculateValueIncrement,The following statement contains a magic number: increment_value = multiplier * Math.Pow (10' exp);  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,CalculateValueIncrement,The following statement contains a magic number: if (low - high == 0.0)  	increment_value = 1.0;  else {  	while (true) {  		multiplier = IsWithinRange ((low - high)' exp' size);  		if (multiplier != -1) {  			break;  		}  		multiplier = IsWithinRange ((low - high)' (-1 * exp)' size);  		if (multiplier != -1) {  			exp = -1 * exp;  			break;  		}  		exp++;  	}  	increment_value = multiplier * Math.Pow (10' exp);  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,CalculateValueIncrement,The following statement contains a magic number: increment_value = multiplier * Math.Pow (10' exp);  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,IsWithinRange,The following statement contains a magic number: highRange = (int)Math.Max (highRange' 3);  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,IsWithinRange,The following statement contains a magic number: if ((Math.Abs (numerator) / (1 * Math.Pow (10' exponent))) >= lowRange && (Math.Abs (numerator) / (1 * Math.Pow (10' exponent))) <= highRange) {  	return 1;  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,IsWithinRange,The following statement contains a magic number: if ((Math.Abs (numerator) / (1 * Math.Pow (10' exponent))) >= lowRange && (Math.Abs (numerator) / (1 * Math.Pow (10' exponent))) <= highRange) {  	return 1;  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,IsWithinRange,The following statement contains a magic number: if ((Math.Abs (numerator) / (2 * Math.Pow (10' exponent))) >= lowRange && (Math.Abs (numerator) / (2 * Math.Pow (10' exponent))) <= highRange) {  	return 2;  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,IsWithinRange,The following statement contains a magic number: if ((Math.Abs (numerator) / (2 * Math.Pow (10' exponent))) >= lowRange && (Math.Abs (numerator) / (2 * Math.Pow (10' exponent))) <= highRange) {  	return 2;  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,IsWithinRange,The following statement contains a magic number: if ((Math.Abs (numerator) / (2 * Math.Pow (10' exponent))) >= lowRange && (Math.Abs (numerator) / (2 * Math.Pow (10' exponent))) <= highRange) {  	return 2;  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,IsWithinRange,The following statement contains a magic number: if ((Math.Abs (numerator) / (2 * Math.Pow (10' exponent))) >= lowRange && (Math.Abs (numerator) / (2 * Math.Pow (10' exponent))) <= highRange) {  	return 2;  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,IsWithinRange,The following statement contains a magic number: if ((Math.Abs (numerator) / (2 * Math.Pow (10' exponent))) >= lowRange && (Math.Abs (numerator) / (2 * Math.Pow (10' exponent))) <= highRange) {  	return 2;  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,IsWithinRange,The following statement contains a magic number: return 2;  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,IsWithinRange,The following statement contains a magic number: if ((Math.Abs (numerator) / (5 * Math.Pow (10' exponent))) >= lowRange && (Math.Abs (numerator) / (5 * Math.Pow (10' exponent))) <= highRange) {  	return 5;  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,IsWithinRange,The following statement contains a magic number: if ((Math.Abs (numerator) / (5 * Math.Pow (10' exponent))) >= lowRange && (Math.Abs (numerator) / (5 * Math.Pow (10' exponent))) <= highRange) {  	return 5;  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,IsWithinRange,The following statement contains a magic number: if ((Math.Abs (numerator) / (5 * Math.Pow (10' exponent))) >= lowRange && (Math.Abs (numerator) / (5 * Math.Pow (10' exponent))) <= highRange) {  	return 5;  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,IsWithinRange,The following statement contains a magic number: if ((Math.Abs (numerator) / (5 * Math.Pow (10' exponent))) >= lowRange && (Math.Abs (numerator) / (5 * Math.Pow (10' exponent))) <= highRange) {  	return 5;  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,IsWithinRange,The following statement contains a magic number: if ((Math.Abs (numerator) / (5 * Math.Pow (10' exponent))) >= lowRange && (Math.Abs (numerator) / (5 * Math.Pow (10' exponent))) <= highRange) {  	return 5;  }  
Magic Number,StockTraderRI.ChartControls,ContinuousAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\ContinuousAxisPanel.cs,IsWithinRange,The following statement contains a magic number: return 5;  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeOverride,The following statement contains a magic number: if (InternalChildren.Count > 0) {  	if (Orientation.Equals (Orientation.Horizontal)) {  		Origin = TickMarksLength / 2;  		ArrangeHorizontalLabels (finalSize);  	}  	else {  		Origin = finalSize.Height - TickMarksLength / 2;  		ArrangeVerticalLabels (finalSize);  	}  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeOverride,The following statement contains a magic number: if (InternalChildren.Count > 0) {  	if (Orientation.Equals (Orientation.Horizontal)) {  		Origin = TickMarksLength / 2;  		ArrangeHorizontalLabels (finalSize);  	}  	else {  		Origin = finalSize.Height - TickMarksLength / 2;  		ArrangeVerticalLabels (finalSize);  	}  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeOverride,The following statement contains a magic number: if (Orientation.Equals (Orientation.Horizontal)) {  	Origin = TickMarksLength / 2;  	ArrangeHorizontalLabels (finalSize);  }  else {  	Origin = finalSize.Height - TickMarksLength / 2;  	ArrangeVerticalLabels (finalSize);  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeOverride,The following statement contains a magic number: if (Orientation.Equals (Orientation.Horizontal)) {  	Origin = TickMarksLength / 2;  	ArrangeHorizontalLabels (finalSize);  }  else {  	Origin = finalSize.Height - TickMarksLength / 2;  	ArrangeVerticalLabels (finalSize);  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeOverride,The following statement contains a magic number: Origin = TickMarksLength / 2;  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeOverride,The following statement contains a magic number: Origin = finalSize.Height - TickMarksLength / 2;  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: skipfactor = Math.Min (skipfactor' (int)Math.Ceiling ((double)InternalChildren.Count / 2.0));  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: for (int i = 0; i < InternalChildren.Count; i++) {  	if (TickPositions.Count - 1 <= i)  		TickPositions.Add (startCord + (i + 1) * sections);  	else  		TickPositions [i + 1] = startCord + (i + 1) * sections;  	if (canDisplayAllLabels) {  		Rect r = new Rect (i * sections + sections / 2 - rectWidth / 2' 0' rectWidth' InternalChildren [i].DesiredSize.Height);  		InternalChildren [i].Arrange (r);  	}  	else {  		if ((i + 1) % skipfactor == 0) {  			double x = i * sections + sections / 2 - rectWidth / 2;  			if (x < 0 || x + rectWidth > availableWidth) {  				Rect r1 = new Rect (0' 0' 0' 0);  				InternalChildren [i].Arrange (r1);  				continue;  			}  			Rect r = new Rect (i * sections + sections / 2 - rectWidth / 2' 0' rectWidth' InternalChildren [i].DesiredSize.Height);  			InternalChildren [i].Arrange (r);  		}  		else {  			Rect r = new Rect (0' 0' 0' 0);  			InternalChildren [i].Arrange (r);  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: for (int i = 0; i < InternalChildren.Count; i++) {  	if (TickPositions.Count - 1 <= i)  		TickPositions.Add (startCord + (i + 1) * sections);  	else  		TickPositions [i + 1] = startCord + (i + 1) * sections;  	if (canDisplayAllLabels) {  		Rect r = new Rect (i * sections + sections / 2 - rectWidth / 2' 0' rectWidth' InternalChildren [i].DesiredSize.Height);  		InternalChildren [i].Arrange (r);  	}  	else {  		if ((i + 1) % skipfactor == 0) {  			double x = i * sections + sections / 2 - rectWidth / 2;  			if (x < 0 || x + rectWidth > availableWidth) {  				Rect r1 = new Rect (0' 0' 0' 0);  				InternalChildren [i].Arrange (r1);  				continue;  			}  			Rect r = new Rect (i * sections + sections / 2 - rectWidth / 2' 0' rectWidth' InternalChildren [i].DesiredSize.Height);  			InternalChildren [i].Arrange (r);  		}  		else {  			Rect r = new Rect (0' 0' 0' 0);  			InternalChildren [i].Arrange (r);  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: for (int i = 0; i < InternalChildren.Count; i++) {  	if (TickPositions.Count - 1 <= i)  		TickPositions.Add (startCord + (i + 1) * sections);  	else  		TickPositions [i + 1] = startCord + (i + 1) * sections;  	if (canDisplayAllLabels) {  		Rect r = new Rect (i * sections + sections / 2 - rectWidth / 2' 0' rectWidth' InternalChildren [i].DesiredSize.Height);  		InternalChildren [i].Arrange (r);  	}  	else {  		if ((i + 1) % skipfactor == 0) {  			double x = i * sections + sections / 2 - rectWidth / 2;  			if (x < 0 || x + rectWidth > availableWidth) {  				Rect r1 = new Rect (0' 0' 0' 0);  				InternalChildren [i].Arrange (r1);  				continue;  			}  			Rect r = new Rect (i * sections + sections / 2 - rectWidth / 2' 0' rectWidth' InternalChildren [i].DesiredSize.Height);  			InternalChildren [i].Arrange (r);  		}  		else {  			Rect r = new Rect (0' 0' 0' 0);  			InternalChildren [i].Arrange (r);  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: for (int i = 0; i < InternalChildren.Count; i++) {  	if (TickPositions.Count - 1 <= i)  		TickPositions.Add (startCord + (i + 1) * sections);  	else  		TickPositions [i + 1] = startCord + (i + 1) * sections;  	if (canDisplayAllLabels) {  		Rect r = new Rect (i * sections + sections / 2 - rectWidth / 2' 0' rectWidth' InternalChildren [i].DesiredSize.Height);  		InternalChildren [i].Arrange (r);  	}  	else {  		if ((i + 1) % skipfactor == 0) {  			double x = i * sections + sections / 2 - rectWidth / 2;  			if (x < 0 || x + rectWidth > availableWidth) {  				Rect r1 = new Rect (0' 0' 0' 0);  				InternalChildren [i].Arrange (r1);  				continue;  			}  			Rect r = new Rect (i * sections + sections / 2 - rectWidth / 2' 0' rectWidth' InternalChildren [i].DesiredSize.Height);  			InternalChildren [i].Arrange (r);  		}  		else {  			Rect r = new Rect (0' 0' 0' 0);  			InternalChildren [i].Arrange (r);  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: for (int i = 0; i < InternalChildren.Count; i++) {  	if (TickPositions.Count - 1 <= i)  		TickPositions.Add (startCord + (i + 1) * sections);  	else  		TickPositions [i + 1] = startCord + (i + 1) * sections;  	if (canDisplayAllLabels) {  		Rect r = new Rect (i * sections + sections / 2 - rectWidth / 2' 0' rectWidth' InternalChildren [i].DesiredSize.Height);  		InternalChildren [i].Arrange (r);  	}  	else {  		if ((i + 1) % skipfactor == 0) {  			double x = i * sections + sections / 2 - rectWidth / 2;  			if (x < 0 || x + rectWidth > availableWidth) {  				Rect r1 = new Rect (0' 0' 0' 0);  				InternalChildren [i].Arrange (r1);  				continue;  			}  			Rect r = new Rect (i * sections + sections / 2 - rectWidth / 2' 0' rectWidth' InternalChildren [i].DesiredSize.Height);  			InternalChildren [i].Arrange (r);  		}  		else {  			Rect r = new Rect (0' 0' 0' 0);  			InternalChildren [i].Arrange (r);  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: for (int i = 0; i < InternalChildren.Count; i++) {  	if (TickPositions.Count - 1 <= i)  		TickPositions.Add (startCord + (i + 1) * sections);  	else  		TickPositions [i + 1] = startCord + (i + 1) * sections;  	if (canDisplayAllLabels) {  		Rect r = new Rect (i * sections + sections / 2 - rectWidth / 2' 0' rectWidth' InternalChildren [i].DesiredSize.Height);  		InternalChildren [i].Arrange (r);  	}  	else {  		if ((i + 1) % skipfactor == 0) {  			double x = i * sections + sections / 2 - rectWidth / 2;  			if (x < 0 || x + rectWidth > availableWidth) {  				Rect r1 = new Rect (0' 0' 0' 0);  				InternalChildren [i].Arrange (r1);  				continue;  			}  			Rect r = new Rect (i * sections + sections / 2 - rectWidth / 2' 0' rectWidth' InternalChildren [i].DesiredSize.Height);  			InternalChildren [i].Arrange (r);  		}  		else {  			Rect r = new Rect (0' 0' 0' 0);  			InternalChildren [i].Arrange (r);  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if (canDisplayAllLabels) {  	Rect r = new Rect (i * sections + sections / 2 - rectWidth / 2' 0' rectWidth' InternalChildren [i].DesiredSize.Height);  	InternalChildren [i].Arrange (r);  }  else {  	if ((i + 1) % skipfactor == 0) {  		double x = i * sections + sections / 2 - rectWidth / 2;  		if (x < 0 || x + rectWidth > availableWidth) {  			Rect r1 = new Rect (0' 0' 0' 0);  			InternalChildren [i].Arrange (r1);  			continue;  		}  		Rect r = new Rect (i * sections + sections / 2 - rectWidth / 2' 0' rectWidth' InternalChildren [i].DesiredSize.Height);  		InternalChildren [i].Arrange (r);  	}  	else {  		Rect r = new Rect (0' 0' 0' 0);  		InternalChildren [i].Arrange (r);  	}  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if (canDisplayAllLabels) {  	Rect r = new Rect (i * sections + sections / 2 - rectWidth / 2' 0' rectWidth' InternalChildren [i].DesiredSize.Height);  	InternalChildren [i].Arrange (r);  }  else {  	if ((i + 1) % skipfactor == 0) {  		double x = i * sections + sections / 2 - rectWidth / 2;  		if (x < 0 || x + rectWidth > availableWidth) {  			Rect r1 = new Rect (0' 0' 0' 0);  			InternalChildren [i].Arrange (r1);  			continue;  		}  		Rect r = new Rect (i * sections + sections / 2 - rectWidth / 2' 0' rectWidth' InternalChildren [i].DesiredSize.Height);  		InternalChildren [i].Arrange (r);  	}  	else {  		Rect r = new Rect (0' 0' 0' 0);  		InternalChildren [i].Arrange (r);  	}  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if (canDisplayAllLabels) {  	Rect r = new Rect (i * sections + sections / 2 - rectWidth / 2' 0' rectWidth' InternalChildren [i].DesiredSize.Height);  	InternalChildren [i].Arrange (r);  }  else {  	if ((i + 1) % skipfactor == 0) {  		double x = i * sections + sections / 2 - rectWidth / 2;  		if (x < 0 || x + rectWidth > availableWidth) {  			Rect r1 = new Rect (0' 0' 0' 0);  			InternalChildren [i].Arrange (r1);  			continue;  		}  		Rect r = new Rect (i * sections + sections / 2 - rectWidth / 2' 0' rectWidth' InternalChildren [i].DesiredSize.Height);  		InternalChildren [i].Arrange (r);  	}  	else {  		Rect r = new Rect (0' 0' 0' 0);  		InternalChildren [i].Arrange (r);  	}  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if (canDisplayAllLabels) {  	Rect r = new Rect (i * sections + sections / 2 - rectWidth / 2' 0' rectWidth' InternalChildren [i].DesiredSize.Height);  	InternalChildren [i].Arrange (r);  }  else {  	if ((i + 1) % skipfactor == 0) {  		double x = i * sections + sections / 2 - rectWidth / 2;  		if (x < 0 || x + rectWidth > availableWidth) {  			Rect r1 = new Rect (0' 0' 0' 0);  			InternalChildren [i].Arrange (r1);  			continue;  		}  		Rect r = new Rect (i * sections + sections / 2 - rectWidth / 2' 0' rectWidth' InternalChildren [i].DesiredSize.Height);  		InternalChildren [i].Arrange (r);  	}  	else {  		Rect r = new Rect (0' 0' 0' 0);  		InternalChildren [i].Arrange (r);  	}  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if (canDisplayAllLabels) {  	Rect r = new Rect (i * sections + sections / 2 - rectWidth / 2' 0' rectWidth' InternalChildren [i].DesiredSize.Height);  	InternalChildren [i].Arrange (r);  }  else {  	if ((i + 1) % skipfactor == 0) {  		double x = i * sections + sections / 2 - rectWidth / 2;  		if (x < 0 || x + rectWidth > availableWidth) {  			Rect r1 = new Rect (0' 0' 0' 0);  			InternalChildren [i].Arrange (r1);  			continue;  		}  		Rect r = new Rect (i * sections + sections / 2 - rectWidth / 2' 0' rectWidth' InternalChildren [i].DesiredSize.Height);  		InternalChildren [i].Arrange (r);  	}  	else {  		Rect r = new Rect (0' 0' 0' 0);  		InternalChildren [i].Arrange (r);  	}  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if (canDisplayAllLabels) {  	Rect r = new Rect (i * sections + sections / 2 - rectWidth / 2' 0' rectWidth' InternalChildren [i].DesiredSize.Height);  	InternalChildren [i].Arrange (r);  }  else {  	if ((i + 1) % skipfactor == 0) {  		double x = i * sections + sections / 2 - rectWidth / 2;  		if (x < 0 || x + rectWidth > availableWidth) {  			Rect r1 = new Rect (0' 0' 0' 0);  			InternalChildren [i].Arrange (r1);  			continue;  		}  		Rect r = new Rect (i * sections + sections / 2 - rectWidth / 2' 0' rectWidth' InternalChildren [i].DesiredSize.Height);  		InternalChildren [i].Arrange (r);  	}  	else {  		Rect r = new Rect (0' 0' 0' 0);  		InternalChildren [i].Arrange (r);  	}  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if ((i + 1) % skipfactor == 0) {  	double x = i * sections + sections / 2 - rectWidth / 2;  	if (x < 0 || x + rectWidth > availableWidth) {  		Rect r1 = new Rect (0' 0' 0' 0);  		InternalChildren [i].Arrange (r1);  		continue;  	}  	Rect r = new Rect (i * sections + sections / 2 - rectWidth / 2' 0' rectWidth' InternalChildren [i].DesiredSize.Height);  	InternalChildren [i].Arrange (r);  }  else {  	Rect r = new Rect (0' 0' 0' 0);  	InternalChildren [i].Arrange (r);  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if ((i + 1) % skipfactor == 0) {  	double x = i * sections + sections / 2 - rectWidth / 2;  	if (x < 0 || x + rectWidth > availableWidth) {  		Rect r1 = new Rect (0' 0' 0' 0);  		InternalChildren [i].Arrange (r1);  		continue;  	}  	Rect r = new Rect (i * sections + sections / 2 - rectWidth / 2' 0' rectWidth' InternalChildren [i].DesiredSize.Height);  	InternalChildren [i].Arrange (r);  }  else {  	Rect r = new Rect (0' 0' 0' 0);  	InternalChildren [i].Arrange (r);  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if ((i + 1) % skipfactor == 0) {  	double x = i * sections + sections / 2 - rectWidth / 2;  	if (x < 0 || x + rectWidth > availableWidth) {  		Rect r1 = new Rect (0' 0' 0' 0);  		InternalChildren [i].Arrange (r1);  		continue;  	}  	Rect r = new Rect (i * sections + sections / 2 - rectWidth / 2' 0' rectWidth' InternalChildren [i].DesiredSize.Height);  	InternalChildren [i].Arrange (r);  }  else {  	Rect r = new Rect (0' 0' 0' 0);  	InternalChildren [i].Arrange (r);  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeHorizontalLabels,The following statement contains a magic number: if ((i + 1) % skipfactor == 0) {  	double x = i * sections + sections / 2 - rectWidth / 2;  	if (x < 0 || x + rectWidth > availableWidth) {  		Rect r1 = new Rect (0' 0' 0' 0);  		InternalChildren [i].Arrange (r1);  		continue;  	}  	Rect r = new Rect (i * sections + sections / 2 - rectWidth / 2' 0' rectWidth' InternalChildren [i].DesiredSize.Height);  	InternalChildren [i].Arrange (r);  }  else {  	Rect r = new Rect (0' 0' 0' 0);  	InternalChildren [i].Arrange (r);  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: skipfactor = Math.Min (skipfactor' (int)Math.Ceiling ((double)InternalChildren.Count / 2.0));  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: for (int i = 0; i < InternalChildren.Count; i++) {  	if (TickPositions.Count <= i)  		TickPositions.Add (i * sections);  	else  		TickPositions [i] = i * sections;  	if (canDisplayAllLabels) {  		Rect r = new Rect (0' i * sections + sections / 2 - rectHeight / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height);  		InternalChildren [i].Arrange (r);  	}  	else {  		if ((i + 1) % skipfactor == 0) {  			double x = i * sections + sections / 2 - rectHeight / 2;  			if (x < 0 || x + rectHeight > availableHeight) {  				Rect r1 = new Rect (0' 0' 0' 0);  				InternalChildren [i].Arrange (r1);  				continue;  			}  			Rect r = new Rect (0' i * sections + sections / 2 - rectHeight / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height);  			InternalChildren [i].Arrange (r);  		}  		else {  			Rect r = new Rect (0' 0' 0' 0);  			InternalChildren [i].Arrange (r);  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: for (int i = 0; i < InternalChildren.Count; i++) {  	if (TickPositions.Count <= i)  		TickPositions.Add (i * sections);  	else  		TickPositions [i] = i * sections;  	if (canDisplayAllLabels) {  		Rect r = new Rect (0' i * sections + sections / 2 - rectHeight / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height);  		InternalChildren [i].Arrange (r);  	}  	else {  		if ((i + 1) % skipfactor == 0) {  			double x = i * sections + sections / 2 - rectHeight / 2;  			if (x < 0 || x + rectHeight > availableHeight) {  				Rect r1 = new Rect (0' 0' 0' 0);  				InternalChildren [i].Arrange (r1);  				continue;  			}  			Rect r = new Rect (0' i * sections + sections / 2 - rectHeight / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height);  			InternalChildren [i].Arrange (r);  		}  		else {  			Rect r = new Rect (0' 0' 0' 0);  			InternalChildren [i].Arrange (r);  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: for (int i = 0; i < InternalChildren.Count; i++) {  	if (TickPositions.Count <= i)  		TickPositions.Add (i * sections);  	else  		TickPositions [i] = i * sections;  	if (canDisplayAllLabels) {  		Rect r = new Rect (0' i * sections + sections / 2 - rectHeight / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height);  		InternalChildren [i].Arrange (r);  	}  	else {  		if ((i + 1) % skipfactor == 0) {  			double x = i * sections + sections / 2 - rectHeight / 2;  			if (x < 0 || x + rectHeight > availableHeight) {  				Rect r1 = new Rect (0' 0' 0' 0);  				InternalChildren [i].Arrange (r1);  				continue;  			}  			Rect r = new Rect (0' i * sections + sections / 2 - rectHeight / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height);  			InternalChildren [i].Arrange (r);  		}  		else {  			Rect r = new Rect (0' 0' 0' 0);  			InternalChildren [i].Arrange (r);  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: for (int i = 0; i < InternalChildren.Count; i++) {  	if (TickPositions.Count <= i)  		TickPositions.Add (i * sections);  	else  		TickPositions [i] = i * sections;  	if (canDisplayAllLabels) {  		Rect r = new Rect (0' i * sections + sections / 2 - rectHeight / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height);  		InternalChildren [i].Arrange (r);  	}  	else {  		if ((i + 1) % skipfactor == 0) {  			double x = i * sections + sections / 2 - rectHeight / 2;  			if (x < 0 || x + rectHeight > availableHeight) {  				Rect r1 = new Rect (0' 0' 0' 0);  				InternalChildren [i].Arrange (r1);  				continue;  			}  			Rect r = new Rect (0' i * sections + sections / 2 - rectHeight / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height);  			InternalChildren [i].Arrange (r);  		}  		else {  			Rect r = new Rect (0' 0' 0' 0);  			InternalChildren [i].Arrange (r);  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: for (int i = 0; i < InternalChildren.Count; i++) {  	if (TickPositions.Count <= i)  		TickPositions.Add (i * sections);  	else  		TickPositions [i] = i * sections;  	if (canDisplayAllLabels) {  		Rect r = new Rect (0' i * sections + sections / 2 - rectHeight / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height);  		InternalChildren [i].Arrange (r);  	}  	else {  		if ((i + 1) % skipfactor == 0) {  			double x = i * sections + sections / 2 - rectHeight / 2;  			if (x < 0 || x + rectHeight > availableHeight) {  				Rect r1 = new Rect (0' 0' 0' 0);  				InternalChildren [i].Arrange (r1);  				continue;  			}  			Rect r = new Rect (0' i * sections + sections / 2 - rectHeight / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height);  			InternalChildren [i].Arrange (r);  		}  		else {  			Rect r = new Rect (0' 0' 0' 0);  			InternalChildren [i].Arrange (r);  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: for (int i = 0; i < InternalChildren.Count; i++) {  	if (TickPositions.Count <= i)  		TickPositions.Add (i * sections);  	else  		TickPositions [i] = i * sections;  	if (canDisplayAllLabels) {  		Rect r = new Rect (0' i * sections + sections / 2 - rectHeight / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height);  		InternalChildren [i].Arrange (r);  	}  	else {  		if ((i + 1) % skipfactor == 0) {  			double x = i * sections + sections / 2 - rectHeight / 2;  			if (x < 0 || x + rectHeight > availableHeight) {  				Rect r1 = new Rect (0' 0' 0' 0);  				InternalChildren [i].Arrange (r1);  				continue;  			}  			Rect r = new Rect (0' i * sections + sections / 2 - rectHeight / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height);  			InternalChildren [i].Arrange (r);  		}  		else {  			Rect r = new Rect (0' 0' 0' 0);  			InternalChildren [i].Arrange (r);  		}  	}  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if (canDisplayAllLabels) {  	Rect r = new Rect (0' i * sections + sections / 2 - rectHeight / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height);  	InternalChildren [i].Arrange (r);  }  else {  	if ((i + 1) % skipfactor == 0) {  		double x = i * sections + sections / 2 - rectHeight / 2;  		if (x < 0 || x + rectHeight > availableHeight) {  			Rect r1 = new Rect (0' 0' 0' 0);  			InternalChildren [i].Arrange (r1);  			continue;  		}  		Rect r = new Rect (0' i * sections + sections / 2 - rectHeight / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height);  		InternalChildren [i].Arrange (r);  	}  	else {  		Rect r = new Rect (0' 0' 0' 0);  		InternalChildren [i].Arrange (r);  	}  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if (canDisplayAllLabels) {  	Rect r = new Rect (0' i * sections + sections / 2 - rectHeight / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height);  	InternalChildren [i].Arrange (r);  }  else {  	if ((i + 1) % skipfactor == 0) {  		double x = i * sections + sections / 2 - rectHeight / 2;  		if (x < 0 || x + rectHeight > availableHeight) {  			Rect r1 = new Rect (0' 0' 0' 0);  			InternalChildren [i].Arrange (r1);  			continue;  		}  		Rect r = new Rect (0' i * sections + sections / 2 - rectHeight / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height);  		InternalChildren [i].Arrange (r);  	}  	else {  		Rect r = new Rect (0' 0' 0' 0);  		InternalChildren [i].Arrange (r);  	}  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if (canDisplayAllLabels) {  	Rect r = new Rect (0' i * sections + sections / 2 - rectHeight / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height);  	InternalChildren [i].Arrange (r);  }  else {  	if ((i + 1) % skipfactor == 0) {  		double x = i * sections + sections / 2 - rectHeight / 2;  		if (x < 0 || x + rectHeight > availableHeight) {  			Rect r1 = new Rect (0' 0' 0' 0);  			InternalChildren [i].Arrange (r1);  			continue;  		}  		Rect r = new Rect (0' i * sections + sections / 2 - rectHeight / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height);  		InternalChildren [i].Arrange (r);  	}  	else {  		Rect r = new Rect (0' 0' 0' 0);  		InternalChildren [i].Arrange (r);  	}  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if (canDisplayAllLabels) {  	Rect r = new Rect (0' i * sections + sections / 2 - rectHeight / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height);  	InternalChildren [i].Arrange (r);  }  else {  	if ((i + 1) % skipfactor == 0) {  		double x = i * sections + sections / 2 - rectHeight / 2;  		if (x < 0 || x + rectHeight > availableHeight) {  			Rect r1 = new Rect (0' 0' 0' 0);  			InternalChildren [i].Arrange (r1);  			continue;  		}  		Rect r = new Rect (0' i * sections + sections / 2 - rectHeight / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height);  		InternalChildren [i].Arrange (r);  	}  	else {  		Rect r = new Rect (0' 0' 0' 0);  		InternalChildren [i].Arrange (r);  	}  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if (canDisplayAllLabels) {  	Rect r = new Rect (0' i * sections + sections / 2 - rectHeight / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height);  	InternalChildren [i].Arrange (r);  }  else {  	if ((i + 1) % skipfactor == 0) {  		double x = i * sections + sections / 2 - rectHeight / 2;  		if (x < 0 || x + rectHeight > availableHeight) {  			Rect r1 = new Rect (0' 0' 0' 0);  			InternalChildren [i].Arrange (r1);  			continue;  		}  		Rect r = new Rect (0' i * sections + sections / 2 - rectHeight / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height);  		InternalChildren [i].Arrange (r);  	}  	else {  		Rect r = new Rect (0' 0' 0' 0);  		InternalChildren [i].Arrange (r);  	}  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if (canDisplayAllLabels) {  	Rect r = new Rect (0' i * sections + sections / 2 - rectHeight / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height);  	InternalChildren [i].Arrange (r);  }  else {  	if ((i + 1) % skipfactor == 0) {  		double x = i * sections + sections / 2 - rectHeight / 2;  		if (x < 0 || x + rectHeight > availableHeight) {  			Rect r1 = new Rect (0' 0' 0' 0);  			InternalChildren [i].Arrange (r1);  			continue;  		}  		Rect r = new Rect (0' i * sections + sections / 2 - rectHeight / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height);  		InternalChildren [i].Arrange (r);  	}  	else {  		Rect r = new Rect (0' 0' 0' 0);  		InternalChildren [i].Arrange (r);  	}  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if ((i + 1) % skipfactor == 0) {  	double x = i * sections + sections / 2 - rectHeight / 2;  	if (x < 0 || x + rectHeight > availableHeight) {  		Rect r1 = new Rect (0' 0' 0' 0);  		InternalChildren [i].Arrange (r1);  		continue;  	}  	Rect r = new Rect (0' i * sections + sections / 2 - rectHeight / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height);  	InternalChildren [i].Arrange (r);  }  else {  	Rect r = new Rect (0' 0' 0' 0);  	InternalChildren [i].Arrange (r);  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if ((i + 1) % skipfactor == 0) {  	double x = i * sections + sections / 2 - rectHeight / 2;  	if (x < 0 || x + rectHeight > availableHeight) {  		Rect r1 = new Rect (0' 0' 0' 0);  		InternalChildren [i].Arrange (r1);  		continue;  	}  	Rect r = new Rect (0' i * sections + sections / 2 - rectHeight / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height);  	InternalChildren [i].Arrange (r);  }  else {  	Rect r = new Rect (0' 0' 0' 0);  	InternalChildren [i].Arrange (r);  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if ((i + 1) % skipfactor == 0) {  	double x = i * sections + sections / 2 - rectHeight / 2;  	if (x < 0 || x + rectHeight > availableHeight) {  		Rect r1 = new Rect (0' 0' 0' 0);  		InternalChildren [i].Arrange (r1);  		continue;  	}  	Rect r = new Rect (0' i * sections + sections / 2 - rectHeight / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height);  	InternalChildren [i].Arrange (r);  }  else {  	Rect r = new Rect (0' 0' 0' 0);  	InternalChildren [i].Arrange (r);  }  
Magic Number,StockTraderRI.ChartControls,DiscreteAxisPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\DiscreteAxisPanel.cs,ArrangeVerticalLabels,The following statement contains a magic number: if ((i + 1) % skipfactor == 0) {  	double x = i * sections + sections / 2 - rectHeight / 2;  	if (x < 0 || x + rectHeight > availableHeight) {  		Rect r1 = new Rect (0' 0' 0' 0);  		InternalChildren [i].Arrange (r1);  		continue;  	}  	Rect r = new Rect (0' i * sections + sections / 2 - rectHeight / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height);  	InternalChildren [i].Arrange (r);  }  else {  	Rect r = new Rect (0' 0' 0' 0);  	InternalChildren [i].Arrange (r);  }  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,ComputeIntersectionPoint,The following statement contains a magic number: if (toV != null) {  	//transforming the argument vertex's center to the coordinate space of this vertex  	Panel panel = (Panel)VisualTreeHelper.GetParent (thisV);  	Transform transformToPanel = (Transform)toV.TransformToAncestor (panel);  	Transform transformToFromV = (Transform)panel.TransformToDescendant (thisV);  	Point transformedToVCenter = new Point (toV.RenderSize.Width / 2' toV.RenderSize.Height / 2);  	if (transformToPanel != null)  		transformedToVCenter = transformToPanel.Transform (transformedToVCenter);  	if (transformToFromV != null)  		transformedToVCenter = transformToFromV.Transform (transformedToVCenter);  	Point thisCenter = new Point (thisV.RenderSize.Width / 2' thisV.RenderSize.Height / 2);  	Vector centerVector = thisCenter - transformedToVCenter;  	//getting intersection point in the coordinate space of this vertex  	Point p1 = FindOppositePoint (fromGeometryFlat' transformedToVCenter' centerVector' null);  	//transforming back to the panel coordinate space  	if (transformToFromV != null)  		p1 = transformToFromV.Inverse.Transform (p1);  	return p1;  }  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,ComputeIntersectionPoint,The following statement contains a magic number: if (toV != null) {  	//transforming the argument vertex's center to the coordinate space of this vertex  	Panel panel = (Panel)VisualTreeHelper.GetParent (thisV);  	Transform transformToPanel = (Transform)toV.TransformToAncestor (panel);  	Transform transformToFromV = (Transform)panel.TransformToDescendant (thisV);  	Point transformedToVCenter = new Point (toV.RenderSize.Width / 2' toV.RenderSize.Height / 2);  	if (transformToPanel != null)  		transformedToVCenter = transformToPanel.Transform (transformedToVCenter);  	if (transformToFromV != null)  		transformedToVCenter = transformToFromV.Transform (transformedToVCenter);  	Point thisCenter = new Point (thisV.RenderSize.Width / 2' thisV.RenderSize.Height / 2);  	Vector centerVector = thisCenter - transformedToVCenter;  	//getting intersection point in the coordinate space of this vertex  	Point p1 = FindOppositePoint (fromGeometryFlat' transformedToVCenter' centerVector' null);  	//transforming back to the panel coordinate space  	if (transformToFromV != null)  		p1 = transformToFromV.Inverse.Transform (p1);  	return p1;  }  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,ComputeIntersectionPoint,The following statement contains a magic number: if (toV != null) {  	//transforming the argument vertex's center to the coordinate space of this vertex  	Panel panel = (Panel)VisualTreeHelper.GetParent (thisV);  	Transform transformToPanel = (Transform)toV.TransformToAncestor (panel);  	Transform transformToFromV = (Transform)panel.TransformToDescendant (thisV);  	Point transformedToVCenter = new Point (toV.RenderSize.Width / 2' toV.RenderSize.Height / 2);  	if (transformToPanel != null)  		transformedToVCenter = transformToPanel.Transform (transformedToVCenter);  	if (transformToFromV != null)  		transformedToVCenter = transformToFromV.Transform (transformedToVCenter);  	Point thisCenter = new Point (thisV.RenderSize.Width / 2' thisV.RenderSize.Height / 2);  	Vector centerVector = thisCenter - transformedToVCenter;  	//getting intersection point in the coordinate space of this vertex  	Point p1 = FindOppositePoint (fromGeometryFlat' transformedToVCenter' centerVector' null);  	//transforming back to the panel coordinate space  	if (transformToFromV != null)  		p1 = transformToFromV.Inverse.Transform (p1);  	return p1;  }  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,ComputeIntersectionPoint,The following statement contains a magic number: if (toV != null) {  	//transforming the argument vertex's center to the coordinate space of this vertex  	Panel panel = (Panel)VisualTreeHelper.GetParent (thisV);  	Transform transformToPanel = (Transform)toV.TransformToAncestor (panel);  	Transform transformToFromV = (Transform)panel.TransformToDescendant (thisV);  	Point transformedToVCenter = new Point (toV.RenderSize.Width / 2' toV.RenderSize.Height / 2);  	if (transformToPanel != null)  		transformedToVCenter = transformToPanel.Transform (transformedToVCenter);  	if (transformToFromV != null)  		transformedToVCenter = transformToFromV.Transform (transformedToVCenter);  	Point thisCenter = new Point (thisV.RenderSize.Width / 2' thisV.RenderSize.Height / 2);  	Vector centerVector = thisCenter - transformedToVCenter;  	//getting intersection point in the coordinate space of this vertex  	Point p1 = FindOppositePoint (fromGeometryFlat' transformedToVCenter' centerVector' null);  	//transforming back to the panel coordinate space  	if (transformToFromV != null)  		p1 = transformToFromV.Inverse.Transform (p1);  	return p1;  }  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,ComputeIntersectionPoint,The following statement contains a magic number: return new Point (thisV.RenderSize.Width / 2' thisV.RenderSize.Height / 2);  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,ComputeIntersectionPoint,The following statement contains a magic number: return new Point (thisV.RenderSize.Width / 2' thisV.RenderSize.Height / 2);  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,CheckLineSegmentForIntersection,The following statement contains a magic number: if (p1.Y > p2.Y) {  	bound1 = p2.Y - 0.1;  	bound2 = p1.Y + 0.1;  }  else {  	bound1 = p1.Y - 0.1;  	bound2 = p2.Y + 0.1;  }  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,CheckLineSegmentForIntersection,The following statement contains a magic number: if (p1.Y > p2.Y) {  	bound1 = p2.Y - 0.1;  	bound2 = p1.Y + 0.1;  }  else {  	bound1 = p1.Y - 0.1;  	bound2 = p2.Y + 0.1;  }  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,CheckLineSegmentForIntersection,The following statement contains a magic number: if (p1.Y > p2.Y) {  	bound1 = p2.Y - 0.1;  	bound2 = p1.Y + 0.1;  }  else {  	bound1 = p1.Y - 0.1;  	bound2 = p2.Y + 0.1;  }  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,CheckLineSegmentForIntersection,The following statement contains a magic number: if (p1.Y > p2.Y) {  	bound1 = p2.Y - 0.1;  	bound2 = p1.Y + 0.1;  }  else {  	bound1 = p1.Y - 0.1;  	bound2 = p2.Y + 0.1;  }  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,CheckLineSegmentForIntersection,The following statement contains a magic number: bound1 = p2.Y - 0.1;  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,CheckLineSegmentForIntersection,The following statement contains a magic number: bound2 = p1.Y + 0.1;  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,CheckLineSegmentForIntersection,The following statement contains a magic number: bound1 = p1.Y - 0.1;  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,CheckLineSegmentForIntersection,The following statement contains a magic number: bound2 = p2.Y + 0.1;  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,CatmullRom,The following statement contains a magic number: if (input == null || input.GetLength (0) < 3) {  	throw new InvalidOperationException ();  }  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,CatmullRom,The following statement contains a magic number: for (int i = 0; i < input.GetLength (0) - 2; i++) {  	Point p1 = input [i];  	Point p2 = input [i + 1];  	Point p3 = input [i + 2];  	Vector v1 = p2 - p3;  	Vector v2 = p1 - p3;  	double theta = Math.Abs (Vector.AngleBetween (v1' v2));  	double h = v1.Length * Math.Sin (theta * Math.PI / 180.0);  	double deltai = Math.Sqrt (Math.Pow (v1.Length' 2) - h * h);  	Vector v3 = p2 - p1;  	double deltai_1 = Math.Sqrt (Math.Pow (v3.Length' 2) - h * h);  	Point b3i_1 = p2 - (deltai_1 / (3 * (deltai + deltai_1))) * (p3 - p1);  	Point b3i_2 = p2 + (deltai / (3 * (deltai + deltai_1))) * (p3 - p1);  	ans [2 + 3 * i] = b3i_1;  	ans [2 + 3 * i + 1] = input [i + 1];  	ans [2 + 3 * i + 2] = b3i_2;  }  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,CatmullRom,The following statement contains a magic number: for (int i = 0; i < input.GetLength (0) - 2; i++) {  	Point p1 = input [i];  	Point p2 = input [i + 1];  	Point p3 = input [i + 2];  	Vector v1 = p2 - p3;  	Vector v2 = p1 - p3;  	double theta = Math.Abs (Vector.AngleBetween (v1' v2));  	double h = v1.Length * Math.Sin (theta * Math.PI / 180.0);  	double deltai = Math.Sqrt (Math.Pow (v1.Length' 2) - h * h);  	Vector v3 = p2 - p1;  	double deltai_1 = Math.Sqrt (Math.Pow (v3.Length' 2) - h * h);  	Point b3i_1 = p2 - (deltai_1 / (3 * (deltai + deltai_1))) * (p3 - p1);  	Point b3i_2 = p2 + (deltai / (3 * (deltai + deltai_1))) * (p3 - p1);  	ans [2 + 3 * i] = b3i_1;  	ans [2 + 3 * i + 1] = input [i + 1];  	ans [2 + 3 * i + 2] = b3i_2;  }  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,CatmullRom,The following statement contains a magic number: for (int i = 0; i < input.GetLength (0) - 2; i++) {  	Point p1 = input [i];  	Point p2 = input [i + 1];  	Point p3 = input [i + 2];  	Vector v1 = p2 - p3;  	Vector v2 = p1 - p3;  	double theta = Math.Abs (Vector.AngleBetween (v1' v2));  	double h = v1.Length * Math.Sin (theta * Math.PI / 180.0);  	double deltai = Math.Sqrt (Math.Pow (v1.Length' 2) - h * h);  	Vector v3 = p2 - p1;  	double deltai_1 = Math.Sqrt (Math.Pow (v3.Length' 2) - h * h);  	Point b3i_1 = p2 - (deltai_1 / (3 * (deltai + deltai_1))) * (p3 - p1);  	Point b3i_2 = p2 + (deltai / (3 * (deltai + deltai_1))) * (p3 - p1);  	ans [2 + 3 * i] = b3i_1;  	ans [2 + 3 * i + 1] = input [i + 1];  	ans [2 + 3 * i + 2] = b3i_2;  }  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,CatmullRom,The following statement contains a magic number: for (int i = 0; i < input.GetLength (0) - 2; i++) {  	Point p1 = input [i];  	Point p2 = input [i + 1];  	Point p3 = input [i + 2];  	Vector v1 = p2 - p3;  	Vector v2 = p1 - p3;  	double theta = Math.Abs (Vector.AngleBetween (v1' v2));  	double h = v1.Length * Math.Sin (theta * Math.PI / 180.0);  	double deltai = Math.Sqrt (Math.Pow (v1.Length' 2) - h * h);  	Vector v3 = p2 - p1;  	double deltai_1 = Math.Sqrt (Math.Pow (v3.Length' 2) - h * h);  	Point b3i_1 = p2 - (deltai_1 / (3 * (deltai + deltai_1))) * (p3 - p1);  	Point b3i_2 = p2 + (deltai / (3 * (deltai + deltai_1))) * (p3 - p1);  	ans [2 + 3 * i] = b3i_1;  	ans [2 + 3 * i + 1] = input [i + 1];  	ans [2 + 3 * i + 2] = b3i_2;  }  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,CatmullRom,The following statement contains a magic number: for (int i = 0; i < input.GetLength (0) - 2; i++) {  	Point p1 = input [i];  	Point p2 = input [i + 1];  	Point p3 = input [i + 2];  	Vector v1 = p2 - p3;  	Vector v2 = p1 - p3;  	double theta = Math.Abs (Vector.AngleBetween (v1' v2));  	double h = v1.Length * Math.Sin (theta * Math.PI / 180.0);  	double deltai = Math.Sqrt (Math.Pow (v1.Length' 2) - h * h);  	Vector v3 = p2 - p1;  	double deltai_1 = Math.Sqrt (Math.Pow (v3.Length' 2) - h * h);  	Point b3i_1 = p2 - (deltai_1 / (3 * (deltai + deltai_1))) * (p3 - p1);  	Point b3i_2 = p2 + (deltai / (3 * (deltai + deltai_1))) * (p3 - p1);  	ans [2 + 3 * i] = b3i_1;  	ans [2 + 3 * i + 1] = input [i + 1];  	ans [2 + 3 * i + 2] = b3i_2;  }  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,CatmullRom,The following statement contains a magic number: for (int i = 0; i < input.GetLength (0) - 2; i++) {  	Point p1 = input [i];  	Point p2 = input [i + 1];  	Point p3 = input [i + 2];  	Vector v1 = p2 - p3;  	Vector v2 = p1 - p3;  	double theta = Math.Abs (Vector.AngleBetween (v1' v2));  	double h = v1.Length * Math.Sin (theta * Math.PI / 180.0);  	double deltai = Math.Sqrt (Math.Pow (v1.Length' 2) - h * h);  	Vector v3 = p2 - p1;  	double deltai_1 = Math.Sqrt (Math.Pow (v3.Length' 2) - h * h);  	Point b3i_1 = p2 - (deltai_1 / (3 * (deltai + deltai_1))) * (p3 - p1);  	Point b3i_2 = p2 + (deltai / (3 * (deltai + deltai_1))) * (p3 - p1);  	ans [2 + 3 * i] = b3i_1;  	ans [2 + 3 * i + 1] = input [i + 1];  	ans [2 + 3 * i + 2] = b3i_2;  }  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,CatmullRom,The following statement contains a magic number: for (int i = 0; i < input.GetLength (0) - 2; i++) {  	Point p1 = input [i];  	Point p2 = input [i + 1];  	Point p3 = input [i + 2];  	Vector v1 = p2 - p3;  	Vector v2 = p1 - p3;  	double theta = Math.Abs (Vector.AngleBetween (v1' v2));  	double h = v1.Length * Math.Sin (theta * Math.PI / 180.0);  	double deltai = Math.Sqrt (Math.Pow (v1.Length' 2) - h * h);  	Vector v3 = p2 - p1;  	double deltai_1 = Math.Sqrt (Math.Pow (v3.Length' 2) - h * h);  	Point b3i_1 = p2 - (deltai_1 / (3 * (deltai + deltai_1))) * (p3 - p1);  	Point b3i_2 = p2 + (deltai / (3 * (deltai + deltai_1))) * (p3 - p1);  	ans [2 + 3 * i] = b3i_1;  	ans [2 + 3 * i + 1] = input [i + 1];  	ans [2 + 3 * i + 2] = b3i_2;  }  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,CatmullRom,The following statement contains a magic number: for (int i = 0; i < input.GetLength (0) - 2; i++) {  	Point p1 = input [i];  	Point p2 = input [i + 1];  	Point p3 = input [i + 2];  	Vector v1 = p2 - p3;  	Vector v2 = p1 - p3;  	double theta = Math.Abs (Vector.AngleBetween (v1' v2));  	double h = v1.Length * Math.Sin (theta * Math.PI / 180.0);  	double deltai = Math.Sqrt (Math.Pow (v1.Length' 2) - h * h);  	Vector v3 = p2 - p1;  	double deltai_1 = Math.Sqrt (Math.Pow (v3.Length' 2) - h * h);  	Point b3i_1 = p2 - (deltai_1 / (3 * (deltai + deltai_1))) * (p3 - p1);  	Point b3i_2 = p2 + (deltai / (3 * (deltai + deltai_1))) * (p3 - p1);  	ans [2 + 3 * i] = b3i_1;  	ans [2 + 3 * i + 1] = input [i + 1];  	ans [2 + 3 * i + 2] = b3i_2;  }  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,CatmullRom,The following statement contains a magic number: for (int i = 0; i < input.GetLength (0) - 2; i++) {  	Point p1 = input [i];  	Point p2 = input [i + 1];  	Point p3 = input [i + 2];  	Vector v1 = p2 - p3;  	Vector v2 = p1 - p3;  	double theta = Math.Abs (Vector.AngleBetween (v1' v2));  	double h = v1.Length * Math.Sin (theta * Math.PI / 180.0);  	double deltai = Math.Sqrt (Math.Pow (v1.Length' 2) - h * h);  	Vector v3 = p2 - p1;  	double deltai_1 = Math.Sqrt (Math.Pow (v3.Length' 2) - h * h);  	Point b3i_1 = p2 - (deltai_1 / (3 * (deltai + deltai_1))) * (p3 - p1);  	Point b3i_2 = p2 + (deltai / (3 * (deltai + deltai_1))) * (p3 - p1);  	ans [2 + 3 * i] = b3i_1;  	ans [2 + 3 * i + 1] = input [i + 1];  	ans [2 + 3 * i + 2] = b3i_2;  }  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,CatmullRom,The following statement contains a magic number: for (int i = 0; i < input.GetLength (0) - 2; i++) {  	Point p1 = input [i];  	Point p2 = input [i + 1];  	Point p3 = input [i + 2];  	Vector v1 = p2 - p3;  	Vector v2 = p1 - p3;  	double theta = Math.Abs (Vector.AngleBetween (v1' v2));  	double h = v1.Length * Math.Sin (theta * Math.PI / 180.0);  	double deltai = Math.Sqrt (Math.Pow (v1.Length' 2) - h * h);  	Vector v3 = p2 - p1;  	double deltai_1 = Math.Sqrt (Math.Pow (v3.Length' 2) - h * h);  	Point b3i_1 = p2 - (deltai_1 / (3 * (deltai + deltai_1))) * (p3 - p1);  	Point b3i_2 = p2 + (deltai / (3 * (deltai + deltai_1))) * (p3 - p1);  	ans [2 + 3 * i] = b3i_1;  	ans [2 + 3 * i + 1] = input [i + 1];  	ans [2 + 3 * i + 2] = b3i_2;  }  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,CatmullRom,The following statement contains a magic number: for (int i = 0; i < input.GetLength (0) - 2; i++) {  	Point p1 = input [i];  	Point p2 = input [i + 1];  	Point p3 = input [i + 2];  	Vector v1 = p2 - p3;  	Vector v2 = p1 - p3;  	double theta = Math.Abs (Vector.AngleBetween (v1' v2));  	double h = v1.Length * Math.Sin (theta * Math.PI / 180.0);  	double deltai = Math.Sqrt (Math.Pow (v1.Length' 2) - h * h);  	Vector v3 = p2 - p1;  	double deltai_1 = Math.Sqrt (Math.Pow (v3.Length' 2) - h * h);  	Point b3i_1 = p2 - (deltai_1 / (3 * (deltai + deltai_1))) * (p3 - p1);  	Point b3i_2 = p2 + (deltai / (3 * (deltai + deltai_1))) * (p3 - p1);  	ans [2 + 3 * i] = b3i_1;  	ans [2 + 3 * i + 1] = input [i + 1];  	ans [2 + 3 * i + 2] = b3i_2;  }  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,CatmullRom,The following statement contains a magic number: for (int i = 0; i < input.GetLength (0) - 2; i++) {  	Point p1 = input [i];  	Point p2 = input [i + 1];  	Point p3 = input [i + 2];  	Vector v1 = p2 - p3;  	Vector v2 = p1 - p3;  	double theta = Math.Abs (Vector.AngleBetween (v1' v2));  	double h = v1.Length * Math.Sin (theta * Math.PI / 180.0);  	double deltai = Math.Sqrt (Math.Pow (v1.Length' 2) - h * h);  	Vector v3 = p2 - p1;  	double deltai_1 = Math.Sqrt (Math.Pow (v3.Length' 2) - h * h);  	Point b3i_1 = p2 - (deltai_1 / (3 * (deltai + deltai_1))) * (p3 - p1);  	Point b3i_2 = p2 + (deltai / (3 * (deltai + deltai_1))) * (p3 - p1);  	ans [2 + 3 * i] = b3i_1;  	ans [2 + 3 * i + 1] = input [i + 1];  	ans [2 + 3 * i + 2] = b3i_2;  }  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,CatmullRom,The following statement contains a magic number: for (int i = 0; i < input.GetLength (0) - 2; i++) {  	Point p1 = input [i];  	Point p2 = input [i + 1];  	Point p3 = input [i + 2];  	Vector v1 = p2 - p3;  	Vector v2 = p1 - p3;  	double theta = Math.Abs (Vector.AngleBetween (v1' v2));  	double h = v1.Length * Math.Sin (theta * Math.PI / 180.0);  	double deltai = Math.Sqrt (Math.Pow (v1.Length' 2) - h * h);  	Vector v3 = p2 - p1;  	double deltai_1 = Math.Sqrt (Math.Pow (v3.Length' 2) - h * h);  	Point b3i_1 = p2 - (deltai_1 / (3 * (deltai + deltai_1))) * (p3 - p1);  	Point b3i_2 = p2 + (deltai / (3 * (deltai + deltai_1))) * (p3 - p1);  	ans [2 + 3 * i] = b3i_1;  	ans [2 + 3 * i + 1] = input [i + 1];  	ans [2 + 3 * i + 2] = b3i_2;  }  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,CatmullRom,The following statement contains a magic number: for (int i = 0; i < input.GetLength (0) - 2; i++) {  	Point p1 = input [i];  	Point p2 = input [i + 1];  	Point p3 = input [i + 2];  	Vector v1 = p2 - p3;  	Vector v2 = p1 - p3;  	double theta = Math.Abs (Vector.AngleBetween (v1' v2));  	double h = v1.Length * Math.Sin (theta * Math.PI / 180.0);  	double deltai = Math.Sqrt (Math.Pow (v1.Length' 2) - h * h);  	Vector v3 = p2 - p1;  	double deltai_1 = Math.Sqrt (Math.Pow (v3.Length' 2) - h * h);  	Point b3i_1 = p2 - (deltai_1 / (3 * (deltai + deltai_1))) * (p3 - p1);  	Point b3i_2 = p2 + (deltai / (3 * (deltai + deltai_1))) * (p3 - p1);  	ans [2 + 3 * i] = b3i_1;  	ans [2 + 3 * i + 1] = input [i + 1];  	ans [2 + 3 * i + 2] = b3i_2;  }  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,CatmullRom,The following statement contains a magic number: ans [2 + 3 * i] = b3i_1;  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,CatmullRom,The following statement contains a magic number: ans [2 + 3 * i] = b3i_1;  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,CatmullRom,The following statement contains a magic number: ans [2 + 3 * i + 1] = input [i + 1];  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,CatmullRom,The following statement contains a magic number: ans [2 + 3 * i + 1] = input [i + 1];  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,CatmullRom,The following statement contains a magic number: ans [2 + 3 * i + 2] = b3i_2;  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,CatmullRom,The following statement contains a magic number: ans [2 + 3 * i + 2] = b3i_2;  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,CatmullRom,The following statement contains a magic number: ans [2 + 3 * i + 2] = b3i_2;  
Magic Number,StockTraderRI.ChartControls,GeometryOperation,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\GeometryOperation.cs,CatmullRom,The following statement contains a magic number: ans [ans.GetLength (0) - 2] = input [inputLength - 1];  
Magic Number,StockTraderRI.ChartControls,LineChartPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\LineChartPanel.cs,ArrangeOverride,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	double x = (i + 1 >= XValues.Count) ? XValues [i] : XValues [i] + XValues [i + 1];  	Point position = new Point (x / 2' YValues [i]);  	_childrenPositions.Add (position);  	Rect r = new Rect (position.X - InternalChildren [i].DesiredSize.Width / 2' position.Y - InternalChildren [i].DesiredSize.Height / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height);  	InternalChildren [i].Arrange (r);  }  
Magic Number,StockTraderRI.ChartControls,LineChartPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\LineChartPanel.cs,ArrangeOverride,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	double x = (i + 1 >= XValues.Count) ? XValues [i] : XValues [i] + XValues [i + 1];  	Point position = new Point (x / 2' YValues [i]);  	_childrenPositions.Add (position);  	Rect r = new Rect (position.X - InternalChildren [i].DesiredSize.Width / 2' position.Y - InternalChildren [i].DesiredSize.Height / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height);  	InternalChildren [i].Arrange (r);  }  
Magic Number,StockTraderRI.ChartControls,LineChartPanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\LineChartPanel.cs,ArrangeOverride,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	double x = (i + 1 >= XValues.Count) ? XValues [i] : XValues [i] + XValues [i + 1];  	Point position = new Point (x / 2' YValues [i]);  	_childrenPositions.Add (position);  	Rect r = new Rect (position.X - InternalChildren [i].DesiredSize.Width / 2' position.Y - InternalChildren [i].DesiredSize.Height / 2' InternalChildren [i].DesiredSize.Width' InternalChildren [i].DesiredSize.Height);  	InternalChildren [i].Arrange (r);  }  
Magic Number,StockTraderRI.ChartControls,PiePanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: if (GetValues (this) != null) {  	double total = 0.0;  	for (int i = 0; i < InternalChildren.Count; i++) {  		total += (double)(GetValues (this) [i]);  	}  	double offsetAngle = 0.0;  	double radius = finalSize.Width < finalSize.Height ? finalSize.Width / 2 : finalSize.Height / 2;  	//radius -= 2;  	Point beginFigure = new Point (finalSize.Width / 2' finalSize.Height / 2);  	Point lineToBeforeTransform = new Point (beginFigure.X + radius' beginFigure.Y);  	for (int i = 0; i < InternalChildren.Count; i++) {  		ContentControl container = InternalChildren [i] as ContentControl;  		double wedgeAngle = (double)(GetValues (this) [i]) * 360 / total;  		RotateTransform rt = new RotateTransform (offsetAngle' beginFigure.X' beginFigure.Y);  		container.SetValue (PiePanel.BeginFigurePointProperty' beginFigure);  		container.SetValue (PiePanel.LineToPointProperty' rt.Transform (lineToBeforeTransform));  		container.SetValue (PiePanel.WedgeAngleProperty' wedgeAngle);  		offsetAngle += wedgeAngle;  		Rect r = new Rect (finalSize);  		container.Arrange (r);  	}  }  
Magic Number,StockTraderRI.ChartControls,PiePanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: if (GetValues (this) != null) {  	double total = 0.0;  	for (int i = 0; i < InternalChildren.Count; i++) {  		total += (double)(GetValues (this) [i]);  	}  	double offsetAngle = 0.0;  	double radius = finalSize.Width < finalSize.Height ? finalSize.Width / 2 : finalSize.Height / 2;  	//radius -= 2;  	Point beginFigure = new Point (finalSize.Width / 2' finalSize.Height / 2);  	Point lineToBeforeTransform = new Point (beginFigure.X + radius' beginFigure.Y);  	for (int i = 0; i < InternalChildren.Count; i++) {  		ContentControl container = InternalChildren [i] as ContentControl;  		double wedgeAngle = (double)(GetValues (this) [i]) * 360 / total;  		RotateTransform rt = new RotateTransform (offsetAngle' beginFigure.X' beginFigure.Y);  		container.SetValue (PiePanel.BeginFigurePointProperty' beginFigure);  		container.SetValue (PiePanel.LineToPointProperty' rt.Transform (lineToBeforeTransform));  		container.SetValue (PiePanel.WedgeAngleProperty' wedgeAngle);  		offsetAngle += wedgeAngle;  		Rect r = new Rect (finalSize);  		container.Arrange (r);  	}  }  
Magic Number,StockTraderRI.ChartControls,PiePanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: if (GetValues (this) != null) {  	double total = 0.0;  	for (int i = 0; i < InternalChildren.Count; i++) {  		total += (double)(GetValues (this) [i]);  	}  	double offsetAngle = 0.0;  	double radius = finalSize.Width < finalSize.Height ? finalSize.Width / 2 : finalSize.Height / 2;  	//radius -= 2;  	Point beginFigure = new Point (finalSize.Width / 2' finalSize.Height / 2);  	Point lineToBeforeTransform = new Point (beginFigure.X + radius' beginFigure.Y);  	for (int i = 0; i < InternalChildren.Count; i++) {  		ContentControl container = InternalChildren [i] as ContentControl;  		double wedgeAngle = (double)(GetValues (this) [i]) * 360 / total;  		RotateTransform rt = new RotateTransform (offsetAngle' beginFigure.X' beginFigure.Y);  		container.SetValue (PiePanel.BeginFigurePointProperty' beginFigure);  		container.SetValue (PiePanel.LineToPointProperty' rt.Transform (lineToBeforeTransform));  		container.SetValue (PiePanel.WedgeAngleProperty' wedgeAngle);  		offsetAngle += wedgeAngle;  		Rect r = new Rect (finalSize);  		container.Arrange (r);  	}  }  
Magic Number,StockTraderRI.ChartControls,PiePanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: if (GetValues (this) != null) {  	double total = 0.0;  	for (int i = 0; i < InternalChildren.Count; i++) {  		total += (double)(GetValues (this) [i]);  	}  	double offsetAngle = 0.0;  	double radius = finalSize.Width < finalSize.Height ? finalSize.Width / 2 : finalSize.Height / 2;  	//radius -= 2;  	Point beginFigure = new Point (finalSize.Width / 2' finalSize.Height / 2);  	Point lineToBeforeTransform = new Point (beginFigure.X + radius' beginFigure.Y);  	for (int i = 0; i < InternalChildren.Count; i++) {  		ContentControl container = InternalChildren [i] as ContentControl;  		double wedgeAngle = (double)(GetValues (this) [i]) * 360 / total;  		RotateTransform rt = new RotateTransform (offsetAngle' beginFigure.X' beginFigure.Y);  		container.SetValue (PiePanel.BeginFigurePointProperty' beginFigure);  		container.SetValue (PiePanel.LineToPointProperty' rt.Transform (lineToBeforeTransform));  		container.SetValue (PiePanel.WedgeAngleProperty' wedgeAngle);  		offsetAngle += wedgeAngle;  		Rect r = new Rect (finalSize);  		container.Arrange (r);  	}  }  
Magic Number,StockTraderRI.ChartControls,PiePanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: if (GetValues (this) != null) {  	double total = 0.0;  	for (int i = 0; i < InternalChildren.Count; i++) {  		total += (double)(GetValues (this) [i]);  	}  	double offsetAngle = 0.0;  	double radius = finalSize.Width < finalSize.Height ? finalSize.Width / 2 : finalSize.Height / 2;  	//radius -= 2;  	Point beginFigure = new Point (finalSize.Width / 2' finalSize.Height / 2);  	Point lineToBeforeTransform = new Point (beginFigure.X + radius' beginFigure.Y);  	for (int i = 0; i < InternalChildren.Count; i++) {  		ContentControl container = InternalChildren [i] as ContentControl;  		double wedgeAngle = (double)(GetValues (this) [i]) * 360 / total;  		RotateTransform rt = new RotateTransform (offsetAngle' beginFigure.X' beginFigure.Y);  		container.SetValue (PiePanel.BeginFigurePointProperty' beginFigure);  		container.SetValue (PiePanel.LineToPointProperty' rt.Transform (lineToBeforeTransform));  		container.SetValue (PiePanel.WedgeAngleProperty' wedgeAngle);  		offsetAngle += wedgeAngle;  		Rect r = new Rect (finalSize);  		container.Arrange (r);  	}  }  
Magic Number,StockTraderRI.ChartControls,PiePanel,C:\repos\modiCAS_prism\StockTrader RI\ChartControls\PiePanel.cs,ArrangeOverride,The following statement contains a magic number: for (int i = 0; i < InternalChildren.Count; i++) {  	ContentControl container = InternalChildren [i] as ContentControl;  	double wedgeAngle = (double)(GetValues (this) [i]) * 360 / total;  	RotateTransform rt = new RotateTransform (offsetAngle' beginFigure.X' beginFigure.Y);  	container.SetValue (PiePanel.BeginFigurePointProperty' beginFigure);  	container.SetValue (PiePanel.LineToPointProperty' rt.Transform (lineToBeforeTransform));  	container.SetValue (PiePanel.WedgeAngleProperty' wedgeAngle);  	offsetAngle += wedgeAngle;  	Rect r = new Rect (finalSize);  	container.Arrange (r);  }  
