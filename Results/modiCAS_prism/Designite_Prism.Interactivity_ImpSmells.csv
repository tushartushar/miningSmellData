Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Microsoft.Practices.Prism.Interactivity,PopupWindowAction,C:\repos\modiCAS_prism\PrismLibrary\Desktop\Prism.Interactivity\PopupWindowAction.cs,Invoke,The method has 5 parameters.
Magic Number,Microsoft.Practices.Prism.Interactivity,PopupWindowAction,C:\repos\modiCAS_prism\PrismLibrary\Desktop\Prism.Interactivity\PopupWindowAction.cs,Invoke,The following statement contains a magic number: if (this.CenterOverAssociatedObject && this.AssociatedObject != null) {  	// If we should center the popup over the parent window we subscribe to the SizeChanged event  	// so we can change its position after the dimensions are set.  	SizeChangedEventHandler sizeHandler = null;  	sizeHandler = (o' e) =>  {  		wrapperWindow.SizeChanged -= sizeHandler;  		FrameworkElement view = this.AssociatedObject;  		Point position = view.PointToScreen (new Point (0' 0));  		wrapperWindow.Top = position.Y + ((view.ActualHeight - wrapperWindow.ActualHeight) / 2);  		wrapperWindow.Left = position.X + ((view.ActualWidth - wrapperWindow.ActualWidth) / 2);  	};  	wrapperWindow.SizeChanged += sizeHandler;  }  
Magic Number,Microsoft.Practices.Prism.Interactivity,PopupWindowAction,C:\repos\modiCAS_prism\PrismLibrary\Desktop\Prism.Interactivity\PopupWindowAction.cs,Invoke,The following statement contains a magic number: if (this.CenterOverAssociatedObject && this.AssociatedObject != null) {  	// If we should center the popup over the parent window we subscribe to the SizeChanged event  	// so we can change its position after the dimensions are set.  	SizeChangedEventHandler sizeHandler = null;  	sizeHandler = (o' e) =>  {  		wrapperWindow.SizeChanged -= sizeHandler;  		FrameworkElement view = this.AssociatedObject;  		Point position = view.PointToScreen (new Point (0' 0));  		wrapperWindow.Top = position.Y + ((view.ActualHeight - wrapperWindow.ActualHeight) / 2);  		wrapperWindow.Left = position.X + ((view.ActualWidth - wrapperWindow.ActualWidth) / 2);  	};  	wrapperWindow.SizeChanged += sizeHandler;  }  
Magic Number,Microsoft.Practices.Prism.Interactivity,PopupWindowAction,C:\repos\modiCAS_prism\PrismLibrary\Desktop\Prism.Interactivity\PopupWindowAction.cs,Invoke,The following statement contains a magic number: sizeHandler = (o' e) =>  {  	wrapperWindow.SizeChanged -= sizeHandler;  	FrameworkElement view = this.AssociatedObject;  	Point position = view.PointToScreen (new Point (0' 0));  	wrapperWindow.Top = position.Y + ((view.ActualHeight - wrapperWindow.ActualHeight) / 2);  	wrapperWindow.Left = position.X + ((view.ActualWidth - wrapperWindow.ActualWidth) / 2);  };  
Magic Number,Microsoft.Practices.Prism.Interactivity,PopupWindowAction,C:\repos\modiCAS_prism\PrismLibrary\Desktop\Prism.Interactivity\PopupWindowAction.cs,Invoke,The following statement contains a magic number: sizeHandler = (o' e) =>  {  	wrapperWindow.SizeChanged -= sizeHandler;  	FrameworkElement view = this.AssociatedObject;  	Point position = view.PointToScreen (new Point (0' 0));  	wrapperWindow.Top = position.Y + ((view.ActualHeight - wrapperWindow.ActualHeight) / 2);  	wrapperWindow.Left = position.X + ((view.ActualWidth - wrapperWindow.ActualWidth) / 2);  };  
Magic Number,Microsoft.Practices.Prism.Interactivity,PopupWindowAction,C:\repos\modiCAS_prism\PrismLibrary\Desktop\Prism.Interactivity\PopupWindowAction.cs,Invoke,The following statement contains a magic number: wrapperWindow.Top = position.Y + ((view.ActualHeight - wrapperWindow.ActualHeight) / 2);  
Magic Number,Microsoft.Practices.Prism.Interactivity,PopupWindowAction,C:\repos\modiCAS_prism\PrismLibrary\Desktop\Prism.Interactivity\PopupWindowAction.cs,Invoke,The following statement contains a magic number: wrapperWindow.Left = position.X + ((view.ActualWidth - wrapperWindow.ActualWidth) / 2);  
