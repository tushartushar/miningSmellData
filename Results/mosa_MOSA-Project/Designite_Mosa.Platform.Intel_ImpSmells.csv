Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Mosa.Platform.Intel.Stages,SimpleDeadCodeRemovalStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Platform.Intel\Stages\SimpleDeadCodeRemovalStage.cs,Run,Cyclomatic complexity of the method is 11
Complex Method,Mosa.Platform.Intel.Stages,SimpleDeadCodeRemovalStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Platform.Intel\Stages\SimpleDeadCodeRemovalStage.cs,Move,Cyclomatic complexity of the method is 9
Long Identifier,Mosa.Platform.Intel.CompilerStages,MultibootV1Stage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Platform.Intel\CompilerStages\MultibootV1Stage.cs,,The length of the parameter HEADER_MB_FLAG_MODULES_PAGE_ALIGNED is 35.
Long Identifier,Mosa.Platform.Intel.CompilerStages,MultibootV1Stage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Platform.Intel\CompilerStages\MultibootV1Stage.cs,,The length of the parameter HEADER_MB_FLAG_MEMORY_INFO_REQUIRED is 35.
Long Identifier,Mosa.Platform.Intel.CompilerStages,MultibootV1Stage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Platform.Intel\CompilerStages\MultibootV1Stage.cs,,The length of the parameter HEADER_MB_FLAG_VIDEO_MODES_REQUIRED is 35.
Complex Conditional,Mosa.Platform.Intel.Stages,SimpleDeadCodeRemovalStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Platform.Intel\Stages\SimpleDeadCodeRemovalStage.cs,Run,The conditional expression  "node.Instruction.IsIOOperation  							|| node.Instruction.IsMemoryRead  							|| node.Instruction.IsMemoryWrite  							|| node.Instruction.HasUnspecifiedSideEffect"  is complex.
Complex Conditional,Mosa.Platform.Intel.Stages,SimpleDeadCodeRemovalStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Platform.Intel\Stages\SimpleDeadCodeRemovalStage.cs,Run,The conditional expression  "instruction.IsCarryFlagModified  							|| instruction.IsOverflowFlagModified  							|| instruction.IsZeroFlagModified  							|| instruction.IsSignFlagModified  							|| instruction.IsParityFlagModified"  is complex.
Magic Number,Mosa.Platform.Intel,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Platform.Intel\OpcodeEncoder.cs,GetByte,The following statement contains a magic number: int shift = 56 - (8 * index);
Magic Number,Mosa.Platform.Intel,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Platform.Intel\OpcodeEncoder.cs,GetByte,The following statement contains a magic number: int shift = 56 - (8 * index);
Magic Number,Mosa.Platform.Intel,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Platform.Intel\OpcodeEncoder.cs,GetByte,The following statement contains a magic number: index < 8
Magic Number,Mosa.Platform.Intel,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Platform.Intel\OpcodeEncoder.cs,WriteTo,The following statement contains a magic number: Debug.Assert(Size % 8 == 0);
Magic Number,Mosa.Platform.Intel,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Platform.Intel\OpcodeEncoder.cs,WriteTo,The following statement contains a magic number: i < Size / 8
Magic Number,Mosa.Platform.Intel,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Platform.Intel\OpcodeEncoder.cs,SetBit,The following statement contains a magic number: offset = 63 - offset;
Magic Number,Mosa.Platform.Intel,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Platform.Intel\OpcodeEncoder.cs,SetBit,The following statement contains a magic number: offset < 64
Magic Number,Mosa.Platform.Intel,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Platform.Intel\OpcodeEncoder.cs,AppendNibble,The following statement contains a magic number: AppendBit((value >> 3) & 0x1);
Magic Number,Mosa.Platform.Intel,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Platform.Intel\OpcodeEncoder.cs,AppendNibble,The following statement contains a magic number: AppendBit((value >> 2) & 0x1);
Magic Number,Mosa.Platform.Intel,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Platform.Intel\OpcodeEncoder.cs,Append3Bits,The following statement contains a magic number: AppendBit((value >> 2) & 0x1);
Magic Number,Mosa.Platform.Intel,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Platform.Intel\OpcodeEncoder.cs,AppendByte,The following statement contains a magic number: return AppendBits(value' 8);
Magic Number,Mosa.Platform.Intel,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Platform.Intel\OpcodeEncoder.cs,Append8Bits,The following statement contains a magic number: return AppendBits(value' 8);
Magic Number,Mosa.Platform.Intel,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Platform.Intel\OpcodeEncoder.cs,Append16Bits,The following statement contains a magic number: return AppendBits(value' 16);
Magic Number,Mosa.Platform.Intel,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Platform.Intel\OpcodeEncoder.cs,Append32Bits,The following statement contains a magic number: return AppendBits(value' 32);
Magic Number,Mosa.Platform.Intel,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Platform.Intel\OpcodeEncoder.cs,AppendIntegerValue,The following statement contains a magic number: AppendByteValue((byte)((value >> 8) & 0xFF));
Magic Number,Mosa.Platform.Intel,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Platform.Intel\OpcodeEncoder.cs,AppendIntegerValue,The following statement contains a magic number: AppendByteValue((byte)((value >> 16) & 0xFF));
Magic Number,Mosa.Platform.Intel,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Platform.Intel\OpcodeEncoder.cs,AppendIntegerValue,The following statement contains a magic number: AppendByteValue((byte)((value >> 24) & 0xFF));
Magic Number,Mosa.Platform.Intel,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Platform.Intel\OpcodeEncoder.cs,AppendShortValue,The following statement contains a magic number: AppendByteValue((byte)((value >> 8) & 0xFF));
Magic Number,Mosa.Platform.Intel,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Platform.Intel\OpcodeEncoder.cs,GetPosition,The following statement contains a magic number: position = (Size / 8);
Magic Number,Mosa.Platform.Intel,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Platform.Intel\OpcodeEncoder.cs,AppendSIB,The following statement contains a magic number: Debug.Assert(scale == 1 || scale == 2 || scale == 4 || scale == 8);
Magic Number,Mosa.Platform.Intel,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Platform.Intel\OpcodeEncoder.cs,AppendSIB,The following statement contains a magic number: Debug.Assert(scale == 1 || scale == 2 || scale == 4 || scale == 8);
Magic Number,Mosa.Platform.Intel,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Platform.Intel\OpcodeEncoder.cs,AppendSIB,The following statement contains a magic number: Debug.Assert(scale == 1 || scale == 2 || scale == 4 || scale == 8);
Magic Number,Mosa.Platform.Intel,OpcodeEncoder,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Platform.Intel\OpcodeEncoder.cs,AppendSIB,The following statement contains a magic number: AppendBits(svalue' 2);
Magic Number,Mosa.Platform.Intel.Stages,BuildStackStage,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Platform.Intel\Stages\BuildStackStage.cs,Run,The following statement contains a magic number: Debug.Assert((MethodCompiler.StackSize % 4) == 0' "Stack size of interrupt can't be divided by 4!!");
