Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Mosa.Utility.UnitTests,Discovery,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Discovery.cs,GetParameters,Cyclomatic complexity of the method is 24
Complex Method,Mosa.Utility.UnitTests,UnitTestEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestEngine.cs,ProcessQueue,Cyclomatic complexity of the method is 9
Complex Method,Mosa.Utility.UnitTests,UnitTestEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestEngine.cs,CheckEngine,Cyclomatic complexity of the method is 9
Complex Method,Mosa.Utility.UnitTests,UnitTestSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestSystem.cs,GetReturnResultType,Cyclomatic complexity of the method is 14
Complex Method,Mosa.Utility.UnitTests,UnitTestSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestSystem.cs,AddParameters,Cyclomatic complexity of the method is 14
Complex Method,Mosa.Utility.UnitTests,UnitTestSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestSystem.cs,GetResult,Cyclomatic complexity of the method is 16
Long Parameter List,Mosa.Utility.UnitTests,Linker,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Linker.cs,FindMosaMethod,The method has 5 parameters. Parameters: typeSystem' ns' type' method' parameters
Long Statement,Mosa.Utility.UnitTests,UnitTestEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestEngine.cs,MessageCallBack,The length of the statement  "					Console.WriteLine("Unit Tests - Count: " + CompletedUnitTestCount.ToString() + " Elapsed: " + ((int)StopWatch.Elapsed.TotalSeconds).ToString() + " (" + (CompletedUnitTestCount / StopWatch.Elapsed.TotalSeconds).ToString("F2") + " per second)"); " is 243.
Complex Conditional,Mosa.Utility.UnitTests,UnitTestEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestEngine.cs,ProcessQueue,The conditional expression  "(SendOneCount < 0 && sendFlag && Pending.Count < MaxSentQueue && Queue.Count > 0)  							|| (SendOneCount >= 0 && Queue.Count > 0 && Pending.Count == 0)"  is complex.
Empty Catch Block,Mosa.Utility.UnitTests,UnitTestEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestEngine.cs,ConnectToDebugEngine,The method has an empty catch block.
Magic Number,Mosa.Utility.UnitTests,Discovery,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Discovery.cs,GetParam,The following statement contains a magic number: switch (index)  			{  				case 1: return unitTest.Param1 ?? unitTest.ParamSeries1;  				case 2: return unitTest.Param2 ?? unitTest.ParamSeries2;  				case 3: return unitTest.Param3 ?? unitTest.ParamSeries3;  				case 4: return unitTest.Param4 ?? unitTest.ParamSeries4;  				case 5: return unitTest.Param5 ?? unitTest.ParamSeries5;  			}
Magic Number,Mosa.Utility.UnitTests,Discovery,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Discovery.cs,GetParam,The following statement contains a magic number: switch (index)  			{  				case 1: return unitTest.Param1 ?? unitTest.ParamSeries1;  				case 2: return unitTest.Param2 ?? unitTest.ParamSeries2;  				case 3: return unitTest.Param3 ?? unitTest.ParamSeries3;  				case 4: return unitTest.Param4 ?? unitTest.ParamSeries4;  				case 5: return unitTest.Param5 ?? unitTest.ParamSeries5;  			}
Magic Number,Mosa.Utility.UnitTests,Discovery,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Discovery.cs,GetParam,The following statement contains a magic number: switch (index)  			{  				case 1: return unitTest.Param1 ?? unitTest.ParamSeries1;  				case 2: return unitTest.Param2 ?? unitTest.ParamSeries2;  				case 3: return unitTest.Param3 ?? unitTest.ParamSeries3;  				case 4: return unitTest.Param4 ?? unitTest.ParamSeries4;  				case 5: return unitTest.Param5 ?? unitTest.ParamSeries5;  			}
Magic Number,Mosa.Utility.UnitTests,Discovery,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Discovery.cs,GetParam,The following statement contains a magic number: switch (index)  			{  				case 1: return unitTest.Param1 ?? unitTest.ParamSeries1;  				case 2: return unitTest.Param2 ?? unitTest.ParamSeries2;  				case 3: return unitTest.Param3 ?? unitTest.ParamSeries3;  				case 4: return unitTest.Param4 ?? unitTest.ParamSeries4;  				case 5: return unitTest.Param5 ?? unitTest.ParamSeries5;  			}
Magic Number,Mosa.Utility.UnitTests,UnitTestEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestEngine.cs,UnitTestEngine,The following statement contains a magic number: LauncherOptions = new LauncherOptions()  			{  				EnableSSA = true'  				EnableBasicOptimizations = true'  				EnableSparseConditionalConstantPropagation = true'  				EnableInlineMethods = true'  				EnableLongExpansion = true'  				EnableValueNumbering = true'  				TwoPassOptimizations = true'  				EnableBitTracker = true'    				EnableMultiThreading = false'  				EnableMethodScanner = false'    				Emulator = EmulatorType.Qemu'  				ImageFormat = ImageFormat.IMG'  				MultibootSpecification = Compiler.Framework.MultibootSpecification.V1'  				PlatformType = PlatformType.x86'  				LinkerFormatType = LinkerFormatType.Elf32'  				EmulatorMemoryInMB = 128'  				DestinationDirectory = Path.Combine(Path.GetTempPath()' "MOSA-UnitTest")'  				FileSystem = BootImage.FileSystem.FAT16'  				InlineMaximum = 12'  				BootLoader = BootLoader.Syslinux_3_72'  				VBEVideo = false'  				Width = 640'  				Height = 480'  				Depth = 32'  				BaseAddress = 0x00500000'  				EmitStaticRelocations = false'  				EmitAllSymbols = false'  				SerialConnectionOption = SerialConnectionOption.TCPServer'  				SerialConnectionPort = 9999'  				SerialConnectionHost = "127.0.0.1"'  				SerialPipeName = "MOSA"'  				ExitOnLaunch = true'  				GenerateNASMFile = false'  				GenerateASMFile = true'  				GenerateMapFile = true'  				GenerateDebugFile = true'  				PlugKorlib = true'  				NoDisplay = !display  			};
Magic Number,Mosa.Utility.UnitTests,UnitTestEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestEngine.cs,UnitTestEngine,The following statement contains a magic number: LauncherOptions = new LauncherOptions()  			{  				EnableSSA = true'  				EnableBasicOptimizations = true'  				EnableSparseConditionalConstantPropagation = true'  				EnableInlineMethods = true'  				EnableLongExpansion = true'  				EnableValueNumbering = true'  				TwoPassOptimizations = true'  				EnableBitTracker = true'    				EnableMultiThreading = false'  				EnableMethodScanner = false'    				Emulator = EmulatorType.Qemu'  				ImageFormat = ImageFormat.IMG'  				MultibootSpecification = Compiler.Framework.MultibootSpecification.V1'  				PlatformType = PlatformType.x86'  				LinkerFormatType = LinkerFormatType.Elf32'  				EmulatorMemoryInMB = 128'  				DestinationDirectory = Path.Combine(Path.GetTempPath()' "MOSA-UnitTest")'  				FileSystem = BootImage.FileSystem.FAT16'  				InlineMaximum = 12'  				BootLoader = BootLoader.Syslinux_3_72'  				VBEVideo = false'  				Width = 640'  				Height = 480'  				Depth = 32'  				BaseAddress = 0x00500000'  				EmitStaticRelocations = false'  				EmitAllSymbols = false'  				SerialConnectionOption = SerialConnectionOption.TCPServer'  				SerialConnectionPort = 9999'  				SerialConnectionHost = "127.0.0.1"'  				SerialPipeName = "MOSA"'  				ExitOnLaunch = true'  				GenerateNASMFile = false'  				GenerateASMFile = true'  				GenerateMapFile = true'  				GenerateDebugFile = true'  				PlugKorlib = true'  				NoDisplay = !display  			};
Magic Number,Mosa.Utility.UnitTests,UnitTestEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestEngine.cs,UnitTestEngine,The following statement contains a magic number: LauncherOptions = new LauncherOptions()  			{  				EnableSSA = true'  				EnableBasicOptimizations = true'  				EnableSparseConditionalConstantPropagation = true'  				EnableInlineMethods = true'  				EnableLongExpansion = true'  				EnableValueNumbering = true'  				TwoPassOptimizations = true'  				EnableBitTracker = true'    				EnableMultiThreading = false'  				EnableMethodScanner = false'    				Emulator = EmulatorType.Qemu'  				ImageFormat = ImageFormat.IMG'  				MultibootSpecification = Compiler.Framework.MultibootSpecification.V1'  				PlatformType = PlatformType.x86'  				LinkerFormatType = LinkerFormatType.Elf32'  				EmulatorMemoryInMB = 128'  				DestinationDirectory = Path.Combine(Path.GetTempPath()' "MOSA-UnitTest")'  				FileSystem = BootImage.FileSystem.FAT16'  				InlineMaximum = 12'  				BootLoader = BootLoader.Syslinux_3_72'  				VBEVideo = false'  				Width = 640'  				Height = 480'  				Depth = 32'  				BaseAddress = 0x00500000'  				EmitStaticRelocations = false'  				EmitAllSymbols = false'  				SerialConnectionOption = SerialConnectionOption.TCPServer'  				SerialConnectionPort = 9999'  				SerialConnectionHost = "127.0.0.1"'  				SerialPipeName = "MOSA"'  				ExitOnLaunch = true'  				GenerateNASMFile = false'  				GenerateASMFile = true'  				GenerateMapFile = true'  				GenerateDebugFile = true'  				PlugKorlib = true'  				NoDisplay = !display  			};
Magic Number,Mosa.Utility.UnitTests,UnitTestEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestEngine.cs,UnitTestEngine,The following statement contains a magic number: LauncherOptions = new LauncherOptions()  			{  				EnableSSA = true'  				EnableBasicOptimizations = true'  				EnableSparseConditionalConstantPropagation = true'  				EnableInlineMethods = true'  				EnableLongExpansion = true'  				EnableValueNumbering = true'  				TwoPassOptimizations = true'  				EnableBitTracker = true'    				EnableMultiThreading = false'  				EnableMethodScanner = false'    				Emulator = EmulatorType.Qemu'  				ImageFormat = ImageFormat.IMG'  				MultibootSpecification = Compiler.Framework.MultibootSpecification.V1'  				PlatformType = PlatformType.x86'  				LinkerFormatType = LinkerFormatType.Elf32'  				EmulatorMemoryInMB = 128'  				DestinationDirectory = Path.Combine(Path.GetTempPath()' "MOSA-UnitTest")'  				FileSystem = BootImage.FileSystem.FAT16'  				InlineMaximum = 12'  				BootLoader = BootLoader.Syslinux_3_72'  				VBEVideo = false'  				Width = 640'  				Height = 480'  				Depth = 32'  				BaseAddress = 0x00500000'  				EmitStaticRelocations = false'  				EmitAllSymbols = false'  				SerialConnectionOption = SerialConnectionOption.TCPServer'  				SerialConnectionPort = 9999'  				SerialConnectionHost = "127.0.0.1"'  				SerialPipeName = "MOSA"'  				ExitOnLaunch = true'  				GenerateNASMFile = false'  				GenerateASMFile = true'  				GenerateMapFile = true'  				GenerateDebugFile = true'  				PlugKorlib = true'  				NoDisplay = !display  			};
Magic Number,Mosa.Utility.UnitTests,UnitTestEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestEngine.cs,UnitTestEngine,The following statement contains a magic number: LauncherOptions = new LauncherOptions()  			{  				EnableSSA = true'  				EnableBasicOptimizations = true'  				EnableSparseConditionalConstantPropagation = true'  				EnableInlineMethods = true'  				EnableLongExpansion = true'  				EnableValueNumbering = true'  				TwoPassOptimizations = true'  				EnableBitTracker = true'    				EnableMultiThreading = false'  				EnableMethodScanner = false'    				Emulator = EmulatorType.Qemu'  				ImageFormat = ImageFormat.IMG'  				MultibootSpecification = Compiler.Framework.MultibootSpecification.V1'  				PlatformType = PlatformType.x86'  				LinkerFormatType = LinkerFormatType.Elf32'  				EmulatorMemoryInMB = 128'  				DestinationDirectory = Path.Combine(Path.GetTempPath()' "MOSA-UnitTest")'  				FileSystem = BootImage.FileSystem.FAT16'  				InlineMaximum = 12'  				BootLoader = BootLoader.Syslinux_3_72'  				VBEVideo = false'  				Width = 640'  				Height = 480'  				Depth = 32'  				BaseAddress = 0x00500000'  				EmitStaticRelocations = false'  				EmitAllSymbols = false'  				SerialConnectionOption = SerialConnectionOption.TCPServer'  				SerialConnectionPort = 9999'  				SerialConnectionHost = "127.0.0.1"'  				SerialPipeName = "MOSA"'  				ExitOnLaunch = true'  				GenerateNASMFile = false'  				GenerateASMFile = true'  				GenerateMapFile = true'  				GenerateDebugFile = true'  				PlugKorlib = true'  				NoDisplay = !display  			};
Magic Number,Mosa.Utility.UnitTests,UnitTestEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestEngine.cs,UnitTestEngine,The following statement contains a magic number: LauncherOptions = new LauncherOptions()  			{  				EnableSSA = true'  				EnableBasicOptimizations = true'  				EnableSparseConditionalConstantPropagation = true'  				EnableInlineMethods = true'  				EnableLongExpansion = true'  				EnableValueNumbering = true'  				TwoPassOptimizations = true'  				EnableBitTracker = true'    				EnableMultiThreading = false'  				EnableMethodScanner = false'    				Emulator = EmulatorType.Qemu'  				ImageFormat = ImageFormat.IMG'  				MultibootSpecification = Compiler.Framework.MultibootSpecification.V1'  				PlatformType = PlatformType.x86'  				LinkerFormatType = LinkerFormatType.Elf32'  				EmulatorMemoryInMB = 128'  				DestinationDirectory = Path.Combine(Path.GetTempPath()' "MOSA-UnitTest")'  				FileSystem = BootImage.FileSystem.FAT16'  				InlineMaximum = 12'  				BootLoader = BootLoader.Syslinux_3_72'  				VBEVideo = false'  				Width = 640'  				Height = 480'  				Depth = 32'  				BaseAddress = 0x00500000'  				EmitStaticRelocations = false'  				EmitAllSymbols = false'  				SerialConnectionOption = SerialConnectionOption.TCPServer'  				SerialConnectionPort = 9999'  				SerialConnectionHost = "127.0.0.1"'  				SerialPipeName = "MOSA"'  				ExitOnLaunch = true'  				GenerateNASMFile = false'  				GenerateASMFile = true'  				GenerateMapFile = true'  				GenerateDebugFile = true'  				PlugKorlib = true'  				NoDisplay = !display  			};
Magic Number,Mosa.Utility.UnitTests,UnitTestEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestEngine.cs,ProcessQueue,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,Mosa.Utility.UnitTests,UnitTestEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestEngine.cs,WaitUntilComplete,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,Mosa.Utility.UnitTests,UnitTestEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestEngine.cs,ConnectToDebugEngine,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,Mosa.Utility.UnitTests,UnitTestEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestEngine.cs,ConnectToDebugEngine,The following statement contains a magic number: attempt < 100
Magic Number,Mosa.Utility.UnitTests,UnitTestEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestEngine.cs,KillVirtualMachine,The following statement contains a magic number: Process.WaitForExit(5000);
Magic Number,Mosa.Utility.UnitTests,UnitTestEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestEngine.cs,WaitForReady,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,Mosa.Utility.UnitTests,UnitTestEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestEngine.cs,WaitForReady,The following statement contains a magic number: attempt < 100
Magic Number,Mosa.Utility.UnitTests,UnitTestEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestEngine.cs,StartEngine,The following statement contains a magic number: Thread.Sleep(250);
Magic Number,Mosa.Utility.UnitTests,UnitTestEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestEngine.cs,StartEngine,The following statement contains a magic number: attempt < 10
Magic Number,Mosa.Utility.UnitTests,UnitTestEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestEngine.cs,CheckEngine,The following statement contains a magic number: SendOneCount = 10;
Magic Number,Mosa.Utility.UnitTests,UnitTestEngine,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestEngine.cs,MessageCallBack,The following statement contains a magic number: CompletedUnitTestCount % 1000 == 0 && StopWatch.Elapsed.Seconds != 0
Magic Number,Mosa.Utility.UnitTests,UnitTestSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestSystem.cs,Start,The following statement contains a magic number: Console.WriteLine("Elapsed: " + (elapsedDiscovery / 1000.0).ToString("F2") + " secs");
Magic Number,Mosa.Utility.UnitTests,UnitTestSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestSystem.cs,Start,The following statement contains a magic number: Console.WriteLine("Elapsed: " + (elapsedCompile / 1000.0).ToString("F2") + " secs");
Magic Number,Mosa.Utility.UnitTests,UnitTestSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestSystem.cs,Start,The following statement contains a magic number: Console.WriteLine("Elapsed: " + (elapsedPreparing / 1000.0).ToString("F2") + " secs");
Magic Number,Mosa.Utility.UnitTests,UnitTestSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestSystem.cs,Start,The following statement contains a magic number: Console.WriteLine("Elapsed: " + (elapsedExecuting / 1000.0).ToString("F2") + " secs");
Magic Number,Mosa.Utility.UnitTests,UnitTestSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestSystem.cs,Start,The following statement contains a magic number: Console.WriteLine("Total Elapsed: " + (stopwatch.ElapsedMilliseconds / 1000.0) + " secs");
Magic Number,Mosa.Utility.UnitTests,UnitTestSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestSystem.cs,SerializeUnitTestMessage,The following statement contains a magic number: var cmd = new List<int>(4 + 4 + 4 + unitTest.MosaMethod.Signature.Parameters.Count)  				{  					(int)unitTest.MosaMethodAddress'  					GetReturnResultType(unitTest.MosaMethod.Signature.ReturnType)'  					0  				};
Magic Number,Mosa.Utility.UnitTests,UnitTestSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestSystem.cs,SerializeUnitTestMessage,The following statement contains a magic number: var cmd = new List<int>(4 + 4 + 4 + unitTest.MosaMethod.Signature.Parameters.Count)  				{  					(int)unitTest.MosaMethodAddress'  					GetReturnResultType(unitTest.MosaMethod.Signature.ReturnType)'  					0  				};
Magic Number,Mosa.Utility.UnitTests,UnitTestSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestSystem.cs,SerializeUnitTestMessage,The following statement contains a magic number: var cmd = new List<int>(4 + 4 + 4 + unitTest.MosaMethod.Signature.Parameters.Count)  				{  					(int)unitTest.MosaMethodAddress'  					GetReturnResultType(unitTest.MosaMethod.Signature.ReturnType)'  					0  				};
Magic Number,Mosa.Utility.UnitTests,UnitTestSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestSystem.cs,SerializeUnitTestMessage,The following statement contains a magic number: cmd[2] = cmd.Count - 3;
Magic Number,Mosa.Utility.UnitTests,UnitTestSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestSystem.cs,SerializeUnitTestMessage,The following statement contains a magic number: cmd[2] = cmd.Count - 3;
Magic Number,Mosa.Utility.UnitTests.Numbers,C,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Numbers\C.cs,GetSeries,The following statement contains a magic number: var list = new List<char>  			{  				(char)1'  				(char)2'  				(char)127'  				char.MinValue'  				char.MaxValue'  				'0''  				'9''  				'A''  				'Z''  				'a''  				'z''  				' ''  				'\n''  				'\t'  			};
Magic Number,Mosa.Utility.UnitTests.Numbers,C,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Numbers\C.cs,GetSeries,The following statement contains a magic number: var list = new List<char>  			{  				(char)1'  				(char)2'  				(char)127'  				char.MinValue'  				char.MaxValue'  				'0''  				'9''  				'A''  				'Z''  				'a''  				'z''  				' ''  				'\n''  				'\t'  			};
Magic Number,Mosa.Utility.UnitTests.Numbers,I1,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Numbers\I1.cs,GetSeries,The following statement contains a magic number: var list = new List<sbyte>  			{  				0'  				1'  				2'  				sbyte.MinValue'  				sbyte.MaxValue'  				sbyte.MinValue + 1'  				sbyte.MaxValue - 1  			};
Magic Number,Mosa.Utility.UnitTests.Numbers,I2,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Numbers\I2.cs,GetSeries,The following statement contains a magic number: var list = new List<short>  			{  				0'  				1'  				2'  				sbyte.MinValue'  				sbyte.MaxValue'  				sbyte.MinValue + 1'  				sbyte.MaxValue - 1'  				byte.MaxValue'  				byte.MinValue'  				short.MinValue'  				short.MaxValue'  				short.MinValue + 1'  				short.MaxValue - 1  			};
Magic Number,Mosa.Utility.UnitTests.Numbers,I4,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Numbers\I4.cs,GetSeries,The following statement contains a magic number: var list = new List<int>  			{  				0'  				1'  				2'  				sbyte.MinValue'  				sbyte.MaxValue'  				sbyte.MinValue + 1'  				sbyte.MaxValue - 1'  				byte.MaxValue'  				byte.MinValue'  				short.MinValue'  				short.MaxValue'  				short.MinValue + 1'  				short.MaxValue - 1'  				int.MinValue'  				int.MaxValue'  				int.MinValue + 1'  				int.MaxValue - 1  			};
Magic Number,Mosa.Utility.UnitTests.Numbers,I8,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Numbers\I8.cs,GetSeries,The following statement contains a magic number: var list = new List<long>  			{  				0'  				1'  				2'  				sbyte.MinValue'  				sbyte.MaxValue'  				sbyte.MinValue + 1'  				sbyte.MaxValue - 1'  				byte.MaxValue'  				byte.MinValue'  				short.MinValue'  				short.MaxValue'  				short.MinValue + 1'  				short.MaxValue - 1'  				int.MinValue'  				int.MaxValue'  				int.MinValue + 1'  				int.MaxValue - 1'  				long.MinValue'  				long.MaxValue'  				long.MinValue + 1'  				long.MaxValue - 1  			};
Magic Number,Mosa.Utility.UnitTests.Numbers,R4,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Numbers\R4.cs,GetSeries,The following statement contains a magic number: var list = new List<float>  			{  				0'  				1'  				2'  				float.MinValue'  				float.MaxValue'  				float.NaN'  				float.PositiveInfinity'  				float.NegativeInfinity'  				1.00012f'  				17.0002501f'  				23f'  				12321452132.561f'    				// negatives  				-1'  				-2'  				-1.00012f'  				-17.0002501f'  				-23f'  				-12321452132.561f  			};
Magic Number,Mosa.Utility.UnitTests.Numbers,R4,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Numbers\R4.cs,GetSeries,The following statement contains a magic number: var list = new List<float>  			{  				0'  				1'  				2'  				float.MinValue'  				float.MaxValue'  				float.NaN'  				float.PositiveInfinity'  				float.NegativeInfinity'  				1.00012f'  				17.0002501f'  				23f'  				12321452132.561f'    				// negatives  				-1'  				-2'  				-1.00012f'  				-17.0002501f'  				-23f'  				-12321452132.561f  			};
Magic Number,Mosa.Utility.UnitTests.Numbers,R4,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Numbers\R4.cs,GetSeries,The following statement contains a magic number: var list = new List<float>  			{  				0'  				1'  				2'  				float.MinValue'  				float.MaxValue'  				float.NaN'  				float.PositiveInfinity'  				float.NegativeInfinity'  				1.00012f'  				17.0002501f'  				23f'  				12321452132.561f'    				// negatives  				-1'  				-2'  				-1.00012f'  				-17.0002501f'  				-23f'  				-12321452132.561f  			};
Magic Number,Mosa.Utility.UnitTests.Numbers,R4,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Numbers\R4.cs,GetSeries,The following statement contains a magic number: var list = new List<float>  			{  				0'  				1'  				2'  				float.MinValue'  				float.MaxValue'  				float.NaN'  				float.PositiveInfinity'  				float.NegativeInfinity'  				1.00012f'  				17.0002501f'  				23f'  				12321452132.561f'    				// negatives  				-1'  				-2'  				-1.00012f'  				-17.0002501f'  				-23f'  				-12321452132.561f  			};
Magic Number,Mosa.Utility.UnitTests.Numbers,R4,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Numbers\R4.cs,GetSeries,The following statement contains a magic number: var list = new List<float>  			{  				0'  				1'  				2'  				float.MinValue'  				float.MaxValue'  				float.NaN'  				float.PositiveInfinity'  				float.NegativeInfinity'  				1.00012f'  				17.0002501f'  				23f'  				12321452132.561f'    				// negatives  				-1'  				-2'  				-1.00012f'  				-17.0002501f'  				-23f'  				-12321452132.561f  			};
Magic Number,Mosa.Utility.UnitTests.Numbers,R4,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Numbers\R4.cs,GetSeries,The following statement contains a magic number: var list = new List<float>  			{  				0'  				1'  				2'  				float.MinValue'  				float.MaxValue'  				float.NaN'  				float.PositiveInfinity'  				float.NegativeInfinity'  				1.00012f'  				17.0002501f'  				23f'  				12321452132.561f'    				// negatives  				-1'  				-2'  				-1.00012f'  				-17.0002501f'  				-23f'  				-12321452132.561f  			};
Magic Number,Mosa.Utility.UnitTests.Numbers,R4,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Numbers\R4.cs,GetSeries,The following statement contains a magic number: var list = new List<float>  			{  				0'  				1'  				2'  				float.MinValue'  				float.MaxValue'  				float.NaN'  				float.PositiveInfinity'  				float.NegativeInfinity'  				1.00012f'  				17.0002501f'  				23f'  				12321452132.561f'    				// negatives  				-1'  				-2'  				-1.00012f'  				-17.0002501f'  				-23f'  				-12321452132.561f  			};
Magic Number,Mosa.Utility.UnitTests.Numbers,R4,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Numbers\R4.cs,GetSeries,The following statement contains a magic number: var list = new List<float>  			{  				0'  				1'  				2'  				float.MinValue'  				float.MaxValue'  				float.NaN'  				float.PositiveInfinity'  				float.NegativeInfinity'  				1.00012f'  				17.0002501f'  				23f'  				12321452132.561f'    				// negatives  				-1'  				-2'  				-1.00012f'  				-17.0002501f'  				-23f'  				-12321452132.561f  			};
Magic Number,Mosa.Utility.UnitTests.Numbers,R4,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Numbers\R4.cs,GetSeries,The following statement contains a magic number: var list = new List<float>  			{  				0'  				1'  				2'  				float.MinValue'  				float.MaxValue'  				float.NaN'  				float.PositiveInfinity'  				float.NegativeInfinity'  				1.00012f'  				17.0002501f'  				23f'  				12321452132.561f'    				// negatives  				-1'  				-2'  				-1.00012f'  				-17.0002501f'  				-23f'  				-12321452132.561f  			};
Magic Number,Mosa.Utility.UnitTests.Numbers,R4,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Numbers\R4.cs,GetSeries,The following statement contains a magic number: var list = new List<float>  			{  				0'  				1'  				2'  				float.MinValue'  				float.MaxValue'  				float.NaN'  				float.PositiveInfinity'  				float.NegativeInfinity'  				1.00012f'  				17.0002501f'  				23f'  				12321452132.561f'    				// negatives  				-1'  				-2'  				-1.00012f'  				-17.0002501f'  				-23f'  				-12321452132.561f  			};
Magic Number,Mosa.Utility.UnitTests.Numbers,R8,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Numbers\R8.cs,GetSeries,The following statement contains a magic number: var list = new List<double>  			{  				0'  				1'  				2'    				//list.Add(double.MinValue);  				//list.Add(double.MaxValue);  				double.NaN'  				double.PositiveInfinity'  				double.NegativeInfinity'  				17'  				23'  				12321452132'    				// negatives  				-1'  				-2'  				-17'  				-23'  				-12321452132  			};
Magic Number,Mosa.Utility.UnitTests.Numbers,R8,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Numbers\R8.cs,GetSeries,The following statement contains a magic number: var list = new List<double>  			{  				0'  				1'  				2'    				//list.Add(double.MinValue);  				//list.Add(double.MaxValue);  				double.NaN'  				double.PositiveInfinity'  				double.NegativeInfinity'  				17'  				23'  				12321452132'    				// negatives  				-1'  				-2'  				-17'  				-23'  				-12321452132  			};
Magic Number,Mosa.Utility.UnitTests.Numbers,R8,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Numbers\R8.cs,GetSeries,The following statement contains a magic number: var list = new List<double>  			{  				0'  				1'  				2'    				//list.Add(double.MinValue);  				//list.Add(double.MaxValue);  				double.NaN'  				double.PositiveInfinity'  				double.NegativeInfinity'  				17'  				23'  				12321452132'    				// negatives  				-1'  				-2'  				-17'  				-23'  				-12321452132  			};
Magic Number,Mosa.Utility.UnitTests.Numbers,R8,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Numbers\R8.cs,GetSeries,The following statement contains a magic number: var list = new List<double>  			{  				0'  				1'  				2'    				//list.Add(double.MinValue);  				//list.Add(double.MaxValue);  				double.NaN'  				double.PositiveInfinity'  				double.NegativeInfinity'  				17'  				23'  				12321452132'    				// negatives  				-1'  				-2'  				-17'  				-23'  				-12321452132  			};
Magic Number,Mosa.Utility.UnitTests.Numbers,R8,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Numbers\R8.cs,GetSeries,The following statement contains a magic number: var list = new List<double>  			{  				0'  				1'  				2'    				//list.Add(double.MinValue);  				//list.Add(double.MaxValue);  				double.NaN'  				double.PositiveInfinity'  				double.NegativeInfinity'  				17'  				23'  				12321452132'    				// negatives  				-1'  				-2'  				-17'  				-23'  				-12321452132  			};
Magic Number,Mosa.Utility.UnitTests.Numbers,R8,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Numbers\R8.cs,GetSeries,The following statement contains a magic number: var list = new List<double>  			{  				0'  				1'  				2'    				//list.Add(double.MinValue);  				//list.Add(double.MaxValue);  				double.NaN'  				double.PositiveInfinity'  				double.NegativeInfinity'  				17'  				23'  				12321452132'    				// negatives  				-1'  				-2'  				-17'  				-23'  				-12321452132  			};
Magic Number,Mosa.Utility.UnitTests.Numbers,R8,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Numbers\R8.cs,GetSeries,The following statement contains a magic number: var list = new List<double>  			{  				0'  				1'  				2'    				//list.Add(double.MinValue);  				//list.Add(double.MaxValue);  				double.NaN'  				double.PositiveInfinity'  				double.NegativeInfinity'  				17'  				23'  				12321452132'    				// negatives  				-1'  				-2'  				-17'  				-23'  				-12321452132  			};
Magic Number,Mosa.Utility.UnitTests.Numbers,R8,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Numbers\R8.cs,GetSeries,The following statement contains a magic number: var list = new List<double>  			{  				0'  				1'  				2'    				//list.Add(double.MinValue);  				//list.Add(double.MaxValue);  				double.NaN'  				double.PositiveInfinity'  				double.NegativeInfinity'  				17'  				23'  				12321452132'    				// negatives  				-1'  				-2'  				-17'  				-23'  				-12321452132  			};
Magic Number,Mosa.Utility.UnitTests.Numbers,U1,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Numbers\U1.cs,GetSeries,The following statement contains a magic number: var list = new List<byte>  			{  				0'  				1'  				2'  				byte.MinValue'  				byte.MaxValue'  				byte.MinValue + 1'  				byte.MaxValue - 1  			};
Magic Number,Mosa.Utility.UnitTests.Numbers,U2,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Numbers\U2.cs,GetSeries,The following statement contains a magic number: var list = new List<ushort>  			{  				0'  				1'  				2'  				byte.MinValue'  				byte.MaxValue'  				byte.MinValue + 1'  				byte.MaxValue - 1'  				ushort.MinValue'  				ushort.MaxValue'  				ushort.MinValue + 1'  				ushort.MaxValue - 1  			};
Magic Number,Mosa.Utility.UnitTests.Numbers,U4,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Numbers\U4.cs,GetSeries,The following statement contains a magic number: var list = new List<uint>  			{  				0'  				1'  				2'  				byte.MinValue'  				byte.MaxValue'  				byte.MinValue + 1'  				byte.MaxValue - 1'  				ushort.MinValue'  				ushort.MaxValue'  				ushort.MinValue + 1'  				ushort.MaxValue - 1'  				uint.MinValue'  				uint.MaxValue'  				uint.MinValue + 1'  				uint.MaxValue - 1  			};
Magic Number,Mosa.Utility.UnitTests.Numbers,U8,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Numbers\U8.cs,GetSeries,The following statement contains a magic number: var list = new List<ulong>  			{  				0'  				1'  				2'  				byte.MinValue'  				byte.MaxValue'  				byte.MinValue + 1'  				byte.MaxValue - 1'  				ushort.MinValue'  				ushort.MaxValue'  				ushort.MinValue + 1'  				ushort.MaxValue - 1'  				uint.MinValue'  				uint.MaxValue'  				uint.MinValue + 1'  				uint.MaxValue - 1'  				ulong.MinValue'  				ulong.MaxValue'  				ulong.MinValue + 1'  				ulong.MaxValue - 1  			};
Missing Default,Mosa.Utility.UnitTests,Discovery,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\Discovery.cs,GetParam,The following switch statement is missing a default case: switch (index)  			{  				case 1: return unitTest.Param1 ?? unitTest.ParamSeries1;  				case 2: return unitTest.Param2 ?? unitTest.ParamSeries2;  				case 3: return unitTest.Param3 ?? unitTest.ParamSeries3;  				case 4: return unitTest.Param4 ?? unitTest.ParamSeries4;  				case 5: return unitTest.Param5 ?? unitTest.ParamSeries5;  			}
Missing Default,Mosa.Utility.UnitTests,UnitTestSystem,C:\research\architectureSmells\repos\mosa_MOSA-Project\Source\Mosa.Utility.UnitTests\UnitTestSystem.cs,OutputUnitTestResult,The following switch statement is missing a default case: switch (unitTest.Status)  			{  				case UnitTestStatus.Failed: sb.Append("FAILED"); break;  				case UnitTestStatus.FailedByCrash: sb.Append("CRASHED"); break;  				case UnitTestStatus.Skipped: sb.Append("SKIPPED"); break;  				case UnitTestStatus.Passed: sb.Append("OK"); break;  				case UnitTestStatus.Pending: sb.Append("PENDING"); break;  			}
